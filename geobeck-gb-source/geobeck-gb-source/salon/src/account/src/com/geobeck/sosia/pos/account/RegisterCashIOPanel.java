/*
 * RegisterCashIOPanel.java
 *
 * Created on 2007/04/11, 11:07
 */

package com.geobeck.sosia.pos.account;

import java.awt.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.data.account.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.*;

/**
 *
 * @author  katagiri
 */
public class RegisterCashIOPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	
	/**
	 * Creates new form RegisterCashIOPanel
	 */
	public RegisterCashIOPanel()
	{
		initComponents();
		this.setPath("ê∏éZä«óù");
		this.setTitle("ÉåÉWèoî[í†");
		this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ioGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        date = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel1 = new javax.swing.JLabel();
        in = new javax.swing.JRadioButton();
        out = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        cashValue = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        staff = new javax.swing.JComboBox();
        todayButton = new javax.swing.JButton();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        shopLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        useFor = new com.geobeck.swing.JFormattedTextFieldEx();
        type = new javax.swing.JTabbedPane();
        allScrollPane = new javax.swing.JScrollPane();
        ioTable = new javax.swing.JTable();
        inScrollPane = new javax.swing.JScrollPane();
        inTable = new javax.swing.JTable();
        outScrollPane = new javax.swing.JScrollPane();
        outTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        inTotal = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel7 = new javax.swing.JLabel();
        outTotal = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        date.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        date.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        date.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dateItemStateChanged(evt);
            }
        });
        date.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                datePropertyChange(evt);
            }
        });

        jLabel1.setText("ì˙ït");

        ioGroup.add(in);
        in.setSelected(true);
        in.setText("ì¸ã‡");
        in.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        in.setMargin(new java.awt.Insets(0, 0, 0, 0));
        in.setOpaque(false);

        ioGroup.add(out);
        out.setText("èoã‡");
        out.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        out.setMargin(new java.awt.Insets(0, 0, 0, 0));
        out.setOpaque(false);

        jLabel2.setText("ã‡äz");

        cashValue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cashValue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel3.setText("â~");

        jLabel4.setText("ópìr");

        jLabel5.setText("íSìñé“");

        staff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        todayButton.setIcon(SystemInfo.getImageIcon("/button/common/today_off.jpg"));
        todayButton.setBorderPainted(false);
        todayButton.setContentAreaFilled(false);
        todayButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/today_on.jpg"));
        todayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todayButtonActionPerformed(evt);
            }
        });

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        shopLabel.setText("ìXï‹");

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setContentAreaFilled(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setContentAreaFilled(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setEnabled(false);
        deleteButton.setFocusable(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        clearButton.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg"));
        clearButton.setBorderPainted(false);
        clearButton.setContentAreaFilled(false);
        clearButton.setFocusable(false);
        clearButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg"));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        useFor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        useFor.setInputKanji(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staff, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(useFor, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(in, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(out, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cashValue, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(shopLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(todayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(renewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {shop, staff});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shopLabel))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(todayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(in)
                            .addComponent(out)
                            .addComponent(jLabel2)
                            .addComponent(cashValue, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(staff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(useFor, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(renewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        allScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        ioTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ì¸ã‡", "èoã‡", "íSìñé“", "ópìr"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ioTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        ioTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ioTable.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(ioTable, SystemInfo.getTableHeaderRenderer());
        ioTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(ioTable);
        ioTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ioTableMouseReleased(evt);
            }
        });
        ioTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ioTableKeyReleased(evt);
            }
        });
        allScrollPane.setViewportView(ioTable);

        type.addTab("Å@Å@ëSÇƒÅ@Å@", allScrollPane);

        inScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        inTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ì¸ã‡", "íSìñé“", "ópìr"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        inTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        inTable.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(inTable, SystemInfo.getTableHeaderRenderer());
        inTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(inTable);
        inTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                inTableMouseReleased(evt);
            }
        });
        inTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inTableKeyReleased(evt);
            }
        });
        inScrollPane.setViewportView(inTable);

        type.addTab("Å@ì¸ã‡àÍóóÅ@", inScrollPane);

        outScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        outTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "èoã‡", "íSìñé“", "ópìr"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        outTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        outTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        outTable.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(outTable, SystemInfo.getTableHeaderRenderer());
        outTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(outTable);
        outTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                outTableMouseReleased(evt);
            }
        });
        outTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outTableKeyReleased(evt);
            }
        });
        outScrollPane.setViewportView(outTable);

        type.addTab("Å@èoã‡àÍóóÅ@", outScrollPane);

        jPanel2.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N
        jLabel6.setText("ì¸ã‡");

        inTotal.setEditable(false);
        inTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        inTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        inTotal.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N

        jLabel7.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N
        jLabel7.setText("â~");

        outTotal.setEditable(false);
        outTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        outTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        outTotal.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N

        jLabel9.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N
        jLabel9.setText("èoã‡");

        jLabel8.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N
        jLabel8.setText("â~");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(70, 70, 70)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addContainerGap(139, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel6)
                .addComponent(jLabel7)
                .addComponent(inTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel8)
                .addComponent(jLabel9)
                .addComponent(outTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(type, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(type, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void inTableMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_inTableMouseReleased
	{//GEN-HEADEREND:event_inTableMouseReleased
		this.selectData(inTable);
	}//GEN-LAST:event_inTableMouseReleased

	private void inTableKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_inTableKeyReleased
	{//GEN-HEADEREND:event_inTableKeyReleased
		this.selectData(inTable);
	}//GEN-LAST:event_inTableKeyReleased

	private void outTableMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_outTableMouseReleased
	{//GEN-HEADEREND:event_outTableMouseReleased
		this.selectData(outTable);
	}//GEN-LAST:event_outTableMouseReleased

	private void outTableKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_outTableKeyReleased
	{//GEN-HEADEREND:event_outTableKeyReleased
		this.selectData(outTable);
	}//GEN-LAST:event_outTableKeyReleased

	private void ioTableMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_ioTableMouseReleased
	{//GEN-HEADEREND:event_ioTableMouseReleased
		this.selectData(ioTable);
	}//GEN-LAST:event_ioTableMouseReleased

	private void ioTableKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_ioTableKeyReleased
	{//GEN-HEADEREND:event_ioTableKeyReleased
		this.selectData(ioTable);
	}//GEN-LAST:event_ioTableKeyReleased

	private void dateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dateItemStateChanged
		this.showData();
	}//GEN-LAST:event_dateItemStateChanged

	private void datePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_datePropertyChange
		this.showData();
	}//GEN-LAST:event_datePropertyChange

	private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
	{//GEN-HEADEREND:event_clearButtonActionPerformed
		this.clear();
	}//GEN-LAST:event_clearButtonActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		this.regist(false);
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
		this.regist(true);
	}//GEN-LAST:event_addButtonActionPerformed

	private void shopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopActionPerformed
	{//GEN-HEADEREND:event_shopActionPerformed
		this.showData();
	}//GEN-LAST:event_shopActionPerformed

	private void todayButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_todayButtonActionPerformed
	{//GEN-HEADEREND:event_todayButtonActionPerformed
		date.setDate(new java.util.Date());
	}//GEN-LAST:event_todayButtonActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JScrollPane allScrollPane;
    private com.geobeck.swing.JFormattedTextFieldEx cashValue;
    private javax.swing.JButton clearButton;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo date;
    private javax.swing.JButton deleteButton;
    private javax.swing.JRadioButton in;
    private javax.swing.JScrollPane inScrollPane;
    private javax.swing.JTable inTable;
    private com.geobeck.swing.JFormattedTextFieldEx inTotal;
    private javax.swing.ButtonGroup ioGroup;
    private javax.swing.JTable ioTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton out;
    private javax.swing.JScrollPane outScrollPane;
    private javax.swing.JTable outTable;
    private com.geobeck.swing.JFormattedTextFieldEx outTotal;
    private javax.swing.JButton renewButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JComboBox staff;
    private javax.swing.JButton todayButton;
    private javax.swing.JTabbedPane type;
    private com.geobeck.swing.JFormattedTextFieldEx useFor;
    // End of variables declaration//GEN-END:variables
	
	private RegisterCashIO		rcio		=	null;
	private	DataCashIO			currentData	=	null;
	
	
	/**
	 * ÉåÉWì¸èoã‡âÊñ ópFocusTraversalPolicy
	 */
	private	RegisterCashIOFocusTraversalPolicy	ftp	=
			new RegisterCashIOFocusTraversalPolicy();
	
	/**
	 * ì¸èoã‡âÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
	 * @return ì¸èoã‡âÊñ ópFocusTraversalPolicy
	 */
	public RegisterCashIOFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	private void init()
	{
		rcio	=	new RegisterCashIO();
		this.setSize(833, 691);
		SystemInfo.initGroupShopComponents(shop, 2);
		staff.addItem(new MstStaff());
		SystemInfo.initStaffComponent(staff);
		
		this.setListener();
		
		this.setTableColumnWidth(ioTable, 0);
		this.setTableColumnWidth(inTable, 1);
		this.setTableColumnWidth(outTable, 2);
	}
	
	
	private void setListener()
	{
		shop.addKeyListener(SystemInfo.getMoveNextField());
		date.addKeyListener(SystemInfo.getMoveNextField());
		in.addKeyListener(SystemInfo.getMoveNextField());
		out.addKeyListener(SystemInfo.getMoveNextField());
		cashValue.addKeyListener(SystemInfo.getMoveNextField());
		cashValue.addFocusListener(SystemInfo.getSelectText());
		staff.addKeyListener(SystemInfo.getMoveNextField());
		useFor.addKeyListener(SystemInfo.getMoveNextField());
		useFor.addFocusListener(SystemInfo.getSelectText());
	}
	
	private void setTableColumnWidth(JTable table, int type)
	{
		table.getColumnModel().getColumn(0).setPreferredWidth(100);
		
		if(type == 0)
		{
			table.getColumnModel().getColumn(1).setPreferredWidth(100);
			table.getColumnModel().getColumn(3).setPreferredWidth(200);
		}
		else
		{
			table.getColumnModel().getColumn(2).setPreferredWidth(200);
		}
	}
	
	private MstShop getSelectedShop()
	{
		if(0 <= shop.getSelectedIndex())
		{
			return	(MstShop)shop.getSelectedItem();
		}
		else
		{
			return	null;
		}
	}
	
	private GregorianCalendar getSelectedDate()
	{
		if(date.isSelected())
		{
			GregorianCalendar	temp	=	new GregorianCalendar();
			temp.setTime(date.getDate());
			return	temp;
		}
		else
		{
			return	null;
		}
	}
	
	private Integer getInputValue()
	{
		if(!cashValue.getText().equals(""))
		{
			return	Integer.parseInt(cashValue.getText());
		}
		
		return	0;
	}
	
	private MstStaff getSelectedStaff()
	{
		if(0 <= staff.getSelectedIndex())
		{
			return	(MstStaff)staff.getSelectedItem();
		}
		else
		{
			return	null;
		}
	}
	
	private void clear()
	{
		currentData	=	new DataCashIO();
		in.setSelected(true);
		cashValue.setText("");
		if(0 < staff.getItemCount())
		{
			staff.setSelectedIndex(0);
		}
		useFor.setText("");
		
		this.changeButtonEnabled();
		
		ioTable.clearSelection();
		inTable.clearSelection();
		outTable.clearSelection();
	}
	
	private void changeButtonEnabled()
	{
		boolean	enabled	=	(currentData != null && currentData.getIoNo() != null && 0 < currentData.getIoNo());
		renewButton.setEnabled(enabled);
		deleteButton.setEnabled(enabled);
	}
	
	private void showData()
	{
		rcio.setShop(this.getSelectedShop());
		rcio.setDate(this.getSelectedDate());
		
		this.clear();
		rcio.load();
		
		this.showTableData(ioTable, 0);
		this.showTableData(inTable, 1);
		this.showTableData(outTable, 2);
		
		inTotal.setText(rcio.getInTotal().toString());
		outTotal.setText(rcio.getOutTotal().toString());
	}
	
	private void showTableData(JTable table, int type)
	{
		SwingUtil.clearTable(table);
		
		DefaultTableModel	model	=	(DefaultTableModel)table.getModel();
		
		for(DataCashIO dcio : rcio)
		{
			if(type == 0 || (type == 1 && dcio.isIn()) || (type == 2 && !dcio.isIn()))
			{
				Vector<Object>	temp	=	new Vector<Object>();
				
				if(type == 0)
				{
					if(dcio.isIn())
					{
						temp.add(dcio.getValue());
						temp.add(null);
					}
					else
					{
						temp.add(null);
						temp.add(dcio.getValue());
					}
				}
				else
				{
					temp.add(dcio.getValue());
				}
				
				temp.add(dcio.getStaff().getFullStaffName());
				temp.add(dcio);
				
				model.addRow(temp);
			}
		}
	}
	
	private void selectData(JTable table)
	{
		if(0 <= table.getSelectedRow())
		{
			currentData	=	(DataCashIO)table.getValueAt(
					table.getSelectedRow(), table.getColumnCount() - 1);
			
			this.showCurrentData();
		}
		
		this.changeButtonEnabled();
	}
	
	private void showCurrentData()
	{
		if(currentData.isIn())
		{
			in.setSelected(true);
		}
		else
		{
			out.setSelected(true);
		}
		
		cashValue.setText(currentData.getValue().toString());
		staff.setSelectedItem(currentData.getStaff());
		useFor.setText(currentData.getUseFor());
	}
	
	private void regist(boolean isAdd)
	{
		if(!this.checkInput())
		{
			return;
		}
		
		this.setData();
		
		if(isAdd)
		{
			currentData.setIoNo(null);
		}
		
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			try
			{
				con.begin();
				
				if(currentData.regist(con))
				{
					con.commit();
					this.showData();
				}
				else
				{
					con.rollback();
				}
			}
			catch(SQLException e)
			{
				con.rollback();
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	private boolean checkInput()
	{
		if(this.getSelectedShop() == null)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED, "ìXï‹"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return	false;
		}
		
		if(this.getSelectedDate() == null)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED, "ì˙ït"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return	false;
		}
		
		if(this.getInputValue() == 0)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ã‡äz"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return	false;
		}
		
		return	true;
	}
	
	private void setData()
	{
		if(currentData == null)
		{
			currentData	=	new DataCashIO();
		}
		
		currentData.setShop(this.getSelectedShop());
		currentData.setIoDate(this.getSelectedDate());
		currentData.setIn(in.isSelected());
		currentData.setValue(this.getInputValue());
		currentData.setStaff(this.getSelectedStaff());
		currentData.setUseFor(useFor.getText());
	}
	
	private void delete()
	{
		if(currentData == null)
		{
			return;
		}
		
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			try
			{
				con.begin();
				
				if(currentData.delete(con))
				{
					con.commit();
					this.showData();
				}
				else
				{
					con.rollback();
				}
			}
			catch(SQLException e)
			{
				con.rollback();
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	
	/**
	 * RegisterCashIOPanelópFocusTraversalPolicy
	 */
	private class RegisterCashIOFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(shop))
			{
				return date;
			}
			else if (aComponent.equals(date))
			{
				return this.getSelectedIO();
			}
			else if (aComponent.equals(in))
			{
				return cashValue;
			}
			else if (aComponent.equals(out))
			{
				return cashValue;
			}
			else if (aComponent.equals(cashValue))
			{
				return staff;
			}
			else if (aComponent.equals(staff))
			{
				return useFor;
			}
			else if (aComponent.equals(useFor))
			{
				return this.getCurrentComponent();
			}
			
			return this.getCurrentComponent();
		}

		/**
		 * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(shop))
			{
				return useFor;
			}
			else if (aComponent.equals(date))
			{
				if(shop.getItemCount() == 1)
				{
					return	useFor;
				}
				else
				{
					return	shop;
				}
			}
			else if (aComponent.equals(in))
			{
				return date;
			}
			else if (aComponent.equals(out))
			{
				return date;
			}
			else if (aComponent.equals(cashValue))
			{
				return this.getSelectedIO();
			}
			else if (aComponent.equals(staff))
			{
				return cashValue;
			}
			else if (aComponent.equals(useFor))
			{
				return staff;
			}
			
			return this.getCurrentComponent();
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer êÊì™ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return this.getCurrentComponent();
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer aContainer - ç≈å„ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return useFor;
		}

		/**
		 * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
		 * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return this.getCurrentComponent();
		}
		
		/**
		 * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * show() Ç‹ÇΩÇÕ setVisible(true) ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA
		 * èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
		 * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA
		 * Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
		 * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
		 * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
		 */
		public Component getInitialComponent(Window window)
		{
			return this.getCurrentComponent();
		}
		
		private Component getCurrentComponent()
		{
			if(shop.getItemCount() == 1)
			{
				return	date;
			}
			else
			{
				return	shop;
			}
		}
		
		private Component getSelectedIO()
		{
			if(in.isSelected())
			{
				return	in;
			}
			else
			{
				return	out;
			}
		}
	}
}
