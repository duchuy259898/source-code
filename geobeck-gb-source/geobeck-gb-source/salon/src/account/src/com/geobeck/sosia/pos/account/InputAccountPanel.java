/*
 * InputAccountPanel.java
 *
 * Created on 2006/10/18, 16:26
 */

package com.geobeck.sosia.pos.account;

import com.geobeck.sosia.pos.data.account.*;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.master.product.MstProduct;
import com.geobeck.sosia.pos.search.account.SearchAccountDialog;
import com.geobeck.sosia.pos.search.product.SearchProductDialog;
import com.geobeck.sosia.pos.search.customer.SearchCustomerDialog;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.account.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.util.*;
import jp.co.flatsoft.fscomponent.*;

/**
 *
 * @author  katagiri
 */
public class InputAccountPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	/**
	 * çsÇÃçÇÇ≥
	 */
	private final int		ROW_HEIGHT	=	21;
	
	/**
	 * ì`ï[ìoò^èàóùÉNÉâÉX
	 */
	private InputAccount	ia	=	new InputAccount();
	
	/**
	 * ì`ï[ì¸óÕâÊñ ópFocusTraversalPolicy
	 */
	private	InputAccountFocusTraversalPolicy	ftp	=
			new InputAccountFocusTraversalPolicy();
	
	/** Creates new form InputAccountPanel */
	public InputAccountPanel()
	{
		super();
		initComponents();
		addMouseCursorChange();
		this.setSize(830, 631);
		this.setListener();
		this.setPath("ê∏éZä«óù");
		this.setTitle("ì`ï[ì¸óÕ");
		this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        productsScrollPane = new javax.swing.JScrollPane();
        products = new com.geobeck.swing.JTableEx();
        salesDate = new FSCalenderCombo(SystemInfo.getSystemDate());
        clearButton = new javax.swing.JButton();
        customerNo = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)customerNo.getDocument()).setDocumentFilter(
            new CustomFilter(15, CustomFilter.ALPHAMERIC));
        billValue = new com.geobeck.swing.JFormattedTextFieldEx();
        salesDateLabel = new javax.swing.JLabel();
        staff = new javax.swing.JComboBox();
        discountsScrollPane = new javax.swing.JScrollPane();
        discounts = new com.geobeck.swing.JTableEx();
        slipNoLabel = new javax.swing.JLabel();
        registButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        staffLabel = new javax.swing.JLabel();
        paymentsScrollPane = new javax.swing.JScrollPane();
        payments = new com.geobeck.swing.JTableEx();
        totalsScrollPane = new javax.swing.JScrollPane();
        totals = new javax.swing.JTable();
        collectBillButton = new javax.swing.JButton();
        slipNo = new com.geobeck.swing.JFormattedTextFieldEx();
        billValueLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        closeButton.setVisible(false);
        searchCustomerButton = new javax.swing.JButton();
        customerName = new com.geobeck.swing.JFormattedTextFieldEx();
        selectProductButton = new javax.swing.JButton();
        searchAccount = new javax.swing.JButton();

        productsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        products.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String []
            {
                "ï™óﬁ", "è§ïiñº", "íPâø", "êîó ", "äÑà¯", "çáåv", "çÌèú"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Long.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        products.setSelectionBackground(new java.awt.Color(220, 220, 220));
        products.setSelectionForeground(new java.awt.Color(0, 0, 0));
        products.getTableHeader().setReorderingAllowed(false);

        TableColumnModel model = products.getColumnModel();
        model.getColumn(2).setCellEditor(new LongCellEditor(new JTextField()));
        model.getColumn(3).setCellEditor(new IntegerCellEditor(new JTextField()));
        model.getColumn(4).setCellEditor(new LongCellEditor(new JTextField()));

        SwingUtil.setJTableHeaderRenderer(products, SystemInfo.getTableHeaderRenderer());
        products.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        products.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                productsPropertyChange(evt);
            }
        });
        products.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                productsFocusGained(evt);
            }
        });

        productsScrollPane.setViewportView(products);

        salesDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        salesDate.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                salesDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                salesDateFocusLost(evt);
            }
        });

        clearButton.setBorderPainted(false);
        clearButton.setContentAreaFilled(false);
        clearButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearButtonActionPerformed(evt);
            }
        });

        customerNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerNo.setColumns(15);
        customerNo.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                customerNoFocusLost(evt);
            }
        });

        billValue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        billValue.setEditable(false);
        billValue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        salesDateLabel.setText("\u58f2\u4e0a\u65e5");

        staff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        discountsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        discounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String []
            {
                "äÑà¯ñº", "ã‡äz"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        discounts.setSelectionBackground(new java.awt.Color(220, 220, 220));
        discounts.getTableHeader().setReorderingAllowed(false);

        model = discounts.getColumnModel();
        model.getColumn(1).setCellEditor(new LongCellEditor(new JTextField()));
        SwingUtil.setJTableHeaderRenderer(discounts, SystemInfo.getTableHeaderRenderer());
        discounts.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        discounts.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                discountsPropertyChange(evt);
            }
        });
        discounts.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                discountsFocusGained(evt);
            }
        });

        discountsScrollPane.setViewportView(discounts);

        slipNoLabel.setText("\u4f1d\u7968No.");

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setContentAreaFilled(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                registButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteButtonActionPerformed(evt);
            }
        });

        staffLabel.setText("\u30ec\u30b8\u62c5\u5f53");

        paymentsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        payments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Object.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        payments.setSelectionBackground(new java.awt.Color(220, 220, 220));
        payments.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(payments, SystemInfo.getTableHeaderRenderer());
        payments.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        payments.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                paymentsPropertyChange(evt);
            }
        });
        payments.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                paymentsFocusGained(evt);
            }
        });

        paymentsScrollPane.setViewportView(payments);

        totalsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        totals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {"è§ïiçáåv", new Long(0)},
                {"äÑà¯çáåv", new Long(0)},
                {"êøãÅã‡äz", new Long(0)},
                {"Åiì‡ê≈Åj", new Long(0)},
                {"åªã‡éxï•", new Long(0)},
                {"ÉJÅ[Éhéxï•", new Long(0)},
                {"êMîÃéxï•", new Long(0)},
                {"Ç®íﬁÇË", new Long(0)}
            },
            new String []
            {
                "çÄñ⁄ñº", "ã‡äz"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        totals.setSelectionBackground(new java.awt.Color(220, 220, 220));
        totals.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(totals, SystemInfo.getTableHeaderRenderer());
        totals.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        totalsScrollPane.setViewportView(totals);

        collectBillButton.setIcon(SystemInfo.getImageIcon("/button/account/collect_bill_off.jpg"));
        collectBillButton.setBorderPainted(false);
        collectBillButton.setContentAreaFilled(false);
        collectBillButton.setEnabled(false);
        collectBillButton.setPressedIcon(SystemInfo.getImageIcon("/button/account/collect_bill_on.jpg"));
        collectBillButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                collectBillButtonActionPerformed(evt);
            }
        });

        slipNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        slipNo.setEditable(false);
        slipNo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        billValueLabel.setText("\u58f2\u639b\u91d1");

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/common/button/control/close_off.png")));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/common/button/control/close_on.png")));
        closeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeButtonActionPerformed(evt);
            }
        });

        searchCustomerButton.setBorderPainted(false);
        searchCustomerButton.setContentAreaFilled(false);
        searchCustomerButton.setFocusable(false);
        searchCustomerButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchCustomerButtonActionPerformed(evt);
            }
        });

        customerName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerName.setEditable(false);

        selectProductButton.setBorderPainted(false);
        selectProductButton.setContentAreaFilled(false);
        selectProductButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                selectProductButtonActionPerformed(evt);
            }
        });

        searchAccount.setIcon(SystemInfo.getImageIcon("/button/search/search_slip_off.jpg"));
        searchAccount.setBorderPainted(false);
        searchAccount.setContentAreaFilled(false);
        searchAccount.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_slip_on.jpg"));
        searchAccount.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchAccountActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(productsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 597, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(slipNoLabel)
                                .add(37, 37, 37)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(slipNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(22, 22, 22)
                                        .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .add(13, 13, 13)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(clearButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(1, 1, 1)
                                        .add(searchAccount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(salesDateLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(salesDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                            .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(staffLabel)
                                    .add(searchCustomerButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(customerNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(customerName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 67, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(collectBillButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(billValueLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(billValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(layout.createSequentialGroup()
                        .add(selectProductButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(494, 494, 494)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(totalsScrollPane, 0, 0, Short.MAX_VALUE)
                    .add(paymentsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .add(discountsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(searchAccount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(clearButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(slipNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(salesDateLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(slipNoLabel))
                                .add(salesDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(searchCustomerButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(customerNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(customerName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(billValueLabel)
                                .add(billValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(staffLabel)
                                .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(selectProductButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                            .add(collectBillButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(24, 24, 24)))
                    .add(layout.createSequentialGroup()
                        .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(discountsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(paymentsScrollPane, 0, 0, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(totalsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(productsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeButtonActionPerformed
	{//GEN-HEADEREND:event_closeButtonActionPerformed
		//parent.removeComponent(this);
		if(this.getOpener() instanceof SearchAccountDialog)
		{
			SearchAccountDialog	sad	=	(SearchAccountDialog)this.getOpener();
			sad.searchAccount();
			sad.showAccount();
		}
		this.showOpener();
	}//GEN-LAST:event_closeButtonActionPerformed

	private void discountsFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_discountsFocusGained
	{//GEN-HEADEREND:event_discountsFocusGained
		discounts.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_discountsFocusGained

	private void discountsPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_discountsPropertyChange
	{//GEN-HEADEREND:event_discountsPropertyChange
		this.changeDiscountValue();
	}//GEN-LAST:event_discountsPropertyChange

	private void paymentsFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_paymentsFocusGained
	{//GEN-HEADEREND:event_paymentsFocusGained
		payments.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_paymentsFocusGained

	private void paymentsPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_paymentsPropertyChange
	{//GEN-HEADEREND:event_paymentsPropertyChange
		this.changePaymentValue();
	}//GEN-LAST:event_paymentsPropertyChange

	private void searchAccountActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchAccountActionPerformed
	{//GEN-HEADEREND:event_searchAccountActionPerformed
		SearchAccountDialog		sad	=	new SearchAccountDialog(parentFrame, true);
		
		sad.setParentDialog(false);
		sad.setVisible(true);
		
		if(sad.getSelectedSlipNo() != null)
		{
			this.load(sad.getSelectedShop(), sad.getSelectedSlipNo());
			this.showData();
		}
	}//GEN-LAST:event_searchAccountActionPerformed

	private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
	{//GEN-HEADEREND:event_clearButtonActionPerformed
		this.init();
	}//GEN-LAST:event_clearButtonActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void registButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_registButtonActionPerformed
	{//GEN-HEADEREND:event_registButtonActionPerformed
		if(this.checkInput())
		{
			ia.getSales().setSlipNo((slipNo.getText().equals("ÅÉêVãKÅÑ") ? null :
				Integer.parseInt(slipNo.getText())));
			if(ia.regist())
			{
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
					this.getTitle(),
					JOptionPane.INFORMATION_MESSAGE);
				/*SosiaPos.getMainFrame().removeComponent(this);
				if(this.getOpener() instanceof SearchAccountDialog)
				{
					SearchAccountDialog	sad	=	(SearchAccountDialog)this.getOpener();
					sad.searchAccount();
					sad.showAccount();
				}
				this.showOpener();
				this.dispose();*/
			}
			else
			{
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "ì`ï[ÉfÅ[É^"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_registButtonActionPerformed

	private void collectBillButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_collectBillButtonActionPerformed
	{//GEN-HEADEREND:event_collectBillButtonActionPerformed
		if(ia.getBill().getSlipNo() != null)
		{
			SystemInfo.getLogger().log(Level.INFO, "îÑä|âÒé˚");
			CollectBillPanel		cbp	=	new CollectBillPanel();
			cbp.setOpener(this);
			cbp.init(ia.getBill().getSlipNo());
			this.setVisible(false);
			parentFrame.changeContents(cbp);
		}
		else
		{
			SystemInfo.getLogger().log(Level.INFO, "îÑä|àÍóó");
			BillsListPanel		blp	=	new BillsListPanel(ia.getSales().getCustomer().getCustomerID());
			blp.setOpener(this);
			this.setVisible(false);
			parentFrame.changeContents(blp);
		}
	}//GEN-LAST:event_collectBillButtonActionPerformed

	private void salesDateFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_salesDateFocusLost
	{//GEN-HEADEREND:event_salesDateFocusLost
		ia.getSales().setSalesDate(salesDate.getDate());
	}//GEN-LAST:event_salesDateFocusLost

	private void salesDateFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_salesDateFocusGained
	{//GEN-HEADEREND:event_salesDateFocusGained
		salesDate.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_salesDateFocusGained

	private void customerNoFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_customerNoFocusLost
	{//GEN-HEADEREND:event_customerNoFocusLost
		this.setCustomer();
		this.setBill();
	}//GEN-LAST:event_customerNoFocusLost

	private void searchCustomerButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchCustomerButtonActionPerformed
	{//GEN-HEADEREND:event_searchCustomerButtonActionPerformed
		SystemInfo.getLogger().log(Level.INFO, "å⁄ãqåüçı");
		SearchCustomerDialog		sc	=	new SearchCustomerDialog(parentFrame, true);
		sc.setVisible(true);
		
		if(sc.getSelectedCustomer() != null &&
			!sc.getSelectedCustomer().getCustomerID().equals(""))
		{
			customerNo.setText(sc.getSelectedCustomer().getCustomerNo());
			customerName.setText(sc.getSelectedCustomer().getFullCustomerName());
			ia.getSales().setCustomer(sc.getSelectedCustomer());
			this.setBill();
			staff.requestFocusInWindow();
		}
		
		sc = null;
	}//GEN-LAST:event_searchCustomerButtonActionPerformed

	private void selectProductButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectProductButtonActionPerformed
	{//GEN-HEADEREND:event_selectProductButtonActionPerformed
		SystemInfo.getLogger().log(Level.INFO, "è§ïiåüçı");
		SearchProductDialog		sp	=	new SearchProductDialog(parentFrame, true);
		sp.setVisible(true);
		
		if(sp.getSelectedProduct() != null)
		{
			ia.addSalesDetail(sp.getSelectedProduct());
			
			this.addProductRow(ia.getSales().get(ia.getSales().size() - 1));
			this.setTotal();
		}
		
		sp = null;
	}//GEN-LAST:event_selectProductButtonActionPerformed

	private void productsFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_productsFocusGained
	{//GEN-HEADEREND:event_productsFocusGained
		products.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_productsFocusGained

	private void productsPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_productsPropertyChange
	{//GEN-HEADEREND:event_productsPropertyChange
		this.changeProducts();
	}//GEN-LAST:event_productsPropertyChange
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.geobeck.swing.JFormattedTextFieldEx billValue;
    private javax.swing.JLabel billValueLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton collectBillButton;
    private com.geobeck.swing.JFormattedTextFieldEx customerName;
    private com.geobeck.swing.JFormattedTextFieldEx customerNo;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JTableEx discounts;
    private javax.swing.JScrollPane discountsScrollPane;
    private com.geobeck.swing.JTableEx payments;
    private javax.swing.JScrollPane paymentsScrollPane;
    private com.geobeck.swing.JTableEx products;
    private javax.swing.JScrollPane productsScrollPane;
    private javax.swing.JButton registButton;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo salesDate;
    private javax.swing.JLabel salesDateLabel;
    private javax.swing.JButton searchAccount;
    private javax.swing.JButton searchCustomerButton;
    private javax.swing.JButton selectProductButton;
    private com.geobeck.swing.JFormattedTextFieldEx slipNo;
    private javax.swing.JLabel slipNoLabel;
    private javax.swing.JComboBox staff;
    private javax.swing.JLabel staffLabel;
    private javax.swing.JTable totals;
    private javax.swing.JScrollPane totalsScrollPane;
    // End of variables declaration//GEN-END:variables
	
	private ArrayList<JButton>	delButtonArray	=	new ArrayList<JButton>();
	
	public void setOpener(Component opener)
	{
		this.opener = opener;
		closeButton.setVisible(this.getOpener() != null);
	}
	
	/**
	 * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(registButton);
		SystemInfo.addMouseCursorChange(deleteButton);
		SystemInfo.addMouseCursorChange(clearButton);
		SystemInfo.addMouseCursorChange(searchAccount);
		SystemInfo.addMouseCursorChange(searchCustomerButton);
		SystemInfo.addMouseCursorChange(collectBillButton);
		SystemInfo.addMouseCursorChange(selectProductButton);
		SystemInfo.addMouseCursorChange(closeButton);
	}
	
	/**
	 * ÉRÉìÉ|Å[ÉlÉìÉgÇÃäeÉäÉXÉiÅ[ÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	private void setListener()
	{
		customerNo.addKeyListener(SystemInfo.getMoveNextField());
		customerNo.addFocusListener(SystemInfo.getSelectText());
		customerName.addKeyListener(SystemInfo.getMoveNextField());
		salesDate.addKeyListener(SystemInfo.getMoveNextField());
		salesDate.addFocusListener(SystemInfo.getSelectText());
		slipNo.addKeyListener(SystemInfo.getMoveNextField());
		slipNo.addFocusListener(SystemInfo.getSelectText());
		staff.addKeyListener(SystemInfo.getMoveNextField());
	}
	
	/**
	 * ñæç◊ÇÃóÒÇèâä˙âªÇ∑ÇÈÅB
	 */
	private void initProductsColumn()
	{
		//óÒÇÃïùÇê›íËÇ∑ÇÈÅB
		products.getColumnModel().getColumn(0).setPreferredWidth(60);
		products.getColumnModel().getColumn(1).setPreferredWidth(110);
		products.getColumnModel().getColumn(2).setPreferredWidth(50);
		products.getColumnModel().getColumn(3).setPreferredWidth(40);
		products.getColumnModel().getColumn(4).setPreferredWidth(50);
		products.getColumnModel().getColumn(5).setPreferredWidth(60);
		products.getColumnModel().getColumn(6).setPreferredWidth(60);
		//óÒïùÇ™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÅAçÌèúÉ{É^ÉìÇà⁄ìÆÇ∑ÇÈ
		products.getColumnModel().addColumnModelListener(
			new TableColumnModelListener()
			{
				public void columnAdded(TableColumnModelEvent e){}
				public void columnMarginChanged(ChangeEvent e)
				{
					moveDeleteButton();
				}
				public void columnMoved(TableColumnModelEvent e){}
				public void columnRemoved(TableColumnModelEvent e){}
				public void columnSelectionChanged(ListSelectionEvent e){}
			});
	}
	
	/**
	 * ñæç◊ÇÃçÌèúÉ{É^ÉìÇÉZÉãÇ…çáÇÌÇπÇƒà⁄ìÆÇ∑ÇÈÅB
	 */
	private void moveDeleteButton()
	{
		Rectangle	delRect	=	products.getCellRect(products.getRowCount() - 1,
					6, true);
		for(JButton delButton : delButtonArray)
		{
			delButton.setSize((int)delRect.getWidth(), ROW_HEIGHT - 1);
			delButton.setLocation((int)delRect.getX(), delButton.getY());
		}
	}
	
	/**
	 * ì`ï[ì¸óÕâÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
	 * @return ì`ï[ì¸óÕâÊñ ópFocusTraversalPolicy
	 */
	public InputAccountFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * èâä˙âªèàóùÇçsÇ§ÅB
	 */
	private void init()
	{
		ia.init();
		
		this.initStaff();
		this.initProducts();
		this.initDiscounts();
		ia.getSales().addDiscount(new MstDiscount(), 0l);
		delButtonArray.clear();
		this.initPayments();
		this.initTotal();
	}
	
	/**
	 * ÉåÉWíSìñé“Çèâä˙âªÇ∑ÇÈÅB
	 */
	private void initStaff()
	{
		staff.removeAllItems();
		
		for(MstStaff ms : ia.getStaffs())
		{
			staff.addItem(ms);
		}
		
		staff.setSelectedIndex(0);
	}
	
	/**
	 * è⁄ç◊ïîÇÃèâä˙âªèàóùÇçsÇ§ÅB
	 */
	private void initProducts()
	{
		DefaultTableModel	model	=	(DefaultTableModel)products.getModel();
		
		//ëSçsçÌèú
		model.setRowCount(0);
		products.removeAll();
	}
	
	/**
	 * è⁄ç◊Çí«â¡Ç∑ÇÈÅB
	 * @param dsd ì`ï[è⁄ç◊ÉfÅ[É^
	 */
	private void addProductRow(DataSalesDetail dsd)
	{
		DefaultTableModel	model	=	(DefaultTableModel)products.getModel();
		
		MstProduct	mp	=	dsd.getProduct();
		
		JButton		deleteButton	=	new JButton("\u524a\u9664");
		
		
		model.addRow(new Object[]{	mp.getProductClass().getProductClassName(),
										mp.getProductName(),
										dsd.getProductValue(),
										dsd.getProductNum(),
										dsd.getDiscountValue(),
										dsd.getTotal(),
										" "});
		
		//çÌèúÉ{É^Éì
		if(delButtonArray.size() < products.getRowCount())
		{
			final int	index			=	products.getRowCount() - 1;
			JButton		delButton	=	new JButton("\u524a\u9664");
			delButton.setBorderPainted(false);
			delButton.setContentAreaFilled(false);
			delButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/common/button/control/s_delete_off.png")));
			delButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/common/button/control/s_delete_on.png")));
			delButton.setSize(66, 26);
			delButton.addActionListener(new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					deleteProduct(evt, index);
				}
			});

			//çÌèúÉ{É^ÉìÇí«â¡
			Rectangle	delRect	=	products.getCellRect(products.getRowCount() - 1,
						6, false);
			delButton.setSize((int)delRect.getWidth(), ROW_HEIGHT - 1);
			products.add(delButton);
			delButton.setLocation((int)delRect.getX(), (int)delRect.getY());
			delButtonArray.add(products.getRowCount() - 1, delButton);
		}
		else
		{
			delButtonArray.get(products.getRowCount() - 1).setVisible(true);
		}
	}
	
	/**
	 * è⁄ç◊ïîÇ™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
	 */
	private void changeProducts()
	{
		int	row	=	products.getSelectedRow();
		int	col	=	products.getSelectedColumn();
		
		if(row < 0 || col < 0)	return;
		
		switch(col)
		{
			//íPâø
			case 2:
				Long	price		=	(Long)products.getValueAt(row, col);
				ia.getSales().get(row).setProductValue(price);
				break;
			//êîó 
			case 3:
				Integer	num			=	(Integer)products.getValueAt(row, col);
				ia.getSales().get(row).setProductNum(num);
				break;
			//äÑà¯
			case 4:
				Long	discount	=	(Long)products.getValueAt(row, col);
				ia.getSales().get(row).setDiscountValue(discount);
				break;
		}
		
		products.setValueAt(ia.getSales().get(row).getTotal(), row, 5);
		
		this.setTotal();
	}
	
	/**
	 * è⁄ç◊ÇÃçÌèúèàóùÇçsÇ§ÅB
	 * @param evt 
	 */
	private void deleteProduct(ActionEvent evt, int index)
	{
		DefaultTableModel	model	=	(DefaultTableModel)products.getModel();
		
		ia.getSales().remove(index);
		this.setTotal();
		model.removeRow(index);
	}
	
	/**
	 * äÑà¯ïîÇÃèâä˙âªèàóùÇçsÇ§ÅB
	 */
	private void initDiscounts()
	{
		//ëSçsçÌèú
		SwingUtil.clearTable(discounts);
		this.addNewDiscountRow();
	}
	
	/**
	 * äÑà¯Ç…êVãKçsÇí«â¡Ç∑ÇÈÅB
	 */
	private void addNewDiscountRow()
	{
		JComboBox	dCombo	=	new JComboBox();
        dCombo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		
		dCombo.addItem(new MstDiscount());
		for(MstDiscount temp : ia.getDiscounts())
		{
			dCombo.addItem(temp);
		}
		
		dCombo.addActionListener(new java.awt.event.ActionListener()
		{
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
				changeDiscountValue();
			}
		});
		
		DefaultTableModel	model	=	(DefaultTableModel)discounts.getModel();
		
		model.addRow(new Object[]{	dCombo, 0l	});
		
		ia.getSales().addDiscount(new MstDiscount(), 0l);
	}
	
	/**
	 * äÑà¯Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
	 */
	private void changeDiscountValue()
	{
		int	row		=	discounts.getSelectedRow();
		int	col		=	discounts.getSelectedColumn();
		
		if(row < 0 || col < 0)	return;
		
		//äÑà¯ñº
		if(col == 0)
		{
			JComboBox	combo	=	(JComboBox)discounts.getValueAt(row, col);
			MstDiscount	md		=	(MstDiscount)combo.getSelectedItem();
			
			DataSalesDetail	dsd	=	ia.getSales().getDiscounts().get(row);
			
			if(dsd != null && md.getDiscountID() != null)	
					dsd.getProduct().setProductID((md == null ? null : md.getDiscountID()));
		}
		//ã‡äz
		else if(col == 1)
		{
			Long	value	=	(Long)discounts.getValueAt(row, col);
			
			//ç≈èIçsÇ≈ã‡äzÇ™ì¸óÕÇ≥ÇÍÇΩèÍçáÅAçsÇí«â¡
			if(value != null && 0 < value && row == discounts.getRowCount() - 1)
			{
				this.addNewDiscountRow();
			}
			
			DataSalesDetail	dsd	=	ia.getSales().getDiscounts().get(row);
			
			if(dsd != null)	dsd.setDiscountValue(value);
		}
		
		this.setTotal();
	}
	
	/**
	 * éxï•ïîÇÃèâä˙âªèàóùÇçsÇ§ÅB
	 */
	private void initPayments()
	{
		payments.setModel(new PaymentTableModel(SystemInfo.getPaymentClasses()));
		TableColumnModel model = payments.getColumnModel();
		model.getColumn(2).setCellEditor(new LongCellEditor(new JTextField()));
		SwingUtil.setJTableHeaderRenderer(payments, SystemInfo.getTableHeaderRenderer());
		this.initPaymentCells();
		this.addNewPaymentRow(true);
	}
	
	/**
	 * éxï•ïîÇÃÉZÉãÇÃèâä˙âªèàóùÇçsÇ§ÅB
	 */
	private void initPaymentCells()
	{
		PaymentTableModel	model	=	(PaymentTableModel)payments.getModel();
		
		//ëSçsçÌèú
		model.setRowCount(0);
		payments.removeAll();
		
		try
		{
			for(MstPaymentClass mpc : SystemInfo.getPaymentClasses())
			{
				JComboBox	classes	=	new JComboBox(
						new Object[]{	mpc	});
				classes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

				Object		methods	=	this.getPaymentMethodObject(mpc);

				Object[]	rowData	=	{	mpc,
											methods,
											0l	};
				model.addRow(rowData);

				ia.getSales().getPayment(0).addPaymentDetail(mpc,
						(0 == mpc.size() ? null : mpc.get(0)),
						0l);
			}
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * éxï•Ç…êVãKçsÇí«â¡Ç∑ÇÈÅB
	 */
	private void addNewPaymentRow(boolean isAddData)
	{
		JComboBox	classes	=	new JComboBox();
		classes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		Object		methods	=	null;
		MstPaymentClass mpc	=	null;
		
		for(MstPaymentClass temp : SystemInfo.getPaymentClasses())
		{
			if(temp.getPaymentClassID() != 1)
					classes.addItem(temp.getPaymentClassName());
			
			if(classes.getItemCount() == 1)
			{
				mpc	=	temp;
				methods	=	this.getPaymentMethodObject(temp);
			}
		}
		//éxï•ãÊï™Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇí«â¡
		classes.addActionListener(new java.awt.event.ActionListener()
		{
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
				paymentActionPerformed(evt);
			}
		});
		
		PaymentTableModel	model	=	(PaymentTableModel)payments.getModel();
		
		model.addRow(new Object[]{	classes,
										methods,
										0l	});
		
		if(isAddData)
		{
			try
			{
				ia.getSales().getPayment(0).addPaymentDetail(mpc,
						(0 == mpc.size() ? null : mpc.get(0)),
						0l);
			}
			catch(Exception e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
	}
	
	
	private class PaymentTableModel extends DefaultTableModel
	{
		/**
		 * éxï•ãÊï™
		 */
		MstPaymentClasses mpcs	=	null;
		
		/**
		 * ÉRÉìÉXÉgÉâÉNÉ^
		 * @param mpcs éxï•ãÊï™ÇÃÉäÉXÉg
		 */
		public PaymentTableModel(MstPaymentClasses mpcs)
		{
			super(new String[]{"éxï•ãÊï™", "éxï•ï˚ñ@", "ã‡äz"}, 0);
			this.mpcs = mpcs;
			if(this.mpcs == null)
					this.mpcs	=	new MstPaymentClasses();
		}
		
		/**
		 * óÒÇÃÉNÉâÉXÇéÊìæÇ∑ÇÈÅB
		 * @param col óÒ
		 * @return óÒÇÃÉNÉâÉX
		 */
		public Class getColumnClass(int col)
		{
			if(col < 0)	return	null;
			return	this.getValueAt(0, col).getClass();
		}
		
		/**
		 * ÉZÉãÇ™ï“èWâ¬î\Ç©ÇéÊìæÇ∑ÇÈÅB
		 * @param row çs
		 * @param col óÒ
		 * @return true - ï“èWâ¬î\
		 */
		public boolean isCellEditable(int row, int col)
		{
			//éxï•ãÊï™ÇÃéxï•ãÊï™êîà»â∫ÇÃçsÇÃèÍçá
			if(col == 0 && row < mpcs.size())
			{
				return	false;
			}
			//éxï•ï˚ñ@ÇÃéxï•ï˚ñ@Ç™ÇPåèÇÃèÍçá
			if(col == 1 && this.getValueAt(row, col).getClass().getName().equals("java.lang.String"))
			{
				return	false;
			}
			
			return	true;
		}
	}
	
	
	/**
	 * éxï•ï˚ñ@Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÅB
	 * @param evt 
	 */
	public void paymentActionPerformed(java.awt.event.ActionEvent evt)
	{
		int			row		=	payments.getSelectedRow();
		int			col		=	payments.getSelectedColumn();
		
		if(row < 0 || col < 0)	return;
		
		MstPaymentClass		mpc		=	null;
		MstPaymentMethod	mpm		=	null;
		
		//éxï•ãÊï™Ç™å≈íËÇÃçsÇÃèÍçá
		if(0 <= row && row < SystemInfo.getPaymentClasses().size())
		{
			mpc	=	SystemInfo.getPaymentClasses().get(row);
		}
		else
		{
			JComboBox	mpccb	=	(JComboBox)payments.getValueAt(row, 0);
			mpccb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
			int			index	=	mpccb.getSelectedIndex() + 1;
			
			if(0 < index && index <= SystemInfo.getPaymentClasses().size())
			{
				mpc	=	SystemInfo.getPaymentClasses().get(index);
			}
		}
		
		switch(col)
		{
			//éxï•ãÊï™
			case 0:
				if(mpc != null)
				{
					Object	methods	=	this.getPaymentMethodObject(mpc);
					
					payments.setValueAt(methods, row, 1);
				}
				break;
			//éxï•ï˚ñ@
			case 1:
				if(mpc != null && mpc.size() != 0)
				{
					if(mpc.size() == 1)
					{
						mpm	=	mpc.get(0);
					}
					else
					{
						JComboBox	mpccb	=	(JComboBox)payments.getValueAt(row, 1);
						mpccb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
						int			index	=	mpccb.getSelectedIndex() - 1;
						
						if(0 <= index && index < mpc.size())
						{
							mpm	=	mpc.get(index);
						}
					}
				}
				break;
		}
		
		Long	value	=	(Long)payments.getValueAt(row, 2);
		
		try
		{
			ia.getSales().getPayment(0).setPaymentDetail(row, mpc, mpm, value);
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		this.setTotal();
	}
	
	/**
	 * éxï•ÇÃÉRÉìÉ{É{ÉbÉNÉXÇ™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
	 * @param row çs
	 * @param col óÒ
	 */
	private void changePaymentCombo(int row, int col)
	{
		if(row < 0 || col < 0)	return;
		
		MstPaymentClass		mpc		=	null;
		MstPaymentMethod	mpm		=	null;
		
		if(0 <= row && row < SystemInfo.getPaymentClasses().size())
		{
			mpc	=	SystemInfo.getPaymentClasses().get(row);
		}
		else
		{
			JComboBox	mpccb	=	(JComboBox)payments.getValueAt(row, 0);
			int			index	=	mpccb.getSelectedIndex();
			
			if(0 < index && index <= SystemInfo.getPaymentClasses().size())
			{
				mpc	=	SystemInfo.getPaymentClasses().get(index);
			}
		}
		
		switch(col)
		{
			//éxï•ãÊï™
			case 0:
				if(mpc != null)
				{
					Object	methods	=	this.getPaymentMethodObject(mpc);
					
					payments.setValueAt(methods, row, 1);
				}
				else
				{
					payments.setValueAt(null, row, 1);
				}
				break;
			//éxï•ï˚ñ@
			case 1:
				if(mpc != null && mpc.size() != 0)
				{
					if(mpc.size() == 1)
					{
						mpm	=	mpc.get(0);
					}
					else
					{
						JComboBox	mpccb	=	(JComboBox)payments.getValueAt(row, 1);
						int			index	=	mpccb.getSelectedIndex();
						
						if(0 < index && index <= mpc.size())
						{
							mpm	=	mpc.get(index - 1);
						}
					}
				}
				break;
		}
		
		Long	value	=	(Long)payments.getValueAt(row, 2);
		
		try
		{
			ia.getSales().getPayment(0).setPaymentDetail(row, mpc, mpm, value);
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * éxï•ï˚ñ@Ç…ÉZÉbÉgÇ∑ÇÈÉIÉuÉWÉFÉNÉgÇéÊìæÇ∑ÇÈÅB
	 * @param mpc éxï•ãÊï™
	 * @return éxï•ï˚ñ@Ç…ÉZÉbÉgÇ∑ÇÈÉIÉuÉWÉFÉNÉg
	 */
	private Object getPaymentMethodObject(MstPaymentClass mpc)
	{
		Object	methods	=	null;
		
		//éxï•ï˚ñ@Ç™ñ≥Ç¢èÍçá
		if(mpc.size() == 0)
		{
			methods	=	"";
		}
		//éxï•ï˚ñ@Ç™ÇPåèÇÃèÍçá
		else if(mpc.size() == 1)
		{
			methods	=	mpc.get(0).getPaymentMethodName();
		}
		else
		{
			methods	=	new JComboBox();
			((JComboBox)methods).setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
			((JComboBox)methods).addItem(new MstPaymentMethod());
			for(MstPaymentMethod mpm : mpc)
			{
				((JComboBox)methods).addItem(mpm.getPaymentMethodName());
			}

			//éxï•ï˚ñ@Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇí«â¡
			((JComboBox)methods).addActionListener(new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					paymentActionPerformed(evt);
				}
			});
		}
		
		return	methods;
	}
	
	
	/**
	 * çáåvïîÇÃèâä˙âªèàóùÇçsÇ§ÅB
	 */
	private void initTotal()
	{
		DefaultTableModel	model	=	(DefaultTableModel)totals.getModel();
		
		//ëSçsçÌèú
		model.setRowCount(0);
		totals.removeAll();
		
		for(NameValue nv : ia.getTotal())
		{
			model.addRow(new Object[]{	nv.getName(),
											0l	});
		}
	}
	
	/**
	 * çáåvÇÃílÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	private void setTotal()
	{
		ia.setTotal();
		
		int	row	=	0;
		
		for(NameValue nv : ia.getTotal())
		{
			totals.setValueAt(nv.value, row, 1);
			row	++;
		}
	}
	
	/**
	 * å⁄ãqÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	private void setCustomer()
	{
		MstCustomer	cus	=	ia.getSales().getCustomer();
		cus.setCustomerNo(customerNo.getText());
		
		//å⁄ãqÇhÇcÇ™0ÇÃèÍçá
		if(cus.getCustomerID().equals("0"))
		{
			cus	=	new MstCustomer();
			cus.setCustomerName(0, "îÒâÔàı");
			cus.setCustomerName(1, "");
		}
		else
		{
			try
			{
				cus.load(SystemInfo.getConnection());
			}
			catch(SQLException e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		
		customerName.setText(cus.getFullCustomerName());
	}
	
	/**
	 * ÉXÉ^ÉbÉtÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	private void setStaff(String staffID)
	{
		staff.setSelectedIndex(0);
		
		for(int i = 1; i < staff.getItemCount(); i ++)
		{
			MstStaff	ms	=	(MstStaff)staff.getItemAt(i);
			
			if(ms.getStaffID().equals(staffID))
			{
				staff.setSelectedIndex(i);
			}
		}
	}
	
	/**
	 * éxï•ã‡äzÇ™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
	 */
	private void changePaymentValue()
	{
		int	row		=	payments.getSelectedRow();
		int	col		=	payments.getSelectedColumn();
		
		if(row < 0 || col < 0)	return;
		
		if(col == 2)
		{
			Long	value	=	(Long)payments.getValueAt(row, col);
			
			if(value != null && 0 < value && row == payments.getRowCount() - 1)
			{
				this.addNewPaymentRow(true);
			}
			
			try
			{
				DataPaymentDetail	dpd	=	ia.getSales().getPayment(0).get(row);

				if(dpd != null)	dpd.setPaymentValue(value);
			}
			catch(Exception e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		
		this.setTotal();
	}
	
	/**
	 * ì¸óÕÉ`ÉFÉbÉNÇçsÇ§ÅB
	 * @return true - ÇnÇj
	 */
	private boolean checkInput()
	{
		try
		{
			//å⁄ãq
			if(customerNo.getText().equals(""))
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "å⁄ãq"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				customerNo.requestFocusInWindow();
				return	false;
			}
			
			ConnectionWrapper	con	=	SystemInfo.getConnection();

			MstCustomer	mc	=	new MstCustomer(ia.getSales().getCustomer().getCustomerID());
			
			if(!mc.isExists(con))
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_INPUT_NOT_EXIST, "å⁄ãq"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				customerNo.requestFocusInWindow();
				return	false;
			}

			//ÉåÉWíSìñé“
			if(staff.getSelectedIndex() == 0)
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ÉåÉWíSìñé“"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				staff.requestFocusInWindow();
				return	false;
			}
			
			//è§ïi
			if(products.getRowCount() == 0)
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "è§ïi"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				return	false;
			}
			
			//éxï•ã‡äz
			Long	temp	=	0l;
			for(int i = 5; i < ia.getTotal().size() - 2; i ++)
			{
				temp	+=	ia.getTotal(i).getValue();
			}
			if(ia.getTotal(2).getValue() < temp)
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(3000),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				payments.requestFocusInWindow();
				return	false;
			}
			
			//îÑä|ã‡âÒé˚ÉfÅ[É^ÇÃçÌèúämîF
			if(ia.getSales().isExistCollectedBill(con))
			{
				if(MessageDialog.showYesNoDialog(this,
							MessageUtil.getMessage(3001),
							this.getTitle(),
							JOptionPane.QUESTION_MESSAGE) != 0)
				{
					return false;
				}
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e.getCause());
		}
		
		return	true;
	}
	
	/**
	 * îÑä|ã‡ÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	public void setBill()
	{
		ia.loadBill(ia.getSales().getCustomer().getCustomerID());
		
		billValue.setText(ia.getBill().getBillValue().toString());
		
		collectBillButton.setEnabled(0l < ia.getBill().getBillValue());
	}
	
	
	/**
	 * ì¸óÕçÄñ⁄ÇÉNÉäÉAÇ∑ÇÈÅB
	 */
	private void clear()
	{
		slipNo.setText("ÅÉêVãKÅÑ");
		salesDate.setDate(new java.util.Date());
		customerNo.setText("");
		customerName.setText("");
		staff.setSelectedIndex(0);
		billValue.setText("");
	}
	
	/**
	 * ì`ï[ÉfÅ[É^Çì«Ç›çûÇﬁÅB
	 * @param slipNo ì`ï[No.
	 */
	public void load(MstShop shop, Integer slipNo)
	{
		ia.load(shop, slipNo);
		this.setTotal();
	}
	
	/**
	 * ì`ï[ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 */
	public void showData()
	{
		try
		{
			slipNo.setText(ia.getSales().getSlipNo().toString());
			salesDate.setDate(ia.getSales().getSalesDate());
			customerNo.setText(ia.getSales().getCustomer().getCustomerNo());
			customerName.setText(ia.getSales().getCustomer().getFullCustomerName());
			this.setStaff(ia.getSales().getPayment(0).getStaff().getStaffNo());

			//îÑä|ã‡
			this.setBill();

			//ì`ï[è⁄ç◊
			SwingUtil.clearTable(products);
			for(DataSalesDetail dsd : ia.getSales())
			{
				this.addProductRow(dsd);
			}

			int	row	=	0;

			//äÑà¯
			SwingUtil.clearTable(discounts);
			this.initDiscounts();
			for(int index = 0; index < ia.getSales().getDiscounts().size(); index ++)
			{
				DataSalesDetail dsd	=	ia.getSales().getDiscounts().get(index);

				JComboBox	temp	=	(JComboBox)discounts.getValueAt(row, 0);

				for(int i = 1; i < temp.getItemCount(); i ++)
				{
					MstDiscount	md	=	(MstDiscount)temp.getItemAt(i);

					if(md.getDiscountID().toString().equals(dsd.getProduct().getProductID()))
					{
						temp.setSelectedIndex(i);
						discounts.setValueAt(dsd.getDiscountValue(), row, 1);
						this.addNewDiscountRow();
						row	++;
						break;
					}
				}
			}
			discounts.repaint();

			row	=	0;

			//éxï•
			for(DataPaymentDetail dpd : ia.getSales().getPayment(0))
			{
				if(dpd.getPaymentMethod() != null && dpd.getPaymentMethod().getPaymentClass() != null)
				{
					if(row == payments.getRowCount())
					{
						this.addNewPaymentRow(false);
					}
					//éxï•ãÊï™ÇïœçXÇ≈Ç´ÇÈçsÇÃèÍçá
					if(2 < row)
					{
						JComboBox	cb	=	(JComboBox)payments.getValueAt(row, 0);
						this.setJComboBoxItem(cb, dpd.getPaymentMethod().getPaymentClass().getPaymentClassName());
					}
					//åªã‡à»äOÇÃçsÇÃèÍçá
					if(0 < row)
					{
						JComboBox	cb	=	(JComboBox)payments.getValueAt(row, 1);
						this.setJComboBoxItem(cb, dpd.getPaymentMethod().getPaymentMethodName());
					}

					payments.setValueAt(dpd.getPaymentValue(), row, 2);
				}

				row	++;
			}
			
			if(row == payments.getRowCount())
			{
				this.addNewPaymentRow(true);
			}

			payments.repaint();

			this.setTotal();
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * 
	 * @param cb 
	 * @param item 
	 */
	private void setJComboBoxItem(JComboBox cb, String item)
	{
		for(int i = 0; i < cb.getItemCount(); i ++)
		{
			if((cb.getItemAt(i).toString()).equals(item))
			{
				cb.setSelectedIndex(i);
				return;
			}
		}
	}
	
	/**
	 * ì`ï[ÉfÅ[É^ÇÃçÌèúèàóùÇçsÇ§ÅB
	 */
	private void delete()
	{
		if(MessageDialog.showYesNoDialog(this,
					MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, "ì`ï[No." + slipNo.getText()),
					this.getTitle(),
					JOptionPane.WARNING_MESSAGE) != 0)
		{
			return;
		}
		
		try
		{
			ConnectionWrapper con	=	SystemInfo.getConnection();
			
			ia.getSales().deleteAll(con);
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	
	/**
	 * ì`ï[ì¸óÕâÊñ ópFocusTraversalPolicy
	 */
	private class InputAccountFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(slipNo))
			{
				return salesDate;
			}
			else if (aComponent.equals(salesDate))
			{
				return customerNo;
			}
			else if (aComponent.equals(customerNo))
			{
				return staff;
			}
			else if (aComponent.equals(customerName))
			{
				return staff;
			}
			else if (aComponent.equals(staff))
			{
				return products;
			}
			else if (aComponent.equals(billValue))
			{
				return payments;
			}
			else if (aComponent.equals(collectBillButton))
			{
				return payments;
			}
			
			return salesDate;
		}

		/**
		 * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(slipNo))
			{
				return salesDate;
			}
			else if (aComponent.equals(salesDate))
			{
				return salesDate;
			}
			else if (aComponent.equals(customerNo))
			{
				return salesDate;
			}
			else if (aComponent.equals(customerName))
			{
				return customerNo;
			}
			else if (aComponent.equals(staff))
			{
				return customerNo;
			}
			else if (aComponent.equals(billValue))
			{
				return staff;
			}
			else if (aComponent.equals(collectBillButton))
			{
				return staff;
			}
			
			return salesDate;
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer êÊì™ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return salesDate;
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer aContainer - ç≈å„ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return payments;
		}
		
		/**
		 * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
		 * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return salesDate;
		}
		
		/**
		 * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * show() Ç‹ÇΩÇÕ setVisible(true) ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA
		 * èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
		 * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA
		 * Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
		 * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
		 * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
		 */
		public Component getInitialComponent(Window window)
		{
			return salesDate;
		}
	}
}
