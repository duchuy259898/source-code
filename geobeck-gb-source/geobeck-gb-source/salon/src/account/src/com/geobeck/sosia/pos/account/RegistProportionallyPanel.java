/*
 * RegistProportionallyPanel.java
 *
 * Created on 2009/10/29, 17:10
 */

package com.geobeck.sosia.pos.account;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import java.text.*;
import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.data.account.*;
import com.geobeck.sosia.pos.master.customer.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.util.*;
import java.awt.event.MouseEvent;
import java.util.List;

/**
 *
 * @author  katagiri
 */
public class RegistProportionallyPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
        private DataSales   sales       = null;    
        private MstCustomer customer    = null;
        private MstStaff    staff       = null;
        private Map map                 = new LinkedHashMap();
	private MstStaffs staffs        = null;
        private List<ProductShare> itemList = new ArrayList<ProductShare>();
        //nhanvt start edit 20141121 New request #32737
        private static boolean isFlag = false;
        private static boolean isFlagDB = false;
        //nhanvt start edit 20141121 New request #32737
        //LVTu start add 2015/05/14 New request #36683
        private List<ContractStaffShare> contractStaff = new ArrayList<ContractStaffShare>();
        private final Integer  ITEM_STAFF       = 1;
        private final Integer  CONTRACT_STAFF   = 2;
        //LVTu end add 2015/05/14 New request #36683
        
	private	RegistProportionallyFocusTraversalPolicy ftp = new RegistProportionallyFocusTraversalPolicy();
	
	/** Creates new form RegistProportionallyPanel */
	public RegistProportionallyPanel()
	{
            super();
            initComponents();
            addMouseCursorChange();
            this.setSize(920, 604);
            this.setTitle("按分情報登録");
            this.setListener();
            SwingUtil.clearTable(tech);
            SwingUtil.clearTable(products);
            tech.removeColumn(tech.getColumn("slip_detail_no"));
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        billValueLabel = new javax.swing.JLabel();
        slipNoLabel = new javax.swing.JLabel();
        slipNo = new com.geobeck.swing.JFormattedTextFieldEx();
        customerLabel = new javax.swing.JLabel();
        salesDateLabel = new javax.swing.JLabel();
        customerName = new com.geobeck.swing.JFormattedTextFieldEx();
        customerNo = new com.geobeck.swing.JFormattedTextFieldEx();
        closeButton = new javax.swing.JButton();
        staffNo = new com.geobeck.swing.JFormattedTextFieldEx();
        staffName = new com.geobeck.swing.JFormattedTextFieldEx();
        salesDate = new com.geobeck.swing.JFormattedTextFieldEx();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        billValueLabel1 = new javax.swing.JLabel();
        billValueLabel2 = new javax.swing.JLabel();
        techScrollPane = new javax.swing.JScrollPane();
        tech = new javax.swing.JTable();
        productsScrollPane = new javax.swing.JScrollPane();
        products = new JTableEx() {
            @Override
            public boolean editCellAt(int row, int column, EventObject e) {
                boolean ret = super.editCellAt(row, column, e);
                // Keyストロークのときはeがnullでくる
                if(!(e instanceof MouseEvent)) {
                    // キーイベントが起きたときはあらかじめ全選択させて上書き
                    if(editorComp instanceof JTextField) { 
                        JTextField tf = (JTextField) editorComp;
                        tf.selectAll();
                    }
                }
                return ret;
            }
        };
        copyStaffButton = new javax.swing.JButton();
        registButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        itemScrollPane = new javax.swing.JScrollPane();
        item = new JTableEx() {
            @Override
            public boolean editCellAt(int row, int column, EventObject e) {
                boolean ret = super.editCellAt(row, column, e);
                // Keyストロークのときはeがnullでくる
                if(!(e instanceof MouseEvent)) {
                    // キーイベントが起きたときはあらかじめ全選択させて上書き
                    if(editorComp instanceof JTextField) {
                        JTextField tf = (JTextField) editorComp;
                        tf.selectAll();
                    }
                }
                return ret;
            }
        };
        billValueLabel3 = new javax.swing.JLabel();
        shareButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        itemScrollPane1 = new javax.swing.JScrollPane();
        tbContractStaff = new JTableEx() {
        };
        lbBillValue = new javax.swing.JLabel();
        btShare = new javax.swing.JButton();

        billValueLabel.setText("主担当者");

        slipNoLabel.setText("伝票No.");

        slipNo.setEditable(false);
        slipNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        slipNo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        customerLabel.setText("顧客名");

        salesDateLabel.setText("売上日");

        customerName.setEditable(false);
        customerName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        customerNo.setEditable(false);
        customerNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        staffNo.setEditable(false);
        staffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        staffName.setEditable(false);
        staffName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        salesDate.setEditable(false);
        salesDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jTabbedPane.setFont(new java.awt.Font("MS UI Gothic", 1, 12)); // NOI18N

        jPanel1.setOpaque(false);

        billValueLabel1.setFont(new java.awt.Font("MS UI Gothic", 1, 12)); // NOI18N
        billValueLabel1.setText(" ＜技術メニュー＞");

        billValueLabel2.setFont(new java.awt.Font("MS UI Gothic", 1, 12)); // NOI18N
        billValueLabel2.setText(" ＜按分メニュー＞");

        techScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        tech.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "slip_detail_no", "技術名", "施術担当"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tech.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tech.setSelectionBackground(new java.awt.Color(220, 220, 220));
        tech.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tech.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(tech, SystemInfo.getTableHeaderRenderer());
        tech.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(tech);
        tech.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                techMouseReleased(evt);
            }
        });
        tech.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                techMouseMoved(evt);
            }
        });
        tech.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                techKeyReleased(evt);
            }
        });
        techScrollPane.setViewportView(tech);

        productsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        productsScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        products.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "按分名", "ポイント", "割合", "担当者No", "担当者", "指名", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        products.setSelectionBackground(new java.awt.Color(255, 210, 142));
        products.setSelectionForeground(new java.awt.Color(0, 0, 0));
        products.getTableHeader().setReorderingAllowed(false);
        products.setDefaultRenderer(String.class, new ProductsTableCellRenderer());
        SwingUtil.setJTableHeaderRenderer(products, SystemInfo.getTableHeaderRenderer());
        products.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        //SelectTableCellRenderer.setSelectTableCellRenderer(products);

        this.initProductsColumn();

        TableColumnModel productsModel = products.getColumnModel();
        productsModel.getColumn(1).setCellEditor(new IntegerCellEditor(new JTextField()));
        productsModel.getColumn(2).setCellEditor(new IntegerCellEditor(new JTextField()));
        products.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                productsFocusGained(evt);
            }
        });
        products.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                productsPropertyChange(evt);
            }
        });
        productsScrollPane.setViewportView(products);

        copyStaffButton.setIcon(SystemInfo.getImageIcon("/button/account/proportionally_mainstaff_off.jpg"));
        copyStaffButton.setPressedIcon(SystemInfo.getImageIcon("/button/account/proportionally_mainstaff_on.jpg"));
        copyStaffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyStaffButtonActionPerformed(evt);
            }
        });

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(billValueLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(techScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 281, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(11, 11, 11)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(billValueLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 111, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 247, Short.MAX_VALUE)
                        .add(copyStaffButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(productsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(billValueLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(billValueLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(copyStaffButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(productsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                    .add(techScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane.addTab("     按分     ", jPanel1);

        jPanel2.setOpaque(false);

        itemScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        itemScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        item.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "分類", "商品名", "数量", "合計", "割合", "担当者No", "担当者", "AP", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        item.setSelectionBackground(new java.awt.Color(255, 210, 142));
        item.setSelectionForeground(new java.awt.Color(0, 0, 0));
        item.getTableHeader().setReorderingAllowed(false);
        item.setDefaultRenderer(String.class, new ItemTableCellRenderer());
        SwingUtil.setJTableHeaderRenderer(item, SystemInfo.getTableHeaderRenderer());
        item.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        //SelectTableCellRenderer.setSelectTableCellRenderer(products);

        this.initItemShareColumn();

        TableColumnModel itemModel = item.getColumnModel();
        itemModel.getColumn(1).setCellEditor(new IntegerCellEditor(new JTextField()));
        itemModel.getColumn(2).setCellEditor(new IntegerCellEditor(new JTextField()));
        item.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                itemFocusGained(evt);
            }
        });
        item.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                itemPropertyChange(evt);
            }
        });
        itemScrollPane.setViewportView(item);

        billValueLabel3.setFont(new java.awt.Font("MS UI Gothic", 1, 12)); // NOI18N
        billValueLabel3.setText(" ＜商品メニュー＞");

        shareButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        shareButton.setBorderPainted(false);
        shareButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        shareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shareButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, itemScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(billValueLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 652, Short.MAX_VALUE)
                        .add(shareButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(billValueLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(shareButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(itemScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane.addTab("　商品シェア　", jPanel2);

        jPanel3.setOpaque(false);

        itemScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        itemScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tbContractStaff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "分類", "コース名", "数量", "合計", "割合", "担当者No", "担当者", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbContractStaff.setSelectionBackground(new java.awt.Color(255, 210, 142));
        tbContractStaff.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tbContractStaff.getTableHeader().setReorderingAllowed(false);
        tbContractStaff.setDefaultRenderer(String.class, new ItemTableCellRenderer());
        SwingUtil.setJTableHeaderRenderer(tbContractStaff, SystemInfo.getTableHeaderRenderer());
        tbContractStaff.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        //SelectTableCellRenderer.setSelectTableCellRenderer(products);

        this.initCourseShareColumn();

        TableColumnModel contractModel = tbContractStaff.getColumnModel();
        contractModel.getColumn(4).setCellEditor(new IntegerCellEditor(new JTextField()));
        //contractModel.getColumn(2).setCellEditor(new IntegerCellEditor(new JTextField()));
        tbContractStaff.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tbContractStaffFocusGained(evt);
            }
        });
        tbContractStaff.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tbContractStaffPropertyChange(evt);
            }
        });
        itemScrollPane1.setViewportView(tbContractStaff);

        lbBillValue.setFont(new java.awt.Font("MS UI Gothic", 1, 12)); // NOI18N
        lbBillValue.setText(" ＜コース契約＞");

        btShare.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        btShare.setBorderPainted(false);
        btShare.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        btShare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btShareActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, itemScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 871, Short.MAX_VALUE)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(lbBillValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 656, Short.MAX_VALUE)
                        .add(btShare, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lbBillValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btShare, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(itemScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane.addTab("コース契約", jPanel3);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jTabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 896, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(salesDateLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(customerLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(billValueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(staffNo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, customerNo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(salesDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 273, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(staffName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(customerName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(layout.createSequentialGroup()
                                .add(19, 19, 19)
                                .add(slipNoLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(slipNo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(salesDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(salesDateLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(slipNoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(slipNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(customerLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(customerNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(customerName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(billValueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(staffNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(staffName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jTabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 491, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void productsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_productsPropertyChange
        
        int row = products.getSelectedRow();
        int col = products.getSelectedColumn();

        if (row >= 0 && col == 3) {
            if (products.getValueAt(row, col) != null) {
                String sNo = products.getValueAt(row, col).toString();
                JComboBox combo = (JComboBox)products.getValueAt(row, 4);
                combo.setSelectedIndex(0);
                for (int i = 0; i < combo.getItemCount(); i++) {
                    if (((MstStaff)combo.getItemAt(i)).getStaffNo().equals(sNo)) {
                        combo.setSelectedIndex(i);
                        break;
                    }
                }
            }
        }

        if (products.getCellEditor() != null) products.getCellEditor().stopCellEditing();
        setProportionallyList();

    }//GEN-LAST:event_productsPropertyChange

    private void copyStaffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyStaffButtonActionPerformed
        for (int i = 0; i < products.getRowCount(); i++) {
            products.setValueAt(staff.getStaffNo(), i, 3);
            products.setValueAt(getStaffComboBox(getStaffs().getIndexByID(staff.getStaffID())), i, 4);
            setProportionallyList(i);
        }

    }//GEN-LAST:event_copyStaffButtonActionPerformed

    private void techMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_techMouseMoved
        if (products.getCellEditor() != null) products.getCellEditor().stopCellEditing();
        setProportionallyList();
    }//GEN-LAST:event_techMouseMoved

    private void techMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_techMouseReleased
        showProportionallyList();
    }//GEN-LAST:event_techMouseReleased

    private void techKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_techKeyReleased
        showProportionallyList();
    }//GEN-LAST:event_techKeyReleased

    private void productsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_productsFocusGained
        if(products.getInputContext() != null)
            products.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_productsFocusGained

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        ((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

	private void registButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_registButtonActionPerformed
	{//GEN-HEADEREND:event_registButtonActionPerformed

            if (products.getCellEditor() != null) products.getCellEditor().stopCellEditing();
            setProportionallyList();
            this.regist();
        
	}//GEN-LAST:event_registButtonActionPerformed

        private void itemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_itemFocusGained
            // TODO add your handling code here:
        }//GEN-LAST:event_itemFocusGained

        private void itemPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_itemPropertyChange

            int row = item.getSelectedRow();
            int col = item.getSelectedColumn();

            if (row >= 0 && col == 5) {
                if (item.getValueAt(row, col) != null) {
                    String sNo = item.getValueAt(row, col).toString();
                    JComboBox combo = (JComboBox)item.getValueAt(row, 6);
                    combo.setSelectedIndex(0);
                    for (int i = 0; i < combo.getItemCount(); i++) {
                        if (((MstStaff)combo.getItemAt(i)).getStaffNo().equals(sNo)) {
                            combo.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            }

            if (item.getCellEditor() != null) item.getCellEditor().stopCellEditing();

        }//GEN-LAST:event_itemPropertyChange

        private void shareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shareButtonActionPerformed

            if (item.getCellEditor() != null) item.getCellEditor().stopCellEditing();

            for (int i = 0; i < itemList.size(); i++) {
                itemList.get(i).setRatio(Integer.valueOf(item.getValueAt(i, 4).toString()));
                itemList.get(i).setApproachedFlag(Boolean.valueOf(item.getValueAt(i, 7).toString()));

                JComboBox combo = (JComboBox)item.getValueAt(i, 6);
                //LVTu start add 2016/02/05 New request #48248
                if (((MstStaff)combo.getSelectedItem()).getStaffID() != null) {
                    itemList.get(i).setStaffId(((MstStaff)combo.getSelectedItem()).getStaffID());
                } else {
                    //itemList.get(i).setStaffId(null);
                    MessageDialog.showMessageDialog(
                    this,
                     "担当者が選択されていません。",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                    return;
                    //LVTu end add 2016/02/05 New request #48248
                }
            }

            this.shareRegist();

        }//GEN-LAST:event_shareButtonActionPerformed

    private void tbContractStaffFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tbContractStaffFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_tbContractStaffFocusGained

    private void tbContractStaffPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tbContractStaffPropertyChange
        //IVS_LVTu start add 2016/02/25 Bug #48799
        int row = tbContractStaff.getSelectedRow();
        int col = tbContractStaff.getSelectedColumn();

        if (row >= 0 && col == 5) {
            if (tbContractStaff.getValueAt(row, col) != null) {
                String sNo = tbContractStaff.getValueAt(row, col).toString();
                JComboBox combo = (JComboBox)tbContractStaff.getValueAt(row, 6);
                combo.setSelectedIndex(0);
                for (int i = 0; i < combo.getItemCount(); i++) {
                    if (((MstStaff)combo.getItemAt(i)).getStaffNo().equals(sNo)) {
                        combo.setSelectedIndex(i);
                        break;
                    }
                }
            }
        }

        if (tbContractStaff.getCellEditor() != null) tbContractStaff.getCellEditor().stopCellEditing();
        //IVS_LVTu end add 2016/02/25 Bug #48799
    }//GEN-LAST:event_tbContractStaffPropertyChange

    private void btShareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btShareActionPerformed
        if (tbContractStaff.getCellEditor() != null) {
            tbContractStaff.getCellEditor().stopCellEditing();
        }

        for (int i = 0; i < contractStaff.size(); i++) {
            contractStaff.get(i).setRate(Integer.valueOf(tbContractStaff.getValueAt(i, 4).toString()));

            JComboBox combo = (JComboBox)tbContractStaff.getValueAt(i, 6);
            if (((MstStaff)combo.getSelectedItem()).getStaffID() != null) {
                contractStaff.get(i).setStaffId(((MstStaff)combo.getSelectedItem()).getStaffID());
            } else {
                MessageDialog.showMessageDialog(
                this,
                 "担当者が選択されていません。",
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if ( checkInput() == false) {
            return;
        }
        shareContractRegist();
    }//GEN-LAST:event_btShareActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel billValueLabel;
    private javax.swing.JLabel billValueLabel1;
    private javax.swing.JLabel billValueLabel2;
    private javax.swing.JLabel billValueLabel3;
    private javax.swing.JButton btShare;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton copyStaffButton;
    private javax.swing.JLabel customerLabel;
    private com.geobeck.swing.JFormattedTextFieldEx customerName;
    private com.geobeck.swing.JFormattedTextFieldEx customerNo;
    private com.geobeck.swing.JTableEx item;
    private javax.swing.JScrollPane itemScrollPane;
    private javax.swing.JScrollPane itemScrollPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JLabel lbBillValue;
    private com.geobeck.swing.JTableEx products;
    private javax.swing.JScrollPane productsScrollPane;
    private javax.swing.JButton registButton;
    private com.geobeck.swing.JFormattedTextFieldEx salesDate;
    private javax.swing.JLabel salesDateLabel;
    private javax.swing.JButton shareButton;
    private com.geobeck.swing.JFormattedTextFieldEx slipNo;
    private javax.swing.JLabel slipNoLabel;
    private com.geobeck.swing.JFormattedTextFieldEx staffName;
    private com.geobeck.swing.JFormattedTextFieldEx staffNo;
    private com.geobeck.swing.JTableEx tbContractStaff;
    private javax.swing.JTable tech;
    private javax.swing.JScrollPane techScrollPane;
    // End of variables declaration//GEN-END:variables
	
    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange()
    {
        SystemInfo.addMouseCursorChange(registButton);
        SystemInfo.addMouseCursorChange(closeButton);
        SystemInfo.addMouseCursorChange(copyStaffButton);
        SystemInfo.addMouseCursorChange(shareButton);
    }
	
    /**
     * FocusTraversalPolicyを取得する。
     * @return FocusTraversalPolicy
     */
    public RegistProportionallyFocusTraversalPolicy getFocusTraversalPolicy()
    {
        return ftp;
    }
	
    /**
     * コンポーネントの各リスナーをセットする。
     */
    private void setListener()
    {
    }
	
    /**
     * 初期化処理を行う。
     * @param sales 売上情報.
     * @param staff 主担当情報.
     */
    public void init(DataSales sales, MstStaff staff)
    {
        this.sales = sales;
        this.customer = sales.getCustomer();
        this.staff = staff;
        this.showData();
    }
	
    /**
     * データを表示する。
     */
    private void showData()
    {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        this.salesDate.setText(sdf.format(sales.getSalesDate()));
        
        this.slipNo.setText(sales.getSlipNo().toString());
        this.customerNo.setText(customer.getCustomerNo());
        this.customerName.setText(customer.getFullCustomerName());
        this.staffNo.setText(staff.getStaffNo());
        this.staffName.setText(staff.getFullStaffName());

        showTechnicList();
        initProportionallyList();

        setItemList();
        showItemList();
        
        //LVTu start add 2015/05/14 New request #36683
        getContractStaffList();
        ShowContractStaffList();
        //LVTu end add 2015/05/14 New request #36683
        if(0 < tech.getRowCount()) {
            tech.setRowSelectionInterval(0, 0);
            showProportionallyList();
        } else {
            registButton.setEnabled(false);
            copyStaffButton.setEnabled(false);
        }

        if(0 < item.getRowCount()) {
            item.setRowSelectionInterval(0, 0);
        } else {
            shareButton.setEnabled(false);
        }

    }

    private void showTechnicList()
    {
        DefaultTableModel model = (DefaultTableModel)tech.getModel();
        model.setRowCount(0);
        SwingUtil.clearTable(tech);
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      a.slip_detail_no");
        sql.append("     ,c.technic_name");
        sql.append("     ,b.staff_name1 || '　' || b.staff_name2 as staff_name");
        sql.append(" from");
        sql.append("     data_sales_detail a");
        //nhanvt start edit 20141031 Bug #31959
        sql.append("         left join mst_staff b");
        //sql.append("         inner join mst_staff b");
        //nhanvt end edit 20141031 Bug #31959
        sql.append("                 on b.staff_id = a.staff_id");
        
        sql.append("         inner join mst_technic c");
        sql.append("                 on c.technic_id = a.product_id");
        sql.append(" where");
        sql.append("         a.shop_id = " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
        sql.append("     and a.slip_no = " + SQLUtil.convertForSQL(sales.getSlipNo()));
        sql.append("     and a.delete_date is null");
        sql.append("     and a.product_division = 1");
        sql.append(" order by");
        sql.append("     a.slip_detail_no");

        try {
            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("slip_detail_no"),
                    rs.getString("technic_name"),
                    rs.getString("staff_name")
                });
            }
            rs.close();
            
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }
    
    //LVTu start edit 2016/02/05 New request #48248
    private void setItemList()
    {
        ConnectionWrapper con = SystemInfo.getConnection();

        try {

            StringBuilder sql = new StringBuilder(1000);
            sql.append(" delete from data_sales_detail_proportionally ");
            sql.append(" where");
            sql.append("         shop_id = " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
            sql.append("     and slip_no = " + SQLUtil.convertForSQL(sales.getSlipNo()));
            sql.append("     and slip_detail_no not in");
            sql.append("     (");
            sql.append("         select");
            sql.append("             slip_detail_no");
            sql.append("         from");
            sql.append("             data_sales_detail");
            sql.append("         where");
            sql.append("                 delete_date is null");
            sql.append("             and product_division in( 2,4)");
            sql.append("             and shop_id = " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
            sql.append("             and slip_no = " + SQLUtil.convertForSQL(sales.getSlipNo()));
            sql.append("     )");
            con.executeUpdate(sql.toString());

            sql.setLength(0);
            sql.append(" insert into data_sales_detail_proportionally (");
            sql.append("      shop_id");
            sql.append("     ,slip_no");
            sql.append("     ,slip_detail_no");
            sql.append("     ,seq_num");
            sql.append("     ,staff_id");
            sql.append("     ,ratio");
            sql.append("     ,approached_flag");
            sql.append("     ,insert_date");
            sql.append("     ,update_date");
            sql.append(" )");
            sql.append(" select");
            sql.append("      shop_id");
            sql.append("     ,slip_no");
            sql.append("     ,slip_detail_no");
            sql.append("     ,1");
            sql.append("     ,staff_id");
            sql.append("     ,100");
            //2016/09/05 GB MOD #54427 Start
            //sql.append("     ,approached_flag");
            sql.append("     ,designated_flag");
            //2016/09/05 GB MOD #54427 End            
            sql.append("     ,current_timestamp");
            sql.append("     ,current_timestamp");
            sql.append(" from");
            sql.append("     data_sales_detail");
            sql.append(" where");
            sql.append("         delete_date is null");
            sql.append("     and product_division in( 2,4)");
            sql.append("     and shop_id = " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
            sql.append("     and slip_no = " + SQLUtil.convertForSQL(sales.getSlipNo()));
            sql.append("     and slip_detail_no not in");
            sql.append("     (");
            sql.append("         select");
            sql.append("             slip_detail_no");
            sql.append("         from");
            sql.append("             data_sales_detail_proportionally");
            sql.append("         where");
            sql.append("                 shop_id = " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
            sql.append("             and slip_no = " + SQLUtil.convertForSQL(sales.getSlipNo()));
            sql.append("     )");
            con.executeUpdate(sql.toString());

            sql.setLength(0);
            sql.append(" select");
            sql.append("      prp.*");
            sql.append("     ,ds.sales_date");
            sql.append("     ,mic.item_class_name");
            sql.append("     ,mi.item_name");
            sql.append("     ,dsd.product_num");
            sql.append("     ,dsd.product_value");
            sql.append("     ,dsd.discount_value");
            sql.append("     ,stf.staff_no");
            sql.append(" from");
            sql.append("     data_sales_detail dsd");
            sql.append("         join data_sales ds");
            sql.append("              on dsd.shop_id = ds.shop_id");
            sql.append("             and dsd.slip_no = ds.slip_no");
            sql.append("         join mst_item mi");
            sql.append("             on dsd.product_id = mi.item_id");
            sql.append("         join mst_item_class mic");
            sql.append("             on mi.item_class_id = mic.item_class_id");
            sql.append("         join data_sales_detail_proportionally prp");
            sql.append("              on dsd.shop_id = prp.shop_id");
            sql.append("             and dsd.slip_no = prp.slip_no");
            sql.append("             and dsd.slip_detail_no = prp.slip_detail_no");
            sql.append("         join mst_staff stf");
            sql.append("             on prp.staff_id = stf.staff_id");
            sql.append(" where");
            sql.append("         dsd.delete_date is null");
            sql.append("     and dsd.shop_id = " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
            sql.append("     and dsd.slip_no = " + SQLUtil.convertForSQL(sales.getSlipNo()));
            sql.append(" order by");
            sql.append("      prp.slip_detail_no");
            sql.append("     ,prp.seq_num");

            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
            while (rs.next()) {
                ProductShare ps = new ProductShare();
                ps.setShopId(rs.getInt("shop_id"));
                ps.setSlipNo(rs.getInt("slip_no"));
                ps.setSalesDate(rs.getDate("sales_date"));
                ps.setSlipDetailNo(rs.getInt("slip_detail_no"));
                ps.setSeqNum(rs.getInt("seq_num"));
                ps.setStaffId(rs.getInt("staff_id"));
                ps.setStaffNo(rs.getString("staff_no"));
                ps.setItemClassName(rs.getString("item_class_name"));
                ps.setItemName(rs.getString("item_name"));
                ps.setProductNum(rs.getInt("product_num"));
                ps.setProductValue(rs.getLong("product_value"));
                ps.setDiscountValue(rs.getLong("discount_value"));
                ps.setRatio(rs.getInt("ratio"));
                ps.setApproachedFlag(rs.getBoolean("approached_flag"));
                itemList.add(ps);
            }
            rs.close();


        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

    }
    //LVTu end edit 2016/02/05 New request #48248
    
    
    

    private void showItemList()
    {
        try {
            if (item.getCellEditor() != null) item.getCellEditor().stopCellEditing();
        } catch (Exception ignore) {
        }

        DefaultTableModel model = (DefaultTableModel)item.getModel();
        model.setRowCount(0);
        SwingUtil.clearTable(item);

        ProductShare.sort(itemList);
        for (ProductShare ps : itemList) {
            model.addRow(new Object[]{
                ps.getSeqNum().equals(1) ? ps.getItemClassName() : "",
                ps.getSeqNum().equals(1) ? ps.getItemName() : "",
                ps.getSeqNum().equals(1) ? ps.getProductNum() : "",
                ps.getSeqNum().equals(1) ? SystemInfo.getAccountSetting().getDisplayValue(ps.getProductValue() * ps.getProductNum(), ps.getDiscountValue(), SystemInfo.getTaxRate(ps.getSalesDate())) : "",
                ps.getRatio(),
                ps.getStaffNo(),
                //LVTu start edit 2015/05/14 New request #36683
                //getShareStaffComboBox(getStaffs().getIndexByID(ps.getStaffId())),
                getShareStaffComboBox(getStaffs().getIndexByID(ps.getStaffId()), ITEM_STAFF),
                //LVTu end edit 2015/05/14 New request #36683
                ps.getApproachedFlag(),
                getShareInsertButton(ps),
                ps.getSeqNum().equals(1) ? new JLabel() : getShareDeleteButton(ps)
            });
        }
    }

    /**
     * 追加ボタンを取得する
     */
    private JButton getShareInsertButton(final ProductShare ps)
    {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/insert_mini_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/insert_mini_on.jpg")));
        button.setSize(48, 25);
        button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                int newSeqNum = 0;
                for (int i = 0; i < itemList.size(); i++) {
                    if (itemList.get(i).getSlipDetailNo().equals(ps.getSlipDetailNo())) {
                        newSeqNum = Math.max(newSeqNum, itemList.get(i).getSeqNum().intValue());
                    }
                }
                newSeqNum++;

                int ratioTotal = getShareRatioTotal(ps);

                try {
                    ProductShare newPS = (ProductShare)ps.clone();
                    newPS.setSeqNum(newSeqNum);
                    newPS.setApproachedFlag(false);
                    newPS.setStaffId(0);
                    newPS.setStaffNo("");
                    itemList.add(newPS);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                recalcShareRatio(ps, ratioTotal);

                showItemList();
            }
        });
        return button;
    }

    /**
     * 削除ボタンを取得する
     */
    private JButton getShareDeleteButton(final ProductShare ps)
    {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_on.jpg")));
        button.setSize(48, 25);
        button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                if (MessageDialog.showYesNoDialog(
                        null,
                        "選択した行を削除してよろしいですか？",
                        "商品シェア削除",
                        JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION)
                {
                    int ratioTotal = getShareRatioTotal(ps);

                    for (int i = 0; i < itemList.size(); i++) {
                        if (itemList.get(i).getSlipDetailNo().equals(ps.getSlipDetailNo()) &&
                            itemList.get(i).getSeqNum().equals(ps.getSeqNum())) {
                            itemList.remove(i);
                            break;
                        }
                    }

                    recalcShareRatio(ps, ratioTotal);

                    showItemList();
                }
            }
        });
        return button;
    }

    private void initProportionallyList()
    {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      a.shop_id");
        sql.append("     ,a.slip_no");
        sql.append("     ,a.slip_detail_no");
        sql.append("     ,a.data_proportionally_id");
        sql.append("     ,a.seq_num");
        sql.append("     ,c.proportionally_name");
        sql.append("     ,a.designated_flag");
        sql.append("     ,a.staff_id");
        sql.append("     ,ms.staff_no");
        sql.append("     ,a.point");
        sql.append("     ,a.ratio");
        sql.append("     ,a.insert_date");
        sql.append("     ,a.update_date");
        sql.append("     ,a.delete_date");
        sql.append("     ,a.last_select_flag");
        sql.append(" from");
        sql.append("     data_sales_proportionally a");
        sql.append("         join data_proportionally b");
        sql.append("             using(data_proportionally_id)");
        sql.append("         join mst_proportionally c");
        sql.append("             using(proportionally_id)");
        sql.append("         left join mst_staff ms");
        sql.append("              on ms.staff_id = a.staff_id");
        sql.append(" where");
        sql.append("         a.shop_id = " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
        sql.append("     and a.slip_no = " + SQLUtil.convertForSQL(sales.getSlipNo()));
        sql.append("     and a.delete_date is null");
        sql.append(" order by");
        sql.append("      a.slip_detail_no");
        sql.append("     ,c.display_seq");

        try {
            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
            while (rs.next()) {
                RegistProportionally rp = new RegistProportionally(rs);
                map.put(getKey(rp), rp);
            }
            rs.close();
            
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

    }

    private void showProportionallyList() {
        DefaultTableModel model = (DefaultTableModel)tech.getModel();
        showProportionallyList(Integer.valueOf(model.getValueAt(tech.getSelectedRow(), 0).toString()));
    }
    
    private void showProportionallyList(Integer slipDetailNo)
    {
        try {
            if (products.getCellEditor() != null) products.getCellEditor().stopCellEditing();
        } catch (Exception ignore) {
        }
        
        DefaultTableModel model = (DefaultTableModel)products.getModel();
        model.setRowCount(0);
        SwingUtil.clearTable(products);

        Iterator itr = map.values().iterator();
        while (itr.hasNext()) {
            RegistProportionally rp = (RegistProportionally)itr.next();
            isFlagDB = rp.isLastSelectFlag();
            if (rp.getSlipDetailNo().equals(slipDetailNo)) {

                model.addRow(new Object[]{
                    rp,
                    rp.getPoint(),
                    rp.getRatio(),
                    rp.getStaffNo(),
                    getStaffComboBox(getStaffs().getIndexByID(rp.getStaffId())),
                    getStaffDesignatedFlag(rp.getDesignatedFlag()),
                    getInsertButton(),
                    getDeleteButton()
                });
            }
        }
    }
    
    /**
     * スタッフコンボを取得する
     */
    private JComboBox getStaffComboBox( Integer staffID )
    {
        final JComboBox staffCombo = new JComboBox(getStaffs().toArray());
        if (staffID.intValue() < 0){
            staffID = new Integer(0);
        }
        staffCombo.setSelectedIndex( staffID );
        staffCombo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffCombo.setMaximumRowCount(20);

        //スタッフが変更されたときの処理を追加
        staffCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                setStaffNo(staffCombo);
            }
        });

        return staffCombo;
    }

    /**
     * スタッフコンボを取得する
     */
    private JComboBox getShareStaffComboBox( Integer staffID ,final int flag)
    {
        final JComboBox staffCombo = new JComboBox(getStaffs().toArray());
        if (staffID.intValue() < 0){
            staffID = new Integer(0);
        }
        staffCombo.setSelectedIndex( staffID );
        staffCombo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffCombo.setMaximumRowCount(20);

        //スタッフが変更されたときの処理を追加
        staffCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                //LVTu start edit 2015/05/14 New request #36683
                //setShareStaffNo(staffCombo);
                setShareStaffNo(staffCombo , flag);
                //LVTu end edit 2015/05/14 New request #36683
            }
        });

        return staffCombo;
    }

    /**
     * 追加ボタンを取得する
     */
    private JButton getInsertButton()
    {
            JButton button = new JButton();
            button.setBorderPainted(false);
            button.setContentAreaFilled(false);
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                            "/images/" + SystemInfo.getSkinPackage() + "/button/common/insert_mini_off.jpg")));
            button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                            "/images/" + SystemInfo.getSkinPackage() + "/button/common/insert_mini_on.jpg")));
            button.setSize(48, 25);
            button.addActionListener(new java.awt.event.ActionListener()
            {
                    public void actionPerformed(java.awt.event.ActionEvent evt)
                    {
                        //nhanvt start edit 20141121 New request #32640
                       
                        if (MessageDialog.showYesNoDialog(
                        null,
                        "ポイントを分割しますか？",
                        "商品シェア削除",
                        JOptionPane.QUESTION_MESSAGE) !=0){
                            isFlag = false;
                        }else{
                            isFlag = true;
                        }
                 
                        int newSeqNum = 0;
                        Iterator itr = map.values().iterator();
                        while (itr.hasNext()) {
                            RegistProportionally rp = (RegistProportionally)itr.next();
                            newSeqNum = Math.max(newSeqNum, rp.getSeqNum().intValue());
                        }
                        newSeqNum++;

                        String key = getKey((RegistProportionally)products.getValueAt(products.getSelectedRow(), 0));
                        String newKey = getKey((RegistProportionally)products.getValueAt(products.getSelectedRow(), 0), newSeqNum);

                        RegistProportionally newRp = new RegistProportionally((RegistProportionally)map.get(key));
                        newRp.setSeqNum(newSeqNum);
                        newRp.setRatio(0);
                        newRp.setStaffId(0);
                        newRp.setStaffNo("");
                        
                        
                        int dpId = newRp.getDataProportionallyId();
                        int ratioTotal = getRatioTotal(dpId);
                        
                        
                        map.put(newKey, newRp);
                        recalcRatio(dpId, ratioTotal,newRp);
                        showProportionallyList();
                        //nhanvt end edit 20141121 New request #32640
                    }
            });
            return button;
    }

    /**
     * 削除ボタンを取得する
     */
    private JButton getDeleteButton()
    {
            JButton button = new JButton();
            button.setBorderPainted(false);
            button.setContentAreaFilled(false);
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                            "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_off.jpg")));
            button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                            "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_on.jpg")));
            button.setSize(48, 25);
            button.addActionListener(new java.awt.event.ActionListener()
            {
                    public void actionPerformed(java.awt.event.ActionEvent evt)
                    {
                        String key = getKey((RegistProportionally)products.getValueAt(products.getSelectedRow(), 0));
                        RegistProportionally rp = new RegistProportionally((RegistProportionally)map.get(key));
                        
                        if (MessageDialog.showYesNoDialog(
                                null,
                                "選択した按分［ " + rp.getProportionallyName() + " ］を削除してよろしいですか？",
                                "按分削除",
                                JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION)
                        {
                            int dpId = rp.getDataProportionallyId();
                            int ratioTotal = getRatioTotal(dpId);
                            map.remove(key);
                            recalcRatio(dpId, ratioTotal,rp);
                            showProportionallyList();
                        }
                    }
            });
            return button;
    }

    private int getRatioTotal(int dpId) {

        int ratioTotal = 0;

        Iterator itr = map.values().iterator();
        while (itr.hasNext()) {
            RegistProportionally rp = (RegistProportionally)itr.next();
            if (rp.getDataProportionallyId().equals(dpId)) {
                ratioTotal += rp.getRatio();
            }
        }

        return ratioTotal;
    }
    
    
    //nhanvt start add 20141121 New request #32640
   
    private String checkFlag(DataSales sales,RegistProportionally newRp){
        StringBuilder sql = new StringBuilder();
        sql.append(" select last_select_flag ");
        sql.append("  from data_sales_proportionally ");
        sql.append(" where ");
        sql.append(" shop_id =" + sales.getShop().getShopID());
        sql.append(" and slip_no = " + sales.getSlipNo());
        sql.append(" and slip_detail_no =" + newRp.getSlipDetailNo());
        sql.append(" and data_proportionally_id =" + newRp.getDataProportionallyId());
        sql.append(" and delete_date is null ");  
        sql.append(" limit 1 ");
        return sql.toString();
    }
    
    /**
     * get Point with flag equal false
     * @param sales
     * @param newRp
     * @return 
     */
    private String getPointWithFlagFalse(DataSales sales,RegistProportionally newRp){
        StringBuilder sql = new StringBuilder();
        sql.append("select point ");
        sql.append(" from data_sales_proportionally ");
        sql.append(" where ");
        sql.append(" shop_id =" +sales.getShop().getShopID());
        sql.append(" and slip_no = " + sales.getSlipNo());
        sql.append(" and slip_detail_no =" +  newRp.getSlipDetailNo() );
        sql.append(" and data_proportionally_id =" + newRp.getDataProportionallyId());
        sql.append(" and delete_date is null ");  
        sql.append(" limit 1 ");
        return sql.toString();
    }
    
    /**
     * get point with flag equad true
     * @param sales
     * @param newRp
     * @return 
     */
    private String getPointWithFlagTrue(DataSales sales,RegistProportionally newRp){
        StringBuilder sql = new StringBuilder();
        sql.append("select sum(point) as point ");
        sql.append(" from data_sales_proportionally ");
        sql.append(" where ");
        sql.append(" shop_id =" + sales.getShop().getShopID());
        sql.append(" and slip_no = " + sales.getSlipNo());
        sql.append(" and slip_detail_no =" + newRp.getSlipDetailNo());
        sql.append(" and data_proportionally_id =" + newRp.getDataProportionallyId());
        sql.append(" and delete_date is null ");  
        sql.append(" group by ");
        sql.append(" shop_id,slip_no,slip_detail_no, data_proportionally_id ");
        return sql.toString();
    }
    //nhanvt end add 20141121 New request #32640
    
    //nhanvt start edit 20141121 New request #32640
    private void recalcRatio(int dpId, int ratioTotal, RegistProportionally rp1)  {
        ConnectionWrapper con = SystemInfo.getConnection();
        int pointTotal = 0;
        
        ResultSetWrapper	rs1;
        try {
            rs1 = con.executeQuery(
                                    checkFlag(sales,rp1));
            while(rs1.next())
            {	
                isFlagDB = rs1.getBoolean("last_select_flag");
            }
            rs1.close();
        } catch (SQLException ex) {
            Logger.getLogger(RegistProportionallyPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(isFlagDB){
            ResultSetWrapper	rs;
            try {
                rs = con.executeQuery(
                                        getPointWithFlagTrue(sales,rp1));
                while(rs.next())
                {	
                    pointTotal = rs.getInt("point");
                }
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(RegistProportionallyPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            

        }else{
             ResultSetWrapper	rs;
            try {
                rs = con.executeQuery(
                                        getPointWithFlagFalse(sales,rp1));
                while(rs.next())
                {	
                    pointTotal = rs.getInt("point");
                }
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(RegistProportionallyPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
        try {
            if (products.getCellEditor() != null) products.getCellEditor().stopCellEditing();
        } catch (Exception ignore) {
        }

        int count = 0;

        Iterator itr = map.values().iterator();
        while (itr.hasNext()) {
            RegistProportionally rp = (RegistProportionally)itr.next();
            if (rp.getDataProportionallyId().equals(dpId)) {
                count++;
            }
        }

        if (count == 0) return;

        int ratio = ratioTotal / count;
        int point = pointTotal/count;
        int total = 0;
        int totalPoint = 0;
        itr = map.values().iterator();
        while (itr.hasNext()) {
            RegistProportionally rp = (RegistProportionally)itr.next();
            if (rp.getDataProportionallyId().equals(dpId)) {
                if (count == 1) {
                    rp.setRatio(ratioTotal - total);
                    if(isFlag){
                        rp.setPoint(pointTotal - totalPoint);
                        rp.setLastSelectFlag(isFlag);
                    }else{
                        rp.setPoint(pointTotal);
                        rp.setLastSelectFlag(isFlag);
                    }
                } else {
                    rp.setRatio(ratio);
                    total += ratio;
                    if(isFlag){
                       rp.setPoint(point);
                       totalPoint += point; 
                       rp.setLastSelectFlag(isFlag);
                    }else{
                        rp.setPoint(pointTotal);
                        rp.setLastSelectFlag(isFlag);
                    }
                    count--;
                }
            }
        }
    }
    //nhanvt end edit 20141121 New request #32640
    private void setStaffNo(JComboBox combo) {
        products.setValueAt(((MstStaff)combo.getSelectedItem()).getStaffNo(), products.getSelectedRow(), 3);
    }

    //LVTu start edit 2015/05/14 New request #36683
    //IVS_LVTu start edit 2016/02/25 Bug #48799
    private void setShareStaffNo(JComboBox combo, int flag) {
        if(flag == ITEM_STAFF) {
            item.setValueAt(((MstStaff)combo.getSelectedItem()).getStaffNo(), item.getSelectedRow(), 5);
        }
        if(flag == CONTRACT_STAFF) {
            tbContractStaff.setValueAt(((MstStaff)combo.getSelectedItem()).getStaffNo(), tbContractStaff.getSelectedRow(), 5);
        }
    }
    //IVS_LVTu end edit 2016/02/25 Bug #48799
    //LVTu end edit 2015/05/14 New request #36683

    private void setProportionallyList()
    {
        setProportionallyList(products.getSelectedRow());
    }

    private void setProportionallyList(int row)
    {
        if (row < 0) return;
        
        String key = getKey((RegistProportionally)products.getValueAt(row, 0));
        RegistProportionally rp = (RegistProportionally)map.get(key);
        
        rp.setPoint((Integer)products.getValueAt(row, 1));
        rp.setRatio((Integer)products.getValueAt(row, 2));
        
        JComboBox combo = (JComboBox)products.getValueAt(row, 4);
        if (combo.getSelectedItem() != null) {
            rp.setStaffId(((MstStaff)combo.getSelectedItem()).getStaffID());
            rp.setStaffNo(((MstStaff)combo.getSelectedItem()).getStaffNo());
        } else {
            rp.setStaffId(null);
        }

        JCheckBox check = (JCheckBox)products.getValueAt(row, 5);
        rp.setDesignatedFlag(check.isSelected());
    }
    
    /**
     * 登録処理を行う。
     */
    protected void regist()
    {
        
        ConnectionWrapper con = SystemInfo.getConnection();
        try {
            con.begin();

            StringBuilder sql = new StringBuilder(1000);
            sql.append(" delete from data_sales_proportionally");
            sql.append(" where");
            sql.append("         shop_id = " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
            sql.append("     and slip_no = " + SQLUtil.convertForSQL(sales.getSlipNo()));
            con.executeUpdate(sql.toString());
            
            Iterator itr = map.values().iterator();
            while (itr.hasNext()) {
                RegistProportionally rp = (RegistProportionally)itr.next();
                //nhanvt start edit 20141121 New request #32737
                sql.setLength(0);
                sql.append(" insert into data_sales_proportionally (");
                sql.append("      shop_id");
                sql.append("     ,slip_no");
                sql.append("     ,slip_detail_no");
                sql.append("     ,data_proportionally_id");
                sql.append("     ,seq_num");
                sql.append("     ,designated_flag");
                sql.append("     ,staff_id");
                sql.append("     ,point");
                sql.append("     ,ratio");
                sql.append("     ,insert_date");
                sql.append("     ,update_date");
                sql.append("     ,last_select_flag ");
                sql.append(" ) values (");
                sql.append("      " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
                sql.append("     ," + SQLUtil.convertForSQL(sales.getSlipNo()));
                sql.append("     ," + SQLUtil.convertForSQL(rp.getSlipDetailNo()));
                sql.append("     ," + SQLUtil.convertForSQL(rp.getDataProportionallyId()));
                sql.append("     ," + SQLUtil.convertForSQL(rp.getSeqNum()));
                sql.append("     ," + SQLUtil.convertForSQL(rp.getDesignatedFlag()));
                sql.append("     ," + SQLUtil.convertForSQL(rp.getStaffId()));
                sql.append("     ," + SQLUtil.convertForSQL(rp.getPoint()));
                sql.append("     ," + SQLUtil.convertForSQL(rp.getRatio()));
                sql.append("     ,current_timestamp");
                sql.append("     ,current_timestamp");
                sql.append("     ," + SQLUtil.convertForSQL(rp.isLastSelectFlag()));
                sql.append(" )");
                //nhanvt end edit 20141121 New request #32737
                con.executeUpdate(sql.toString());
            }
            con.commit();

            //登録しました
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(201, ""),
                this.getTitle(),
                JOptionPane.INFORMATION_MESSAGE);
            
        } catch (Exception e) {

            try {
                con.rollback();
            } catch(Exception ignore){
            }

            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "按分情報"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
        }
        
    }

    /**
     * 登録処理を行う。
     */
    protected void shareRegist()
    {
        ConnectionWrapper con = SystemInfo.getConnection();
        try {
            con.begin();

            StringBuilder sql = new StringBuilder(1000);
            sql.append(" delete from data_sales_detail_proportionally");
            sql.append(" where");
            sql.append("         shop_id = " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
            sql.append("     and slip_no = " + SQLUtil.convertForSQL(sales.getSlipNo()));
            con.executeUpdate(sql.toString());

            for (ProductShare ps : itemList) {
                sql.setLength(0);
                sql.append(" insert into data_sales_detail_proportionally (");
                sql.append("      shop_id");
                sql.append("     ,slip_no");
                sql.append("     ,slip_detail_no");
                sql.append("     ,seq_num");
                sql.append("     ,staff_id");
                sql.append("     ,ratio");
                sql.append("     ,approached_flag");
                sql.append("     ,insert_date");
                sql.append("     ,update_date");
                sql.append(" ) values (");
                sql.append("      " + SQLUtil.convertForSQL(ps.getShopId()));
                sql.append("     ," + SQLUtil.convertForSQL(ps.getSlipNo()));
                sql.append("     ," + SQLUtil.convertForSQL(ps.getSlipDetailNo()));
                sql.append("     ," + SQLUtil.convertForSQL(ps.getSeqNum()));
                sql.append("     ," + SQLUtil.convertForSQL(ps.getStaffId()));
                sql.append("     ," + SQLUtil.convertForSQL(ps.getRatio()));
                sql.append("     ," + SQLUtil.convertForSQL(ps.getApproachedFlag()));
                sql.append("     ,current_timestamp");
                sql.append("     ,current_timestamp");
                sql.append(" )");
                con.executeUpdate(sql.toString());
                
                //2016/09/05 GB MOD #54427 Start
                //売上明細データを更新
                if (ps.getSeqNum() == 1) {
                    con.executeUpdate(getUpdateDataSalesDetailSQL(ps));                
                }
                //2016/09/05 GB MOD #54427 End
            }

            con.commit();

            //登録しました
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(201, ""),
                this.getTitle(),
                JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {

            try {
                con.rollback();
            } catch(Exception ignore){
            }

            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);

            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "商品シェア"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
        }

    }
    
//2016/09/05 GB MOD #54427 End
    /**
     * 伝票明細データをUpdateするＳＱＬ文を取得する。
     *
     * @param ps 商品シェア情報
     * @return 伝票明細データをUpdateするＳＱＬ文
     */
    public String getUpdateDataSalesDetailSQL(ProductShare ps) {
        return "update data_sales_detail\n"
                + "set\n"
                + "designated_flag = " + SQLUtil.convertForSQL(ps.getApproachedFlag()) + ",\n"
                + "staff_id = " + SQLUtil.convertForSQL(ps.getStaffId()) + ",\n"
                + "update_date = current_timestamp\n"
                + "where shop_id = " + SQLUtil.convertForSQL(ps.getShopId()) + "\n"
                + "and slip_no = " + SQLUtil.convertForSQL(ps.getSlipNo()) + "\n"
                + "and slip_detail_no = " + SQLUtil.convertForSQL(ps.getSlipDetailNo());
    }
//2016/09/05 GB MOD #54427 End
    
    /**
     * 売掛回収画面用FocusTraversalPolicy
     */
    private class RegistProportionallyFocusTraversalPolicy extends FocusTraversalPolicy
    {
        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。
         * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
         */
        public Component getComponentAfter(Container aContainer, Component aComponent)
        {
                return slipNo;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。
         * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
         */
        public Component getComponentBefore(Container aContainer,
                                                                                Component aComponent)
        {
                return slipNo;
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。
         * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
         * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer)
        {
                return slipNo;
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。
         * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
         * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer)
        {
                return tech;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。
         * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer)
        {
                return slipNo;
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
         * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
         * 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
         * または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        public Component getInitialComponent(Window window)
        {
                return slipNo;
        }
    }
    
    /**
     * 明細の列を初期化する。
     */
    private void initProductsColumn()
    {
        //列の幅を設定する。
        products.getColumnModel().getColumn(0).setPreferredWidth(100);  // 按分名
        products.getColumnModel().getColumn(1).setPreferredWidth(55);   // 按分ポイント
        products.getColumnModel().getColumn(2).setPreferredWidth(55);   // 按分割合
        products.getColumnModel().getColumn(3).setPreferredWidth(70);   // 担当者No
        products.getColumnModel().getColumn(4).setPreferredWidth(116);  // 担当者
        products.getColumnModel().getColumn(5).setPreferredWidth(50);   // 指名
        products.getColumnModel().getColumn(6).setPreferredWidth(52);   // 追加
        products.getColumnModel().getColumn(7).setPreferredWidth(52);   // 削除
    }

    /**
     * 明細の列を初期化する。
     */
    private void initItemShareColumn()
    {
        //列の幅を設定する。
        item.getColumnModel().getColumn(0).setPreferredWidth(120);  // 分類
        item.getColumnModel().getColumn(1).setPreferredWidth(200);   // 商品名
//        item.getColumnModel().getColumn(2).setPreferredWidth(55);   // 数量
//        item.getColumnModel().getColumn(3).setPreferredWidth(55);   // 合計
//        item.getColumnModel().getColumn(4).setPreferredWidth(55);   // 割合
//        item.getColumnModel().getColumn(5).setPreferredWidth(70);   // 担当者No
        item.getColumnModel().getColumn(6).setPreferredWidth(150);  // 担当者
//        item.getColumnModel().getColumn(7).setPreferredWidth(50);   // AP
//        item.getColumnModel().getColumn(8).setPreferredWidth(52);   // 追加
//        item.getColumnModel().getColumn(9).setPreferredWidth(52);   // 削除
    }
    
    //IVS_LVTu start add 2016/02/25 Bug #48799
    private void initCourseShareColumn()
    {
        tbContractStaff.getColumnModel().getColumn(0).setPreferredWidth(120);  // 分類
        tbContractStaff.getColumnModel().getColumn(1).setPreferredWidth(200);   // コース
        tbContractStaff.getColumnModel().getColumn(6).setPreferredWidth(150);  // 担当者
    }
    //IVS_LVTu end add 2016/02/25 Bug #48799

    private MstStaffs getStaffs()
    {
        if (staffs == null) {
            staffs = new MstStaffs();
            staffs.setShopIDList(SystemInfo.getCurrentShop().getShopID().toString());
            
            try {
                staffs.load(SystemInfo.getConnection(), true);
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }

        return staffs;
    }
    
    /**
     * 指名フラグを取得する
     */
    private JCheckBox getStaffDesignatedFlag( boolean designated )
    {
        JCheckBox designatedFlg = new JCheckBox();
        designatedFlg.setSelected( designated );
        designatedFlg.setOpaque( false );
        designatedFlg.setHorizontalAlignment(SwingConstants.CENTER);
        return designatedFlg;
    }
    
    private String getKey(RegistProportionally rp) {
        return getKey(rp, rp.getSeqNum());
    }
    private String getKey(RegistProportionally rp, int maxSeqNum) {
        return rp.getSlipDetailNo() + "_" + rp.getDataProportionallyId() + "_" + maxSeqNum;
    }


    /**
     * テーブル用のTableCellRenderer
     */
    public class ProductsTableCellRenderer extends SelectTableCellRenderer
    {
            /** Creates a new instance of SearchAccountTableCellRenderer */
            public ProductsTableCellRenderer()
            {
                    super();
            }

            /**
             * テーブルセルレンダリングを返します。
             * @param table JTable
             * @param value セルに割り当てる値
             * @param isSelected セルが選択されている場合は true
             * @param hasFocus フォーカスがある場合は true
             * @param row 行
             * @param column 列
             * @return テーブルセルレンダリング
             */
            public Component getTableCellRendererComponent(JTable table,
                            Object value, boolean isSelected, boolean hasFocus, int row, int column)
            {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                if (column == 3) {
                    super.setHorizontalAlignment(SwingConstants.CENTER);
                }

                return this;
            }
    }

    /**
     * テーブル用のTableCellRenderer
     */
    public class ItemTableCellRenderer extends SelectTableCellRenderer
    {
            /** Creates a new instance of SearchAccountTableCellRenderer */
            public ItemTableCellRenderer()
            {
                    super();
            }

            /**
             * テーブルセルレンダリングを返します。
             * @param table JTable
             * @param value セルに割り当てる値
             * @param isSelected セルが選択されている場合は true
             * @param hasFocus フォーカスがある場合は true
             * @param row 行
             * @param column 列
             * @return テーブルセルレンダリング
             */
            public Component getTableCellRendererComponent(JTable table,
                            Object value, boolean isSelected, boolean hasFocus, int row, int column)
            {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                switch(column) {
                    case 0:
                    case 1:
                        super.setHorizontalAlignment(SwingConstants.LEFT);
                        break;
                    case 5:
                        super.setHorizontalAlignment(SwingConstants.CENTER);
                        break;
                }

                return this;
            }
    }

    private int getShareRatioTotal(ProductShare ps) {

        int ratioTotal = 0;

        for (int i = 0; i < itemList.size(); i++) {
            if (itemList.get(i).getSlipDetailNo().equals(ps.getSlipDetailNo())) {
                ratioTotal += itemList.get(i).getRatio();
            }
        }

        return ratioTotal;
    }

    private void recalcShareRatio(ProductShare ps, int ratioTotal) {
    
        try {
            if (item.getCellEditor() != null) item.getCellEditor().stopCellEditing();
        } catch (Exception ignore) {
        }

        int count = 0;
        for (int i = 0; i < itemList.size(); i++) {
            if (itemList.get(i).getSlipDetailNo().equals(ps.getSlipDetailNo())) {
                count++;
            }
        }

        if (count == 0) return;

        int ratio = ratioTotal / count;
        int total = 0;

        for (int i = 0; i < itemList.size(); i++) {
            if (itemList.get(i).getSlipDetailNo().equals(ps.getSlipDetailNo())) {
                if (count == 1) {
                    itemList.get(i).setRatio(ratioTotal - total);
                } else {
                    itemList.get(i).setRatio(ratio);
                    total += ratio;
                    count--;
                }
            }
        }

    }
    //LVTu start add 2015/05/14 New request #36683
    private void getContractStaffList()
    {
        try {

            StringBuilder sql = new StringBuilder(1000);
            // IVS_LVTu start edit 2017/07/21 #19081 [gb] 按分情報登録＞コース契約 金額に割引が反映されない
            sql.append("    SELECT dsd.shop_id,dsd.slip_no, ");
            sql.append("    dc.contract_no,dc.contract_detail_no, ");
            sql.append("   	   mcc.course_class_name, ");
            sql.append("   	   mc.course_name, ");
            sql.append("   	   dsd.product_num, ");
            sql.append("   	   dc.product_value, ");
            sql.append("   	   coalesce(case stf1.staff_id when null then  stf.staff_id else  stf1.staff_id end,stf.staff_id) as staff_id , ");
            sql.append("   	   coalesce(case stf1.staff_no when null then  stf.staff_no else  stf1.staff_no end,stf.staff_no) as staff_no , ");  	  
            sql.append("   	   coalesce(case stf1.staff_no when null then  stf.staff_name1|| stf.staff_name2  ");
            sql.append("   	   else  stf1.staff_name1 || stf1.staff_name2 end,stf.staff_name1||stf.staff_name2)   as staff_name, ");
            sql.append("   	   coalesce(dcs.rate,100) as rate, ");
            sql.append("   	   coalesce(dcs.seq_num,1) as seq_num ");
            sql.append("   FROM data_sales_detail dsd ");
            sql.append("   INNER JOIN data_contract dc on dsd.shop_id = dc.shop_id and dsd.slip_no = dc.slip_no and dsd.product_id =dc.product_id ");
            sql.append("   INNER JOIN mst_course mc ON dsd.product_id = mc.course_id ");
            sql.append("   INNER JOIN mst_course_class mcc ON mc.course_class_id = mcc.course_class_id ");
            sql.append("   LEFT JOIN data_contract_staff_share dcs on dc.slip_no = dcs.slip_no and dc.shop_id = dcs.shop_id  ");
            sql.append("   and dc.contract_no = dcs.contract_no and dcs.contract_detail_no = dc.contract_detail_no  ");
            sql.append("   LEFT JOIN mst_staff stf ON dsd.staff_id = stf.staff_id  ");
            sql.append("   LEFT JOIN mst_staff stf1 on dcs.staff_id = stf1.staff_id  ");
            sql.append("   WHERE dsd.delete_date IS NULL ");
            sql.append("     AND dsd.shop_id = " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
            sql.append("     AND dsd.slip_no = " + SQLUtil.convertForSQL(sales.getSlipNo()));
            sql.append("     AND dsd.product_division = 5");
            sql.append("     group by dsd.shop_id,dsd.slip_no,dc.contract_no,dc.contract_detail_no, ");
            sql.append("   	   mcc.course_class_name, ");
            sql.append("   	   mc.course_name, ");
            sql.append("   	   dsd.product_num, ");
            sql.append("   	   dc.product_value, ");
            sql.append("   	   dsd.staff_id, ");
            sql.append("   	   stf.staff_id, ");
            sql.append("   	   stf.staff_no, ");
            sql.append("           stf.staff_name1, ");
            sql.append("   	   stf.staff_name1 || stf.staff_name2, ");
            sql.append("   	   stf1.staff_id, ");
            sql.append("   	   stf1.staff_no, ");
            sql.append("   	   stf1.staff_name1 || stf1.staff_name2, ");
            sql.append("   	   dcs.rate, ");
            sql.append("   	   dcs.seq_num ");
            sql.append(" order by");
            sql.append("      dc.contract_detail_no ");
            sql.append("     ,dcs.seq_num");

            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
            while (rs.next()) {
                ContractStaffShare css = new ContractStaffShare();
                css.setShopId(rs.getInt("shop_id"));
                css.setSlipNo(rs.getInt("slip_no"));
                css.setContractNo(rs.getInt("contract_no"));
                css.setContractDetailNo(rs.getInt("contract_detail_no"));
                css.setStaffId(rs.getInt("staff_id"));
                css.setStaffNo(rs.getString("staff_no"));
                css.setCourseClassName(rs.getString("course_class_name"));
                css.setCourseName(rs.getString("course_name"));
                css.setProductNum(rs.getInt("product_num"));
                css.setProductValue(rs.getLong("product_value"));
                css.setRate(rs.getInt("rate"));
                css.setSeqNum(rs.getInt("seq_num"));
                contractStaff.add(css);
            }
            rs.close();

        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

    }
    // IVS_LVTu end edit 2017/07/21 #19081 [gb] 按分情報登録＞コース契約 金額に割引が反映されない
    
    private void ShowContractStaffList() {
        try {
            if (tbContractStaff.getCellEditor() != null) tbContractStaff.getCellEditor().stopCellEditing();
        } catch (Exception ignore) {
        }

        DefaultTableModel model = (DefaultTableModel)tbContractStaff.getModel();
        model.setRowCount(0);
        SwingUtil.clearTable(tbContractStaff);

        for (ContractStaffShare css : contractStaff) {
            model.addRow(new Object[]{
                css.getSeqNum().equals(1) ? css.getCourseClassName() : "",
                css.getSeqNum().equals(1) ? css.getCourseName() : "",
                css.getSeqNum().equals(1) ? css.getProductNum() : "",
                css.getSeqNum().equals(1) ? css.getProductValue() : "",
                css.getRate(),
                css.getSeqNum().equals(1) ? css.getStaffNo() : "",
                getShareStaffComboBox(getStaffs().getIndexByID(css.getStaffId()), CONTRACT_STAFF),
                getContractStaffInsertButton(css),
                css.getSeqNum().equals(1) ? new JLabel() : getContractStaffDeleteButton(css)
            });
        }
    }
    
    private JButton getContractStaffInsertButton(final ContractStaffShare css)
    {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/insert_mini_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/insert_mini_on.jpg")));
        button.setSize(48, 25);
        button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                try {
                    //get max seqNum
                    int seqNumMax = 1;
                    for ( int i = 0;i < contractStaff.size();i ++) {
                        if (contractStaff.get(i).getContractDetailNo().equals(css.getContractDetailNo())) {
                            if (contractStaff.get(i).getSeqNum() > seqNumMax) {
                                seqNumMax = contractStaff.get(i).getSeqNum();
                            }
                        }
                    }
                    ContractStaffShare cssCopy = (ContractStaffShare)css.clone();
                    cssCopy.setCourseClassName("");
                    cssCopy.setCourseName("");
                    cssCopy.setProductNum(null);
                    cssCopy.setProductValue(null);
                    cssCopy.setStaffNo("");
                    cssCopy.setStaffId(null);
                    cssCopy.setSeqNum(seqNumMax + 1);
                    for ( int i = 0;i < contractStaff.size();i ++) {
                        if(contractStaff.get(i).equals(css)) {
                            contractStaff.add(i + 1, cssCopy);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                shareNumRate(css, 100);
                ShowContractStaffList();
            }
        });
        return button;
    }

    /**
     * 削除ボタンを取得する
     */
    private JButton getContractStaffDeleteButton(final ContractStaffShare css)
    {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_on.jpg")));
        button.setSize(48, 25);
        button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                if (MessageDialog.showYesNoDialog(
                        null,
                        "選択した行を削除してよろしいですか？",
                        "コース契約シェア削除",
                        JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION)
                {

                    for (int i = 0; i < contractStaff.size(); i++) {
                        if (contractStaff.get(i).equals(css)) {
                            contractStaff.remove(i);
                            break;
                        }
                    }
                    shareNumRate(css, 100);
                    ShowContractStaffList();
                }
            }
        });
        return button;
    }
    
    protected void shareContractRegist()
    {
        ConnectionWrapper con = SystemInfo.getConnection();
        try {
            con.begin();

            StringBuilder sql = new StringBuilder(1000);
            sql.append(" delete from data_contract_staff_share ");
            sql.append(" where");
            sql.append("     shop_id = " + SQLUtil.convertForSQL(sales.getShop().getShopID()));
            sql.append("     and slip_no = " + SQLUtil.convertForSQL(sales.getSlipNo()));
            con.executeUpdate(sql.toString());

            for (ContractStaffShare css : contractStaff) {
                sql.setLength(0);
                sql.append(" insert into data_contract_staff_share (");
                sql.append("      shop_id");
                sql.append("     ,slip_no");
                sql.append("     ,contract_no");
                sql.append("     ,contract_detail_no");
                sql.append("     ,staff_id");
                sql.append("     ,rate");
                sql.append("     ,seq_num");
                sql.append("     ,insert_date");
                sql.append("     ,update_date");
                sql.append(" ) values (");
                sql.append("      " + SQLUtil.convertForSQL(css.getShopId()));
                sql.append("     ," + SQLUtil.convertForSQL(css.getSlipNo()));
                sql.append("     ," + SQLUtil.convertForSQL(css.getContractNo()));
                sql.append("     ," + SQLUtil.convertForSQL(css.getContractDetailNo()));
                sql.append("     ," + SQLUtil.convertForSQL(css.getStaffId()));
                sql.append("     ," + SQLUtil.convertForSQL(css.getRate()));
                sql.append("     ," + SQLUtil.convertForSQL(css.getSeqNum()));
                sql.append("     ,current_timestamp");
                sql.append("     ,current_timestamp");
                sql.append(" )");
                con.executeUpdate(sql.toString());
            }

            con.commit();

            //登録しました
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(201, ""),
                this.getTitle(),
                JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {

            try {
                con.rollback();
            } catch(Exception ignore){
            }

            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);

            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "商品シェア"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
        }

    }
    
    private void shareNumRate(ContractStaffShare css, int ratioTotal) {
    
        try {
            if (tbContractStaff.getCellEditor() != null) tbContractStaff.getCellEditor().stopCellEditing();
        } catch (Exception ignore) {
        }

        int count = 0;
        for (int i = 0; i < contractStaff.size(); i++) {
            if (contractStaff.get(i).getContractDetailNo().equals(css.getContractDetailNo())) {
                count++;
            }
        }

        if (count == 0) return;

        int ratio = ratioTotal / count;
        int total = 0;

        for (int i = 0; i < contractStaff.size(); i++) {
            if (contractStaff.get(i).getContractDetailNo().equals(css.getContractDetailNo())) {
                if (count == 1) {
                    contractStaff.get(i).setRate(ratioTotal - total);
                } else {
                    contractStaff.get(i).setRate(ratio);
                    total += ratio;
                    count--;
                }
            }
        }

    }
    
    private boolean checkInput() { 
        for (int i = 0; i < contractStaff.size() ; i++) {
            long sum = 0;
            for ( int j = 0; j < contractStaff.size(); j ++) {
                if (contractStaff.get(i).getContractDetailNo().equals(contractStaff.get(j).getContractDetailNo())) {
                    sum = sum + contractStaff.get(j).getRate();
                    //check staff exists.
                    if (( i!= j) && contractStaff.get(i).getStaffId().equals(contractStaff.get(j).getStaffId())) {
                        MessageDialog.showMessageDialog(
                    this,
                     "同じ担当者が選択されています。\n"
                             + "シェアする場合は、別の担当者を選択してください。",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                    return false;
                    }
                }
                // rate > 100 then return false.
                if (sum > 100) {
                    MessageDialog.showMessageDialog(
                    this,
                     "割合が100%を超えています。100%以内で設定してください。",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
            
        }
        return true;
    }
    //LVTu end add 2015/05/14 New request #36683
}
