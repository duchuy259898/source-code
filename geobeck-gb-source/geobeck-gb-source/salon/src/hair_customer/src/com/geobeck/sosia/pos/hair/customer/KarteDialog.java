/*
 * KarteDialog.java
 *
 * Created on 2008/09/07, 00:00
 */

package com.geobeck.sosia.pos.hair.customer;

import com.geobeck.sosia.pos.customer.DataImageKarte;
import com.geobeck.sosia.pos.customer.TechnicKarte;
import com.geobeck.sosia.pos.customer.TechnicKarteClass;
import com.geobeck.sosia.pos.customer.TechnicKarteManager;
import com.geobeck.sosia.pos.customer.TechnicKarteReference;
import com.geobeck.sosia.pos.data.account.DataPayment;
import com.geobeck.sosia.pos.hair.data.account.DataSalesDetail;
import java.awt.*;
import java.awt.im.*;
import javax.swing.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.filechooser.WildcardFileFilter;
import com.geobeck.util.*;
import java.awt.event.InputEvent;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  saito
 */
public class KarteDialog extends AbstractImagePanelEx  {
	private	final	int     MAX_FILE_SIZE		=	1048576;
	private	final	String  MAX_FILE_SIZE_STR	=	"1MB";
	private	final	int	MAX_FILE_COUNT		=	3;
	
        //対象顧客の精算情報
        private	MstCustomerManager	customer	=	new MstCustomerManager();
        
        //呼出元画面から渡されたパラメータ
        Integer shopId = 0; //ショップID
        Integer slipNo = 0; //伝票番号
	
	//初期処理フラグ
	private boolean farstFlg = true;
	
	Integer clsRowIndex = 0;
	
	/**
	 * カルテ情報画面用FocusTraversalPolicy
	 */
	private	KarteDialogFocusTraversalPolicy	ftp	= new KarteDialogFocusTraversalPolicy();
	
	/** Creates new form KarteDialog */
	public KarteDialog(
                                  Integer shopId
                                , Integer slipNo
                                , MstCustomerManager customer
                                )
        {
	    SystemInfo.getLogger().log(Level.INFO, "カルテ情報表示 shop="+shopId +" slip="+slipNo +" customer="+customer.getCustomerID() +customer.getCustomerName(0)+customer.getCustomerName(1));
            //パラメータの取得
            this.shopId = shopId;
            this.slipNo = slipNo;
            this.customer = customer;

            //初期化処理
            initComponents();
            addMouseCursorChange();
            this.setTitle("カルテ情報");
            this.initOptionComponent();
            this.setListener();
	    this.setSize(1023, 690);
	    this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sex = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        dateLabel = new javax.swing.JLabel();
        cmbDate = new javax.swing.JComboBox();
        registButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        technicScrollPane = new javax.swing.JScrollPane();
        tbProduct = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        paymentScrollPane = new javax.swing.JScrollPane();
        payment = new javax.swing.JTable();
        memoScrollPane = new javax.swing.JScrollPane();
        memoBody = new com.geobeck.swing.JTextAreaEx();
        jLabel4 = new javax.swing.JLabel();
        staffName = new com.geobeck.swing.JFormattedTextFieldEx();
        staffLabel = new javax.swing.JLabel();
        customerNo = new com.geobeck.swing.JFormattedTextFieldEx();
        customerName = new com.geobeck.swing.JFormattedTextFieldEx();
        customerLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        image1 = new com.geobeck.swing.ImagePanel();
        imagePath1 = new com.geobeck.swing.JTextFieldEx();
        deleteImage1 = new javax.swing.JCheckBox();
        imageReferenceButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        memoScrollPane1 = new javax.swing.JScrollPane();
        memoBody1 = new com.geobeck.swing.JTextAreaEx();
        image2 = new com.geobeck.swing.ImagePanel();
        imagePath2 = new com.geobeck.swing.JTextFieldEx();
        deleteImage2 = new javax.swing.JCheckBox();
        imageReferenceButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        memoScrollPane2 = new javax.swing.JScrollPane();
        memoBody2 = new com.geobeck.swing.JTextAreaEx();
        image3 = new com.geobeck.swing.ImagePanel();
        imagePath3 = new com.geobeck.swing.JTextFieldEx();
        deleteImage3 = new javax.swing.JCheckBox();
        imageReferenceButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        memoScrollPane3 = new javax.swing.JScrollPane();
        memoBody3 = new com.geobeck.swing.JTextAreaEx();
        jLabel8 = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        copyButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        karteLabel = new javax.swing.JLabel();
        karteClassScrollPane = new javax.swing.JScrollPane();
        karteClass = new javax.swing.JTable();
        karteDetailsScrollPane = new javax.swing.JScrollPane();
        karteDetails = new com.geobeck.swing.JTableEx();
        leftButton = new javax.swing.JButton();
        karteReferenceScrollPane = new javax.swing.JScrollPane();
        karteReference = new javax.swing.JTable();
        dateLabel1 = new javax.swing.JLabel();
        copyDate = new javax.swing.JComboBox();

        setFocusTraversalPolicyProvider(true);

        jPanel1.setOpaque(false);

        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dateLabel.setText("来店日");

        cmbDate.setFont(new java.awt.Font("MS UI Gothic", 0, 16)); // NOI18N
        cmbDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDateActionPerformed(evt);
            }
        });

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setContentAreaFilled(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        prevButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left_off.jpg"));
        prevButton.setBorderPainted(false);
        prevButton.setContentAreaFilled(false);
        prevButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left_on.jpg"));
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right_off.jpg"));
        nextButton.setBorderPainted(false);
        nextButton.setContentAreaFilled(false);
        nextButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right_on.jpg"));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbDate, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(registButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2.setOpaque(false);

        jLabel1.setText("メニュー");

        tbProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "区分", "分類", "名称", "単価", "数量", "割引", "金額", "担当者"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbProduct.setSelectionBackground(new java.awt.Color(255, 210, 142));
        tbProduct.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tbProduct.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbProduct.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(tbProduct, SystemInfo.getTableHeaderRenderer());
        tbProduct.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(tbProduct);
        technicScrollPane.setViewportView(tbProduct);

        jLabel3.setText("支払");

        payment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "支払日", "現金売上", "現金以外", "売掛金"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        payment.setSelectionBackground(new java.awt.Color(255, 210, 142));
        payment.setSelectionForeground(new java.awt.Color(0, 0, 0));
        payment.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        payment.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(payment, SystemInfo.getTableHeaderRenderer());
        payment.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(payment);
        paymentScrollPane.setViewportView(payment);

        memoScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        memoBody.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        memoBody.setColumns(20);
        memoBody.setLineWrap(true);
        memoBody.setRows(2);
        memoBody.setTabSize(4);
        memoBody.setInputKanji(true);
        memoScrollPane.setViewportView(memoBody);

        jLabel4.setText("来店メモ");

        staffName.setEditable(false);
        staffName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffName.setFocusable(false);
        staffName.setFont(new java.awt.Font("MS UI Gothic", 0, 16)); // NOI18N
        staffName.setInputKanji(true);

        staffLabel.setText("主担当");

        customerNo.setEditable(false);
        customerNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerNo.setFocusable(false);
        customerNo.setFont(new java.awt.Font("MS UI Gothic", 0, 16)); // NOI18N
        customerNo.setInputKanji(true);

        customerName.setEditable(false);
        customerName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerName.setFocusable(false);
        customerName.setFont(new java.awt.Font("MS UI Gothic", 0, 16)); // NOI18N
        customerName.setInputKanji(true);

        customerLabel.setText("顧客");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(customerLabel)
                    .addComponent(staffLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(staffName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(customerNo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(technicScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                            .addComponent(paymentScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                            .addComponent(memoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerNo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(staffName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(staffLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(technicScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paymentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(memoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel3.setOpaque(false);

        image1.setBackground(new java.awt.Color(255, 255, 255));
        image1.setAdjust(true);
        image1.setKeepProportion(true);
        image1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                image1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout image1Layout = new javax.swing.GroupLayout(image1);
        image1.setLayout(image1Layout);
        image1Layout.setHorizontalGroup(
            image1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 165, Short.MAX_VALUE)
        );
        image1Layout.setVerticalGroup(
            image1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        imagePath1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        deleteImage1.setText("削除");
        deleteImage1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        deleteImage1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        deleteImage1.setOpaque(false);

        imageReferenceButton1.setIcon(SystemInfo.getImageIcon("/button/select/select_file_off.jpg"));
        imageReferenceButton1.setBorderPainted(false);
        imageReferenceButton1.setContentAreaFilled(false);
        imageReferenceButton1.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_file_on.jpg"));
        imageReferenceButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageReferenceButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("メモ");

        memoScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        memoBody1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        memoBody1.setColumns(20);
        memoBody1.setLineWrap(true);
        memoBody1.setRows(2);
        memoBody1.setTabSize(4);
        memoBody1.setInputKanji(true);
        memoScrollPane1.setViewportView(memoBody1);

        image2.setBackground(new java.awt.Color(255, 255, 255));
        image2.setAdjust(true);
        image2.setKeepProportion(true);
        image2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                image2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout image2Layout = new javax.swing.GroupLayout(image2);
        image2.setLayout(image2Layout);
        image2Layout.setHorizontalGroup(
            image2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 165, Short.MAX_VALUE)
        );
        image2Layout.setVerticalGroup(
            image2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        imagePath2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        deleteImage2.setText("削除");
        deleteImage2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        deleteImage2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        deleteImage2.setOpaque(false);

        imageReferenceButton2.setIcon(SystemInfo.getImageIcon("/button/select/select_file_off.jpg"));
        imageReferenceButton2.setBorderPainted(false);
        imageReferenceButton2.setContentAreaFilled(false);
        imageReferenceButton2.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_file_on.jpg"));
        imageReferenceButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageReferenceButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("メモ");

        memoScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        memoBody2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        memoBody2.setColumns(20);
        memoBody2.setLineWrap(true);
        memoBody2.setRows(2);
        memoBody2.setTabSize(4);
        memoBody2.setInputKanji(true);
        memoScrollPane2.setViewportView(memoBody2);

        image3.setBackground(new java.awt.Color(255, 255, 255));
        image3.setAdjust(true);
        image3.setKeepProportion(true);
        image3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                image3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout image3Layout = new javax.swing.GroupLayout(image3);
        image3.setLayout(image3Layout);
        image3Layout.setHorizontalGroup(
            image3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 165, Short.MAX_VALUE)
        );
        image3Layout.setVerticalGroup(
            image3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        imagePath3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        deleteImage3.setText("削除");
        deleteImage3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        deleteImage3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        deleteImage3.setOpaque(false);

        imageReferenceButton3.setIcon(SystemInfo.getImageIcon("/button/select/select_file_off.jpg"));
        imageReferenceButton3.setBorderPainted(false);
        imageReferenceButton3.setContentAreaFilled(false);
        imageReferenceButton3.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_file_on.jpg"));
        imageReferenceButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageReferenceButton3ActionPerformed(evt);
            }
        });

        jLabel7.setText("メモ");

        memoScrollPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        memoBody3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        memoBody3.setColumns(20);
        memoBody3.setLineWrap(true);
        memoBody3.setRows(2);
        memoBody3.setTabSize(4);
        memoBody3.setInputKanji(true);
        memoScrollPane3.setViewportView(memoBody3);

        jLabel8.setText("※画像カルテは、来店履歴に関係なく一人のお客様で３枚まで登録できます。");

        imageLabel.setFont(new java.awt.Font("MS UI Gothic", 1, 14)); // NOI18N
        imageLabel.setText("写真登録");

        jLabel9.setText("※画像ファイルは１ＭＢまでのサイズで、jpg形式のみ登録できます。");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(deleteImage1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(imageReferenceButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(imagePath1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(image1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(memoScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(deleteImage2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(imageReferenceButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(image2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imagePath2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(memoScrollPane3)
                            .addComponent(jLabel7)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(deleteImage3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(imageReferenceButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(imagePath3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(image3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(imageLabel)
                            .addComponent(jLabel9))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {image1, image2, image3});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(image3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(imagePath3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imagePath2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imageReferenceButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteImage3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(memoScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(image1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(imagePath1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(image2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(deleteImage1)
                                        .addGap(12, 12, 12))
                                    .addComponent(imageReferenceButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(memoScrollPane1))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(imageReferenceButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deleteImage2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(memoScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGap(22, 22, 22))
        );

        jPanel4.setOpaque(false);

        copyButton.setIcon(SystemInfo.getImageIcon("/button/master/copy_off.jpg"));
        copyButton.setBorderPainted(false);
        copyButton.setContentAreaFilled(false);
        copyButton.setPressedIcon(SystemInfo.getImageIcon("/button/master/copy_on.jpg"));
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        resetButton.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg"));
        resetButton.setBorderPainted(false);
        resetButton.setContentAreaFilled(false);
        resetButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg"));
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        karteLabel.setFont(new java.awt.Font("MS UI Gothic", 1, 14)); // NOI18N
        karteLabel.setText("カルテ登録");

        karteClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "分類"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        karteClass.setSelectionBackground(new java.awt.Color(255, 210, 142));
        karteClass.setSelectionForeground(new java.awt.Color(0, 0, 0));
        karteClass.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        karteClass.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(karteClass, SystemInfo.getTableHeaderRenderer());
        karteClass.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(karteClass);
        karteClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                karteClassMouseReleased(evt);
            }
        });
        karteClass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                karteClassKeyReleased(evt);
            }
        });
        karteClassScrollPane.setViewportView(karteClass);

        karteDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "詳細", "内容"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        karteDetails.setSelectionBackground(new java.awt.Color(255, 210, 142));
        karteDetails.setSelectionForeground(new java.awt.Color(0, 0, 0));
        karteDetails.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        karteDetails.getTableHeader().setReorderingAllowed(false);
        karteDetails.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SwingUtil.setJTableHeaderRenderer(karteDetails, SystemInfo.getTableHeaderRenderer());
        SelectTableCellRenderer.setSelectTableCellRenderer(karteDetails);
        karteDetails.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        karteDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                karteDetailsMouseReleased(evt);
            }
        });
        karteDetails.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                karteDetailsFocusGained(evt);
            }
        });
        karteDetails.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                karteDetailsPropertyChange(evt);
            }
        });
        karteDetails.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                karteDetailsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                karteDetailsKeyReleased(evt);
            }
        });
        karteDetailsScrollPane.setViewportView(karteDetails);

        leftButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left_off.jpg"));
        leftButton.setBorderPainted(false);
        leftButton.setContentAreaFilled(false);
        leftButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left_on.jpg"));
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });

        karteReference.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "参照"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        karteReference.setSelectionBackground(new java.awt.Color(255, 210, 142));
        karteReference.setSelectionForeground(new java.awt.Color(0, 0, 0));
        karteReference.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        karteReference.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(karteReference, SystemInfo.getTableHeaderRenderer());
        karteReference.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(karteReference);
        karteReference.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                karteReferenceMouseClicked(evt);
            }
        });
        karteReferenceScrollPane.setViewportView(karteReference);

        dateLabel1.setText("コピー元日付");

        copyDate.setFont(new java.awt.Font("MS UI Gothic", 0, 16)); // NOI18N
        copyDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(karteClassScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(karteLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(dateLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyDate, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(karteDetailsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(karteReferenceScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(karteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(copyDate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dateLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(karteReferenceScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, 0, 0, Short.MAX_VALUE)
                    .addComponent(karteDetailsScrollPane, 0, 0, Short.MAX_VALUE)
                    .addComponent(karteClassScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(108, Short.MAX_VALUE)
                .addComponent(leftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDateActionPerformed

        if (!farstFlg) {
	    SystemInfo.getLogger().log(Level.INFO, "カルテ情報日付変更 :index="+cmbDate.getSelectedIndex());
	    Integer index = cmbDate.getSelectedIndex();

	    VisitRecord	vr = customer.getAccounts().get(index);

	    //選択された来店日のカルテ分類・詳細・技術カルテデータを読み込む
	    loadTechnicKarte(vr.getShop().getShopID(), vr.getSlipNo(), false);
	    //データを表示する
	    this.showData();
	}
    }//GEN-LAST:event_cmbDateActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed

        Integer index = cmbDate.getSelectedIndex() - 1;

        if (-1 < index) {
            //来店日を設定
            cmbDate.setSelectedIndex(index);

//日付変更のイベントで処理しているのでコメントアウト
//            VisitRecord	vr	=	customer.getAccounts().get(index);
//
//            //選択された来店日のカルテ分類・詳細・技術カルテデータを読み込む
//            loadTechnicKarte(vr.getShop().getShopID(), vr.getSlipNo(), false);
//            //データを表示する
//            this.showData();
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed

        Integer index = cmbDate.getSelectedIndex() + 1;

        if (cmbDate.getItemCount() > index) {
            //来店日を設定
            cmbDate.setSelectedIndex(index);

//日付変更のイベントで処理しているのでコメントアウト
//            VisitRecord	vr	=	customer.getAccounts().get(index);
//
//            //選択された来店日のカルテ分類・詳細・技術カルテデータを読み込む
//            loadTechnicKarte(vr.getShop().getShopID(), vr.getSlipNo(), false);
//            //データを表示する
//            this.showData();
        }
    }//GEN-LAST:event_prevButtonActionPerformed

    private void karteReferenceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_karteReferenceMouseClicked
        if ( evt.getClickCount() == 2 ) {
            this.copyKarteReference();
        }
    }//GEN-LAST:event_karteReferenceMouseClicked

    private void karteDetailsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_karteDetailsKeyReleased
        this.showKarteReferences();
    }//GEN-LAST:event_karteDetailsKeyReleased

    private void karteDetailsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_karteDetailsMouseReleased
        this.showKarteReferences();
    }//GEN-LAST:event_karteDetailsMouseReleased

    private void karteDetailsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_karteDetailsKeyPressed
		if(karteDetails.getSelectedRow() == 0 &&
			karteDetails.getSelectedColumn() == 0 &&
                        (evt.getKeyCode() == evt.VK_ENTER || evt.getKeyCode() == evt.VK_TAB) &&
                        (evt.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0) {
                        //先頭行の先頭列かつ、
                        //Enterキー or TabキーとShiftキーが押下された場合
                        //リセットボタンへ
                        resetButton.requestFocusInWindow();
		}
		if(karteDetails.getSelectedRow() == karteDetails.getRowCount() - 1 &&
			karteDetails.getSelectedColumn() == 1 &&
                        (evt.getKeyCode() == evt.VK_ENTER || evt.getKeyCode() == evt.VK_TAB) &&
                        (evt.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) == 0) {
                        //最終行の最終列かつ、
                        //Enterキー or Tabキーが押下された場合(Shiftキーの押下はなし)
                        //左ボタンへ
                        leftButton.requestFocusInWindow();
		}
    }//GEN-LAST:event_karteDetailsKeyPressed

    private void karteDetailsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_karteDetailsPropertyChange

	if (karteDetails.getRowCount() > 0) {
	     Integer dtlRowIndex = karteDetails.getSelectedRow();
            Integer dtlColIndex = karteDetails.getSelectedColumn();
	    
            if (dtlColIndex == 1) {
		//カルテ詳細の入力内容を取得
		String contents = (String)karteDetails.getValueAt(dtlRowIndex, dtlColIndex);

		//カルテ詳細の入力内容を設定
//		Integer clsRowIndex = karteClass.getSelectedRow();
		technicKarteManager.getTechnicKarteClasses().get(clsRowIndex).get(dtlRowIndex).setContents(contents);
		SystemInfo.getLogger().log(Level.INFO, "カルテデータ入力 row=" + dtlRowIndex +" col="+dtlColIndex + " 内容："+contents);
	   	
	    }
	}
    }//GEN-LAST:event_karteDetailsPropertyChange

    private void karteDetailsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_karteDetailsFocusGained
	karteDetails.getInputContext().setCharacterSubsets(new Character.Subset[] {InputSubset.KANJI});
    }//GEN-LAST:event_karteDetailsFocusGained

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        this.copyKarteReference();
    }//GEN-LAST:event_leftButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed

        if (MessageDialog.showYesNoDialog(
            this,
            copyDate.getSelectedItem().toString() +  " のカルテ情報をコピーします。\nよろしいですか？",
            this.getTitle(),
            JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
            return;
        }

        if (isRegistered(customer.getAccounts().get(cmbDate.getSelectedIndex()))) {
            if (MessageDialog.showYesNoDialog(
                this,
                "既にカルテ情報が登録されていますが、\n" + cmbDate.getSelectedItem().toString() +  " のカルテ情報に上書きしますか？",
                this.getTitle(),
                JOptionPane.WARNING_MESSAGE) == JOptionPane.NO_OPTION) {
                return;
            }
        }
        
        //指定日のカルテ情報を取得
        VisitRecord vr = customer.getAccounts().get(copyDate.getSelectedIndex());

        //指定日のカルテ分類・詳細・技術カルテデータを読み込む
        loadTechnicKarte(vr.getShop().getShopID(), vr.getSlipNo() ,false);

        //各カルテ一覧を再表示する
        showSelectedAccountTechnicKarte();

        //選択された来店日のショップID、伝票NOに設定し直す
        VisitRecord vr2 = customer.getAccounts().get(cmbDate.getSelectedIndex());

        technicKarteManager.getShop().setShopID(vr2.getShop().getShopID());
        technicKarteManager.setSlipNo(vr2.getSlipNo());
        
        karteDetails.requestFocusInWindow();

    }//GEN-LAST:event_copyButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed

        Integer index = cmbDate.getSelectedIndex();

        VisitRecord vr = customer.getAccounts().get(index);

        //選択された来店日のカルテ分類・詳細・技術カルテデータを読み込む
        loadTechnicKarte(vr.getShop().getShopID(), vr.getSlipNo(), false);
            
        //各カルテ一覧を再表示する
        showSelectedAccountTechnicKarte();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void karteClassMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_karteClassMouseReleased
        this.showTechnicKartes(0, 0);
        this.showKarteReferences();
    }//GEN-LAST:event_karteClassMouseReleased

    private void karteClassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_karteClassKeyReleased
        this.showTechnicKartes(0, 0);
        this.showKarteReferences();
    }//GEN-LAST:event_karteClassKeyReleased

    private void imageReferenceButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageReferenceButton3ActionPerformed
        this.selectImage3();
    }//GEN-LAST:event_imageReferenceButton3ActionPerformed

    private void imageReferenceButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageReferenceButton2ActionPerformed
        this.selectImage2();
    }//GEN-LAST:event_imageReferenceButton2ActionPerformed

    private void imageReferenceButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageReferenceButton1ActionPerformed
        this.selectImage1();
    }//GEN-LAST:event_imageReferenceButton1ActionPerformed

	/**
	 * ダイアログを閉じる
	 */
	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
		this.closePanel();
	}//GEN-LAST:event_closeButtonActionPerformed

	/**
	 * カルテ情報を登録する
	 */
        private void registButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registButtonActionPerformed
            if(this.regist()) {

                //カルテ分類・詳細・技術カルテデータ
                loadTechnicKarte(shopId, slipNo, true);
                
                //画像カルテデータ
                loadImageKarte();
            
                //データを表示する
                this.showData();
                
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
                        "カルテデータ",
                        JOptionPane.INFORMATION_MESSAGE);
            
                //ダイアログを閉じる
		this.closePanel();
            } else {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED),
                        "カルテデータ",
                        JOptionPane.ERROR_MESSAGE);
            }
        }//GEN-LAST:event_registButtonActionPerformed

        private void image1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_image1MouseClicked
            this.viewImage(image1);
        }//GEN-LAST:event_image1MouseClicked

        private void image2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_image2MouseClicked
            this.viewImage(image2);
        }//GEN-LAST:event_image2MouseClicked

        private void image3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_image3MouseClicked
            this.viewImage(image3);
        }//GEN-LAST:event_image3MouseClicked

        private void viewImage(ImagePanel ip)
        {
            if (ip.getImage() == null) return;
            KarteImage ki = new KarteImage(ip.getImage());
            SwingUtil.openAnchorDialog( parentFrame, true, ki, "カルテ写真", SwingUtil.ANCHOR_LEFT | SwingUtil.ANCHOR_TOP );
            ((JDialog)ki.getParent().getParent().getParent().getParent()).dispose();
            ki = null;
            System.gc();
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JComboBox cmbDate;
    private javax.swing.JButton copyButton;
    private javax.swing.JComboBox copyDate;
    private javax.swing.JLabel customerLabel;
    private com.geobeck.swing.JFormattedTextFieldEx customerName;
    private com.geobeck.swing.JFormattedTextFieldEx customerNo;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateLabel1;
    private javax.swing.JCheckBox deleteImage1;
    private javax.swing.JCheckBox deleteImage2;
    private javax.swing.JCheckBox deleteImage3;
    private com.geobeck.swing.ImagePanel image1;
    private com.geobeck.swing.ImagePanel image2;
    private com.geobeck.swing.ImagePanel image3;
    private javax.swing.JLabel imageLabel;
    private com.geobeck.swing.JTextFieldEx imagePath1;
    private com.geobeck.swing.JTextFieldEx imagePath2;
    private com.geobeck.swing.JTextFieldEx imagePath3;
    private javax.swing.JButton imageReferenceButton1;
    private javax.swing.JButton imageReferenceButton2;
    private javax.swing.JButton imageReferenceButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTable karteClass;
    private javax.swing.JScrollPane karteClassScrollPane;
    private com.geobeck.swing.JTableEx karteDetails;
    private javax.swing.JScrollPane karteDetailsScrollPane;
    private javax.swing.JLabel karteLabel;
    private javax.swing.JTable karteReference;
    private javax.swing.JScrollPane karteReferenceScrollPane;
    private javax.swing.JButton leftButton;
    private com.geobeck.swing.JTextAreaEx memoBody;
    private com.geobeck.swing.JTextAreaEx memoBody1;
    private com.geobeck.swing.JTextAreaEx memoBody2;
    private com.geobeck.swing.JTextAreaEx memoBody3;
    private javax.swing.JScrollPane memoScrollPane;
    private javax.swing.JScrollPane memoScrollPane1;
    private javax.swing.JScrollPane memoScrollPane2;
    private javax.swing.JScrollPane memoScrollPane3;
    private javax.swing.JButton nextButton;
    private javax.swing.JTable payment;
    private javax.swing.JScrollPane paymentScrollPane;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton registButton;
    private javax.swing.JButton resetButton;
    private javax.swing.ButtonGroup sex;
    private javax.swing.JLabel staffLabel;
    private com.geobeck.swing.JFormattedTextFieldEx staffName;
    private javax.swing.JTable tbProduct;
    private javax.swing.JScrollPane technicScrollPane;
    // End of variables declaration//GEN-END:variables
    
        //技術カルテ管理クラス
        private	TechnicKarteManager		technicKarteManager		=	new TechnicKarteManager();
	
        //画像カルテ一覧
	private ArrayList<DataImageKarte>	dataImageKarteList		=	new ArrayList<DataImageKarte>();
	
	/**
	 * ダイアログを初期化する
	 */
	private void init()
	{
                //データ読込
                this.load();
		
		farstFlg = false;

		//呼出元画面で選択された来店日を設定する
		selectDate();
                
                // 201712 GB add start #33792 [GB内対応][gb]mst_user.use_karte=trueの場合は、SPOS側のカルテ画面の登録ボタン、コピーボタンを非活性にする
                if(SystemInfo.getUseKarte()) {
                    copyButton.setEnabled(false);
                    registButton.setEnabled(false);
                }
                // 201712 GB add end #33792 [GB内対応][gb]mst_user.use_karte=trueの場合は、SPOS側のカルテ画面の登録ボタン、コピーボタンを非活性にする
//                //データを表示する
//                showData();
	}
	
	/**
	 * データを読み込む。
	 */
	private void load()
	{
                //来店日
		loadDate();

                //カルテ分類・詳細・参照・技術カルテデータ
                loadTechnicKarte(shopId, slipNo, true);
                
                //画像カルテデータ
                loadImageKarte();
	}
	
	/**
	 * 来店日を対象顧客の精算情報から読み込む。
	 */
	private void loadDate()
	{
            for (VisitRecord vr : customer.getAccounts()) {
                Object obj = makeObj(vr.getSalesDate().toString().replaceAll("-", "/"));
                cmbDate.addItem(obj);
                copyDate.addItem(obj);
            }
	}
        
	/**
	 * 引数の文字列が定義されたオブジェクトを作成する。
	 */
        private Object makeObj(final String str)  {
            return new Object()
                {
                    public String toString() { return str; }
                };
        }
	
	/**
	 * カルテ分類・詳細・参照・技術カルテデータを読み込む。
	 * @param shopId ショップID
	 * @param slipNo 伝票NO
	 */
	private void loadTechnicKarte(Integer shopId, Integer slipNo, boolean farst)
	{
                technicKarteManager.getShop().setShopID(shopId);
                technicKarteManager.setSlipNo(slipNo);
                try {
                    technicKarteManager.load(SystemInfo.getConnection(), farst);
                } catch(SQLException e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
	}
	
	/**
	 * 画像カルテをデータベースから読み込む。
	 * @return true - 成功
	 */
	private boolean loadImageKarte()
	{
		dataImageKarteList.clear();
		
		ConnectionWrapper con	=	SystemInfo.getConnection();
		
		try
		{
			for (int i = 0; i < MAX_FILE_COUNT; i++)
			{
				DataImageKarte	dik	=	new DataImageKarte();
				
				dik.setCustomer(customer);
				dik.setImageNo(i + 1);
                                dik.load(con);
				
                                dataImageKarteList.add(dik);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	true;
	}
	
	/**
	 * 呼出元画面で選択された来店日を設定する。
	 */
	private void selectDate()
	{
            int index = 0;
            for (VisitRecord vr : customer.getAccounts()) {

                if (vr.getShop().getShopID().intValue() == this.shopId.intValue() &&
                        vr.getSlipNo().intValue() == this.slipNo.intValue())
                {
                    //選択された来店日を設定
                    cmbDate.setSelectedIndex(index);
                    break;
                }
                index++;
            }
	}
	
	/**
	 * データを表示する。
	 */
	private void showData()
	{
            //日めくりボタンの制御
            if (cmbDate.getSelectedIndex() == 0) {
                nextButton.setEnabled(false);
            } else {
                nextButton.setEnabled(true);
            }
            if (cmbDate.getItemCount() == cmbDate.getSelectedIndex() + 1) {
                prevButton.setEnabled(false);
            } else {
                prevButton.setEnabled(true);
            }
            
            //顧客
            customerNo.setText(customer.getCustomerNo());
            customerName.setText(customer.getFullCustomerName());
            
            //主担当者名・来店メモ
            showSelectedAccountInfo();
            
            //技術・商品・支払一覧
            showSelectedAccountDetail();
            
            //各カルテ一覧
            showSelectedAccountTechnicKarte();
        }
	
	/**
	 * 選択された来店日の技術・商品・支払一覧を表示する。
	 */
	private void showSelectedAccountDetail()
	{
		SwingUtil.clearTable(tbProduct);
		//SwingUtil.clearTable(item);
		SwingUtil.clearTable(payment);
		
		Integer index = cmbDate.getSelectedIndex();
		
		if(0 <= index && index < customer.getAccounts().size())
		{
			VisitRecord vr = customer.getAccounts().get(index);
			
			try
			{
                            //伝票データを全て読み込む。
                            if (!vr.loadAll(SystemInfo.getConnection())) {
                                return;
                            }
			}
			catch(SQLException e)
			{
                            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
			
                        //割引金額の合計
                        long totalDiscount = vr.getDiscountTotal();
                        
			for(DataSalesDetail dsd : vr)
			{
                            //IVS_LVTu start edit 2015/10/20 New request #43514
				//if(dsd.getProductDivision() == 1 || dsd.getProductDivision() == 3)
				//{
                                    //技術一覧を表示する
                                if (dsd.getProductDivision() == 1 || dsd.getProductDivision() == 3
                                        ||dsd.getProductDivision() == 2 || dsd.getProductDivision() == 4
                                        ||dsd.getProductDivision() == 5 || dsd.getProductDivision() == 6) {
                                        this.addSalesDetailData(tbProduct, dsd, vr.getSalesDate());
                                }
				//}
				//else if(dsd.getProductDivision() == 2 || dsd.getProductDivision() == 4)
				//{
                                    //商品一覧を表示する
                                //    this.addSalesDetailData(item, dsd, vr.getSalesDate());
				//}
                                //IVS_LVTu end edit 2015/10/20 New request #43514
                               
			}

			DefaultTableModel model = (DefaultTableModel)payment.getModel();
			
			for(DataPayment dp : vr.getPayments())
			{
				Vector<Object> temp = new Vector<Object>();
				
				temp.add(String.format("%1$tY/%1$tm/%1$td", dp.getPaymentDate()));
				
                                long total = 0;
                                
                                //IVS_LVTu start edit 2015/11/05 New request #43514
                                //現金売上
                                temp.add(dp.getPaymentTotal(1));
                                //現金以外
				for (int i = 2; i <= 4; i ++) {
                                    //temp.add(dp.getPaymentTotal(i));
                                    total += dp.getPaymentTotal(i);
				}
                                temp.add(total);
                                //IVS_LVTu end edit 2015/11/05 New request #43514
				temp.add(dp.getBillValue());
				total += dp.getBillValue();
                                  // vtbphuong start delete 20140623 Bug #25667
                                // お釣り
//                                long changePrice = total - vr.getSalesTotal();
//                                
//                                long newPrice = ((Long)temp.get(1)).longValue() - changePrice;
//                                if(newPrice > 0){
//                                    newPrice -= vr.getDiscount().getDiscountValue();
//                                }
//                                temp.remove(1);
//                                temp.add(1, newPrice);
                                  long changePrice = dp.getChangeValue();
                                  changePrice = (Long)temp.get(1) - changePrice;
                                  temp.remove(1);
                                  temp.add(1, changePrice);
                                  // vtbphuong end delete 20140623 Bug #25667
				model.addRow(temp);
			}
		}
	}
	
	/**
	 * 技術・商品一覧を表示する。
	 * @param table テーブル
	 * @param dsd 伝票詳細データ
	 * @param salesDate 売上日
	 */
	private void addSalesDetailData(JTable table, DataSalesDetail dsd, java.util.Date salesDate)
	{
		DefaultTableModel	model	=	(DefaultTableModel)table.getModel();
		
		Vector<Object>	temp	=	new Vector<Object>();
                temp.add(dsd.getProductDivisionName());
                //IVS_LVTu start edit 2015/10/20 New request #43514
                if ( dsd.getProductDivision() == 5 ) {
                    temp.add(dsd.getCourse().getCourseClass().getCourseClassName());
                    temp.add(dsd.getCourse().getCourseName());
                }else if(dsd.getProductDivision() == 6) {
                    temp.add(dsd.getConsumptionCourse().getConsumptionCourseClass().getCourseClassName());
                    temp.add(dsd.getConsumptionCourse().getCourseName());
                }else {
                    //productDivision in (1,2,3,4)
                    temp.add(dsd.getProduct().getProductClass().getProductClassName());
                    temp.add(dsd.getProduct().getProductName());
                }
                //IVS_LVTu start edit 2015/10/20 New request #43514
		temp.add(SystemInfo.getAccountSetting().getDisplayValue(dsd.getProductValue(), SystemInfo.getTaxRate(salesDate)));
                temp.add(dsd.getProductNum());
		temp.add(dsd.getDiscountValue());
                temp.add(SystemInfo.getAccountSetting().getDisplayValue(dsd.getValue(), dsd.getDiscountValue(), dsd.getTaxRate()));
		temp.add(dsd.getStaff().getFullStaffName());
		
		model.addRow(temp);
	}
	
	/**
	 * 選択された来店日の主担当者名・来店メモを表示する。
	 */
	private void showSelectedAccountInfo()
	{
		Integer		index	=	cmbDate.getSelectedIndex();
            
                VisitRecord	vr	=	customer.getAccounts().get(index);
            
                //主担当者名
                staffName.setText(vr.getStaff().getFullStaffName());
                
                //来店メモ
                memoBody.setText(vr.getVisitedMemo());
        }
    
        /**
         * 各カルテ一覧データを表示する。
         */
        private void showSelectedAccountTechnicKarte() {
            //カルテ分類
            showTechnicKarteClasses();
            
            //カルテ詳細・内容
            showTechnicKartes(0, 0);
            
            //カルテ参照
            showKarteReferences();
            
            //画像カルテ
            showImageKarte();
        }
    
        /**
         * カルテ分類データを表示する。
         */
        private void showTechnicKarteClasses() {
            SwingUtil.clearTable(karteClass);

            DefaultTableModel	model	=	(DefaultTableModel)karteClass.getModel();

            for(TechnicKarteClass tkc : technicKarteManager.getTechnicKarteClasses()) {
                Vector<Object>	temp	=	new Vector<Object>();
                temp.add(tkc);
                model.addRow(temp);
            }

            if(0 < karteClass.getRowCount()) {
                karteClass.setRowSelectionInterval(0, 0);
            } 
        }
    
        /**
         * カルテ詳細データを表示する。
         * @param row 行
         * @param col 列
         */
        private void showTechnicKartes(Integer row, Integer col) {
//	    if(karteDetails != null && karteDetails.getCellEditor() != null){
//		karteDetails.getCellEditor().stopCellEditing();
////		karteDetails.getCellEditor().cancelCellEditing();
//	    }
	    
            Integer index = karteClass.getSelectedRow();
	    clsRowIndex = karteClass.getSelectedRow();
            SwingUtil.clearTable(karteDetails);

            if (index != null && 0 <= index) {
                this.showTechnicKartes(technicKarteManager.getTechnicKarteClasses().get(index), karteDetails);
                if (0 < karteDetails.getRowCount()) {
                    karteDetails.changeSelection(row, col, false, false);
                } 
            }
        }
    
        /**
         * カルテ詳細データを表示する。
         * @param tkc 分類
         * @param table テーブル
         */
        private void showTechnicKartes(TechnicKarteClass tkc, JTable table) {

	    SwingUtil.clearTable(table);

            DefaultTableModel model = (DefaultTableModel)table.getModel();

            for (TechnicKarte tk : tkc) {
                Vector<Object> temp = new Vector<Object>();
                temp.add(tk.getKarteDetailName());
                temp.add(tk.getContents());
                model.addRow(temp);
            }
        }
    
        /**
         * カルテ参照データを表示する。
         */
        private void showKarteReferences() {

            Integer indexClass = karteClass.getSelectedRow();
            Integer indexDetails = karteDetails.getSelectedRow();

            SwingUtil.clearTable(karteReference);

            if (indexClass != null && 0 <= indexClass &&
                indexDetails != null && 0 <= indexDetails) {
                this.showKarteReferences(technicKarteManager.getTechnicKarteClasses().get(indexClass).get(indexDetails), karteReference);
                if (0 < karteReference.getRowCount()) {
                    karteReference.setRowSelectionInterval(0, 0);
                } 
            }
        }
    
        /**
         * カルテ参照データを表示する。
         * @param tk カルテ詳細
         * @param table テーブル
         */
        private void showKarteReferences(TechnicKarte tk, JTable table) {
	    
            SwingUtil.clearTable(table);

            DefaultTableModel model = (DefaultTableModel)table.getModel();

            for (TechnicKarteReference tkr : tk) {
                Vector<Object> temp = new Vector<Object>();
                temp.add(tkr.getKarteReferenceName());
                model.addRow(temp);
            }
        }
    
        /**
         * 画像カルテデータを表示する。
         */
        private void showImageKarte() {
            int i = 0;
            for(DataImageKarte dik : dataImageKarteList) {
		switch(i)
		{
                    case 0:
                        imagePath1.setText("");
                        image1.setImage(dik.getImage());
                        image1.updateUI();
                        deleteImage1.setSelected(false);
                        memoBody1.setText(dik.getComment());
                        break;
                    case 1:
                        imagePath2.setText("");
                        image2.setImage(dik.getImage());
                        image2.updateUI();
                        deleteImage2.setSelected(false);
                        memoBody2.setText(dik.getComment());
                        break;
                    case 2:
                        imagePath3.setText("");
                        image3.setImage(dik.getImage());
                        image3.updateUI();
                        deleteImage3.setSelected(false);
                        memoBody3.setText(dik.getComment());
                        break;
		}
                i++;
            }
        }
	
	/**
	 * 選択されたカルテ参照の内容をコピーする。
	 */
	private void copyKarteReference()
	{
	    if (karteClass.getRowCount() == 0) return;
	    if (karteDetails.getRowCount() == 0) return;
	    if (karteReference.getRowCount() == 0) return;

	    //カルテ参照の内容を取得
	    Integer refRowIndex = karteReference.getSelectedRow();
	    String contents = (String)karteReference.getValueAt(refRowIndex, 0);

	    //カルテ参照の内容をコピー
	    Integer clsRowIndex = karteClass.getSelectedRow();
	    Integer dtlRowIndex = karteDetails.getSelectedRow();
	    technicKarteManager.getTechnicKarteClasses().get(clsRowIndex).get(dtlRowIndex).setContents(contents);

	    //カルテ詳細・内容を再表示する
	    Integer dtlColIndex = karteDetails.getSelectedColumn();
	    showTechnicKartes(dtlRowIndex, dtlColIndex);
	    SystemInfo.getLogger().log(Level.INFO, "カルテデータコピー row=" + dtlRowIndex +" col="+dtlColIndex + " 内容："+contents);
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(prevButton);
		SystemInfo.addMouseCursorChange(nextButton);
		SystemInfo.addMouseCursorChange(imageReferenceButton1);
		SystemInfo.addMouseCursorChange(imageReferenceButton2);
		SystemInfo.addMouseCursorChange(imageReferenceButton3);
		SystemInfo.addMouseCursorChange(copyButton);
		SystemInfo.addMouseCursorChange(resetButton);
		SystemInfo.addMouseCursorChange(leftButton);
		SystemInfo.addMouseCursorChange(registButton);
		SystemInfo.addMouseCursorChange(closeButton);
	}
	
	/**
	 * 画像選択時の処理
	 */
	private void selectImage1()
	{
		String filePath = this.selectImageFile();
		
		//画像をチェックする
		if (this.checkImage(filePath)) {

                    if (filePath.length() > 0) {
                        ImageIcon ii = new ImageIcon(filePath);
                        image1.setImage(ii);
                        image1.updateUI();
                        imagePath1.setText(filePath);
                    }
		    
		} else {
		    imagePath1.setText("");
		}
	}
	
	/**
	 * 画像選択時の処理
	 */
	private void selectImage2()
	{
		String filePath	= this.selectImageFile();
		
		//画像をチェックする
		if (this.checkImage(filePath)) {
                    if (filePath.length() > 0) {
			ImageIcon ii = new ImageIcon(filePath);
			image2.setImage(ii);
			image2.updateUI();
			imagePath2.setText(filePath);
                    }
		} else {
                    imagePath2.setText("");
		}
	}
	
	/**
	 * 画像選択時の処理
	 */
	private void selectImage3()
	{
		String filePath	= this.selectImageFile();
		
		//画像をチェックする
		if (this.checkImage(filePath)) {
                    if (filePath.length() > 0) {
			ImageIcon	ii	=	new ImageIcon(filePath);
			image3.setImage(ii);
			image3.updateUI();
			imagePath3.setText(filePath);
                    }
		} else {
                    imagePath3.setText("");
		}
	}
	
	/**
	 * 画像ファイルを開く
	 * @return 
	 */
	private String selectImageFile()
	{
		JFileChooser jfc = new JFileChooser();
		WildcardFileFilter filter = new WildcardFileFilter("*.jpg;*.jpeg", "JPEGファイル");
		jfc.setFileFilter(filter);
		jfc.setAcceptAllFileFilterUsed(false);
                
		if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			return	jfc.getSelectedFile().getAbsolutePath();
		}
		
		return	"";
	}
	
	/**
	 * 画像をチェックする
	 * @param filePath 画像ファイルのパス
	 * @return true - OK
	 */
	private boolean checkImage(String filePath)
	{
            if (!filePath.equals("")) {
		File	f	=	new File(filePath);

		//ファイルが存在する場合
		if(f.exists())
		{
			//ファイルサイズをチェック
			if(MAX_FILE_SIZE < f.length())
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(1201, "画像", MAX_FILE_SIZE_STR),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				return	false;
			}

			return	true;
		}
		else
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(1200,
					f.getAbsolutePath()),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return	false;
		}
            }
            return	true;
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
		cmbDate.addKeyListener(SystemInfo.getMoveNextField());
		memoBody.addKeyListener(SystemInfo.getMoveNextField());
		memoBody.addFocusListener(SystemInfo.getSelectText());
		imagePath1.addKeyListener(SystemInfo.getMoveNextField());
		imagePath1.addFocusListener(SystemInfo.getSelectText());
		deleteImage1.addKeyListener(SystemInfo.getMoveNextField());
		deleteImage1.addFocusListener(SystemInfo.getSelectText());
		imagePath2.addKeyListener(SystemInfo.getMoveNextField());
		imagePath2.addFocusListener(SystemInfo.getSelectText());
		deleteImage2.addKeyListener(SystemInfo.getMoveNextField());
		deleteImage2.addFocusListener(SystemInfo.getSelectText());
		imagePath3.addKeyListener(SystemInfo.getMoveNextField());
		imagePath3.addFocusListener(SystemInfo.getSelectText());
		deleteImage3.addKeyListener(SystemInfo.getMoveNextField());
		deleteImage3.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * コンポーネントを初期化する。
	 */
	private void initOptionComponent()
	{
		this.initAccountTable();
	}
	
	/**
	 * テーブルを初期化する。
	 */
	private void initAccountTable()
	{
		this.initAccountDetailTableWidth(tbProduct);
		//this.initAccountDetailTableWidth(item);
                this.initAccountDetailPaymentTableWidth();
                this.initKarteDetailTableWidth();
	}
	
	/**
	 * テーブルの横幅を初期化する。
         * @param table テーブル
	 */
	private void initAccountDetailTableWidth(JTable table)
	{
                //IVS_LVTu start edit 2015/10/20 New request #43514
                table.getColumnModel().getColumn(0).setPreferredWidth(40);
		table.getColumnModel().getColumn(1).setPreferredWidth(40);
		table.getColumnModel().getColumn(2).setPreferredWidth(80);
		table.getColumnModel().getColumn(3).setPreferredWidth(45);
		table.getColumnModel().getColumn(4).setPreferredWidth(40);
		table.getColumnModel().getColumn(5).setPreferredWidth(45);
		table.getColumnModel().getColumn(6).setPreferredWidth(52);
		table.getColumnModel().getColumn(7).setPreferredWidth(85);
                //IVS_LVTu start edit 2015/10/20 New request #43514
	}
	
	/**
	 * 支払一覧テーブルの横幅を初期化する。
	 */
	private void initAccountDetailPaymentTableWidth()
	{
		payment.getColumnModel().getColumn(0).setPreferredWidth(92);
		payment.getColumnModel().getColumn(1).setPreferredWidth(75);
		payment.getColumnModel().getColumn(2).setPreferredWidth(75);
		payment.getColumnModel().getColumn(3).setPreferredWidth(75);
	}
	
	/**
	 * カルテ詳細一覧テーブルの横幅を初期化する。
	 */
	private void initKarteDetailTableWidth()
	{
		karteDetails.getColumnModel().getColumn(0).setPreferredWidth(180);
		karteDetails.getColumnModel().getColumn(1).setPreferredWidth(240);
	}
	
	/**
	 * カルテ情報画面用FocusTraversalPolicyを取得する。
	 * @return カルテ情報画面用FocusTraversalPolicy
	 */
	public KarteDialogFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * カルテ情報画面用FocusTraversalPolicy
	 */
	private class KarteDialogFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(cmbDate))
			{
				return prevButton;
			}
			else if (aComponent.equals(prevButton))
			{
				return nextButton;
			}
			else if (aComponent.equals(nextButton))
			{
				return imagePath1;
			}
			else if (aComponent.equals(imagePath1))
			{
				return deleteImage1;
			}
			else if (aComponent.equals(deleteImage1))
			{
				return imageReferenceButton1;
			}
			else if (aComponent.equals(imageReferenceButton1))
			{
				return imagePath2;
			}
			else if (aComponent.equals(imagePath2))
			{
				return deleteImage2;
			}
			else if (aComponent.equals(deleteImage2))
			{
				return imageReferenceButton2;
			}
			else if (aComponent.equals(imageReferenceButton2))
			{
				return imagePath3;
			}
			else if (aComponent.equals(imagePath3))
			{
				return deleteImage3;
			}
			else if (aComponent.equals(deleteImage3))
			{
				return imageReferenceButton3;
			}
			else if (aComponent.equals(imageReferenceButton3))
			{
				return copyButton;
			}
			else if (aComponent.equals(copyButton))
			{
				return resetButton;
			}
			else if (aComponent.equals(resetButton))
			{
				return karteDetails;
			}
			else if (aComponent.equals(karteDetails))
			{
				return leftButton;
			}
			else if (aComponent.equals(leftButton))
			{
				return registButton;
			}
			else if (aComponent.equals(registButton))
			{
				return closeButton;
			}
			else if (aComponent.equals(closeButton))
			{
				return cmbDate;
			}
                        return aComponent;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(cmbDate))
			{
				return closeButton;
			}
			else if (aComponent.equals(prevButton))
			{
				return cmbDate;
			}
			else if (aComponent.equals(nextButton))
			{
				return prevButton;
			}
			else if (aComponent.equals(imagePath1))
			{
				return nextButton;
			}
			else if (aComponent.equals(deleteImage1))
			{
				return imagePath1;
			}
			else if (aComponent.equals(imageReferenceButton1))
			{
				return deleteImage1;
			}
			else if (aComponent.equals(imagePath2))
			{
				return imageReferenceButton1;
			}
			else if (aComponent.equals(deleteImage2))
			{
				return imagePath2;
			}
			else if (aComponent.equals(imageReferenceButton2))
			{
				return deleteImage2;
			}
			else if (aComponent.equals(imagePath3))
			{
				return imageReferenceButton2;
			}
			else if (aComponent.equals(deleteImage3))
			{
				return imagePath3;
			}
			else if (aComponent.equals(imageReferenceButton3))
			{
				return deleteImage3;
			}
			else if (aComponent.equals(copyButton))
			{
				return imageReferenceButton3;
			}
			else if (aComponent.equals(resetButton))
			{
				return copyButton;
			}
			else if (aComponent.equals(karteDetails))
			{
				return resetButton;
			}
			else if (aComponent.equals(leftButton))
			{
				return karteDetails;
			}
			else if (aComponent.equals(registButton))
			{
				return leftButton;
			}
			else if (aComponent.equals(closeButton))
			{
				return registButton;
			}
			return aComponent;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
                        return cmbDate;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
                        return closeButton;
		}
		
		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
                        return cmbDate;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
                        return cmbDate;
		}
	}
	
	/**
	 * ダイアログを閉じる
	 */
	private void closePanel()
	{
		if(this.isDialog())
		{
			((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
		}
		else
		{
			this.setVisible(false);
		}
	}
        
	/**
	 * 入力されたデータをセットする。
	 */
	private void setData()
	{
            //来店メモ
            Integer index = cmbDate.getSelectedIndex();

            VisitRecord	vr = customer.getAccounts().get(index);

            vr.setVisitedMemo(memoBody.getText());

            //画像カルテ
            int i = 0;
            for(DataImageKarte dik : dataImageKarteList) {
		switch(i)
		{
                    case 0:
                        dik.setImageFilePath(imagePath1.getText());
                        dik.setImage(image1.getImage());
                        dik.setDeleteImage(deleteImage1.isSelected());
                        dik.setComment(memoBody1.getText());
                        break;
                    case 1:
                        dik.setImageFilePath(imagePath2.getText());
                        dik.setImage(image2.getImage());
                        dik.setDeleteImage(deleteImage2.isSelected());
                        dik.setComment(memoBody2.getText());
                        break;
                    case 2:
                        dik.setImageFilePath(imagePath3.getText());
                        dik.setImage(image3.getImage());
                        dik.setDeleteImage(deleteImage3.isSelected());
                        dik.setComment(memoBody3.getText());
                        break;
		}
                i++;
            }
        }
	
	/**
	 * 伝票データを更新する。
	 * @param con コネクション
	 * @return 成功時trueを返す。
	 */
	private boolean registDataSales(ConnectionWrapper con)
	{
                Integer		index	=	cmbDate.getSelectedIndex();

                VisitRecord	vr	=	customer.getAccounts().get(index);
                
		try
		{
			return vr.regist(con);
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			return	false;
		}
	}
    
        /**
         * 登録処理を行う。
         * @return true - 成功、false - 失敗
         */
        public boolean regist() {
            boolean		result	=	false;

            try {
                ConnectionWrapper con = SystemInfo.getConnection();

		SystemInfo.getLogger().log(Level.INFO, "カルテ情報登録開始");
                con.begin();

                try {
                    //入力内容の設定
                    this.setData();

                    //伝票データ(来店メモ)の更新
		    SystemInfo.getLogger().log(Level.INFO, "伝票データ(来店メモ)の更新");
                    result	=	this.registDataSales(con);

                    //技術カルテデータの更新
		    SystemInfo.getLogger().log(Level.INFO, "技術カルテデータの更新");
                    if(result){
                        result	=	technicKarteManager.regist(con);
                    }

                    //画像カルテデータの更新
		    SystemInfo.getLogger().log(Level.INFO, "画像カルテデータの更新");
                    for(DataImageKarte dik : dataImageKarteList) {
                        if(result){
                            result	=	dik.regist(con);
                        }
                    }
                } catch(Exception e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }

                if(result) {
                    con.commit();
		    SystemInfo.getLogger().log(Level.INFO, "カルテ情報登録正常終了");
                    result	=	true;
                } else {
		    SystemInfo.getLogger().log(Level.INFO, "カルテ情報登録異常終了");
                    con.rollback();
                }
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            return	result;
        }
        
        private boolean isRegistered(VisitRecord vr) {
            
            boolean result = false;
            
            try {
                StringBuilder sql = new StringBuilder(1000);
                sql.append(" select");
                sql.append("     count(*) as cnt");
                sql.append(" from");
                sql.append("     data_technic_karte");
                sql.append(" where");
                sql.append("         shop_id = " + SQLUtil.convertForSQL(vr.getShop().getShopID()));
                sql.append("     and slip_no = " + SQLUtil.convertForSQL(vr.getSlipNo()));
                sql.append("     and delete_date is null");

                //コネクションを取得
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
                while ( rs.next() ) {
                    result = rs.getInt("cnt") > 0;
                }
                rs.close();

            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            return result;
        }

}
