/*
 * BusinessReportPanel.java
 *
 * Created on 2006/10/19, 10:39
 */
package com.geobeck.sosia.pos.hair.report;

import java.awt.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;

import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.report.bean.*;
import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.hair.report.logic.*;
import com.geobeck.sosia.pos.basicinfo.*;
import com.geobeck.sosia.pos.master.*;
import com.geobeck.sosia.pos.hair.master.product.*;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.util.SQLUtil;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

/**
 *
 * @author katagiri
 */
public class TurnOverAnlyzePanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private MstStaffs staffs = null;
    private MstTechnicClasses mts = new MstTechnicClasses();
    private Calendar calStart = null;
    private Calendar calEnd = null;
    private Calendar calPrevStart = null;
    private Calendar calPrevEnd = null;
    private Calendar calPrevMonthStart = null;
    private Calendar calPrevMonthEnd = null;
    private Calendar calBeforePrevStart = null;
    private Calendar calBeforePrevEnd = null;
    private String CurrentDate = "";
    private int monthStart;
    private int monthEnd;
    private int yearStart;
    private int yearEnd;
    private int dayStart;
    private int dayEnd;

    /**
     * Creates new form BusinessReportPanel
     */
    public TurnOverAnlyzePanel() {
        initComponents();
        addMouseCursorChange();
        this.setSize(550, 350);
        this.setPath("売上分析表");
        this.setTitle("売上分析表");
        addMouseCursorChange();
        init();

    }

    /**
     * init form
     */
    private void init() {


        //対象期間の設定【来店周期別構成比】
        this.cmbTargetPeriodStartDate.setDate(getFirstDateOfCurrentMonth());
        this.cmbTargetPeriodEndDate.setDate(new Date());
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -1);
        CurrentDate = dateFormat.format(cal.getTime());
        SystemInfo.initGroupShopComponents(cmbShop, 3);
        try {
            mts.getAll(SystemInfo.getConnection());
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

    }

    private Date getFirstDateOfCurrentMonth() {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMinimum(Calendar.DAY_OF_MONTH));
        return cal.getTime();
    }
    
    /**
     * int data for year combobx
     *
     * @param cmb
     * @param nowYear
     */
    private void initYearCombo(final JComboBox cmb, int nowYear) {
        cmb.removeAllItems();

        int y = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = 0; i < 5; i++) {
            cmb.addItem(String.valueOf(y - i));
        }
        cmb.setSelectedItem(nowYear);
        cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ((JTextField) cmb.getEditor().getEditorComponent()).selectAll();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportTypeGroup = new javax.swing.ButtonGroup();
        taxGroup = new javax.swing.ButtonGroup();
        staffGroup = new javax.swing.ButtonGroup();
        newVisitGroup = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        btnOutput4 = new javax.swing.JButton();
        cmbShop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        lblTargetPeriod5 = new javax.swing.JLabel();
        targetLabel2 = new javax.swing.JLabel();
        cmbTargetPeriodStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        termtLabe1 = new javax.swing.JLabel();
        cmbTargetPeriodEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);

        btnOutput4.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutput4.setBorderPainted(false);
        btnOutput4.setContentAreaFilled(false);
        btnOutput4.setFocusCycleRoot(true);
        btnOutput4.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutput4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutput4ActionPerformed(evt);
            }
        });
        jPanel1.add(btnOutput4);
        btnOutput4.setBounds(320, 10, 92, 25);

        cmbShop.setFocusCycleRoot(true);
        jPanel1.add(cmbShop);
        cmbShop.setBounds(90, 10, 220, 20);

        lblTargetPeriod5.setText("集計期間");
        lblTargetPeriod5.setFocusCycleRoot(true);
        jPanel1.add(lblTargetPeriod5);
        lblTargetPeriod5.setBounds(20, 40, 60, 20);

        targetLabel2.setText("対象");
        targetLabel2.setFocusCycleRoot(true);
        jPanel1.add(targetLabel2);
        targetLabel2.setBounds(20, 10, 60, 20);

        cmbTargetPeriodStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodStartDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTargetPeriodStartDateItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbTargetPeriodStartDate);
        cmbTargetPeriodStartDate.setBounds(90, 40, 88, 21);

        termtLabe1.setText("〜");
        jPanel1.add(termtLabe1);
        termtLabe1.setBounds(190, 40, 30, 21);

        cmbTargetPeriodEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodEndDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTargetPeriodEndDateItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbTargetPeriodEndDate);
        cmbTargetPeriodEndDate.setBounds(220, 40, 90, 21);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 236, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnOutput4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutput4ActionPerformed

        if (!SystemInfo.checkAuthorityPassword(254)) {
            return;
        }

        //ReportLogicNons logic = new ReportLogicNons();
        ReportParameterBean paramBean = new ReportParameterBean();
        paramBean.setMainReportType(ReportParameterBean.MAIN_REPORT_STAFF);

        //対象期間
        paramBean.setTargetStartDate(this.cmbTargetPeriodStartDate.getDateStr());
        paramBean.setTargetEndDate(this.cmbTargetPeriodEndDate.getDateStr());
        paramBean.setTargetStartDateObj(this.cmbTargetPeriodStartDate.getDate());
        paramBean.setTargetEndDateObj(this.cmbTargetPeriodEndDate.getDate());

        Calendar start = Calendar.getInstance();
        Calendar end = Calendar.getInstance();
        if (this.cmbTargetPeriodStartDate.getDate() == null || this.cmbTargetPeriodEndDate.getDate() == null) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "対象期間"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        start.setTime(this.cmbTargetPeriodStartDate.getDate());
        end.setTime(this.cmbTargetPeriodEndDate.getDate());

        Date prevStar = cmbTargetPeriodStartDate.getDate();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(prevStar);
        monthStart = calendar.get(Calendar.MONTH) + 1;
        yearStart = calendar.get(Calendar.YEAR);
        dayStart = calendar.get(Calendar.DATE);

        Date prevEnd = cmbTargetPeriodEndDate.getDate();
        Calendar calendarEnd = Calendar.getInstance();
        calendarEnd.setTime(prevEnd);
        monthEnd = calendarEnd.get(Calendar.MONTH) + 1;
        yearEnd = calendarEnd.get(Calendar.YEAR);
        dayEnd = calendarEnd.get(Calendar.DATE);

        if (start.compareTo(end) != 0) {
            //対象期間が開始日＞終了日ならエラー
            if (start.after(end)) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "対象期間"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            } else if ((monthStart != monthEnd || yearEnd != yearStart)) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "対象期間"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        //出力処理
        boolean logicResult = true;
        btnOutput4.setCursor(null);
        try {
            
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            if (cmbShop.getSelectedItem() instanceof MstGroup) {
                MstGroup mg = (MstGroup) cmbShop.getSelectedItem();
                paramBean.setTargetName(mg.getGroupName());
                paramBean.setShopIDList(mg.getShopIDListAll());
            } //店舗
            else if (cmbShop.getSelectedItem() instanceof MstShop) {
                MstShop ms = (MstShop) cmbShop.getSelectedItem();
                paramBean.setTargetName(ms.getShopName());
                paramBean.setShopIDList(ms.getShopID().toString());
            }

            //来店周期別構成比
            logicResult = outVisitTermByTechnicReport(paramBean);


        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1099),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

        // エラー時
        if (!logicResult) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnOutput4ActionPerformed

    /**
     * 店舗情報取得
     *
     * @return 店舗情報(HashMap)
     */
    public HashMap<String, String> getShopInfo(String shopIDList) throws Exception {
        HashMap<String, String> shopInfo = new HashMap<String, String>();

        ConnectionWrapper cw = SystemInfo.getConnection();

        String query = "SELECT shop_name, cutoff_day FROM mst_shop\n"
                + "where shop_id in (" + shopIDList + ")";
        ResultSetWrapper rs = cw.executeQuery(query);
        if (!rs.next()) {
            // レコードが存在しないためエラー
            return null;
        }
        shopInfo.put("shop_name", rs.getString("shop_name"));
        if (0 == rs.getInt("cutoff_day")) {
            shopInfo.put("cutoff_day", null);
        } else {
            shopInfo.put("cutoff_day", String.valueOf(rs.getInt("cutoff_day")));
        }

        return shopInfo;
    }

    /**
     * 税抜き、税込み対応文字列生成
     *
     * @param paramBean レポートパラメータBean
     * @return 税抜き、税込み対応文字列
     * @exception Exception
     */
    public String makeValueString(ReportParameterBean paramBean) throws Exception {
        // 税抜き
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {

            return "discount_detail_value_no_tax";
        } else {
            // 税込み
            return "discount_detail_value_in_tax";
        }
    }

    /**
     * 税抜き、税込み対応文字列生成
     *
     * @param paramBean レポートパラメータBean
     * @return 税抜き、税込み対応文字列
     * @exception Exception
     */
    public String makeValueString(ReportParameterBean paramBean, String dsName, String dsdName, String taxDateName) throws Exception {
        return makeValueString(paramBean);
    }

    /**
     * スタッフ成績表共通初期ロジック
     *
     * @param paramBean レポートパラメータBean
     * @param cw データベースコネクション
     * @return レポートパラメータ
     * @exception Exception
     */
    public HashMap<String, Object> outShopReportInit(ReportParameterBean paramBean, ConnectionWrapper cw) throws Exception {

        HashMap<String, Object> paramMap = new HashMap<String, Object>();
        HashMap<String, String> shopInfo = this.getShopInfo(paramBean.getShopIDList());

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            paramMap.put("TaxType", "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            paramMap.put("TaxType", "税込");
        }

        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
        paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));
        paramMap.put("TargetName", paramBean.getTargetName());

        //技術売上
        String TechnicTotalQuery = "	SELECT sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  "
                + "	  FROM view_data_sales_detail_valid AS dsd "
                + "	INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no "
                + "	 WHERE ds.delete_date IS NULL "
                + "	   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' "
                + "	     AND ds.shop_id in (" + paramBean.getShopIDList() + ") "
                + "	 AND dsd.product_division = 1 ";
        PreparedStatement stmt = cw.prepareStatement(TechnicTotalQuery);
        ResultSet subRs = stmt.executeQuery();

        while (subRs.next()) {
            paramMap.put("TechnicTotal", subRs.getLong("value"));
        }

        //店販売上
        String ItemTotalQuery = "	SELECT sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  "
                + "	  FROM view_data_sales_detail_valid AS dsd "
                + "	INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no "
                + "	 WHERE ds.delete_date IS NULL "
                + "	   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' "
                + "	     AND ds.shop_id in (" + paramBean.getShopIDList() + ") "
                + "	 AND dsd.product_division = 2 ";
        stmt = cw.prepareStatement(ItemTotalQuery);
        subRs = null;
        subRs = stmt.executeQuery();

        while (subRs.next()) {
            paramMap.put("ItemTotal", subRs.getLong("value"));
        }

        return paramMap;
    }

    public int daysBetween(Date d1, Date d2) {
        return (int) ((d2.getTime() - d1.getTime()) / (1000 * 60 * 60 * 24));
    }

    public boolean outVisitTermByTechnicReport(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper con = SystemInfo.getConnection();

        //初期処理
        //HashMap<String, Object> paramMap = this.outShopReportInit(paramBean, con);

        int technic = 0;
        int item = 0;
        int nominat_num = 0;
        int cota = 0;
        int cut_num = 0;
        int cut_sale = 0;
        int perm_num = 0;
        int perm_sale = 0;
        int col_num = 0;
        int col_sale = 0;
        int spa_num = 0;
        int spa_sale = 0;
        int treat_num = 0;
        int treat_sale = 0;
        int item_num = 0;

        int y_num = 0;
        int m_num = 0;
        int o_num = 0;
        int un_num = 0;
        int new_num = 0;
        int usally_num = 0;
        int new_repert_num = 0;
        int total_num = 0;
        int intro_num = 0;
        int technicTagert = 0;
        int itemTagert = 0;
        int nominat_numTagert = 0;
        int coTaTagert = 0;
        int cut_numTagert = 0;
        int cut_saleTagert = 0;
        int perm_numTagert = 0;
        int perm_saleTagert = 0;
        int col_numTagert = 0;
        int col_saleTagert = 0;
        int spa_numTagert = 0;
        int spa_saleTagert = 0;
        int treat_numTagert = 0;
        int treat_saleTagert = 0;
        int item_numTagert = 0;

        int y_numTagert = 0;
        int m_numTagert = 0;
        int o_numTagert = 0;
        int un_numTagert = 0;
        int new_numTagert = 0;
        int usally_numTagert = 0;
        int new_repert_numTagert = 0;
        int total_numTarget = 0;
        int intro_numTagert = 0;
        //int a = Days.daysBetween(paramBean.getTargetStartDateObj(), paramBean.getTargetEndDateObj());
        final long DAY_IN_MILLIS = 1000 * 60 * 60 * 24;

        int NumSaleDay = (int) ((paramBean.getTargetEndDateObj().getTime() - paramBean.getTargetStartDateObj().getTime()) / DAY_IN_MILLIS);

        Calendar cal = Calendar.getInstance();
        Calendar cal1 = new GregorianCalendar();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        calStart = Calendar.getInstance();
        calStart.setTime(cmbTargetPeriodStartDate.getDate());
        calEnd = Calendar.getInstance();
        calEnd.setTime(cmbTargetPeriodEndDate.getDate());

        Date date = sdf.parse(cmbTargetPeriodStartDate.getDateStr());
        cal1.setTime(date);
        int NumSoldDay = daysBetween(cal1.getTime(), cal.getTime());


        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        Date prevStar = cmbTargetPeriodStartDate.getDate();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(prevStar);
        calendar.add(Calendar.YEAR, -1);
        calPrevStart = calendar;

        Date prevEnd = cmbTargetPeriodEndDate.getDate();
        Calendar calendarEnd = Calendar.getInstance();
        calendarEnd.setTime(prevEnd);
        calendarEnd.add(Calendar.YEAR, -1);
        calPrevEnd = calendarEnd;
        //cal2.setTime(date);
        //int NumSoldDay = (int) ((paramBean.getTargetEndDateObj().getTime() - Long.parseLong(dateFormat.format(cal.getTime())))/ DAY_IN_MILLIS );
        JExcelApi jx = new JExcelApi("売上分析表");
        jx.setTemplateFile("/reports/売上分析表.xls");
        SimpleDateFormat dateFormatJapan = new SimpleDateFormat("yyyy年MM月dd日");
        jx.setValue(1, 1, paramBean.getTargetName() + "　売上分析表");
        jx.setValue(2, 2, dateFormatJapan.format(paramBean.getTargetStartDateObj()) + " 〜 " + dateFormatJapan.format(paramBean.getTargetEndDateObj()));
        ResultSetWrapper rs = con.executeQuery(GetTotalTechnic(paramBean, true, false));
        if (rs.next()) {
            technic = rs.getInt("technic");
            item = rs.getInt("item");
//                    nominat_num = rs.getInt("nominat_num");
            jx.setValue(2, 6, technic);
            jx.setValue(2, 8, item);
            jx.setValue(2, 9, technic + item);

            rs = con.executeQuery(GetTotalTechnic(paramBean, false, true));
            if (rs.next()) {
                jx.setValue(11, 6, rs.getInt("technic"));
                jx.setValue(11, 8, rs.getInt("item"));
                jx.setValue(11, 9, rs.getInt("technic") + rs.getInt("item"));
            }

            rs = con.executeQuery(GetTotalCota(paramBean, true, false));
            if (rs.next()) {
                cota = rs.getInt("cota");
                jx.setValue(2, 7, cota);
            }
            rs = con.executeQuery(GetTotalCota(paramBean, false, true));
            if (rs.next()) {
                jx.setValue(11, 7, rs.getInt("cota"));
            }
            rs = con.executeQuery(GetTotalCus(paramBean, true, false));
            if (rs.next()) {
                cut_num = rs.getInt("cut_num");
                cut_sale = rs.getInt("cut_sale");
                perm_num = rs.getInt("perm_num");
                perm_sale = rs.getInt("perm_sale");
                col_num = rs.getInt("col_num");
                col_sale = rs.getInt("col_sale");
                spa_num = rs.getInt("spa_num");
                spa_sale = rs.getInt("spa_sale");
                treat_num = rs.getInt("treat_num");
                treat_sale = rs.getInt("treat_sale");
                item_num = rs.getInt("item_num");
                jx.setValue(2, 10, rs.getInt("cut_num"));
                jx.setValue(2, 11, rs.getInt("cut_sale"));
                jx.setValue(2, 12, rs.getInt("perm_num"));
                jx.setValue(2, 13, rs.getInt("perm_sale"));
                jx.setValue(2, 14, rs.getInt("col_num"));
                jx.setValue(2, 15, rs.getInt("col_sale"));
                jx.setValue(2, 16, rs.getInt("spa_num"));
                jx.setValue(2, 17, rs.getInt("spa_sale"));
                jx.setValue(2, 18, rs.getInt("treat_num"));
                jx.setValue(2, 19, rs.getInt("treat_sale"));
                jx.setValue(2, 20, rs.getInt("other_revenue"));
                jx.setValue(2, 21, rs.getInt("item_num"));

            }
            rs = con.executeQuery(GetTotalCus(paramBean, false, true));
            if (rs.next()) {
                jx.setValue(11, 10, rs.getInt("cut_num"));
                jx.setValue(11, 11, rs.getInt("cut_sale"));
                jx.setValue(11, 12, rs.getInt("perm_num"));
                jx.setValue(11, 13, rs.getInt("perm_sale"));
                jx.setValue(11, 14, rs.getInt("col_num"));
                jx.setValue(11, 15, rs.getInt("col_sale"));
                jx.setValue(11, 16, rs.getInt("spa_num"));
                jx.setValue(11, 17, rs.getInt("spa_sale"));
                jx.setValue(11, 18, rs.getInt("treat_num"));
                jx.setValue(11, 19, rs.getInt("treat_sale"));
                jx.setValue(11, 20, rs.getInt("other_revenue"));
                jx.setValue(11, 21, rs.getInt("item_num"));

            }

            rs = con.executeQuery(GetTotalNum(paramBean, true, false));
            if (rs.next()) {
                y_num = rs.getInt("y_num");
                m_num = rs.getInt("m_num");
                o_num = rs.getInt("o_num");
                un_num = rs.getInt("un_num");
                total_num = rs.getInt("y_num") + rs.getInt("m_num") + rs.getInt("o_num") + rs.getInt("un_num") ;
                jx.setValue(2, 22, rs.getInt("y_num"));
                jx.setValue(2, 23, rs.getInt("m_num"));
                jx.setValue(2, 24, rs.getInt("o_num"));
                jx.setValue(2, 25, rs.getInt("un_num"));
            }
            //VTAn Start add 20140428 Bug #20897      
            rs = con.executeQuery(GetTotalNumMonth(paramBean));
            if (rs.next()) {
                jx.setValue(7, 23, rs.getInt("m_num"));
            }


            rs = con.executeQuery(GetTotalNum(paramBean, false, true));
            if (rs.next()) {
                jx.setValue(11, 22, rs.getInt("y_num"));
                jx.setValue(11, 23, rs.getInt("m_num"));
                jx.setValue(11, 24, rs.getInt("o_num"));
                jx.setValue(11, 25, rs.getInt("un_num"));
            }


            rs = con.executeQuery(GetNewCustomer(paramBean, true, false));
            if (rs.next()) {
                jx.setValue(2, 26, rs.getInt("new_num"));
            }
            rs = con.executeQuery(GetNewCustomer(paramBean, false, false));
            if (rs.next()) {
                jx.setValue(5, 26, rs.getInt("new_num"));
            }
            rs = con.executeQuery(GetNewCustomer(paramBean, false, true));
            if (rs.next()) {
                jx.setValue(11, 26, rs.getInt("new_num"));
            }

            rs = con.executeQuery(GetReNewCustomer(paramBean, true, false));
            if (rs.next()) {
                jx.setValue(2, 27, rs.getInt("new_repert_num"));
            }
            rs = con.executeQuery(GetReNewCustomer(paramBean, false, false));
            if (rs.next()) {
                jx.setValue(5, 27, rs.getInt("new_repert_num"));
            }
            rs = con.executeQuery(GetReNewCustomer(paramBean, false, true));
            if (rs.next()) {
                jx.setValue(11, 27, rs.getInt("new_repert_num"));
            }


//            rs = con.executeQuery(GetReNumberCustomerVisit(paramBean, true, false));
//            if (rs.next()) {
//                jx.setValue(2, 28, rs.getInt("usally_num"));
//            }
//            rs = con.executeQuery(GetReNumberCustomerVisit(paramBean, false, false));
//            if (rs.next()) {
//                jx.setValue(5, 28, rs.getInt("usally_num"));
//            }
//            rs = con.executeQuery(GetReNumberCustomerVisit(paramBean, false, true));
//            if (rs.next()) {
//                jx.setValue(11, 28, rs.getInt("usally_num"));
//            }


            rs = con.executeQuery(GetTotalNumCus(paramBean, true, false));
            if (rs.next()) {
                jx.setValue(2, 29, rs.getInt("total_num"));
            }
            rs = con.executeQuery(GetTotalNumCus(paramBean, false, false));
            if (rs.next()) {
                jx.setValue(5, 29, rs.getInt("total_num"));
                
            }
            rs = con.executeQuery(GetTotalNumCus(paramBean, false, true));
            if (rs.next()) {
                jx.setValue(11, 29, rs.getInt("total_num"));
            }

            rs = con.executeQuery(GetTotalIntroNum(paramBean, true, false));
            if (rs.next()) {
                jx.setValue(2, 30, rs.getInt("intro_num"));
            }

            rs = con.executeQuery(GetTotalIntroNum(paramBean, false, false));
            if (rs.next()) {
                jx.setValue(5, 30, rs.getInt("intro_num"));
            }
            rs = con.executeQuery(GetTotalIntroNum(paramBean, false, true));
            if (rs.next()) {
                jx.setValue(11, 30, rs.getInt("intro_num"));
            }

            rs = con.executeQuery(GetTotalNominatNum(paramBean, true, false));
            if (rs.next()) {
                jx.setValue(2, 31, rs.getInt("nominat_num"));
            }
            rs = con.executeQuery(GetTotalNominatNum(paramBean, false, false));
            if (rs.next()) {
                jx.setValue(5, 31, rs.getInt("nominat_num"));
            }
            rs = con.executeQuery(GetTotalNominatNum(paramBean, false, true));
            if (rs.next()) {
                jx.setValue(11, 31, rs.getInt("nominat_num"));
            }
            //VTAn End add 20140428 Bug #20897



            rs = con.executeQuery(GetTotalTargetDay(paramBean));
            if (rs.next()) {

                technicTagert = rs.getInt("technic");
                itemTagert = rs.getInt("item");
                nominat_numTagert = rs.getInt("nominat_num");
                coTaTagert = rs.getInt("cota");
                cut_numTagert = rs.getInt("cut_num");
                cut_saleTagert = rs.getInt("cut_sale");
                perm_numTagert = rs.getInt("perm_num");
                perm_saleTagert = rs.getInt("perm_sale");
                col_numTagert = rs.getInt("col_num");
                col_saleTagert = rs.getInt("col_sale");
                spa_numTagert = rs.getInt("spa_num");
                spa_saleTagert = rs.getInt("spa_sale");
                treat_numTagert = rs.getInt("treat_num");
                treat_saleTagert = rs.getInt("treat_sale");
                item_numTagert = rs.getInt("item_num");

                y_numTagert = rs.getInt("y_num");
                //m_numTagert = rs.getInt("m_num");
                o_numTagert = rs.getInt("o_num");
                //un_numTagert = rs.getInt("un_num");  
                new_numTagert = rs.getInt("new_num");
                //usally_numTagert = rs.getInt("usally_num");
                new_repert_numTagert = rs.getInt("new_repert_num");
                total_numTarget = rs.getInt("total_num");
                intro_numTagert = rs.getInt("intro_num");

                jx.setValue(2, 47, rs.getInt("e_stylist"));
                jx.setValue(3, 47, rs.getInt("e_assistant"));
                jx.setValue(5, 47, rs.getInt("ar_stylist"));
                jx.setValue(6, 47, rs.getInt("ar_assistant"));
                jx.setValue(7, 47, rs.getInt("ar_other"));
                jx.setValue(16, 34, rs.getInt("e_assistant"));
                jx.setValue(16, 33, rs.getInt("e_stylist"));
                //VTAn Start add 20140428 Bug #20897
                jx.setValue(16, 45, rs.getInt("open_day"));
                //VTAn End add add 20140428 Bug #20897

            }

            jx.setValue(3, 6, technicTagert - technic);
            jx.setValue(3, 8, itemTagert - item);
            jx.setValue(3, 31, nominat_numTagert - nominat_num);
            jx.setValue(3, 7, coTaTagert - cota);
            jx.setValue(3, 9, technicTagert - technic + itemTagert - item);
            jx.setValue(3, 10, cut_numTagert - cut_num);
            jx.setValue(3, 11, cut_saleTagert - cut_sale);
            jx.setValue(3, 12, perm_numTagert - perm_num);
            jx.setValue(3, 13, perm_saleTagert - perm_sale);
            jx.setValue(3, 14, col_numTagert - col_num);
            jx.setValue(3, 15, col_saleTagert - col_sale);

            jx.setValue(3, 16, spa_numTagert - spa_num);
            jx.setValue(3, 17, spa_saleTagert - spa_sale);
            jx.setValue(3, 18, treat_numTagert - treat_num);
            jx.setValue(3, 19, treat_saleTagert - treat_sale);
            jx.setValue(3, 21, item_numTagert - item_num);

            jx.setValue(3, 22, y_numTagert - y_num);
            jx.setValue(3, 23, m_numTagert - m_num);
            jx.setValue(3, 24, o_numTagert - o_num);
            jx.setValue(3, 25, un_numTagert - un_num);

            jx.setValue(3, 26, new_numTagert - new_num);
            jx.setValue(3, 27, new_repert_numTagert - new_repert_num);
            jx.setValue(3, 28, usally_numTagert - usally_num);

            jx.setValue(3, 29, total_numTarget - total_num);
            jx.setValue(3, 30, intro_numTagert - intro_num);

            //現在売上
            rs = con.executeQuery(GetTotalTechnic(paramBean, false, false));
            if (rs.next()) {
                jx.setValue(5, 6, rs.getInt("technic"));
                jx.setValue(5, 8, rs.getInt("item"));
//                                  jx.setValue(5,31,rs.getInt("nominat_num"));
                jx.setValue(5, 9, rs.getInt("technic") + rs.getInt("item"));
                jx.setValue(16, 46, rs.getInt("SoldDayNum"));
            }
            rs = con.executeQuery(GetTotalCota(paramBean, false, false));
            if (rs.next()) {
                jx.setValue(5, 7, rs.getInt("cota"));
            }
            rs = con.executeQuery(GetTotalCus(paramBean, false, false));
            if (rs.next()) {
                jx.setValue(5, 10, rs.getInt("cut_num"));
                jx.setValue(5, 11, rs.getInt("cut_sale"));
                jx.setValue(5, 12, rs.getInt("perm_num"));
                jx.setValue(5, 13, rs.getInt("perm_sale"));
                jx.setValue(5, 14, rs.getInt("col_num"));
                jx.setValue(5, 15, rs.getInt("col_sale"));

                jx.setValue(5, 16, rs.getInt("spa_num"));
                jx.setValue(5, 17, rs.getInt("spa_sale"));
                jx.setValue(5, 18, rs.getInt("treat_num"));
                jx.setValue(5, 19, rs.getInt("treat_sale"));
                jx.setValue(5, 20, rs.getInt("other_revenue"));
                jx.setValue(5, 21, rs.getInt("item_num"));

            }
            rs = con.executeQuery(GetTotalNum(paramBean, false, false));
            if (rs.next()) {
                jx.setValue(5, 22, rs.getInt("y_num"));
                jx.setValue(5, 23, rs.getInt("m_num"));
                jx.setValue(5, 24, rs.getInt("o_num"));
                jx.setValue(5, 25, rs.getInt("un_num"));
            }
            rs = con.executeQuery(GetNewCus(paramBean, false, false));
            if (rs.next()) {
                // IVS SANG START EDIT 20131220 [gbソース]OX向けカスタマイズ帳票の不具合
                //                      jx.setValue(5,26,rs.getInt("new_num"));   
                //jx.setValue(5,27,rs.getInt("usally_num"));  
                //jx.setValue(5,28,rs.getInt("new_repert_num"));
//                       jx.setValue(5,27,rs.getInt("new_repert_num"));  
                //                      jx.setValue(5,28,rs.getInt("usally_num"));
                // IVS SANG END EDIT 20131220 [gbソース]OX向けカスタマイズ帳票の不具合
            }


            rs = con.executeQuery(GetTotalTargetMonth(paramBean, false));
            if (rs.next()) {
                setValueTargetMonth(jx, rs, false);
                //VTAN Delete
                //    jx.setValue(16,45,rs.getInt("open_day")); 
                //VTAN Delete
            }
            /*
             rs = con.executeQuery(GetTotalTargetMonth(paramBean,true));
             if (rs.next()) { 
             setValueTargetMonth(jx, rs,true);               
             }
             rs = con.executeQuery(GetTotalStaffWorking(paramBean));
             if (rs.next()) { 
             jx.setValue(16,33,rs.getInt("countStaff"));  
             }*/
            rs = con.executeQuery(GetTotalTimePartimeWorking(paramBean));
            if (rs.next()) {
                jx.setValue(16, 35, rs.getDouble("TotalTime") / 10);
                //VTAn Start add
                jx.setValue(13, 47, rs.getDouble("TotalTime"));
                //VTAn End add 
            }
            rs = con.executeQuery(GetStaffHelp(paramBean));
            if (rs.next()) {
                jx.setValue(16, 36, rs.getInt("CountStaffHelp"));
            }
            //jx.setFormularActive();
            jx.openWorkbook();

        } else {

            return false;
        }

        return true;
    }

    private void cmbTargetPeriodStartDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTargetPeriodStartDateItemStateChanged

        if (cmbTargetPeriodStartDate.getDate() == null) {
            cmbTargetPeriodStartDate.setDate(Calendar.getInstance().getTime());
        }

    }//GEN-LAST:event_cmbTargetPeriodStartDateItemStateChanged

    private void cmbTargetPeriodEndDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTargetPeriodEndDateItemStateChanged

        if (cmbTargetPeriodEndDate.getDate() == null) {
            cmbTargetPeriodEndDate.setDate(Calendar.getInstance().getTime());
        }
    }//GEN-LAST:event_cmbTargetPeriodEndDateItemStateChanged

    public String GetTotalTechnic(ReportParameterBean paramBean, boolean today, boolean prev) {
        StringBuilder sql = new StringBuilder();
        // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        // sql.append(" Select  sum(case when  product_division = 1 then product_value else 0 end ) as technic \n");
        // sql.append(" , sum(case when  product_division = 2 then product_value else 0 end ) as item  \n");
        sql.append(" Select  sum(case when  product_division in(1,3) then discount_detail_value_no_tax  else 0 end ) as technic \n");
        sql.append(" , sum(case when  product_division in(2,4) then discount_detail_value_no_tax else 0 end ) as item  \n");
        // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        //IVS_LVTu start edit 2016/05/09 New request #50178
        sql.append(" , count(case when dsd.designated_flag = true then 1 else null end ) as nominat_num   \n");
        sql.append(" , count(distinct dsd.sales_date) as soldDayNum   \n");
        sql.append(" from   \n");
        // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        // sql.append(" inner join data_sales_detail  dsd on ds.shop_id = dsd.shop_id and ds.slip_no = dsd.slip_no and dsd.delete_date is null    \n");  
        sql.append(" view_data_sales_detail_valid  dsd  \n");
        // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        sql.append(" where  dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
        // IVS SANG START INSERT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        //sql.append(" and  dsd.delete_date is null \n");
        // IVS SANG END INSERT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        if (today) {
            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DATE, -1);
            String CurrentDate = dateFormat.format(cal.getTime());
            //sql.append(" and ds.sales_date = '" + CurrentDate + "'");
            sql.append(" and dsd.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));
//            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodStartDate.getDate()));
//            sql.append(" and " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate.getDate()));
        } else {
            if (prev) {
                // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
//                sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()));
//                sql.append("  and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
                sql.append(" and dsd.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "");
                // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
            } else {
                sql.append(" and dsd.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
            }
            //IVS_LVTu end edit 2016/05/09 New request #50178

        }
        return sql.toString();
    }

    public String GetTotalTechnic(ReportParameterBean paramBean, boolean prev) {
        StringBuilder sql = new StringBuilder();
        // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        // sql.append(" Select  sum(case when  product_division = 1 then product_value else 0 end ) as technic \n");
        // sql.append(" , sum(case when  product_division = 2 then product_value else 0 end ) as item  \n");
        sql.append(" Select  sum(case when  product_division in (1,3) then discount_detail_value_no_tax else 0 end ) as technic \n");
        sql.append(" , sum(case when  product_division in (2,4) then discount_detail_value_no_tax else 0 end ) as item  \n");
        sql.append(" , count(case when ds.designated_flag = true then 1 else null end ) as nominat_num   \n");
        sql.append(" from data_sales ds   \n");
        // sql.append(" inner join data_sales_detail  dsd on ds.shop_id = dsd.shop_id and ds.slip_no = dsd.slip_no and dsd.delete_date is null    \n");  
        sql.append(" inner join view_data_sales_detail_valid  dsd on ds.shop_id = dsd.shop_id and ds.slip_no = dsd.slip_no  \n");
        // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        sql.append(" where  ds.shop_id in (" + paramBean.getShopIDList() + ")\n");

        if (prev) {
            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
            Date prevStar = cmbTargetPeriodStartDate.getDate();
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(prevStar);
            calendar.add(Calendar.YEAR, -1);
            calPrevStart = calendar;

            Date prevEnd = cmbTargetPeriodEndDate.getDate();
            Calendar calendarEnd = Calendar.getInstance();
            calendarEnd.setTime(prevEnd);
            calendarEnd.add(Calendar.YEAR, -1);
            calPrevEnd = calendarEnd;
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(dateFormat.format(calPrevStart.getTime())));
            sql.append("  and " + SQLUtil.convertForSQL(dateFormat.format(calPrevEnd.getTime())));
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
            sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
        }


        return sql.toString();
    }

    public String GetTarget(ReportParameterBean paramBean, boolean today) {
        StringBuilder sql = new StringBuilder();
        // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        // sql.append("  Select sum(product_value) as cota  \n");
        sql.append("  Select sum(discount_detail_value_no_tax) as cota  \n");
        sql.append(" from (  \n");
        // sql.append(" select dsd1.product_value,dsd1.product_id , ds1.sales_date \n");
        sql.append(" select dsd1.discount_detail_value_no_tax,dsd1.product_id , ds1.sales_date \n");
        sql.append(" from data_sales ds1  \n");
        // sql.append(" inner join data_sales_detail as dsd1 on ds1.shop_id = dsd1.shop_id   \n");
        sql.append(" inner join view_data_sales_detail_valid as dsd1 on ds1.shop_id = dsd1.shop_id   \n");
        // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        sql.append(" and ds1.slip_no = dsd1.slip_no and dsd1.delete_date is null   \n");
        sql.append(" where product_division in (2,4)   \n");
        sql.append(" and ds1.shop_id in (" + paramBean.getShopIDList() + ")\n");
        if (today) {
            //sql.append(" and ds1.sales_date = '" + CurrentDate + "'");  
            //sql.append(" and ds1.sales_date = " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate.getDate()));
            sql.append(" and ds1.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
            sql.append(" and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));
        } else {
            sql.append(" and ds1.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
            sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
        }
        sql.append(" and ds1.delete_date is null   \n");
        sql.append("  ) ds3 inner join   \n");
        sql.append(" (   select mi.item_id   \n");
        sql.append(" from mst_item  mi    \n");
        sql.append(" inner join mst_item_class  mic on mi.item_class_id = mic.item_class_id   \n");
        sql.append(" where mic.item_integration_id = 1   \n");
        sql.append(" and mi.delete_date is null    \n");
        sql.append(" ) mi1 on mi1.item_id = ds3.product_id   \n");
        return sql.toString();
    }

    public String GetTotalCota(ReportParameterBean paramBean, boolean today, boolean prev) {
        StringBuilder sql = new StringBuilder();
        // vtbphuong start change 20140806 Request #29202
//        sql.append("  Select sum(product_value*product_num - discount_value) as cota  \n");
//        sql.append(" from (  \n");
//        sql.append(" select dsd1.product_value,dsd1.product_id , ds1.sales_date,dsd1.discount_value , dsd1.product_num \n");
//        sql.append(" from data_sales ds1  \n");
//        sql.append(" inner join data_sales_detail as dsd1 on ds1.shop_id = dsd1.shop_id   \n");
//        sql.append(" and ds1.slip_no = dsd1.slip_no    \n");
//        sql.append(" where ds1.shop_id in (" + paramBean.getShopIDList() + ")\n");
//        if (today) {
//            sql.append(" and ds1.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));
//        } else {
//            if (prev) {
//
//                //sql.append(" and ds1.sales_date = " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
//                sql.append(" and ds1.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()));
//                sql.append("  and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "");
//            } else {
//                sql.append(" and ds1.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
//                sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
//            }
//        }
//        // vtbphuong start add 20140602 
//        sql.append("  and dsd1.product_division in ( 2,4) ");
//        // vtbphuong end add 20140602 
//        sql.append("  ) ds3 inner join   \n");
//        sql.append(" (   select mi.item_id   \n");
//        sql.append(" from mst_item  mi    \n");
//        sql.append(" inner join mst_item_class  mic on mi.item_class_id = mic.item_class_id   \n");
//        sql.append(" inner join mst_item_integration mii on mii.item_integration_id  = mic.item_integration_id\n");
//        // vtbphuong start add 20140602 
//        sql.append(" where  mii.item_integration_id  = 1 \n");
//        // vtbphuong end add 20140602 
//        sql.append(" ) mi1 on mi1.item_id = ds3.product_id   \n");
        
        sql.append("  Select sum(discount_detail_value_no_tax) as cota  \n");
        sql.append(" from (  \n");
        sql.append(" select discount_detail_value_no_tax ,product_id ,sales_date  \n");
        sql.append(" from view_data_sales_detail_valid_with_prepaid  ds1  \n");
        sql.append(" where ds1.shop_id in (" + paramBean.getShopIDList() + ")\n");
        if (today) {
            sql.append(" and ds1.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));
        } else {
            if (prev) {
                sql.append(" and ds1.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "");
            } else {
                sql.append(" and ds1.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
            }
        }
        sql.append("  and  product_division in ( 2,4) ");
        sql.append("  ) ds3 inner join   \n");
        sql.append(" (   select mi.item_id   \n");
        sql.append(" from mst_item  mi    \n");
        sql.append(" inner join mst_item_class  mic on mi.item_class_id = mic.item_class_id   \n");
        sql.append(" inner join mst_item_integration mii on mii.item_integration_id  = mic.item_integration_id\n");
        sql.append(" where  mii.item_integration_id  = 1 \n");
        sql.append(" ) mi1 on mi1.item_id = ds3.product_id   \n");
        // vtbphuong end change 20140806 Request #29202
        return sql.toString();
    }

    public String GetTotalCus(ReportParameterBean paramBean, boolean today, boolean prev) {
        // vtbphuong start change 20140529  Request #23679
        StringBuilder sql = new StringBuilder();
        double taxRate = SystemInfo.getTaxRate(cmbTargetPeriodEndDate.getDate());
        sql.append("      select cut_num \n");
        sql.append("       , sum (case when technic_integration_id =1 then  ceil((product_value *technic_num - discount_value)/ ( 1.0 + "+ taxRate+ "  )) else 0 end) as cut_sale \n");
        sql.append("       , perm_num \n");
        sql.append("       , sum (case when technic_integration_id =2 then ceil((product_value *technic_num  - discount_value)/ ( 1.0 + "+ taxRate+ "  )) else 0 end) as perm_sale \n");
        sql.append("       ,col_num \n");
        sql.append("       , sum (case when technic_integration_id =3 then ceil((product_value *technic_num  - discount_value)/ ( 1.0 + "+ taxRate+ "  )) else 0 end) as col_sale \n");
        sql.append("       , spa_num \n");
        sql.append("       , sum (case when technic_integration_id =4 then ceil((product_value *technic_num  - discount_value)/ ( 1.0 + "+ taxRate+ "  )) else 0 end) as spa_sale \n");
        sql.append("       ,treat_num \n");
        sql.append("       , sum (case when technic_integration_id =5 then ceil((product_value *technic_num  - discount_value)/ ( 1.0 + "+ taxRate+ "  )) else 0 end) as treat_sale \n");
        sql.append("       , sum (case when technic_integration_id is null then ceil((product_value *technic_num  - discount_value)/ ( 1.0 + "+ taxRate+ "  )) else 0 end) as other_revenue \n");
        sql.append("       , product_num as item_num \n");
        sql.append("     from  \n");
        sql.append("     ( SELECT \n");
        sql.append("                ( \n");
        sql.append("     select count(distinct a.slip_no)  from data_sales a    \n");
        sql.append("     inner join data_sales_detail as b on a.shop_id = b.shop_id  and a.slip_no = b.slip_no  \n");
        sql.append("     inner join mst_technic c on b.product_id = c.technic_id  \n");
        sql.append("     inner join mst_technic_class d on c.technic_class_id= d.technic_class_id   \n");
        sql.append("     left join mst_technic_integration e on d.technic_integration_id= e.technic_integration_id   \n");
        sql.append("     where b.product_division= 1 and  e.technic_integration_id =1 \n");
        sql.append("     --and a.slip_no = ds4.slip_no and a.shop_id = ds4.shop_id  \n");
        sql.append("     and a.shop_id in (" + paramBean.getShopIDList() + ") \n");
        if (today) {

            sql.append(" and a.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));


        } else {
            if(prev) {
            sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");
            
            }else {
            sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()) + " and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");
            }
        }
        sql.append("     ) as cut_num, \n");
        sql.append("     ( \n");
        sql.append("     select count(distinct a.slip_no)  from data_sales a    \n");
        sql.append("     	inner join data_sales_detail as b on a.shop_id = b.shop_id  and a.slip_no = b.slip_no  \n");
        sql.append("     inner join mst_technic c on b.product_id = c.technic_id  \n");
        sql.append("      inner join mst_technic_class d on c.technic_class_id= d.technic_class_id   \n");
        sql.append("     left join mst_technic_integration e on d.technic_integration_id= e.technic_integration_id   \n");
        sql.append("     	where b.product_division= 1 and  e.technic_integration_id =2 \n");
        sql.append("     --and a.slip_no = ds4.slip_no and a.shop_id = ds4.shop_id  \n");
        sql.append("     and a.shop_id in (" + paramBean.getShopIDList() + ") \n");
        if (today) {

            sql.append(" and a.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));


        } else {
            if(prev) {
                    sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");
        
            }else {
            sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()) + " and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");
            }
        }
        sql.append("     ) as perm_num, \n");
        sql.append("     ( \n");
        sql.append("     select count(distinct a.slip_no)  from data_sales a    \n");
        sql.append("     inner join data_sales_detail as b on a.shop_id = b.shop_id  and a.slip_no = b.slip_no  \n");
        sql.append("     inner join mst_technic c on b.product_id = c.technic_id  \n");
        sql.append("     inner join mst_technic_class d on c.technic_class_id= d.technic_class_id   \n");
        sql.append("     left join mst_technic_integration e on d.technic_integration_id= e.technic_integration_id   \n");
        sql.append("     where b.product_division= 1 and  e.technic_integration_id =3 \n");
        sql.append("     --and a.slip_no = ds4.slip_no and a.shop_id = ds4.shop_id  \n");
        sql.append("     and a.shop_id in (" + paramBean.getShopIDList() + ") \n");
        if (today) {

            sql.append(" and a.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));


        } else {
            if(prev) {
            sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");
            
            }else {
            sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()) + " and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");
            }
        }
        sql.append("     ) as col_num, \n");
        sql.append("     ( \n");
        sql.append("     select count(distinct a.slip_no)  from data_sales a    \n");
        sql.append("     inner join data_sales_detail as b on a.shop_id = b.shop_id  and a.slip_no = b.slip_no  \n");
        sql.append("     inner join mst_technic c on b.product_id = c.technic_id  \n");
        sql.append("     inner join mst_technic_class d on c.technic_class_id= d.technic_class_id   \n");
        sql.append("      left join mst_technic_integration e on d.technic_integration_id= e.technic_integration_id   \n");
        sql.append("     where b.product_division= 1 and  e.technic_integration_id =4 \n");
        sql.append("     --and a.slip_no = ds4.slip_no and a.shop_id = ds4.shop_id  \n");
        sql.append("     and a.shop_id in (" + paramBean.getShopIDList() + ") \n");
        if (today) {

            sql.append(" and a.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));


        } else {
            if (prev) {
                sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");

            } else {
                sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()) + " and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");
            }
        }
        sql.append("     ) as spa_num, \n");
        sql.append("     ( \n");
        sql.append("     select count(distinct a.slip_no)  from data_sales a    \n");
        sql.append("     inner join data_sales_detail as b on a.shop_id = b.shop_id  and a.slip_no = b.slip_no  \n");
        sql.append("     inner join mst_technic c on b.product_id = c.technic_id  \n");
        sql.append("     inner join mst_technic_class d on c.technic_class_id= d.technic_class_id   \n");
        sql.append("     left join mst_technic_integration e on d.technic_integration_id= e.technic_integration_id   \n");
        sql.append("     where b.product_division= 1 and  e.technic_integration_id =5 \n");
        sql.append("     --and a.slip_no = ds4.slip_no and a.shop_id = ds4.shop_id  \n");
        sql.append("     and a.shop_id in (" + paramBean.getShopIDList() + ") \n");
        if (today) {

            sql.append(" and a.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));


        } else {
            if (prev) {
                sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");

            } else {
                sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()) + " and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");
            }
        }
        sql.append("     ) as treat_num,     \n");


        sql.append(" sum(  product_value) as product_value ,\n");
        sql.append(" (\n");
        sql.append(" select count (distinct b.slip_no)   from data_sales a   \n");
        sql.append(" inner join data_sales_detail as b on a.shop_id = b.shop_id  and a.slip_no = b.slip_no \n");
        sql.append(" where b.product_division= 2 \n");
        sql.append("     and a.shop_id in (" + paramBean.getShopIDList() + ") \n");
        if (today) {

            sql.append(" and a.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));


        } else {
            if (prev) {
                sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");

            } else {
                sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()) + " and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "         AND a.delete_date IS NULL AND a.delete_date IS NULL \n");
            }
        }
        sql.append(" ) as product_num\n");
        sql.append("  , product_num as technic_num \n");

        sql.append(",sum( discount_value) as discount_value , slip_no , technic_integration_id, shop_id  \n");
        sql.append("FROM ( ");
        sql.append("      (  		select dsd1.product_value,dsd1.product_id , dsd1.product_num,dsd1.discount_value  , ds1.slip_no , ds1.shop_id  \n");
        sql.append("                     from data_sales ds1   \n");
        sql.append("                     inner join data_sales_detail as dsd1 on ds1.shop_id = dsd1.shop_id  and ds1.slip_no = dsd1.slip_no    \n");
        sql.append(" where ds1.shop_id in (" + paramBean.getShopIDList() + ")\n");
        if (today) {

            sql.append(" and ds1.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));

        } else {
            if (prev) {
                sql.append(" and ds1.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "");

            } else {
                sql.append(" and ds1.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
            }
        }
        sql.append("         AND ds1.delete_date IS NULL AND dsd1.delete_date IS NULL  AND dsd1.product_division in (1,3) )ds4 inner join \n ");
        sql.append("        (    select mt.technic_id, mtc.technic_integration_id \n");
        sql.append("             from mst_technic mt \n ");
        sql.append("             inner join mst_technic_class mtc on mt.technic_class_id= mtc.technic_class_id  \n ");
        sql.append("             left join mst_technic_integration mti on mti.technic_integration_id= mtc.technic_integration_id  \n ");
        sql.append("             )  mt1 on  ds4.product_id = mt1.technic_id \n ");
        sql.append(" )GROUP BY slip_no , technic_integration_id, shop_id , product_num ) ds \n ");
        sql.append(" group by ds.cut_num,ds.perm_num,ds.col_num,ds.spa_num,ds.treat_num,ds.product_num \n");
        return sql.toString();
        // vtbphuong end change 20140529  Request #23679
    }

    public String GetTotalNum(ReportParameterBean paramBean, boolean today, boolean prev) {
        StringBuilder sql = new StringBuilder();
        // vtbphuong start change 20140602 
//        sql.append("            select count(case when ( date_part('year',now() )- date_part('year',birthday) <25) then 1 else null end ) as y_num,  \n ");
//        sql.append("            count(case when ( ( date_part('year',now() )- date_part('year',birthday) >=25 ) and ( date_part('year',now() )- date_part('year',birthday) <=50 )) then 1 else null end ) as m_num,  \n ");
//        sql.append("           count(case when ( date_part('year',now() )- date_part('year',birthday) >50) then 1 else null end ) as o_num,  \n ");
//        // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
//        // sql.append("           count(birthday is null ) as un_num  \n ");
//        sql.append("           count(case when birthday is null then 1 else null end ) as un_num   \n ");
//        // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
//        sql.append("           from mst_customer  \n ");
//        sql.append("          where customer_id in   \n ");
//        sql.append("                 (select distinct customer_id    \n ");
//        sql.append("                  from data_sales ds     \n ");
//        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
//        if (today) {
//            //sql.append(" and sales_date = '" + CurrentDate + "'");  
//            sql.append(" and sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));
////            sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodStartDate.getDate()));
////            sql.append(" and " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate.getDate()));
//        } else {
//            if (prev) {
//                // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
////                sql.append(" and sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()));
////                sql.append("  and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
//                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()));
//                sql.append("  and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "");
//                // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
//            } else {
//                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
//                sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
//            }
//
//        }
//        sql.append("                   )\n ");
        
        
        sql.append("            select count(case when ( date_part('year',now() )- date_part('year',birthday) <25) then 1 else null end ) as y_num,  \n ");
        sql.append("            count(case when ( ( date_part('year',now() )- date_part('year',birthday) >=25 ) and ( date_part('year',now() )- date_part('year',birthday) <=50 )) then 1 else null end ) as m_num,  \n ");
        sql.append("           count(case when ( date_part('year',now() )- date_part('year',birthday) >50) then 1 else null end ) as o_num,  \n ");
        sql.append("           count(case when birthday is null then 1 else null end ) as un_num   \n ");
        sql.append("           from mst_customer mc   \n ");
        sql.append("           RIGHT JOIN     \n ");
        sql.append("                 ( select  customer_id    \n ");
        sql.append("                    from data_sales ds     \n ");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        if (today) {
            sql.append(" and sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));
        } else {
            if (prev) {
                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "");
                
            } else {
                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
            }
            sql.append("  and delete_date is null \n ");

        }
        sql.append("                   ) ds \n ");
        sql.append(" on mc.customer_id = ds.customer_id  ");

         // vtbphuong end change 20140602 
        
        
        
        
        return sql.toString();
    }

    public String GetTotalNumMonth(ReportParameterBean paramBean) {
        StringBuilder sql = new StringBuilder();
        sql.append("            select count(case when ( date_part('year',now() )- date_part('year',birthday) <25) then 1 else null end ) as y_num,  \n ");
        sql.append("            count(case when ( ( date_part('year',now() )- date_part('year',birthday) >=25 ) and ( date_part('year',now() )- date_part('year',birthday) <=50 )) then 1 else null end ) as m_num,  \n ");
        sql.append("           count(case when ( date_part('year',now() )- date_part('year',birthday) >50) then 1 else null end ) as o_num,  \n ");
        // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        // sql.append("           count(birthday is null ) as un_num  \n ");
        sql.append("           count(case when birthday is null then 1 else null end ) as un_num   \n ");
        // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        sql.append("           from mst_customer  \n ");
        sql.append("          where customer_id in   \n ");
        sql.append("                 (select distinct customer_id    \n ");
        sql.append("                  from data_sales ds     \n ");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        // sql.append("                                      and date_part('year',sales_date) = ").append(SQLUtil.convertForSQL(year)).append(" \n ");
        sql.append(" and date_part('year',sales_date) between " + SQLUtil.convertForSQL(yearStart));
        sql.append(" and " + SQLUtil.convertForSQL(yearEnd));
        // sql.append("                                      and date_part('month',sales_date) = ").append(SQLUtil.convertForSQL(month)).append(" \n) ");
        sql.append("  and date_part('month',sales_date) between " + SQLUtil.convertForSQL(monthStart));
        sql.append(" and " + SQLUtil.convertForSQL(monthEnd));
        sql.append("                   )\n ");
        return sql.toString();
    }

    public String GetNewCus(ReportParameterBean paramBean, boolean today, boolean prev) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        Date prevStar = cmbTargetPeriodStartDate.getDate();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(prevStar);
        calendar.add(Calendar.MONTH, -3);
        calPrevMonthStart = calendar;

        Date prevEnd = cmbTargetPeriodEndDate.getDate();
        Calendar calendarEnd = Calendar.getInstance();
        calendarEnd.setTime(prevEnd);
        calendarEnd.add(Calendar.MONTH, -3);
        calPrevMonthEnd = calendarEnd;

        StringBuilder sql = new StringBuilder();
        sql.append("       select * \n ");
        sql.append("            from  \n ");
        sql.append("            (	select count( customer_id) as new_num  \n ");
        sql.append("                     from data_sales  \n ");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        if (today) {
            //sql.append(" and sales_date = '" + CurrentDate + "'"); 
            sql.append(" and sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));
//            sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodStartDate.getDate()));
//            sql.append(" and " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate.getDate()));
        } else {
            if (prev) {
                // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
//                sql.append(" and sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()));
//                sql.append("  and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
                sql.append(" and sales_date = " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
                // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
            } else {
                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
            }
        }
        // IVS SANG START EDIT 20131220 [gbソース]OX向けカスタマイズ帳票の不具合
        // sql.append("                     and visit_num > 1 \n ");
        sql.append("                     and visit_num = 1 \n ");
        // IVS SANG END EDIT 20131220 [gbソース]OX向けカスタマイズ帳票の不具合
        sql.append("              ) ds1, \n ");
        sql.append("             (	select count (  distinct customer_id ) as usally_num  \n ");
        sql.append("                   from data_sales  \n ");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");

        if (prev) {

            calendar.add(Calendar.YEAR, -1);
            calPrevMonthStart = calendar;
            calendarEnd.add(Calendar.YEAR, -1);
            calPrevMonthEnd = calendarEnd;
            // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
//            sql.append(" and sales_date between " + SQLUtil.convertForSQL( dateFormat.format(calPrevMonthStart.getTime())));
//            sql.append("  and " + SQLUtil.convertForSQL( dateFormat.format(calPrevMonthEnd.getTime())));           
            sql.append("  and sales_date = " + SQLUtil.convertForSQL(dateFormat.format(calPrevMonthEnd.getTime())));
            // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
        } else {

            sql.append(" and sales_date between " + SQLUtil.convertForSQL(dateFormat.format(calPrevMonthStart.getTime())));
            sql.append("  and " + SQLUtil.convertForSQL(dateFormat.format(calPrevMonthEnd.getTime())));
        }


        sql.append("                   and customer_id in (  \n ");
        sql.append("                                       select  distinct customer_id  \n ");
        sql.append("                                       from data_sales \n ");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        if (today) {
            //sql.append(" and sales_date = '" + CurrentDate + "'");   
            sql.append(" and sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));
//            sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodStartDate.getDate()));
//            sql.append(" and " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate.getDate()));
        } else {
            if (prev) {
                // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
//                sql.append(" and sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()));
//                sql.append("  and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
                sql.append(" and sales_date = " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
                // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
            } else {
                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
            }
        }
        sql.append("                ) )ds2 , \n");
        sql.append("                (	select count ( distinct customer_id ) as new_repert_num \n");
        sql.append("                    from data_sales \n");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        if (today) {
            //sql.append(" and sales_date = '" + CurrentDate + "'");
            sql.append(" and sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));
//            sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodStartDate.getDate()));
//            sql.append(" and " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate.getDate()));
        } else {
            if (prev) {
                sql.append("  and sales_date < " + SQLUtil.convertForSQL(dateFormat.format(calPrevMonthEnd.getTime())));
            } else {
                sql.append("  and sales_date < " + SQLUtil.convertForSQL(dateFormat.format(calPrevMonthEnd.getTime())));

            }

        }
        sql.append("                    and customer_id in ( \n");
        sql.append("                                        select  distinct customer_id \n ");
        sql.append("                                        from data_sales  \n");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        if (today) {
            //sql.append(" and sales_date = '" + CurrentDate + "')");
            sql.append(" and sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ")");
//            sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodStartDate.getDate()));
//            sql.append(" and " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate.getDate()) + ")");
        } else {
            if (prev) {
                // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
//                sql.append(" and sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()));
//                sql.append("  and " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ")");
                sql.append(" and sales_date = " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ")");
                // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
            } else {
                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ")");
            }
        }
        sql.append("                                      and customer_id not in (select customer_id  ");
        sql.append("                                                                from data_sales \n ");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        if (today) {
            //sql.append(" and sales_date = '" + CurrentDate + "'"); 
            sql.append(" and sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));
//            sql.append(" and sales_date between ( date " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodStartDate.getDate()) + " -  interval '3 month')");
//            sql.append(" and (date " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodStartDate.getDate()) + " - interval '1 day')");
        } else {
            if (prev) {
                // IVS SANG START EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
//                sql.append(" and sales_date between (date" + SQLUtil.convertForSQL(calPrevStart.getTime()) + " -  interval '3 month')");
//                sql.append("  and (date " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + " - interval '1 day')");
                sql.append(" and sales_date = " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
                // IVS SANG END EDIT 20131219 [gbソース]OX向けカスタマイズ帳票の不具合
            } else {
                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
            }
        }
        sql.append("                                          ");
        sql.append("                       )) ds3");
        return sql.toString();
    }
    //VTAn Start add 20140428 Bug #20897

    public String GetNewCustomer(ReportParameterBean paramBean, boolean today, boolean prev) {

        StringBuilder sql = new StringBuilder();
        sql.append(" select count( customer_id) as new_num  \n ");
        sql.append("                     from data_sales  \n ");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        if (today) {
            sql.append("   and sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));

        } else {
            if (prev) {

                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()));
                sql.append("    and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "");

            } else {
                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
                sql.append("    and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
            }
        }
        sql.append(" and visit_num = 1 \n ");

        return sql.toString();
    }

    public String GetReNewCustomer(ReportParameterBean paramBean, boolean today, boolean prev) {

        StringBuilder sql = new StringBuilder();

        if (today) {
//            sql.append(" SELECT COUNT(DISTINCT CUSTOMER_ID) AS new_repert_num	\n ");
//            sql.append(" FROM  data_sales	\n ");
//            sql.append(" WHERE shop_id in (" + paramBean.getShopIDList() + ") \n ");
//            // 対象範囲の顧客で３ヶ月間 来客していない				
//            sql.append(" and customer_id IN 	\n ");
//
//            sql.append(" ( SELECT customer_id	\n ");
//            sql.append(" FROM   data_sales	\n ");
//            sql.append(" WHERE \n ");
//            sql.append(" to_date( sales_date, 'yyyy-mm-dd' ) = \n ");
//            sql.append(" to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ", 'yyyymmdd' ) 	\n ");
//            sql.append(" AND    to_date( sales_date, 'yyyymmdd') NOT BETWEEN \n ");
//            sql.append(" ( to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "  , 'yyyymmdd' ) - CAST('3 months' AS INTERVAL) )	\n ");
//            sql.append(" AND    ( to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + " , 'yyyymmdd' ) - CAST('1 days' AS INTERVAL) ) )	\n ");
//            //対象範囲の３ヶ月前,以前には来客していた				
//            sql.append("AND to_date( sales_date,'yyyymmdd') <	\n ");
//            sql.append("( to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ", 'yyyymmdd' ) - CAST('3 months' AS INTERVAL) )\n ");

            sql.append(" SELECT COUNT(CUSTOMER_ID) AS new_repert_num \n");
            sql.append(" FROM  data_sales \n");
            sql.append(" WHERE shop_id in (" + paramBean.getShopIDList() + ") \n");
            sql.append(" and sales_date = " + SQLUtil.convertForSQL(calEnd.getTime()) + "\n");
            sql.append(" and customer_id not IN \n");
            sql.append(" ( \n");
            sql.append(" SELECT customer_id \n");
            sql.append(" FROM   data_sales \n");
            //nhanvt start edit 20141208 Bug #33639
//            sql.append(" WHERE  shop_id in (" + paramBean.getShopIDList() + ")  and substring(sales_date,1,10) between \n");
//            sql.append(" ( date( " + SQLUtil.convertForSQL(calStart.getTime()) + " ) - interval '3 months' )   and \n");
//            sql.append(" ( date(" + SQLUtil.convertForSQL(calStart.getTime()) + ") - interval '1 days')\n");
            
            sql.append(" WHERE  shop_id in (" + paramBean.getShopIDList() + ")  and to_date(substring(to_char(sales_date,'yyyy/mm/dd'),1,10),'yyyy/mm/dd 00:00') between \n");
            sql.append(" ( date( " + SQLUtil.convertForSQL(calStart.getTime()) + " ) - interval '3 months' )   and \n");
            sql.append(" ( date(" + SQLUtil.convertForSQL(calStart.getTime()) + ") - interval '1 days')\n");
            //nhanvt end edit 20141208 Bug #33639

            sql.append(" and delete_date is null \n");
            sql.append("  )\n");
            sql.append(" and  customer_id IN \n");
            sql.append(" ( \n");
            sql.append(" SELECT customer_id \n");
            sql.append(" FROM   data_sales \n");
            sql.append(" WHERE  shop_id in (" + paramBean.getShopIDList() + ") and\n");
            //nhanvt start edit 20141208 Bug #33639
//            sql.append(" substring(sales_date,1,7)  <= substring(date( " + SQLUtil.convertForSQL(calStart.getTime()) + " ) - interval '4 months',1,7)\n");
//            sql.append(" and sales_date is not null and delete_date is null --and visit_num > 1\n");
//            sql.append(" )\n");
//            sql.append(" and sales_date is not null and delete_date is null --and visit_num > 1\n");
            sql.append(" substring(to_char(sales_date,'yyyy/mm/dd'),1,7)  <= substring(to_char(date( " + SQLUtil.convertForSQL(calStart.getTime()) + " ) - interval '4 months','yyyy/mm/dd'),1,7)\n");
            sql.append(" and sales_date is not null and delete_date is null --and visit_num > 1\n");
            sql.append(" )\n");
            sql.append(" and sales_date is not null and delete_date is null --and visit_num > 1\n");
            //nhanvt end edit 20141208 Bug #33639
        } else {
            if (prev) {

//            sql.append(" ( SELECT customer_id	\n ");			
//            sql.append(" FROM   data_sales	\n ");			
//            sql.append(" WHERE \n ");  
//            sql.append(" to_date( sales_date, 'yyyy-mm-dd' ) = \n ");				
//            sql.append(" to_date( "+ SQLUtil.convertForSQL(calPrevEnd.getTime()) +" , 'yyyymmdd' ) 	\n ");			     
//            sql.append(" AND    to_date( sales_date, 'yyyymmdd') NOT BETWEEN \n ");				
//            sql.append(" ( to_date( "+ SQLUtil.convertForSQL(calPrevEnd.getTime()) + " , 'yyyymmdd' ) - CAST('3 months' AS INTERVAL) )	\n ");			
//            sql.append(" AND    ( to_date( "+  SQLUtil.convertForSQL(calPrevEnd.getTime()) +" , 'yyyymmdd' ) - CAST('1 days' AS INTERVAL) ) )	\n ");	
//             //対象範囲の３ヶ月前,以前には来客していた				
//            sql.append("AND to_date( sales_date,'yyyymmdd') <	\n ");			
//            sql.append("( to_date( "+  SQLUtil.convertForSQL(calPrevEnd.getTime()) + ", 'yyyymmdd' ) - CAST('3 months' AS INTERVAL) )\n ");	


                //Luc start edit

                sql.append(" SELECT COUNT(CUSTOMER_ID) AS new_repert_num \n");
                sql.append(" FROM  data_sales \n");
                sql.append(" WHERE shop_id in (" + paramBean.getShopIDList() + ") \n");
                sql.append(" and sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + "  and " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + "\n");
                sql.append(" and customer_id not IN \n");
                sql.append(" ( \n");
                sql.append(" SELECT customer_id \n");
                sql.append(" FROM   data_sales \n");
                //nhanvt start edit 20141208 Bug #33639
//                sql.append(" WHERE  shop_id in (" + paramBean.getShopIDList() + ")  and substring(sales_date,1,10) between \n");
//                sql.append(" ( date( " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " ) - interval '3 months' )   and \n");
//                sql.append(" ( date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ") - interval '1 days')\n");
                sql.append(" WHERE  shop_id in (" + paramBean.getShopIDList() + ")  and to_date(substring(to_char(sales_date,'yyyy/mm/dd'),1,10),'yyyy/mm/dd 00:00') between \n");
                sql.append(" ( date( " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " ) - interval '3 months' )   and \n");
                sql.append(" ( date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ") - interval '1 days')\n");
                //nhanvt end edit 20141208 Bug #33639

                sql.append(" and delete_date is null \n");
                sql.append("  )\n");
                sql.append(" and  customer_id IN \n");
                sql.append(" ( \n");
                sql.append(" SELECT customer_id \n");
                sql.append(" FROM   data_sales \n");
                //nhanvt start edit 20141208 Bug #33639
//                sql.append(" WHERE  shop_id in (" + paramBean.getShopIDList() + ") and\n");
//                sql.append(" substring(sales_date,1,7)  <= substring(date( " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " ) - interval '4 months',1,7)\n");
//                sql.append(" and sales_date is not null and delete_date is null --and visit_num > 1\n");
                sql.append(" WHERE  shop_id in (" + paramBean.getShopIDList() + ") and\n");
                sql.append(" substring(to_char(sales_date,'yyyy/mm/dd'),1,7)  <= substring(to_char((date( " + SQLUtil.convertForSQL(calPrevStart.getTime()) + ")  - interval '4 months'),'yyyy/mm/dd'),1,7)\n");
                sql.append(" and sales_date is not null and delete_date is null --and visit_num > 1\n");
                //nhanvt end edit 20141208 Bug #33639
                sql.append(" )\n");
                sql.append(" and sales_date is not null and delete_date is null --and visit_num > 1\n");
                //Luc end edit 

            } else {
                sql.append(" SELECT COUNT(CUSTOMER_ID) AS new_repert_num \n");
                sql.append(" FROM  data_sales \n");
                sql.append(" WHERE shop_id in (" + paramBean.getShopIDList() + ") \n");
                sql.append(" and sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + "  and " + SQLUtil.convertForSQL(calEnd.getTime()) + "\n");
                sql.append(" and customer_id not IN \n");
                sql.append(" ( \n");
                sql.append(" SELECT customer_id \n");
                sql.append(" FROM   data_sales \n");
                //nhanvt start edit 20141208 Bug #33639
//                sql.append(" WHERE  shop_id in (" + paramBean.getShopIDList() + ")  and substring(sales_date,1,10) between \n");
//                sql.append(" ( date( " + SQLUtil.convertForSQL(calStart.getTime()) + " ) - interval '3 months' )   and \n");
//                sql.append(" ( date(" + SQLUtil.convertForSQL(calStart.getTime()) + ") - interval '1 days')\n");
                
                sql.append(" WHERE  shop_id in (" + paramBean.getShopIDList() + ")  and to_date(substring(to_char(sales_date,'yyyy/mm/dd'),1,10),'yyyy/mm/dd 00:00') between \n");
                sql.append(" ( date( " + SQLUtil.convertForSQL(calStart.getTime()) + " ) - interval '3 months' )   and \n");
                sql.append(" ( date(" + SQLUtil.convertForSQL(calStart.getTime()) + ") - interval '1 days')\n"); 
                //nhanvt end edit 20141208 Bug #33639
                sql.append(" and delete_date is null \n");
                sql.append("  )\n");
                sql.append(" and  customer_id IN \n");
                sql.append(" ( \n");
                sql.append(" SELECT customer_id \n");
                sql.append(" FROM   data_sales \n");
                sql.append(" WHERE  shop_id in (" + paramBean.getShopIDList() + ") and\n");
                //nhanvt start edit 20141208 Bug #33639
//                sql.append(" substring(sales_date,1,7)  <= substring(date( " + SQLUtil.convertForSQL(calStart.getTime()) + " ) - interval '4 months',1,7)\n");
//                sql.append(" and sales_date is not null and delete_date is null --and visit_num > 1\n");
                sql.append(" substring(to_char(sales_date,'yyyy/mm/dd'),1,7)  <= substring(to_char(date( " + SQLUtil.convertForSQL(calStart.getTime()) + " ) - interval '4 months','yyyy/mm/dd'),1,7)\n");
                sql.append(" and sales_date is not null and delete_date is null --and visit_num > 1\n");
                //nhanvt end edit 20141208 Bug #33639
                sql.append(" )\n");
                sql.append(" and sales_date is not null and delete_date is null --and visit_num > 1\n");

            }
        }


        sql.append("AND delete_date IS NULL	\n ");

        return sql.toString();

    }

    public String GetReNumberCustomerVisit(ReportParameterBean paramBean, boolean today, boolean prev) {

        StringBuilder sql = new StringBuilder();

        if (today) {
//            sql.append(" SELECT COUNT(DISTINCT CUSTOMER_ID) AS usally_num	\n ");
//            sql.append(" FROM  data_sales	\n ");
//            sql.append(" WHERE shop_id in (" + paramBean.getShopIDList() + ") \n ");
//            // ３ヶ月再来				
//            sql.append(" and to_date( sales_date,'yyyymmdd')	\n ");
//            sql.append(" between ( to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ", 'yyyymmdd' ) - CAST('3 months' AS INTERVAL) )\n ");
//            sql.append(" and     ( to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ", 'yyyymmdd' ) - CAST('1 days' AS INTERVAL) )\n ");
//            // 対象範囲の顧客				
//            sql.append(" AND customer_id IN \n ");
//            sql.append(" ( SELECT A.customer_id	\n ");
//            sql.append("  FROM   data_sales A	\n ");
//            sql.append(" WHERE  to_date( A.sales_date,'yyyy-mm-dd' ) BETWEEN \n ");
//            sql.append(" to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ", 'yyyymmdd' ) AND	\n ");
//            sql.append(" to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + " , 'yyyymmdd' ) ) \n ");


            sql.append(" SELECT COUNT(DISTINCT CUSTOMER_ID) AS usally_num \n");
            sql.append(" FROM  data_sales	\n");
            sql.append(" WHERE shop_id in (" + paramBean.getShopIDList() + ") \n");
            sql.append(" and  to_date( sales_date,'yyyy-mm-dd') =	\n ");
            sql.append("to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ", 'yyyy-mm-dd' ) \n ");
            sql.append(" and customer_id  IN \n");
            sql.append(" ( \n");
            sql.append(" SELECT customer_id	\n");
            sql.append(" FROM   data_sales	\n");
            sql.append(" WHERE  to_date( sales_date, 'yyyymmdd') between \n");
            sql.append(" ( to_date( " + SQLUtil.convertForSQL(calEnd.getTime()) + "  , 'yyyymmdd' ) - CAST('3 months' AS INTERVAL) ) \n");
            sql.append(" And \n");
            sql.append(" ( to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + " , 'yyyymmdd' ) - CAST('1 days' AS INTERVAL) ) )\n");


        } else {
            if (prev) {
//                sql.append("and to_date( sales_date,'yyyymmdd')\n ");
//                sql.append("between ( to_date(  " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + " , 'yyyymmdd' ) - CAST('3 months' AS INTERVAL) )\n ");
//                sql.append("and     ( to_date( " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + " , 'yyyymmdd' ) - CAST('1 days' AS INTERVAL) )\n ");
//                // 対象範囲の顧客
//                sql.append("AND customer_id IN \n ");
//                sql.append("( SELECT A.customer_id \n ");
//                sql.append("FROM   data_sales A \n ");
//                sql.append("WHERE  to_date( A.sales_date,'yyyy-mm-dd' ) BETWEEN \n ");
//                sql.append("to_date( " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + " , 'yyyymmdd' ) AND \n ");
//                sql.append("to_date( " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + " , 'yyyymmdd' ) ) \n ");
//                
                sql.append(" SELECT COUNT(DISTINCT CUSTOMER_ID) AS usally_num \n");
                sql.append(" FROM  data_sales	\n");
                sql.append(" WHERE shop_id in (" + paramBean.getShopIDList() + ") \n");
                sql.append(" and to_date( sales_date, 'yyyymmdd' ) between  to_date( " + SQLUtil.convertForSQL(calPrevStart.getTime()) + ", 'yyyymmdd' )  and to_date( " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ", 'yyyymmdd' ) \n");
                sql.append(" and customer_id  IN \n");
                sql.append(" ( \n");
                sql.append(" SELECT customer_id	\n");
                sql.append(" FROM   data_sales	\n");
                sql.append(" WHERE  to_date( sales_date, 'yyyymmdd') between \n");
                sql.append(" ( to_date( " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + "  , 'yyyymmdd' ) - CAST('3 months' AS INTERVAL) ) \n");
                sql.append(" And \n");
                sql.append(" ( to_date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + " , 'yyyymmdd' ) - CAST('1 days' AS INTERVAL) )) \n");




            } else {
//               sql.append("and to_date( sales_date,'yyyymmdd')	\n ");
//                sql.append("between ( to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()) + ", 'yyyymmdd' ) - CAST('3 months' AS INTERVAL) )\n ");
//                sql.append("and     ( to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + " , 'yyyymmdd' ) - CAST('1 days' AS INTERVAL) )	\n ");
//
//                sql.append("and customer_id IN 	\n ");
//                sql.append("( SELECT A.customer_id	\n ");
//                sql.append("FROM   data_sales A	\n ");
//                sql.append("WHERE  to_date( A.sales_date,'yyyy-mm-dd' ) BETWEEN \n ");
//                sql.append("to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()) + ", 'yyyymmdd' ) AND	\n ");
//                sql.append("to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ", 'yyyymmdd' ) ) \n ");

                sql.append(" SELECT COUNT(DISTINCT CUSTOMER_ID) AS usally_num \n");
                sql.append(" FROM  data_sales	\n");
                sql.append(" WHERE shop_id in (" + paramBean.getShopIDList() + ") \n");
                sql.append(" and to_date( sales_date, 'yyyymmdd' ) between  to_date( " + SQLUtil.convertForSQL(calStart.getTime()) + ", 'yyyymmdd' )  and to_date( " + SQLUtil.convertForSQL(calEnd.getTime()) + ", 'yyyymmdd' ) \n");
                sql.append(" and customer_id  IN \n");
                sql.append(" ( \n");
                sql.append(" SELECT customer_id	\n");
                sql.append(" FROM   data_sales	\n");
                sql.append(" WHERE  to_date( sales_date, 'yyyymmdd') between \n");
                sql.append(" ( to_date( " + SQLUtil.convertForSQL(calEnd.getTime()) + "  , 'yyyymmdd' ) - CAST('3 months' AS INTERVAL) ) \n");
                sql.append(" And \n");
                sql.append(" ( to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + " , 'yyyymmdd' ) - CAST('1 days' AS INTERVAL) ) )\n");


            }
        }

        sql.append(" AND delete_date IS NULL	\n ");
        return sql.toString();

    }

    public String GetTotalNumCus(ReportParameterBean paramBean, boolean today, boolean prev) {

        StringBuilder sql = new StringBuilder();
        sql.append("SELECT COUNT(CUSTOMER_ID) AS total_num	\n ");
        sql.append("FROM  data_sales	\n ");
        sql.append(" WHERE shop_id in (" + paramBean.getShopIDList() + ") \n ");
        if (today) {
            //nhanvt start edit 20141208 Bug #33639
            //sql.append(" and  to_date( sales_date,'yyyy-mm-dd') =	\n ");
            sql.append(" and  to_date( to_char(sales_date,'yyyy-mm-dd'),'yyyy-mm-dd') =	\n ");
             //nhanvt end edit 20141208 Bug #33639
            sql.append("to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ", 'yyyy-mm-dd' ) \n ");

        } else {
            if (prev) {
                //nhanvt start edit 20141208 Bug #33639
                sql.append("and to_date( to_char(sales_date,'yyyy-mm-dd'),'yyyy-mm-dd')\n ");
                //nhanvt end edit 20141208 Bug #33639
                sql.append(" BETWEEN to_date( " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()) + ", 'yyyy-mm-dd' )\n ");
                sql.append(" AND     to_date( " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + ", 'yyyy-mm-dd' )\n ");


            } else {
                //nhanvt start edit 20141208 Bug #33639
                sql.append(" and to_date( to_char(sales_date,'yyyy-mm-dd'),'yyyy-mm-dd') \n ");
                //nhanvt end edit 20141208 Bug #33639
                sql.append(" BETWEEN to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()) + ", 'yyyy-mm-dd' )\n ");
                sql.append(" AND     to_date( " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ", 'yyyy-mm-dd' )\n ");

            }
        }
        sql.append("AND delete_date IS NULL	\n ");
        return sql.toString();

    }

    public String GetTotalNominatNum(ReportParameterBean paramBean, boolean today, boolean prev) {

        StringBuilder sql = new StringBuilder();
        // vtbphuong start change 20140602 Bug #24590
//        sql.append(" select count( customer_id) as nominat_num  \n ");
//        sql.append("                     from data_sales  \n ");
//        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
//        if (today) {
//            sql.append("   and sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));
//
//        } else {
//            if (prev) {
//
//                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()));
//                sql.append("    and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "");
//
//            } else {
//                sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
//                sql.append("    and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
//            }
//        }
//        sql.append(" and visit_num = 1 \n ");
//        sql.append(" and   delete_date IS NULL	\n ");
//        sql.append(" and   designated_flag = true ");
        
        
          sql.append(" select count( distinct ds.slip_no ) as nominat_num  \n ");
        sql.append("                     from data_sales ds inner join data_sales_detail dsd using(shop_id, slip_no )  \n ");
        sql.append(" where ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
        if (today) {
            sql.append("   and ds.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()));

        } else {
            if (prev) {

                sql.append(" and ds.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()));
                sql.append("    and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + "");

            } else {
                sql.append(" and ds.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
                sql.append("    and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
            }
        }
        
        sql.append(" and   ds.delete_date IS NULL	\n ");
        sql.append(" and   dsd.delete_date IS NULL	\n ");
        sql.append(" and   dsd.product_division in (1,3) \n ");
        sql.append(" and   ds.designated_flag = true ");

        // vtbphuong end change 20140602 Bug #24590

        return sql.toString();

    }

    //VTAn End add 20140428 Bug #20897
    public String GetTotalIntroNum(ReportParameterBean paramBean, boolean today, boolean prev) {
        StringBuilder sql = new StringBuilder();
        sql.append(" select count(customer_id )as intro_num \n ");
        sql.append("      from mst_customer mc \n ");
        sql.append("      where mc.customer_id in ( \n ");
        sql.append("      select  distinct customer_id \n ");
        sql.append("      from data_sales ds \n ");
        sql.append(" where ds.shop_id in (" + paramBean.getShopIDList() + ") and ds.visit_num = 1 and ds.delete_date  is  null   \n");
        if (today) {
            sql.append(" and ds.sales_date = " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ")\n ");

        } else {
            if (prev) {

                sql.append(" and ds.sales_date between " + SQLUtil.convertForSQLDateOnly(calPrevStart.getTime()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(calPrevEnd.getTime()) + ")\n ");

            } else {
                sql.append(" and ds.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
                sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + ")\n ");
            }
        }
        sql.append("                          and mc.introducer_id is not null  ");
        return sql.toString();
    }

    //日目標         
    public String GetTotalTargetDay(ReportParameterBean paramBean) {
        StringBuilder sql = new StringBuilder();
        sql.append(" select  Sum(technic) as technic");
        sql.append("  ,Sum(item) as item");
        sql.append("  ,Sum(cota) as cota");
        sql.append("  ,Sum(cut_num) as cut_num");
        sql.append("  ,Sum(cut_sale) as cut_sale");
        sql.append("  ,Sum(perm_num) as perm_num");
        sql.append("  ,Sum(perm_sale) as perm_sale");
        sql.append("  ,Sum(col_num) as col_num");
        sql.append("  ,Sum(col_sale) as col_sale");
        sql.append("  ,Sum(spa_num) as spa_num");
        sql.append("  ,Sum(spa_sale) as spa_sale");
        sql.append("  ,Sum(treat_num) as treat_num");
        sql.append("  ,Sum(treat_sale) as treat_sale");
        sql.append("  ,Sum(item_num) as item_num");
        sql.append("  ,Sum(y_num) as y_num");
        sql.append("  ,Sum(o_num) as o_num");
        sql.append("  ,Sum(new_num) as new_num");
        sql.append("  ,Sum(new_repert_num) as new_repert_num");
        sql.append("  ,Sum(total_num) as total_num");
        sql.append("  ,Sum(intro_num) as intro_num");
        sql.append("  ,Sum(nominat_num) as nominat_num");
        sql.append("  ,Sum(open_day) as open_day");
        sql.append("  ,Sum(e_stylist) as e_stylist");
        sql.append("  ,Sum(e_assistant) as e_assistant");
        sql.append("  ,Sum(ar_stylist) as ar_stylist");
        sql.append("  ,Sum(ar_assistant) as ar_assistant");
        sql.append("  ,Sum(ar_other) as ar_other");
        sql.append("  from data_target_day_ox");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and to_char(day,'YYYY/MM/DD')  between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
        sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
        return sql.toString();
    }

    //月目標         
    public String GetTotalTargetMonth(ReportParameterBean paramBean, boolean prev) {
        StringBuilder sql = new StringBuilder();
        sql.append(" select  Sum(technic) as technic");
        sql.append("  ,Sum(item) as item");
        sql.append("  ,Sum(cota) as cota");
        sql.append("  ,Sum(cut_num) as cut_num");
        sql.append("  ,Sum(cut_sale) as cut_sale");
        sql.append("  ,Sum(perm_num) as perm_num");
        sql.append("  ,Sum(perm_sale) as perm_sale");
        sql.append("  ,Sum(col_num) as col_num");
        sql.append("  ,Sum(col_sale) as col_sale");
        sql.append("  ,Sum(spa_num) as spa_num");
        sql.append("  ,Sum(spa_sale) as spa_sale");
        sql.append("  ,Sum(treat_num) as treat_num");
        sql.append("  ,Sum(treat_sale) as treat_sale");
        sql.append("  ,Sum(item_num) as item_num");
        sql.append("  ,Sum(y_num) as y_num");
        sql.append("  ,Sum(o_num) as o_num");
        sql.append("  ,Sum(new_num) as new_num");
        sql.append("  ,Sum(new_repert_num) as new_repert_num");
        sql.append("  ,Sum(total_num) as total_num");
        sql.append("  ,Sum(intro_num) as intro_num");
        sql.append("  ,Sum(nominat_num) as nominat_num");
        sql.append("  ,Sum(open_day) as open_day");
        sql.append("  ,Sum(e_stylist) as e_stylist");
        sql.append("  ,Sum(e_assistant) as e_assistant");
        sql.append("  ,Sum(ar_stylist) as ar_stylist");
        sql.append("  ,Sum(ar_assistant) as ar_assistant");
        sql.append("  ,Sum(ar_other) as ar_other");
        sql.append("  from data_target_ox");
        if (prev) {
            sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
            sql.append(" and year between " + SQLUtil.convertForSQL(yearStart - 1));
            sql.append(" and " + SQLUtil.convertForSQL(yearEnd - 1));
            sql.append(" and month between " + SQLUtil.convertForSQL(monthStart));
            sql.append(" and " + SQLUtil.convertForSQL(monthEnd));
        } else {
            sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
            sql.append(" and year between " + SQLUtil.convertForSQL(yearStart));
            sql.append(" and " + SQLUtil.convertForSQL(yearEnd));
            sql.append(" and month between " + SQLUtil.convertForSQL(monthStart));
            sql.append(" and " + SQLUtil.convertForSQL(monthEnd));
        }


        return sql.toString();
    }

    public String GetTotalStaffWorking(ReportParameterBean paramBean) {
        StringBuilder sql = new StringBuilder();
        sql.append(" select count(*) as countStaff ");
        sql.append("  from data_staff_work_time");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and working_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
        sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
        sql.append(" and delete_date is null");
        return sql.toString();
    }

    public String GetTotalTimePartimeWorking(ReportParameterBean paramBean) {
        StringBuilder sql = new StringBuilder();
        sql.append(" select Sum(case when working_start_time is null and working_finish_time is null then 0  ");
        sql.append("  else abs(extract(epoch from working_finish_time - working_start_time)/3600) end) as TotalTime ");
        sql.append("  from data_staff_work_time ");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and working_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
        sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
        sql.append(" and delete_date is null");
        sql.append(" and staff_id in (select staff_id from mst_staff where staff_class_id in (10005,10006,10007,10008))");
        return sql.toString();
    }

    public String GetCountSoldDay(ReportParameterBean paramBean) {
        StringBuilder sql = new StringBuilder();
        sql.append(" select count(distinct sales_date) \n");
        sql.append("  from data_sales \n");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
        sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
        sql.append(" and delete_date is null");
        return sql.toString();
    }

    public String GetStaffHelp(ReportParameterBean paramBean) {
        StringBuilder sql = new StringBuilder();
        sql.append(" select count(*) as CountStaffHelp from data_staff_work_time \n");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and working_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
        sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
        sql.append(" and delete_date is null \n");
        sql.append(" and staff_id in (select staff_id from mst_staff \n");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + "))\n");
        return sql.toString();
    }

    private void setPeriod() {
        Date prevStar = cmbTargetPeriodStartDate.getDate();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(prevStar);
        calendar.add(Calendar.YEAR, -1);
        calPrevStart = calendar;


        /*
         calStart = Calendar.getInstance();      
         calStart.set(Calendar.DAY_OF_MONTH, 1);
         calStart.set(Calendar.HOUR_OF_DAY, 0);
         calStart.set(Calendar.MINUTE, 0);
         calStart.set(Calendar.SECOND, 0);
         calStart.set(Calendar.MILLISECOND, 0);

         calEnd = (Calendar)calStart.clone();   
         calEnd.set(Calendar.DAY_OF_MONTH, 1);
         calEnd.add(Calendar.MONTH, 1);
         calEnd.add(Calendar.DAY_OF_MONTH, -1);

         int startYM = (calStart.get(Calendar.YEAR) * 12) + calStart.get(Calendar.MONTH);
         int endYM = (calEnd.get(Calendar.YEAR) * 12) + calEnd.get(Calendar.MONTH);
         int period = endYM - startYM + 1;
         */
        calPrevStart = (Calendar) calStart.clone();
        calPrevEnd = (Calendar) calEnd.clone();

        calPrevStart.add(Calendar.YEAR, -1);
        calPrevEnd.add(Calendar.YEAR, -1);

        /*
         calBeforePrevStart = (Calendar)calPrevStart.clone();
         calBeforePrevStart.add(Calendar.MONTH, period * -1);
        
         calBeforePrevEnd = (Calendar)calPrevEnd.clone();
         calBeforePrevEnd.add(Calendar.MONTH, period * -1);
         */
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutput4;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cmbShop;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodEndDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodStartDate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTargetPeriod5;
    private javax.swing.ButtonGroup newVisitGroup;
    private javax.swing.ButtonGroup reportTypeGroup;
    private javax.swing.ButtonGroup staffGroup;
    private javax.swing.JLabel targetLabel2;
    private javax.swing.ButtonGroup taxGroup;
    private javax.swing.JLabel termtLabe1;
    // End of variables declaration//GEN-END:variables

    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(btnOutput4);
    }

    private void setValueTargetMonth(JExcelApi jx, ResultSetWrapper rs, boolean prev) throws SQLException {
        int col = 7;
        if (prev) {
            col = 11;
        }
        jx.setValue(col, 6, rs.getInt("technic"));
        jx.setValue(col, 8, rs.getInt("item"));
        jx.setValue(col, 31, rs.getInt("nominat_num"));
        jx.setValue(col, 7, rs.getInt("cota"));
        jx.setValue(col, 9, rs.getInt("technic") + rs.getInt("item"));
        jx.setValue(col, 10, rs.getInt("cut_num"));
        jx.setValue(col, 11, rs.getInt("cut_sale"));
        jx.setValue(col, 12, rs.getInt("perm_num"));
        jx.setValue(col, 13, rs.getInt("perm_sale"));
        jx.setValue(col, 14, rs.getInt("col_num"));
        jx.setValue(col, 15, rs.getInt("col_sale"));
        jx.setValue(col, 16, rs.getInt("spa_num"));
        jx.setValue(col, 17, rs.getInt("spa_sale"));
        jx.setValue(col, 18, rs.getInt("treat_num"));
        jx.setValue(col, 19, rs.getInt("treat_sale"));
        jx.setValue(col, 21, rs.getInt("item_num"));
        jx.setValue(col, 22, rs.getInt("y_num"));
        // jx.setValue(col,23,rs.getInt("m_num")  );  
        jx.setValue(col, 24, rs.getInt("o_num"));
        //jx.setValue(col,25,rs.getInt("un_num")  );
        jx.setValue(col, 26, rs.getInt("new_num"));
        //jx.setValue(col,27,rs.getInt("usally_num")  ); 
        jx.setValue(col, 28, rs.getInt("new_repert_num"));
        jx.setValue(col, 29, rs.getInt("total_num"));
        jx.setValue(col, 30, rs.getInt("intro_num"));
    }
}
