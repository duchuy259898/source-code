/*
 * CusContractHistoryReportPanel.java
 *
 * Created on 2013/04/18, 13:00
 */
package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.*;
import javax.swing.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.hair.report.logic.*;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.account.MstAccountSetting;

import com.geobeck.sosia.pos.util.*;
import java.text.SimpleDateFormat;
import com.geobeck.sql.*;
import com.geobeck.swing.filechooser.WildcardFileFilter;
import com.geobeck.util.CheckUtil;
import com.geobeck.util.SQLUtil;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.SQLException;
import java.util.ArrayList;

import java.util.GregorianCalendar;
import org.apache.commons.lang.math.NumberUtils;
import java.util.HashMap;
import java.util.Iterator;

/**
 *
 * @author Duong Hoang Thanh
 */
public class CancelCourseListPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private CusContractHistoryReportFocusTraversalPolicy ftp =
            new CusContractHistoryReportFocusTraversalPolicy();

    /**
     * Creates new form SalesTransitionReportPanel
     */
    public CancelCourseListPanel() {

        initComponents();
        addMouseCursorChange();
        this.setSize(958, 750);
        this.setPath("解約一覧");
        this.setTitle("解約一覧");
        this.setKeyListener();
        init();

    }

    private void setKeyListener() {
        cmbTargetPeriodEndDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbTargetPeriodEndDate.addFocusListener(SystemInfo.getSelectText());
        cmbTargetPeriodStartDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbTargetPeriodStartDate.addFocusListener(SystemInfo.getSelectText());
        rdoTaxBlank.addKeyListener(SystemInfo.getMoveNextField());
        rdoTaxUnit.addKeyListener(SystemInfo.getMoveNextField());
    }

    /**
     * init form
     */
    private void init() {

        Calendar cal = Calendar.getInstance();
        SystemInfo.initGroupShopComponents(cmbTarget1, 3);

        //期間を初期設定する
        Calendar cdr = Calendar.getInstance();
        cdr.setTime(new Date());
        //売上構成やその推移コントロールを初期設定する

        cal.add(Calendar.MONTH, 1);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.add(Calendar.YEAR, -1);
        cal.add(Calendar.YEAR, 1);
        cal.add(Calendar.DAY_OF_MONTH, -1);

        //対象期間の設定
        this.cmbTargetPeriodStartDate.setDate(new Date());
        this.cmbTargetPeriodEndDate.setDate(new Date());
    }
    
    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(btnExcelReport1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportTypeGroup = new javax.swing.ButtonGroup();
        taxGroup = new javax.swing.ButtonGroup();
        countGroup = new javax.swing.ButtonGroup();
        customerGroup = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        typeGroup = new javax.swing.ButtonGroup();
        aggregationGroup = new javax.swing.ButtonGroup();
        timeGroup = new javax.swing.ButtonGroup();
        outputGroup = new javax.swing.ButtonGroup();
        taxGroup2 = new javax.swing.ButtonGroup();
        aggregateGroup = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        btnPerformance = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblTarget1 = new javax.swing.JLabel();
        cmbTarget1 = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        btnExcelReport1 = new javax.swing.JButton();
        lblPeriod1 = new javax.swing.JLabel();
        cmbTargetPeriodStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        cmbTargetPeriodEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lblTax1 = new javax.swing.JLabel();
        rdoTaxUnit = new javax.swing.JRadioButton();
        rdoTaxBlank = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        lblTarget1.setText("対象");

        //shop.addItem(this.myShop);

        btnExcelReport1.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnExcelReport1.setBorderPainted(false);
        btnExcelReport1.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnExcelReport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelReport1ActionPerformed(evt);
            }
        });

        lblPeriod1.setText("解約日");
        lblPeriod1.setFocusCycleRoot(true);

        cmbTargetPeriodStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodStartDate.setFocusCycleRoot(true);
        cmbTargetPeriodStartDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodStartDateFocusGained(evt);
            }
        });

        cmbTargetPeriodEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodEndDate.setFocusCycleRoot(true);
        cmbTargetPeriodEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodEndDateFocusGained(evt);
            }
        });

        lblTax1.setText("税区分");

        buttonGroup3.add(rdoTaxUnit);
        rdoTaxUnit.setSelected(true);
        rdoTaxUnit.setText("税込");
        rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxUnit.setContentAreaFilled(false);
        rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup3.add(rdoTaxBlank);
        rdoTaxBlank.setText("税抜");
        rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxBlank.setContentAreaFilled(false);
        rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel1.setText("〜");
        jLabel1.setFocusCycleRoot(true);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(lblPeriod1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(lblTarget1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(cmbTargetPeriodStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cmbTargetPeriodEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(cmbTarget1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 215, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(btnExcelReport1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(lblTax1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rdoTaxUnit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(20, 20, 20)
                        .add(rdoTaxBlank, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(lblTarget1)
                        .add(cmbTarget1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(btnExcelReport1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbTargetPeriodEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(cmbTargetPeriodStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTax1)
                    .add(rdoTaxUnit)
                    .add(rdoTaxBlank))
                .add(22, 22, 22))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(330, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(317, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 期間で絞って詳細な売上のEXCELボタンを押下。
     *
     * @param evt
     */
    private void btnExcelReport1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelReport1ActionPerformed

        btnExcelReport1.setCursor(null);

        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            ReportParameterBean paramBean = new ReportParameterBean();
            // 税区分(税抜き)
            if (this.rdoTaxBlank.isSelected()) {
                paramBean.setTaxType(ReportParameterBean.TAX_TYPE_BLANK);
            } // 税区分(税込み)
            else if (this.rdoTaxUnit.isSelected()) {
                paramBean.setTaxType(ReportParameterBean.TAX_TYPE_UNIT);
            }

            boolean logicResult = true;

            try {
                //グループ
                if (cmbTarget1.getSelectedItem() instanceof MstGroup) {
                    MstGroup mg = (MstGroup) cmbTarget1.getSelectedItem();
                    paramBean.setTargetName(mg.getGroupName());
                    paramBean.setShopIDList(mg.getShopIDListAll());
                } //店舗
                else if (cmbTarget1.getSelectedItem() instanceof MstShop) {
                    MstShop ms = (MstShop) cmbTarget1.getSelectedItem();
                    paramBean.setTargetName(ms.getShopName());
                    paramBean.setShopIDList(ms.getShopID().toString());
                }

                //対象となる店舗が存在しない場合
                if (paramBean.getShopIDList().equals("")) {
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(4001),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }


                Calendar start = Calendar.getInstance();
                Calendar end = Calendar.getInstance();
                if (cmbTargetPeriodStartDate.getDate() == null) {
                    MessageDialog.showMessageDialog(this,
                            "期間が正しくありません",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (this.cmbTargetPeriodEndDate.getDate() == null) {
                    MessageDialog.showMessageDialog(this,
                            "期間が正しくありません",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                start.setTime(cmbTargetPeriodStartDate.getDate());
                end.setTime(this.cmbTargetPeriodEndDate.getDate());
                if (start.compareTo(end) != 0) {
                    if (start.after(end)) {
                        MessageDialog.showMessageDialog(this,
                                "期間が正しくありません",
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                start.setTime(this.cmbTargetPeriodStartDate.getDate());
                end.setTime(this.cmbTargetPeriodEndDate.getDate());

                paramBean.setTargetStartDate(this.cmbTargetPeriodStartDate.getDateStr());
                paramBean.setTargetEndDate(this.cmbTargetPeriodEndDate.getDateStr());

                Calendar cal = Calendar.getInstance();
                cal.setTime(cmbTargetPeriodStartDate.getDate());
                cal.set(Calendar.HOUR_OF_DAY, 0);
                cal.set(Calendar.MINUTE, 0);
                cal.set(Calendar.SECOND, 0);
                paramBean.setTargetStartDateObj(cal.getTime());

                cal.setTime(cmbTargetPeriodEndDate.getDate());
                cal.set(Calendar.HOUR_OF_DAY, 23);
                cal.set(Calendar.MINUTE, 59);
                cal.set(Calendar.SECOND, 59);
                paramBean.setTargetEndDateObj(cal.getTime());

                ConnectionWrapper con = SystemInfo.getConnection();
                ResultSetWrapper rs = con.executeQuery(getCancelCourseList(paramBean));
                rs.last();
                int count = rs.getRow();
                rs.beforeFirst();
                if (count > 0) {
                    // 税込み･税別の区分
                    String tax = "";
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                        tax = "税抜";
                    } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                        tax = "税込";
                    }

                    JExcelApi jx = new JExcelApi("解約一覧");
                    jx.setTemplateFile("/reports/解約一覧.xls");
                    // ヘッダ
                    jx.setValue(2, 3, paramBean.getTargetName());
                    jx.setValue(2, 4, String.format("%1$tY/%1$tm/%1$td", cmbTargetPeriodStartDate.getDate()) + " 〜 " + String.format("%1$tY/%1$tm/%1$td", cmbTargetPeriodEndDate.getDate()));
                    jx.setValue(2, 5, tax);
                    int row = 8;

//                    // 追加行数セット
                    if (count - 2 > 0) {
                        //template is having 2 row
                        jx.insertRow(row, count - 2);
                    }
                    if (count == 1) {
                        jx.removeRow(row + 1);
                    }
//
                    while (rs.next()) {
                        jx.setValue(1, row, rs.getDate("cancel_date"));
                        jx.setValue(2, row, rs.getString("customer_no"));
                        jx.setValue(3, row, rs.getString("customer_name"));
                        jx.setValue(4, row, rs.getDate("contract_date"));
                        jx.setValue(5, row, rs.getString("course_name"));
                        jx.setValue(6, row, rs.getString("contract_staff"));
                        jx.setValue(7, row, rs.getDouble("contract_value"));
                        jx.setValue(8, row, rs.getDouble("digestion_value"));
                        jx.setValue(9, row, rs.getDouble("remain_value"));
                        jx.setValue(10, row, rs.getDouble("charg_value"));
                        jx.setValue(11, row, rs.getDouble("return_value"));

                        row += 1;
                    }

                    jx.openWorkbook();

                } else {
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(4001),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }

            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(1099),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // エラー時
            if (!logicResult) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            }
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnExcelReport1ActionPerformed

    private String getCancelCourseList(ReportParameterBean paramBean) {
        StringBuffer sql = new StringBuffer(10000);
        sql.append(" select ds.sales_date as cancel_date,c.customer_no,c.customer_name1||c.customer_name2 as customer_name,ds1.sales_date as contract_date, \n");
        sql.append(" mc.course_name as course_name,");
        sql.append(" (select distinct ms.staff_name1||ms.staff_name2 from data_sales ds2");
        sql.append(" inner join data_sales_detail dsd2 on  ds2.slip_no = dsd2.slip_no and ds2.shop_id = dsd2.shop_id");
        sql.append(" inner join mst_staff ms on dsd2.staff_id = ms.staff_id");
        sql.append(" where ");
        sql.append(" dsd2.slip_no = dc.slip_no  and dsd2.shop_id = dc.shop_id and dsd2.product_id = dc.product_id");
        sql.append(" and ds2.delete_date is null and dsd2.delete_date is null");
        sql.append("  and dsd2.product_division =5");
        sql.append(" )");
        sql.append("   as contract_staff,");

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            sql.append(" dc.product_value as contract_value,\n");
        } else {
            sql.append(" ceil(dc.product_value/(1+get_tax_rate(dc.tax_rate, dc.insert_date))) as contract_value,\n");
        }
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            sql.append(" (select ceil(sum(dcd.product_num*(dc.product_value/dc.product_num)))\n");
            sql.append(" from data_contract_digestion dcd \n");
            sql.append(" where contract_no = dc.contract_no and contract_detail_no = dc.contract_detail_no \n");
            //IVS_LVTu start edit 2015/09/03 Bug #42459
            sql.append(" AND dcd.contract_shop_id = dc.shop_id  \n");
            sql.append(" ) as digestion_value,\n");
        } else {
            sql.append(" (select ceil(sum(dcd.product_num*((dc.product_value/(1+get_tax_rate(dc.tax_rate, dc.insert_date)))/dc.product_num)))\n");
            sql.append(" from data_contract_digestion dcd \n");
            sql.append(" where contract_no = dc.contract_no and contract_detail_no = dc.contract_detail_no \n");
            sql.append(" AND dcd.contract_shop_id = dc.shop_id  \n");
            sql.append(" ) as digestion_value,\n");
        }
        //IVS_LVTu start edit 2015/09/18 Bug #42430
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            //Luc start edit 20160122 #46993
            /*sql.append(" (dc.product_value- coalesce((select sum(dcd.product_num*(dc.product_value/dc.product_num))\n");
            sql.append(" from data_contract_digestion dcd \n");
            sql.append(" where contract_no = dc.contract_no and contract_detail_no = dc.contract_detail_no \n");
            sql.append(" AND dcd.contract_shop_id = dc.shop_id  \n");
            sql.append(" ),0)) as remain_value,\n");
            */
            sql.append(" dsd.product_value as remain_value,\n");
            //Luc end edit 20160122 #46993
        } else {
            //Luc start edit 20160122 #46993
            /*sql.append(" (dc.product_value- coalesce((select sum(dcd.product_num*(dc.product_value/dc.product_num))\n");
            sql.append(" from data_contract_digestion dcd \n");
            sql.append(" where contract_no = dc.contract_no and contract_detail_no = dc.contract_detail_no \n");
            sql.append(" AND dcd.contract_shop_id = dc.shop_id  \n");
            sql.append(" ),0))/(1+get_tax_rate(dc.insert_date)) as remain_value,\n");
            */
            sql.append(" dsd.product_value/(1+get_tax_rate(dc.tax_rate, dc.insert_date)) as remain_value,\n");
            //Luc end edit 20160122 #46993
        }
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            sql.append(" (select coalesce(sum(detail_value_in_tax),0) from view_data_sales_detail_valid where slip_no= ds.slip_no and shop_id = ds.shop_id and product_division=9 and product_id=-2) as charg_value,\n");
        } else {
            sql.append(" (select coalesce(sum(detail_value_no_tax),0) from view_data_sales_detail_valid where slip_no= ds.slip_no and shop_id = ds.shop_id and product_division=9 and product_id=-2) as charg_value,\n");
        }

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            //Luc start edit 20160122 #46993
            /*sql.append(" --remain value\n");
            sql.append(" -1*((dc.product_value- coalesce((select sum(dcd.product_num*(dc.product_value/dc.product_num))\n");
            sql.append(" from data_contract_digestion dcd \n");
            sql.append(" where contract_no = dc.contract_no and contract_detail_no = dc.contract_detail_no \n");
            sql.append(" AND dcd.contract_shop_id = dc.shop_id  \n");
            sql.append(" --charg value\n");
            sql.append(" ),0)) -  (select coalesce(sum(detail_value_in_tax),0) from view_data_sales_detail_valid where slip_no= ds.slip_no and shop_id = ds.shop_id and product_division=9 and product_id=-2)) as return_value\n");
            */
             sql.append("  dsd.product_value +   (select coalesce(sum(detail_value_in_tax),0) from view_data_sales_detail_valid where slip_no= ds.slip_no and shop_id = ds.shop_id and product_division=9 and product_id=-2) as return_value\n");
            //Luc start edit 20160122 #46993
        } else {
            /*
            sql.append(" --remain value\n");
            sql.append(" -1*((dc.product_value- coalesce((select sum(dcd.product_num*(dc.product_value/dc.product_num))\n");
            sql.append(" from data_contract_digestion dcd \n");
            sql.append(" where contract_no = dc.contract_no and contract_detail_no = dc.contract_detail_no \n");
            sql.append(" AND dcd.contract_shop_id = dc.shop_id  \n");
            sql.append(" --charg value\n");
            sql.append(" ),0)) -  (select coalesce(sum(detail_value_no_tax),0) from view_data_sales_detail_valid where slip_no= ds.slip_no and shop_id = ds.shop_id and product_division=9 and product_id=-2)) as return_value\n");
            */
            sql.append(" dsd.product_value/(1+get_tax_rate(dc.tax_rate, dc.insert_date)) + (select coalesce(sum(detail_value_no_tax),0) from view_data_sales_detail_valid where slip_no= ds.slip_no and shop_id = ds.shop_id and product_division=9 and product_id=-2) as return_value\n");

        }
        //IVS_LVTu end edit 2015/09/18 Bug #42430
        sql.append(" from data_sales_detail dsd\n");
        sql.append(" inner join data_sales ds on dsd.slip_no = ds.slip_no and dsd.shop_id = ds.shop_id  \n");
        sql.append(" inner join data_contract dc on dsd.contract_shop_id = dc.shop_id and dsd.contract_no = dc.contract_no and dsd.contract_detail_no = dc.contract_detail_no\n");
        sql.append(" inner join data_sales ds1 on dc.slip_no = ds1.slip_no and dc.shop_id = ds1.shop_id \n");
        //IVS_LVTu end edit 2015/09/03 Bug #42459
        //Luc start add 20150724 #40933
        //sql.append(" inner join data_sales_detail dsd1 on dsd1.slip_no =dc.slip_no and dsd1.shop_id = dc.shop_id and dsd1.product_id = dc.product_id  \n");
        //sql.append(" and dsd1.product_division = 5  \n");
        //Luc end add 20150724 #40933
        sql.append(" inner join mst_course mc on dc.product_id = mc.course_id  \n");
        sql.append(" inner join mst_customer c on ds.customer_id = c.customer_id \n");
        //Luc start delete 20160122 #46993
        //sql.append(" left join mst_staff ms on dsd1.staff_id = ms.staff_id \n");
        //Luc end delete 20160122 #46993
        sql.append(" where dsd.product_division=8 and ds.shop_id in(" + paramBean.getShopIDList() + ")\n");
        sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "");
        //Luc start add 20160122 #46993
        sql.append("  and ds.delete_date is null  and dsd.delete_date is null ");
        //Luc end add 20160122 #46993
        return sql.toString();
    }
    private void cmbTargetPeriodEndDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodEndDateFocusGained
        cmbTargetPeriodEndDate.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_cmbTargetPeriodEndDateFocusGained

    private void cmbTargetPeriodStartDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodStartDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTargetPeriodStartDateFocusGained

    /**
     * CSVファイルを開く
     */
    private String getSaveCSVFileName(String fileName) {
        JFileChooser jfc = new JFileChooser();
        WildcardFileFilter filter = new WildcardFileFilter("*.csv", "CSVファイル");

        File file = new File(new File(fileName + "_" + String.format("%1$tY%1$tm%1$td%2$ts", new GregorianCalendar(), new java.util.Date()) + ".csv").getAbsolutePath());
        jfc.setSelectedFile(file);
        jfc.setFileFilter(filter);

        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            return jfc.getSelectedFile().getAbsolutePath();
        }
        return null;
    }

    /**
     * inputCheckyear
     *
     * @param cmb
     * @param itemName
     * @return
     */
    private boolean inputCheckYear(JComboBox cmb, String itemName) {
        NumberUtils numUtil = new NumberUtils();
        if (!numUtil.isNumber(cmb.getSelectedItem().toString())) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, itemName),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmb.requestFocusInWindow();
            return false;
        }

        return true;
    }

    private GregorianCalendar dateToGregorianCalendar(java.util.Date date) {
        GregorianCalendar gCal = new GregorianCalendar();
        gCal.setTime(date);
        return gCal;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup aggregateGroup;
    private javax.swing.ButtonGroup aggregationGroup;
    private javax.swing.JButton btnExcelReport1;
    private javax.swing.ButtonGroup btnPerformance;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cmbTarget1;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodEndDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodStartDate;
    private javax.swing.ButtonGroup countGroup;
    private javax.swing.ButtonGroup customerGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblPeriod1;
    private javax.swing.JLabel lblTarget1;
    private javax.swing.JLabel lblTax1;
    private javax.swing.ButtonGroup outputGroup;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private javax.swing.ButtonGroup reportTypeGroup;
    private javax.swing.ButtonGroup taxGroup;
    private javax.swing.ButtonGroup taxGroup2;
    private javax.swing.ButtonGroup timeGroup;
    private javax.swing.ButtonGroup typeGroup;
    // End of variables declaration//GEN-END:variables

    private void writeExcelValue(JExcelApi jx, int col, int row, String value) throws SQLException {
        jx.setValue(col, row, value);
    }

    public CusContractHistoryReportFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    private class CusContractHistoryReportFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponentStaffShopRankingFocusTraversalPolicy。 aContainer は
         * aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(cmbTarget1)) {
                return cmbTargetPeriodStartDate;
            } else if (aComponent.equals(cmbTargetPeriodStartDate)) {
                return cmbTargetPeriodEndDate;
            } else if (aComponent.equals(cmbTargetPeriodEndDate)) {
                if (rdoTaxUnit.isSelected()) {
                    return rdoTaxUnit;
                }
                return rdoTaxBlank;
            }
            return this.getStartComponent();
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {

            return this.getStartComponent();
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。 このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer 先頭の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。 このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer aContainer - 最後の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer) {
            if (rdoTaxUnit.isSelected()) {
                return rdoTaxUnit;
            }
            return rdoTaxBlank;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。 aContainer
         * をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         *
         * @param aContainer デフォルトの Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。 show() または setVisible(true)
         * の呼び出しで一度ウィンドウが表示されると、 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、 または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         *
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        public Component getInitialComponent(Window window) {
            return this.getStartComponent();
        }

        private Component getStartComponent() {
            if (cmbTarget1.getItemCount() == 1) {
                return cmbTargetPeriodStartDate;
            }
            return cmbTarget1;
        }
    }
}
