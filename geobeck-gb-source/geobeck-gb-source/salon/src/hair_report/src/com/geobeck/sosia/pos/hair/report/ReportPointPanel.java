/*
 * ReportPointPanel.java
 *
 * Created on 2016/03/08, 13:00
 */
package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.*;
import javax.swing.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sql.*;
import com.geobeck.util.SQLUtil;
import java.sql.SQLException;


/**
 *
 * @author lvtu
 */
public class ReportPointPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private CusContractHistoryReportFocusTraversalPolicy ftp =
            new CusContractHistoryReportFocusTraversalPolicy();

    /**
     * Creates new form ReportPointPanel
     */
    public ReportPointPanel() {

        initComponents();
        this.setSize(958, 750);
        this.setPath("ポイント集計");
        this.setTitle("ポイント集計");
        this.setKeyListener();
        addMouseCursorChange();
        init();

    }

    private void setKeyListener() {
        cmbTargetPeriodEndDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbTargetPeriodEndDate.addFocusListener(SystemInfo.getSelectText());
        cmbTargetPeriodStartDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbTargetPeriodStartDate.addFocusListener(SystemInfo.getSelectText());
        rdoPrepaid.addKeyListener(SystemInfo.getMoveNextField());
        rdoPoint.addKeyListener(SystemInfo.getMoveNextField());
    }
    
    private void addMouseCursorChange()
    {
	    SystemInfo.addMouseCursorChange(btnExcelReport);
    }

    /**
     * init form
     */
    private void init() {

        Calendar cal = Calendar.getInstance();

        //期間を初期設定する    
        Calendar cdr = Calendar.getInstance();
        cdr.setTime(new Date());
        //売上構成やその推移コントロールを初期設定する

        cal.add(Calendar.MONTH, 1);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.add(Calendar.YEAR, -1);
        cal.add(Calendar.YEAR, 1);
        cal.add(Calendar.DAY_OF_MONTH, -1);

        //対象期間の設定
        this.cmbTargetPeriodStartDate.setDate(new Date());
        this.cmbTargetPeriodEndDate.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportTypeGroup = new javax.swing.ButtonGroup();
        taxGroup = new javax.swing.ButtonGroup();
        countGroup = new javax.swing.ButtonGroup();
        customerGroup = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        typeGroup = new javax.swing.ButtonGroup();
        aggregationGroup = new javax.swing.ButtonGroup();
        timeGroup = new javax.swing.ButtonGroup();
        outputGroup = new javax.swing.ButtonGroup();
        taxGroup2 = new javax.swing.ButtonGroup();
        aggregateGroup = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        btnPerformance = new javax.swing.ButtonGroup();
        reportPanel = new javax.swing.JPanel();
        btnExcelReport = new javax.swing.JButton();
        lblPeriod = new javax.swing.JLabel();
        cmbTargetPeriodStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        cmbTargetPeriodEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        rdoPoint = new javax.swing.JRadioButton();
        rdoPrepaid = new javax.swing.JRadioButton();
        lbtemp = new javax.swing.JLabel();

        setFocusCycleRoot(true);

        reportPanel.setOpaque(false);

        btnExcelReport.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnExcelReport.setBorderPainted(false);
        btnExcelReport.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnExcelReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelReportActionPerformed(evt);
            }
        });

        lblPeriod.setText("集計期間 ");
        lblPeriod.setFocusCycleRoot(true);

        cmbTargetPeriodStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodStartDate.setFocusCycleRoot(true);
        cmbTargetPeriodStartDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodStartDateFocusGained(evt);
            }
        });

        cmbTargetPeriodEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodEndDate.setFocusCycleRoot(true);
        cmbTargetPeriodEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodEndDateFocusGained(evt);
            }
        });

        buttonGroup3.add(rdoPoint);
        rdoPoint.setSelected(true);
        rdoPoint.setText("ポイント集計 ");
        rdoPoint.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoPoint.setContentAreaFilled(false);
        rdoPoint.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup3.add(rdoPrepaid);
        rdoPrepaid.setText("プリペイド残高 ");
        rdoPrepaid.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoPrepaid.setContentAreaFilled(false);
        rdoPrepaid.setMargin(new java.awt.Insets(0, 0, 0, 0));

        lbtemp.setText("〜");
        lbtemp.setFocusCycleRoot(true);

        org.jdesktop.layout.GroupLayout reportPanelLayout = new org.jdesktop.layout.GroupLayout(reportPanel);
        reportPanel.setLayout(reportPanelLayout);
        reportPanelLayout.setHorizontalGroup(
            reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(reportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(lblPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(reportPanelLayout.createSequentialGroup()
                        .add(cmbTargetPeriodStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lbtemp))
                    .add(rdoPoint))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cmbTargetPeriodEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoPrepaid, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(37, 37, 37)
                .add(btnExcelReport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
        );
        reportPanelLayout.setVerticalGroup(
            reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(reportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(rdoPoint)
                        .add(rdoPrepaid))
                    .add(btnExcelReport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbTargetPeriodEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(cmbTargetPeriodStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(reportPanelLayout.createSequentialGroup()
                        .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lbtemp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(reportPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(309, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(reportPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(349, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 期間で絞って詳細な売上のEXCELボタンを押下。
     *
     * @param evt
     */
    private void btnExcelReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelReportActionPerformed

        btnExcelReport.setCursor(null);

        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            ReportParameterBean paramBean = new ReportParameterBean();

            boolean logicResult = true;

            try {

                Calendar start = Calendar.getInstance();
                Calendar end = Calendar.getInstance();
                if (cmbTargetPeriodStartDate.getDate() == null) {
                    MessageDialog.showMessageDialog(this,
                            "期間が正しくありません",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (this.cmbTargetPeriodEndDate.getDate() == null) {
                    MessageDialog.showMessageDialog(this,
                            "期間が正しくありません",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                start.setTime(cmbTargetPeriodStartDate.getDate());
                end.setTime(this.cmbTargetPeriodEndDate.getDate());
                if (start.compareTo(end) != 0) {
                    if (start.after(end)) {
                        MessageDialog.showMessageDialog(this,
                                "期間が正しくありません",
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                start.setTime(this.cmbTargetPeriodStartDate.getDate());
                end.setTime(this.cmbTargetPeriodEndDate.getDate());

                paramBean.setTargetStartDate(this.cmbTargetPeriodStartDate.getDateStr());
                paramBean.setTargetEndDate(this.cmbTargetPeriodEndDate.getDateStr());

                Calendar cal = Calendar.getInstance();
                cal.setTime(cmbTargetPeriodStartDate.getDate());
                cal.set(Calendar.HOUR_OF_DAY, 0);
                cal.set(Calendar.MINUTE, 0);
                cal.set(Calendar.SECOND, 0);
                paramBean.setTargetStartDateObj(cal.getTime());

                cal.setTime(cmbTargetPeriodEndDate.getDate());
                cal.set(Calendar.HOUR_OF_DAY, 23);
                cal.set(Calendar.MINUTE, 59);
                cal.set(Calendar.SECOND, 59);
                paramBean.setTargetEndDateObj(cal.getTime());

                ConnectionWrapper con = SystemInfo.getConnection();
                ResultSetWrapper rs ;
                String fileName = "";
                int count = 0;
                
                if(rdoPoint.isSelected()) {
                    fileName = "ポイント集計表";
                    rs = con.executeQuery(getPointList(paramBean));
                }else {
                    fileName = "プリペイド残高";
                    rs = con.executeQuery(getPrepaidList(paramBean));
                }
                
                while (rs.next()) {
                    if(rdoPoint.isSelected()) {
                        if(rs.getInt("before_add_point") == 0 
                            && rs.getInt("before_use_point") == 0
                            && rs.getInt("add_point") == 0
                            &&rs.getInt("use_point") == 0
                            && rs.getInt("before_add_point_not_slip_no") == 0
                            &&rs.getInt("before_use_point_not_slip_no") == 0
                            ) {
                            continue;
                        }
                    }else {
                        if(rs.getInt("before_sales") == 0 
                            && rs.getInt("before_use") == 0
                            && rs.getInt("sales_value") == 0
                            &&rs.getInt("use_value") == 0
                            &&rs.getInt("before_sales_not_slip_no") == 0
                            &&rs.getInt("before_use_not_slip_no") == 0
                            ) {
                            continue;
                        }
                    }
                    count ++;
                }
                
                rs.last();
                
                rs.beforeFirst();
                if (count > 0) {

                    JExcelApi jx = new JExcelApi(fileName);
                    jx.setTemplateFile("/reports/"+ fileName +".xls");
                    //集計期間
                    jx.setValue(2, 3, String.format("%1$tY/%1$tm/%1$td", cmbTargetPeriodStartDate.getDate()) + " 〜 " + String.format("%1$tY/%1$tm/%1$td", cmbTargetPeriodEndDate.getDate()));
                    int row = 7;

//                    // 追加行数セット
                    if (count - 2 > 0) {
                        jx.insertRow(row, count - 2);
                    }
                    if (count == 1) {
                        jx.removeRow(row + 1);
                    }
//
                    while (rs.next()) {
                        if(rdoPoint.isSelected()) {
                            if(rs.getInt("before_add_point") == 0 
                                && rs.getInt("before_use_point") == 0
                                && rs.getInt("add_point") == 0
                                &&rs.getInt("use_point") == 0
                                && rs.getInt("before_add_point_not_slip_no") == 0
                                &&rs.getInt("before_use_point_not_slip_no") == 0
                                ) {
                                continue;
                            }
                            jx.setValue(1, row, rs.getString("customer_no"));
                            jx.setValue(2, row, rs.getString("customer_name"));
                            jx.setValue(3, row, rs.getInt("before_add_point") + rs.getInt("before_add_point_not_slip_no"));
                            jx.setValue(4, row, rs.getInt("before_use_point") + rs.getInt("before_use_point_not_slip_no"));
                            jx.setValue(6, row, rs.getInt("add_point"));
                            jx.setValue(7, row, rs.getInt("use_point"));
                        }else {
                            if(rs.getInt("before_sales") == 0 
                                && rs.getInt("before_use") == 0
                                && rs.getInt("sales_value") == 0
                                &&rs.getInt("use_value") == 0
                                &&rs.getInt("before_sales_not_slip_no") == 0
                                &&rs.getInt("before_use_not_slip_no") == 0
                                ) {
                                continue;
                            }
                            jx.setValue(1, row, rs.getString("customer_no"));
                            jx.setValue(2, row, rs.getString("customer_name"));
                            jx.setValue(3, row, rs.getInt("before_sales") + rs.getInt("before_sales_not_slip_no"));
                            jx.setValue(4, row, rs.getInt("before_use") + rs.getInt("before_use_not_slip_no"));
                            jx.setValue(6, row, rs.getInt("sales_value"));
                            jx.setValue(7, row, rs.getInt("use_value"));
                        }

                        row += 1;
                    }

                    jx.openWorkbook();

                } else {
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(4001),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }

            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(1099),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // エラー時
            if (!logicResult) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            }
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnExcelReportActionPerformed

    /*
    ポイント集計表
    */
    private String getPointList(ReportParameterBean paramBean) {
        StringBuffer sql = new StringBuffer(10000);
        sql.append("	SELECT mc.customer_id,\n");
        sql.append("		   mc.customer_no,\n");
        sql.append("		   coalesce(mc.customer_name1,'') || ' ' || coalesce(mc.customer_name2,'') AS customer_name,\n");
        sql.append("		   bf.before_add_point,\n");
        sql.append("		   bf.before_use_point,\n");
        sql.append("		   priod.add_point,\n");
        sql.append("		   priod.use_point,\n");
        sql.append("		   priod_no_slip.before_add_point_not_slip_no,\n");
        sql.append("		   priod_no_slip.before_use_point_not_slip_no\n");
        sql.append("	FROM mst_customer mc\n");
        sql.append("	LEFT JOIN\n");
        sql.append("	  (SELECT sum(pt.supplied_point) AS before_add_point,\n");
        sql.append("			  sum(pt.use_point) AS before_use_point,\n");
        sql.append("			  mc.customer_id\n");
        sql.append("	   FROM data_point pt\n");
        sql.append("	   INNER JOIN data_sales ds ON pt.slip_no = ds.slip_no\n");
        sql.append("	   AND pt.shop_id = ds.shop_id\n");
        sql.append("	   INNER JOIN mst_customer mc ON pt.customer_id = mc.customer_id\n");
        sql.append("	   WHERE ds.sales_date < " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + "\n");
        // 20170803 nami add start #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
        sql.append("            AND pt.delete_date IS NULL ");
        // 20170803 nami add end #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
        sql.append("	   GROUP BY mc.customer_id) AS bf ON mc.customer_id = bf.customer_id\n");
        sql.append("	LEFT JOIN\n");
        sql.append("	  (SELECT sum(pt.supplied_point) AS add_point,\n");
        sql.append("			  sum(pt.use_point) AS use_point,\n");
        sql.append("			  mc.customer_id\n");
        sql.append("	   FROM data_point pt\n");
        sql.append("	   INNER JOIN data_sales ds ON pt.slip_no = ds.slip_no\n");
        sql.append("	   AND pt.shop_id = ds.shop_id\n");
        sql.append("	   INNER JOIN mst_customer mc ON pt.customer_id = mc.customer_id\n");
        sql.append("	   WHERE ds.sales_date BETWEEN " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "\n");
        // 20170803 nami add start #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
        sql.append("            AND pt.delete_date IS NULL ");
        // 20170803 nami add end #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
        sql.append("	   GROUP BY mc.customer_id) AS priod ON mc.customer_id = priod.customer_id\n");
        sql.append("	LEFT JOIN\n");
        sql.append("	  (SELECT sum(pt.supplied_point) AS before_add_point_not_slip_no,\n");
        sql.append("			  sum(pt.use_point) AS before_use_point_not_slip_no,\n");
        sql.append("			  mc.customer_id\n");
        sql.append("	   FROM data_point pt\n");
        sql.append("	   INNER JOIN mst_customer mc ON pt.customer_id = mc.customer_id\n");
        sql.append("	   WHERE pt.slip_no is null \n");
        // 20170803 nami add start #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
        sql.append("            AND pt.delete_date IS NULL ");
        // 20170803 nami add end #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
        sql.append("	   GROUP BY mc.customer_id) AS priod_no_slip ON mc.customer_id = priod_no_slip.customer_id\n");
        sql.append("	WHERE EXISTS\n");
        sql.append("		(SELECT 1\n");
        sql.append("		 FROM data_point dp\n");
        sql.append("		 WHERE dp.customer_id = mc.customer_id\n");
        sql.append("		   AND dp.delete_date IS NULL )\n");
        sql.append("	  AND mc.delete_date IS NULL\n");
        sql.append("	  AND mc.customer_no <> '0'\n");
        sql.append("    ORDER BY mc.customer_id\n");

        return sql.toString();
    }
    
    /*
    プリペイド残高
    */
    private String getPrepaidList(ReportParameterBean paramBean) {
        StringBuffer sql = new StringBuffer(10000);
        sql.append("	SELECT mc.customer_id,\n");
        sql.append("		   mc.customer_no,\n");
        sql.append("		   coalesce(mc.customer_name1,'') || ' ' || coalesce(mc.customer_name2,'') AS customer_name ,\n");
        sql.append("		   bf.before_sales,\n");
        sql.append("		   bf.before_use,\n");
        sql.append("		   priod.sales_value,\n");
        sql.append("		   priod.use_value,\n");
        sql.append("               bf_no_slip.before_sales_not_slip_no,\n");
        sql.append("               bf_no_slip.before_use_not_slip_no\n");
        sql.append("	FROM mst_customer mc\n");
        sql.append("	LEFT JOIN\n");
        sql.append("	  (SELECT sum(pr.sales_value) AS before_sales,\n");
        sql.append("			  sum(pr.use_value) AS before_use,\n");
        sql.append("			  mc.customer_id\n");
        sql.append("	   FROM data_prepaid pr\n");
        sql.append("	   INNER JOIN data_sales ds ON pr.slip_no = ds.slip_no\n");
        sql.append("	   AND pr.shop_id = ds.shop_id\n");
        sql.append("	   INNER JOIN mst_customer mc ON pr.customer_id = mc.customer_id\n");
        sql.append("	   WHERE ds.sales_date < ").append(SQLUtil.convertForSQL(paramBean.getTargetStartDateObj())).append("\n");
        // 20170803 nami add start #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
        sql.append("            AND pr.delete_date IS NULL ");
        // 20170803 nami add end #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
        sql.append("	   GROUP BY mc.customer_id) AS bf ON mc.customer_id = bf.customer_id\n");
        sql.append("	LEFT JOIN\n");
        sql.append("	  (SELECT sum(pr.sales_value) AS sales_value,\n");
        sql.append("			  sum(pr.use_value) AS use_value,\n");
        sql.append("			  mc.customer_id\n");
        sql.append("	   FROM data_prepaid pr\n");
        sql.append("	   INNER JOIN data_sales ds ON pr.slip_no = ds.slip_no\n");
        sql.append("	   AND pr.shop_id = ds.shop_id\n");
        sql.append("	   INNER JOIN mst_customer mc ON pr.customer_id = mc.customer_id\n");
        sql.append("	   WHERE ds.sales_date BETWEEN ").append(SQLUtil.convertForSQL(paramBean.getTargetStartDateObj())).append(" and ").append(SQLUtil.convertForSQL(paramBean.getTargetEndDateObj())).append("\n");
        // 20170803 nami add start #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
        sql.append("            AND pr.delete_date IS NULL ");
        // 20170803 nami add end #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
        sql.append("	   GROUP BY mc.customer_id ) AS priod ON mc.customer_id = priod.customer_id\n");
        sql.append("	LEFT JOIN\n");
	sql.append("	     (SELECT sum(pr.sales_value) AS before_sales_not_slip_no,\n");
	sql.append("	   		  sum(pr.use_value) AS before_use_not_slip_no,\n");
	sql.append("	   		  mc.customer_id\n");
	sql.append("	      FROM data_prepaid pr\n");
	sql.append("	      INNER JOIN mst_customer mc ON pr.customer_id = mc.customer_id\n");
	sql.append("	      WHERE pr.slip_no is null\n");
        // 20170803 nami add start #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
        sql.append("            AND pr.delete_date IS NULL ");
        // 20170803 nami add end #20965 [GB内対応][gb] プリペイド残高 / ポイント集計表 削除したものも集計される
	sql.append("	      GROUP BY mc.customer_id) AS bf_no_slip ON mc.customer_id = bf_no_slip.customer_id\n");
        sql.append("	WHERE EXISTS\n");
        sql.append("		(SELECT 1\n");
        sql.append("		 FROM data_prepaid dp\n");
        sql.append("		 WHERE dp.customer_id = mc.customer_id\n");
        sql.append("		   AND dp.delete_date IS NULL)\n");
        sql.append("	  AND mc.delete_date IS NULL\n");
        sql.append("	  AND mc.customer_no <> '0'\n");
        sql.append("	ORDER BY mc.customer_id\n");

        return sql.toString();
    }
    
    private void cmbTargetPeriodEndDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodEndDateFocusGained
        cmbTargetPeriodEndDate.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_cmbTargetPeriodEndDateFocusGained

    private void cmbTargetPeriodStartDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodStartDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTargetPeriodStartDateFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup aggregateGroup;
    private javax.swing.ButtonGroup aggregationGroup;
    private javax.swing.JButton btnExcelReport;
    private javax.swing.ButtonGroup btnPerformance;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodEndDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodStartDate;
    private javax.swing.ButtonGroup countGroup;
    private javax.swing.ButtonGroup customerGroup;
    private javax.swing.JLabel lblPeriod;
    private javax.swing.JLabel lbtemp;
    private javax.swing.ButtonGroup outputGroup;
    private javax.swing.JRadioButton rdoPoint;
    private javax.swing.JRadioButton rdoPrepaid;
    private javax.swing.JPanel reportPanel;
    private javax.swing.ButtonGroup reportTypeGroup;
    private javax.swing.ButtonGroup taxGroup;
    private javax.swing.ButtonGroup taxGroup2;
    private javax.swing.ButtonGroup timeGroup;
    private javax.swing.ButtonGroup typeGroup;
    // End of variables declaration//GEN-END:variables

    private void writeExcelValue(JExcelApi jx, int col, int row, String value) throws SQLException {
        jx.setValue(col, row, value);
    }

    public CusContractHistoryReportFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    private class CusContractHistoryReportFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponentStaffShopRankingFocusTraversalPolicy。 aContainer は
         * aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (rdoPoint.isSelected()) {
                return rdoPrepaid;
            }else if (rdoPrepaid.isSelected()) {
                return cmbTargetPeriodStartDate;    
            } else if (aComponent.equals(cmbTargetPeriodStartDate)) {
                return cmbTargetPeriodEndDate;
            } else {
                return cmbTargetPeriodEndDate;
            }
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {

            return this.getStartComponent();
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。 このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer 先頭の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。 このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer aContainer - 最後の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer) {
            if (cmbTargetPeriodStartDate.isSelected()) {
                return cmbTargetPeriodStartDate;
            }
            return cmbTargetPeriodEndDate;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。 aContainer
         * をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         *
         * @param aContainer デフォルトの Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。 show() または setVisible(true)
         * の呼び出しで一度ウィンドウが表示されると、 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、 または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         *
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        public Component getInitialComponent(Window window) {
            return this.getStartComponent();
        }

        private Component getStartComponent() {
            if (rdoPoint.isSelected()) {
                return cmbTargetPeriodStartDate;
            }
            return rdoPoint;
        }
    }
}
