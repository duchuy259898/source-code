/*
 * CrossAnalysisPanel.java
 *
 * Created on 2008/07/20, 11:00
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.util.*;
import java.math.BigDecimal;
import javax.swing.*;
import javax.swing.text.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sql.ResultSetWrapper;

/**
 *
 * @author  ryugou
 */
public class CrossAnalysisPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
        /** Creates new form StaffShopRankingPanel */
	public CrossAnalysisPanel()
	{
		initComponents();
                addMouseCursorChange();
                this.setSize(820,680);
		this.setPath("帳票出力");
		this.setTitle("クロス分析");
		this.setKeyListener();
                
                this.initChargeStaff();
                
                //対象期間の設定
                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.MONTH, 1);
                cal.set(Calendar.DAY_OF_MONTH, 1);
                cal.add(Calendar.YEAR, -1);
		this.cmbTargetPeriodStartDate.setDate(cal.getTime());
                cal.add(Calendar.YEAR, 1);
                cal.add(Calendar.DAY_OF_MONTH, -1);
		this.cmbTargetPeriodEndDate.setDate(cal.getTime());
		
		// 顧客共有の有無によりグループ表示を切り替える
		if (SystemInfo.getSetteing().isShareCustomer())
		{
		    SystemInfo.initGroupShopComponents(shop1, 3);
		}
		else
		{
		    SystemInfo.initGroupShopComponents(shop1, 2);
		}
                
                //初期化処理
                this.init();
                
                this.setChkValidLabel();
                
                if (SystemInfo.getAccountSetting().getReportPriceType() == 0) {
                    rdoTaxBlank.setSelected(false);
                    rdoTaxUnit.setSelected(true);
                } else {
                    rdoTaxBlank.setSelected(true);
                    rdoTaxUnit.setSelected(false);
                }
                
	}
        
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
            SystemInfo.addMouseCursorChange(setPeriodButton);
            SystemInfo.addMouseCursorChange(searchButton);
            SystemInfo.addMouseCursorChange(f3m3);
            SystemInfo.addMouseCursorChange(f3m2);
            SystemInfo.addMouseCursorChange(f3m1);
            SystemInfo.addMouseCursorChange(f2m3);
            SystemInfo.addMouseCursorChange(f2m2);
            SystemInfo.addMouseCursorChange(f2m1);
            SystemInfo.addMouseCursorChange(f1m3);
            SystemInfo.addMouseCursorChange(f1m2);
            SystemInfo.addMouseCursorChange(f1m1);            
	}
        
	/**
	 * 主担当を取得する
	 */
	private void initChargeStaff()
	{
	    chargeStaff.removeAllItems();

	    MstStaffs staffs = new MstStaffs();

	    staffs.setShopIDList(SystemInfo.getCurrentShop().getShopID().toString());

	    try
	    {
		staffs.load(SystemInfo.getConnection(), true);
	    }
	    catch(java.sql.SQLException e)
	    {
		//SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }

	    for (MstStaff ms : staffs) {
		chargeStaff.addItem(ms);
	    }

	    chargeStaff.setSelectedIndex(0);
	}	
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        taxGroup = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        shopLabel = new javax.swing.JLabel();
        shop1 = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        chargeStaffLabel = new javax.swing.JLabel();
        chargeStaffNo = new javax.swing.JTextField();
        chargeStaff = new javax.swing.JComboBox();
        lblTargetPeriod = new javax.swing.JLabel();
        cmbTargetPeriodStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        cmbTargetPeriodEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        isPastTotal = new javax.swing.JCheckBox();
        lblTargetPeriod2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblTax = new javax.swing.JLabel();
        rdoTaxUnit = new javax.swing.JRadioButton();
        rdoTaxBlank = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        chkValid1 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        lblTax9 = new javax.swing.JLabel();
        price3From = new javax.swing.JTextField();
        ((PlainDocument)price3From.getDocument()).setDocumentFilter(new CustomFilter(8, CustomFilter.NUMERIC));
        lblTax10 = new javax.swing.JLabel();
        lblTax11 = new javax.swing.JLabel();
        price2From = new javax.swing.JTextField();
        ((PlainDocument)price2From.getDocument()).setDocumentFilter(new CustomFilter(8, CustomFilter.NUMERIC));
        lblTax12 = new javax.swing.JLabel();
        price2To = new javax.swing.JTextField();
        lblTax13 = new javax.swing.JLabel();
        lblTax14 = new javax.swing.JLabel();
        price1From = new javax.swing.JTextField();
        ((PlainDocument)price1From.getDocument()).setDocumentFilter(new CustomFilter(8, CustomFilter.NUMERIC));
        lblTax15 = new javax.swing.JLabel();
        price1To = new javax.swing.JTextField();
        lblTax16 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblTax1 = new javax.swing.JLabel();
        count3From = new javax.swing.JTextField();
        ((PlainDocument)count3From.getDocument()).setDocumentFilter(new CustomFilter(4, CustomFilter.NUMERIC));
        lblTax2 = new javax.swing.JLabel();
        lblTax3 = new javax.swing.JLabel();
        count2From = new javax.swing.JTextField();
        ((PlainDocument)count2From.getDocument()).setDocumentFilter(new CustomFilter(4, CustomFilter.NUMERIC));
        count2To = new javax.swing.JTextField();
        lblTax4 = new javax.swing.JLabel();
        lblTax5 = new javax.swing.JLabel();
        lblTax6 = new javax.swing.JLabel();
        count1From = new javax.swing.JTextField();
        ((PlainDocument)count1From.getDocument()).setDocumentFilter(new CustomFilter(4, CustomFilter.NUMERIC));
        lblTax7 = new javax.swing.JLabel();
        count1To = new javax.swing.JTextField();
        lblTax8 = new javax.swing.JLabel();
        lblTax23 = new javax.swing.JLabel();
        lblTax24 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        chkValid2 = new javax.swing.JCheckBox();
        chkValid3 = new javax.swing.JCheckBox();
        setPeriodButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        lblTax18 = new javax.swing.JLabel();
        lblTax27 = new javax.swing.JLabel();
        lblTax22 = new javax.swing.JLabel();
        lblTax28 = new javax.swing.JLabel();
        lblTax25 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        lblTax17 = new javax.swing.JLabel();
        lblTax19 = new javax.swing.JLabel();
        lblTax20 = new javax.swing.JLabel();
        f2m3Panel = new javax.swing.JPanel();
        f2m3 = new javax.swing.JTextField();
        f2m3Label = new javax.swing.JTextField();
        f2m3Ratio = new javax.swing.JTextField();
        f1m3Panel = new javax.swing.JPanel();
        f1m3 = new javax.swing.JTextField();
        f1m3Label = new javax.swing.JTextField();
        f1m3Ratio = new javax.swing.JTextField();
        f2m2Panel = new javax.swing.JPanel();
        f2m2 = new javax.swing.JTextField();
        f2m2Label = new javax.swing.JTextField();
        f2m2Ratio = new javax.swing.JTextField();
        f3m2Panel = new javax.swing.JPanel();
        f3m2 = new javax.swing.JTextField();
        f3m2Label = new javax.swing.JTextField();
        f3m2Ratio = new javax.swing.JTextField();
        f1m2Panel = new javax.swing.JPanel();
        f1m2 = new javax.swing.JTextField();
        f1m2Label = new javax.swing.JTextField();
        f1m2Ratio = new javax.swing.JTextField();
        f2m1Panel = new javax.swing.JPanel();
        f2m1 = new javax.swing.JTextField();
        f2m1Label = new javax.swing.JTextField();
        f2m1Ratio = new javax.swing.JTextField();
        f3m1Panel = new javax.swing.JPanel();
        f3m1 = new javax.swing.JTextField();
        f3m1Label = new javax.swing.JTextField();
        f3m1Ratio = new javax.swing.JTextField();
        lblTax21 = new javax.swing.JLabel();
        f1m1Panel = new javax.swing.JPanel();
        f1m1 = new javax.swing.JTextField();
        f1m1Label = new javax.swing.JTextField();
        f1m1Ratio = new javax.swing.JTextField();
        lblTax26 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        hint = new javax.swing.JTextArea();
        f3m3Panel = new javax.swing.JPanel();
        f3m3 = new javax.swing.JTextField();
        f3m3Label = new javax.swing.JTextField();
        f3m3Ratio = new javax.swing.JTextField();

        setFocusCycleRoot(true);
        setOpaque(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        pnlMain.setOpaque(false);
        pnlMain.setLayout(null);

        shopLabel.setText("店舗");
        pnlMain.add(shopLabel);
        shopLabel.setBounds(10, 10, 60, 22);

        shop1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shop1ActionPerformed(evt);
            }
        });
        pnlMain.add(shop1);
        shop1.setBounds(80, 10, 223, 22);

        chargeStaffLabel.setText("主担当者");
        pnlMain.add(chargeStaffLabel);
        chargeStaffLabel.setBounds(10, 40, 60, 25);

        chargeStaffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        chargeStaffNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                chargeStaffNoFocusLost(evt);
            }
        });
        pnlMain.add(chargeStaffNo);
        chargeStaffNo.setBounds(80, 40, 40, 25);

        chargeStaff.setMaximumRowCount(12);
        chargeStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        chargeStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargeStaffActionPerformed(evt);
            }
        });
        pnlMain.add(chargeStaff);
        chargeStaff.setBounds(125, 40, 150, 24);

        lblTargetPeriod.setText("対象期間");
        lblTargetPeriod.setFocusCycleRoot(true);
        pnlMain.add(lblTargetPeriod);
        lblTargetPeriod.setBounds(10, 70, 60, 21);

        cmbTargetPeriodStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodStartDate.setFocusCycleRoot(true);
        cmbTargetPeriodStartDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodStartDateFocusGained(evt);
            }
        });
        pnlMain.add(cmbTargetPeriodStartDate);
        cmbTargetPeriodStartDate.setBounds(80, 70, 90, 23);

        cmbTargetPeriodEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodEndDate.setFocusCycleRoot(true);
        cmbTargetPeriodEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodEndDateFocusGained(evt);
            }
        });
        pnlMain.add(cmbTargetPeriodEndDate);
        cmbTargetPeriodEndDate.setBounds(190, 70, 90, 23);

        isPastTotal.setText("過去累積含む");
        isPastTotal.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        isPastTotal.setMargin(new java.awt.Insets(0, 0, 0, 0));
        isPastTotal.setOpaque(false);
        pnlMain.add(isPastTotal);
        isPastTotal.setBounds(300, 70, 100, 23);

        lblTargetPeriod2.setText("（対象期間内に来店し、かつ過去累積の来店回数と売上金額で分析する場合にチェックしてください）");
        lblTargetPeriod2.setFocusCycleRoot(true);
        pnlMain.add(lblTargetPeriod2);
        lblTargetPeriod2.setBounds(300, 90, 490, 20);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("〜");
        jLabel1.setFocusCycleRoot(true);
        pnlMain.add(jLabel1);
        jLabel1.setBounds(170, 70, 20, 21);

        lblTax.setText("税区分");
        lblTax.setFocusCycleRoot(true);
        pnlMain.add(lblTax);
        lblTax.setBounds(10, 100, 60, 20);

        taxGroup.add(rdoTaxUnit);
        rdoTaxUnit.setSelected(true);
        rdoTaxUnit.setText("税込");
        rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxUnit.setFocusCycleRoot(true);
        rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxUnit.setOpaque(false);
        pnlMain.add(rdoTaxUnit);
        rdoTaxUnit.setBounds(80, 100, 41, 20);

        taxGroup.add(rdoTaxBlank);
        rdoTaxBlank.setText("税抜");
        rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxBlank.setFocusCycleRoot(true);
        rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxBlank.setOpaque(false);
        pnlMain.add(rdoTaxBlank);
        rdoTaxBlank.setBounds(140, 100, 41, 20);

        jLabel2.setText("対象顧客");
        pnlMain.add(jLabel2);
        jLabel2.setBounds(10, 130, 60, 20);

        chkValid1.setSelected(true);
        chkValid1.setText("稼働客（4ヶ月以内）");
        chkValid1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkValid1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkValid1.setOpaque(false);
        pnlMain.add(chkValid1);
        chkValid1.setBounds(80, 130, 130, 20);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "＜売上金額設定＞", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS UI Gothic", 0, 12), new java.awt.Color(51, 51, 51))); // NOI18N
        jPanel4.setOpaque(false);

        lblTax9.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
        lblTax9.setText("ランク３");
        lblTax9.setFocusCycleRoot(true);

        price3From.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 14));
        price3From.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        price3From.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        price3From.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                price3FromFocusLost(evt);
            }
        });

        lblTax10.setText("円以上");
        lblTax10.setFocusCycleRoot(true);

        lblTax11.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
        lblTax11.setText("ランク２");
        lblTax11.setFocusCycleRoot(true);

        price2From.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 14));
        price2From.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        price2From.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        price2From.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                price2FromFocusLost(evt);
            }
        });

        lblTax12.setText("円 〜");
        lblTax12.setFocusCycleRoot(true);

        price2To.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 14));
        price2To.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        price2To.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        price2To.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        price2To.setEnabled(false);

        lblTax13.setText("円");
        lblTax13.setFocusCycleRoot(true);

        lblTax14.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
        lblTax14.setText("ランク１");
        lblTax14.setFocusCycleRoot(true);

        price1From.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 14));
        price1From.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        price1From.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        price1From.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        price1From.setEnabled(false);

        lblTax15.setText("円 〜");
        lblTax15.setFocusCycleRoot(true);

        price1To.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 14));
        price1To.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        price1To.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        price1To.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        price1To.setEnabled(false);

        lblTax16.setText("円");
        lblTax16.setFocusCycleRoot(true);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(lblTax9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(price3From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblTax10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(lblTax14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblTax11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(price1From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lblTax15)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(price1To, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lblTax16))
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(price2From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lblTax12)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(price2To, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lblTax13)))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(price3From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(price2From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(price2To, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(price1From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(price1To, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        pnlMain.add(jPanel4);
        jPanel4.setBounds(350, 160, 260, 105);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "＜来店回数設定＞", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS UI Gothic", 0, 12), new java.awt.Color(51, 51, 51))); // NOI18N
        jPanel3.setOpaque(false);

        lblTax1.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
        lblTax1.setText("ランク３");
        lblTax1.setFocusCycleRoot(true);

        count3From.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 14));
        count3From.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        count3From.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        count3From.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                count3FromFocusLost(evt);
            }
        });

        lblTax2.setText("回以上");
        lblTax2.setFocusCycleRoot(true);

        lblTax3.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
        lblTax3.setText("ランク２");
        lblTax3.setFocusCycleRoot(true);

        count2From.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 14));
        count2From.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        count2From.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        count2From.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                count2FromFocusLost(evt);
            }
        });

        count2To.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 14));
        count2To.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        count2To.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        count2To.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        count2To.setEnabled(false);

        lblTax4.setText("回 〜");
        lblTax4.setFocusCycleRoot(true);

        lblTax5.setText("回");
        lblTax5.setFocusCycleRoot(true);

        lblTax6.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
        lblTax6.setText("ランク１");
        lblTax6.setFocusCycleRoot(true);

        count1From.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 14));
        count1From.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        count1From.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        count1From.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        count1From.setEnabled(false);

        lblTax7.setText("回 〜");
        lblTax7.setFocusCycleRoot(true);

        count1To.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 14));
        count1To.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        count1To.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        count1To.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        count1To.setEnabled(false);

        lblTax8.setText("回");
        lblTax8.setFocusCycleRoot(true);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblTax1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, 0)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(count1From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblTax7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(count1To, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblTax8))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(count3From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblTax2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(count2From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblTax4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(count2To, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblTax5)))
                .add(83, 83, 83))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTax1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(count3From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTax3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(count2From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(count2To, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTax6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(count1From, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(count1To, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlMain.add(jPanel3);
        jPanel3.setBounds(80, 160, 250, 105);

        lblTax23.setText("※ 期間内の来店回数を基準で設定してください。");
        lblTax23.setFocusCycleRoot(true);
        pnlMain.add(lblTax23);
        lblTax23.setBounds(90, 270, 250, 20);

        lblTax24.setText("<html>\n※ 期間内の累計売上金額を基準で設定してください。<br>\n（目安としては、平均客単価×来店回数で[来店回数設定]と同じ基準にしてください）\n</html>");
        lblTax24.setFocusCycleRoot(true);
        pnlMain.add(lblTax24);
        lblTax24.setBounds(360, 270, 420, 30);

        searchButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
        searchButton.setBorderPainted(false);
        searchButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        pnlMain.add(searchButton);
        searchButton.setBounds(670, 240, 92, 25);

        chkValid2.setSelected(true);
        chkValid2.setText("現役客（4〜6ヶ月）");
        chkValid2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkValid2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkValid2.setOpaque(false);
        pnlMain.add(chkValid2);
        chkValid2.setBounds(210, 130, 130, 20);

        chkValid3.setSelected(true);
        chkValid3.setText("離店客（6ヶ月以上）");
        chkValid3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkValid3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkValid3.setOpaque(false);
        pnlMain.add(chkValid3);
        chkValid3.setBounds(340, 130, 130, 20);

        setPeriodButton.setIcon(SystemInfo.getImageIcon("/button/common/period_set_off.jpg"));
        setPeriodButton.setBorderPainted(false);
        setPeriodButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/period_set_on.jpg"));
        setPeriodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPeriodButtonActionPerformed(evt);
            }
        });
        pnlMain.add(setPeriodButton);
        setPeriodButton.setBounds(480, 127, 92, 25);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);

        jPanel13.setBackground(new java.awt.Color(49, 65, 77));
        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblTax18.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        lblTax18.setForeground(new java.awt.Color(255, 255, 255));
        lblTax18.setText("<html>来<br>店<br>回<br>数<br><br>(F)</html>");
        lblTax18.setFocusCycleRoot(true);

        org.jdesktop.layout.GroupLayout jPanel13Layout = new org.jdesktop.layout.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .add(lblTax18)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel13Layout.createSequentialGroup()
                .add(51, 51, 51)
                .add(lblTax18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 215, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel13);
        jPanel13.setBounds(10, 60, 40, 300);

        lblTax27.setBackground(new java.awt.Color(49, 65, 77));
        lblTax27.setFont(new java.awt.Font("MS UI Gothic", 1, 14));
        lblTax27.setForeground(new java.awt.Color(255, 255, 255));
        lblTax27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTax27.setText("１");
        lblTax27.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblTax27.setFocusCycleRoot(true);
        lblTax27.setOpaque(true);
        jPanel1.add(lblTax27);
        lblTax27.setBounds(50, 260, 40, 100);

        lblTax22.setBackground(new java.awt.Color(49, 65, 77));
        lblTax22.setFont(new java.awt.Font("MS UI Gothic", 1, 14));
        lblTax22.setForeground(new java.awt.Color(255, 255, 255));
        lblTax22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTax22.setText("３");
        lblTax22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblTax22.setFocusCycleRoot(true);
        lblTax22.setOpaque(true);
        jPanel1.add(lblTax22);
        lblTax22.setBounds(50, 60, 40, 100);

        lblTax28.setBackground(new java.awt.Color(49, 65, 77));
        lblTax28.setFont(new java.awt.Font("MS UI Gothic", 1, 14));
        lblTax28.setForeground(new java.awt.Color(255, 255, 255));
        lblTax28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTax28.setText("２");
        lblTax28.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblTax28.setFocusCycleRoot(true);
        lblTax28.setOpaque(true);
        jPanel1.add(lblTax28);
        lblTax28.setBounds(50, 160, 40, 100);

        lblTax25.setBackground(new java.awt.Color(49, 65, 77));
        lblTax25.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        lblTax25.setForeground(new java.awt.Color(255, 255, 255));
        lblTax25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTax25.setText("ランク");
        lblTax25.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblTax25.setFocusCycleRoot(true);
        lblTax25.setOpaque(true);
        jPanel1.add(lblTax25);
        lblTax25.setBounds(10, 0, 80, 60);

        jPanel12.setBackground(new java.awt.Color(49, 65, 77));
        jPanel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblTax17.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        lblTax17.setForeground(new java.awt.Color(255, 255, 255));
        lblTax17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTax17.setText("売上金額　(M)");
        lblTax17.setFocusCycleRoot(true);

        org.jdesktop.layout.GroupLayout jPanel12Layout = new org.jdesktop.layout.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel12Layout.createSequentialGroup()
                .add(75, 75, 75)
                .add(lblTax17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 299, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, lblTax17, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel12);
        jPanel12.setBounds(90, 0, 450, 30);

        lblTax19.setBackground(new java.awt.Color(49, 65, 77));
        lblTax19.setFont(new java.awt.Font("MS UI Gothic", 1, 14));
        lblTax19.setForeground(new java.awt.Color(255, 255, 255));
        lblTax19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTax19.setText("３");
        lblTax19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblTax19.setFocusCycleRoot(true);
        lblTax19.setOpaque(true);
        jPanel1.add(lblTax19);
        lblTax19.setBounds(90, 30, 150, 30);

        lblTax20.setBackground(new java.awt.Color(49, 65, 77));
        lblTax20.setFont(new java.awt.Font("MS UI Gothic", 1, 14));
        lblTax20.setForeground(new java.awt.Color(255, 255, 255));
        lblTax20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTax20.setText("２");
        lblTax20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblTax20.setFocusCycleRoot(true);
        lblTax20.setOpaque(true);
        jPanel1.add(lblTax20);
        lblTax20.setBounds(240, 30, 150, 30);

        f2m3Panel.setBackground(new java.awt.Color(255, 204, 51));
        f2m3Panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        f2m3Panel.setName("f2m3"); // NOI18N

        f2m3.setEditable(false);
        f2m3.setFont(new java.awt.Font("MS UI Gothic", 0, 30));
        f2m3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f2m3.setText("0人");
        f2m3.setBorder(null);
        f2m3.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f2m3.setName("f2m3"); // NOI18N
        f2m3.setOpaque(false);

        f2m3Label.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f2m3Label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f2m3Label.setText("↑[ ゴールド客 ]");
        f2m3Label.setBorder(null);
        f2m3Label.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f2m3Label.setEnabled(false);
        f2m3Label.setName("f2m3"); // NOI18N
        f2m3Label.setOpaque(false);

        f2m3Ratio.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f2m3Ratio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f2m3Ratio.setText("0%");
        f2m3Ratio.setBorder(null);
        f2m3Ratio.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f2m3Ratio.setEnabled(false);
        f2m3Ratio.setName("f2m3"); // NOI18N
        f2m3Ratio.setOpaque(false);

        org.jdesktop.layout.GroupLayout f2m3PanelLayout = new org.jdesktop.layout.GroupLayout(f2m3Panel);
        f2m3Panel.setLayout(f2m3PanelLayout);
        f2m3PanelLayout.setHorizontalGroup(
            f2m3PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, f2m3PanelLayout.createSequentialGroup()
                .add(f2m3PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f2m3PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(f2m3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f2m3PanelLayout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(f2m3Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(f2m3PanelLayout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(f2m3Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        f2m3PanelLayout.setVerticalGroup(
            f2m3PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(f2m3PanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(f2m3Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f2m3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f2m3Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(f2m3Panel);
        f2m3Panel.setBounds(90, 160, 150, 100);

        f1m3Panel.setBackground(new java.awt.Color(204, 255, 204));
        f1m3Panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        f1m3Panel.setName("f1m3"); // NOI18N

        f1m3.setEditable(false);
        f1m3.setFont(new java.awt.Font("MS UI Gothic", 0, 30));
        f1m3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f1m3.setText("0人");
        f1m3.setBorder(null);
        f1m3.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f1m3.setName("f1m3"); // NOI18N
        f1m3.setOpaque(false);

        f1m3Label.setFont(new java.awt.Font("MS UI Gothic", 0, 15));
        f1m3Label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f1m3Label.setText("[ 新規含む一般客 ]");
        f1m3Label.setBorder(null);
        f1m3Label.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f1m3Label.setEnabled(false);
        f1m3Label.setName("f1m3"); // NOI18N
        f1m3Label.setOpaque(false);

        f1m3Ratio.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f1m3Ratio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f1m3Ratio.setText("0%");
        f1m3Ratio.setBorder(null);
        f1m3Ratio.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f1m3Ratio.setEnabled(false);
        f1m3Ratio.setName("f1m3"); // NOI18N
        f1m3Ratio.setOpaque(false);

        org.jdesktop.layout.GroupLayout f1m3PanelLayout = new org.jdesktop.layout.GroupLayout(f1m3Panel);
        f1m3Panel.setLayout(f1m3PanelLayout);
        f1m3PanelLayout.setHorizontalGroup(
            f1m3PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(f1m3PanelLayout.createSequentialGroup()
                .add(f1m3PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(f1m3PanelLayout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(f1m3Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(f1m3PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(f1m3PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(f1m3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .add(f1m3Ratio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))))
                .addContainerGap())
        );
        f1m3PanelLayout.setVerticalGroup(
            f1m3PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(f1m3PanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(f1m3Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f1m3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f1m3Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(f1m3Panel);
        f1m3Panel.setBounds(90, 260, 150, 100);

        f2m2Panel.setBackground(new java.awt.Color(153, 153, 153));
        f2m2Panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        f2m2Panel.setName("f2m2"); // NOI18N

        f2m2.setEditable(false);
        f2m2.setFont(new java.awt.Font("MS UI Gothic", 0, 30));
        f2m2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f2m2.setText("0人");
        f2m2.setBorder(null);
        f2m2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f2m2.setName("f2m2"); // NOI18N
        f2m2.setOpaque(false);

        f2m2Label.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f2m2Label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f2m2Label.setText("↑[シルバー客]←");
        f2m2Label.setBorder(null);
        f2m2Label.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f2m2Label.setEnabled(false);
        f2m2Label.setName("f2m2"); // NOI18N
        f2m2Label.setOpaque(false);

        f2m2Ratio.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f2m2Ratio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f2m2Ratio.setText("0%");
        f2m2Ratio.setBorder(null);
        f2m2Ratio.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f2m2Ratio.setEnabled(false);
        f2m2Ratio.setName("f2m2"); // NOI18N
        f2m2Ratio.setOpaque(false);

        org.jdesktop.layout.GroupLayout f2m2PanelLayout = new org.jdesktop.layout.GroupLayout(f2m2Panel);
        f2m2Panel.setLayout(f2m2PanelLayout);
        f2m2PanelLayout.setHorizontalGroup(
            f2m2PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, f2m2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(f2m2PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f2m2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .add(f2m2Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f2m2Ratio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                .addContainerGap())
        );
        f2m2PanelLayout.setVerticalGroup(
            f2m2PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(f2m2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(f2m2Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f2m2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f2m2Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(f2m2Panel);
        f2m2Panel.setBounds(240, 160, 150, 100);

        f3m2Panel.setBackground(new java.awt.Color(255, 204, 51));
        f3m2Panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        f3m2Panel.setName("f3m2"); // NOI18N

        f3m2.setEditable(false);
        f3m2.setFont(new java.awt.Font("MS UI Gothic", 0, 30));
        f3m2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f3m2.setText("0人");
        f3m2.setBorder(null);
        f3m2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f3m2.setName("f3m2"); // NOI18N
        f3m2.setOpaque(false);

        f3m2Label.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f3m2Label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f3m2Label.setText("←[ ゴールド客 ]");
        f3m2Label.setBorder(null);
        f3m2Label.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f3m2Label.setEnabled(false);
        f3m2Label.setName("f3m2"); // NOI18N
        f3m2Label.setOpaque(false);

        f3m2Ratio.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f3m2Ratio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f3m2Ratio.setText("0%");
        f3m2Ratio.setBorder(null);
        f3m2Ratio.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f3m2Ratio.setEnabled(false);
        f3m2Ratio.setName("f3m2"); // NOI18N
        f3m2Ratio.setOpaque(false);

        org.jdesktop.layout.GroupLayout f3m2PanelLayout = new org.jdesktop.layout.GroupLayout(f3m2Panel);
        f3m2Panel.setLayout(f3m2PanelLayout);
        f3m2PanelLayout.setHorizontalGroup(
            f3m2PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, f3m2PanelLayout.createSequentialGroup()
                .add(f3m2PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f3m2PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(f3m2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f3m2PanelLayout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(f3m2Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(f3m2PanelLayout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(f3m2Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        f3m2PanelLayout.setVerticalGroup(
            f3m2PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(f3m2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(f3m2Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f3m2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f3m2Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(f3m2Panel);
        f3m2Panel.setBounds(240, 60, 150, 100);

        f1m2Panel.setBackground(new java.awt.Color(204, 255, 204));
        f1m2Panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        f1m2Panel.setName("f1m2"); // NOI18N

        f1m2.setEditable(false);
        f1m2.setFont(new java.awt.Font("MS UI Gothic", 0, 30));
        f1m2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f1m2.setText("0人");
        f1m2.setBorder(null);
        f1m2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f1m2.setName("f1m2"); // NOI18N
        f1m2.setOpaque(false);

        f1m2Label.setFont(new java.awt.Font("MS UI Gothic", 0, 15));
        f1m2Label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f1m2Label.setText("[ 新規含む一般客 ]");
        f1m2Label.setBorder(null);
        f1m2Label.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f1m2Label.setEnabled(false);
        f1m2Label.setName("f1m2"); // NOI18N
        f1m2Label.setOpaque(false);

        f1m2Ratio.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f1m2Ratio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f1m2Ratio.setText("0%");
        f1m2Ratio.setBorder(null);
        f1m2Ratio.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f1m2Ratio.setEnabled(false);
        f1m2Ratio.setName("f1m2"); // NOI18N
        f1m2Ratio.setOpaque(false);

        org.jdesktop.layout.GroupLayout f1m2PanelLayout = new org.jdesktop.layout.GroupLayout(f1m2Panel);
        f1m2Panel.setLayout(f1m2PanelLayout);
        f1m2PanelLayout.setHorizontalGroup(
            f1m2PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, f1m2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(f1m2PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f1m2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f1m2Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f1m2Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        f1m2PanelLayout.setVerticalGroup(
            f1m2PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(f1m2PanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(f1m2Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f1m2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f1m2Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(f1m2Panel);
        f1m2Panel.setBounds(240, 260, 150, 100);

        f2m1Panel.setBackground(new java.awt.Color(204, 255, 255));
        f2m1Panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        f2m1Panel.setName("f2m1"); // NOI18N

        f2m1.setEditable(false);
        f2m1.setFont(new java.awt.Font("MS UI Gothic", 0, 30));
        f2m1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f2m1.setText("0人");
        f2m1.setBorder(null);
        f2m1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f2m1.setName("f2m1"); // NOI18N
        f2m1.setOpaque(false);

        f2m1Label.setFont(new java.awt.Font("MS UI Gothic", 0, 15));
        f2m1Label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f2m1Label.setText("[ 一般客 ]");
        f2m1Label.setBorder(null);
        f2m1Label.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f2m1Label.setEnabled(false);
        f2m1Label.setName("f2m1"); // NOI18N
        f2m1Label.setOpaque(false);

        f2m1Ratio.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f2m1Ratio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f2m1Ratio.setText("0%");
        f2m1Ratio.setBorder(null);
        f2m1Ratio.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f2m1Ratio.setEnabled(false);
        f2m1Ratio.setName("f2m1"); // NOI18N
        f2m1Ratio.setOpaque(false);

        org.jdesktop.layout.GroupLayout f2m1PanelLayout = new org.jdesktop.layout.GroupLayout(f2m1Panel);
        f2m1Panel.setLayout(f2m1PanelLayout);
        f2m1PanelLayout.setHorizontalGroup(
            f2m1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, f2m1PanelLayout.createSequentialGroup()
                .add(f2m1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f2m1PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(f2m1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f2m1PanelLayout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(f2m1Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f2m1PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(f2m1Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        f2m1PanelLayout.setVerticalGroup(
            f2m1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(f2m1PanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(f2m1Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f2m1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f2m1Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(f2m1Panel);
        f2m1Panel.setBounds(390, 160, 150, 100);

        f3m1Panel.setBackground(new java.awt.Color(204, 255, 255));
        f3m1Panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        f3m1Panel.setName("f3m1"); // NOI18N

        f3m1.setEditable(false);
        f3m1.setFont(new java.awt.Font("MS UI Gothic", 0, 30));
        f3m1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f3m1.setText("0人");
        f3m1.setBorder(null);
        f3m1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f3m1.setName("f3m1"); // NOI18N
        f3m1.setOpaque(false);

        f3m1Label.setFont(new java.awt.Font("MS UI Gothic", 0, 15));
        f3m1Label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f3m1Label.setText("[ 一般客 ]");
        f3m1Label.setBorder(null);
        f3m1Label.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f3m1Label.setEnabled(false);
        f3m1Label.setName("f3m1"); // NOI18N
        f3m1Label.setOpaque(false);

        f3m1Ratio.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f3m1Ratio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f3m1Ratio.setText("0%");
        f3m1Ratio.setBorder(null);
        f3m1Ratio.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f3m1Ratio.setEnabled(false);
        f3m1Ratio.setName("f3m1"); // NOI18N
        f3m1Ratio.setOpaque(false);

        org.jdesktop.layout.GroupLayout f3m1PanelLayout = new org.jdesktop.layout.GroupLayout(f3m1Panel);
        f3m1Panel.setLayout(f3m1PanelLayout);
        f3m1PanelLayout.setHorizontalGroup(
            f3m1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, f3m1PanelLayout.createSequentialGroup()
                .add(f3m1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f3m1PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(f3m1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f3m1PanelLayout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(f3m1Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f3m1PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(f3m1Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        f3m1PanelLayout.setVerticalGroup(
            f3m1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(f3m1PanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(f3m1Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f3m1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f3m1Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(f3m1Panel);
        f3m1Panel.setBounds(390, 60, 150, 100);

        lblTax21.setBackground(new java.awt.Color(49, 65, 77));
        lblTax21.setFont(new java.awt.Font("MS UI Gothic", 1, 14));
        lblTax21.setForeground(new java.awt.Color(255, 255, 255));
        lblTax21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTax21.setText("１");
        lblTax21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblTax21.setFocusCycleRoot(true);
        lblTax21.setOpaque(true);
        jPanel1.add(lblTax21);
        lblTax21.setBounds(390, 30, 150, 30);

        f1m1Panel.setBackground(new java.awt.Color(204, 255, 204));
        f1m1Panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        f1m1Panel.setName("f1m1"); // NOI18N

        f1m1.setEditable(false);
        f1m1.setFont(new java.awt.Font("MS UI Gothic", 0, 30));
        f1m1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f1m1.setText("0人");
        f1m1.setBorder(null);
        f1m1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f1m1.setName("f1m1"); // NOI18N
        f1m1.setOpaque(false);

        f1m1Label.setFont(new java.awt.Font("MS UI Gothic", 0, 15));
        f1m1Label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f1m1Label.setText("[ 新規含む一般客 ]");
        f1m1Label.setBorder(null);
        f1m1Label.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f1m1Label.setEnabled(false);
        f1m1Label.setName("f1m1"); // NOI18N
        f1m1Label.setOpaque(false);

        f1m1Ratio.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f1m1Ratio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f1m1Ratio.setText("0%");
        f1m1Ratio.setBorder(null);
        f1m1Ratio.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f1m1Ratio.setEnabled(false);
        f1m1Ratio.setName("f1m1"); // NOI18N
        f1m1Ratio.setOpaque(false);

        org.jdesktop.layout.GroupLayout f1m1PanelLayout = new org.jdesktop.layout.GroupLayout(f1m1Panel);
        f1m1Panel.setLayout(f1m1PanelLayout);
        f1m1PanelLayout.setHorizontalGroup(
            f1m1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, f1m1PanelLayout.createSequentialGroup()
                .add(f1m1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f1m1PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(f1m1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f1m1PanelLayout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(f1m1Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(f1m1PanelLayout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(f1m1Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        f1m1PanelLayout.setVerticalGroup(
            f1m1PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(f1m1PanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(f1m1Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f1m1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f1m1Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(f1m1Panel);
        f1m1Panel.setBounds(390, 260, 150, 100);

        lblTax26.setFont(new java.awt.Font("MS UI Gothic", 0, 16));
        lblTax26.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTax26.setText(" ［ヒント］");
        lblTax26.setFocusCycleRoot(true);
        jPanel1.add(lblTax26);
        lblTax26.setBounds(560, 30, 76, 28);

        hint.setColumns(20);
        hint.setEditable(false);
        hint.setFont(new java.awt.Font("Monospaced", 0, 14));
        hint.setLineWrap(true);
        hint.setRows(5);
        jScrollPane1.setViewportView(hint);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(560, 60, 166, 300);

        f3m3Panel.setBackground(new java.awt.Color(255, 102, 0));
        f3m3Panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        f3m3Panel.setName("f3m3"); // NOI18N

        f3m3.setEditable(false);
        f3m3.setFont(new java.awt.Font("MS UI Gothic", 0, 30));
        f3m3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f3m3.setText("0人");
        f3m3.setBorder(null);
        f3m3.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f3m3.setName("f3m3"); // NOI18N
        f3m3.setOpaque(false);

        f3m3Label.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f3m3Label.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f3m3Label.setText("[ ＶＩＰ客 ]");
        f3m3Label.setBorder(null);
        f3m3Label.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f3m3Label.setEnabled(false);
        f3m3Label.setName("f3m3"); // NOI18N
        f3m3Label.setOpaque(false);

        f3m3Ratio.setFont(new java.awt.Font("MS UI Gothic", 1, 16));
        f3m3Ratio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        f3m3Ratio.setText("0%");
        f3m3Ratio.setBorder(null);
        f3m3Ratio.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        f3m3Ratio.setEnabled(false);
        f3m3Ratio.setName("f3m3"); // NOI18N
        f3m3Ratio.setOpaque(false);

        org.jdesktop.layout.GroupLayout f3m3PanelLayout = new org.jdesktop.layout.GroupLayout(f3m3Panel);
        f3m3Panel.setLayout(f3m3PanelLayout);
        f3m3PanelLayout.setHorizontalGroup(
            f3m3PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, f3m3PanelLayout.createSequentialGroup()
                .add(f3m3PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f3m3PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(f3m3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, f3m3PanelLayout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(f3m3Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                    .add(f3m3PanelLayout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(f3m3Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        f3m3PanelLayout.setVerticalGroup(
            f3m3PanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(f3m3PanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(f3m3Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f3m3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(f3m3Ratio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(f3m3Panel);
        f3m3Panel.setBounds(90, 60, 150, 100);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(75, 75, 75)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 742, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 305, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 373, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setPeriodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPeriodButtonActionPerformed

        ValidCustomerUpdatePeriodPanel p = new ValidCustomerUpdatePeriodPanel();
        SwingUtil.openAnchorDialog(null, true, p, "有効顧客　期間設定", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER);
        p = null;
        System.gc();
        
        this.setChkValidLabel();        

    }//GEN-LAST:event_setPeriodButtonActionPerformed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved

        hint.setText("");

    }//GEN-LAST:event_formMouseMoved

    private void price2FromFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_price2FromFocusLost
        dispPriceCondition();
    }//GEN-LAST:event_price2FromFocusLost

    private void price3FromFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_price3FromFocusLost
        dispPriceCondition();
    }//GEN-LAST:event_price3FromFocusLost

    private void count2FromFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_count2FromFocusLost
        dispCountCondition();
    }//GEN-LAST:event_count2FromFocusLost

    private void count3FromFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_count3FromFocusLost
        dispCountCondition();
    }//GEN-LAST:event_count3FromFocusLost

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        if (inputCheck()) {
            searchButton.setCursor(null);            
            this.search();            
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void chargeStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargeStaffActionPerformed

	MstStaff ms= (MstStaff)chargeStaff.getSelectedItem();
        
        if (ms != null) {
            if (ms.getStaffID() != null) {
		chargeStaffNo.setText(ms.getStaffNo());
	    }

	    if (chargeStaff.getSelectedIndex() == 0) {
                chargeStaffNo.setText("");
            }
        }
    }//GEN-LAST:event_chargeStaffActionPerformed

    private void chargeStaffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chargeStaffNoFocusLost

	if (!chargeStaffNo.getText().equals("")) {
            this.setChargeStaff(chargeStaffNo.getText());
        }else{
            chargeStaff.setSelectedIndex(0);
        }
    }//GEN-LAST:event_chargeStaffNoFocusLost

    private boolean checkDuplicateCustomer(ArrayList<MstCustomer> selectedArray, MstCustomer customer){
        for(MstCustomer mc : selectedArray){
            if(mc.getCustomerID().intValue() == customer.getCustomerID().intValue()){
                return true;
            }
        }
        return false;
    }
    
    private Date getStartDate(Date date){
        
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        
        return cal.getTime();
    }
    
    private Date getEndDate(Date date){
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);
        
        return cal.getTime();
    }
    
    private void search(){

        String shopIDList = "";

        //グループ
        if(shop1.getSelectedItem() instanceof MstGroup)
        {
                MstGroup mg = (MstGroup)shop1.getSelectedItem();
                shopIDList = mg.getShopIDListAll();
        }
        //店舗
        else if(shop1.getSelectedItem() instanceof MstShop)
        {
                MstShop ms = (MstShop)shop1.getSelectedItem();
                shopIDList = ms.getShopID().toString();
        }

	CustomerRankingList crl = new CustomerRankingList();
        
        //店舗IDリスト
        crl.setShopIDList(shopIDList);
        //担当者ID
        if (chargeStaff.getSelectedIndex() > 0) {
            crl.setStaffID(((MstStaff)chargeStaff.getSelectedItem()).getStaffID());
        }
        //対象期間
        crl.setTermFrom(cmbTargetPeriodStartDate.getDate());
        crl.setTermTo(cmbTargetPeriodEndDate.getDate());
        //過去累積集計
        crl.setPastTotal(isPastTotal.isSelected());
        //税区分
        crl.setTaxType(getSelectedTaxType());
        //評価対象
        crl.setProductDivision(0);
        //来店回数設定
        crl.setRankF3(Long.parseLong(count3From.getText()));
        crl.setRankF2(Long.parseLong(count2From.getText()));
        crl.setRankF1(Long.parseLong(count1From.getText()));
        //売上金額設定
        crl.setRankM3(Long.parseLong(price3From.getText()));
        crl.setRankM2(Long.parseLong(price2From.getText()));
        crl.setRankM1(Long.parseLong(price1From.getText()));
        //有効顧客
        crl.setChkValid1(this.chkValid1.isSelected());
        crl.setChkValid2(this.chkValid2.isSelected());
        crl.setChkValid3(this.chkValid3.isSelected());
        
        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
            crl.load_CrossAnalysis();

            f3m3.setText(crl.get(0).getTargetCount() + "人");
            f3m2.setText(crl.get(1).getTargetCount() + "人");
            f3m1.setText(crl.get(2).getTargetCount() + "人");
            f2m3.setText(crl.get(3).getTargetCount() + "人");
            f2m2.setText(crl.get(4).getTargetCount() + "人");
            f2m1.setText(crl.get(5).getTargetCount() + "人");
            f1m3.setText(crl.get(6).getTargetCount() + "人");
            f1m2.setText(crl.get(7).getTargetCount() + "人");
            f1m1.setText(crl.get(8).getTargetCount() + "人");

            long totalCount = 0;
            for (int i = 0; i < 9; i++) {
                totalCount += crl.get(i).getTargetCount();
            }

            if (totalCount > 0) {

                BigDecimal bd = null;
                bd = new BigDecimal(crl.get(0).getTargetCount().doubleValue() / totalCount * 100);
                f3m3Ratio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() + "%");
                bd = new BigDecimal(crl.get(1).getTargetCount().doubleValue() / totalCount * 100);
                f3m2Ratio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() + "%");
                bd = new BigDecimal(crl.get(2).getTargetCount().doubleValue() / totalCount * 100);
                f3m1Ratio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() + "%");
                bd = new BigDecimal(crl.get(3).getTargetCount().doubleValue() / totalCount * 100);
                f2m3Ratio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() + "%");
                bd = new BigDecimal(crl.get(4).getTargetCount().doubleValue() / totalCount * 100);
                f2m2Ratio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() + "%");
                bd = new BigDecimal(crl.get(5).getTargetCount().doubleValue() / totalCount * 100);
                f2m1Ratio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() + "%");
                bd = new BigDecimal(crl.get(6).getTargetCount().doubleValue() / totalCount * 100);
                f1m3Ratio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() + "%");
                bd = new BigDecimal(crl.get(7).getTargetCount().doubleValue() / totalCount * 100);
                f1m2Ratio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() + "%");
                bd = new BigDecimal(crl.get(8).getTargetCount().doubleValue() / totalCount * 100);
                f1m1Ratio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() + "%");

            } else {

                f3m3Ratio.setText("0%");
                f3m2Ratio.setText("0%");
                f3m1Ratio.setText("0%");
                f2m3Ratio.setText("0%");
                f2m2Ratio.setText("0%");
                f2m1Ratio.setText("0%");
                f1m3Ratio.setText("0%");
                f1m2Ratio.setText("0%");
                f1m1Ratio.setText("0%");
            }

            try {

                // 設定値の登録
                StringBuilder sql = new StringBuilder(1000);
                sql.append(" update mst_cross_analysis_setting");
                sql.append(" set");
                sql.append("      f3value = " + count3From.getText());
                sql.append("     ,f2value = " + count2From.getText());
                sql.append("     ,f1value = " + count1From.getText());
                sql.append("     ,m3value = " + price3From.getText());
                sql.append("     ,m2value = " + price2From.getText());
                sql.append("     ,m1value = " + price1From.getText());
                sql.append(" where");
                sql.append("     shop_id = " + SystemInfo.getCurrentShop().getShopID());

                SystemInfo.getConnection().executeUpdate(sql.toString());
                
            } catch (Exception e) {
            }
            
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        
    }
    
    /**
     * 主担当者をセットする。
     */
    private void setChargeStaff(String staffNo)
    {     
	chargeStaff.setSelectedIndex(0);

	for (int i = 1; i < chargeStaff.getItemCount(); i++) {
	    if (((MstStaff)chargeStaff.getItemAt(i)).getStaffNo().equals(staffNo)) {
		chargeStaff.setSelectedIndex(i);
		break;
	    }
	}
    }
    
    private void shop1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shop1ActionPerformed

    }//GEN-LAST:event_shop1ActionPerformed

	private void cmbTargetPeriodEndDateFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_cmbTargetPeriodEndDateFocusGained
	{//GEN-HEADEREND:event_cmbTargetPeriodEndDateFocusGained
            cmbTargetPeriodEndDate.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_cmbTargetPeriodEndDateFocusGained

	private void cmbTargetPeriodStartDateFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_cmbTargetPeriodStartDateFocusGained
	{//GEN-HEADEREND:event_cmbTargetPeriodStartDateFocusGained
            cmbTargetPeriodStartDate.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_cmbTargetPeriodStartDateFocusGained
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox chargeStaff;
    private javax.swing.JLabel chargeStaffLabel;
    private javax.swing.JTextField chargeStaffNo;
    private javax.swing.JCheckBox chkValid1;
    private javax.swing.JCheckBox chkValid2;
    private javax.swing.JCheckBox chkValid3;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodEndDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodStartDate;
    private javax.swing.JTextField count1From;
    private javax.swing.JTextField count1To;
    private javax.swing.JTextField count2From;
    private javax.swing.JTextField count2To;
    private javax.swing.JTextField count3From;
    private javax.swing.JTextField f1m1;
    private javax.swing.JTextField f1m1Label;
    private javax.swing.JPanel f1m1Panel;
    private javax.swing.JTextField f1m1Ratio;
    private javax.swing.JTextField f1m2;
    private javax.swing.JTextField f1m2Label;
    private javax.swing.JPanel f1m2Panel;
    private javax.swing.JTextField f1m2Ratio;
    private javax.swing.JTextField f1m3;
    private javax.swing.JTextField f1m3Label;
    private javax.swing.JPanel f1m3Panel;
    private javax.swing.JTextField f1m3Ratio;
    private javax.swing.JTextField f2m1;
    private javax.swing.JTextField f2m1Label;
    private javax.swing.JPanel f2m1Panel;
    private javax.swing.JTextField f2m1Ratio;
    private javax.swing.JTextField f2m2;
    private javax.swing.JTextField f2m2Label;
    private javax.swing.JPanel f2m2Panel;
    private javax.swing.JTextField f2m2Ratio;
    private javax.swing.JTextField f2m3;
    private javax.swing.JTextField f2m3Label;
    private javax.swing.JPanel f2m3Panel;
    private javax.swing.JTextField f2m3Ratio;
    private javax.swing.JTextField f3m1;
    private javax.swing.JTextField f3m1Label;
    private javax.swing.JPanel f3m1Panel;
    private javax.swing.JTextField f3m1Ratio;
    private javax.swing.JTextField f3m2;
    private javax.swing.JTextField f3m2Label;
    private javax.swing.JPanel f3m2Panel;
    private javax.swing.JTextField f3m2Ratio;
    private javax.swing.JTextField f3m3;
    private javax.swing.JTextField f3m3Label;
    private javax.swing.JPanel f3m3Panel;
    private javax.swing.JTextField f3m3Ratio;
    private javax.swing.JTextArea hint;
    private javax.swing.JCheckBox isPastTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTargetPeriod;
    private javax.swing.JLabel lblTargetPeriod2;
    private javax.swing.JLabel lblTax;
    private javax.swing.JLabel lblTax1;
    private javax.swing.JLabel lblTax10;
    private javax.swing.JLabel lblTax11;
    private javax.swing.JLabel lblTax12;
    private javax.swing.JLabel lblTax13;
    private javax.swing.JLabel lblTax14;
    private javax.swing.JLabel lblTax15;
    private javax.swing.JLabel lblTax16;
    private javax.swing.JLabel lblTax17;
    private javax.swing.JLabel lblTax18;
    private javax.swing.JLabel lblTax19;
    private javax.swing.JLabel lblTax2;
    private javax.swing.JLabel lblTax20;
    private javax.swing.JLabel lblTax21;
    private javax.swing.JLabel lblTax22;
    private javax.swing.JLabel lblTax23;
    private javax.swing.JLabel lblTax24;
    private javax.swing.JLabel lblTax25;
    private javax.swing.JLabel lblTax26;
    private javax.swing.JLabel lblTax27;
    private javax.swing.JLabel lblTax28;
    private javax.swing.JLabel lblTax3;
    private javax.swing.JLabel lblTax4;
    private javax.swing.JLabel lblTax5;
    private javax.swing.JLabel lblTax6;
    private javax.swing.JLabel lblTax7;
    private javax.swing.JLabel lblTax8;
    private javax.swing.JLabel lblTax9;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JTextField price1From;
    private javax.swing.JTextField price1To;
    private javax.swing.JTextField price2From;
    private javax.swing.JTextField price2To;
    private javax.swing.JTextField price3From;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton setPeriodButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop1;
    private javax.swing.JLabel shopLabel;
    private javax.swing.ButtonGroup taxGroup;
    // End of variables declaration//GEN-END:variables
	
	private	StaffShopRankingFocusTraversalPolicy	ftp	=
			new StaffShopRankingFocusTraversalPolicy();
	
	
	private void setKeyListener()
	{
		cmbTargetPeriodEndDate.addKeyListener(SystemInfo.getMoveNextField());
		cmbTargetPeriodEndDate.addFocusListener(SystemInfo.getSelectText());
		cmbTargetPeriodStartDate.addKeyListener(SystemInfo.getMoveNextField());
		cmbTargetPeriodStartDate.addFocusListener(SystemInfo.getSelectText());
                
		count3From.addKeyListener(SystemInfo.getMoveNextField());
		count3From.addFocusListener(SystemInfo.getSelectText());
		count2From.addKeyListener(SystemInfo.getMoveNextField());
		count2From.addFocusListener(SystemInfo.getSelectText());
		count1From.addKeyListener(SystemInfo.getMoveNextField());
		count1From.addFocusListener(SystemInfo.getSelectText());
                
		price3From.addKeyListener(SystemInfo.getMoveNextField());
		price3From.addFocusListener(SystemInfo.getSelectText());
		price2From.addKeyListener(SystemInfo.getMoveNextField());
		price2From.addFocusListener(SystemInfo.getSelectText());
		price1From.addKeyListener(SystemInfo.getMoveNextField());
		price1From.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
            // 設定値の読み込み
            try {

                String sql = "";
                sql = "select * from mst_cross_analysis_setting where shop_id = " + SystemInfo.getCurrentShop().getShopID();
                
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql);
                if (rs.next()) {
                    
                    count3From.setText(rs.getString("f3value"));
                    count2From.setText(rs.getString("f2value"));
                    count1From.setText(rs.getString("f1value"));
                    dispCountCondition();

                    price3From.setText(rs.getString("m3value"));
                    price2From.setText(rs.getString("m2value"));
                    price1From.setText(rs.getString("m1value"));
                    dispPriceCondition();

                } else {

                    sql = "insert into mst_cross_analysis_setting (shop_id) values(" + SystemInfo.getCurrentShop().getShopID() + ")";
                    SystemInfo.getConnection().executeUpdate(sql);
                }

                if (count1From.getText().length() == 0) count1From.setText("1");
                if (price1From.getText().length() == 0) price1From.setText("0");
                
                rs.close();
   
            } catch (Exception e) {
            }
            
            addMouseMotionListener(f1m1Panel);
            addMouseMotionListener(f1m1Label);
            addMouseMotionListener(f1m1);
            addMouseMotionListener(f1m1Ratio);
            addMouseMotionListener(f1m2Panel);
            addMouseMotionListener(f1m2Label);
            addMouseMotionListener(f1m2);
            addMouseMotionListener(f1m2Ratio);
            addMouseMotionListener(f1m3Panel);
            addMouseMotionListener(f1m3Label);
            addMouseMotionListener(f1m3);
            addMouseMotionListener(f1m3Ratio);

            addMouseMotionListener(f2m1Panel);
            addMouseMotionListener(f2m1Label);
            addMouseMotionListener(f2m1);
            addMouseMotionListener(f2m1Ratio);
            addMouseMotionListener(f2m2Panel);
            addMouseMotionListener(f2m2Label);
            addMouseMotionListener(f2m2);
            addMouseMotionListener(f2m2Ratio);
            addMouseMotionListener(f2m3Panel);
            addMouseMotionListener(f2m3Label);
            addMouseMotionListener(f2m3);
            addMouseMotionListener(f2m3Ratio);

            addMouseMotionListener(f3m1Panel);
            addMouseMotionListener(f3m1Label);
            addMouseMotionListener(f3m1);
            addMouseMotionListener(f3m1Ratio);
            addMouseMotionListener(f3m2Panel);
            addMouseMotionListener(f3m2Label);
            addMouseMotionListener(f3m2);
            addMouseMotionListener(f3m2Ratio);
            addMouseMotionListener(f3m3Panel);
            addMouseMotionListener(f3m3Label);
            addMouseMotionListener(f3m3);
            addMouseMotionListener(f3m3Ratio);

            addMouseListener(f1m1);
            addMouseListener(f1m2);
            addMouseListener(f1m3);

            addMouseListener(f2m1);
            addMouseListener(f2m2);
            addMouseListener(f2m3);

            addMouseListener(f3m1);
            addMouseListener(f3m2);
            addMouseListener(f3m3);
        }
        
        private void setChkValidLabel() {
            
            MstShopSetting mss = MstShopSetting.getInstance();
            
            String s1 = mss.getValidCustomerPeriod1().toString();
            String s2 = mss.getValidCustomerPeriod2().toString();

            this.chkValid1.setText("稼働客（" + s1 + "ヶ月以内）");
            this.chkValid2.setText("現役客（" + s1 + "〜" + s2 + "ヶ月）");
            this.chkValid3.setText("離店客（" + s2 + "ヶ月以上）");
        }
        
        public StaffShopRankingFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
        
	/**
	 * ランキング画面用FocusTraversalPolicy
	 */
	private class StaffShopRankingFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponentStaffShopRankingFocusTraversalPolicy。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(shop1))
			{
				return chargeStaffNo;
			}else if (aComponent.equals(chargeStaffNo))
			{
				return chargeStaff;
			}else if (aComponent.equals(chargeStaff))
			{
				return cmbTargetPeriodStartDate;
			}else if (aComponent.equals(cmbTargetPeriodStartDate))
			{
				return cmbTargetPeriodEndDate;
			}else if (aComponent.equals(cmbTargetPeriodEndDate))
			{
				return isPastTotal;
			}
                        else if (aComponent.equals(isPastTotal))
			{
				if(rdoTaxUnit.isSelected()){
                                    return rdoTaxUnit;
                                }
                                 return rdoTaxBlank;
			}
			else if (aComponent.equals(rdoTaxUnit) || aComponent.equals(rdoTaxBlank) )
			{
				return chkValid1;
			}
                        else if (aComponent.equals(chkValid1) )
			{
				return chkValid2;
			}else if (aComponent.equals(chkValid2) )
			{
				return chkValid3;
			}else if (aComponent.equals(chkValid3) )
			{
				return count3From;
			}else if (aComponent.equals(count3From) )
			{
				return price3From;
			}
                        else if (aComponent.equals(price3From) )
			{
				return count2From;
			}else if (aComponent.equals(count2From) )
			{
				return price2From;
			}
			return this.getStartComponent();
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(cmbTargetPeriodStartDate))
			{
				return searchButton;
			}
			else if (aComponent.equals(cmbTargetPeriodEndDate))
			{
				return cmbTargetPeriodStartDate;
			}
			
			return this.getStartComponent();
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return this.getStartComponent();
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return price2From;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return this.getStartComponent();
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return this.getStartComponent();
		}
                private Component getStartComponent(){
                    if(shop1.getItemCount() == 1)
                    {
                        return chargeStaffNo;
                    }
                    return shop1 ;
                }
		
	}
	
        private void dispCountCondition() {
            
            try {

                if (count3From.getText().length() > 0) {
                    count2To.setText(String.valueOf(Long.parseLong(count3From.getText()) - 1));
                }

                if (count2From.getText().length() > 0) {
                    count1To.setText(String.valueOf(Long.parseLong(count2From.getText()) - 1));
                }
                
            } catch (Exception e) {
            }
            
        }
        
        private void dispPriceCondition() {
            
            try {

                if (price3From.getText().length() > 0) {
                    price2To.setText(String.valueOf(Long.parseLong(price3From.getText()) - 1));
                }

                if (price2From.getText().length() > 0) {
                    price1To.setText(String.valueOf(Long.parseLong(price2From.getText()) - 1));
                }
                
            } catch (Exception e) {
            }
            
        }

        private boolean inputCheck()
        {
                try {
                    Long.parseLong(count3From.getText());
                } catch (Exception e) {
                    
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "来店回数設定のランク３"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    count3From.requestFocusInWindow();
                    return false;
                }
                
                try {
                    Long.parseLong(count2From.getText());
                } catch (Exception e) {
                    
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "来店回数設定のランク２"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    count2From.requestFocusInWindow();
                    return false;
                }
            
                try {
                    Long.parseLong(count1From.getText());
                } catch (Exception e) {
                    
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "来店回数設定のランク１"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    count1From.requestFocusInWindow();
                    return false;
                }

                try {
                    Long.parseLong(price3From.getText());
                } catch (Exception e) {
                    
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "売上金額設定のランク３"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    price3From.requestFocusInWindow();
                    return false;
                }

                try {
                    Long.parseLong(price2From.getText());
                } catch (Exception e) {
                    
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "売上金額設定のランク２"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    price2From.requestFocusInWindow();
                    return false;
                }

                try {
                    Long.parseLong(price1From.getText());
                } catch (Exception e) {
                    
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "売上金額設定のランク１"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    price1From.requestFocusInWindow();
                    return false;
                }
                
                
                boolean isChecked = false;
                isChecked = isChecked || chkValid1.isSelected();
                isChecked = isChecked || chkValid2.isSelected();
                isChecked = isChecked || chkValid3.isSelected();
                if (!isChecked) {
                    MessageDialog.showMessageDialog(
                        this,
                        "有効顧客のいずれかをチェックしてください。",
                        this.getTitle(),
                        JOptionPane.WARNING_MESSAGE);

                    return false;
                }


                return true;
        }

        /**
         * 選択中の税区分を返します。(１：税抜： ２：税込)
         */
        private int getSelectedTaxType()
        {
                if(rdoTaxUnit.isSelected())
                {
                    return 2;
                }

                return	1;
        }
        
        private void showStaffShopRankingDecilePanel(final JComponent c) {
        
            if (!inputCheck()) return;
            
            if (((JTextField)c).getText().equals("0人")) {

                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(1112),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            StaffShopRankingDecilePanel dcl = new StaffShopRankingDecilePanel(this.getTitle());
            dcl.setSelectedRow(0);
            dcl.setTarget(shop1.getSelectedItem());
            
            if (chargeStaff.getSelectedIndex() > 0) {
                dcl.setStaffName(((MstStaff)chargeStaff.getSelectedItem()).getFullStaffName());
            } else {
                dcl.setStaffName("指定なし");
            }
            dcl.setTargetPeriodStartDate(cmbTargetPeriodStartDate.getDateStr("/"));
            dcl.setTargetPeriodEndDate(cmbTargetPeriodEndDate.getDateStr("/"));
            dcl.setTaxName(rdoTaxUnit.isSelected() ? "税込" : "税抜");
            dcl.setLimitCount(99999999);
            
            if (c.equals(f3m3)) {
            
                f3m3.setCursor(null);
                dcl.setFmType(getCategoryName(c));
                dcl.setFvalue("来店回数 ： " + count3From.getText() + "回以上");
                dcl.setMvalue("売上金額 ： " + price3From.getText() + "円以上");
                dcl.setWhereCondition("visit_count >= " + count3From.getText() + " and sales_value >= " + price3From.getText());
                
            } else if (c.equals(f3m2)) {
                
                f3m2.setCursor(null);
                dcl.setFmType(getCategoryName(c));
                dcl.setFvalue("来店回数 ： " + count3From.getText() + "回以上");
                dcl.setMvalue("売上金額 ： " + price2From.getText() + "円 〜 " + price2To.getText() + "円");
                dcl.setWhereCondition("visit_count >= " + count3From.getText() + " and sales_value between " + price2From.getText() + " and " + price2To.getText());
                
            } else if (c.equals(f3m1)) {

                f3m1.setCursor(null);
                dcl.setFmType(getCategoryName(c));
                dcl.setFvalue("来店回数 ： " + count3From.getText() + "回以上");
                dcl.setMvalue("売上金額 ： " + price1From.getText() + "円 〜 " + price1To.getText() + "円");
                dcl.setWhereCondition("visit_count >= " + count3From.getText() + " and sales_value between " + price1From.getText() + " and " + price1To.getText());
                
            } else if (c.equals(f2m3)) {
                
                f2m3.setCursor(null);
                dcl.setFmType(getCategoryName(c));
                dcl.setFvalue("来店回数 ： " + count2From.getText() + "回 〜 " + count2To.getText() + "回");
                dcl.setMvalue("売上金額 ： " + price3From.getText() + "円以上");
                dcl.setWhereCondition("visit_count between " + count2From.getText() + " and " + count2To.getText() + " and sales_value >= " + price3From.getText());
                
            } else if (c.equals(f2m2)) {
                
                f2m2.setCursor(null);
                dcl.setFmType(getCategoryName(c));
                dcl.setFvalue("来店回数 ： " + count2From.getText() + "回 〜 " + count2To.getText() + "回");
                dcl.setMvalue("売上金額 ： " + price2From.getText() + "円 〜 " + price2To.getText() + "円");
                dcl.setWhereCondition("visit_count between " + count2From.getText() + " and " + count2To.getText() + " and sales_value between " + price2From.getText() + " and " + price2To.getText());
                
            } else if (c.equals(f2m1)) {
                
                f2m1.setCursor(null);
                dcl.setFmType(getCategoryName(c));
                dcl.setFvalue("来店回数 ： " + count2From.getText() + "回 〜 " + count2To.getText() + "回");
                dcl.setMvalue("売上金額 ： " + price1From.getText() + "円 〜 " + price1To.getText() + "円");
                dcl.setWhereCondition("visit_count between " + count2From.getText() + " and " + count2To.getText() + " and sales_value between " + price1From.getText() + " and " + price1To.getText());
                
            } else if (c.equals(f1m3)) {
                
                f1m3.setCursor(null);
                dcl.setFmType(getCategoryName(c));
                dcl.setFvalue("来店回数 ： " + count1From.getText() + "回 〜 " + count1To.getText() + "回");
                dcl.setMvalue("売上金額 ： " + price3From.getText() + "円以上");
                dcl.setWhereCondition("visit_count between " + count1From.getText() + " and " + count1To.getText() + " and sales_value >= " + price3From.getText());
                
            } else if (c.equals(f1m2)) {
                
                f1m2.setCursor(null);
                dcl.setFmType(getCategoryName(c));
                dcl.setFvalue("来店回数 ： " + count1From.getText() + "回 〜 " + count1To.getText() + "回");
                dcl.setMvalue("売上金額 ： " + price2From.getText() + "円 〜 " + price2To.getText() + "円");
                dcl.setWhereCondition("visit_count between " + count1From.getText() + " and " + count1To.getText() + " and sales_value between " + price2From.getText() + " and " + price2To.getText());
                
            } else if (c.equals(f1m1)) {
                
                f1m1.setCursor(null);
                dcl.setFmType(getCategoryName(c));
                dcl.setFvalue("来店回数 ： " + count1From.getText() + "回 〜 " + count1To.getText() + "回");
                dcl.setMvalue("売上金額 ： " + price1From.getText() + "円 〜 " + price1To.getText() + "円");
                dcl.setWhereCondition("visit_count between " + count1From.getText() + " and " + count1To.getText() + " and sales_value between " + price1From.getText() + " and " + price1To.getText());
            }

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                
                dcl.showData();

                dcl.setOpener(this);
                this.setVisible(false);
                parentFrame.changeContents(dcl);

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
            
        }                                          
        
        private String getCategoryName(final JComponent c) {
            
            String result = "";
            
            if (c.getName().equals("f2m2")) result = "■シルバー客 F2M2";
            if (c.getName().equals("f1m1")) result = "■新規含む一般客 F1M1";
            if (c.getName().equals("f1m2")) result = "■新規含む一般客 F1M2";
            if (c.getName().equals("f1m3")) result = "■新規含む一般客 F1M3";
            if (c.getName().equals("f2m1")) result = "■一般客 F2M1";
            if (c.getName().equals("f3m1")) result = "■一般客 F3M1";
            if (c.getName().equals("f3m2")) result = "■ゴールド客 F3M2";
            if (c.getName().equals("f2m3")) result = "■ゴールド客 F2M3";
            if (c.getName().equals("f3m3")) result = "■VIP客 F3M3";

            return result;
        }
        
        private void showHint(final JComponent c) {
            
            final String SEP = "━━━━━━━━━━━\n";
            
            if (c.getName().equals("f1m1")) {
                hint.setText(getCategoryName(c) + "\n" + SEP + "来店回数も低く、新規客かもしれませんが、客単価も明らかに低いお客様であるので、あまり期待せずに様子を見た方が良いかもしれません。");
            } else if (c.getName().equals("f1m2")) {
                hint.setText(getCategoryName(c) + "\n" + SEP + "来店回数も低く、新規客かもしれませんが、客単価もそこそこなので、少し様子を見た方が良いかもしれません。");
            } else if (c.getName().equals("f1m3")) {
                hint.setText(getCategoryName(c) + "\n" + SEP + "来店回数も低く、新規客かもしれませんが、客単価が非常に高いお客様であるので、少し次回以降に期待を持って様子を見た方が良いかもしれません。");
            } else if (c.getName().equals("f2m1")) {
                hint.setText(getCategoryName(c) + "\n" + SEP + "来店回数もそこそこで、客単価が明らかに低いお客様なので、キャンペーンなどで来店促進と客単価アップを考えても良いかもしれません。");
            } else if (c.getName().equals("f2m2")) {
                hint.setText(getCategoryName(c) + "\n" + SEP + "来店回数も売上金額もそこそこのお客様なので、来店回数アップ及び客単価アップできる方法を考えても良いかもしれません。");
            } else if (c.getName().equals("f2m3")) {
                hint.setText(getCategoryName(c) + "\n" + SEP + "売上金額は高いのですが、来店回数がまだ少ないので、来店回数をアップするための策を考えれば、VIP客となります。");
            } else if (c.getName().equals("f3m1")) {
                hint.setText(getCategoryName(c) + "\n" + SEP + "来店回数は高いのですが、客単価が明らかに低いお客様なので、コストをかけないで客単価をアップできる方法を考えても良いかもしれません。");
            } else if (c.getName().equals("f3m2")) {
                hint.setText(getCategoryName(c) + "\n" + SEP + "来店回数は高いが、売上金額がそこそこ＝客単価がそこそこということなので、客単価アップのための策を考えれば、VIP客となります。");
            } else if (c.getName().equals("f3m3")) {
                hint.setText(getCategoryName(c) + "\n" + SEP + "来店回数も売上金額も高いVIP客なので、特別待遇を提供することで、ますますロイヤルティが高くなるでしょう。");
            }
        }

        private void addMouseMotionListener(final JComponent c) {
            c.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                public void mouseMoved(java.awt.event.MouseEvent evt) {
                    showHint(c);
                }
            });
        }

        private void addMouseListener(final JComponent c) {
            c.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    showStaffShopRankingDecilePanel(c);
                }
            });
        }
}
