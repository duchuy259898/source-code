/*
 * ReappearancePredictionPanel.java
 *
 * Created on 2008/07/20, 11:00
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.util.*;
import javax.swing.*;
import com.geobeck.swing.*;
import javax.swing.table.DefaultTableModel;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.sosia.pos.hair.customer.MstCustomerPanel;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.hair.mail.*;
import com.geobeck.sosia.pos.mail.*;
import java.text.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.hair.report.util.*;

/**
 *
 * @author  ryugou
 */
public class ReappearancePredictionPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx implements SelectMailAddressDialogOpener
{
	private Integer selectedAddress = -1;
        private ArrayList<MstCustomer> resultList = new ArrayList<MstCustomer>();
        
        /** Creates new form StaffShopRankingPanel */
	public ReappearancePredictionPanel()
	{
		initComponents();
                addMouseCursorChange();
                this.setSize(820,680);
		this.setPath("帳票出力");
		this.setTitle("動向分析");
		this.setKeyListener();
                
                this.initTableColumnWidth();
                
                this.initChargeStaff();
                
                //対象期間の設定
		this.cmbTargetPeriodStartDate.setDate(new Date());
		this.cmbTargetPeriodEndDate.setDate(new Date());
		
		// 顧客共有の有無によりグループ表示を切り替える
		if (SystemInfo.getSetteing().isShareCustomer())
		{
		    SystemInfo.initGroupShopComponents(shop1, 3);
		}
		else
		{
		    SystemInfo.initGroupShopComponents(shop1, 2);
		}
                
                //初期化処理
                this.init();
		
		// メール作成ボタン表示設定
		this.mailButton.setVisible(SystemInfo.checkAuthority(53));
		// 宛名ラベル作成ボタン表示設定
		this.sealButton.setVisible(SystemInfo.checkAuthority(55));
		// ハガキ作成ボタン表示設定
		this.postcardButton.setVisible(SystemInfo.checkAuthority(54));
	}
        
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(btnOutput);
		SystemInfo.addMouseCursorChange(mailButton);
		SystemInfo.addMouseCursorChange(sealButton);
		SystemInfo.addMouseCursorChange(postcardButton);
		SystemInfo.addMouseCursorChange(searchButton);
		SystemInfo.addMouseCursorChange(selectAllButton);
		SystemInfo.addMouseCursorChange(releaseAllButton);
	}
        
    	public void setSelectedAddress(Integer selectedAddress)
	{
		this.selectedAddress	=	selectedAddress;
	}
	    
	/**
	 * 主担当を取得する
	 */
	private void initChargeStaff()
	{
	    chargeStaff.removeAllItems();

	    MstStaffs staffs = new MstStaffs();

	    staffs.setShopIDList(SystemInfo.getCurrentShop().getShopID().toString());

	    try
	    {
		staffs.load(SystemInfo.getConnection(), true);
	    }
	    catch(java.sql.SQLException e)
	    {
		//SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }

	    for (MstStaff ms : staffs) {
		chargeStaff.addItem(ms);
	    }

	    chargeStaff.setSelectedIndex(0);
	}	
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customerGroup = new javax.swing.ButtonGroup();
        comingCycleGroup = new javax.swing.ButtonGroup();
        customerCategoryGroup = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        shopLabel = new javax.swing.JLabel();
        chargeStaff = new javax.swing.JComboBox();
        chargeStaffNo = new javax.swing.JTextField();
        shop1 = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        chargeStaffLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rdoComing = new javax.swing.JRadioButton();
        rdoDrop = new javax.swing.JRadioButton();
        rdoReappearance = new javax.swing.JRadioButton();
        cmbTargetPeriodEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lblTargetPeriod = new javax.swing.JLabel();
        cmbTargetPeriodStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel1 = new javax.swing.JLabel();
        rdoPraiseLimit = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        rdoComingCycle = new javax.swing.JRadioButton();
        rdoFree = new javax.swing.JRadioButton();
        rdoAll = new javax.swing.JRadioButton();
        rdoNomn = new javax.swing.JRadioButton();
        searchButton = new javax.swing.JButton();
        btnOutput = new javax.swing.JButton();
        sealButton = new javax.swing.JButton();
        postcardButton = new javax.swing.JButton();
        mailButton = new javax.swing.JButton();
        rdoNew = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        selectAllButton = new javax.swing.JButton();
        releaseAllButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customersTable = new com.geobeck.swing.JTableEx();
        jScrollPane2 = new javax.swing.JScrollPane();
        totalTable = new com.geobeck.swing.JTableEx();
        jLabel3 = new javax.swing.JLabel();

        setFocusCycleRoot(true);

        pnlMain.setFocusCycleRoot(true);
        pnlMain.setOpaque(false);

        shopLabel.setText("店舗");

        chargeStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        chargeStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargeStaffActionPerformed(evt);
            }
        });

        chargeStaffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        chargeStaffNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                chargeStaffNoFocusLost(evt);
            }
        });

        shop1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shop1ActionPerformed(evt);
            }
        });

        chargeStaffLabel.setText("主担当者");

        jLabel2.setText("対象顧客");

        customerGroup.add(rdoComing);
        rdoComing.setSelected(true);
        rdoComing.setText("来店予定者");
        rdoComing.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoComing.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoComing.setOpaque(false);
        rdoComing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoComingActionPerformed(evt);
            }
        });

        customerGroup.add(rdoDrop);
        rdoDrop.setText("失客候補者");
        rdoDrop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoDrop.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoDrop.setOpaque(false);
        rdoDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoDropActionPerformed(evt);
            }
        });

        customerGroup.add(rdoReappearance);
        rdoReappearance.setText("再来店者");
        rdoReappearance.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoReappearance.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoReappearance.setOpaque(false);
        rdoReappearance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoReappearanceActionPerformed(evt);
            }
        });

        cmbTargetPeriodEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodEndDateFocusGained(evt);
            }
        });

        lblTargetPeriod.setText("対象期間");
        lblTargetPeriod.setFocusCycleRoot(true);

        cmbTargetPeriodStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodStartDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodStartDateFocusGained(evt);
            }
        });

        jLabel1.setText("〜");
        jLabel1.setFocusCycleRoot(true);

        comingCycleGroup.add(rdoPraiseLimit);
        rdoPraiseLimit.setSelected(true);
        rdoPraiseLimit.setText("賞美期限");
        rdoPraiseLimit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoPraiseLimit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoPraiseLimit.setOpaque(false);
        rdoPraiseLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoPraiseLimitActionPerformed(evt);
            }
        });

        jLabel4.setText("来店周期");

        comingCycleGroup.add(rdoComingCycle);
        rdoComingCycle.setText("来店周期");
        rdoComingCycle.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoComingCycle.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoComingCycle.setOpaque(false);
        rdoComingCycle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoComingCycleActionPerformed(evt);
            }
        });

        customerCategoryGroup.add(rdoFree);
        rdoFree.setText("フリー客");
        rdoFree.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoFree.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoFree.setOpaque(false);

        customerCategoryGroup.add(rdoAll);
        rdoAll.setSelected(true);
        rdoAll.setText("全て");
        rdoAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoAll.setOpaque(false);

        customerCategoryGroup.add(rdoNomn);
        rdoNomn.setText("指名客");
        rdoNomn.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoNomn.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoNomn.setOpaque(false);

        searchButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
        searchButton.setBorderPainted(false);
        searchButton.setContentAreaFilled(false);
        searchButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutput.setBorderPainted(false);
        btnOutput.setContentAreaFilled(false);
        btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputActionPerformed(evt);
            }
        });

        sealButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_seal_off.jpg"));
        sealButton.setBorderPainted(false);
        sealButton.setContentAreaFilled(false);
        sealButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_seal_on.jpg"));
        sealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sealButtonActionPerformed(evt);
            }
        });

        postcardButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_off.jpg"));
        postcardButton.setBorderPainted(false);
        postcardButton.setContentAreaFilled(false);
        postcardButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_on.jpg"));
        postcardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postcardButtonActionPerformed(evt);
            }
        });

        mailButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_mail_off.jpg"));
        mailButton.setBorderPainted(false);
        mailButton.setContentAreaFilled(false);
        mailButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_mail_on.jpg"));
        mailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailButtonActionPerformed(evt);
            }
        });

        customerCategoryGroup.add(rdoNew);
        rdoNew.setText("新規客");
        rdoNew.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoNew.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoNew.setOpaque(false);

        jLabel5.setText("表示条件");

        selectAllButton.setIcon(SystemInfo.getImageIcon("/button/select/select_all_off.jpg"));
        selectAllButton.setBorderPainted(false);
        selectAllButton.setContentAreaFilled(false);
        selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_all_on.jpg"));
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/select/release_all_off.jpg"));
        releaseAllButton.setBorderPainted(false);
        releaseAllButton.setContentAreaFilled(false);
        releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/release_all_on.jpg"));
        releaseAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseAllButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlMainLayout = new org.jdesktop.layout.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlMainLayout.createSequentialGroup()
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblTargetPeriod)
                            .add(jLabel2)
                            .add(chargeStaffLabel)
                            .add(shopLabel))
                        .add(27, 27, 27)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(pnlMainLayout.createSequentialGroup()
                                .add(cmbTargetPeriodStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cmbTargetPeriodEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(pnlMainLayout.createSequentialGroup()
                                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(pnlMainLayout.createSequentialGroup()
                                        .add(chargeStaffNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(chargeStaff, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .add(shop1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 223, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 117, Short.MAX_VALUE)
                                .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mailButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(sealButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(postcardButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(pnlMainLayout.createSequentialGroup()
                                .add(rdoComing)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(rdoDrop)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(rdoReappearance))))
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(pnlMainLayout.createSequentialGroup()
                                .add(jLabel4)
                                .add(27, 27, 27)
                                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(pnlMainLayout.createSequentialGroup()
                                        .add(rdoAll)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(rdoNomn)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(rdoFree)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(rdoNew))
                                    .add(pnlMainLayout.createSequentialGroup()
                                        .add(rdoPraiseLimit)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(rdoComingCycle))))
                            .add(jLabel5))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(searchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(218, 218, 218)
                        .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlMainLayout.createSequentialGroup()
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel2)
                            .add(pnlMainLayout.createSequentialGroup()
                                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(shop1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(chargeStaffNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(chargeStaffLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(chargeStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(rdoComing)
                                    .add(rdoDrop)
                                    .add(rdoReappearance))))
                        .add(8, 8, 8)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(cmbTargetPeriodEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, cmbTargetPeriodStartDate, 0, 21, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(lblTargetPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(sealButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(postcardButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mailButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(rdoPraiseLimit)
                            .add(rdoComingCycle))
                        .add(14, 14, 14)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel5)
                            .add(rdoAll)
                            .add(rdoNomn)
                            .add(rdoFree)
                            .add(rdoNew)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, searchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMainLayout.linkSize(new java.awt.Component[] {cmbTargetPeriodEndDate, cmbTargetPeriodStartDate, lblTargetPeriod}, org.jdesktop.layout.GroupLayout.VERTICAL);

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "前回来店日", "顧客No.", "<html><p>顧客<br>情報</p></html>", "氏名", "主担当者", "指名", "次回来店予定日", "<html>賞美<br>期限</html>", "<html>経過<br>日数</html>", "<html>来店<br>回数</html>", "<html>　前回　<br>技術売上</html>", "<html>メール<br>&nbsp;有無 </html>", "<html>送信<br>対象</html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        customersTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        customersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(customersTable);

        jScrollPane2.setBorder(null);

        totalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "入客数", "指名客", "フリー客", "新規客", "前回技術売上"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        totalTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        totalTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        totalTable.getTableHeader().setReorderingAllowed(false);
        SelectTableCellRenderer.setSelectTableCellRenderer(totalTable);
        jScrollPane2.setViewportView(totalTable);

        jLabel3.setText("<html>\n※来店周期は、前回・前々回との直近の来店周期となります。<br>\n&nbsp;&nbsp;&nbsp;平均値でありませんのでご注意ください。<br>\n※来店予定者には次回予約者も含まれています。 また、自店舗での<br>\n&nbsp;&nbsp;&nbsp;来店予定となりますので、他店舗に来店した場合は対象となりません。\n</html>\n");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 804, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 436, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 804, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 430, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel3)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rdoComingCycleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoComingCycleActionPerformed
        customersTable.getTableHeader().getColumnModel().getColumn(7).setHeaderValue("<html>来店<br>周期</html>");
    }//GEN-LAST:event_rdoComingCycleActionPerformed

    private void rdoPraiseLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoPraiseLimitActionPerformed
        customersTable.getTableHeader().getColumnModel().getColumn(7).setHeaderValue("<html>賞美<br>期限</html>");
    }//GEN-LAST:event_rdoPraiseLimitActionPerformed

    private void rdoReappearanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoReappearanceActionPerformed
        this.changeRadioButton(true);
        this.rdoPraiseLimit.setEnabled(true);
        this.rdoComingCycle.setEnabled(true);
        customersTable.getTableHeader().getColumnModel().getColumn(6).setHeaderValue("次回来店日");
//        customersTable.getTableHeader().getColumnModel().getColumn(7).setHeaderValue("<html>来店<br>周期</html>");
    }//GEN-LAST:event_rdoReappearanceActionPerformed

    private void rdoDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoDropActionPerformed
        this.changeRadioButton(true);
        this.rdoPraiseLimit.setEnabled(true);
        this.rdoComingCycle.setEnabled(true);
        customersTable.getTableHeader().getColumnModel().getColumn(6).setHeaderValue("次回来店予定日");
//        customersTable.getTableHeader().getColumnModel().getColumn(7).setHeaderValue("<html>来店<br>周期</html>");
    }//GEN-LAST:event_rdoDropActionPerformed

    private void rdoComingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoComingActionPerformed
        this.changeRadioButton(false);
        customersTable.getTableHeader().getColumnModel().getColumn(6).setHeaderValue("次回来店予定日");
//        if(this.rdoPraiseLimit.isSelected()){
//            customersTable.getTableHeader().getColumnModel().getColumn(7).setHeaderValue("<html>賞美<br>期限</html>");
//        }
    }//GEN-LAST:event_rdoComingActionPerformed

    private void changeRadioButton(boolean b){
        this.rdoPraiseLimit.setEnabled(!b);
        this.rdoComingCycle.setEnabled(!b);
    }
    
    private void changeSelect(boolean select){
        DefaultTableModel	model	=	(DefaultTableModel)customersTable.getModel();
        for(int i = 0; i < model.getRowCount(); i++){
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(12) != null){
                row.add(12, select);
            }
        }
    }
    
    private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseAllButtonActionPerformed
        this.changeSelect(false);
    }//GEN-LAST:event_releaseAllButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        this.changeSelect(true);
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void postcardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postcardButtonActionPerformed
        this.printPostcard();
    }//GEN-LAST:event_postcardButtonActionPerformed

    private void sealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sealButtonActionPerformed
        this.createSeal();
    }//GEN-LAST:event_sealButtonActionPerformed

    private void mailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailButtonActionPerformed
        this.sendMail();
    }//GEN-LAST:event_mailButtonActionPerformed

    private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed
        this.print();
    }//GEN-LAST:event_btnOutputActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButton.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
            // 対象期間が180日を超える場合はメッセージを表示する
            if (getDays(cmbTargetPeriodStartDate.getDate(), cmbTargetPeriodEndDate.getDate()) > 180) {

                String msg = "対象期間が長いため表示に時間がかかる場合があります。\n" +
                             "実行してもよろしいですか？";

                int ret = MessageDialog.showYesNoDialog(this, msg, this.getTitle(), JOptionPane.QUESTION_MESSAGE, JOptionPane.NO_OPTION);
                if (ret == JOptionPane.NO_OPTION) return;
            }

            this.search();
            
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void chargeStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargeStaffActionPerformed

	MstStaff ms= (MstStaff)chargeStaff.getSelectedItem();
        
        if (ms != null) {
            if (ms.getStaffID() != null) {
		chargeStaffNo.setText(ms.getStaffNo());
	    }

	    if (chargeStaff.getSelectedIndex() == 0) {
                chargeStaffNo.setText("");
            }
        }
    }//GEN-LAST:event_chargeStaffActionPerformed

    private void chargeStaffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chargeStaffNoFocusLost

	if (!chargeStaffNo.getText().equals("")) {
            this.setChargeStaff(chargeStaffNo.getText());
        }else{
            chargeStaff.setSelectedIndex(0);
        }
    }//GEN-LAST:event_chargeStaffNoFocusLost

    private boolean checkDuplicateCustomer(ArrayList<MstCustomer> selectedArray, MstCustomer customer){
        for(MstCustomer mc : selectedArray){
            if(mc.getCustomerID().intValue() == customer.getCustomerID().intValue()){
                return true;
            }
        }
        return false;
    }
    
    private void printPostcard() {
	
	DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();
      
        for (int i = 0; i < model.getRowCount(); i++) {
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if (row.get(12) != null && (Boolean)row.get(12)) {
		
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if (this.checkDuplicateCustomer(selectedArray, mc)) {
                    continue;
                }
                
                // 住所がなかっても飛ばす
                if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
		    continue;
                }
                
                selectedArray.add(mc);
            }
            
        }
        
        if(selectedArray.size() == 0){
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        PrintPostcardPanel ppp = new PrintPostcardPanel(selectedArray);
	ppp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, ppp, "ハガキ作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private void createSeal(){
	
        // 宛名ラベル印刷をクリック
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();
      
        for (int i = 0; i < model.getRowCount(); i++) {
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(12) != null && (Boolean)row.get(12)){
		
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if(this.checkDuplicateCustomer(selectedArray, mc)){
                    continue;
                }
                
                // 住所がなかっても飛ばす
                if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
		    continue;
                }
                
                selectedArray.add(mc);
            }
            
        }
        
        if(selectedArray.size() == 0){
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        PrintLabelPanel plp = new PrintLabelPanel(selectedArray);
	plp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, plp, "宛名ラベル作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private void sendMail(){
	
        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();

	DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
      
        for(int i = 0; i < model.getRowCount(); i++){
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(12) != null && (Boolean)row.get(12)){
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if (this.checkDuplicateCustomer(selectedArray, mc)) continue;
		
		selectedArray.add(mc);
            }
        }

        if (selectedArray.size() == 0) {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        HairCommonMailPanel rcmp = new HairCommonMailPanel(this.shop1.getSelectedItem(), selectedArray);
	rcmp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, rcmp, "メール作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private Date getStartDate(Date date){
        
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        
        return cal.getTime();
    }
    
    private Date getEndDate(Date date){
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);
        
        return cal.getTime();
    }
    
    private void search(){
        
        resultList.clear();
        
        ReportParameterBean paramBean = new ReportParameterBean();
        
        //グループ
        if(shop1.getSelectedItem() instanceof MstGroup)
        {
                MstGroup	mg	=	(MstGroup)shop1.getSelectedItem();
                paramBean.setTargetName(mg.getGroupName());
                paramBean.setShopIDList(mg.getShopIDListAll());
        }
        //店舗
        else if(shop1.getSelectedItem() instanceof MstShop)
        {
                MstShop		ms	=	(MstShop)shop1.getSelectedItem();
                paramBean.setTargetName(ms.getShopName());
                paramBean.setShopIDList(ms.getShopID().toString());
        }
        
        paramBean.setTargetStartDateObj(this.getStartDate(cmbTargetPeriodStartDate.getDate()));
        paramBean.setTargetEndDateObj(this.getEndDate(cmbTargetPeriodEndDate.getDate()));
        
        paramBean.setCalculationStartDateObj(this.getStartDate(cmbTargetPeriodStartDate.getDate()));
        paramBean.setCalculationEndDateObj(this.getEndDate(new Date()));
        
        int customerType = 0;
        if(this.rdoDrop.isSelected()){
            customerType = 1;
        } else if(this.rdoReappearance.isSelected()){
            customerType = 2;
        }
        
        if(customerType != 0 && (this.cmbTargetPeriodStartDate.getDate() == null)){
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "集計期間"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
        }
        
        if (chargeStaff.getSelectedIndex() > 0) {
            paramBean.setStaffId(((MstStaff)this.chargeStaff.getSelectedItem()).getStaffID());
        } else {
            paramBean.setStaffId(null);
        }
        
        int comingCycle = (this.rdoPraiseLimit.isSelected() ? 0 : 1);
        
        int customerCategory = 0;
        if(this.rdoNomn.isSelected()){
            customerCategory = 1;
        } else if(this.rdoFree.isSelected()) {
            customerCategory = 2;
        } else if(this.rdoNew.isSelected()){
            customerCategory = 3;
        }
        
        
        if( customersTable.getCellEditor() != null ) {
                customersTable.getCellEditor().stopCellEditing();
        }

	SwingUtil.clearTable(customersTable);
        
        DefaultTableModel	model	=	(DefaultTableModel)customersTable.getModel();       
        
        ReportLogic logic = new ReportLogic();
        ArrayList<HashMap> result = logic.searchReappearancePrediction(paramBean, customerType, comingCycle, customerCategory);
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

        long total = 0;
        long totalCount = 0;
        long nomnTotal = 0;
        long newTotal = 0;
        NumberFormat nf = NumberFormat.getInstance();
        
        for(HashMap row : result){
            Object[]	rowData	=	{   sdf.format((java.util.Date)row.get("last_visit_date")),
                                            row.get("customer_no"),
                                            getUserSearchButton((Integer)row.get("customer_id")),
                                            row.get("customer_name"),
                                            row.get("staff_name"),
                                            ((Boolean)row.get("is_charge") ? "●" : ""),
                                            (row.get("next_visit_date") == null ? "" : sdf.format((java.util.Date)row.get("next_visit_date"))),
                                            row.get("coming_cycle"),
                                            row.get("progress_day"),
                                            row.get("visit_count"),
                                            nf.format((Long)row.get("last_sales_value")),
                                            ((Boolean)row.get("mailaddress_enable") ? "●" : ""),
                                            true
                                    };
            
            total += ((Long)row.get("last_sales_value")).longValue();
            
            totalCount++;
            
            if((Boolean)row.get("is_charge")){
                nomnTotal++;
            }
            
            if(Integer.parseInt(row.get("visit_count").toString()) == 1){
                newTotal++;
            }
            
            resultList.add((MstCustomer)row.get("mc"));
            model.addRow(rowData);
        }
        
        SwingUtil.clearTable(totalTable);
        DefaultTableModel totalModel = (DefaultTableModel)totalTable.getModel();
        totalModel.addRow(new Object[]{totalCount, nomnTotal, totalCount - nomnTotal, newTotal, total});

        if (result.size() == 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1112),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

    }
    
    private void print(){
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

        // データの取得
        ReportParameterBean paramBean = new ReportParameterBean();
        
        String shopName = "";
        //グループ
        if(shop1.getSelectedItem() instanceof MstGroup)
        {
                MstGroup	mg	=	(MstGroup)shop1.getSelectedItem();
                paramBean.setTargetName(mg.getGroupName());
                paramBean.setShopIDList(mg.getShopIDListAll());
                shopName = mg.getGroupName();
        }
        //店舗
        else if(shop1.getSelectedItem() instanceof MstShop)
        {
                MstShop		ms	=	(MstShop)shop1.getSelectedItem();
                paramBean.setTargetName(ms.getShopName());
                paramBean.setShopIDList(ms.getShopID().toString());
                shopName = ms.getShopName();
        }

        paramBean.setTargetStartDateObj(this.getStartDate(cmbTargetPeriodStartDate.getDate()));
        paramBean.setTargetEndDateObj(this.getEndDate(cmbTargetPeriodEndDate.getDate()));
        
        paramBean.setCalculationStartDateObj(this.getStartDate(cmbTargetPeriodStartDate.getDate()));
        paramBean.setCalculationEndDateObj(this.getEndDate(new Date()));
	
        int customerType = 0;
        String targetTitle = "";
        String nextVisitDateTitle = "";
        if(this.rdoComing.isSelected()){
            customerType = 0;
            targetTitle = "来店予定者";
	    nextVisitDateTitle = "次回\n来店予定日";
        } else if(this.rdoDrop.isSelected()){
            customerType = 1;
            targetTitle = "失客候補者";
	    nextVisitDateTitle = "次回\n来店予定日";
        } else if(this.rdoReappearance.isSelected()){
            customerType = 2;
            targetTitle = "再来店者";
	    nextVisitDateTitle = "次回来店日";
        } 

        String targetCycle = "";
        String targetCycle2 = "";
        if(this.rdoPraiseLimit.isSelected()){
            targetCycle = "賞美期限";
            targetCycle2 = "賞美\n期限";
        } else if(this.rdoComingCycle.isSelected()){
            targetCycle = "来店周期";
            targetCycle2 = "来店\n周期";
        } 

	String targetCategory = "";
        if(this.rdoAll.isSelected()){
            targetCategory = "全て";
        } else if(this.rdoNomn.isSelected()){
            targetCategory = "指名客";
        } else if(this.rdoFree.isSelected()){
            targetCategory = "フリー客";
        } else if(this.rdoNew.isSelected()){
            targetCategory = "新規客";
        } 
	
        if(customerType != 0 && (this.cmbTargetPeriodStartDate.getDate() == null)){
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "集計期間"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
        }
        
        if (chargeStaff.getSelectedIndex() > 0) {
            paramBean.setStaffId(((MstStaff)this.chargeStaff.getSelectedItem()).getStaffID());
            paramBean.setStaffName(((MstStaff)this.chargeStaff.getSelectedItem()).getFullStaffName());
        } else {
            paramBean.setStaffId(null);
            paramBean.setStaffName(null);
        }
        
        int comingCycle = (this.rdoPraiseLimit.isSelected() ? 0 : 1);
        
        int customerCategory = 0;
        if(this.rdoNomn.isSelected()){
            customerCategory = 1;
        } else if(this.rdoFree.isSelected()) {
            customerCategory = 2;
        } else if(this.rdoNew.isSelected()){
            customerCategory = 3;
        }
        
        ReportLogic logic = new ReportLogic();
        ArrayList<HashMap> result = logic.searchReappearancePrediction(paramBean, customerType, comingCycle, customerCategory);
        
        // 出力対象データが0件の場合
        if (result.size() == 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }       
        
        // レポート作成準備
        HashMap<String,String> paramMap = new HashMap<String, String>();
        
        if(cmbTargetPeriodStartDate.getDate() != null){
            paramMap.put("CalculationStartDate", sdf.format(cmbTargetPeriodStartDate.getDate()));
            paramMap.put("CalculationEndDate", sdf.format(new Date()));
        } else {
            paramMap.put("CalculationStartDate", "");
            paramMap.put("CalculationEndDate", "");            
        }
        
        JExcelApi jx = new JExcelApi("動向分析");
        jx.setTemplateFile("/reports/動向分析.xls");

        // ヘッダ
        jx.setValue(2, 3, shopName);
        jx.setValue(2, 4, paramBean.getStaffName());
        jx.setValue(2, 5, targetTitle);
        jx.setValue(2, 6, sdf.format(cmbTargetPeriodStartDate.getDate()) + " 〜 " + sdf.format(cmbTargetPeriodEndDate.getDate()));
        jx.setValue(2, 7, targetCycle);
        jx.setValue(2, 8, targetCategory);
        jx.setValue(7, 13, nextVisitDateTitle);
        jx.setValue(8, 13, targetCycle2);

        int row = 14;

        // 追加行数セット
        jx.insertRow(row, result.size() - 1);

        // データセット
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        for (HashMap map : result){
            ReportParameterBean bean = new ReportParameterBean();
            MstCustomer mc = (MstCustomer)map.get("mc");

            if(map.get("last_visit_date") != null){
                jx.setValue(1, row, format.format((java.util.Date)map.get("last_visit_date")));
            }

            jx.setValue(2, row, map.get("customer_no"));
            jx.setValue(3, row, map.get("customer_name"));
            jx.setValue(5, row, map.get("staff_name"));
            jx.setValue(6, row, ((Boolean)map.get("is_charge")) ? "●" : "");
            
            if(map.get("next_visit_date") != null){
                jx.setValue(7, row, format.format((java.util.Date)map.get("next_visit_date")));
            }
            
            jx.setValue(8, row, Long.parseLong(map.get("coming_cycle").toString()));
            
            if(map.get("progress_day") != null){
                jx.setValue(9, row, Long.parseLong(map.get("progress_day").toString()));
            }

            if(map.get("visit_count") != null){
                jx.setValue(10, row, Long.parseLong(map.get("visit_count").toString()));
            }

            jx.setValue(11, row, Long.parseLong(map.get("last_sales_value").toString()));
            jx.setValue(12, row, ((Boolean)map.get("mailaddress_enable")) ? "●" : "");
            
            row++;
        }

        jx.removeRow(row);

        jx.openWorkbook();
        
    }
    
    /**
     * 主担当者をセットする。
     */
    private void setChargeStaff(String staffNo)
    {     
	chargeStaff.setSelectedIndex(0);

	for (int i = 1; i < chargeStaff.getItemCount(); i++) {
	    if (((MstStaff)chargeStaff.getItemAt(i)).getStaffNo().equals(staffNo)) {
		chargeStaff.setSelectedIndex(i);
		break;
	    }
	}
    }
    
    private void shop1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shop1ActionPerformed

    }//GEN-LAST:event_shop1ActionPerformed

	private void cmbTargetPeriodEndDateFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_cmbTargetPeriodEndDateFocusGained
	{//GEN-HEADEREND:event_cmbTargetPeriodEndDateFocusGained
            cmbTargetPeriodEndDate.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_cmbTargetPeriodEndDateFocusGained

	private void cmbTargetPeriodStartDateFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_cmbTargetPeriodStartDateFocusGained
	{//GEN-HEADEREND:event_cmbTargetPeriodStartDateFocusGained
            cmbTargetPeriodStartDate.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_cmbTargetPeriodStartDateFocusGained
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutput;
    private javax.swing.JComboBox chargeStaff;
    private javax.swing.JLabel chargeStaffLabel;
    private javax.swing.JTextField chargeStaffNo;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodEndDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodStartDate;
    private javax.swing.ButtonGroup comingCycleGroup;
    private javax.swing.ButtonGroup customerCategoryGroup;
    private javax.swing.ButtonGroup customerGroup;
    private com.geobeck.swing.JTableEx customersTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTargetPeriod;
    private javax.swing.JButton mailButton;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JButton postcardButton;
    private javax.swing.JRadioButton rdoAll;
    private javax.swing.JRadioButton rdoComing;
    private javax.swing.JRadioButton rdoComingCycle;
    private javax.swing.JRadioButton rdoDrop;
    private javax.swing.JRadioButton rdoFree;
    private javax.swing.JRadioButton rdoNew;
    private javax.swing.JRadioButton rdoNomn;
    private javax.swing.JRadioButton rdoPraiseLimit;
    private javax.swing.JRadioButton rdoReappearance;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton sealButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton selectAllButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop1;
    private javax.swing.JLabel shopLabel;
    private com.geobeck.swing.JTableEx totalTable;
    // End of variables declaration//GEN-END:variables
	
	private	StaffShopRankingFocusTraversalPolicy	ftp	=
			new StaffShopRankingFocusTraversalPolicy();
	
	
	private void setKeyListener()
	{
		cmbTargetPeriodEndDate.addKeyListener(SystemInfo.getMoveNextField());
		cmbTargetPeriodEndDate.addFocusListener(SystemInfo.getSelectText());
		cmbTargetPeriodStartDate.addKeyListener(SystemInfo.getMoveNextField());
		cmbTargetPeriodStartDate.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
            SwingUtil.setJTableHeaderRenderer(customersTable, SystemInfo.getTableHeaderRenderer());
            this.customersTable.setDefaultRenderer(Object.class, new TableCellRenderer());
            
            SwingUtil.setJTableHeaderRenderer(totalTable, SystemInfo.getTableHeaderRenderer());
            this.totalTable.setDefaultRenderer(Object.class, new TableCellRenderer());
            
            totalTable.setRowHeight(30);
        }
        
	/**
	 * ランキング画面用FocusTraversalPolicy
	 */
	private class StaffShopRankingFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponentStaffShopRankingFocusTraversalPolicy。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(cmbTargetPeriodStartDate))
			{
				return cmbTargetPeriodEndDate;
			}
			else if (aComponent.equals(mailButton))
			{
				return cmbTargetPeriodStartDate;
			}
			
			return cmbTargetPeriodStartDate;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(cmbTargetPeriodStartDate))
			{
				return mailButton;
			}
			else if (aComponent.equals(cmbTargetPeriodEndDate))
			{
				return cmbTargetPeriodStartDate;
			}
			
			return cmbTargetPeriodStartDate;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return cmbTargetPeriodStartDate;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return mailButton;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return cmbTargetPeriodStartDate;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return cmbTargetPeriodStartDate;
		}
		
	}
	
	/**
	 * 動向分析テーブル用のTableCellRenderer
	 */
	public class TableCellRenderer extends SelectTableCellRenderer
	{
            /** Creates a new instance of TableCellRenderer */
            public TableCellRenderer()
            {
                super();
            }

            
            /**
             * テーブルセルレンダリングを返します。
             * @param table JTable
             * @param value セルに割り当てる値
             * @param isSelected セルが選択されている場合は true
             * @param hasFocus フォーカスがある場合は true
             * @param row 行
             * @param column 列
             * @return テーブルセルレンダリング
             */
            public Component getTableCellRendererComponent(JTable table, Object value, 
                 boolean isSelected, boolean hasFocus, int row, int column){ 

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                switch(column)
                {
                        case 10:
                                super.setHorizontalAlignment(SwingConstants.RIGHT);
                                break;
                        default:
                                super.setHorizontalAlignment(SwingConstants.CENTER);
                                break;
                }
                
                return this; 
            } 

	
        }
        
        /**
         * ユーザ検索ボタンを取得する
         */
        private JButton getUserSearchButton(final Integer customerID)
        {
                JButton		searchButton	=	new JButton();
                searchButton.setBorderPainted(false);
                searchButton.setContentAreaFilled(false);
                searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
                searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
                searchButton.setSize(48, 25);
                searchButton.addActionListener(new java.awt.event.ActionListener()
                {
                        public void actionPerformed(java.awt.event.ActionEvent evt)
                        {
                            DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

                            MstCustomerPanel mcp = null;

                            try {

                                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                                mcp = new MstCustomerPanel(customerID, true, true);
                                SwingUtil.openAnchorDialog( parentFrame, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );

                            } finally {
                                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            }
                            
                            mcp = null;
                        }
                });
                return searchButton;
        }   

        /**
         * JTableの列幅を初期化する。
         */
        private void initTableColumnWidth()
        {
            //列の幅を設定する
            customersTable.getColumnModel().getColumn(0).setPreferredWidth(60);         //前回来店日
            customersTable.getColumnModel().getColumn(1).setPreferredWidth(60);        //顧客番号
            customersTable.getColumnModel().getColumn(2).setPreferredWidth(48);        //ボタン
            customersTable.getColumnModel().getColumn(3).setPreferredWidth(80);        //氏名
            customersTable.getColumnModel().getColumn(4).setPreferredWidth(60);        //担当者
            customersTable.getColumnModel().getColumn(5).setPreferredWidth(20);        //指名
            customersTable.getColumnModel().getColumn(6).setPreferredWidth(70);        //次回来店日
            customersTable.getColumnModel().getColumn(7).setPreferredWidth(20);        //来店周期
            customersTable.getColumnModel().getColumn(8).setPreferredWidth(20);        //経過日数
            customersTable.getColumnModel().getColumn(9).setPreferredWidth(20);        //来店回数
            customersTable.getColumnModel().getColumn(10).setPreferredWidth(40);        //前回技術売り上げ
            customersTable.getColumnModel().getColumn(11).setPreferredWidth(20);        //メールアドレス有無
            customersTable.getColumnModel().getColumn(12).setPreferredWidth(20);        // 送信対象

        }       

        // 日付間の日数を求める
        private int getDays(Date start, Date end) {
            long lStart = start.getTime();
            long lEnd = end.getTime();
            long result = (lEnd - lStart) / (1000*60*60*24);
            return new Long(result).intValue();
        }
        
}
