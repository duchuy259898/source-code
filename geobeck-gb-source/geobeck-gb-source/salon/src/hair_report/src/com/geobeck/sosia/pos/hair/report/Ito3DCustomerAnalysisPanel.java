/*
 * Ito3DCustomerAnalysisPanel.java
 *
 * Created on 2010/03/05, 12:00
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.util.*;
import javax.swing.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.mail.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.util.SQLUtil;
import java.math.BigDecimal;
import java.sql.SQLException;
import javax.swing.text.JTextComponent;
import javax.swing.text.PlainDocument;
import org.apache.commons.lang.math.NumberUtils;

/**
 *
 * @author  geobeck
 */
public class Ito3DCustomerAnalysisPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx implements SelectMailAddressDialogOpener
{
	private Integer selectedAddress = -1;
        private ArrayList<MstCustomer> resultList = new ArrayList<MstCustomer>();
        
        private ReportParameterBean paramBean = null;
        
        private Calendar calStart = null;
        private Calendar calEnd = null;
        
        
        private	Ito3DCustomerAnalysisFocusTraversalPolicy	ftp	=
			new Ito3DCustomerAnalysisFocusTraversalPolicy();
        
        /** Creates new form StaffShopRankingPanel */
	public Ito3DCustomerAnalysisPanel()
	{
            initComponents();
            addMouseCursorChange();
            this.setSize(820,680);
            this.setPath("帳票出力");
            this.setTitle("カルテ分析");
            this.setKeyListener();

            this.initChargeStaff();

            // 顧客共有の有無によりグループ表示を切り替える
            if (SystemInfo.getSetteing().isShareCustomer()) {
                SystemInfo.initGroupShopComponents(shop, 3);
            } else {
                SystemInfo.initGroupShopComponents(shop, 2);
            }

            //初期化処理
            this.init();
         
            dummy.setVisible(false);
            
            if (SystemInfo.getAccountSetting().getReportPriceType() == 0) {
                rdoTaxBlank.setSelected(false);
                rdoTaxUnit.setSelected(true);
            } else {
                rdoTaxBlank.setSelected(true);
                rdoTaxUnit.setSelected(false);
            }
            
	}
        
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
            SystemInfo.addMouseCursorChange(validCount1);
            SystemInfo.addMouseCursorChange(validCount2);
            SystemInfo.addMouseCursorChange(validCount3);
            SystemInfo.addMouseCursorChange(validCount4);
            
            SystemInfo.addMouseCursorChange(searchButton);
            SystemInfo.addMouseCursorChange(newCount);
            
            SystemInfo.addMouseCursorChange(leftBottomCount);
            SystemInfo.addMouseCursorChange(leftMiddleCount);
            SystemInfo.addMouseCursorChange(leftTopCount);
            
            SystemInfo.addMouseCursorChange(centerBottomCount);
            SystemInfo.addMouseCursorChange(centerMiddleCount);
            SystemInfo.addMouseCursorChange(centerTopCount);
            
            SystemInfo.addMouseCursorChange(rightBottomCount);
            SystemInfo.addMouseCursorChange(rightMiddleCount);
            SystemInfo.addMouseCursorChange(rightTopCount);
            
            SystemInfo.addMouseCursorChange(vipCount);
	}
        
    	public void setSelectedAddress(Integer selectedAddress)
	{
            this.selectedAddress = selectedAddress;
	}
	    
	/**
	 * 主担当を取得する
	 */
	private void initChargeStaff()
	{
	    chargeStaff.removeAllItems();

	    MstStaffs staffs = new MstStaffs();

	    staffs.setShopIDList(SystemInfo.getCurrentShop().getShopID().toString());

	    try
	    {
		staffs.load(SystemInfo.getConnection(), true);
	    }
	    catch(java.sql.SQLException e)
	    {
		//SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }

	    for (MstStaff ms : staffs) {
		chargeStaff.addItem(ms);
	    }

	    chargeStaff.setSelectedIndex(0);
	}	
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        taxGroup = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        chargeStaffLabel = new javax.swing.JLabel();
        chargeStaffNo = new javax.swing.JTextField();
        chargeStaff = new javax.swing.JComboBox();
        lblTargetDate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        endMonth = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        startMonth = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        lblTax = new javax.swing.JLabel();
        rdoTaxUnit = new javax.swing.JRadioButton();
        rdoTaxBlank = new javax.swing.JRadioButton();
        searchButton = new javax.swing.JButton();
        imagePanel1 = new com.geobeck.swing.ImagePanel();
        dummy = new javax.swing.JLabel();
        price3 = new com.geobeck.swing.JTextFieldEx();
        ((PlainDocument)price3.getDocument()).setDocumentFilter(new CustomFilter(3, CustomFilter.NUMBER));
        price2 = new com.geobeck.swing.JTextFieldEx();
        ((PlainDocument)price2.getDocument()).setDocumentFilter(new CustomFilter(3, CustomFilter.NUMBER));
        price1 = new com.geobeck.swing.JTextFieldEx();
        ((PlainDocument)price1.getDocument()).setDocumentFilter(new CustomFilter(3, CustomFilter.NUMBER));
        leftBottomCount = new com.geobeck.swing.JFormattedTextFieldEx();
        leftBottomRatio = new com.geobeck.swing.JFormattedTextFieldEx();
        leftMiddleCount = new com.geobeck.swing.JFormattedTextFieldEx();
        leftMiddleRatio = new com.geobeck.swing.JFormattedTextFieldEx();
        newCount = new com.geobeck.swing.JFormattedTextFieldEx();
        centerMiddleCount = new com.geobeck.swing.JFormattedTextFieldEx();
        centerMiddleRatio = new com.geobeck.swing.JFormattedTextFieldEx();
        rightMiddleCount = new com.geobeck.swing.JFormattedTextFieldEx();
        rightMiddleRatio = new com.geobeck.swing.JFormattedTextFieldEx();
        centerTopCount = new com.geobeck.swing.JFormattedTextFieldEx();
        centerTopRatio = new com.geobeck.swing.JFormattedTextFieldEx();
        rightTopCount = new com.geobeck.swing.JFormattedTextFieldEx();
        rightTopRatio = new com.geobeck.swing.JFormattedTextFieldEx();
        vipCount = new com.geobeck.swing.JFormattedTextFieldEx();
        vipRatio = new com.geobeck.swing.JFormattedTextFieldEx();
        validCount1 = new com.geobeck.swing.JFormattedTextFieldEx();
        validRatio1 = new com.geobeck.swing.JFormattedTextFieldEx();
        validCount2 = new com.geobeck.swing.JFormattedTextFieldEx();
        validRatio2 = new com.geobeck.swing.JFormattedTextFieldEx();
        validCount3 = new com.geobeck.swing.JFormattedTextFieldEx();
        validRatio3 = new com.geobeck.swing.JFormattedTextFieldEx();
        validCount4 = new com.geobeck.swing.JFormattedTextFieldEx();
        validRatio4 = new com.geobeck.swing.JFormattedTextFieldEx();
        leftTopCount = new com.geobeck.swing.JFormattedTextFieldEx();
        leftTopRatio = new com.geobeck.swing.JFormattedTextFieldEx();
        centerBottomCount = new com.geobeck.swing.JFormattedTextFieldEx();
        rightBottomCount = new com.geobeck.swing.JFormattedTextFieldEx();
        centerBottomRatio = new com.geobeck.swing.JFormattedTextFieldEx();
        rightBottomRatio = new com.geobeck.swing.JFormattedTextFieldEx();
        endYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
            endYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));

    startYear = new javax.swing.JComboBox();
    ((PlainDocument)((JTextComponent)
        startYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
    new CustomFilter(4, CustomFilter.NUMBER));

    setFocusCycleRoot(true);
    setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.setLayout(null);

    pnlMain.setFocusCycleRoot(true);
    pnlMain.setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.setOpaque(false);
    shopLabel.setText("\u5e97\u8217");
    pnlMain.add(shopLabel);
    shopLabel.setBounds(20, 10, 50, 22);

    shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    shop.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            shopActionPerformed(evt);
        }
    });

    pnlMain.add(shop);
    shop.setBounds(90, 10, 210, 22);

    chargeStaffLabel.setText("\u4e3b\u62c5\u5f53\u8005");
    pnlMain.add(chargeStaffLabel);
    chargeStaffLabel.setBounds(20, 40, 50, 25);

    chargeStaffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    chargeStaffNo.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            chargeStaffNoFocusLost(evt);
        }
    });

    pnlMain.add(chargeStaffNo);
    chargeStaffNo.setBounds(90, 40, 40, 25);

    chargeStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    chargeStaff.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            chargeStaffActionPerformed(evt);
        }
    });

    pnlMain.add(chargeStaff);
    chargeStaff.setBounds(140, 40, 160, 24);

    lblTargetDate.setText("\u5bfe\u8c61\u671f\u9593");
    lblTargetDate.setFocusCycleRoot(true);
    lblTargetDate.setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.add(lblTargetDate);
    lblTargetDate.setBounds(20, 80, 50, 22);

    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("\uff5e");
    jLabel1.setFocusCycleRoot(true);
    jLabel1.setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.add(jLabel1);
    jLabel1.setBounds(230, 80, 20, 22);

    jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel5.setText("\u5e74");
    pnlMain.add(jLabel5);
    jLabel5.setBounds(150, 80, 20, 22);

    endMonth.setMaximumRowCount(12);
    endMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    endMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    endMonth.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            endMonthActionPerformed(evt);
        }
    });

    pnlMain.add(endMonth);
    endMonth.setBounds(330, 80, 40, 22);

    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel6.setText("\u6708");
    pnlMain.add(jLabel6);
    jLabel6.setBounds(210, 80, 20, 22);

    jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel7.setText("\u5e74");
    pnlMain.add(jLabel7);
    jLabel7.setBounds(310, 80, 20, 22);

    startMonth.setMaximumRowCount(12);
    startMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    startMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    startMonth.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            startMonthActionPerformed(evt);
        }
    });

    pnlMain.add(startMonth);
    startMonth.setBounds(170, 80, 40, 22);

    jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel8.setText("\u6708");
    pnlMain.add(jLabel8);
    jLabel8.setBounds(370, 80, 20, 22);

    lblTax.setText("\u7a0e\u533a\u5206");
    lblTax.setFocusCycleRoot(true);
    pnlMain.add(lblTax);
    lblTax.setBounds(20, 110, 60, 20);

    taxGroup.add(rdoTaxUnit);
    rdoTaxUnit.setSelected(true);
    rdoTaxUnit.setText("\u7a0e\u8fbc");
    rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoTaxUnit.setFocusCycleRoot(true);
    rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoTaxUnit.setOpaque(false);
    pnlMain.add(rdoTaxUnit);
    rdoTaxUnit.setBounds(90, 110, 41, 20);

    taxGroup.add(rdoTaxBlank);
    rdoTaxBlank.setText("\u7a0e\u629c");
    rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoTaxBlank.setFocusCycleRoot(true);
    rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoTaxBlank.setOpaque(false);
    pnlMain.add(rdoTaxBlank);
    rdoTaxBlank.setBounds(150, 110, 41, 20);

    searchButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
    searchButton.setBorderPainted(false);
    searchButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
    searchButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchButtonActionPerformed(evt);
        }
    });

    pnlMain.add(searchButton);
    searchButton.setBounds(400, 60, 92, 25);

    imagePanel1.setLayout(null);

    imagePanel1.setImage(SystemInfo.getImageIcon("/ito_3d_customer_analysis.jpg"));
    imagePanel1.setOpaque(false);
    dummy.setIcon(new javax.swing.ImageIcon("C:\\SOSIA POS\\src\\images\\src\\images\\orange\\ito_3d_customer_analysis.jpg"));
    dummy.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    imagePanel1.add(dummy);
    dummy.setBounds(0, 0, 750, 550);

    price3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    price3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    price3.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    imagePanel1.add(price3);
    price3.setBounds(0, 175, 28, 25);

    price2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    price2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    price2.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    imagePanel1.add(price2);
    price2.setBounds(0, 279, 28, 25);

    price1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    price1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    price1.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    imagePanel1.add(price1);
    price1.setBounds(0, 383, 28, 25);

    leftBottomCount.setBorder(null);
    leftBottomCount.setEditable(false);
    leftBottomCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    leftBottomCount.setText("0");
    leftBottomCount.setFocusable(false);
    leftBottomCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 15));
    leftBottomCount.setOpaque(false);
    imagePanel1.add(leftBottomCount);
    leftBottomCount.setBounds(150, 448, 50, 23);

    leftBottomRatio.setBorder(null);
    leftBottomRatio.setEditable(false);
    leftBottomRatio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    leftBottomRatio.setText("0.0");
    leftBottomRatio.setFocusable(false);
    leftBottomRatio.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    leftBottomRatio.setOpaque(false);
    imagePanel1.add(leftBottomRatio);
    leftBottomRatio.setBounds(150, 479, 50, 14);

    leftMiddleCount.setBorder(null);
    leftMiddleCount.setEditable(false);
    leftMiddleCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    leftMiddleCount.setText("0");
    leftMiddleCount.setFocusable(false);
    leftMiddleCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 15));
    leftMiddleCount.setOpaque(false);
    imagePanel1.add(leftMiddleCount);
    leftMiddleCount.setBounds(150, 344, 50, 23);

    leftMiddleRatio.setBorder(null);
    leftMiddleRatio.setEditable(false);
    leftMiddleRatio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    leftMiddleRatio.setText("0.0");
    leftMiddleRatio.setFocusable(false);
    leftMiddleRatio.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    leftMiddleRatio.setOpaque(false);
    imagePanel1.add(leftMiddleRatio);
    leftMiddleRatio.setBounds(150, 375, 50, 14);

    newCount.setBorder(null);
    newCount.setEditable(false);
    newCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    newCount.setText("0");
    newCount.setFocusable(false);
    newCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 15));
    newCount.setOpaque(false);
    imagePanel1.add(newCount);
    newCount.setBounds(64, 472, 50, 23);

    centerMiddleCount.setBorder(null);
    centerMiddleCount.setEditable(false);
    centerMiddleCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    centerMiddleCount.setText("0");
    centerMiddleCount.setFocusable(false);
    centerMiddleCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 15));
    centerMiddleCount.setOpaque(false);
    imagePanel1.add(centerMiddleCount);
    centerMiddleCount.setBounds(312, 344, 50, 23);

    centerMiddleRatio.setBorder(null);
    centerMiddleRatio.setEditable(false);
    centerMiddleRatio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    centerMiddleRatio.setText("0.0");
    centerMiddleRatio.setFocusable(false);
    centerMiddleRatio.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    centerMiddleRatio.setOpaque(false);
    imagePanel1.add(centerMiddleRatio);
    centerMiddleRatio.setBounds(312, 375, 50, 14);

    rightMiddleCount.setBorder(null);
    rightMiddleCount.setEditable(false);
    rightMiddleCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    rightMiddleCount.setText("0");
    rightMiddleCount.setFocusable(false);
    rightMiddleCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 15));
    rightMiddleCount.setOpaque(false);
    imagePanel1.add(rightMiddleCount);
    rightMiddleCount.setBounds(475, 344, 50, 23);

    rightMiddleRatio.setBorder(null);
    rightMiddleRatio.setEditable(false);
    rightMiddleRatio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    rightMiddleRatio.setText("0.0");
    rightMiddleRatio.setFocusable(false);
    rightMiddleRatio.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    rightMiddleRatio.setOpaque(false);
    imagePanel1.add(rightMiddleRatio);
    rightMiddleRatio.setBounds(475, 375, 50, 14);

    centerTopCount.setBorder(null);
    centerTopCount.setEditable(false);
    centerTopCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    centerTopCount.setText("0");
    centerTopCount.setFocusable(false);
    centerTopCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 15));
    centerTopCount.setOpaque(false);
    imagePanel1.add(centerTopCount);
    centerTopCount.setBounds(312, 239, 50, 23);

    centerTopRatio.setBorder(null);
    centerTopRatio.setEditable(false);
    centerTopRatio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    centerTopRatio.setText("0.0");
    centerTopRatio.setFocusable(false);
    centerTopRatio.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    centerTopRatio.setOpaque(false);
    imagePanel1.add(centerTopRatio);
    centerTopRatio.setBounds(312, 270, 50, 14);

    rightTopCount.setBorder(null);
    rightTopCount.setEditable(false);
    rightTopCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    rightTopCount.setText("0");
    rightTopCount.setFocusable(false);
    rightTopCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 15));
    rightTopCount.setOpaque(false);
    imagePanel1.add(rightTopCount);
    rightTopCount.setBounds(475, 239, 50, 23);

    rightTopRatio.setBorder(null);
    rightTopRatio.setEditable(false);
    rightTopRatio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    rightTopRatio.setText("0.0");
    rightTopRatio.setFocusable(false);
    rightTopRatio.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    rightTopRatio.setOpaque(false);
    imagePanel1.add(rightTopRatio);
    rightTopRatio.setBounds(475, 270, 50, 14);

    vipCount.setBorder(null);
    vipCount.setEditable(false);
    vipCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    vipCount.setText("0");
    vipCount.setFocusable(false);
    vipCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 15));
    vipCount.setOpaque(false);
    imagePanel1.add(vipCount);
    vipCount.setBounds(475, 135, 50, 23);

    vipRatio.setBorder(null);
    vipRatio.setEditable(false);
    vipRatio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    vipRatio.setText("0.0");
    vipRatio.setFocusable(false);
    vipRatio.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    vipRatio.setOpaque(false);
    imagePanel1.add(vipRatio);
    vipRatio.setBounds(475, 166, 50, 14);

    validCount1.setBorder(null);
    validCount1.setEditable(false);
    validCount1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    validCount1.setText("0");
    validCount1.setFocusable(false);
    validCount1.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    validCount1.setOpaque(false);
    imagePanel1.add(validCount1);
    validCount1.setBounds(313, 88, 50, 14);

    validRatio1.setBorder(null);
    validRatio1.setEditable(false);
    validRatio1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    validRatio1.setText("0.0");
    validRatio1.setFocusable(false);
    validRatio1.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    validRatio1.setOpaque(false);
    imagePanel1.add(validRatio1);
    validRatio1.setBounds(413, 88, 50, 14);

    validCount2.setBorder(null);
    validCount2.setEditable(false);
    validCount2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    validCount2.setText("0");
    validCount2.setFocusable(false);
    validCount2.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    validCount2.setOpaque(false);
    imagePanel1.add(validCount2);
    validCount2.setBounds(332, 56, 50, 14);

    validRatio2.setBorder(null);
    validRatio2.setEditable(false);
    validRatio2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    validRatio2.setText("0.0");
    validRatio2.setFocusable(false);
    validRatio2.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    validRatio2.setOpaque(false);
    imagePanel1.add(validRatio2);
    validRatio2.setBounds(432, 56, 50, 14);

    validCount3.setBorder(null);
    validCount3.setEditable(false);
    validCount3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    validCount3.setText("0");
    validCount3.setFocusable(false);
    validCount3.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    validCount3.setOpaque(false);
    imagePanel1.add(validCount3);
    validCount3.setBounds(352, 32, 50, 14);

    validRatio3.setBorder(null);
    validRatio3.setEditable(false);
    validRatio3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    validRatio3.setText("0.0");
    validRatio3.setFocusable(false);
    validRatio3.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    validRatio3.setOpaque(false);
    imagePanel1.add(validRatio3);
    validRatio3.setBounds(452, 32, 50, 14);

    validCount4.setBorder(null);
    validCount4.setEditable(false);
    validCount4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    validCount4.setText("0");
    validCount4.setFocusable(false);
    validCount4.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    validCount4.setOpaque(false);
    imagePanel1.add(validCount4);
    validCount4.setBounds(372, 1, 50, 14);

    validRatio4.setBorder(null);
    validRatio4.setEditable(false);
    validRatio4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    validRatio4.setText("0.0");
    validRatio4.setFocusable(false);
    validRatio4.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    validRatio4.setOpaque(false);
    imagePanel1.add(validRatio4);
    validRatio4.setBounds(472, 1, 50, 14);

    leftTopCount.setBorder(null);
    leftTopCount.setEditable(false);
    leftTopCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    leftTopCount.setText("0");
    leftTopCount.setFocusable(false);
    leftTopCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 15));
    leftTopCount.setOpaque(false);
    imagePanel1.add(leftTopCount);
    leftTopCount.setBounds(150, 239, 50, 23);

    leftTopRatio.setBorder(null);
    leftTopRatio.setEditable(false);
    leftTopRatio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    leftTopRatio.setText("0.0");
    leftTopRatio.setFocusable(false);
    leftTopRatio.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    leftTopRatio.setOpaque(false);
    imagePanel1.add(leftTopRatio);
    leftTopRatio.setBounds(150, 270, 50, 14);

    centerBottomCount.setBorder(null);
    centerBottomCount.setEditable(false);
    centerBottomCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    centerBottomCount.setText("0");
    centerBottomCount.setFocusable(false);
    centerBottomCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 15));
    centerBottomCount.setOpaque(false);
    imagePanel1.add(centerBottomCount);
    centerBottomCount.setBounds(312, 448, 50, 23);

    rightBottomCount.setBorder(null);
    rightBottomCount.setEditable(false);
    rightBottomCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    rightBottomCount.setText("0");
    rightBottomCount.setFocusable(false);
    rightBottomCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 15));
    rightBottomCount.setOpaque(false);
    imagePanel1.add(rightBottomCount);
    rightBottomCount.setBounds(475, 448, 50, 23);

    centerBottomRatio.setBorder(null);
    centerBottomRatio.setEditable(false);
    centerBottomRatio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    centerBottomRatio.setText("0.0");
    centerBottomRatio.setFocusable(false);
    centerBottomRatio.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    centerBottomRatio.setOpaque(false);
    imagePanel1.add(centerBottomRatio);
    centerBottomRatio.setBounds(312, 479, 50, 14);

    rightBottomRatio.setBorder(null);
    rightBottomRatio.setEditable(false);
    rightBottomRatio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    rightBottomRatio.setText("0.0");
    rightBottomRatio.setFocusable(false);
    rightBottomRatio.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 13));
    rightBottomRatio.setOpaque(false);
    imagePanel1.add(rightBottomRatio);
    rightBottomRatio.setBounds(475, 479, 50, 14);

    pnlMain.add(imagePanel1);
    imagePanel1.setBounds(40, 130, 780, 550);

    endYear.setEditable(true);
    endYear.setMaximumRowCount(12);
    endYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    endYear.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            endYearActionPerformed(evt);
        }
    });

    pnlMain.add(endYear);
    endYear.setBounds(250, 80, 60, 22);

    startYear.setEditable(true);
    startYear.setMaximumRowCount(12);
    startYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    startYear.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            startYearActionPerformed(evt);
        }
    });

    pnlMain.add(startYear);
    startYear.setBounds(90, 80, 60, 22);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(pnlMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(pnlMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
    );
    }// </editor-fold>//GEN-END:initComponents

    private void endYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endYearActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_endYearActionPerformed

    private void startYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startYearActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_startYearActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        if (inputCheck()) {
            searchButton.setCursor(null);
            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                this.search();
            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void endMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endMonthActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_endMonthActionPerformed

    private void startMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMonthActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_startMonthActionPerformed

    private void chargeStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargeStaffActionPerformed

	MstStaff ms= (MstStaff)chargeStaff.getSelectedItem();
        
        if (ms != null) {
            if (ms.getStaffID() != null) {
		chargeStaffNo.setText(ms.getStaffNo());
	    }

	    if (chargeStaff.getSelectedIndex() == 0) {
                chargeStaffNo.setText("");
            }
        }
    }//GEN-LAST:event_chargeStaffActionPerformed

    private void chargeStaffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chargeStaffNoFocusLost

	if (!chargeStaffNo.getText().equals("")) {
            this.setChargeStaff(chargeStaffNo.getText());
        }else{
            chargeStaff.setSelectedIndex(0);
        }
    }//GEN-LAST:event_chargeStaffNoFocusLost

    private boolean checkDuplicateCustomer(ArrayList<MstCustomer> selectedArray, MstCustomer customer){
        for(MstCustomer mc : selectedArray){
            if(mc.getCustomerID().intValue() == customer.getCustomerID().intValue()){
                return true;
            }
        }
        return false;
    }
    
    private Date getStartDate(Date date){
        
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        
        return cal.getTime();
    }
    
    private Date getEndDate(Date date){
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);
        
        return cal.getTime();
    }
    
    /**
     * 主担当者をセットする。
     */
    private void setChargeStaff(String staffNo)
    {     
	chargeStaff.setSelectedIndex(0);

	for (int i = 1; i < chargeStaff.getItemCount(); i++) {
	    if (((MstStaff)chargeStaff.getItemAt(i)).getStaffNo().equals(staffNo)) {
		chargeStaff.setSelectedIndex(i);
		break;
	    }
	}
    }
    
    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed

    }//GEN-LAST:event_shopActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.geobeck.swing.JFormattedTextFieldEx centerBottomCount;
    private com.geobeck.swing.JFormattedTextFieldEx centerBottomRatio;
    private com.geobeck.swing.JFormattedTextFieldEx centerMiddleCount;
    private com.geobeck.swing.JFormattedTextFieldEx centerMiddleRatio;
    private com.geobeck.swing.JFormattedTextFieldEx centerTopCount;
    private com.geobeck.swing.JFormattedTextFieldEx centerTopRatio;
    private javax.swing.JComboBox chargeStaff;
    private javax.swing.JLabel chargeStaffLabel;
    private javax.swing.JTextField chargeStaffNo;
    private javax.swing.JLabel dummy;
    private javax.swing.JComboBox endMonth;
    private javax.swing.JComboBox endYear;
    private com.geobeck.swing.ImagePanel imagePanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblTargetDate;
    private javax.swing.JLabel lblTax;
    private com.geobeck.swing.JFormattedTextFieldEx leftBottomCount;
    private com.geobeck.swing.JFormattedTextFieldEx leftBottomRatio;
    private com.geobeck.swing.JFormattedTextFieldEx leftMiddleCount;
    private com.geobeck.swing.JFormattedTextFieldEx leftMiddleRatio;
    private com.geobeck.swing.JFormattedTextFieldEx leftTopCount;
    private com.geobeck.swing.JFormattedTextFieldEx leftTopRatio;
    private com.geobeck.swing.JFormattedTextFieldEx newCount;
    private javax.swing.JPanel pnlMain;
    private com.geobeck.swing.JTextFieldEx price1;
    private com.geobeck.swing.JTextFieldEx price2;
    private com.geobeck.swing.JTextFieldEx price3;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private com.geobeck.swing.JFormattedTextFieldEx rightBottomCount;
    private com.geobeck.swing.JFormattedTextFieldEx rightBottomRatio;
    private com.geobeck.swing.JFormattedTextFieldEx rightMiddleCount;
    private com.geobeck.swing.JFormattedTextFieldEx rightMiddleRatio;
    private com.geobeck.swing.JFormattedTextFieldEx rightTopCount;
    private com.geobeck.swing.JFormattedTextFieldEx rightTopRatio;
    private javax.swing.JButton searchButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JComboBox startMonth;
    private javax.swing.JComboBox startYear;
    private javax.swing.ButtonGroup taxGroup;
    private com.geobeck.swing.JFormattedTextFieldEx validCount1;
    private com.geobeck.swing.JFormattedTextFieldEx validCount2;
    private com.geobeck.swing.JFormattedTextFieldEx validCount3;
    private com.geobeck.swing.JFormattedTextFieldEx validCount4;
    private com.geobeck.swing.JFormattedTextFieldEx validRatio1;
    private com.geobeck.swing.JFormattedTextFieldEx validRatio2;
    private com.geobeck.swing.JFormattedTextFieldEx validRatio3;
    private com.geobeck.swing.JFormattedTextFieldEx validRatio4;
    private com.geobeck.swing.JFormattedTextFieldEx vipCount;
    private com.geobeck.swing.JFormattedTextFieldEx vipRatio;
    // End of variables declaration//GEN-END:variables
	
    private void setKeyListener()
    {
        startYear.addKeyListener(SystemInfo.getMoveNextField());
        endYear.addKeyListener(SystemInfo.getMoveNextField());

        startMonth.addKeyListener(SystemInfo.getMoveNextField());
        endMonth.addKeyListener(SystemInfo.getMoveNextField());

        price1.addKeyListener(SystemInfo.getMoveNextField());
        price1.addFocusListener(SystemInfo.getSelectText());
        price2.addKeyListener(SystemInfo.getMoveNextField());
        price2.addFocusListener(SystemInfo.getSelectText());
        price3.addKeyListener(SystemInfo.getMoveNextField());
        price3.addFocusListener(SystemInfo.getSelectText());

    }

    /**
     * 初期化処理を行う。
     */
    private void init()
    {
        Calendar cal = Calendar.getInstance();
        int nowYear = cal.get(Calendar.YEAR);
        int nowMonth = cal.get(Calendar.MONTH); 

        initYearCombo(startYear, nowYear - 1);
        if (nowMonth < 11) {
            this.startMonth.setSelectedIndex(nowMonth + 1);
        }else {
            this.startMonth.setSelectedIndex(0);
        }

        initYearCombo(endYear, nowYear);
        this.endMonth.setSelectedIndex(nowMonth);
        
        // 設定値の読み込み
        try {

            String sql = "";
            sql = "select * from mst_ito3d_setting where shop_id = " + SystemInfo.getCurrentShop().getShopID();

            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql);
            if (rs.next()) {

                price1.setText(rs.getString("price1"));
                price2.setText(rs.getString("price2"));
                price3.setText(rs.getString("price3"));

            } else {

                sql = "insert into mst_ito3d_setting (shop_id) values(" + SystemInfo.getCurrentShop().getShopID() + ")";
                SystemInfo.getConnection().executeUpdate(sql);
            }

            rs.close();

        } catch (Exception e) {
        }

        addMouseListener(validCount1);
        addMouseListener(validCount2);
        addMouseListener(validCount3);
        addMouseListener(validCount4);
        
        addMouseListener(newCount);
        addMouseListener(newCount);
        
        addMouseListener(leftBottomCount);
        addMouseListener(leftMiddleCount);
        addMouseListener(leftTopCount);
        
        addMouseListener(centerBottomCount);
        addMouseListener(centerMiddleCount);
        addMouseListener(centerTopCount);
        
        addMouseListener(rightBottomCount);
        addMouseListener(rightMiddleCount);
        addMouseListener(rightTopCount);
        addMouseListener(vipCount);
        
    }

    private void addMouseListener(final JComponent c) {
        c.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showIto3DCustomerListPanel(c);
            }
        });
    }
    
    private void showIto3DCustomerListPanel(final JComponent c) {

        if (((JTextField)c).getText().equals("0")) {

            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1112),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        Ito3DCustomerListPanel ito3d = new Ito3DCustomerListPanel();
        
        ito3d.setTarget(shop.getSelectedItem());

        if (chargeStaff.getSelectedIndex() > 0) {
            ito3d.setStaffName(((MstStaff)chargeStaff.getSelectedItem()).getFullStaffName());
        } else {
            ito3d.setStaffName("指定なし");
        }
        ito3d.setTargetPeriodStartDate(calStart.get(Calendar.YEAR) + "年" + (calStart.get(Calendar.MONTH) + 1) + "月");
        ito3d.setTargetPeriodEndDate(calEnd.get(Calendar.YEAR) + "年" + (calEnd.get(Calendar.MONTH) + 1) + "月");
        ito3d.setTaxName(rdoTaxUnit.isSelected() ? "税込" : "税抜");

        long p1 = Long.parseLong(price1.getText()) * 10000;
        long p2 = Long.parseLong(price2.getText()) * 10000;
        long p3 = Long.parseLong(price3.getText()) * 10000;

        ito3d.setTableName("wk_ito3d");
        
        if (c.equals(newCount)) {

            newCount.setCursor(null);
            ito3d.setCategoryName("初回客");
            ito3d.setWhereCondition("total_visit_num = 1 and value <= " + p1);

        } else if (c.equals(leftBottomCount)) {

            leftBottomCount.setCursor(null);
            ito3d.setCategoryName("身だしなみ客");
            ito3d.setWhereCondition("total_visit_num > 1 and visit_num <= 3 and value <= " + p1);

        } else if (c.equals(leftMiddleCount)) {

            leftMiddleCount.setCursor(null);
            ito3d.setCategoryName("悩み客・時間がない客");
            ito3d.setWhereCondition("visit_num between 1 and 3 and value > " + p1 + " and value <= " + p2);

        } else if (c.equals(leftTopCount)) {

            leftTopCount.setCursor(null);
            ito3d.setCategoryName("1〜3回、" + price2.getText() + "〜" + price3.getText() + "万円");
            ito3d.setWhereCondition("visit_num between 1 and 3 and value > " + p2 + " and value <= " + p3);

        } else if (c.equals(centerBottomCount)) {

            centerBottomCount.setCursor(null);
            ito3d.setCategoryName("4〜6回、" + price1.getText() + "万円以下");
            ito3d.setWhereCondition("visit_num between 4 and 6 and value <= " + p1);
            
        } else if (c.equals(centerMiddleCount)) {

            centerMiddleCount.setCursor(null);
            ito3d.setCategoryName("おしゃれ客");
            ito3d.setWhereCondition("visit_num between 4 and 6 and value > " + p1 + " and value <= " + p2);

        } else if (c.equals(centerTopCount)) {

            centerTopCount.setCursor(null);
            ito3d.setCategoryName("購買客");
            ito3d.setWhereCondition("visit_num between 4 and 6 and value > " + p2 + " and value <= " + p3);

        } else if (c.equals(rightBottomCount)) {

            rightBottomCount.setCursor(null);
            ito3d.setCategoryName("7〜10回、" + price1.getText() + "万円以下");
            ito3d.setWhereCondition("visit_num between 7 and 10 and value <= " + p1);
            
        } else if (c.equals(rightMiddleCount)) {

            rightMiddleCount.setCursor(null);
            ito3d.setCategoryName("白髪染色");
            ito3d.setWhereCondition("visit_num between 7 and 10 and value > " + p1 + " and value <= " + p2);

        } else if (c.equals(rightTopCount)) {

            rightTopCount.setCursor(null);
            ito3d.setCategoryName("上顧客");
            ito3d.setWhereCondition("visit_num between 7 and 10 and value > " + p2 + " and value <= " + p3);

        } else if (c.equals(vipCount)) {

            vipCount.setCursor(null);
            ito3d.setCategoryName("VIP客");
            ito3d.setWhereCondition("visit_num > 10 or value > " + p3);
            
        } else {
        
            ito3d.setTableName("wk_ito3d_valid");

            int months = getMonthsBetween(calStart, calEnd);
            Calendar calTmp = (Calendar)calStart.clone();
            calTmp.add(Calendar.MONTH, months - 1);
            Calendar cal1 = (Calendar)calTmp.clone();
            Calendar cal2 = (Calendar)calTmp.clone();

            //-----------------------------
            // 稼働客
            //-----------------------------
            cal1.add(Calendar.MONTH, -3);
            cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
            if (c.equals(validCount1)) {
                vipCount.setCursor(null);
                ito3d.setCategoryName("稼働客");
                ito3d.setWhereCondition("sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()));
            }

            //-----------------------------
            // 現役客
            //-----------------------------
            cal1.add(Calendar.MONTH, -2);
            cal2.add(Calendar.MONTH, -4);
            cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
            if (c.equals(validCount2)) {
                vipCount.setCursor(null);
                ito3d.setCategoryName("現役客");
                ito3d.setWhereCondition("sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()));
            } 
            
            //-----------------------------
            // 離店客
            //-----------------------------
            cal1.add(Calendar.MONTH, -6);
            cal2.add(Calendar.MONTH, -2);
            cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
            if (c.equals(validCount3)) {
                vipCount.setCursor(null);
                ito3d.setCategoryName("離店客");
                ito3d.setWhereCondition("sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()));
            } 
            
            //-----------------------------
            // 失客
            //-----------------------------
            cal1.add(Calendar.YEAR, -1);
            cal2.add(Calendar.MONTH, -6);
            cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
            if (c.equals(validCount4)) {
                vipCount.setCursor(null);
                ito3d.setCategoryName("失客");
                ito3d.setWhereCondition("sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()));
            }
        }
            
        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            ito3d.showData();
            
            ito3d.setOpener(this);
            this.setVisible(false);
            parentFrame.changeContents(ito3d);

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

    }                                          
    
    private void setPeriod() {

        if (startYear.getSelectedItem() == null || startYear.getSelectedItem().toString().length() == 0) return;
        if (endYear.getSelectedItem() == null || endYear.getSelectedItem().toString().length() == 0) return;
        
        calStart = Calendar.getInstance();
        calStart.set(Calendar.YEAR, Integer.parseInt(startYear.getSelectedItem().toString()));
        calStart.set(Calendar.MONTH, startMonth.getSelectedIndex());
        calStart.set(Calendar.DAY_OF_MONTH, 1);
        calStart.set(Calendar.HOUR_OF_DAY, 0);
        calStart.set(Calendar.MINUTE, 0);
        calStart.set(Calendar.SECOND, 0);
        calStart.set(Calendar.MILLISECOND, 0);

        calEnd = (Calendar)calStart.clone();
        calEnd.set(Calendar.YEAR, Integer.parseInt(endYear.getSelectedItem().toString()));
        calEnd.set(Calendar.MONTH, endMonth.getSelectedIndex());
        calEnd.set(Calendar.DAY_OF_MONTH, 1);
        calEnd.add(Calendar.MONTH, 1);
        calEnd.add(Calendar.DAY_OF_MONTH, -1);

    }

    private void search(){

        paramBean = new ReportParameterBean();
        
        if (shop.getSelectedItem() instanceof MstGroup) {
            // グループ
            MstGroup mg = (MstGroup)shop.getSelectedItem();
            paramBean.setTargetName(mg.getGroupName());
            paramBean.setShopIDList(mg.getShopIDListAll());
        } else if(shop.getSelectedItem() instanceof MstShop) {
            // 店舗
            MstShop ms = (MstShop)shop.getSelectedItem();
            paramBean.setTargetName(ms.getShopName());
            paramBean.setShopIDList(ms.getShopID().toString());
        }

	// 主担当者
	if (chargeStaff.getSelectedIndex() > 0) {
	    paramBean.setStaffId(((MstStaff)chargeStaff.getSelectedItem()).getStaffID());
	    paramBean.setStaffName(((MstStaff)chargeStaff.getSelectedItem()).getFullStaffName());
	} else {
	    paramBean.setStaffId(null);
	    paramBean.setStaffName("");
	}
        
        ConnectionWrapper con = SystemInfo.getConnection();
        
        int months = getMonthsBetween(calStart, calEnd);
        
        // 稼働・現役・離店・失客
        try {
            
            try {
                con.execute("drop table wk_ito3d_valid");
            } catch (Exception e) {
            }
            
            Calendar calTmp = (Calendar)calStart.clone();
            calTmp.add(Calendar.YEAR, -2);
            calTmp.add(Calendar.MONTH, 1);
            con.execute(getCreateWorkTable("wk_ito3d_valid", months, calTmp));
            
            ResultSetWrapper rs = con.executeQuery(getValidCountSQL(calStart, months));

            if (rs.next()) {
                validCount1.setText(rs.getString("cnt1"));
                validCount2.setText(rs.getString("cnt2"));
                validCount3.setText(rs.getString("cnt3"));
                validCount4.setText(rs.getString("cnt4"));
            }

            double totalCount = rs.getLong("cnt1") + rs.getLong("cnt2") + rs.getLong("cnt3") + rs.getLong("cnt4");
            
            if (totalCount > 0) {
                BigDecimal bd = null;
                bd = new BigDecimal(rs.getLong("cnt1") / totalCount * 100);
                validRatio1.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());
                bd = new BigDecimal(rs.getLong("cnt2") / totalCount * 100);
                validRatio2.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());
                bd = new BigDecimal(rs.getLong("cnt3") / totalCount * 100);
                validRatio3.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());
                bd = new BigDecimal(rs.getLong("cnt4") / totalCount * 100);
                validRatio4.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());
            } else {
                validRatio1.setText("0.0");
                validRatio2.setText("0.0");
                validRatio3.setText("0.0");
                validRatio4.setText("0.0");
            }
            
        } catch(SQLException e) {
            e.printStackTrace();
        }
        
        // マトリックス
        try {

            try {
                con.execute("drop table wk_ito3d");
            } catch (Exception e) {
            }
            
            con.execute(getCreateWorkTable("wk_ito3d", months, calStart));

            double totalCount = 0d;
            
            ResultSetWrapper rs = con.executeQuery(getMatrixSQL());

            if (rs.next()) {
                newCount.setText(rs.getString("new_count"));
                
                leftBottomCount.setText(rs.getString("left_bottom_count"));
                leftMiddleCount.setText(rs.getString("left_middle_count"));
                leftTopCount.setText(rs.getString("left_top_count"));
                
                centerBottomCount.setText(rs.getString("center_bottom_count"));
                centerMiddleCount.setText(rs.getString("center_middle_count"));
                centerTopCount.setText(rs.getString("center_top_count"));
                
                rightBottomCount.setText(rs.getString("right_bottom_count"));
                rightMiddleCount.setText(rs.getString("right_middle_count"));
                rightTopCount.setText(rs.getString("right_top_count"));
                
                vipCount.setText(rs.getString("vip_count"));
                totalCount = rs.getLong("total_count");
            }

            if (totalCount > 0) {
                BigDecimal bd = null;
                bd = new BigDecimal(rs.getDouble("left_bottom_count") / totalCount * 100);
                leftBottomRatio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());
                bd = new BigDecimal(rs.getDouble("left_middle_count") / totalCount * 100);
                leftMiddleRatio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());
                bd = new BigDecimal(rs.getDouble("left_top_count") / totalCount * 100);
                leftTopRatio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());

                bd = new BigDecimal(rs.getDouble("center_bottom_count") / totalCount * 100);
                centerBottomRatio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());
                bd = new BigDecimal(rs.getDouble("center_middle_count") / totalCount * 100);
                centerMiddleRatio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());
                bd = new BigDecimal(rs.getDouble("center_top_count") / totalCount * 100);
                centerTopRatio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());

                bd = new BigDecimal(rs.getDouble("right_bottom_count") / totalCount * 100);
                rightBottomRatio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());
                bd = new BigDecimal(rs.getDouble("right_middle_count") / totalCount * 100);
                rightMiddleRatio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());
                bd = new BigDecimal(rs.getDouble("right_top_count") / totalCount * 100);
                rightTopRatio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());

                bd = new BigDecimal(rs.getDouble("vip_count") / totalCount * 100);
                vipRatio.setText(bd.setScale(1, BigDecimal.ROUND_HALF_UP).toString());
            } else {
                leftBottomRatio.setText("0.0");
                leftMiddleRatio.setText("0.0");
                leftTopRatio.setText("0.0");
                
                centerBottomRatio.setText("0.0");
                centerMiddleRatio.setText("0.0");
                centerTopRatio.setText("0.0");
                
                rightBottomRatio.setText("0.0");
                rightMiddleRatio.setText("0.0");
                rightTopRatio.setText("0.0");
                
                vipRatio.setText("0.0");
            }
            
        } catch(SQLException e) {
            e.printStackTrace();
        }

        try {

            // 設定値の登録
            StringBuilder sql = new StringBuilder(1000);
            sql.append(" update mst_ito3d_setting");
            sql.append(" set");
            sql.append("      price1 = " + price1.getText());
            sql.append("     ,price2 = " + price2.getText());
            sql.append("     ,price3 = " + price3.getText());
            sql.append(" where");
            sql.append("     shop_id = " + SystemInfo.getCurrentShop().getShopID());

            SystemInfo.getConnection().executeUpdate(sql.toString());

        } catch (Exception e) {
        }
    }

    private boolean inputCheck()
    {
            NumberUtils numUtil = new NumberUtils();
            if(!numUtil.isNumber(this.startYear.getSelectedItem().toString())) {
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "開始年"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                this.startYear.requestFocusInWindow();
                return false;
            }
        
            if(!numUtil.isNumber(this.endYear.getSelectedItem().toString())) {
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "終了年"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                this.endYear.requestFocusInWindow();
                return false;
            }
        
            try {
                Long.parseLong(price1.getText());
            } catch (Exception e) {

                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "金額設定"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                price1.requestFocusInWindow();
                return false;
            }

            try {
                Long.parseLong(price2.getText());
            } catch (Exception e) {

                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "金額設定"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                price2.requestFocusInWindow();
                return false;
            }

            try {
                Long.parseLong(price3.getText());
            } catch (Exception e) {

                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "金額設定"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                price3.requestFocusInWindow();
                return false;
            }

            return true;
    }

    private String getValidCountSQL(Calendar calDate, int months) {
        
        Calendar calTmp = (Calendar)calDate.clone();
        StringBuilder strFrom = new StringBuilder(1000);

        calTmp.add(Calendar.MONTH, months - 1);
        strFrom.append(getValidCountSQL(calTmp));

        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      sum(cnt1) as cnt1");
        sql.append("     ,sum(cnt2) as cnt2");
        sql.append("     ,sum(cnt3) as cnt3");
        sql.append("     ,sum(cnt4) as cnt4");
        sql.append(" from (" + strFrom.toString() + ") t");

        return sql.toString();
    }
    
    private String getValidCountSQL(Calendar calDate) {

        Calendar cal1 = (Calendar)calDate.clone();
        Calendar cal2 = (Calendar)calDate.clone();
        
        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");
        
        // 稼働カルテ枚数
        cal1.add(Calendar.MONTH, -3);
        cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
        sql.append("      count(case when sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()) + " then customer_id end) as cnt1");
        
        // 現役客カルテ枚数
        cal1.add(Calendar.MONTH, -2);
        cal2.add(Calendar.MONTH, -4);
        cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
        sql.append("     ,count(case when sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()) + " then customer_id end) as cnt2");
        
        // 離店客カルテ枚数
        cal1.add(Calendar.MONTH, -6);
        cal2.add(Calendar.MONTH, -2);
        cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
        sql.append("     ,count(case when sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()) + " then customer_id end) as cnt3");
        
        // 失客カルテ枚数
        cal1.add(Calendar.YEAR, -1);
        cal2.add(Calendar.MONTH, -6);
        cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
        sql.append("     ,count(case when sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()) + " then customer_id end) as cnt4");
        
        sql.append(" from wk_ito3d_valid");

        return sql.toString();
    }
    
    private String getCreateWorkTable(String tableName, int months, Calendar calDate) {

        StringBuilder sql = new StringBuilder(1000);

        sql.append(" create temporary table " + tableName + " as");
        sql.append(" select");
        sql.append("      mc.customer_id");
        sql.append("     ,mc.customer_no");
        sql.append("     ,mc.customer_name1");
        sql.append("     ,mc.customer_name2");
        sql.append("     ,mc.sex");
        sql.append("     ,mc.pc_mail_address");
        sql.append("     ,mc.cellular_mail_address");
        sql.append("     ,mc.postal_code");
        sql.append("     ,mc.address1");
        sql.append("     ,mc.address2");
        sql.append("     ,mc.address3");
        sql.append("     ,mc.address4");
        sql.append("     ,ds.sales_date");
        sql.append("     ,ds.staff_name");
        sql.append("     ,ds.designated_flag");
        sql.append("     ,ds.visit_num");
        sql.append("     ,ds.total_visit_num");
        sql.append("     ,ds.visit_cycle");
        sql.append("     ,ds.value");
        sql.append("     ,ds.item_value");
        sql.append("     ,floor(ds.value / visit_num) as avg_value");
        sql.append(" from");
        sql.append("     (");
        sql.append("         select");
        sql.append("              customer_id");
        sql.append("             ,count(distinct slip_no) as visit_num");
        sql.append("             ,(");
        sql.append("                 select");
        sql.append("                     count(slip_no) + coalesce(max(before_visit_num), 0)");
        sql.append("                 from");
        sql.append("                     data_sales");
        sql.append("                         inner join mst_customer using(customer_id)");
        sql.append("                 where");
        sql.append("                         customer_id = a.customer_id");
        sql.append("                     and data_sales.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 	and data_sales.delete_date is null");
        sql.append("                 	and mst_customer.delete_date is null ");
        sql.append("             ) as total_visit_num");
        sql.append("             ," + months + " / count(*) as visit_cycle");

        if (this.rdoTaxBlank.isSelected()) {
            // 税抜き
            sql.append("         ,sum(a.discount_sales_value_no_tax) as value");
        } else if(this.rdoTaxUnit.isSelected()) {
            // 税込み
            sql.append("         ,sum(a.discount_sales_value_in_tax) as value");
        }

        // 店販金額
        sql.append("             ,coalesce((");
        sql.append("                 select");
        
        if (this.rdoTaxBlank.isSelected()) {
            // 税抜き
            sql.append("                 sum(discount_detail_value_no_tax)");
        } else if(this.rdoTaxUnit.isSelected()) {
            // 税込み
            sql.append("                 sum(discount_detail_value_in_tax)");
        }
        sql.append("                 from");
        sql.append("                     view_data_sales_detail_valid");
        sql.append("                 where");
        sql.append("                         shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and sales_date between " + SQLUtil.convertForSQLDateOnly(calDate.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(calEnd.getTime()));
        sql.append("                     and customer_id = max(a.customer_id)");
        sql.append("                     and product_division in (2, 4)");
        sql.append("              ), 0) as item_value");

        
        sql.append("             ,max(a.sales_date) as sales_date");
        sql.append("             ,(");
        sql.append("                 select");
        sql.append("                     staff_id");
        sql.append("                 from");
        sql.append("                     data_sales left join mst_staff using(staff_id)");
        sql.append("                 where");
        sql.append("                         customer_id = a.customer_id");
        sql.append("                     and data_sales.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and data_sales.sales_date = max(a.sales_date)");
        sql.append("                     and data_sales.delete_date is null");
        sql.append("                 order by");
        sql.append("                      data_sales.insert_date desc");
        sql.append("                     ,data_sales.slip_no desc");
        sql.append("                 limit 1");
        sql.append("              ) as staff_id");
        sql.append("             ,(");
        sql.append("                 select");
        sql.append("                     staff_name1");
        sql.append("                 from");
        sql.append("                     data_sales left join mst_staff using(staff_id)");
        sql.append("                 where");
        sql.append("                         customer_id = a.customer_id");
        sql.append("                     and data_sales.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and data_sales.sales_date = max(a.sales_date)");
        sql.append("                     and data_sales.delete_date is null");
        sql.append("                 order by");
        sql.append("                      data_sales.insert_date desc");
        sql.append("                     ,data_sales.slip_no desc");
        sql.append("                 limit 1");
        sql.append("              ) as staff_name");
        sql.append("             ,(");
        sql.append("                 select");
        sql.append("                     designated_flag");
        sql.append("                 from");
        sql.append("                     data_sales");
        sql.append("                 where");
        sql.append("                         customer_id = a.customer_id");
        sql.append("                     and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and sales_date = max(a.sales_date)");
        sql.append("                     and delete_date is null");
        sql.append("                 order by");
        sql.append("                      insert_date desc");
        sql.append("                     ,slip_no desc");
        sql.append("                 limit 1");
        sql.append("              ) as designated_flag");
        sql.append("         from");
        sql.append("             view_data_sales_valid a");
        sql.append("         where");
        sql.append("                 shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("             and sales_date between " + SQLUtil.convertForSQLDateOnly(calDate.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(calEnd.getTime()));
        sql.append("         group by");
        sql.append("             customer_id");
        sql.append("     ) ds");
        sql.append("     join mst_customer mc");
        sql.append("         using(customer_id)");
        sql.append(" where");
        sql.append("        mc.customer_no <> '0'");
        
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        
        return sql.toString();
    }
    
    private String getMatrixSQL() {
     
        long p1 = Long.parseLong(price1.getText()) * 10000;
        long p2 = Long.parseLong(price2.getText()) * 10000;
        long p3 = Long.parseLong(price3.getText()) * 10000;
        
        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");
        sql.append("      count(*) as total_count");
        sql.append("     ,coalesce(sum(case when total_visit_num = 1 and value <= " + p1 + " then 1 else 0 end), 0) as new_count");
        
        sql.append("     ,coalesce(sum(case when total_visit_num > 1 and visit_num <= 3 and value <= " + p1 + " then 1 else 0 end), 0) as left_bottom_count");
        sql.append("     ,coalesce(sum(case when visit_num between 1 and 3 and value > " + p1 + " and value <= " + p2 + " then 1 else 0 end), 0) as left_middle_count");
        sql.append("     ,coalesce(sum(case when visit_num between 1 and 3 and value > " + p2 + " and value <= " + p3 + " then 1 else 0 end), 0) as left_top_count");
        
        sql.append("     ,coalesce(sum(case when visit_num between 4 and 6 and value <= " + p1 + " then 1 else 0 end), 0) as center_bottom_count");
        sql.append("     ,coalesce(sum(case when visit_num between 4 and 6 and value > " + p1 + " and value <= " + p2 + " then 1 else 0 end), 0) as center_middle_count");
        sql.append("     ,coalesce(sum(case when visit_num between 4 and 6 and value > " + p2 + " and value <= " + p3 + " then 1 else 0 end), 0) as center_top_count");
        
        sql.append("     ,coalesce(sum(case when visit_num between 7 and 10 and value <= " + p1 + " then 1 else 0 end), 0) as right_bottom_count");
        sql.append("     ,coalesce(sum(case when visit_num between 7 and 10 and value > " + p1 + " and value <= " + p2 + " then 1 else 0 end), 0) as right_middle_count");
        sql.append("     ,coalesce(sum(case when visit_num between 7 and 10 and value > " + p2 + " and value <= " + p3 + " then 1 else 0 end), 0) as right_top_count");
        
        sql.append("     ,coalesce(sum(case when visit_num > 10 or value > " + p3 + " then 1 else 0 end), 0) as vip_count");
        sql.append(" from");
        sql.append("     wk_ito3d");
        
        return sql.toString();
    }
    
    private int getMonthsBetween(Calendar fromDate, Calendar toDate) {
        
        int dt1 = (fromDate.get(Calendar.YEAR) * 12) + fromDate.get(Calendar.MONTH);
        int dt2 = (toDate.get(Calendar.YEAR) * 12) + toDate.get(Calendar.MONTH);
        
        return dt2 - dt1 + 1 ;
    }

    private void initYearCombo(final JComboBox cmb, int nowYear) {
        
        cmb.removeAllItems();
        
        int y = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = 0; i < 5; i++) {
            cmb.addItem(String.valueOf(y - i));
        }
        cmb.setSelectedItem(nowYear);
        cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ((JTextField)cmb.getEditor().getEditorComponent()).selectAll();
            }
        });
    }
    
      public Ito3DCustomerAnalysisFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
    
    private class  Ito3DCustomerAnalysisFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponentStaffShopRankingFocusTraversalPolicy。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(shop))
			{
				return chargeStaffNo;
			}else if (aComponent.equals(chargeStaffNo))
			{
				return chargeStaff;
			}else if (aComponent.equals(chargeStaff))
			{
				return startYear;
			}else if (aComponent.equals(startYear.getComponent(2)))
			{
				return startMonth;
			}else if (aComponent.equals(startMonth))
			{
				return endYear;
			}
                        else if (aComponent.equals(endYear.getComponent(2)))
			{
				return endMonth;
			}
                        else if (aComponent.equals(endMonth))
			{
				if(rdoTaxUnit.isSelected()){
                                    return rdoTaxUnit;
                                }
                                 return rdoTaxBlank;
			}
			return this.getStartComponent();
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			
			return this.getStartComponent();
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return this.getStartComponent();
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			if(rdoTaxUnit.isSelected()){
                            return rdoTaxUnit;
                        }
                            return rdoTaxBlank;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return this.getStartComponent();
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return this.getStartComponent();
		}
                private Component getStartComponent(){
                    if(shop.getItemCount() == 1)
                    {
                        return chargeStaffNo;
                    }
                    return shop ;
                }
		
	}
    
    
    
    
}
