/*
 * NotMemberListPanel.java
 *
 * Created on 2007/03/12, 9:20
 */

package com.geobeck.sosia.pos.hair.report;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;

import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.company.MstGroup;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;

public class ItemSalesRankingPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
	private boolean isLoading = false;

	// ëSìXï‹ÇÃIDÉXÉgÉäÉìÉN
	private String allShopIdString = "";
	// ëIëÇµÇΩìXï‹ÇÃIDÉXÉgÉäÉìÉN
	private String shopIdString = "";
	// ìXï‹IDÅAìXï‹ñºÇäiî[Ç∑ÇÈHashMap
	private HashMap<Integer, String> shopIdNameMap = new HashMap<Integer, String>();
	// ìXï‹ï panelÇÃheight
	private int panShopHeight = 0;

	private String startDateStr;
	private String endDateStr;

	private SimpleProductRankingList allShopRankingData = null;

	public ItemSalesRankingPanel() {
		isLoading = true;

		initComponents();
		addMouseCursorChange();

		this.setPath("í†ï[ä«óù");
		this.setTitle("îÑÇÍãÿÉâÉìÉLÉìÉO");
		this.setSize(835, 800);

		this.init();

		isLoading = false;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		radioBtnGrp = new javax.swing.ButtonGroup();
		jPanel1 = new javax.swing.JPanel();
		shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
		lblShop = new javax.swing.JLabel();
		showButton = new javax.swing.JButton();
		btnOutput = new javax.swing.JButton();
		splAll = new javax.swing.JScrollPane();
		tblAll = new javax.swing.JTable();
		lblDateSelect = new javax.swing.JLabel();
		dateSelect = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
		dateSelect2 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
		lblAll = new javax.swing.JLabel();
		splShop = new javax.swing.JScrollPane();
		panShop = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel(); 
		jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();

		setFocusCycleRoot(true);

		jPanel1.setOpaque(false);

		shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		shop.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				shopActionPerformed(evt);
			}
		});

		lblShop.setText("ìXï‹");

		showButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
		showButton.setBorderPainted(false);
		showButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
		showButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showButtonActionPerformed(evt);
			}
		});

		btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
		btnOutput.setBorderPainted(false);
		btnOutput.setFocusCycleRoot(true);
		btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
		btnOutput.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnOutputActionPerformed(evt);
			}
		});

		splAll.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

		tblAll.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] { "îÑÇÍãÿ", "è§ïiñº", "îÃîÑêî", "îÃîÑã‡äz" }) {
			Class[] types = new Class[] { java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class };
			boolean[] canEdit = new boolean[] { false, false, false, false };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		tblAll.setColumnSelectionAllowed(false);
		tblAll.setPreferredSize(new java.awt.Dimension(820, 210));
		tblAll.setSelectionBackground(new java.awt.Color(204, 204, 204));
		tblAll.setSelectionForeground(new java.awt.Color(0, 0, 0));
		tblAll.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		tblAll.getTableHeader().setReorderingAllowed(false);
		SwingUtil.setJTableHeaderRenderer(tblAll, SystemInfo.getTableHeaderRenderer());
		tblAll.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT - 5);
		tblAll.setDefaultRenderer(String.class, new SelectTableCellRenderer());
		splAll.setViewportView(tblAll);
		tblAll.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		if (tblAll.getColumnModel().getColumnCount() > 0) {
			tblAll.getColumnModel().getColumn(0).setResizable(false);
			tblAll.getColumnModel().getColumn(1).setResizable(false);
			tblAll.getColumnModel().getColumn(2).setResizable(false);
			tblAll.getColumnModel().getColumn(3).setResizable(false);
		}

		lblDateSelect.setText("ëŒè€ä˙ä‘");

		dateSelect.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

		lblAll.setText("ëSëÃ");

		panShop.setPreferredSize(new Dimension(570, 0));
		FlowLayout panShopLayout = new FlowLayout(FlowLayout.LEFT, 0, 5);
		panShop.setLayout(panShopLayout);
		panShop.setBackground(new Color(235, 235, 235));

		splShop.setViewportView(panShop);
		splShop.setBorder(null);
		
        dateSelect2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel1.setText("Å`");
        
        jLabel2.setText("ï\é¶èá");
        radioBtnGrp.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("îÃîÑêî");
        radioBtnGrp.add(jRadioButton2);
        jRadioButton2.setText("îÃîÑã‡äz");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(splAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 562, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(lblDateSelect)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(dateSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jLabel1)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(dateSelect2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(18, 18, 18)
                            .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(lblShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(lblAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(splShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 582, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .add(18, 18, 18)
                        .add(jRadioButton1)
                        .add(6, 6, 6)
                        .add(jRadioButton2)))
                .addContainerGap(137, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, dateSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, lblDateSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jLabel1)
                        .add(dateSelect2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(5, 5, 5)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblShop)
                    .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jRadioButton1)
                    .add(jRadioButton2))
                .add(4, 4, 4)
                .add(lblAll)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(splAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 229, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(splShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 324, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
	}// </editor-fold>//GEN-END:initComponents

	private void shopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopActionPerformed
	{//GEN-HEADEREND:event_shopActionPerformed
		if (isLoading)
			return;

		// shopIdStringÇçÏê¨
		this.getShopIdString();
	}//GEN-LAST:event_shopActionPerformed

	private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
		btnOutput.setCursor(null);
		try {
			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			this.showDetail();
		} finally {
			setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		}
	}//GEN-LAST:event_showButtonActionPerformed

	private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed
		btnOutput.setCursor(null);

		try {
			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			if (this.showDetail()) {
				printExcel();
			}
		} finally {
			setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		}
	}//GEN-LAST:event_btnOutputActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnOutput;
	private jp.co.flatsoft.fscomponent.FSCalenderCombo dateSelect;
	private jp.co.flatsoft.fscomponent.FSCalenderCombo dateSelect2;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.ButtonGroup radioBtnGrp;
	private javax.swing.JRadioButton jRadioButton1;
	private javax.swing.JRadioButton jRadioButton2;
	private javax.swing.JLabel lblAll;
	private javax.swing.JLabel lblDateSelect;
	private javax.swing.JLabel lblShop;
	private javax.swing.JPanel panShop;
	private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
	private javax.swing.JButton showButton;
	private javax.swing.JScrollPane splAll;
	private javax.swing.JScrollPane splShop;
	private javax.swing.JTable tblAll;

	// End of variables declaration//GEN-END:variables

	/**
	 * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
	 */
	private void addMouseCursorChange() {
		SystemInfo.addMouseCursorChange(showButton);
		SystemInfo.addMouseCursorChange(btnOutput);
	}

	/**
	 * èâä˙âªèàóùÇçsÇ§ÅB
	 */
	private void init() {
		// ëSìXï‹ÇÃIDÉXÉgÉäÉìÉN
		this.allShopIdString = SystemInfo.getGroup().getShopIDListAll();

		shop.addItem(SystemInfo.getGroup());
		SystemInfo.getGroup().addGroupDataToJComboBox(shop, 3);
		shop.setSelectedIndex(0);

		this.getShopIdString();
		this.getShopIdNameMap();

		// ëŒè€ä˙ä‘Çèâä˙âª
		dateSelect.setDate(String.format( "%1$tY/%1$tm/01", new Date()));
		dateSelect2.setDate(new Date());

		// óÒïùÇí≤êÆ
		tblAll.getColumnModel().getColumn(0).setPreferredWidth(40); // îÑÇÍãÿ
		tblAll.getColumnModel().getColumn(1).setPreferredWidth(210); // è§ïiñº
		tblAll.getColumnModel().getColumn(2).setPreferredWidth(50); // îÃîÑêî
		tblAll.getColumnModel().getColumn(3).setPreferredWidth(50); // îÃîÑã‡äz
		SelectTableCellRenderer cellRenderCenter = new SelectTableCellRenderer();
		cellRenderCenter.setHorizontalAlignment(SwingConstants.CENTER); //íÜäÒÇπ
		tblAll.getColumnModel().getColumn(0).setCellRenderer(cellRenderCenter);
		SelectTableCellRenderer cellRenderRight = new SelectTableCellRenderer();
		cellRenderRight.setHorizontalAlignment(SwingConstants.RIGHT); //âEäÒÇπ
		tblAll.getColumnModel().getColumn(3).setCellRenderer(cellRenderRight);
	}

	/**
	 * shopIdStringÇçÏê¨Ç∑ÇÈÅB
	 */
	private void getShopIdString() {
		String shopIdString = "";

		if (shop.getSelectedItem() instanceof MstGroup) {
			shopIdString = this.allShopIdString;
		} else {
			shopIdString = ((MstShop) shop.getSelectedItem()).getShopID().toString();
		}

		this.shopIdString = shopIdString;
		System.out.println("shopIdString:" + this.shopIdString);
	}

	/**
	 * ìXï‹IDÅAìXï‹ñºÇäiî[Ç∑ÇÈHashMapÇçÏê¨Ç∑ÇÈÅB
	 */
	private void getShopIdNameMap() {
		for (int i = 0; i < shop.getItemCount(); i++) {
			Object o = shop.getItemAt(i);
			if (o instanceof MstShop) {
				shopIdNameMap.put(((MstShop) o).getShopID(), ((MstShop) o).getShopName());
			}
		}
	}

	/**
	 * èWåvä˙ä‘ÇãÅÇﬂÇÈÅB
	 */
	private void getStartEndDate() {
		// ç°åé
		String begin_year = this.dateSelect.getDateStr().substring(0, 4);
		String begin_month = this.dateSelect.getDateStr().substring(4, 6);
		String begin_day = this.dateSelect.getDateStr().substring(6, 8);
		String end_year = this.dateSelect2.getDateStr().substring(0, 4);
		String end_month = this.dateSelect2.getDateStr().substring(4, 6);
		String end_day = this.dateSelect2.getDateStr().substring(6, 8);
		this.startDateStr = begin_year + "-" + begin_month + "-" + begin_day;
		this.endDateStr = end_year + "-" + end_month + "-" + end_day;
		/*
		int compare1 = Integer.parseInt(new SimpleDateFormat("yyyyMM").format(new Date()));
		int compare2 = Integer.parseInt(year + month);
		if (compare1 <= compare2) {
			this.endDateStr = year + "-" + month + "-" + date;
		} else {
			Calendar c = Calendar.getInstance();
			c.set(Integer.parseInt(year), Integer.parseInt(month), 1);// ëIëåéÇÃóÇåéÇ…ÇµÇƒ
			c.add(Calendar.DAY_OF_MONTH, -1); // ÇPì˙ñﬂÇ∑
			this.endDateStr = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());
		}
		*/
		System.out.println("startDateStr:" + this.startDateStr);
		System.out.println("endDateStr:" + this.endDateStr);
	}

	/**
	 * ñæç◊Çï\é¶Ç∑ÇÈÅB
	 */
	private boolean showDetail() {
		// ì¸óÕÉ`ÉFÉbÉN
		if (this.dateSelect.getDateStr() == null || this.dateSelect.getDateStr().equals("") || this.dateSelect2.getDateStr() == null || this.dateSelect2.getDateStr().equals("")) {
			MessageDialog.showMessageDialog(this, MessageUtil.getMessage(1102, "ëŒè€ä˙ä‘"), this.getTitle(), JOptionPane.ERROR_MESSAGE);
			return false;
		}

		// èWåvä˙ä‘ÇãÅÇﬂÇÈ
		this.getStartEndDate();

		// ëSìXï‹ÇÃÉâÉìÉLÉìÉOÉfÅ[É^Çï\é¶
		allShopRankingData = new SimpleProductRankingList();
		allShopRankingData.setShopIDList(this.allShopIdString);
		allShopRankingData.setStartDateStr(this.startDateStr);
		allShopRankingData.setEndDateStr(this.endDateStr);
		if (jRadioButton1.isSelected()) {
			allShopRankingData.setOrderKey("product_num");
		} else if (jRadioButton2.isSelected()) {
			allShopRankingData.setOrderKey("sales_value");
		}
		
		allShopRankingData.load();
		showAllShopRankingData();

		// å≥ÇÃÉfÅ[É^ÇÉNÉäÉA
		panShop.removeAll();

		// å¬ï ìXï‹ÇÃÉâÉìÉLÉìÉOÉfÅ[É^Çï\é¶
		String[] shopIdAry = this.shopIdString.split(",");
		for (String shopId : shopIdAry) {
			SimpleProductRankingList rankingData = new SimpleProductRankingList();
			rankingData.setShopIDList(shopId);
			rankingData.setStartDateStr(this.startDateStr);
			rankingData.setEndDateStr(this.endDateStr);
			rankingData.load();
			this.showShopRankingData(Integer.parseInt(shopId.trim()), rankingData);
		}

		panShopHeight = 0;
		for (Component c : panShop.getComponents()) {
			panShopHeight += c.getPreferredSize().height + 5;
		}
		panShop.setPreferredSize(new Dimension(560, panShopHeight));

		return true;
	}

	/**
	 * ëSìXï‹ÇÃÉâÉìÉLÉìÉOÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 */
	private void showAllShopRankingData() {
		SwingUtil.clearTable(tblAll);

		NumberFormat nf = NumberFormat.getInstance();
		int ranking = 1;
		for (ProductRanking pt : allShopRankingData) {
			Object[] rowData = { ranking, pt.getProdName(), pt.getProdCount(), nf.format(pt.getProdSales()) };
			((DefaultTableModel) tblAll.getModel()).addRow(rowData);
			ranking++;
		}
	}

	/**
	 * å¬ï ìXï‹ÇÃÉâÉìÉLÉìÉOÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 */
	private void showShopRankingData(Integer shopId, SimpleProductRankingList rankingData) {
		// ìXï‹ñº
		JLabel lbl = new JLabel(shopIdNameMap.get(shopId), SwingConstants.LEFT);
		panShop.add(lbl);

		// ÉeÅ[ÉuÉã
		JTable tbl = new JTable();
		tbl.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] { "îÑÇÍãÿ", "è§ïiñº", "îÃîÑêî", "îÃîÑã‡äz" }) {
			Class[] types = new Class[] { java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class };
			boolean[] canEdit = new boolean[] { false, false, false, false };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		tbl.setColumnSelectionAllowed(false);
		tbl.setSelectionBackground(new java.awt.Color(204, 204, 204));
		tbl.setSelectionForeground(new java.awt.Color(0, 0, 0));
		tbl.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		tbl.getTableHeader().setReorderingAllowed(false);
		SwingUtil.setJTableHeaderRenderer(tbl, SystemInfo.getTableHeaderRenderer());
		tbl.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT - 5);
		tbl.setDefaultRenderer(String.class, new SelectTableCellRenderer());

		// óÒïùÇí≤êÆ
		tbl.getColumnModel().getColumn(0).setPreferredWidth(40); // îÑÇÍãÿ
		tbl.getColumnModel().getColumn(1).setPreferredWidth(210); // è§ïiñº
		tbl.getColumnModel().getColumn(2).setPreferredWidth(50); // îÃîÑêî
		tbl.getColumnModel().getColumn(3).setPreferredWidth(50); // îÃîÑã‡äz
		SelectTableCellRenderer cellRenderCenter = new SelectTableCellRenderer();
		cellRenderCenter.setHorizontalAlignment(SwingConstants.CENTER); //íÜäÒÇπ
		tbl.getColumnModel().getColumn(0).setCellRenderer(cellRenderCenter);
		SelectTableCellRenderer cellRenderRight = new SelectTableCellRenderer();
		cellRenderRight.setHorizontalAlignment(SwingConstants.RIGHT); //âEäÒÇπ
		tbl.getColumnModel().getColumn(3).setCellRenderer(cellRenderRight);

		NumberFormat nf = NumberFormat.getInstance();
		int ranking = 1;
		for (ProductRanking pt : rankingData) {
			Object[] rowData = { ranking, pt.getProdName(), pt.getProdCount(), nf.format(pt.getProdSales()) };
			((DefaultTableModel) tbl.getModel()).addRow(rowData);
			ranking++;
		}

		JScrollPane spl = new JScrollPane();
		spl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		spl.setViewportView(tbl);
		spl.setPreferredSize(new Dimension(562, 229));

		panShop.add(spl);

		panShop.add(Box.createRigidArea(new Dimension(560, 10)));
	}

	/**
	 * EXCELèoóÕÇçsÇ§ÅB
	 */
	private void printExcel() {
		JExcelApi jx = new JExcelApi("îÑÇÍãÿÉâÉìÉLÉìÉO");
		jx.setTemplateFile("/reports/îÑÇÍãÿÉâÉìÉLÉìÉO.xls");

		// ëŒè€ä˙ä‘
		String targetDateStr = "ëŒè€ä˙ä‘ÅF" + this.dateSelect.getDateStr().substring(0, 4) + "îN" + Integer.parseInt(this.dateSelect.getDateStr().substring(4, 6)) + "åé" + Integer.parseInt(this.dateSelect.getDateStr().substring(6, 8)) + "ì˙Å@Å`Å@";
		targetDateStr += this.dateSelect2.getDateStr().substring(0, 4) + "îN" + Integer.parseInt(this.dateSelect2.getDateStr().substring(4, 6)) + "åé" + Integer.parseInt(this.dateSelect2.getDateStr().substring(6, 8)) + "ì˙";
		// ÉwÉbÉ_
		jx.setValue(1, 4, targetDateStr);
		
		// ï\é¶èá
		String orderKey = "ï\é¶èáÅF";
		if (jRadioButton1.isSelected()) {
			orderKey += "îÃîÑêî";
		} 
		if (jRadioButton2.isSelected()) {
			orderKey += "îÃîÑã‡äz";
		}
		jx.setValue(1, 6, orderKey);

		// ëSìXï‹ÉfÅ[É^ÇèoóÕ
		DefaultTableModel model = (DefaultTableModel) tblAll.getModel();
		int rowIndex = 0;
		for (Object row : model.getDataVector()) {
			for (int colIndex = 0; colIndex < 4; colIndex++) {
				Object obj = ((Vector) row).get(colIndex);
				if (obj != null) {
					jx.setValue(colIndex + 1, 10 + rowIndex, obj);
				}
			}

			rowIndex++;
		}

		// å¬ï ìXï‹ÉfÅ[É^ÇèoóÕ
		int tableCount = 0;
		int labelCount = 0;
		for (Component c : panShop.getComponents()) {
			if (c instanceof JLabel) {
				labelCount++;

				String shopName = ((JLabel) c).getText();
				jx.setValue(1, 8 + (labelCount * 13), shopName);
			} else if (c instanceof JScrollPane) {
				for (Component cc : ((JScrollPane) c).getViewport().getComponents()) {
					if (cc instanceof JTable) {
						tableCount++;

						DefaultTableModel modelCc = (DefaultTableModel) ((JTable) cc).getModel();
						rowIndex = 0;
						for (Object row : modelCc.getDataVector()) {
							for (int colIndex = 0; colIndex < 4; colIndex++) {
								Object obj = ((Vector) row).get(colIndex);
								if (obj != null) {
									jx.setValue(colIndex + 1, 10 + (tableCount * 13) + rowIndex, obj);
								}
							}

							rowIndex++;
						}
					}
				}
			}
		}

		// écÇËçsÇçÌèú
                //20171121 edit start #31679 [GBì‡ëŒâû][gb]è§ïiîÑè„ÉâÉìÉLÉìÉOÇÃÉGÉNÉZÉãï\é¶Ç™Ç≈Ç´Ç»Ç¢
                //if (tableCount <= 20) {
		if (tableCount <= 99) {
			int deleteFrom = 10 + (tableCount * 13) + 11;
                        //int deleteRows = 278 - deleteFrom + 1;
			int deleteRows = 1306 - deleteFrom + 1;
                        //20171121 edit end #31679 [GBì‡ëŒâû][gb]è§ïiîÑè„ÉâÉìÉLÉìÉOÇÃÉGÉNÉZÉãï\é¶Ç™Ç≈Ç´Ç»Ç¢
			for (int i = 0; i < deleteRows; i++) {
				jx.removeRow(deleteFrom);
			}
		}

		jx.openWorkbook();
	}
}