/*
 * StaffResultListReportPanel.java
 *
 * Created on 2006/10/19, 10:39
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.basicinfo.SimpleMaster;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.sql.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.text.*;

import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.report.bean.*;
import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.hair.report.util.*;
import com.geobeck.sosia.pos.master.MstData;
import javax.swing.table.DefaultTableModel;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;

/**
 *
 * @author  katagiri
 */
public class StaffResultListReportPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private ReportParameterBean paramBean = new ReportParameterBean();
	
        //New request #32795 [gb] [トータルビューティ対応] 担当別成績一覧表
        //nahoang start add 20141201
        private MstShopCategorys		mscg		=	new MstShopCategorys();
        private MstShopCategorys mrsRef = new MstShopCategorys();
        private MstShopCategorys mrsUse = new MstShopCategorys();
        private int useShopCategory = 0;
        private boolean isHideCategory = false;
        //nahoang end add 20141201
        
	/** Creates new form StaffResultListReportPanel */
	public StaffResultListReportPanel()
	{
		initComponents();
		addMouseCursorChange();
                //New request #32795 [gb] [トータルビューティ対応] 担当別成績一覧表
                //nahoang start add 20141201
                this.setSize(760, 603);
                //nahoang end add 20141201 
		//this.setSize(518, 295);
		this.setPath("分析");
		this.setTitle("担当別成績一覧表");
		this.setKeyListener();
		SystemInfo.initGroupShopComponents(target, 3);
                
                //対象期間の設定
		this.termFrom.setDate(Calendar.getInstance().getTime());
		this.termTo.setDate(Calendar.getInstance().getTime());
                
		//税抜、税込の初期設定
		if(SystemInfo.getAccountSetting().getReportPriceType() == 0)
		{
			rdoTaxBlank.setSelected(false);
			rdoTaxUnit.setSelected(true);
		}
		else
		{
			rdoTaxBlank.setSelected(true);
			rdoTaxUnit.setSelected(false);
		}
                
                changeTargetDate();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        taxGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblTargetPeriod1 = new javax.swing.JLabel();
        txtFixedCount = new javax.swing.JTextField();
        ((PlainDocument)txtFixedCount.getDocument()).setDocumentFilter(
            new CustomFilter(3, CustomFilter.NUMERIC));
        lblTargetPeriod3 = new javax.swing.JLabel();
        lblTargetDate = new javax.swing.JLabel();
        lblTargetPeriod4 = new javax.swing.JLabel();
        lblTargetPeriod5 = new javax.swing.JLabel();
        cmbReappearanceSpan = new javax.swing.JComboBox();
        lblTax = new javax.swing.JLabel();
        rdoTaxUnit = new javax.swing.JRadioButton();
        rdoTaxBlank = new javax.swing.JRadioButton();
        checkTargetDate = new javax.swing.JCheckBox();
        btnOutputExcel = new javax.swing.JButton();
        targetLabel = new javax.swing.JLabel();
        target = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        jPanel3 = new javax.swing.JPanel();
        referenceCategoryLeftScrollPane = new javax.swing.JScrollPane();
        tblReferenceCategoryName = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        selectButton = new javax.swing.JButton();
        selectAllButton = new javax.swing.JButton();
        releaseButton = new javax.swing.JButton();
        releaseAllButton = new javax.swing.JButton();
        selectCategoryRightScrollPane = new javax.swing.JScrollPane();
        tblSelectCategoryName = new javax.swing.JTable();
        lblCategory = new javax.swing.JLabel();
        lblTargetPeriod = new javax.swing.JLabel();
        termFrom = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        termtLabe1 = new javax.swing.JLabel();
        termTo = new jp.co.flatsoft.fscomponent.FSCalenderCombo();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        lblTargetPeriod1.setText("再来算出期間");

        txtFixedCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFixedCount.setText("3");

        lblTargetPeriod3.setText("評価期間");

        lblTargetPeriod4.setText("固定回数");

        lblTargetPeriod5.setText("回以上");

        cmbReappearanceSpan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1ヶ月", "45日", "2ヶ月", "3ヶ月", "4ヶ月", "5ヶ月", "6ヶ月" }));
        cmbReappearanceSpan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbReappearanceSpanItemStateChanged(evt);
            }
        });

        lblTax.setText("税区分");
        lblTax.setFocusCycleRoot(true);

        taxGroup.add(rdoTaxUnit);
        rdoTaxUnit.setSelected(true);
        rdoTaxUnit.setText("税込");
        rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxUnit.setFocusCycleRoot(true);
        rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxUnit.setOpaque(false);

        taxGroup.add(rdoTaxBlank);
        rdoTaxBlank.setText("税抜");
        rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxBlank.setFocusCycleRoot(true);
        rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxBlank.setOpaque(false);

        checkTargetDate.setText("集計期間内再来を集計");
        checkTargetDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkTargetDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkTargetDate.setOpaque(false);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(lblTargetPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(9, 9, 9)
                .add(cmbReappearanceSpan, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(21, 21, 21)
                .add(checkTargetDate))
            .add(jPanel1Layout.createSequentialGroup()
                .add(lblTargetPeriod3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(9, 9, 9)
                .add(lblTargetDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 286, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(lblTargetPeriod4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(9, 9, 9)
                .add(txtFixedCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(7, 7, 7)
                .add(lblTargetPeriod5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(lblTax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(9, 9, 9)
                .add(rdoTaxUnit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(rdoTaxBlank, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblTargetPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbReappearanceSpan, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(checkTargetDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(7, 7, 7)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblTargetPeriod3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTargetDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(9, 9, 9)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblTargetPeriod4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtFixedCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTargetPeriod5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(9, 9, 9)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblTax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoTaxUnit)
                    .add(rdoTaxBlank))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setContentAreaFilled(false);
        btnOutputExcel.setFocusCycleRoot(true);
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputExcelActionPerformed(evt);
            }
        });

        targetLabel.setText("対象店舗");

        target.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetActionPerformed(evt);
            }
        });

        jPanel3.setOpaque(false);
        jPanel3.setLayout(null);

        tblReferenceCategoryName.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "業態名"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblReferenceCategoryName.setSelectionForeground(new java.awt.Color(0, 0, 0));
        //nhanvt
        tblReferenceCategoryName.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(tblReferenceCategoryName, SystemInfo.getTableHeaderRenderer());
        tblReferenceCategoryName.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(tblReferenceCategoryName);

        //nhanvt
        tblReferenceCategoryName.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tblReferenceCategoryNameMouseMoved(evt);
            }
        });
        referenceCategoryLeftScrollPane.setViewportView(tblReferenceCategoryName);

        jPanel3.add(referenceCategoryLeftScrollPane);
        referenceCategoryLeftScrollPane.setBounds(100, 0, 251, 151);

        jPanel4.setOpaque(false);

        selectButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setContentAreaFilled(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        selectAllButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right2_off.jpg"));
        selectAllButton.setBorderPainted(false);
        selectAllButton.setContentAreaFilled(false);
        selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right2_on.jpg"));
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        releaseButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left_off.jpg"));
        releaseButton.setBorderPainted(false);
        releaseButton.setContentAreaFilled(false);
        releaseButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left_on.jpg"));
        releaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseButtonActionPerformed(evt);
            }
        });

        releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left2_off.jpg"));
        releaseAllButton.setBorderPainted(false);
        releaseAllButton.setContentAreaFilled(false);
        releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left2_on.jpg"));
        releaseAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseAllButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(releaseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 39, Short.MAX_VALUE)
                .add(releaseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.add(jPanel4);
        jPanel4.setBounds(360, 0, 85, 151);

        tblSelectCategoryName.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "業態名"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSelectCategoryName.setSelectionForeground(new java.awt.Color(0, 0, 0));
        //nhanvt
        tblSelectCategoryName.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(tblSelectCategoryName, SystemInfo.getTableHeaderRenderer());
        tblSelectCategoryName.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(tblSelectCategoryName);
        //TableColumnModel model = tblSelectCategoryName.getColumnModel();
        //model.getColumn(2).setCellEditor(new IntegerCellEditor(new JTextField()));
        //model.getColumn(3).setCellEditor(new IntegerCellEditor(new JTextField()));
        //model.getColumn(4).setCellEditor(new IntegerCellEditor(new JTextField()));
        //model.getColumn(5).setCellEditor(new IntegerCellEditor(new JTextField()));
        //nhanvt
        tblSelectCategoryName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSelectCategoryNameMouseClicked(evt);
            }
        });
        tblSelectCategoryName.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblSelectCategoryNamePropertyChange(evt);
            }
        });
        selectCategoryRightScrollPane.setViewportView(tblSelectCategoryName);

        jPanel3.add(selectCategoryRightScrollPane);
        selectCategoryRightScrollPane.setBounds(460, 0, 250, 151);

        lblCategory.setText("集計業態");
        jPanel3.add(lblCategory);
        lblCategory.setBounds(0, 0, 90, 13);

        lblTargetPeriod.setText("集計期間");

        termFrom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        termFrom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                termFromItemStateChanged(evt);
            }
        });

        termtLabe1.setText("〜");

        termTo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        termTo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                termToItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(targetLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 79, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(19, 19, 19)
                        .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 403, Short.MAX_VALUE)
                        .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(73, 73, 73))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(lblTargetPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(9, 9, 9)
                        .add(termFrom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(2, 2, 2)
                        .add(termtLabe1)
                        .add(9, 9, 9)
                        .add(termTo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(16, 16, 16)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(targetLabel)))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblTargetPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(termFrom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(termtLabe1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(termTo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 154, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(25, 25, 25))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void termToItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_termToItemStateChanged
        
        if (termTo.getDate() == null) {
            termTo.setDate(Calendar.getInstance().getTime());
        }
        
        changeTargetDate();
        
    }//GEN-LAST:event_termToItemStateChanged

    private void termFromItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_termFromItemStateChanged
        
        if (termFrom.getDate() == null) {
            termFrom.setDate(Calendar.getInstance().getTime());
        }

        changeTargetDate();
        
    }//GEN-LAST:event_termFromItemStateChanged

    private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputExcelActionPerformed

        if (!SystemInfo.checkAuthorityPassword(240)) return;
        
        btnOutputExcel.setCursor(null);

        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            this.doOutput();

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

    }//GEN-LAST:event_btnOutputExcelActionPerformed

    private void cmbReappearanceSpanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbReappearanceSpanItemStateChanged

        changeTargetDate();

    }//GEN-LAST:event_cmbReappearanceSpanItemStateChanged

    private void tblReferenceCategoryNameMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReferenceCategoryNameMouseMoved

    }//GEN-LAST:event_tblReferenceCategoryNameMouseMoved

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        //IVS_vtnhan start add 20140723 New request #33403
        this.moveMutiCategory(true);
        //IVS_vtnhan end add 20140723 New request #33403
    }//GEN-LAST:event_selectButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        //IVS_vtnhan start add 20140723 New request #33403
        this.moveCategoryAll(true);
        //IVS_vtnhan end add 20140723 New request #33403
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void releaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseButtonActionPerformed
        //IVS_vtnhan start add 20140723 New request #33403
        this.moveMutiCategory(false);
        //IVS_vtnhan end add 20140723 New request #33403
    }//GEN-LAST:event_releaseButtonActionPerformed

    private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseAllButtonActionPerformed
        //IVS_vtnhan start add 20140723 New request #33403
        this.moveCategoryAll(false);
        //IVS_vtnhan end add 20140723 New request #33403
    }//GEN-LAST:event_releaseAllButtonActionPerformed

    private void tblSelectCategoryNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSelectCategoryNameMouseClicked

    }//GEN-LAST:event_tblSelectCategoryNameMouseClicked

    private void tblSelectCategoryNamePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblSelectCategoryNamePropertyChange

    }//GEN-LAST:event_tblSelectCategoryNamePropertyChange

    private void targetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetActionPerformed
        this.chargeDataCombo();
    }//GEN-LAST:event_targetActionPerformed
  
    private void changeTargetDate(){

        if (this.termFrom.getDate() == null || this.termTo.getDate() == null ) return;
        
	// 再来期間
	int reappearanceCount = getReappearanceSpan();

        boolean isEndOfMonth = false;
        
        /*********************************/
	// ○ヶ月前の開始日
        /*********************************/
	Calendar calculationStart = Calendar.getInstance();
	calculationStart.setTime(termFrom.getDate());
        isEndOfMonth = calculationStart.getActualMaximum(Calendar.DAY_OF_MONTH) == calculationStart.get(Calendar.DAY_OF_MONTH);
        
	if(reappearanceCount == 45){
            
	    // 45日再来
            calculationStart.add(Calendar.MONTH, -2);

            // 月末の場合
            if (isEndOfMonth) {
                calculationStart.set(Calendar.DAY_OF_MONTH, 1);
                calculationStart.add(Calendar.MONTH, 1);
                calculationStart.add(Calendar.DAY_OF_MONTH, -1);
            }
	    calculationStart.add(Calendar.DAY_OF_MONTH, 14);
            
	} else {

            // それ以外
	    calculationStart.add(Calendar.MONTH, (reappearanceCount * -1));

            // 月末の場合
            if (isEndOfMonth) {
                calculationStart.set(Calendar.DAY_OF_MONTH, 1);
                calculationStart.add(Calendar.MONTH, 1);
                calculationStart.add(Calendar.DAY_OF_MONTH, -1);
            }
	}

        /*********************************/
	// ○ヶ月前の終了日
        /*********************************/
	Calendar calculationEnd = Calendar.getInstance();
	calculationEnd.setTime(termTo.getDate());
        isEndOfMonth = calculationEnd.getActualMaximum(Calendar.DAY_OF_MONTH) == calculationEnd.get(Calendar.DAY_OF_MONTH);
        
	if(reappearanceCount == 45){
            
	    // 45日再来
            calculationEnd.add(Calendar.MONTH, -2);

            // 月末の場合
            if (isEndOfMonth) {
                calculationEnd.set(Calendar.DAY_OF_MONTH, 1);
                calculationEnd.add(Calendar.MONTH, 1);
                calculationEnd.add(Calendar.DAY_OF_MONTH, -1);
            }
	    calculationEnd.add(Calendar.DAY_OF_MONTH, 14);
            
	} else {

            // それ以外
	    calculationEnd.add(Calendar.MONTH, (reappearanceCount * -1));

            // 月末の場合
            if (isEndOfMonth) {
                calculationEnd.set(Calendar.DAY_OF_MONTH, 1);
                calculationEnd.add(Calendar.MONTH, 1);
                calculationEnd.add(Calendar.DAY_OF_MONTH, -1);
            }
	}

        paramBean.setTargetStartDate(termFrom.getDateStr("/"));
        paramBean.setTargetEndDate(termTo.getDateStr("/"));
        paramBean.setTargetStartDateObj(termFrom.getDate());
        paramBean.setTargetEndDateObj(termTo.getDate());

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        paramBean.setCalculationStartDate(sdf.format(calculationStart.getTime()));
        paramBean.setCalculationEndDate(sdf.format(calculationEnd.getTime()));
        paramBean.setCalculationStartDateObj(calculationStart.getTime());
        paramBean.setCalculationEndDateObj(calculationEnd.getTime());
        this.lblTargetDate.setText( paramBean.getCalculationStartDate() + " 〜 " + paramBean.getCalculationEndDate() );
    }
    
    /**
     * 再来算出期間を求める
     */
    private int getReappearanceSpan(){
        String textSpan = this.cmbReappearanceSpan.getSelectedItem().toString();
        
        if("1ヶ月".equals(textSpan)){
            return 1;
        } else if("45日".equals(textSpan)){
            return 45;
        } else if("2ヶ月".equals(textSpan)){
            return 2;
        } else if("3ヶ月".equals(textSpan)){
            return 3;
        } else if("4ヶ月".equals(textSpan)){
            return 4;
        } else if("5ヶ月".equals(textSpan)){
            return 5;
        } else {
            return 6;
        }
    }
    
    private void doOutput() {

        //IVS_vtnhan start add 20140723 New request #33403
        String lstShopCategoryId = "";
        String lstNameShopCategory = "";
        if(mrsUse.size() >0){
            int count = 0;
            for(MstShopCategory category : mrsUse){
                if(category.getShopCategoryId() != null){
                    lstShopCategoryId += category.getShopCategoryId();
                    lstNameShopCategory += category.getShopClassName();
                    count++;
                    if(count < mrsUse.size()){
                        lstShopCategoryId += ",";
                        lstNameShopCategory += "、";
                    }
                }
            }
        }
        if(!lstShopCategoryId.equals("")){
            paramBean.setListCategoryId(lstShopCategoryId);
        }else{
            paramBean.setListCategoryId(null);
        }

        paramBean.setListCategoryName(lstNameShopCategory);
        paramBean.setIsHideCategory(isHideCategory);                
        paramBean.setUseShopCategory(useShopCategory);
                
       //IVS_vtnhan end add 20140723 New request #33403
                
	//グループ
	if(target.getSelectedItem() instanceof MstGroup) {
	    MstGroup mg = (MstGroup)target.getSelectedItem();
	    paramBean.setTargetName(mg.getGroupName());
	    paramBean.setShopIDList(mg.getShopIDListAll());
	}
	//店舗
	else if(target.getSelectedItem() instanceof MstShop) {
	    MstShop ms = (MstShop)target.getSelectedItem();
	    paramBean.setTargetName(ms.getShopName());
	    paramBean.setShopIDList(ms.getShopID().toString());
	}

	//対象となる店舗が存在しない場合
	if(paramBean.getShopIDList().equals("")) {
		MessageDialog.showMessageDialog(this,
			MessageUtil.getMessage(4001),
			this.getTitle(),
			JOptionPane.ERROR_MESSAGE);
		return;
	}

	// 再来算出期間
	int reappearanceCount = getReappearanceSpan();
	paramBean.setReappearanceCountMessage(this.cmbReappearanceSpan.getSelectedItem().toString());

	// 固定回数
	int fixedCount = 3;
	try {
	    fixedCount = Integer.parseInt(this.txtFixedCount.getText());
	} catch(NumberFormatException e){
	}
	paramBean.setFixedCount(fixedCount);
        
        //税区分
        if(this.rdoTaxBlank.isSelected()) {
            paramBean.setTaxType(ReportParameterBean.TAX_TYPE_BLANK);	// 税区分(税抜き)
        } else if(this.rdoTaxUnit.isSelected()) {
            paramBean.setTaxType(ReportParameterBean.TAX_TYPE_UNIT);	// 税区分(税込み)
        }
        
        JExcelApi jx = new JExcelApi("担当別成績一覧表");
         if(paramBean.isIsHideCategory() == false){
             jx.setTemplateFile("/reports/担当別成績一覧表2.xls");
         }else{
             jx.setTemplateFile("/reports/担当別成績一覧表.xls");
         }
        
        
        // ヘッダ
        jx.setValue(6, 3, paramBean.getTargetStartDate() + " 〜 " + paramBean.getTargetEndDate());
        jx.setValue(6, 5, paramBean.getTargetName());
        //IVS_LVTu start edit 2014/12/15 New request #32795 [gb] [トータルビューティ対応] 担当別成績一覧表
//        jx.setValue(6, 6, paramBean.getReappearanceCountMessage() + " ( " + lblTargetDate.getText() + " )");
//        jx.setValue(6, 7, paramBean.getFixedCount() + "回");
//        jx.setValue(6, 8, this.rdoTaxBlank.isSelected() ? "税抜" : "税込");
//        jx.setValue(31, 10, "消費税" + (this.rdoTaxBlank.isSelected() ? "(外税)" : "(内税)"));
        
        
        //IVS_vtnhan start add 20140723 MASHU_担当再来分析
        if(paramBean.isIsHideCategory() == false){
            jx.setValue(6, 6, paramBean.getReappearanceCountMessage() + " ( " + lblTargetDate.getText() + " )");
            jx.setValue(6, 7, paramBean.getFixedCount() + "回");
            jx.setValue(6, 8, this.rdoTaxBlank.isSelected() ? "税抜" : "税込");
        }else{
            if(paramBean.getListCategoryName() != null)
            {
                jx.setValue(6, 6, paramBean.getListCategoryName());
            }
            else
            {
                jx.setValue(6, 6, "");
            }
            jx.setValue(6, 7, paramBean.getReappearanceCountMessage() + " ( " + lblTargetDate.getText() + " )");
            jx.setValue(6, 8, paramBean.getFixedCount() + "回");
            jx.setValue(6, 9, this.rdoTaxBlank.isSelected() ? "税抜" : "税込");
            
        }
        
        jx.setValue(31, 11, "消費税" + (this.rdoTaxBlank.isSelected() ? "(外税)" : "(内税)"));
        

        /*********************************/
        // ＜全体情報＞
        /*********************************/
        this.setTotalSalesInfo(jx);
        
        //int row = 18;
        int row = 19;
        //IVS_LVTu end edit 2014/12/15 New request #32795 [gb] [トータルビューティ対応] 担当別成績一覧表
        /*********************************/
        // ＜主担当売上＞
        /*********************************/
        row = this.setChargeStaffSalesInfo(jx, row);
        
        /*********************************/
        // ＜担当別売上＞
        /*********************************/
        row = this.setTechSalesInfo(jx, row);
        
        /*********************************/
        // ＜主担当来店回数別売上＞
        /*********************************/
        row = this.setVisitCountSalesInfo(jx, row);
        
        /*********************************/
        // ＜主担当再来売上＞
        /*********************************/
        row = this.setRepeatSalesInfo(jx, row);
        
        /*********************************/
        // ＜主担当性別別売上＞
        /*********************************/
        row = this.setGenderSalesInfo(jx, row);
        
        jx.openWorkbook();
        
    }
    	
    //New request #32795 [gb] [トータルビューティ対応] 担当別成績一覧表
    //nahoang start add 20141201
    private void initCategoryWithMutiShop() {
        mrsRef = new MstShopCategorys();
        MstShop ms = (MstShop) target.getSelectedItem();
        if (ms.getShopID() != null) {
            try {
                mscg = new MstShopCategorys();
                ConnectionWrapper con = SystemInfo.getConnection();

                mscg.loadByShop(con, ms.getShopID());

                if (mscg.size() > 0) {
                    mrsRef = mscg;
                }

            } catch (SQLException e) {

                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }

    }

    private void initCategoryWithGroupShop() {
        mrsRef = new MstShopCategorys();
        SimpleMaster sm = new SimpleMaster(
                "",
                "mst_shop_category",
                "shop_category_id",
                "shop_class_name", 0);

        sm.loadData();
        for (MstData md : sm) {
            if (md != null) {
                MstShopCategory category = new MstShopCategory();
                category.setShopCategoryId(md.getID());
                category.setShopClassName(md.getName());
                category.setDisplaySeq(md.getDisplaySeq());
                mrsRef.add(category);
            }

        }

    }

    public void displayForDesign(boolean isGroup, Integer useShopCategory) {

        if (isGroup) {
            SwingUtil.clearTable(tblReferenceCategoryName);
            SwingUtil.clearTable(tblSelectCategoryName);
            lblCategory.setVisible(true);
            referenceCategoryLeftScrollPane.setVisible(true);
            tblReferenceCategoryName.setVisible(true);
            selectCategoryRightScrollPane.setVisible(true);
            tblSelectCategoryName.setVisible(true);

            selectAllButton.setVisible(true);
            selectButton.setVisible(true);
            releaseButton.setVisible(true);
            releaseAllButton.setVisible(true);
            //Luc start edit 20150213 #35207
            if(SystemInfo.getSetteing().isUseShopCategory()){
                jPanel3.setVisible(true);
            }else {
                 jPanel3.setVisible(false);
            }
            //Luc end edit 20150213 #35207

        } else {
            MstShop ms = (MstShop) target.getSelectedItem();
            if (ms.getUseShopCategory().equals(1)) {
                SwingUtil.clearTable(tblReferenceCategoryName);
                SwingUtil.clearTable(tblSelectCategoryName);
                lblCategory.setVisible(true);
                referenceCategoryLeftScrollPane.setVisible(true);
                tblReferenceCategoryName.setVisible(true);

                selectCategoryRightScrollPane.setVisible(true);
                tblSelectCategoryName.setVisible(true);

                selectAllButton.setVisible(true);
                selectButton.setVisible(true);
                releaseButton.setVisible(true);
                releaseAllButton.setVisible(true);

                jPanel3.setVisible(true);

            } else {

                SwingUtil.clearTable(tblReferenceCategoryName);
                SwingUtil.clearTable(tblSelectCategoryName);

                lblCategory.setVisible(false);
                referenceCategoryLeftScrollPane.setVisible(false);
                tblReferenceCategoryName.setVisible(false);

                selectCategoryRightScrollPane.setVisible(false);
                tblSelectCategoryName.setVisible(false);

                selectAllButton.setVisible(false);
                selectButton.setVisible(false);
                releaseButton.setVisible(false);
                releaseAllButton.setVisible(false);
                jPanel3.setVisible(false);

            }
        }

    }

    private void chargeDataCombo() {

        mrsRef = new MstShopCategorys();
        mrsUse = new MstShopCategorys();
        //グループ
        if (target.getSelectedItem() instanceof MstGroup) {
            displayForDesign(true, 1);
            useShopCategory = 1;
            isHideCategory = true;
            initCategoryWithGroupShop();

        } //店舗
        else if (target.getSelectedItem() instanceof MstShop) {
            MstShop ms = (MstShop) target.getSelectedItem();
            if (ms.getUseShopCategory().equals(1)) {
                displayForDesign(false, 1);
                useShopCategory = 1;
                isHideCategory = true;
                initCategoryWithMutiShop();

            } else {

                displayForDesign(false, 0);
                useShopCategory = 0;
                isHideCategory = false;

            }

        }

        this.showItems();
    }

    /**
     * move item
     *
     * @param isSelect
     */
    public void moveMutiCategory(boolean isSelect) {

        JTable fromTable = (isSelect ? tblReferenceCategoryName : tblSelectCategoryName);

        int index = fromTable.getSelectedRow();
        if (index < 0) {
            return;
        }
        ArrayList<MstShopCategory> tmp = new ArrayList<MstShopCategory>();
        if (isSelect) {
            int[] selectedIndex = fromTable.getSelectedRows();
            if (selectedIndex.length > 0) {
                for (int i = 0; i < selectedIndex.length; i++) {
                    mrsUse.add(mrsRef.get(selectedIndex[i]));
                    tmp.add(mrsRef.get(selectedIndex[i]));
                }
                mrsRef.removeAll(tmp);
            }

        } else {

            int[] selectedIndex = fromTable.getSelectedRows();
            if (selectedIndex.length > 0) {
                for (int i = 0; i < selectedIndex.length; i++) {
                    mrsRef.add(mrsUse.get(selectedIndex[i]));
                    tmp.add(mrsUse.get(selectedIndex[i]));
                }
                mrsUse.removeAll(tmp);
            }

        }

        this.showItems();
    }

    public void moveCategoryAll(boolean isSelect) {

        JTable fromTable = (isSelect ? tblReferenceCategoryName : tblSelectCategoryName);

        if (fromTable.getRowCount() == 0) {
            return;
        }

        if (isSelect) {
            for (MstShopCategory mr : mrsRef) {
                mrsUse.add(mr);
            }
            mrsRef.clear();
        } else {
            for (MstShopCategory mr : mrsUse) {
                mrsRef.add(mr);
            }
            mrsUse.clear();
        }

        this.showItems();
    }

    /**
     * show data on two table
     */
    private void showItems() {
        this.showItems(mrsRef, tblReferenceCategoryName);
        this.showItems(mrsUse, tblSelectCategoryName);
    }

    /**
     * show data detail on two table
     *
     * @param list
     * @param table
     */
    private void showItems(ArrayList<MstShopCategory> list, JTable table) {

        Collections.sort(list, new ItemComparator());

        if (table.getCellEditor() != null) {
            table.getCellEditor().stopCellEditing();
        }
        SwingUtil.clearTable(table);

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        for (MstShopCategory mr : list) {
            model.addRow(new Object[]{
                mr.getShopClassName()
            });

        }
    }

    private class ItemComparator implements java.util.Comparator {

        public int compare(Object s, Object t) {
            return ((MstShopCategory) s).getDisplaySeq() - ((MstShopCategory) t).getDisplaySeq();
        }
    }
    //nahoang end add 20141201 
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JCheckBox checkTargetDate;
    private javax.swing.JComboBox cmbReappearanceSpan;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblTargetDate;
    private javax.swing.JLabel lblTargetPeriod;
    private javax.swing.JLabel lblTargetPeriod1;
    private javax.swing.JLabel lblTargetPeriod3;
    private javax.swing.JLabel lblTargetPeriod4;
    private javax.swing.JLabel lblTargetPeriod5;
    private javax.swing.JLabel lblTax;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private javax.swing.JScrollPane referenceCategoryLeftScrollPane;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton releaseButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JScrollPane selectCategoryRightScrollPane;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel target;
    private javax.swing.JLabel targetLabel;
    private javax.swing.ButtonGroup taxGroup;
    private javax.swing.JTable tblReferenceCategoryName;
    private javax.swing.JTable tblSelectCategoryName;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo termFrom;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo termTo;
    private javax.swing.JLabel termtLabe1;
    private javax.swing.JTextField txtFixedCount;
    // End of variables declaration//GEN-END:variables
	
	private	StaffResultListReportFocusTraversalPolicy	ftp	=
			new StaffResultListReportFocusTraversalPolicy();
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(btnOutputExcel);
	}
	
	private void setKeyListener()
	{
		termFrom.addKeyListener(SystemInfo.getMoveNextField());
		termFrom.addFocusListener(SystemInfo.getSelectText());
		termTo.addKeyListener(SystemInfo.getMoveNextField());
		termTo.addFocusListener(SystemInfo.getSelectText());
		cmbReappearanceSpan.addKeyListener(SystemInfo.getMoveNextField());
		cmbReappearanceSpan.addFocusListener(SystemInfo.getSelectText());
		txtFixedCount.addKeyListener(SystemInfo.getMoveNextField());
		txtFixedCount.addFocusListener(SystemInfo.getSelectText());
		rdoTaxUnit.addKeyListener(SystemInfo.getMoveNextField());
		rdoTaxBlank.addKeyListener(SystemInfo.getMoveNextField());  
	}
	
	
	/**
	 * 業務報告画面用FocusTraversalPolicyを取得する。
	 * @return  業務報告画面用FocusTraversalPolicy
	 */
	public StaffResultListReportFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	
	/**
	 * 業務報告画面用FocusTraversalPolicy
	 */
	private class StaffResultListReportFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponStaffResultListReportFocusTraversalPolicy。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer, Component aComponent)
		{
                    
			if (aComponent.equals(termFrom))
                        {
                            return termTo;
			}
                        else if (aComponent.equals(termTo))
                        {
                            return cmbReappearanceSpan;
			}
                        else if (aComponent.equals(cmbReappearanceSpan))
                        {
                            return txtFixedCount;
			}
                        else if (aComponent.equals(txtFixedCount))
                        {
                            return this.getSelectedTaxType();
                        }
                    
			return termFrom;

		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer, Component aComponent)
		{
                    
                        if (aComponent.equals(this.getSelectedTaxType()))
                        {
                            return txtFixedCount;
			}
                        else if (aComponent.equals(txtFixedCount))
                        {
                            return cmbReappearanceSpan;
			}
			else if (aComponent.equals(cmbReappearanceSpan))
			{
                            return termTo;
			}
			else if (aComponent.equals(termTo))
			{
				return termFrom;
                        }

			return termFrom;

		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return termFrom;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return rdoTaxBlank;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return termFrom;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return termFrom;
		}
                
                /**
                 * 選択中の税区分を返します。
                 */
                private Component getSelectedTaxType()
                {
                        if(rdoTaxUnit.isSelected())
                        {
                                return	rdoTaxUnit;
                        }

                        return	rdoTaxBlank;
                }
		
	}

        /**
         * 全体情報
         */
        private void setTotalSalesInfo(JExcelApi jx) {

            // 営業日数（売上なしのレジ締め日数も含める）
            int totalDays = 0;
            try {
                
                StringBuilder sql = new StringBuilder(1000);
                sql.append(" select");
                sql.append("     count(distinct date_trunc('day', sales_date)) as TotalDays");
                sql.append(" from");
                sql.append(" (");
                sql.append(" select");
                sql.append("     sales_date");
                sql.append(" from");
                sql.append("     view_data_sales_detail_valid a");
                sql.append("         join mst_customer b using(customer_id)");
                sql.append(" where");
                sql.append("         a.shop_id in (" + paramBean.getShopIDList() + ")");
                sql.append("     and a.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) +
                                                        " and "+ SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
                sql.append(" union all");
                sql.append(" select");
                sql.append("     manage_date");
                sql.append(" from");
                sql.append("     data_register dr");
                sql.append(" where");
                sql.append("         delete_date is null");
                sql.append("     and shop_id in (" + paramBean.getShopIDList() + ")");
                sql.append("     and manage_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) +
                                                       " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
                sql.append("     and not exists");
                sql.append("         (");
                sql.append("             select 1");
                sql.append("             from");
                sql.append("                 data_sales");
                sql.append("             where");
                sql.append("                     delete_date is null");
                sql.append("                 and shop_id = dr.shop_id");
                sql.append("                 and sales_date = dr.manage_date");
                sql.append("         )");
                sql.append(" ) t");
                
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
                if (rs.next()) totalDays = rs.getInt("TotalDays");

            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            String valueString = "";
            if (rdoTaxBlank.isSelected()) {
                // 税抜
                valueString = "discount_detail_value_no_tax";
            }else{
                // 税込
                valueString = "discount_detail_value_in_tax";
            }

            // メインSQL
            try {
                // スタッフ数取得SQL
                StringBuilder tmpSql = new StringBuilder(1000);
                tmpSql.append(" select");
                tmpSql.append("     coalesce(sum(staff_count), 0)");
                tmpSql.append(" from");
                tmpSql.append("     data_register dr");
                tmpSql.append(" where");
                tmpSql.append("         dr.delete_date is null");
                tmpSql.append("     and dr.shop_id in (" + paramBean.getShopIDList() + ")");
                tmpSql.append("     and dr.manage_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) +
                                                          " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
                StringBuilder sql = new StringBuilder(1000);
                sql.append(" select");
                sql.append("      coalesce(sum(case when product_division = 1 then " + valueString + " else 0 end), 0) as TechSales");
                sql.append("     ,coalesce(sum(case when product_division = 2 then " + valueString + " else 0 end), 0) as ItemSales");
                sql.append("     ,(" + tmpSql.toString() + ") as TotalStaffCount");
                sql.append("        ,coalesce(sum(CASE");
                sql.append("                         WHEN product_division IN (1, 2) THEN ");
                sql.append(" 				CASE");
                sql.append(" 				  WHEN COALESCE (c.overall_discount, 0) = 0::numeric THEN discount_detail_value_in_tax - discount_detail_value_no_tax");
                sql.append(" 				  WHEN c.overall_discount > 0 THEN");
                sql.append(" 				       discount_detail_value_in_tax - discount_detail_value_no_tax - (c.overall_discount - trunc(ceil((c.overall_discount) / (1.0 + get_tax_rate(a.sales_date)))))");
                sql.append(" 				  ELSE 0::numeric");
                sql.append(" 			      END");
                sql.append("                         ELSE 0");
                sql.append("                     END), 0");
                sql.append("                 ) AS Tax ");
                sql.append("     ,count( distinct");
                sql.append("                 case");
                sql.append("                     when product_division = 1");
                sql.append("                     then a.slip_no else null");
                sql.append("                 end");
                sql.append("           ) as TechCount");

                sql.append("     ,count( distinct");
                sql.append("                 case");
                sql.append("                     when product_division = 1");
                sql.append("                      and get_visit_count(a.customer_id, a.shop_id, a.sales_date) = 1");
                sql.append("                      and b.customer_no <> '0'");
                sql.append("                     then a.slip_no else null");
                sql.append("                 end");
                sql.append("           ) as NewCount");

                sql.append(" from");
                sql.append("     view_data_sales_detail_valid a");
                sql.append("         join mst_customer b using(customer_id)");
                sql.append(" LEFT JOIN");
                sql.append("    (SELECT shop_id,");
                sql.append(" 	   slip_no ,");
                sql.append(" 	   coalesce(discount_value, 0) AS overall_discount");
                sql.append("     FROM view_data_sales_detail_all");
                sql.append("     WHERE shop_id in (" + paramBean.getShopIDList() + ")");
                sql.append("       AND sales_date BETWEEN " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and "
                                                        + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
                sql.append("       AND product_division = 0 ) c on c.shop_id = a.shop_id and c.slip_no = a.slip_no");
                sql.append(" where");
            //New request #32795 [gb] [トータルビューティ対応] 担当別成績一覧表
            //nahoang start add 20141201
                if(useShopCategory != 0 && paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""){
                    sql.append("                      exists");
                    sql.append("  (  (select ");
                    sql.append("       1");
                    sql.append("      from");
                    sql.append("       data_sales_detail dsd1");
                    sql.append("       inner join mst_technic mst on mst.technic_id = dsd1.product_id  ");
                    sql.append("       inner join mst_technic_class msc on msc.technic_class_id = mst.technic_class_id");
                    sql.append("            and msc.shop_category_id in ( "+ paramBean.getListCategoryId() + ") ");
                    
                    sql.append("      where dsd1.slip_no = a.slip_no and dsd1.shop_id = a.shop_id and dsd1.slip_detail_no = a.slip_detail_no");
                    sql.append("             and dsd1.product_division in(1) and dsd1.product_division = a.product_division ");
                    sql.append("             and dsd1.delete_date is null ");
                    
                    sql.append("      )");
                    sql.append("      union all");
                    sql.append("      (select ");
                    sql.append("       1 ");
                    sql.append("      from");
                    sql.append("       data_sales_detail dsd1");
                    sql.append("       inner join mst_item msi on msi.item_id = dsd1.product_id ");
                    sql.append("       inner join mst_item_class mic on mic.item_class_id = msi.item_class_id ");
                    sql.append("      where dsd1.slip_no = a.slip_no and dsd1.shop_id = a.shop_id and dsd1.slip_detail_no = a.slip_detail_no ");
                    sql.append("            and dsd1.product_division in(2) and dsd1.product_division = a.product_division ");
                    sql.append("            and dsd1.delete_date is null ");
                    sql.append("            and mic.shop_category_id in ( "+ paramBean.getListCategoryId() + ") ");
                    sql.append("      )");        
                    
                    sql.append("  ) and "); 
                    
                }
                //nahoang end add 20141201 
                sql.append("         a.shop_id in (" + paramBean.getShopIDList() + ")");
                sql.append("     and a.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and "
                                                        + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
                
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

                while (rs.next()) {

                    // 営業日数
                    jx.setValue(6, 4, totalDays + "日");
                    
                    //IVS_LVTu start edit 2014/12/15 New request #32795 [gb] [トータルビューティ対応] 担当別成績一覧表
                    // 技術売上
                    //jx.setValue(7, 11, rs.getDouble("TechSales"));
                    jx.setValue(7, 12, rs.getDouble("TechSales"));
                    // 店販売上
                    //jx.setValue(13, 11, rs.getDouble("ItemSales"));
                    jx.setValue(13, 12, rs.getDouble("ItemSales"));
                    // スタッフ数
                    //jx.setValue(19, 11, totalDays > 0 ? rs.getDouble("TotalStaffCount") / totalDays : 0);
                    jx.setValue(19, 12, totalDays > 0 ? rs.getDouble("TotalStaffCount") / totalDays : 0);
                    // 消費税
                    //jx.setValue(31, 11, rs.getDouble("Tax"));
                    jx.setValue(31, 12, rs.getDouble("Tax"));
                    // 技術客数
                    //jx.setValue(1, 14, rs.getDouble("TechCount"));
                    jx.setValue(1, 15, rs.getDouble("TechCount"));
                    // 新規客数
                    //jx.setValue(13, 14, rs.getDouble("NewCount"));
                    jx.setValue(13, 15, rs.getDouble("NewCount"));
                    //IVS_LVTu end edit 2014/12/15 New request #32795 [gb] [トータルビューティ対応] 担当別成績一覧表
                }
                
            } catch(SQLException e) {
                
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            
        }

        /**
         * 主担当売上
         */
        //nhanvt start edit 20141230 New request #33403
        private int setChargeStaffSalesInfo(JExcelApi jx, int row) {

            String valueString = "";
            String claimValueString = "";
            
            if (rdoTaxBlank.isSelected()) {
                // 税抜
                valueString = "discount_detail_value_no_tax";
                claimValueString = "sign(price / (1.0 + get_tax_rate(a.tax_rate, a.sales_date))) * ceil(abs(price / (1.0 + get_tax_rate(a.tax_rate, a.sales_date))))";
            }else{
                // 税込
                valueString = "discount_detail_value_in_tax";
                claimValueString = "price";
            }
            
            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select");
            sql.append("      c.staff_id");
            sql.append("     ,max(case when c.staff_id is null then '担当なし' else c.staff_name1 || '　' || c.staff_name2 end) as StaffName");
            sql.append("     ,coalesce(sum(case when product_division = 1 then " + valueString + " else 0 end), 0) as TechSales");
            sql.append("     ,count( distinct");
            sql.append("                 case");
            sql.append("                     when product_division in (1, 3)");
            sql.append("                     then a.slip_no else null");
            sql.append("                 end");
            sql.append("           ) as TechCount");
            sql.append("     ,coalesce(sum(case when product_division = 2 then " + valueString + " else 0 end), 0) as ItemSales");
            sql.append("     ,count( distinct");
            sql.append("                 case");
            sql.append("                     when product_division = 3");
            sql.append("                     then a.slip_no else null");
            sql.append("                 end");
            sql.append("           ) as ClaimCount");
            sql.append("     ,coalesce(sum(case when product_division = 3");
            sql.append("                     then");
            sql.append("                         -1 *");
            sql.append("                         (");
            sql.append("                             select " + claimValueString);
            sql.append("                             from");
            sql.append("                                 mst_use_product");
            sql.append("                             where");
            sql.append("                                     shop_id = a.shop_id");
            sql.append("                                 and product_division = 1");
            sql.append("                                 and product_id = a.product_id");
            sql.append("                         )");
            sql.append("                     else 0 end), 0) as ClaimValue");
            sql.append("     ,sum(case when product_division = 1 and a.designated_flag then " + valueString + " else 0 end) as nominationValue");
            sql.append("     ,count(distinct case when product_division in (1, 3) and a.designated_flag then a.slip_no end) as nominationNum");
            sql.append(" from");
            sql.append("     view_data_sales_detail_valid a");
            sql.append("         join mst_customer b using(customer_id)");
            //Luc start edit 20150309 Bug #35217
            //sql.append("         left join mst_staff c");
            //sql.append("                on a.staff_id = c.staff_id");
            if(useShopCategory != 0 && paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""){
                sql.append("         inner join  data_sales_mainstaff dsmt on a.slip_no = dsmt.slip_no and a.shop_id = dsmt.shop_id ");
            }
            sql.append("         left join mst_staff c");
            if(useShopCategory != 0 && paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""){
                 sql.append("                on dsmt.staff_id = c.staff_id");
            }else {
                sql.append("                on a.staff_id = c.staff_id");
            }
            
            //Luc end edit 20150309 Bug #35217 
            sql.append(" where");
            
            if(useShopCategory != 0 && paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""){
                sql.append("                 exists ( ");
                sql.append("    (select ");
                sql.append("       1 ");
                sql.append("      from");
                sql.append("       data_sales_detail dsd1");
                sql.append("       inner join mst_technic mst on mst.technic_id = dsd1.product_id ");
                sql.append("       inner join mst_technic_class msc on msc.technic_class_id = mst.technic_class_id ");
                sql.append("            and msc.shop_category_id in ( " + paramBean.getListCategoryId() + ") ");
                sql.append("      where dsd1.slip_no = a.slip_no and dsd1.shop_id = a.shop_id and dsd1.slip_detail_no = a.slip_detail_no");
                sql.append("      and dsd1.product_division in (1,3) and dsd1.product_division = a.product_division ");
                sql.append("      and dsd1.delete_date is null ");
                
                sql.append("      )");
                sql.append("      union all");
                sql.append("      (select ");
                sql.append("       1 ");
                sql.append("      from");
                sql.append("       data_sales_detail dsd1");
                sql.append("       inner join mst_item msi on msi.item_id = dsd1.product_id  ");
                sql.append("       inner join mst_item_class mic on mic.item_class_id = msi.item_class_id  ");
                sql.append("            and mic.shop_category_id in ( " + paramBean.getListCategoryId() + ") ");
                sql.append("      where dsd1.slip_no = a.slip_no and dsd1.shop_id = a.shop_id and dsd1.slip_detail_no = a.slip_detail_no ");
                sql.append("            and dsd1.product_division in (2,4) and dsd1.product_division = a.product_division ");
                sql.append("            and dsd1.delete_date is null ");
                sql.append("      )");
                
                sql.append("                 union all  ");

                sql.append("                 ( SELECT ");
                sql.append("                     1");
                sql.append("                 FROM");
                sql.append("                     data_sales_detail dsd");
                sql.append("                     inner join mst_course msc on msc.course_id = dsd.product_id ");
                sql.append("                     inner join mst_course_class mscc on mscc.course_class_id = msc.course_class_id ");
                //業態選択の場合
                sql.append("                  AND mscc.shop_category_id in (" + paramBean.getListCategoryId() + ") ");
                sql.append("                 WHERE");
                sql.append("                         dsd.shop_id = a.shop_id");
                sql.append("                     AND dsd.slip_no = a.slip_no");
                sql.append("                     AND dsd.slip_detail_no = a.slip_detail_no");
                sql.append("                     AND dsd.delete_date is null");
                sql.append("                     AND dsd.product_division in (5,6,7)");
                sql.append(" ) ");
                
                sql.append("  ) and ");
            }
            
            sql.append("         a.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("     and a.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and "
                                                    + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
            sql.append(" group by");
            sql.append("     c.staff_id");
            sql.append(" order by");
            sql.append("      max(case when c.display_seq is null then 1 else 0 end)");
            sql.append("     ,max(c.display_seq)");
            sql.append("     ,max(lpad(c.staff_no, 10, '0'))");
            sql.append("     ,c.staff_id");

            try {
                
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

                if (rs.last()) {

                    // 追加行数セット
                    jx.insertRow(row, rs.getRow() - 1);
		    for (int i = 1; i < rs.getRow(); i++) {
			jx.mergeCells(1, row + i, 6, row + i);
			jx.mergeCells(7, row + i, 10, row + i);
			jx.mergeCells(11, row + i, 12, row + i);
			jx.mergeCells(13, row + i, 16, row + i);
			jx.mergeCells(17, row + i, 18, row + i);
			jx.mergeCells(19, row + i, 20, row + i);
			jx.mergeCells(21, row + i, 24, row + i);
			jx.mergeCells(25, row + i, 28, row + i);
			jx.mergeCells(29, row + i, 30, row + i);
			jx.mergeCells(31, row + i, 34, row + i);
			jx.mergeCells(35, row + i, 38, row + i);
			jx.mergeCells(39, row + i, 42, row + i);
		    }
                    
                    rs.first();

                    // データセット
                    do {

                        // スタッフ名
                        jx.setValue(1, row, rs.getString("StaffName"));
                        // 技術売上
                        jx.setValue(7, row, rs.getDouble("TechSales"));
                        // 技術客数
                        jx.setValue(11, row, rs.getDouble("TechCount"));
                        // 指名売上
                        jx.setValue(13, row, rs.getDouble("nominationValue"));
                        // 指名数
                        jx.setValue(17, row, rs.getDouble("nominationNum"));
                        // 店販売上
                        jx.setValue(25, row, rs.getDouble("ItemSales"));
                        // ｸﾚｰﾑ数
                        jx.setValue(29, row, rs.getDouble("ClaimCount"));
                        // ｸﾚｰﾑ減益額
                        jx.setValue(31, row, rs.getDouble("ClaimValue"));

                        row++;

                    } while (rs.next());
                    
                } else {
                    row++;
                }

                jx.removeRow(row);
                
            } catch(SQLException e) {
                
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            row += 4;
            
            return row;
        }
        
        /**
         * 担当別売上
         */
        private int setTechSalesInfo(JExcelApi jx, int row) {

            String valueString = "";
            if (rdoTaxBlank.isSelected()) {
                // 税抜
                valueString = "discount_detail_value_no_tax";
            }else{
                // 税込
                valueString = "discount_detail_value_in_tax";
            }
            
            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select");
            sql.append("      b.staff_id");
            sql.append("     ,max(case when b.staff_id is null then '担当なし' else b.staff_name1 || '　' || b.staff_name2 end) as StaffName");
            sql.append("     ,sum(case when product_division = 1 then " + valueString + " else 0 end) as Hodocojuts_value");
            sql.append("     ,count(distinct case when product_division = 1 then a.slip_no end) as Hodocojuts_Num");
            sql.append("     ,sum(case when product_division = 1 and a.detail_designated_flag then " + valueString + " else 0 end) as Nomination_value");
            sql.append("     ,count(distinct case when product_division = 1 and a.detail_designated_flag then a.slip_no end) as Nomination_Num");
            sql.append("     ,sum(case when product_division = 1 and a.detail_approached_flag then " + valueString + " else 0 end) as Approached_value");
            sql.append("     ,count(distinct case when product_division = 1 and a.detail_approached_flag then a.slip_no end) as Approached_Num");
            sql.append("     ,sum(case when product_division = 2 then " + valueString + " else 0 end) as item_value");
            sql.append(" from");
            sql.append("     (" + ReportLogic.getDataSalesDetailShareTable() + ") a");
            //TVHoa start edit 20150309 Bug #40012            
            //Luc start edit 20150309 Bug #35217
            //if (useShopCategory != 0 && paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "") {
            //   sql.append("         inner join  data_sales_mainstaff dsmt on a.slip_no = dsmt.slip_no and a.shop_id = dsmt.shop_id ");
            //}
            sql.append("         left join mst_staff b");
            
            sql.append("                on a.detail_staff_id = b.staff_id");
            //if (useShopCategory != 0 && paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "") {
            //    sql.append("                on dsmt.staff_id = b.staff_id");
            //}else {
            //    sql.append("                on a.detail_staff_id = b.staff_id");
            //}
            //Luc end edit 20150309 Bug #35217
            //TVHoa end edit 20150309 Bug #40012
            sql.append(" where");
            //New request #32795 [gb] [トータルビューティ対応] 担当別成績一覧表
            //nahoang start add 20141201 
            if (useShopCategory != 0 && paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "") {
                sql.append("            exists (");
                sql.append("    (select");
                sql.append("       1 ");
                sql.append("      from");
                sql.append("       data_sales_detail dsd1");
                sql.append("       inner join mst_technic mst on mst.technic_id = dsd1.product_id  ");
                sql.append("       inner join mst_technic_class msc on msc.technic_class_id = mst.technic_class_id ");
                sql.append("            and msc.shop_category_id in ( " + paramBean.getListCategoryId() + ") ");
                sql.append("      where dsd1.slip_no = a.slip_no and dsd1.shop_id = a.shop_id and dsd1.slip_detail_no = a.slip_detail_no");
                sql.append("            and dsd1.product_division in (1,3) and dsd1.product_division = a.product_division ");
                sql.append("            and dsd1.delete_date is null ");
                sql.append("      )");
                sql.append("      union all");
                sql.append("      (select ");
                sql.append("       1 ");
                sql.append("      from");
                sql.append("       data_sales_detail dsd1");
                sql.append("       inner join mst_item msi on msi.item_id = dsd1.product_id ");
                sql.append("       inner join mst_item_class mic on mic.item_class_id = msi.item_class_id ");
                sql.append("            and mic.shop_category_id in ( " + paramBean.getListCategoryId() + ") ");
                sql.append("      where dsd1.slip_no = a.slip_no and dsd1.shop_id = a.shop_id and dsd1.slip_detail_no = a.slip_detail_no ");
                sql.append("            and dsd1.product_division in (2,4) and dsd1.product_division = a.product_division ");
                sql.append("            and dsd1.delete_date is null ");
                sql.append("      )");
                
                sql.append("                 union all  ");
                sql.append("                 ( SELECT ");
                sql.append("                     1");
                sql.append("                 FROM");
                sql.append("                     data_sales_detail dsd");
                sql.append("                     inner join mst_course msc on msc.course_id = dsd.product_id ");
                sql.append("                     inner join mst_course_class mscc on mscc.course_class_id = msc.course_class_id ");
                //業態選択の場合
                sql.append("                  AND mscc.shop_category_id in (" + paramBean.getListCategoryId() + ") ");
                
                sql.append("                 WHERE");
                sql.append("                         dsd.shop_id = a.shop_id");
                sql.append("                     AND dsd.slip_no = a.slip_no");
                sql.append("                     AND dsd.slip_detail_no = a.slip_detail_no");
                sql.append("                     AND dsd.delete_date is null");
                sql.append("                     AND dsd.product_division in (5,6,7)");
                
                sql.append(" ) ");
               
                sql.append("  ) and");
            }
            //nahoang end add 20141201
            sql.append("         a.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("     and a.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and "
                                                         + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
            sql.append(" group by");
            sql.append("     b.staff_id");
            sql.append(" order by");
            sql.append("      max(case when b.display_seq is null then 1 else 0 end)");
            sql.append("     ,max(b.display_seq)");
            sql.append("     ,max(lpad(b.staff_no, 10, '0'))");
            sql.append("     ,b.staff_id");

            try {
                
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

                if (rs.last()) {

                    // 追加行数セット
                    jx.insertRow(row, rs.getRow() - 1);
		    for (int i = 1; i < rs.getRow(); i++) {
			jx.mergeCells(1, row + i, 6, row + i);
			jx.mergeCells(7, row + i, 10, row + i);
			jx.mergeCells(11, row + i, 14, row + i);
			jx.mergeCells(15, row + i, 18, row + i);
			jx.mergeCells(19, row + i, 22, row + i);
			jx.mergeCells(23, row + i, 26, row + i);
			jx.mergeCells(27, row + i, 30, row + i);
			jx.mergeCells(31, row + i, 34, row + i);
			jx.mergeCells(35, row + i, 38, row + i);
			jx.mergeCells(39, row + i, 42, row + i);
		    }
                    
                    rs.first();

                    // データセット
                    do {

                        // スタッフ名
                        jx.setValue(1, row, rs.getString("staffname"));
                        // 施術売上
                        jx.setValue(7, row, rs.getDouble("hodocojuts_value"));
                        // 施術数
                        jx.setValue(11, row, rs.getDouble("hodocojuts_num"));
                        // 施術指名売上
                        jx.setValue(15, row, rs.getDouble("nomination_value"));
                        // 施術指名数
                        jx.setValue(19, row, rs.getDouble("nomination_num"));
                        // アプローチ売上
                        jx.setValue(23, row, rs.getDouble("approached_value"));
                        // アプローチ数
                        jx.setValue(27, row, rs.getDouble("approached_num"));
                        // 商品売上
                        jx.setValue(31, row, rs.getDouble("item_value"));

                        row++;

                    } while (rs.next());

                } else {
                    row++;
                }

                jx.removeRow(row);
                
            } catch(SQLException e) {
                
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            row += 5;
            
            return row;
        }
        
        /**
         * 主担当来店回数別売上
         */
        private int setVisitCountSalesInfo(JExcelApi jx, int row) {

            // 準固定タイトル
            jx.setValue(19, row - 2, "2-" + (paramBean.getFixedCount() - 1) + "回");
            // 固定タイトル
            jx.setValue(31, row - 2, "固定（" + paramBean.getFixedCount() + "回以上）");
            
            String valueString = "";
            if (rdoTaxBlank.isSelected()) {
                // 税抜
                valueString = "discount_detail_value_no_tax";
            }else{
                // 税込
                valueString = "discount_detail_value_in_tax";
            }

            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select");
            sql.append("      c.staff_id");
            sql.append("     ,max(case when c.staff_id is null then '担当なし' else c.staff_name1 || '　' || c.staff_name2 end) as staffname");
            
            sql.append("     ,count(distinct case when get_visit_count(a.customer_id, a.shop_id, a.sales_date) = 1 then a.slip_no else null end) as newCount");
            sql.append("     ,count(distinct case when introducer_id is not null and get_visit_count(a.customer_id, a.shop_id, a.sales_date) = 1 then a.slip_no else null end) as newIntroducerCount");
            sql.append("     ,count(distinct case when a.designated_flag and get_visit_count(a.customer_id, a.shop_id, a.sales_date) = 1 then a.slip_no else null end) as newNominationCount");
            sql.append("     ,sum(case when get_visit_count(a.customer_id, a.shop_id, a.sales_date) = 1 then " + valueString + " else 0 end) as newValue");
            sql.append("     ,sum(case when a.designated_flag and get_visit_count(a.customer_id, a.shop_id, a.sales_date) = 1 then " + valueString + " else 0 end) as newNominationValue");

            sql.append("     ,count(distinct case when get_visit_count(a.customer_id, a.shop_id, a.sales_date) between 2 and " + (paramBean.getFixedCount() - 1) + " then a.slip_no else null end) as subFixedCount");
            sql.append("     ,count(distinct case when a.designated_flag and get_visit_count(a.customer_id, a.shop_id, a.sales_date) between 2 and " + (paramBean.getFixedCount() - 1) + " then a.slip_no else null end) as subFixedNominationCount");
            sql.append("     ,sum(case when get_visit_count(a.customer_id, a.shop_id, a.sales_date) between 2 and " + (paramBean.getFixedCount() - 1) + " then " + valueString + " else 0 end) as subFixedValue");
            sql.append("     ,sum(case when a.designated_flag and get_visit_count(a.customer_id, a.shop_id, a.sales_date) between 2 and " + (paramBean.getFixedCount() - 1) + " then " + valueString + " else 0 end) as subFixedNominationValue");

            sql.append("     ,count(distinct case when get_visit_count(a.customer_id, a.shop_id, a.sales_date) >= " + paramBean.getFixedCount() + " then a.slip_no else null end) as fixedCount");
            sql.append("     ,count(distinct case when a.designated_flag and get_visit_count(a.customer_id, a.shop_id, a.sales_date) >= " + paramBean.getFixedCount() + " then a.slip_no else null end) as fixedNominationCount");
            sql.append("     ,sum(case when get_visit_count(a.customer_id, a.shop_id, a.sales_date) >= " + paramBean.getFixedCount() + " then " + valueString + " else 0 end) as fixedValue");
            sql.append("     ,sum(case when a.designated_flag and get_visit_count(a.customer_id, a.shop_id, a.sales_date) >= " + paramBean.getFixedCount() + " then " + valueString + " else 0 end) as fixedNominationValue");

            sql.append(" from");
            sql.append("     view_data_sales_detail_valid a");
             //Luc start edit 20150309 Bug #35217
             if (useShopCategory != 0 && paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "") {
                sql.append("         inner join  data_sales_mainstaff dsmt on a.slip_no = dsmt.slip_no and a.shop_id = dsmt.shop_id ");
            }
            sql.append("         join mst_customer b using (customer_id)");
            
            sql.append("         left join mst_staff c");
            //sql.append("                on a.staff_id = c.staff_id");
            //sql.append("                on a.detail_staff_id = b.staff_id");
            if (useShopCategory != 0 && paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "") {
                sql.append("                on dsmt.staff_id = c.staff_id");
            }else {
                //TVHoa start edit 201500630 Bug #38903
                //sql.append("                on a.detail_staff_id = c.staff_id");
                sql.append("                on a.staff_id = c.staff_id");
                //TVHoa end edit 201500630 Bug #38903
            }
            sql.append(" where");
            //New request #32795 [gb] [トータルビューティ対応] 担当別成績一覧表
            //nahoang start add 20141201
            if (useShopCategory != 0 && paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "") {
                sql.append("                        exists");
                sql.append("  (   select ");
                sql.append("       1 ");
                sql.append("      from");
                sql.append("       data_sales_detail dsd1");
                sql.append("       inner join mst_technic mst on mst.technic_id = dsd1.product_id ");
                sql.append("       inner join mst_technic_class msc on msc.technic_class_id = mst.technic_class_id ");
                sql.append("            and msc.shop_category_id in ( " + paramBean.getListCategoryId() + ") ");
                sql.append("      where dsd1.slip_no = a.slip_no and dsd1.shop_id = a.shop_id and dsd1.slip_detail_no = a.slip_detail_no");
                //TVHoa start edit 20150701 Bug #38903
                sql.append("            and dsd1.product_division in (1) and dsd1.product_division = a.product_division ");
                sql.append("            and dsd1.delete_date is null ");
                sql.append("    ) and ");
            }
            //nahoang end add 20141201
            sql.append("         b.customer_no <> '0'");
            sql.append("     and a.product_division in (1)");
            //TVHoa end edit 20150701 Bug #38903
            sql.append("     and a.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("     and a.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and "
                                                    + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
            sql.append(" group by");
            sql.append("     c.staff_id");
            sql.append(" order by");
            sql.append("      max(case when c.display_seq is null then 1 else 0 end)");
            sql.append("     ,max(c.display_seq)");
            sql.append("     ,max(lpad(c.staff_no, 10, '0'))");
            sql.append("     ,c.staff_id");

            try {
                
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

                if (rs.last()) {

                    // 追加行数セット
                    jx.insertRow(row, rs.getRow() - 1);
		    for (int i = 1; i < rs.getRow(); i++) {
			jx.mergeCells(1, row + i, 6, row + i);
			jx.mergeCells(7, row + i, 8, row + i);
			jx.mergeCells(9, row + i, 10, row + i);
			jx.mergeCells(11, row + i, 12, row + i);
			jx.mergeCells(13, row + i, 15, row + i);
			jx.mergeCells(16, row + i, 18, row + i);
			jx.mergeCells(19, row + i, 21, row + i);
			jx.mergeCells(22, row + i, 24, row + i);
			jx.mergeCells(25, row + i, 27, row + i);
			jx.mergeCells(28, row + i, 30, row + i);
			jx.mergeCells(31, row + i, 33, row + i);
			jx.mergeCells(34, row + i, 36, row + i);
			jx.mergeCells(37, row + i, 39, row + i);
			jx.mergeCells(40, row + i, 42, row + i);
		    }
                    
                    rs.first();

                    // データセット
                    do {

                        // スタッフ名
                        jx.setValue(1, row, rs.getString("staffname"));
                        //新規　主担当数
                        jx.setValue(7, row, rs.getDouble("newCount"));
                        //新規　紹介
                        jx.setValue(9, row, rs.getDouble("newIntroducerCount"));
                        //新規　指名数
                        jx.setValue(11, row, rs.getDouble("newNominationCount"));
                        //新規　主担当売上
                        jx.setValue(13, row, rs.getDouble("newValue"));
                        //新規　指名売上
                        jx.setValue(16, row, rs.getDouble("newNominationValue"));
                        
                        //準固定　主担当数
                        jx.setValue(19, row, rs.getDouble("subFixedCount"));
                        //準固定　指名数
                        jx.setValue(22, row, rs.getDouble("subFixedNominationCount"));
                        //準固定　主担当売上
                        jx.setValue(25, row, rs.getDouble("subFixedValue"));
                        //準固定　指名売上
                        jx.setValue(28, row, rs.getDouble("subFixedNominationValue"));

                        //固定　主担当数
                        jx.setValue(31, row, rs.getDouble("fixedCount"));
                        //固定　指名数
                        jx.setValue(34, row, rs.getDouble("fixedNominationCount"));
                        //固定　主担当売上
                        jx.setValue(37, row, rs.getDouble("fixedValue"));
                        //固定　指名売上
                        jx.setValue(40, row, rs.getDouble("fixedNominationValue"));
                        
                        row++;

                    } while (rs.next());

                } else {
                    row++;
                }

                jx.removeRow(row);
                
            } catch(SQLException e) {
                
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            row += 5;

            return row;
        }
        //nhanvt end edit 20141230 New request #33403
        /**
         * 主担当再来売上
         */
        private int setRepeatSalesInfo(JExcelApi jx, int row) {

            // 準固定タイトル
            jx.setValue(25, row - 2, "2-" + (paramBean.getFixedCount() - 1) + "回");
            // 固定タイトル
            jx.setValue(34, row - 2, "固定（" + paramBean.getFixedCount() + "回以上）");

            if (!checkTargetDate.isSelected()) {
                paramBean.setTargetStartDate(paramBean.getCalculationStartDate());
            }
            
            String sql = (new ReportLogic()).getStaffReportReappearanceSQL(paramBean);

            changeTargetDate();
            
            try {
                
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql);

                if (rs.last()) {

                    // 追加行数セット
                    jx.insertRow(row, rs.getRow() - 1);
		    for (int i = 1; i < rs.getRow(); i++) {
			jx.mergeCells(1, row + i, 6, row + i);
			jx.mergeCells(7, row + i, 10, row + i);
			jx.mergeCells(11, row + i, 12, row + i);
			jx.mergeCells(13, row + i, 15, row + i);
			jx.mergeCells(16, row + i, 19, row + i);
			jx.mergeCells(20, row + i, 21, row + i);
			jx.mergeCells(22, row + i, 24, row + i);
			jx.mergeCells(25, row + i, 28, row + i);
			jx.mergeCells(29, row + i, 30, row + i);
			jx.mergeCells(31, row + i, 33, row + i);
			jx.mergeCells(34, row + i, 37, row + i);
			jx.mergeCells(38, row + i, 39, row + i);
			jx.mergeCells(40, row + i, 42, row + i);
		    }
                    
                    rs.first();

                    double rowTotal1 = 0d;
                    double rowTotal2 = 0d;
                    double newTotal1 = 0d;
                    double newTotal2 = 0d;
                    double subTotal1 = 0d;
                    double subTotal2 = 0d;
                    double fixTotal1 = 0d;
                    double fixTotal2 = 0d;
                    
                    // データセット
                    do {

                        // スタッフ名
                        jx.setValue(1, row, rs.getString("staff_name"));
                        
                        // 新規
                        jx.setValue(16, row, rs.getDouble("new_reappearance_amount"));
                        jx.setValue(20, row, rs.getDouble("new_reappearance"));
                        jx.setValue(22, row, rs.getDouble("new_total") > 0 ? rs.getDouble("new_reappearance") / rs.getDouble("new_total") : 0);
                        
                        rowTotal1 = rs.getDouble("new_total");
                        rowTotal2 = rs.getDouble("new_reappearance");
                        
                        newTotal1 += rs.getDouble("new_total");
                        newTotal2 += rs.getDouble("new_reappearance");
                        
                        // 準固定
                        jx.setValue(25, row, rs.getDouble("sub_fixed_reappearance_amount"));
                        jx.setValue(29, row, rs.getDouble("sub_fixed_reappearance"));
                        jx.setValue(31, row, rs.getDouble("sub_fixed_total") > 0 ? rs.getDouble("sub_fixed_reappearance") / rs.getDouble("sub_fixed_total") : 0);

                        rowTotal1 += rs.getDouble("sub_fixed_total");
                        rowTotal2 += rs.getDouble("sub_fixed_reappearance");
                        
                        subTotal1 += rs.getDouble("sub_fixed_total");
                        subTotal2 += rs.getDouble("sub_fixed_reappearance");
                        
                        // 固定
                        jx.setValue(34, row, rs.getDouble("fixed_reappearance_amount"));
                        jx.setValue(38, row, rs.getDouble("fixed_reappearance"));
                        jx.setValue(40, row, rs.getDouble("fixed_total") > 0 ? rs.getDouble("fixed_reappearance") / rs.getDouble("fixed_total") : 0);
                        
                        rowTotal1 += rs.getDouble("fixed_total");
                        rowTotal2 += rs.getDouble("fixed_reappearance");
                        
                        fixTotal1 += rs.getDouble("fixed_total");
                        fixTotal2 += rs.getDouble("fixed_reappearance");

                        jx.setValue(13, row, rowTotal1 > 0 ? rowTotal2 / rowTotal1 : 0);
                        
                        row++;

                    } while (rs.next());

                    jx.setValue(22, row + 1, newTotal1 > 0 ? newTotal2 / newTotal1 : 0);
                    jx.setValue(31, row + 1, subTotal1 > 0 ? subTotal2 / subTotal1 : 0);
                    jx.setValue(40, row + 1, fixTotal1 > 0 ? fixTotal2 / fixTotal1 : 0);

                    rowTotal1 = newTotal1 + subTotal1 + fixTotal1;
                    rowTotal2 = newTotal2 + subTotal2 + fixTotal2;
                    jx.setValue(13, row + 1, rowTotal1 > 0 ? rowTotal2 / rowTotal1 : 0);
                    
                } else {
                    row++;
                }

                jx.removeRow(row);
                
            } catch(SQLException e) {
                
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            row += 5;
            
            return row;
        }

        /**
         * 主担当性別別売上
         */
        private int setGenderSalesInfo(JExcelApi jx, int row) {

            String sql = (new ReportLogic()).getStaffReportCustomerSexSalesSQL(paramBean);

            try {
                
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql);

                if (rs.last()) {

                    // 追加行数セット
                    jx.insertRow(row, rs.getRow() - 1);
		    for (int i = 1; i < rs.getRow(); i++) {
			jx.mergeCells(1, row + i, 6, row + i);
			jx.mergeCells(7, row + i, 8, row + i);
			jx.mergeCells(9, row + i, 11, row + i);
			jx.mergeCells(12, row + i, 15, row + i);
			jx.mergeCells(16, row + i, 18, row + i);
			jx.mergeCells(19, row + i, 20, row + i);
			jx.mergeCells(21, row + i, 23, row + i);
			jx.mergeCells(24, row + i, 27, row + i);
			jx.mergeCells(28, row + i, 30, row + i);
			jx.mergeCells(31, row + i, 32, row + i);
			jx.mergeCells(33, row + i, 35, row + i);
			jx.mergeCells(36, row + i, 39, row + i);
			jx.mergeCells(40, row + i, 42, row + i);
		    }
                    
                    rs.first();

                    // データセット
                    do {

                        // スタッフ名
                        jx.setValue(1, row, rs.getString("staffname"));
                        // 男性人数
                        jx.setValue(7, row, rs.getDouble("ManGuest_Num"));
                        // 男性売上
                        jx.setValue(12, row, rs.getDouble("ManGuest_value"));
                        // 女性人数
                        jx.setValue(19, row, rs.getDouble("FemaleGuest_Num"));
                        // 女性売上
                        jx.setValue(24, row, rs.getDouble("FemaleGuest_value"));
                        // 不明人数
                        jx.setValue(31, row, rs.getDouble("UncertainGuest_Num"));
                        // 不明売上
                        jx.setValue(36, row, rs.getDouble("UncertainGuest_value"));

                        row++;

                    } while (rs.next());

                } else {
                    row++;
                }

                jx.removeRow(row);
                
            } catch(SQLException e) {
                
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            row += 5;
            
            return row;
        }
        
}
