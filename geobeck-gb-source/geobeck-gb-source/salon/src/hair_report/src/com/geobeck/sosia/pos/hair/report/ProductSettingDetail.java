/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.products.Product;
import com.geobeck.sosia.pos.products.ProductClass;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.IntegerCellEditor;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import java.awt.Cursor;
import java.awt.Dimension;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 * @author ttmloan
 */
public class ProductSettingDetail extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private MstRankItemDetail useProducts = new MstRankItemDetail();
    private Integer itemGroupId = null;
    
    public ProductSettingDetail(MstRankItemGroup mrig) {
        this.setProductDivision(2);
        itemGroupId = mrig.getItemGroupId();
        initComponents();
        addMouseCursorChange();
        this.setSize(850, 487);
        this.setPath("商品Ｇ設定＞");
        this.setTitle("詳細設定");
        this.itemGroupName.setText(mrig.getItemGroupName());
        this.init();
        initTableColumn();
    }
    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(registButton);
        SystemInfo.addMouseCursorChange(selectButton);
        SystemInfo.addMouseCursorChange(selectAllButton);
        SystemInfo.addMouseCursorChange(releaseButton);
        SystemInfo.addMouseCursorChange(releaseAllButton);
        SystemInfo.addMouseCursorChange(btnClose);
    }

    /**
     * 初期化処理を行う。
     */
    private void init() {
        this.load(itemGroupId);
        this.showProductClasses();
        if (0 < productClass.getRowCount()) {
            productClass.setRowSelectionInterval(0, 0);
        }
        this.showProducts();
    }

    /**
     * データを読み込む。
     */
    private void load(Integer itemGroupId) {
        try {
            useProducts.loadRankItemDetail(SystemInfo.getConnection(),itemGroupId);
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }

    /**
     * 分類を表示する。
     */
    private void showProductClasses() {
        SwingUtil.clearTable(productClass);

        DefaultTableModel model = (DefaultTableModel) productClass.getModel();

        for (ProductClass pc : useProducts.getReferenceProducts()) {
            Vector<Object> temp = new Vector<Object>();
            temp.add(pc);
            model.addRow(temp);
        }
    }

    /**
     * データを表示する。
     */
    private void showProducts() {

        if (selectProducts.getCellEditor() != null) {
            selectProducts.getCellEditor().stopCellEditing();
        }

        Integer index = productClass.getSelectedRow();

        SwingUtil.clearTable(referenceProducts);
        SwingUtil.clearTable(selectProducts);

        if (index != null && 0 <= index) {
            this.showProducts(useProducts.getReferenceProducts().get(index), referenceProducts);
            this.showProducts(useProducts.getSelectProducts().get(index), selectProducts);
        }
    }

    /**
     * データを表示する。
     *
     * @param pc 分類
     * @param table テーブル
     */
    private void showProducts(ProductClass pc, JTable table) {
        SwingUtil.clearTable(table);

        DefaultTableModel model = (DefaultTableModel) table.getModel();

        for (Product p : pc) {
            Vector<Object> temp = new Vector<Object>();
            temp.add(p.getProductName());
            temp.add(p.getPrice());
            model.addRow(temp);
        }
    }

    /**
     * 処理区分を設定する。
     *
     * @param productDivision 処理区分
     */
    private void setProductDivision(Integer productDivision) {
        useProducts.setProductDivision(productDivision);
    }

    /**
     * 処理区分を取得する。
     *
     * @return 処理区分
     */
    private Integer getProductDivision() {
        return useProducts.getProductDivision();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        registButton = new javax.swing.JButton();
        referenceProductsScrollPane = new javax.swing.JScrollPane();
        referenceProducts = new javax.swing.JTable();
        productClassScrollPane = new javax.swing.JScrollPane();
        productClass = new javax.swing.JTable();
        referenceLabel = new javax.swing.JLabel();
        selectProductsScrollPane = new javax.swing.JScrollPane();
        selectProducts = new javax.swing.JTable();
        selectLabel = new javax.swing.JLabel();
        itemGroupNameLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        selectAllButton = new javax.swing.JButton();
        releaseButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        releaseAllButton = new javax.swing.JButton();
        itemGroupName = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(850, 487));

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setContentAreaFilled(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        referenceProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "商品名", "価格"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        referenceProducts.setSelectionForeground(new java.awt.Color(0, 0, 0));
        referenceProducts.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(referenceProducts, SystemInfo.getTableHeaderRenderer());
        referenceProducts.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(referenceProducts);
        referenceProducts.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                referenceProductsMouseMoved(evt);
            }
        });
        referenceProductsScrollPane.setViewportView(referenceProducts);

        productClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "商品分類"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productClass.setSelectionForeground(new java.awt.Color(0, 0, 0));
        productClass.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        productClass.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(productClass, SystemInfo.getTableHeaderRenderer());
        productClass.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(productClass);
        productClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                productClassMouseReleased(evt);
            }
        });
        productClass.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                productClassMouseMoved(evt);
            }
        });
        productClass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productClassKeyReleased(evt);
            }
        });
        productClassScrollPane.setViewportView(productClass);

        referenceLabel.setText("＜商品分類＞");

        selectProductsScrollPane.setOpaque(false);

        selectProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "商品名", "価格"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {

                return canEdit [columnIndex];

            }
        });
        selectProducts.setSelectionForeground(new java.awt.Color(0, 0, 0));
        selectProducts.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(selectProducts, SystemInfo.getTableHeaderRenderer());
        selectProducts.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(selectProducts);
        TableColumnModel model = selectProducts.getColumnModel();
        selectProductsScrollPane.setViewportView(selectProducts);

        selectLabel.setText("＜選択リスト＞");

        itemGroupNameLabel.setText("商品グループ名");

        jPanel1.setOpaque(false);

        selectAllButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right2_off.jpg"));
        selectAllButton.setBorderPainted(false);
        selectAllButton.setContentAreaFilled(false);
        selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right2_on.jpg"));
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        releaseButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left_off.jpg"));
        releaseButton.setBorderPainted(false);
        releaseButton.setContentAreaFilled(false);
        releaseButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left_on.jpg"));
        releaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseButtonActionPerformed(evt);
            }
        });

        selectButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setContentAreaFilled(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left2_off.jpg"));
        releaseAllButton.setBorderPainted(false);
        releaseAllButton.setContentAreaFilled(false);
        releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left2_on.jpg"));
        releaseAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(releaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(releaseAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(selectAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(releaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(releaseAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        itemGroupName.setText("A");

        btnClose.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        btnClose.setBorderPainted(false);
        btnClose.setContentAreaFilled(false);
        btnClose.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemGroupNameLabel)
                .addGap(17, 17, 17)
                .addComponent(itemGroupName, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 333, Short.MAX_VALUE)
                .addComponent(registButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(14, 14, 14)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(referenceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(productClassScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(referenceProductsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(selectLabel)
                        .addComponent(selectProductsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
                    .addGap(25, 25, 25)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClose, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(itemGroupName)
                        .addComponent(itemGroupNameLabel))
                    .addComponent(registButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(58, 58, 58)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(referenceLabel)
                        .addComponent(selectLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(referenceProductsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectProductsScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                        .addComponent(productClassScrollPane, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE))
                    .addGap(15, 15, 15)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void registButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registButtonActionPerformed
         if (selectProducts.getCellEditor() != null) selectProducts.getCellEditor().stopCellEditing();
            
            registButton.setCursor(null);

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                
                if(this.regist()) {
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS,
                            useProducts.getProductDivisionName()),
                            this.getTitle(),
                            JOptionPane.INFORMATION_MESSAGE);
                } else {
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED,
                            useProducts.getProductDivisionName()),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }                

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
    }//GEN-LAST:event_registButtonActionPerformed

    private void referenceProductsMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_referenceProductsMouseMoved
        if (selectProducts.getCellEditor() != null) selectProducts.getCellEditor().stopCellEditing();
    }//GEN-LAST:event_referenceProductsMouseMoved

    private void productClassMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productClassMouseReleased
        this.showProducts();
    }//GEN-LAST:event_productClassMouseReleased

    private void productClassMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productClassMouseMoved
         if (selectProducts.getCellEditor() != null) selectProducts.getCellEditor().stopCellEditing();
    }//GEN-LAST:event_productClassMouseMoved

    private void productClassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productClassKeyReleased
        this.showProducts();
    }//GEN-LAST:event_productClassKeyReleased

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
         this.moveProduct(true);
    }//GEN-LAST:event_selectButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
         this.moveProductAll(true);
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void releaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseButtonActionPerformed
        this.moveProduct(false);
    }//GEN-LAST:event_releaseButtonActionPerformed

    private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseAllButtonActionPerformed
        this.moveProductAll(false);
    }//GEN-LAST:event_releaseAllButtonActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        ((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed
  
      /**
     * 登録処理を行う。
     * @return true - 成功、false - 失敗
     */
    public boolean regist() {
        
        boolean result = false;
        
        try {
            ConnectionWrapper con = SystemInfo.getConnection();
            
            con.begin();
            
            try {
                result = useProducts.registRankItemDetail(con,itemGroupId);
                
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            
            if(result) {
                con.commit();
                result = true;
            } else {
                con.rollback();
            }
        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        
        return	result;
    }
    
    /**
     * 商品・技術を選択（解除）する。
     *
     * @param isSelect true：選択、false：解除
     */
    public void moveProduct(boolean isSelect) {
        Integer classIndex = productClass.getSelectedRow();
        JTable fromTable = (isSelect ? referenceProducts : selectProducts);

        for (Integer i = fromTable.getSelectedRowCount() - 1; 0 <= i; i--) {
            useProducts.moveProduct(isSelect, classIndex, fromTable.getSelectedRows()[i]);
        }

        useProducts.sort(isSelect, classIndex);

        this.showProducts();
    }

    /**
     * 商品・技術を全て選択（解除）する。
     *
     * @param isSelect true：選択、false：解除
     */
    public void moveProductAll(boolean isSelect) {
        Integer classIndex = productClass.getSelectedRow();
        JTable fromTable = (isSelect ? referenceProducts : selectProducts);

        useProducts.moveProductAll(isSelect, classIndex);

        this.showProducts();
    }
     /**
     * init table.
     */
    private void initTableColumn() {
        selectProducts.getColumnModel().getColumn(0).setPreferredWidth(250);
        referenceProducts.getColumnModel().getColumn(0).setPreferredWidth(250);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JLabel itemGroupName;
    private javax.swing.JLabel itemGroupNameLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTable productClass;
    private javax.swing.JScrollPane productClassScrollPane;
    private javax.swing.JLabel referenceLabel;
    private javax.swing.JTable referenceProducts;
    private javax.swing.JScrollPane referenceProductsScrollPane;
    private javax.swing.JButton registButton;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton releaseButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JLabel selectLabel;
    private javax.swing.JTable selectProducts;
    private javax.swing.JScrollPane selectProductsScrollPane;
    // End of variables declaration//GEN-END:variables
}
