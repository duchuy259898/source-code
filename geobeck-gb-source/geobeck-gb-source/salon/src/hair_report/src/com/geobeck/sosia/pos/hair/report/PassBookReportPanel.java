/*
 * SalesReportPanel.java
 *
 * Created on 2006/10/19, 11:07
 */
package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.basicinfo.company.MstShopPanel;
import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.products.Product;
import com.geobeck.sosia.pos.products.ProductClass;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.text.*;
import org.apache.commons.lang.math.NumberUtils;

/**
 *
 * @author katagiri
 */
public class PassBookReportPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private MstStaffs staffs = null;

    /**
     * Creates new form SalesReportPanel
     */
    public PassBookReportPanel() {
        initComponents();
        addMouseCursorChange();
        this.setSize(690, 250);
        this.setPath("帳票出力");
        this.setTitle("パスブック集計");
        this.init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportTypeGroup = new javax.swing.ButtonGroup();
        taxGroup = new javax.swing.ButtonGroup();
        dateTypeGroup = new javax.swing.ButtonGroup();
        rdoYearShift = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        targetLabel = new javax.swing.JLabel();
        pnlDayShift = new javax.swing.JPanel();
        lblMonthWay = new javax.swing.JLabel();
        cmbSelectedMonth = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbSelectedYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
            cmbSelectedYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));
    pnlMonthShift = new javax.swing.JPanel();
    jLabel9 = new javax.swing.JLabel();
    cmbStartMonth = new javax.swing.JComboBox();
    cmbEndMonth = new javax.swing.JComboBox();
    jLabel5 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    jLabel10 = new javax.swing.JLabel();
    jLabel11 = new javax.swing.JLabel();
    cmbStartYear = new javax.swing.JComboBox();
    ((PlainDocument)((JTextComponent)
        cmbStartYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
    new CustomFilter(4, CustomFilter.NUMBER));
    cmbEndYear = new javax.swing.JComboBox();
    ((PlainDocument)((JTextComponent)
        cmbEndYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
    new CustomFilter(4, CustomFilter.NUMBER));
    target = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
    rdoMonthShift = new javax.swing.JRadioButton();
    btnOutput = new javax.swing.JButton();

    setFocusCycleRoot(true);

    reportTypeGroup.add(rdoYearShift);
    rdoYearShift.setText("年間");
    rdoYearShift.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoYearShift.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoYearShift.setOpaque(false);
    rdoYearShift.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rdoYearShiftStateChanged(evt);
        }
    });

    jPanel1.setOpaque(false);

    targetLabel.setText("対象");

    pnlDayShift.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "月単位", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS UI Gothic", 1, 12))); // NOI18N
    pnlDayShift.setOpaque(false);

    lblMonthWay.setText("月方式");

    cmbSelectedMonth.setMaximumRowCount(12);
    cmbSelectedMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    cmbSelectedMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    jLabel2.setText("年");

    jLabel3.setText("月");

    cmbSelectedYear.setEditable(true);
    cmbSelectedYear.setMaximumRowCount(12);
    cmbSelectedYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    org.jdesktop.layout.GroupLayout pnlDayShiftLayout = new org.jdesktop.layout.GroupLayout(pnlDayShift);
    pnlDayShift.setLayout(pnlDayShiftLayout);
    pnlDayShiftLayout.setHorizontalGroup(
        pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(pnlDayShiftLayout.createSequentialGroup()
            .addContainerGap()
            .add(lblMonthWay)
            .add(13, 13, 13)
            .add(cmbSelectedYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel2)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(cmbSelectedMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel3)
            .add(86, 86, 86))
    );
    pnlDayShiftLayout.setVerticalGroup(
        pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlDayShiftLayout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblMonthWay)
                .add(cmbSelectedYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel2)
                .add(cmbSelectedMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel3))
            .addContainerGap())
    );

    pnlMonthShift.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "年単", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS UI Gothic", 1, 12))); // NOI18N
    pnlMonthShift.setOpaque(false);

    jLabel9.setText("対象期間");

    cmbStartMonth.setMaximumRowCount(12);
    cmbStartMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    cmbStartMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbStartMonth.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            cmbStartMonthPropertyChange(evt);
        }
    });

    cmbEndMonth.setMaximumRowCount(12);
    cmbEndMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    cmbEndMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbEndMonth.setEnabled(false);

    jLabel5.setText("年");

    jLabel6.setText("月");

    jLabel7.setText("〜");

    jLabel10.setText("年");

    jLabel11.setText("月");

    cmbStartYear.setEditable(true);
    cmbStartYear.setMaximumRowCount(12);
    cmbStartYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbStartYear.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            cmbStartYearPropertyChange(evt);
        }
    });

    cmbEndYear.setEditable(true);
    cmbEndYear.setMaximumRowCount(12);
    cmbEndYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbEndYear.setEnabled(false);

    org.jdesktop.layout.GroupLayout pnlMonthShiftLayout = new org.jdesktop.layout.GroupLayout(pnlMonthShift);
    pnlMonthShift.setLayout(pnlMonthShiftLayout);
    pnlMonthShiftLayout.setHorizontalGroup(
        pnlMonthShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlMonthShiftLayout.createSequentialGroup()
            .addContainerGap()
            .add(jLabel9)
            .add(13, 13, 13)
            .add(cmbStartYear, 0, 60, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel5)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(cmbStartMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel6)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel7)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(cmbEndYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel10)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(cmbEndMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel11)
            .addContainerGap())
    );
    pnlMonthShiftLayout.setVerticalGroup(
        pnlMonthShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(pnlMonthShiftLayout.createSequentialGroup()
            .addContainerGap()
            .add(pnlMonthShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel9)
                .add(jLabel11)
                .add(jLabel10)
                .add(jLabel7)
                .add(jLabel6)
                .add(jLabel5)
                .add(cmbStartMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbEndMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbStartYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbEndYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(pnlMonthShift, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(pnlDayShift, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(targetLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(targetLabel)
                .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(5, 5, 5)
            .add(pnlDayShift, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(10, 10, 10)
            .add(pnlMonthShift, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(15, Short.MAX_VALUE))
    );

    pnlMonthShift.getAccessibleContext().setAccessibleName("年単");

    reportTypeGroup.add(rdoMonthShift);
    rdoMonthShift.setSelected(true);
    rdoMonthShift.setText("月単位");
    rdoMonthShift.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoMonthShift.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoMonthShift.setOpaque(false);
    rdoMonthShift.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rdoMonthShiftStateChanged(evt);
        }
    });

    btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnOutput.setBorderPainted(false);
    btnOutput.setContentAreaFilled(false);
    btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnOutput.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOutputActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(rdoMonthShift, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(rdoYearShift)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 198, Short.MAX_VALUE)
                    .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(rdoMonthShift)
                .add(rdoYearShift)
                .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(10, 10, 10))
    );
    }// </editor-fold>//GEN-END:initComponents

	private void rdoYearShiftStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_rdoYearShiftStateChanged
	{//GEN-HEADEREND:event_rdoYearShiftStateChanged
            this.cmbStartYear.setEnabled(this.rdoYearShift.isSelected());
            this.cmbStartMonth.setEnabled(this.rdoYearShift.isSelected());
            this.cmbSelectedYear.setEnabled(rdoMonthShift.isSelected());
            this.cmbSelectedMonth.setEnabled(rdoMonthShift.isSelected());
            changeYearMonth();
	}//GEN-LAST:event_rdoYearShiftStateChanged

        private void changeYearMonth() {
            try {
            Integer StartMonth = Integer.parseInt(this.cmbStartMonth.getSelectedItem().toString());
            Integer StartYear = Integer.parseInt(this.cmbStartYear.getSelectedItem().toString());
            Integer EndMonth = StartMonth-1;
            Integer EndYear = StartYear+1;
            if(EndMonth==0) {
                EndMonth = 12;
                EndYear = EndYear -1;
            }
            cmbEndYear.setSelectedItem(EndYear);
            cmbEndMonth.setSelectedIndex(EndMonth-1);
            }catch(Exception e) {
                
            }
        }
	private void rdoMonthShiftStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_rdoMonthShiftStateChanged
	{//GEN-HEADEREND:event_rdoMonthShiftStateChanged

            this.cmbSelectedYear.setEnabled(rdoMonthShift.isSelected());
            this.cmbSelectedMonth.setEnabled(rdoMonthShift.isSelected());
	}//GEN-LAST:event_rdoMonthShiftStateChanged

	private void btnOutputActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutputActionPerformed
	{//GEN-HEADEREND:event_btnOutputActionPerformed
            btnOutput.setCursor(null);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            //対象名
            String SelectTargetName = "";

            //対象ID
            String SelectTargetId = "";

            //グループ
            if (target.getSelectedItem() instanceof MstGroup) {
                MstGroup group = (MstGroup) target.getSelectedItem();
                SelectTargetName = group.getGroupName();
                SelectTargetId = group.getShopIDListAll();
            }

            //店舗
            if (target.getSelectedItem() instanceof MstShop) {
                MstShop shop = (MstShop) target.getSelectedItem();
                SelectTargetName = shop.getShopName();
                SelectTargetId = shop.getShopID().toString();
            }

            //月単位
            Integer SelectedYear;
            Integer SelectedMonth;
            SelectedYear = Integer.parseInt(cmbSelectedYear.getSelectedItem().toString());
            SelectedMonth = Integer.parseInt(cmbSelectedMonth.getSelectedItem().toString());

            //年単
            Integer StartMonth;
            Integer StartYear;
            String StartDay = "";
            StartYear = Integer.parseInt(cmbStartYear.getSelectedItem().toString());
            StartMonth = Integer.parseInt(cmbStartMonth.getSelectedItem().toString());
            //IVS_TMTrong start edit 20150723 New request #40814
            Integer EndYear = Integer.parseInt(cmbEndYear.getSelectedItem().toString());
            Integer EndMonth = Integer.parseInt(cmbEndMonth.getSelectedItem().toString());
            String EndDay = EndYear.toString()+"-"+EndMonth+"-01";
            //IVS_TMTrong end edit 20150723 New request #40814

            if (rdoMonthShift.isSelected()) {
                StartDay = SelectedYear.toString() + "-" + SelectedMonth + "-01";
            }
            if (rdoYearShift.isSelected()) {
                StartDay = StartYear.toString() + "-" + StartMonth + "-01";
            }

            //テンプレートとなるファイルをセット
            String fileName = "";
            if (rdoMonthShift.isSelected()) {
                fileName = "パスブック集計_月単位";
            } else {
                fileName = "パスブック集計_年間";
            }

            JExcelApi jx = new JExcelApi(fileName);
            jx.setTemplateFile("/reports/" + fileName + ".xls");
            jx.setValue(1, 2, SelectTargetName);
            StringBuffer sql = new StringBuffer();
            ConnectionWrapper con = SystemInfo.getConnection();
            Integer ShopId;
            Integer StaffId;
            Integer CustomerId;
            Integer day;
            Integer month;
            int baseRow = 6;
            Date min = new Date();
            String mins = "Jan 01, 1900";
            DateFormat format = new SimpleDateFormat("MMMM d, yyyy",Locale.ENGLISH);
            try {
                 min = format.parse(mins);
                
            } catch (ParseException ex) {
                Logger.getLogger(PassBookReportPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {

                //月単位を選択する場合
                if (rdoMonthShift.isSelected()) {
                    sql.append(" select * from  \n");
                    sql.append(" (\n");
                    sql.append(" 	select t.*, ms.shop_name,\n");
                    sql.append(" 	     (SELECT max(ds1.sales_date)\n");
                    sql.append(" 	      FROM data_sales ds1\n");
                    sql.append(" 	      INNER JOIN data_prepaid dp1 ON dp1.slip_no = ds1.slip_no\n");
                    sql.append(" 	      AND dp1.shop_id =ds1.shop_id\n");
                    sql.append(" 	      WHERE ds1.sales_date <= date'" + StartDay + "'+interval '1 month' - interval '1 day'\n");
                    sql.append(" 		AND ds1.customer_id = t.customer_id\n");
                    sql.append(" 		AND ds1.shop_id = t.shop_id\n");
                    sql.append(" 		AND ds1.sales_date IS NOT NULL\n");
                    //Luc start add 20160215 #47401
                    sql.append(" 		AND dp1.delete_date is null and ds1.delete_date is null ");
                    //Luc start add 20160215 #47401
                    
                    sql.append(" 		AND dp1.sales_value >0) AS sales_date,\n");
                    sql.append(" 	     (SELECT s.staff_name1 ||' ' ||s.staff_name2\n");
                    sql.append(" 	      FROM data_sales ds1\n");
                    sql.append(" 	      INNER JOIN data_prepaid dp1 ON dp1.slip_no = ds1.slip_no\n");
                    sql.append(" 	      AND dp1.shop_id =ds1.shop_id\n");
                    sql.append(" 	      INNER JOIN mst_staff s ON ds1.staff_id = s.staff_id\n");
                    sql.append(" 	      WHERE ds1.customer_id = t.customer_id\n");
                    sql.append(" 		AND ds1.shop_id = t.shop_id\n");
                    //Luc start add 20160215 #47401
                    sql.append(" 		AND dp1.delete_date is null and ds1.delete_date is null ");
                    //Luc start add 20160215 #47401
                    sql.append(" 	      ORDER BY ds1.sales_date,\n");
                    sql.append(" 		       ds1.insert_date DESC LIMIT 1) AS staff_name,\n");
                    sql.append(" 	     (SELECT mf.free_heading_name\n");
                    sql.append(" 	      FROM data_sales ds1\n");
                    sql.append(" 	      INNER JOIN data_prepaid dp1 ON dp1.slip_no = ds1.slip_no\n");
                    sql.append(" 	      AND dp1.shop_id =ds1.shop_id\n");
                    sql.append(" 	      INNER JOIN mst_staff s ON ds1.staff_id = s.staff_id\n");
                    sql.append(" 	      INNER JOIN mst_customer_free_heading mcf ON ds1.customer_id = mcf.customer_id\n");
                    sql.append(" 	      AND free_heading_class_id=1\n");
                    sql.append(" 	      INNER JOIN mst_free_heading mf ON mf.free_heading_class_id = mcf.free_heading_class_id\n");
                    sql.append(" 	      AND mf.free_heading_id = mcf.free_heading_id\n");
                    sql.append(" 	      WHERE ds1.customer_id = t.customer_id\n");
                    sql.append(" 		AND ds1.shop_id = t.shop_id\n");
                    //Luc start add 20160215 #47401
                    sql.append(" 		AND dp1.delete_date is null and ds1.delete_date is null ");
                    //Luc start add 20160215 #47401
                    sql.append(" 	      ORDER BY ds1.sales_date,\n");
                    sql.append(" 		       ds1.insert_date DESC LIMIT 1) AS free_heading_name,\n");
                    sql.append(" 							mc.customer_id,\n");
                    sql.append(" 							mc.customer_no,\n");
                    sql.append(" 							mc.customer_name1 || ' '||mc.customer_name2 AS customer_name,\n");

                    sql.append("    (SELECT sum(dp1.sales_value) - sum(dp1.use_value)\n");
                    sql.append(" 	FROM data_prepaid dp1\n");
                    sql.append(" 	INNER JOIN data_sales ds1 ON dp1.slip_no = ds1.slip_no\n");
                    sql.append(" 	AND dp1.shop_id =ds1.shop_id\n");
                    sql.append(" 	WHERE ds1.sales_date < date'" + StartDay + "'\n");
                    sql.append(" 	AND ds1.shop_id = t.shop_id\n");
                    //IVS_LVTu start add 2016/02/05 Bug #47401
                    sql.append(" 	AND dp1.delete_date is null \n");
                    sql.append(" 	AND ds1.delete_date is null \n");
                    //IVS_LVTu end add 2016/02/05 Bug #47401
                    sql.append(" 	AND ds1.customer_id = t.customer_id) AS balance_value \n");


                    sql.append(" 	from view_data_prepaid_month t\n");
                    sql.append(" 	inner join mst_customer mc on t.customer_id = mc.customer_id\n");
                    sql.append(" 	inner join mst_shop ms on t.shop_id = ms.shop_id\n");
                    sql.append(" 	where year = "+SelectedYear+" and month = "+SelectedMonth+"\n");
                    sql.append(" 	and mc.customer_no <>'0'\n");
                    sql.append(" 	and t.shop_id IN("+SelectTargetId+")\n");
                    sql.append(" 	order by mc.customer_id asc\n");
                    sql.append(" ) t \n");
                    sql.append(" order by t.shop_id,t.sales_date\n");
                    ResultSetWrapper rs = null;
                    try {
                        rs = con.executeQuery(sql.toString());
                    } catch (SQLException ex) {
                        Logger.getLogger(PassBookReportPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    int i = 0;
                    rs.last();
                    if(rs.getRow()<=0) {
                        MessageDialog.showMessageDialog(this,
                             "対象データがありません",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                        return;
                       
                    }
                    //結果が１行の場合
                    if (rs.getRow() == 1) {
                        jx.removeRow(6);
                        jx.removeRow(7);
                    }
                    //結果が2行の場合
                    if (rs.getRow() == 2) {
                        jx.removeRow(8);
                    }
                    if(rs.getRow()>3) {
                        jx.insertRow(baseRow+1,rs.getRow()-3);
                    }
                    rs.first();
                    do  {
                        jx.setValue(5, baseRow + i, rs.getDate("sales_date"));
                        jx.setValue(6, baseRow + i, rs.getString("shop_name"));
                        jx.setValue(7, baseRow + i, rs.getString("staff_name"));
                        jx.setValue(8, baseRow + i, rs.getString("customer_no"));
                        jx.setValue(9, baseRow + i, rs.getString("customer_name"));
                        jx.setValue(11, baseRow + i, rs.getString("free_heading_name"));
                        jx.setValue(12, baseRow + i, rs.getDouble("sales_value"));
                        jx.setValue(13, baseRow + i, rs.getDouble("balance_value"));
                        jx.setValue(14, baseRow + i, rs.getDouble("day1") != 0 ? rs.getDouble("day1"):"");
                        jx.setValue(15, baseRow + i, rs.getDouble("day2") != 0 ? rs.getDouble("day2"):"");
                        jx.setValue(16, baseRow + i, rs.getDouble("day3") != 0 ? rs.getDouble("day3"):"");
                        jx.setValue(17, baseRow + i, rs.getDouble("day4") != 0 ? rs.getDouble("day4"):"");
                        jx.setValue(18, baseRow + i, rs.getDouble("day5") != 0 ? rs.getDouble("day5"):"");
                        jx.setValue(19, baseRow + i, rs.getDouble("day6") != 0 ? rs.getDouble("day6"):"");
                        jx.setValue(20, baseRow + i, rs.getDouble("day7") != 0 ? rs.getDouble("day7"):"");
                        jx.setValue(21, baseRow + i, rs.getDouble("day8") != 0 ? rs.getDouble("day8"):"");
                        jx.setValue(22, baseRow + i, rs.getDouble("day9") != 0 ? rs.getDouble("day9"):"");
                        jx.setValue(23, baseRow + i, rs.getDouble("day10") != 0 ? rs.getDouble("day10"):"");
                        jx.setValue(24, baseRow + i, rs.getDouble("day11") != 0 ? rs.getDouble("day11"):"");
                        jx.setValue(25, baseRow + i, rs.getDouble("day12") != 0 ? rs.getDouble("day12"):"");
                        jx.setValue(26, baseRow + i, rs.getDouble("day13") != 0 ? rs.getDouble("day13"):"");
                        jx.setValue(27, baseRow + i, rs.getDouble("day14") != 0 ? rs.getDouble("day14"):"");
                        jx.setValue(28, baseRow + i, rs.getDouble("day15") != 0 ? rs.getDouble("day15"):"");
                        jx.setValue(29, baseRow + i, rs.getDouble("day16") != 0 ? rs.getDouble("day16"):"");
                        jx.setValue(30, baseRow + i, rs.getDouble("day17") != 0 ? rs.getDouble("day17"):"");
                        jx.setValue(31, baseRow + i, rs.getDouble("day18") != 0 ? rs.getDouble("day18"):"");
                        jx.setValue(32, baseRow + i, rs.getDouble("day19") != 0 ? rs.getDouble("day19"):"");
                        jx.setValue(33, baseRow + i, rs.getDouble("day20") != 0 ? rs.getDouble("day20"):"");
                        jx.setValue(34, baseRow + i, rs.getDouble("day21") != 0 ? rs.getDouble("day21"):"");
                        jx.setValue(35, baseRow + i, rs.getDouble("day22") != 0 ? rs.getDouble("day22"):"");
                        jx.setValue(36, baseRow + i, rs.getDouble("day23") != 0 ? rs.getDouble("day23"):"");
                        jx.setValue(37, baseRow + i, rs.getDouble("day24") != 0 ? rs.getDouble("day24"):"");
                        jx.setValue(38, baseRow + i, rs.getDouble("day25") != 0 ? rs.getDouble("day25"):"");
                        jx.setValue(39, baseRow + i, rs.getDouble("day26") != 0 ? rs.getDouble("day26"):"");
                        jx.setValue(40, baseRow + i, rs.getDouble("day27") != 0 ? rs.getDouble("day27"):"");
                        jx.setValue(41, baseRow + i, rs.getDouble("day28") != 0 ? rs.getDouble("day28"):"");
                        jx.setValue(42, baseRow + i, rs.getDouble("day29") != 0 ? rs.getDouble("day29"):"");
                        jx.setValue(43, baseRow + i, rs.getDouble("day30") != 0 ? rs.getDouble("day30"):"");
                        jx.setValue(44, baseRow + i, rs.getDouble("day31") != 0 ? rs.getDouble("day31"):"");
                        i++;
                    }while (rs.next());
                    
                }

                //年間を選択する場合
                if (rdoYearShift.isSelected()) {
                    sql = new StringBuffer();
                    sql.append(" select t.* from(");
                    //sql.append(" select ds.shop_id,ms.shop_name,");
                    sql.append(" select ");
                    sql.append(" (select ds1.shop_id ");
                    sql.append(" from data_sales ds1");
                    sql.append(" inner join data_prepaid dp1  on dp1.slip_no = ds1.slip_no and dp1.shop_id =ds1.shop_id ");
                    sql.append(" where ds1.sales_date<= date '" + StartDay + "' + interval '1 year' - interval '1 day'\n");
                    sql.append(" and ds1.customer_id = ds.customer_id");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    sql.append(" and ds1.sales_date is not null");
                    sql.append(" and dp1.sales_value >0");
                    sql.append(" order by ds1.sales_date desc limit 1 ");
                    sql.append(" ) as shop_id,");
                    sql.append(" (select ms.shop_name ");
                    sql.append(" from data_sales ds1");
                    sql.append(" inner join data_prepaid dp1  on dp1.slip_no = ds1.slip_no and dp1.shop_id =ds1.shop_id ");
                    sql.append(" inner join mst_shop ms on ds1.shop_id = ms.shop_id "); 
                    sql.append(" where ds1.sales_date<= date '" + StartDay + "' + interval '1 year' - interval '1 day'\n");
                    sql.append(" and ds1.customer_id = ds.customer_id");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    sql.append(" and ds1.sales_date is not null");
                    sql.append(" and dp1.sales_value >0");
                    sql.append(" order by ds1.sales_date desc limit 1 ");
                    sql.append(" ) as shop_name,");
                    sql.append(" (select ds1.sales_date ");
                    sql.append(" from data_sales ds1");
                    sql.append(" inner join data_prepaid dp1  on dp1.slip_no = ds1.slip_no and dp1.shop_id =ds1.shop_id ");
                    sql.append(" where ds1.sales_date<= date '" + StartDay + "' + interval '1 year' - interval '1 day'\n");
                    sql.append(" and ds1.customer_id = ds.customer_id");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id");
                    //Luc start delete 20150820 #42142
                    sql.append(" and ds1.sales_date is not null");
                    sql.append(" and dp1.sales_value >0");
                    sql.append(" order by ds1.sales_date desc limit 1 ");
                    sql.append(" ) as sales_date,");
                    //sql.append(" ,s.staff_name1 ||' ' ||s.staff_name2 as staff_name, \n");
                    //IVS_TVHoa start Edit 2015/06/26 Bug #38453
                    //IVS_TMTrong start edit 2015/07/23 New request #40814
                    //sql.append(" (select s.staff_name1 ||' ' ||s.staff_name2  from data_sales ds1  ");
                    sql.append(" (select array_to_string(array(select distinct coalesce(s1.staff_name1,'') || ' ' || coalesce(s1.staff_name2,'')   ");
                    sql.append("    from data_sales_detail dsd1 ");
                    sql.append("    inner join mst_item i on dsd1.product_id = i.item_id and dsd1.product_division = 2  ");
                    sql.append("    inner join mst_item_class ic on i.item_class_id = ic.item_class_id  "); 
                    sql.append("    and ic.prepa_class_id = 1   ");
                    //Luc start edit 20150731 #41228
                    //sql.append("    left join mst_staff s1 on dsd1.staff_id = s1.staff_id ");
                    sql.append("    inner join mst_staff s1 on dsd1.staff_id = s1.staff_id ");
                    //Luc end edit 20150731 #41228
                    sql.append("    where dsd1.slip_no = ds1.slip_no and dsd1.shop_id = ds1.shop_id),',') ");
                    //IVS_TMTrong end edit 2015/07/23 New request #40814
                    sql.append(" from data_sales ds1  ");
                    sql.append(" inner join data_prepaid dp1 on dp1.slip_no = ds1.slip_no and dp1.shop_id =ds1.shop_id  ");
                    sql.append(" left join mst_staff s on ds1.staff_id = s.staff_id  ");      
                    sql.append(" where ds1.customer_id = ds.customer_id ");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                   // sql.append(" and ds1.shop_id = ds.shop_id ");
                    //Luc start delete 20150820 #42142
                    sql.append(" and ds1.sales_date =(select max(ds2.sales_date) ");
                    sql.append(" from data_sales ds2");
                    sql.append(" inner join data_prepaid dp2  on dp2.slip_no = ds2.slip_no and dp2.shop_id =ds2.shop_id ");
                    sql.append(" where ds2.sales_date<= date '" + StartDay + "' + interval '1 year' - interval '1 day'\n");
                    sql.append(" and ds2.customer_id = ds.customer_id");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds2.shop_id = ds.shop_id");
                    //Luc start delete 20150820 #42142
                    sql.append(" and ds2.sales_date is not null");
                    sql.append(" and dp2.sales_value >0 )");
                     sql.append(" AND dp1.sales_value > 0 ");
                    //IVS_TVHoa End Edit 2015/06/26 Bug #38453
                    sql.append(" order by ds1.sales_date,ds1.insert_date desc ");
                    sql.append(" limit 1) as staff_name, ");           
                    
                    sql.append(" (select mf.free_heading_name ");
                    sql.append(" from data_sales ds1 ");
                    sql.append(" inner join data_prepaid dp1 on dp1.slip_no = ds1.slip_no and dp1.shop_id =ds1.shop_id  ");
                    sql.append(" inner join mst_staff s on ds1.staff_id = s.staff_id  ");
                    sql.append(" inner join mst_customer_free_heading mcf on ds1.customer_id = mcf.customer_id and free_heading_class_id=1 \n");
                    sql.append(" inner join mst_free_heading mf on mf.free_heading_class_id = mcf.free_heading_class_id and mf.free_heading_id = mcf.free_heading_id \n");
                    sql.append(" where ds1.customer_id = ds.customer_id ");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id ");
                    //Luc start delete 20150820 #42142
                    sql.append(" order by ds1.sales_date,ds1.insert_date desc ");
                    sql.append(" limit 1) as free_heading_name, ");
                    sql.append(" ds.customer_id,mc.customer_no,mc.customer_name1 || ' '||mc.customer_name2 as customer_name,");
                    //Luc start edit 20150806 #41513
                    //sql.append(" sum(dp.sales_value) as sales_value , \n");
                    sql.append(" sum( case when ds.sales_date >= date '" + StartDay + "' and ds.sales_date <=  date '" + StartDay + "' + interval '1 year' - interval '1 day'  then dp.sales_value else 0 end) as sales_value, "); 
                    //Luc start edit 20150806 #41513
                    sql.append(" (select coalesce(sum(dp1.sales_value),0)\n");
                    sql.append(" from data_prepaid dp1 \n");
                    sql.append(" inner join data_sales ds1 on dp1.slip_no = ds1.slip_no and dp1.shop_id =ds1.shop_id \n");
                    //Luc start edit 20160222 #48687
                    //sql.append(" where ds1.sales_date <  date'" + StartDay + "' \n");
                    sql.append(" where ds1.sales_date <  date'" + EndDay + "' + interval '1 month' + interval '-1 day' \n");
                     //Luc end edit 20160222 #48687
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id  \n");
                    //Luc start delete 20150820 #42142
                    sql.append(" and ds1.customer_id = ds.customer_id \n");
                    sql.append(" ) - ");
                    sql.append(" (select coalesce(sum(dp1.use_value),0)\n");
                    sql.append(" from data_prepaid dp1 \n");
                    sql.append(" inner join data_sales ds1 on dp1.slip_no = ds1.slip_no and dp1.shop_id =ds1.shop_id \n");
                    //Luc start edit 20160222 #48687
                    //sql.append(" where ds1.sales_date <  date'" + StartDay + "' \n");
                    sql.append(" where ds1.sales_date <  date'" + StartDay + "' \n");
                     //Luc end edit 20160222 #48687
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id  \n");
                    //Luc start delete 20150820 #42142
                    sql.append(" and ds1.customer_id = ds.customer_id \n");
                    sql.append(" )" );  
                    sql.append(" as balance_value, \n");
                    sql.append(" (select get_tax_rate(max(ds1.sales_date)) ");
                    sql.append(" from data_sales ds1");
                    sql.append(" inner join data_prepaid dp1  on dp1.slip_no = ds1.slip_no and dp1.shop_id =ds1.shop_id ");
                    sql.append(" where ds1.sales_date<= date '" + StartDay + "' + interval '1 year' - interval '1 day'\n");
                    sql.append(" and ds1.customer_id = ds.customer_id");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id");
                    //Luc end delete 20150820 #42142
                    sql.append(" and ds1.sales_date is not null");
                    sql.append(" and dp1.sales_value >0");
                    sql.append(" ) as tax_rate,");
                    //sql.append(" (select get_tax_rate(ds.sales_date)*100)as tax_rate ,");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1  \n");
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "') \n");
                    sql.append(" and date_part('month',ds1.sales_date) = date_part('month',date '" + StartDay + "') \n");
                    sql.append("  and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc start delete 20150820 #42142
                    sql.append(" ) as val0, \n");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1 \n"); 
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "'+interval '1 month') \n");
                    sql.append(" and date_part('month',ds1.sales_date) =   date_part('month',date '" + StartDay + "'+interval '1 month') \n");
                    sql.append(" and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc start delete 20150820 #42142
                    sql.append(" ) as val1, \n");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1  \n");
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "'+interval '2 month') \n");
                    sql.append(" and date_part('month',ds1.sales_date) =   date_part('month',date '" + StartDay + "'+interval '2 month') \n");
                    sql.append(" and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as val2, \n");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1  \n");
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "'+interval '3 month') \n");
                    sql.append(" and date_part('month',ds1.sales_date) =   date_part('month',date '" + StartDay + "'+interval '3 month') \n");
                    sql.append(" and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as val3, \n");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1  \n");
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "'+interval '4 month') \n");
                    sql.append(" and date_part('month',ds1.sales_date) =   date_part('month',date '" + StartDay + "'+interval '4 month') \n");
                    sql.append(" and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as val4, \n");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1  \n");
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "'+interval '5 month') \n");
                    sql.append(" and date_part('month',ds1.sales_date) =   date_part('month',date '" + StartDay + "'+interval '5 month') \n");
                    sql.append(" and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as val5, \n");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1  \n");
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "'+interval '6 month') \n");
                    sql.append(" and date_part('month',ds1.sales_date) =   date_part('month',date '" + StartDay + "'+interval '6 month') \n");
                    sql.append(" and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as val6, \n");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1  \n");
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "'+interval '7 month') \n");
                    sql.append(" and date_part('month',ds1.sales_date) =   date_part('month',date '" + StartDay + "'+interval '7 month') \n");
                    sql.append(" and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as val7, \n");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1  \n");
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "'+interval '8 month') \n");
                    sql.append(" and date_part('month',ds1.sales_date) =   date_part('month',date '" + StartDay + "'+interval '8 month') \n");
                    sql.append(" and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as val8, \n");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1  \n");
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "'+interval '9 month') \n");
                    sql.append(" and date_part('month',ds1.sales_date) =   date_part('month',date '" + StartDay + "'+interval '9 month') \n");
                    sql.append(" and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as val9, \n");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1  \n");
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "'+interval '10 month') \n");
                    sql.append(" and date_part('month',ds1.sales_date) =   date_part('month',date '" + StartDay + "'+interval '10 month') \n");
                    sql.append(" and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as val10, \n");
                    sql.append(" ( select sum(use_value) \n");
                    sql.append(" from  \n");
                    sql.append(" data_prepaid dp1  \n");
                    sql.append(" inner join data_sales ds1 on ds1.shop_id = dp1.shop_id and ds1.slip_no = dp1.slip_no  \n");
                    sql.append(" where date_part('year',ds1.sales_date) = date_part('year',date '" + StartDay + "'+interval '11 month') \n");
                    sql.append(" and date_part('month',ds1.sales_date) =   date_part('month',date '" + StartDay + "'+interval '11 month') \n");
                    sql.append(" and sales_date is not null  \n");
                    sql.append(" and ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as val11 \n");
                    
                    //IVS_TMTrong start add 20150723 New request #40814
                    sql.append(" ,(SELECT sum(sales_value) ");
                    sql.append(" FROM data_prepaid dp1 ");
                    sql.append(" INNER JOIN data_sales ds1 ON ds1.shop_id = dp1.shop_id ");
                    sql.append("    AND ds1.slip_no = dp1.slip_no ");
                    sql.append(" WHERE to_char(ds1.sales_date, 'YYYYMM') between to_char(date '"+StartDay+"', 'YYYYMM') ");
                    sql.append(" AND to_char(date '"+EndDay+"', 'YYYYMM') ");
                    sql.append(" AND sales_date IS NOT NULL");
                    sql.append(" AND ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" AND ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as thisYearContractSum \n");
                    
                    sql.append(" ,(SELECT sum(sales_value) ");
                    sql.append(" FROM data_prepaid dp1 ");
                    sql.append(" INNER JOIN data_sales ds1 ON ds1.shop_id = dp1.shop_id ");
                    sql.append("    AND ds1.slip_no = dp1.slip_no ");
                    sql.append(" WHERE to_char(ds1.sales_date, 'YYYYMM') between to_char(date '"+StartDay+"' - interval '1 year', 'YYYYMM') ");
                    sql.append(" AND to_char(date '"+EndDay+"' - interval '1 year', 'YYYYMM') ");
                    sql.append(" AND sales_date IS NOT NULL");
                    sql.append(" AND ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                     //Luc start delete 20150820 #42142
                    //sql.append(" AND ds1.shop_id = ds.shop_id \n");
                    //Luc start delete 20150820 #42142
                    sql.append(" ) as OneYearAgoContractSum \n");
                    
                    sql.append(" ,(SELECT sum(sales_value) ");
                    sql.append(" FROM data_prepaid dp1 ");
                    sql.append(" INNER JOIN data_sales ds1 ON ds1.shop_id = dp1.shop_id ");
                    sql.append("    AND ds1.slip_no = dp1.slip_no ");
                    sql.append(" WHERE to_char(ds1.sales_date, 'YYYYMM') between to_char(date '"+StartDay+"' - interval '2 year', 'YYYYMM') ");
                    sql.append(" AND to_char(date '"+EndDay+"' - interval '2 year', 'YYYYMM') ");
                    sql.append(" AND sales_date IS NOT NULL");
                    sql.append(" AND ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" AND ds1.shop_id = ds.shop_id \n");
                    //Luc start delete 20150820 #42142
                    sql.append(" ) as TwoYearAgoContractSum \n");
                    
                     sql.append(" ,(SELECT sum(sales_value) ");
                    sql.append(" FROM data_prepaid dp1 ");
                    sql.append(" INNER JOIN data_sales ds1 ON ds1.shop_id = dp1.shop_id ");
                    sql.append("    AND ds1.slip_no = dp1.slip_no ");
                    sql.append(" WHERE to_char(ds1.sales_date, 'YYYYMM') between to_char(date '"+StartDay+"' - interval '3 year', 'YYYYMM') ");
                    sql.append(" AND to_char(date '"+EndDay+"' - interval '3 year', 'YYYYMM') ");
                    sql.append(" AND sales_date IS NOT NULL");
                    sql.append(" AND ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" AND ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as ThreeYearAgoContractSum \n");
                    
                      sql.append(" ,(SELECT sum(sales_value) ");
                    sql.append(" FROM data_prepaid dp1 ");
                    sql.append(" INNER JOIN data_sales ds1 ON ds1.shop_id = dp1.shop_id ");
                    sql.append("    AND ds1.slip_no = dp1.slip_no ");
                    sql.append(" WHERE to_char(ds1.sales_date, 'YYYYMM') between to_char(date '"+StartDay+"' - interval '4 year', 'YYYYMM') ");
                    sql.append(" AND to_char(date '"+EndDay+"' - interval '4 year', 'YYYYMM') ");
                    sql.append(" AND sales_date IS NOT NULL");
                    sql.append(" AND ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" AND ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as FourYearAgoContractSum \n");
                    
                      sql.append(" ,(SELECT sum(sales_value) ");
                    sql.append(" FROM data_prepaid dp1 ");
                    sql.append(" INNER JOIN data_sales ds1 ON ds1.shop_id = dp1.shop_id ");
                    sql.append("    AND ds1.slip_no = dp1.slip_no ");
                     //Luc start edit  20150806 #41513
                    //sql.append(" WHERE to_char(ds1.sales_date, 'YYYYMM') between to_char(date '"+StartDay+"' - interval '5 year', 'YYYYMM') ");
                    //sql.append(" AND to_char(date '"+EndDay+"' - interval '5 year', 'YYYYMM') ");
                    //IVS_TMTrong start edit 2015/08/19 Bug #42059
                    //sql.append(" WHERE to_char(ds1.sales_date, 'YYYYMM') < to_char(date '"+StartDay+"' - interval '5 year', 'YYYYMM') ");
                    sql.append(" WHERE to_char(ds1.sales_date, 'YYYYMM') < to_char(date '"+StartDay+"' - interval '4 year', 'YYYYMM') ");
                    //IVS_TMTrong end edit 2015/08/19 Bug #42059
                    //Luc end edit 20150806 #41513
                    sql.append(" AND sales_date IS NOT NULL");
                    sql.append(" AND ds1.customer_id = ds.customer_id  \n");
                    sql.append(" and ds1.delete_date is null \n");
                    sql.append(" and dp1.delete_date is null \n");
                    //Luc start delete 20150820 #42142
                    //sql.append(" AND ds1.shop_id = ds.shop_id \n");
                    //Luc end delete 20150820 #42142
                    sql.append(" ) as FiveYearAgoContractSum \n");
                    //IVS_TMTrong end add 20150723 New request #40814
                     //Luc start edit  20150806 #41513
                    //sql.append(" from data_sales ds \n");
                    //sql.append(" inner join mst_shop ms on ds.shop_id = ms.shop_id \n");
                    //sql.append(" inner join mst_staff s on ds.staff_id = s.staff_id \n");
                    //sql.append(" inner join mst_customer mc on ds.customer_id = mc.customer_id \n");
                    sql.append(" from  mst_customer mc \n");
                    sql.append(" left join data_sales ds on ds.customer_id = mc.customer_id \n");
                    sql.append(" inner join mst_shop ms on ds.shop_id = ms.shop_id \n");
                    sql.append(" inner join mst_staff s on ds.staff_id = s.staff_id \n");
                    //Luc end edit 20150806 #41513
                    sql.append(" inner join data_prepaid dp on ds.shop_id = dp.shop_id and ds.slip_no = dp.slip_no \n");
                    //Luc start edit 20150806 #41513
                    //sql.append(" where ds.sales_date >= date '" + StartDay + "' and ds.sales_date <=  date '" + StartDay + "' + interval '1 year' - interval '1 day' \n");
                    //sql.append(" and ds.shop_id in(" + SelectTargetId + ") \n");
                    sql.append(" where ds.shop_id in(" + SelectTargetId + ") \n");
                    //Luc end edit 20150806 #41513 
                    sql.append(" and mc.customer_no <> '0' \n");
                    //Luc start add 20150901 #42414
                    sql.append(" and mc.delete_date is null \n");
                    sql.append(" and ds.delete_date is null \n");
                    sql.append(" and dp.delete_date is null \n");
                    //Luc start add 20150901 #42414
                    sql.append(" and ds.sales_date is not null");
                    sql.append(" and (dp.sales_value>0 or dp.use_value>0)");
                    sql.append(" group by ds.customer_id,ds.customer_id,mc.customer_no,mc.customer_name1,mc.customer_name2 \n");
                    //Luc start add 20150806 #41513
                    sql.append(" having ((select sum(dp1.sales_value) - sum(dp1.use_value) \n");
                    sql.append(" from data_prepaid dp1 \n");
                    sql.append(" inner join data_sales ds1 on dp1.slip_no = ds1.slip_no and dp1.shop_id =ds1.shop_id \n");
                    //Luc start edit 20150825 42213 
                    //sql.append(" where ds1.sales_date <  date'" + StartDay + "' \n");
                    int t = EndMonth +1;
                    //Luc start edit 20150901 #42414 
                    //sql.append(" where ds1.sales_date <=  date'" + EndYear.toString() + "-"+t+"-01' -interval '1 day' \n");
                    sql.append(" where ds1.sales_date <  date'"+StartDay+"' \n");
                    //Luc end edit 20150901 #42414 
                    //Luc end edit 20150825 42213
                    //Luc start delete 20150820 #42142
                    //sql.append(" and ds1.shop_id = ds.shop_id  \n");
                    //Luc start delete 20150820 #42142
                    sql.append(" and ds1.customer_id = ds.customer_id \n");
                    sql.append(" AND dp1.delete_date is null \n");
                    sql.append(" AND ds1.delete_date is null \n");
                    sql.append(" )>0)\n");
                    //Luc start add 20150901 #42414
                    sql.append(" or exists( \n");
                    sql.append(" select 1 \n");
                    sql.append("  FROM data_prepaid dp1 \n");
                    sql.append(" INNER JOIN data_sales ds1 ON dp1.slip_no = ds1.slip_no \n");
                    sql.append(" AND dp1.shop_id =ds1.shop_id \n");
                    sql.append(" WHERE ds1.sales_date >= date'"+StartDay+"'  \n");
                    //IVS_LVTu start edit 2016/02/05 Bug #47401
                    if(EndMonth == 12) {
                        Integer temEndYear = EndYear + 1;
                        sql.append(" and ds1.sales_date <= date'" + temEndYear.toString() + "-01-01' -interval '1 day' \n");
                    } else {
                        sql.append(" and ds1.sales_date <= date'" + EndYear.toString() + "-"+t+"-01' -interval '1 day' \n");
                    }
                    //IVS_LVTu end edit 2016/02/05 Bug #47401
                    sql.append(" AND ds1.customer_id = ds.customer_id \n");
                    sql.append(" AND (dp1.sales_value >0 or dp1.use_value>0) \n");
                    sql.append(" AND dp1.delete_date is null \n");
                    sql.append(" AND ds1.delete_date is null \n");
                    sql.append(" ) \n"); 
                    //Luc start add 20150901 #42414
                    //Luc end add 20150806 #41513
                    sql.append(" order by max(ds.sales_date)");
                    sql.append(" )t");
                    sql.append(" order by t.sales_date"); 
                    ResultSetWrapper rs = null;
                    try {
                        rs = con.executeQuery(sql.toString());
                    } catch (SQLException ex) {
                        Logger.getLogger(PassBookReportPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    int i = 0;
                    
                    rs.last();
                    if(rs.getRow()<=0) {
                        MessageDialog.showMessageDialog(this,
                             "対象データがありません",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                        return;
                       
                    }
                    //結果が１行の場合
                    if (rs.getRow() == 1) {
                        jx.removeRow(6);
                        jx.removeRow(7);
                    }
                    //結果が2行の場合
                    if (rs.getRow() == 2) {
                        jx.removeRow(7);
                    }
                    if(rs.getRow()>3) {
                        jx.insertRow(baseRow+1,rs.getRow()-3);
                    }
                    rs.first();
                    Integer mon = StartMonth;
                    for(int j=0;j<12;j++) {
                       
                        if(mon >12) {
                            mon = 1;
                        }
                        //IVS_TMTrong start edit 20150723 New request #40814
                        jx.setValue(21+j,4, mon+"月");
                        //IVS_TMTrong end edit 20150723 New request #40814
                        mon = mon+1;
                    }
                    Double tax =0d;
                  
                    
                    do  {
                        jx.setValue(5, baseRow + i, rs.getDate("sales_date") != null? (rs.getDate("sales_date").compareTo(min)<1? min: rs.getDate("sales_date")) :"");
                        jx.setValue(6, baseRow + i, rs.getString("shop_name"));
                        jx.setValue(7, baseRow + i, rs.getString("staff_name"));
                        jx.setValue(8, baseRow + i, rs.getString("customer_no"));
                        jx.setValue(9, baseRow + i, rs.getString("customer_name"));
                        jx.setValue(11, baseRow + i, rs.getString("free_heading_name"));
                        //IVS_TMTrong start add 20150723 New request #40814
                        jx.setValue(13, baseRow + i, rs.getDouble("FiveYearAgoContractSum"));
                        jx.setValue(14, baseRow + i, rs.getDouble("FourYearAgoContractSum"));
                        jx.setValue(15, baseRow + i, rs.getDouble("ThreeYearAgoContractSum"));
                        jx.setValue(16, baseRow + i, rs.getDouble("TwoYearAgoContractSum"));
                        jx.setValue(17, baseRow + i, rs.getDouble("OneYearAgoContractSum"));
                        jx.setValue(18, baseRow + i, rs.getDouble("thisYearContractSum"));
                        //IVS_TMTrong end add 20150723 New request #40814
                        //IVS_TMTrong start edit 20150723 New request #40814
                        //jx.setValue(19, baseRow + i, rs.getDouble("sales_value"));
                        //IVS_TMTrong start edit 20150729 New request #40814
                        //jx.setValue(20, baseRow + i, rs.getDouble("balance_value"));
                        jx.setValue(20, baseRow + i, rs.getDouble("balance_value"));
                        //IVS_TMTrong end edit 20150729 New request #40814
                        jx.setValue(21, baseRow + i, rs.getDouble("val0"));
                        jx.setValue(22, baseRow + i, rs.getDouble("val1"));
                        jx.setValue(23, baseRow + i, rs.getDouble("val2"));
                        jx.setValue(24, baseRow + i, rs.getDouble("val3"));
                        jx.setValue(25, baseRow + i, rs.getDouble("val4"));
                        jx.setValue(26, baseRow + i, rs.getDouble("val5"));
                        jx.setValue(27, baseRow + i, rs.getDouble("val6"));
                        jx.setValue(28, baseRow + i, rs.getDouble("val7"));
                        jx.setValue(29, baseRow + i, rs.getDouble("val8"));
                        jx.setValue(30, baseRow + i, rs.getDouble("val9"));
                        jx.setValue(31, baseRow + i, rs.getDouble("val10"));
                        jx.setValue(32, baseRow + i, rs.getDouble("val11"));
                        tax = rs.getDouble("tax_rate");
                        jx.setValue(52, baseRow + i, tax);
                        //IVS_TMTrong end edit 20150723 New request #40814
                        i++;

                    }while (rs.next());
                    

                }
            } catch (Exception e) {

            }
            finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
            jx.openWorkbook();

	}//GEN-LAST:event_btnOutputActionPerformed

    private void btnLeftAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftAllActionPerformed

    }//GEN-LAST:event_btnLeftAllActionPerformed

    private void btnLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftActionPerformed

    }//GEN-LAST:event_btnLeftActionPerformed

    private void btnRightAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightAllActionPerformed

    }//GEN-LAST:event_btnRightAllActionPerformed

    private void btnRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightActionPerformed

    }//GEN-LAST:event_btnRightActionPerformed

    private void targetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetActionPerformed

    }//GEN-LAST:event_targetActionPerformed

    private void cmbStartYearPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbStartYearPropertyChange
        // TODO add your handling code here:
        changeYearMonth();
    }//GEN-LAST:event_cmbStartYearPropertyChange

    private void cmbStartMonthPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbStartMonthPropertyChange
        // TODO add your handling code here:
        changeYearMonth();
    }//GEN-LAST:event_cmbStartMonthPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutput;
    private javax.swing.JComboBox cmbEndMonth;
    private javax.swing.JComboBox cmbEndYear;
    private javax.swing.JComboBox cmbSelectedMonth;
    private javax.swing.JComboBox cmbSelectedYear;
    private javax.swing.JComboBox cmbStartMonth;
    private javax.swing.JComboBox cmbStartYear;
    private javax.swing.ButtonGroup dateTypeGroup;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblMonthWay;
    private javax.swing.JPanel pnlDayShift;
    private javax.swing.JPanel pnlMonthShift;
    private javax.swing.JRadioButton rdoMonthShift;
    private javax.swing.JRadioButton rdoYearShift;
    private javax.swing.ButtonGroup reportTypeGroup;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel target;
    private javax.swing.JLabel targetLabel;
    private javax.swing.ButtonGroup taxGroup;
    // End of variables declaration//GEN-END:variables

    //IVS_TTMLoan start add 2014/07/25 Mashu_売上推移表
    private MstShopRelations listCategory = new MstShopRelations();
    private MstShopRelations listLeftCategory = new MstShopRelations();
    private MstShopRelations listRightCategory = new MstShopRelations();
    private int useShopCategory = 1;

    /**
     * 業態情報を設定する
     */


    private void init() {
        this.setKeyListener();
        SystemInfo.initGroupShopComponents(target, 3);
        this.cmbStartYear.setEnabled(this.rdoYearShift.isSelected());
        this.cmbStartMonth.setEnabled(this.rdoYearShift.isSelected());
        this.cmbEndYear.setEnabled(this.rdoYearShift.isSelected());
        this.cmbEndMonth.setEnabled(this.rdoYearShift.isSelected());
        this.cmbSelectedYear.setEnabled(rdoMonthShift.isSelected());
        this.cmbSelectedMonth.setEnabled(rdoMonthShift.isSelected());

        Calendar cdr = Calendar.getInstance();
        cdr.setTime(new Date());
        int nowYear = cdr.get(Calendar.YEAR);
        int nowMonth = cdr.get(Calendar.MONTH) + 1;

       
        List<Integer> yearList = new ArrayList<>();
        //5年前
        for(int i=-5;i<0;i++) {
            yearList.add(nowYear+i);
        }
        //5年後
         for(int i=0;i<5;i++) {
            yearList.add(nowYear+i);
        }
         
        this.initYearCombo(cmbStartYear, yearList);
        this.initYearCombo(cmbEndYear, yearList);
        this.initYearCombo(cmbSelectedYear, yearList);
        
        this.cmbSelectedMonth.setSelectedIndex(nowMonth - 1);
        this.cmbSelectedYear.setSelectedItem(nowYear);
        
        this.cmbStartMonth.setSelectedIndex(nowMonth-1);
        this.cmbStartYear.setSelectedItem(nowYear);
        
        this.cmbEndMonth.setSelectedIndex(nowMonth - 2);
        this.cmbEndYear.setSelectedItem(nowYear+1);
       
    }

    private void initYearCombo(final JComboBox cmb, List<Integer> yearList) {

        cmb.removeAllItems();

        for (Integer year : yearList) {
            cmb.addItem(year);
        }
        cmb.setSelectedIndex(0);
        cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ((JTextField) cmb.getEditor().getEditorComponent()).selectAll();
            }
        });
    }

    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(btnOutput);
    }

    private void setKeyListener() {
        cmbSelectedMonth.addKeyListener(SystemInfo.getMoveNextField());
        cmbEndMonth.addKeyListener(SystemInfo.getMoveNextField());
        cmbStartMonth.addKeyListener(SystemInfo.getMoveNextField());
        rdoMonthShift.addKeyListener(SystemInfo.getMoveNextField());
        rdoMonthShift.addFocusListener(SystemInfo.getSelectText());
        rdoYearShift.addKeyListener(SystemInfo.getMoveNextField());
        rdoYearShift.addFocusListener(SystemInfo.getSelectText());
        cmbSelectedYear.addKeyListener(SystemInfo.getMoveNextField());
        cmbEndYear.addKeyListener(SystemInfo.getMoveNextField());
        cmbStartYear.addKeyListener(SystemInfo.getMoveNextField());
    }

    private void resetSpan(ReportParameterBean paramBean, Calendar calStart, Calendar calEnd) {

        if (paramBean.getCutoffDay() == 31) {
            return;
        }

        Calendar calTo = Calendar.getInstance();
        calTo.setTime(calEnd.getTime());

        if (calTo.getActualMaximum(Calendar.DATE) <= paramBean.getCutoffDay()) {
            calTo.set(Calendar.DAY_OF_MONTH, calTo.getActualMaximum(Calendar.DATE));
        } else {
            calTo.set(Calendar.DAY_OF_MONTH, paramBean.getCutoffDay());
        }

        Calendar calFrom = (Calendar) calTo.clone();
        calFrom.add(Calendar.MONTH, -1);
        calFrom.add(Calendar.DAY_OF_MONTH, 1);

        calStart.setTime(calFrom.getTime());
        calEnd.setTime(calTo.getTime());
    }

    private MoveNextField mnf = new MoveNextField();
    private BusinessReportFocusTraversalPolicy ftp = new BusinessReportFocusTraversalPolicy();

    /**
     * 業務報告画面用FocusTraversalPolicyを取得する。
     *
     * @return 業務報告画面用FocusTraversalPolicy
     */
    public BusinessReportFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    /**
     * 業務報告画面用FocusTraversalPolicy
     */
    private class BusinessReportFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(rdoMonthShift)
                    || aComponent.equals(rdoYearShift)) {
                return target;
            } else if (aComponent.equals(target)) {
                if (rdoMonthShift.isSelected()) {
                    return cmbSelectedYear;
                } else {
                    return cmbStartYear;
                }
            } else if (aComponent.equals(cmbSelectedYear)) {
                return cmbSelectedMonth;
            } else if (aComponent.equals(cmbStartYear)) {
                return cmbStartMonth;
            } else if (aComponent.equals(cmbStartMonth)) {
                return cmbEndYear;
            } else if (aComponent.equals(cmbEndYear)) {
                return cmbEndMonth;
            } else if (aComponent.equals(cmbEndMonth)
                    || aComponent.equals(cmbSelectedMonth)) {
                if (rdoMonthShift.isSelected()) {
                    return rdoMonthShift;
                }
                return rdoYearShift;
            }
            return rdoMonthShift;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(rdoMonthShift)
                    || aComponent.equals(rdoYearShift)) {
                return this.getLastComponent(aContainer);
            } else if (aComponent.equals(cmbSelectedMonth)) {
                return cmbSelectedYear;
            } else if (aComponent.equals(cmbStartMonth)) {
                return cmbStartYear;
            } else if (aComponent.equals(cmbEndYear)) {
                return cmbStartMonth;
            } else if (aComponent.equals(cmbEndMonth)) {
                return cmbEndYear;
            }
            return this.getSelectedReportType();
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。 このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer 先頭の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer) {
            return this.getSelectedReportType();
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。 このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer aContainer - 最後の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer) {
            if (rdoMonthShift.isSelected()) {
                if (rdoMonthShift.isSelected()) {
                    return cmbSelectedMonth;
                } else {
                    return cmbEndMonth;
                }
            }

            return cmbEndMonth;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。 aContainer
         * をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         *
         * @param aContainer デフォルトの Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer) {
            return this.getSelectedReportType();
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。 show() または setVisible(true)
         * の呼び出しで一度ウィンドウが表示されると、 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、 または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         *
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        public Component getInitialComponent(Window window) {
            return this.getSelectedReportType();
        }

        private Component getSelectedReportType() {
            if (rdoYearShift.isSelected()) {
                return rdoYearShift;
            }

            return rdoMonthShift;
        }

    }

    private boolean inputCheckYear(JComboBox cmb, String itemName) {
        NumberUtils numUtil = new NumberUtils();
        if (!numUtil.isNumber(cmb.getSelectedItem().toString())) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, itemName),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmb.requestFocusInWindow();
            return false;
        }

        return true;
    }

}
