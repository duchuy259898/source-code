/*
 * NotMemberListPanel.java
 *
 * Created on 2007/03/12, 9:20
 */

package com.geobeck.sosia.pos.hair.report;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;

import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;

import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.report.bean.EffectIndicatorAnalysisBean;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.swing.table.ColumnGroup;
import com.geobeck.sosia.pos.swing.table.GroupableTableHeader;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.JTableEx;
import com.geobeck.swing.SwingUtil;
import com.geobeck.util.SQLUtil;

public class ReasonsRankPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
	private boolean isLoading = false;
	private String shopIdString = "";
	// 来店理由Map
	private HashMap<Integer, String> mapFirstComingMotive = new HashMap<Integer, String>();
	// 店舗Map
	private HashMap<Integer, String> mapShop = new HashMap<Integer, String>();
	// スタッフMap
	private HashMap<Integer, String> mapStaff = new HashMap<Integer, String>();
	// 詳細データ
	private HashMap<Integer, HashMap<Integer, Integer>> mapDetail = new HashMap<Integer, HashMap<Integer, Integer>>();
	// 項目合計データ
	private HashMap<Integer, Integer> mapTotal = new HashMap<Integer, Integer>();
	// 平均データ
	private HashMap<Integer, Integer> mapAverage = new HashMap<Integer, Integer>();
	
	public ReasonsRankPanel() {
		isLoading = true;

		initComponents();
		addMouseCursorChange();

		this.setPath("帳票管理 >> 来店理由ランキング");
		this.setTitle("来店理由ランキング");
		this.setSize(835, 800);

		this.init();


		isLoading = false;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpKubun = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        lblShop = new javax.swing.JLabel();
        showButton = new javax.swing.JButton();
        btnOutput = new javax.swing.JButton();
        detailScrollPane = new javax.swing.JScrollPane();
        tblDetail = new javax.swing.JTable();
        lblDateSelect = new javax.swing.JLabel();
        dateSelect = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        dateSelect2 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        rdoShop = new javax.swing.JRadioButton();
        rdoStaff = new javax.swing.JRadioButton();
        lblKubun = new javax.swing.JLabel();
        countTotalScrollPane = new javax.swing.JScrollPane();
        tblCountTotal = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        lblShop.setText("店舗");

        showButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
        showButton.setBorderPainted(false);
        showButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutput.setBorderPainted(false);
        btnOutput.setFocusCycleRoot(true);
        btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputActionPerformed(evt);
            }
        });

        detailScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        tblDetail.setColumnSelectionAllowed(true);
        tblDetail.setFocusable(false);
        tblDetail.setRowHeight(40);
        tblDetail.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tblDetail.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tblDetail.getTableHeader().setReorderingAllowed(false); tblDetail.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); SwingUtil.setJTableHeaderRenderer(tblDetail, SystemInfo.getTableHeaderRenderer()); tblDetail.setRowHeight(40); SelectTableCellRenderer.setSelectTableCellRenderer(tblDetail);
        detailScrollPane.setViewportView(tblDetail);
        tblDetail.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        lblDateSelect.setText("対象期間");

        dateSelect.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        btnGrpKubun.add(rdoShop);
        rdoShop.setSelected(true);
        rdoShop.setText("店舗別");
        rdoShop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoShop.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoShop.setOpaque(false);
        rdoShop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoShopActionPerformed(evt);
            }
        });

        btnGrpKubun.add(rdoStaff);
        rdoStaff.setText("スタッフ別");
        rdoStaff.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoStaff.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoStaff.setOpaque(false);
        rdoStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoStaffActionPerformed(evt);
            }
        });

        lblKubun.setText("区分");

        countTotalScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        countTotalScrollPane.setFocusable(false);
        tblCountTotal.getTableHeader().setReorderingAllowed(false);
        tblCountTotal.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SwingUtil.setJTableHeaderRenderer(tblCountTotal, SystemInfo.getTableHeaderRenderer());

        tblCountTotal.setCellSelectionEnabled(true);
        tblCountTotal.setFocusable(false);
        tblCountTotal.setRowHeight(40);
        tblCountTotal.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tblCountTotal.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tblCountTotal.getTableHeader().setReorderingAllowed(false); tblCountTotal.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); SwingUtil.setJTableHeaderRenderer(tblCountTotal, SystemInfo.getTableHeaderRenderer()); tblCountTotal.setRowHeight(40); SelectTableCellRenderer.setSelectTableCellRenderer(tblCountTotal);
        countTotalScrollPane.setViewportView(tblCountTotal);
        
        jLabel1.setText("〜");
        dateSelect2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblDateSelect)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, lblKubun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, lblShop, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(82, 82, 82)
                                .add(rdoStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(rdoShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(dateSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(dateSelect2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(61, 61, 61)
                                .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(229, 573, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, countTotalScrollPane)
                            .add(detailScrollPane, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblDateSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(dateSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(dateSelect2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(rdoShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(lblKubun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(rdoStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(39, 39, 39)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblShop))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(detailScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 434, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(countTotalScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(27, 27, 27))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 654, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void shopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopActionPerformed
	{//GEN-HEADEREND:event_shopActionPerformed
		if (isLoading)
			return;
	}//GEN-LAST:event_shopActionPerformed

	private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
		this.showDetail();
	}//GEN-LAST:event_showButtonActionPerformed

	private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed
		btnOutput.setCursor(null);

		try {
			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			printExcel();
		} finally {
			setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		}
	}//GEN-LAST:event_btnOutputActionPerformed

	private void rdoShopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoShopActionPerformed
		this.shop.setEnabled(false);
	}//GEN-LAST:event_rdoShopActionPerformed

	private void rdoStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoStaffActionPerformed
		this.shop.setEnabled(true);
	}//GEN-LAST:event_rdoStaffActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGrpKubun;
    private javax.swing.JButton btnOutput;
    private javax.swing.JScrollPane countTotalScrollPane;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo dateSelect;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo dateSelect2;
    private javax.swing.JScrollPane detailScrollPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblDateSelect;
    private javax.swing.JLabel lblKubun;
    private javax.swing.JLabel lblShop;
    private javax.swing.JRadioButton rdoShop;
    private javax.swing.JRadioButton rdoStaff;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JButton showButton;
    private javax.swing.JTable tblCountTotal;
    private javax.swing.JTable tblDetail;
    // End of variables declaration//GEN-END:variables

	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange() {
		SystemInfo.addMouseCursorChange(showButton);
		SystemInfo.addMouseCursorChange(btnOutput);
	}

	/**
	 * 初期化処理を行う。
	 */
	private void init() {
		// 店舗selectboxを初期化
		MstShop nullShop = new MstShop();
		nullShop.setShopID(null);
    	nullShop.setShopName("");
    	shop.addItem(nullShop);
		SystemInfo.initGroupShopComponents(shop, 2);
		this.shop.setEnabled(false);

		// 対象期間を初期化
		dateSelect.setDate(new Date());
		dateSelect2.setDate(new Date());
		
		// 来店理由初期化
		initFirstComingMotive();
		
		// 詳細と総計のTable初期化
//		this.initDetailAndCountTotalTable();

	}
	
	/**
	 * 来店理由Map
	 */
	private void initFirstComingMotive() {
		String sql = "";
		sql += " select response_id,response_name from mst_response";
		sql += " where delete_date is null";
		sql += " order by display_seq asc";
		try {
			// 検索を行う
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				mapFirstComingMotive.put(rs.getInt("response_id"), rs.getString("response_name"));
			}
			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
//		mapFirstComingMotive.put(1, "紹介");
//		mapFirstComingMotive.put(2, "紹介カード");
//		mapFirstComingMotive.put(3, "口コミ");
//		mapFirstComingMotive.put(4, "チラシ");
//		mapFirstComingMotive.put(5, "通りがかり");
//		mapFirstComingMotive.put(6, "HPB");
//		mapFirstComingMotive.put(7, "インターネット");
//		mapFirstComingMotive.put(8, "雑誌");
//		mapFirstComingMotive.put(9, "その他");
	}
	
	/**
	 * 詳細と総計のTable初期化
	 */
	private void initDetailAndCountTotalTable() {
		// Table初期化
		SwingUtil.clearTable(tblDetail);
		SwingUtil.clearTable(tblCountTotal);
		List<String> modelStringList1 = new ArrayList<String>();
		List<String> modelStringList2 = new ArrayList<String>();
		if (rdoShop.isSelected()) {
			modelStringList1.add("店舗名");
		} else {
			modelStringList1.add("スタッフ名");
		}
		modelStringList2.add("");
		
		Iterator<Integer> iter  = mapFirstComingMotive.keySet().iterator();
		while(iter.hasNext()) {
			Integer idx = iter.next(); 
			modelStringList1.add(mapFirstComingMotive.get(idx));
			modelStringList2.add(mapFirstComingMotive.get(idx));
		}
		if (rdoShop.isSelected()) {
			modelStringList1.add("店舗合計");
			modelStringList2.add("店舗合計");
		} else {
			modelStringList1.add("スタッフ合計");
			modelStringList2.add("スタッフ合計");
		}
		
		// Model設定
		tblDetail.setModel(new javax.swing.table.DefaultTableModel(null,modelStringList1.toArray()) {
            public Class getColumnClass(int columnIndex) {
            	if (columnIndex == 0) {
            		return java.lang.String.class;
            	} else {
            		return java.lang.Integer.class;
            	}
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
		tblCountTotal.setModel(new javax.swing.table.DefaultTableModel(null,modelStringList2.toArray()) {
            public Class getColumnClass(int columnIndex) {
            	if (columnIndex == 0) {
            		return java.lang.String.class;
            	} else {
            		return java.lang.Integer.class;
            	}
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
		
		// 列幅を調整
		tblDetail.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
		for (int i = 1; i < tblDetail.getColumnCount(); i++) {
			tblDetail.getColumnModel().getColumn(i).setPreferredWidth(90);
		}
		tblCountTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
		for (int i = 1; i < tblDetail.getColumnCount(); i++) {
			tblCountTotal.getColumnModel().getColumn(i).setPreferredWidth(90);
		}
		 
		// フォッマート設定
		SwingUtil.setJTableHeaderRenderer(tblDetail, SystemInfo.getTableHeaderRenderer());
		SwingUtil.setJTableHeaderRenderer(tblCountTotal, SystemInfo.getTableHeaderRenderer());
		tblDetail.getColumnModel().getColumn(0).setPreferredWidth(150);
		tblCountTotal.getColumnModel().getColumn(0).setPreferredWidth(150);
	}
	
	/**
	 * 明細を表示する。
	 */
	private void showDetail() {
		// 先に明細をクリア
		SwingUtil.clearTable(tblDetail);
		SwingUtil.clearTable(tblCountTotal);
		mapDetail.clear();
		mapTotal.clear();
		mapAverage.clear();
		
		initDetailAndCountTotalTable();
		
		// 初期化
		Iterator<Integer> iterTmp  = mapFirstComingMotive.keySet().iterator();
		while(iterTmp.hasNext()) {
			Integer idx = iterTmp.next();
			mapTotal.put(idx, 0);
			mapAverage.put(idx, 0);
		}
		
		// shopIdStringを作成
		this.getShopIdString();
		
		// 店舗別 Or スタッフ別
		if (rdoShop.isSelected()) {
			// 店舗別
			Iterator<Integer> iterShop  = mapShop.keySet().iterator();
			while(iterShop.hasNext()) {
				Integer idxShop = iterShop.next();
				HashMap<Integer, Integer> tmpMap = new HashMap<Integer, Integer>();
				Iterator<Integer> iter  = mapFirstComingMotive.keySet().iterator();
				while(iter.hasNext()) {
					Integer idx = iter.next();
					tmpMap.put(idx, 0);
				}
				mapDetail.put(idxShop, tmpMap);
			}
			
			String sql = "select count(*) as count,dre.shop_id,dre.response_id from data_response_effect dre";
				sql += " inner join data_sales ds on (ds.shop_id = dre.shop_id and ds.slip_no=dre.slip_no)";
				sql += " where ds.delete_date is null and dre.delete_date is null";
				if (this.shopIdString != "") {
					sql += " and dre.shop_id in (" + this.shopIdString + ")";
				}
				sql += " and date_trunc('day', ds.sales_date) >= '" + dateSelect.getDateStr().substring(0, 8) +  "'";
				sql += " and date_trunc('day', ds.sales_date) <= '" + dateSelect2.getDateStr().substring(0, 8) +  "'";
				sql += " group by dre.shop_id,dre.response_id";
			try {
				// 検索を行う
				ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
				while (rs.next()) {
					Integer shop_id = rs.getInt("shop_id");
					Integer response_id = rs.getInt("response_id");
					Integer count = rs.getInt("count");
					if (mapDetail.get(shop_id) != null && mapDetail.get(shop_id).get(response_id) != null) {
						HashMap<Integer, Integer> tmpMap = mapDetail.get(shop_id);
						tmpMap.put(response_id, count);
						mapDetail.put(shop_id, tmpMap);
					}
				}
				rs.close();
			} catch (SQLException e) {
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		} else {
			// スタッフ別
			String sql = "";
			sql = "select * from mst_staff where delete_date is null and shop_id in (" + this.shopIdString + ") order by display_seq asc";
			try {
				// 検索を行う
				ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
				while (rs.next()) {
					HashMap<Integer, Integer> tmpMap = new HashMap<Integer, Integer>();
					Iterator<Integer> iter  = mapFirstComingMotive.keySet().iterator();
					while(iter.hasNext()) {
						Integer idx = iter.next();
						tmpMap.put(idx, 0);
					}
					mapDetail.put(rs.getInt("staff_id"), tmpMap);
					mapStaff.put(rs.getInt("staff_id"), rs.getString("staff_name1") + "　" + rs.getString("staff_name2") + "(" + mapShop.get(rs.getInt("shop_id")) + ")");
				}
				rs.close();
			} catch (SQLException e) {
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
			sql = "select count(*) as count,ds.staff_id,dre.response_id from data_response_effect dre";
			sql += " inner join data_sales ds on (ds.shop_id = dre.shop_id and ds.slip_no=dre.slip_no)";
			sql += " where ds.delete_date is null and dre.delete_date is null";
			if (this.shopIdString != "") {
				sql += " and dre.shop_id in (" + this.shopIdString + ")";
			}
			sql += " and date_trunc('day', ds.sales_date) >= '" + dateSelect.getDateStr().substring(0, 8) +  "'";
			sql += " and date_trunc('day', ds.sales_date) <= '" + dateSelect2.getDateStr().substring(0, 8) +  "'";
			sql += " group by ds.staff_id,dre.response_id";
			try {
				// 検索を行う
				ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
				while (rs.next()) {
					Integer staff_id = rs.getInt("staff_id");
					Integer response_id = rs.getInt("response_id");
					Integer count = rs.getInt("count");
					if (mapDetail.get(staff_id) != null && mapDetail.get(staff_id).get(response_id) != null) {
						HashMap<Integer, Integer> tmpMap = mapDetail.get(staff_id);
						tmpMap.put(response_id, count);
						mapDetail.put(staff_id, tmpMap);
					}
				}
				rs.close();
			} catch (SQLException e) {
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		
		// 詳細部分のデータ表示
		DefaultTableModel model1 = (DefaultTableModel) tblDetail.getModel();
		Iterator<Integer> iter  = mapDetail.keySet().iterator();
		while(iter.hasNext()) {
			Integer idx = iter.next();
			HashMap<Integer, Integer> tmpMap = mapDetail.get(idx);
			List<Object> tmpObjList = new ArrayList<Object>();
			if (rdoShop.isSelected()) {
				tmpObjList.add(mapShop.get(idx));
			} else {
				tmpObjList.add(mapStaff.get(idx));
			}
			Integer totalCount = 0;
			Iterator<Integer> iterFirstComingMotive  = mapFirstComingMotive.keySet().iterator();
			while(iterFirstComingMotive.hasNext()) {
				Integer idxFirstComingMotive = iterFirstComingMotive.next();
				tmpObjList.add(mapDetail.get(idx).get(idxFirstComingMotive));
				mapTotal.put(idxFirstComingMotive, mapTotal.get(idxFirstComingMotive) + mapDetail.get(idx).get(idxFirstComingMotive));
				totalCount += mapDetail.get(idx).get(idxFirstComingMotive);
			}
			tmpObjList.add(totalCount);
			
			model1.addRow(tmpObjList.toArray());
		}
		
		// 合計部分のデータ表示
		DefaultTableModel model2 = (DefaultTableModel) tblCountTotal.getModel();
		List<Object> tmpObjList = new ArrayList<Object>();
		
		tmpObjList.add("項目合計");
		Integer totalCount = 0;
		Iterator<Integer> iterFirstComingMotive  = mapFirstComingMotive.keySet().iterator();
		while(iterFirstComingMotive.hasNext()) {
			Integer idx = iterFirstComingMotive.next();
			tmpObjList.add(mapTotal.get(idx));
			totalCount += mapTotal.get(idx);
		}
		tmpObjList.add(totalCount);
		model2.addRow(tmpObjList.toArray());
		
		tmpObjList = new ArrayList<Object>();
		tmpObjList.add("平均");
		for (int i = 1; i < model2.getColumnCount(); i ++) {
			if (model1.getRowCount() > 0) {
				tmpObjList.add((int)Math.rint((Integer.parseInt(model2.getValueAt(0, i).toString())) / (model1.getRowCount())));
			} else {
				tmpObjList.add(0);
			}
		}
		model2.addRow(tmpObjList.toArray());
	}

	/**
	 * shopIdStringを作成する。
	 */
	private void getShopIdString() {
		String shopIdString = "";

		// mapShop, allShop
		for (int i = 0; i < shop.getItemCount(); i++) {
			MstShop mstShop = (MstShop) shop.getItemAt(i);
			if (mstShop.getShopID() != null) {
				mapShop.put(mstShop.getShopID(), mstShop.getShopName());
				
				if (shopIdString.equals("")) {
					shopIdString += mstShop.getShopID();
				} else {
					shopIdString += "," + mstShop.getShopID();
				}
			}
		}
		
		if (rdoStaff.isSelected()) {
			// 担当者別の場合
			MstShop mstShop = (MstShop) shop.getSelectedItem();
			if (mstShop.getShopID() != null) {
				shopIdString = mstShop.getShopID().toString();
			}
		}
		this.shopIdString = shopIdString;
	}

	/**
	 * EXCEL出力を行う
	 */
	private void printExcel() {
		JExcelApi jx = null;
		if (rdoShop.isSelected()) {
			jx = new JExcelApi("来店理由ランキング");
			jx.setTemplateFile("/reports/来店理由ランキング.xls");
		} else {
			jx = new JExcelApi("来店理由ランキング");
			jx.setTemplateFile("/reports/来店理由ランキング.xls");
		}
		
		// ヘッダ
		// 対象期間
		String targetDateStr = "対象期間：" + this.dateSelect.getDateStr().substring(0, 4) + "年" + this.dateSelect.getDateStr().substring(4, 6) + "月" + this.dateSelect.getDateStr().substring(6, 8) + "日";
		targetDateStr += " 〜 " +  this.dateSelect2.getDateStr().substring(0, 4) + "年" + this.dateSelect2.getDateStr().substring(4, 6) + "月" + this.dateSelect2.getDateStr().substring(6, 8) + "日";
		jx.setValue(1, 4, targetDateStr);
		
		// 出力条件
		if (rdoShop.isSelected()) {
			jx.setValue(1, 5, "出力条件：店舗別");
		} else {
			jx.setValue(1, 5, "出力条件：スタッフ別");
		}
		
		// データ入る
		jx.insertColumn(2, this.mapFirstComingMotive.size() - 1);
		Iterator<Integer> iter  = mapFirstComingMotive.keySet().iterator();
		int i = 0;
		while(iter.hasNext()) {
			Integer idx = iter.next(); 
			jx.setValue(2 + i, 7, mapFirstComingMotive.get(idx));
			i ++;
		}
		jx.insertRow(8, mapDetail.size() - 1);
		
		Iterator<Integer> iterDetail  = mapDetail.keySet().iterator();
		int j = 0;
		while(iterDetail.hasNext()) {
			Integer idx = iterDetail.next();
			HashMap<Integer, Integer> tmpMap = mapDetail.get(idx);
			if (rdoShop.isSelected()) {
				jx.setValue(1, 8 + j, mapShop.get(idx));
			} else {
				jx.setValue(1, 8 + j, mapStaff.get(idx));
			}
			
			Integer totalCount = 0;
			Iterator<Integer> iterFirstComingMotive  = mapFirstComingMotive.keySet().iterator();
			int k = 2;
			while(iterFirstComingMotive.hasNext()) {
				Integer idxFirstComingMotive = iterFirstComingMotive.next();
				jx.setValue(k, 8 + j, mapDetail.get(idx).get(idxFirstComingMotive));
				totalCount += mapDetail.get(idx).get(idxFirstComingMotive);
				k ++;
			}
			jx.setValue(k, 8 + j, totalCount);
			j ++;
		}
		
		// 合計部分のデータ表示
		Integer totalCount = 0;
		Iterator<Integer> iterFirstComingMotive  = mapFirstComingMotive.keySet().iterator();
		int k = 2;
		while(iterFirstComingMotive.hasNext()) {
			Integer idx = iterFirstComingMotive.next();
			jx.setValue(k, 8 + j, mapTotal.get(idx));
			totalCount += mapTotal.get(idx);
			k ++;
		}
		jx.setValue(k, 8 + j, totalCount);
		j ++;
		
		DefaultTableModel model1 = (DefaultTableModel) tblDetail.getModel();
		DefaultTableModel model2 = (DefaultTableModel) tblCountTotal.getModel();
		for (int o = 1; o < model2.getColumnCount(); o ++) {
			if (model1.getRowCount() > 0) {
				jx.setValue(o + 1, 8 + j, (int)Math.rint((Integer.parseInt(model2.getValueAt(0, o).toString())) / (model1.getRowCount())));
			} else {
				jx.setValue(o +1, 8 + j, 0);
			}
		}
		
		jx.openWorkbook();
	}
}