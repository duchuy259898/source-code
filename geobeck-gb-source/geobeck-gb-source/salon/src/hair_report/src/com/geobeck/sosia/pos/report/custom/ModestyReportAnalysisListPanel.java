/*
 * StaffShopRankingDecilePanel.java
 *
 * Created on 2008/07/20, 11:00
 */
package com.geobeck.sosia.pos.report.custom;

import com.geobeck.sosia.pos.hair.report.*;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ResultSetWrapper;
import java.awt.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import java.util.GregorianCalendar;
import com.geobeck.swing.*;
import javax.swing.table.DefaultTableModel;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.hair.customer.MstCustomerPanel;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.hair.mail.*;
import com.geobeck.sosia.pos.mail.*;
import java.text.*;
import com.geobeck.sosia.pos.master.company.*;
import java.math.BigDecimal;
import com.geobeck.sosia.pos.hair.report.util.*;

/**
 *
 * @author ryugou
 */
public class ModestyReportAnalysisListPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

	private Object target = null;
	private String staffName = "";
	private String targetPeriodStartDate = "";
	private String targetPeriodEndDate = "";
	private String taxName = "";
	private String productDivisionName = "";
	private String productDivisionLabelName = "";
	private String rankLabel = "";
	private String rankNo = "";
	private String fmType = "";
	private String fvalue = "";
	private String mvalue = "";
	private String whereCondition = "";
	private long selectedRow = 0l;
	private long limitCount = 0l;

	private ArrayList<MstCustomer> resultList = new ArrayList<MstCustomer>();
	private MstCustomerListCreator mclistCreator = null;

	/**
	 * Creates new form StaffShopRankingDecilePanel
	 */
	public ModestyReportAnalysisListPanel(String title) {
		initComponents();
		addMouseCursorChange();
		this.setSize(820, 680);
		this.setPath("帳票出力");
		this.setTitle(title);
		this.setKeyListener();
		this.initTableColumnWidth();
		//初期化処理
		this.init();
		// メール作成ボタン表示設定
		this.mailButton.setVisible(SystemInfo.checkAuthority(53));
		// 宛名ラベル作成ボタン表示設定
		this.sealButton.setVisible(SystemInfo.checkAuthority(55));
		// ハガキ作成ボタン表示設定
		this.postcardButton.setVisible(SystemInfo.checkAuthority(54));
	}

	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange() {
		SystemInfo.addMouseCursorChange(btnOutput);
		SystemInfo.addMouseCursorChange(mailButton);
		SystemInfo.addMouseCursorChange(sealButton);
		SystemInfo.addMouseCursorChange(postcardButton);
		SystemInfo.addMouseCursorChange(selectAllButton);
		SystemInfo.addMouseCursorChange(releaseAllButton);
		SystemInfo.addMouseCursorChange(closeButton);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customerGroup = new javax.swing.ButtonGroup();
        comingCycleGroup = new javax.swing.ButtonGroup();
        customerCategoryGroup = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        shopLabel = new javax.swing.JLabel();
        btnOutput = new javax.swing.JButton();
        sealButton = new javax.swing.JButton();
        postcardButton = new javax.swing.JButton();
        mailButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        shopLabel2 = new javax.swing.JLabel();
        shop = new javax.swing.JLabel();
        targetPeriod = new javax.swing.JLabel();
        txtTargetType = new javax.swing.JLabel();
        selectAllButton = new javax.swing.JButton();
        productDivisionLabel = new javax.swing.JLabel();
        releaseAllButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customersTable = new com.geobeck.swing.JTableEx();
        jScrollPane2 = new javax.swing.JScrollPane();
        totalTable = new com.geobeck.swing.JTableEx();

        setFocusCycleRoot(true);

        pnlMain.setFocusCycleRoot(true);
        pnlMain.setOpaque(false);

        shopLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel.setText("対象店舗");

        btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutput.setBorderPainted(false);
        btnOutput.setContentAreaFilled(false);
        btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputActionPerformed(evt);
            }
        });

        sealButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_seal_off.jpg"));
        sealButton.setBorderPainted(false);
        sealButton.setContentAreaFilled(false);
        sealButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_seal_on.jpg"));
        sealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sealButtonActionPerformed(evt);
            }
        });

        postcardButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_off.jpg"));
        postcardButton.setBorderPainted(false);
        postcardButton.setContentAreaFilled(false);
        postcardButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_on.jpg"));
        postcardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postcardButtonActionPerformed(evt);
            }
        });

        mailButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_mail_off.jpg"));
        mailButton.setBorderPainted(false);
        mailButton.setContentAreaFilled(false);
        mailButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_mail_on.jpg"));
        mailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailButtonActionPerformed(evt);
            }
        });

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/back_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/back_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        shopLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel2.setText("対象月");

        shop.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        shop.setText("ジオサロン");

        targetPeriod.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        targetPeriod.setText("2020年2月");

        txtTargetType.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txtTargetType.setText("技術");

        selectAllButton.setIcon(SystemInfo.getImageIcon("/button/select/select_all_off.jpg"));
        selectAllButton.setBorderPainted(false);
        selectAllButton.setContentAreaFilled(false);
        selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_all_on.jpg"));
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        productDivisionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        productDivisionLabel.setText("出力対象");

        releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/select/release_all_off.jpg"));
        releaseAllButton.setBorderPainted(false);
        releaseAllButton.setContentAreaFilled(false);
        releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/release_all_on.jpg"));
        releaseAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseAllButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlMainLayout = new org.jdesktop.layout.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlMainLayout.createSequentialGroup()
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(shopLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(productDivisionLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(pnlMainLayout.createSequentialGroup()
                                .add(15, 15, 15)
                                .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlMainLayout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(targetPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(txtTargetType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 219, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 311, Short.MAX_VALUE)
                        .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .add(pnlMainLayout.createSequentialGroup()
                .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mailButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sealButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(postcardButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlMainLayout.createSequentialGroup()
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(postcardButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mailButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(sealButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(15, 15, 15)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(shopLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(targetPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(productDivisionLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txtTargetType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
        );

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><p>顧客<br>情報</p></html>", "顧客No.", "氏名", "前回来店日", "主担当者", "指名", "来店回数", "電話番号", "携帯番号", "<html>メール<br>&nbsp;有無 </html>", "<html>送信<br>対象</html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        customersTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(customersTable);
        customersTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jScrollPane2.setBorder(null);

        totalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "顧客数", "来店回数"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        totalTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        totalTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        SelectTableCellRenderer.setSelectTableCellRenderer(totalTable);
        jScrollPane2.setViewportView(totalTable);
        totalTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(pnlMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(jScrollPane1)
                                .add(11, 11, 11))))
                    .add(layout.createSequentialGroup()
                        .add(546, 546, 546)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 270, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(573, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed

		mclistCreator = null;

		this.showOpener();

    }//GEN-LAST:event_closeButtonActionPerformed

	private void changeSelect(boolean select) {

		DefaultTableModel model = (DefaultTableModel) customersTable.getModel();
		for (int i = 0; i < model.getRowCount(); i++) {
			Vector row = (Vector) model.getDataVector().get(i);
			if (row.get(10) != null) {
				row.add(10, select);
			}
		}
	}

    private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseAllButtonActionPerformed

		this.changeSelect(false);

    }//GEN-LAST:event_releaseAllButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed

		this.changeSelect(true);

    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void postcardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postcardButtonActionPerformed
		this.printPostcard();
    }//GEN-LAST:event_postcardButtonActionPerformed

    private void sealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sealButtonActionPerformed
		this.createSeal();
    }//GEN-LAST:event_sealButtonActionPerformed

    private void mailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailButtonActionPerformed
		this.sendMail();
    }//GEN-LAST:event_mailButtonActionPerformed

    private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed
		this.print();
    }//GEN-LAST:event_btnOutputActionPerformed

	private boolean checkDuplicateCustomer(ArrayList<MstCustomer> selectedArray, MstCustomer customer) {
		for (MstCustomer mc : selectedArray) {
			if (mc.getCustomerID().intValue() == customer.getCustomerID().intValue()) {
				return true;
			}
		}
		return false;
	}

	private class MstCustomerListCreator extends Thread {

		private Set<Integer> list = new HashSet<Integer>();

		public MstCustomerListCreator(Set<Integer> list) {
			this.list = list;
		}

		public void run() {

			try {

				for (Integer id : list) {
					MstCustomer mc = new MstCustomer(id);
					mc.load(SystemInfo.getConnection());
					resultList.add(mc);
				}

			} catch (Exception e) {
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}

		}
	}

	private void getCustomerList() {

		try {

			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

			for (;;) {
				if (customersTable.getRowCount() == resultList.size()) {
					break;
				}
			}

		} finally {
			setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		}
	}

	private void printPostcard() {

		DefaultTableModel model = (DefaultTableModel) customersTable.getModel();

		ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();

		for (int i = 0; i < model.getRowCount(); i++) {

			Vector row = (Vector) model.getDataVector().get(i);

			if (row.get(10) != null && (Boolean) row.get(10)) {

				getCustomerList();

				MstCustomer mc = resultList.get(i);

				// すでに追加済みのユーザなら飛ばす
				if (this.checkDuplicateCustomer(selectedArray, mc)) {
					continue;
				}

				// 住所がなかっても飛ばす
				if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
					continue;
				}

				selectedArray.add(mc);
			}
		}

		if (selectedArray.size() == 0) {
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return;
		}

		PrintPostcardPanel ppp = new PrintPostcardPanel(selectedArray);
		ppp.setOpener(this);
		SwingUtil.openAnchorDialog(null, true, ppp, "ハガキ作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);
	}

	private void createSeal() {

		// 宛名ラベル印刷をクリック
		DefaultTableModel model = (DefaultTableModel) customersTable.getModel();

		ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();

		for (int i = 0; i < model.getRowCount(); i++) {

			Vector row = (Vector) model.getDataVector().get(i);

			if (row.get(10) != null && (Boolean) row.get(10)) {

				getCustomerList();

				MstCustomer mc = resultList.get(i);

				// すでに追加済みのユーザなら飛ばす
				if (this.checkDuplicateCustomer(selectedArray, mc)) {
					continue;
				}

				// 住所がなかっても飛ばす
				if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
					continue;
				}

				selectedArray.add(mc);
			}
		}

		if (selectedArray.size() == 0) {
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return;
		}

		PrintLabelPanel plp = new PrintLabelPanel(selectedArray);
		plp.setOpener(this);
		SwingUtil.openAnchorDialog(null, true, plp, "宛名ラベル作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);
	}

	private void sendMail() {

		ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();

		DefaultTableModel model = (DefaultTableModel) customersTable.getModel();

		for (int i = 0; i < model.getRowCount(); i++) {

			Vector row = (Vector) model.getDataVector().get(i);

			if (row.get(10) != null && (Boolean) row.get(10)) {

				getCustomerList();

				MstCustomer mc = resultList.get(i);

				// すでに追加済みのユーザなら飛ばす
				if (this.checkDuplicateCustomer(selectedArray, mc)) {
					continue;
				}

				selectedArray.add(mc);
			}
		}

		if (selectedArray.size() == 0) {
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return;
		}

		HairCommonMailPanel rcmp = new HairCommonMailPanel(target, selectedArray);
		rcmp.setOpener(this);
		SwingUtil.openAnchorDialog(null, true, rcmp, "メール作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);
	}

	private Date getStartDate(Date date) {

		if (date == null) {
			return null;
		}

		GregorianCalendar cal = new GregorianCalendar();
		cal.setTime(date);
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);

		return cal.getTime();
	}

	private Date getEndDate(Date date) {
		if (date == null) {
			return null;
		}

		GregorianCalendar cal = new GregorianCalendar();
		cal.setTime(date);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 59);
		cal.set(Calendar.SECOND, 59);

		return cal.getTime();
	}

	void showData(MstShop targetShop, Date targetDate, Set<Integer> tgtCustSet, String targetName) {
		//--------------------------
		// ヘッダ情報
		//--------------------------
		//店舗
		shop.setText(targetShop.getShopName());
		SimpleDateFormat sdfYM = new SimpleDateFormat("yyyy年MM月");
		targetPeriod.setText(sdfYM.format(targetDate));
		txtTargetType.setText(targetName);
		//--------------------------
		// 顧客情報
		//--------------------------
		resultList.clear();

		if (customersTable.getCellEditor() != null) {
			customersTable.getCellEditor().stopCellEditing();
		}
		SwingUtil.clearTable(customersTable);
		DefaultTableModel model = (DefaultTableModel) customersTable.getModel();
		try {
			long customerCountTotal = 0l;
			long visitCountTotal = 0l;
			long salesValueTotal = 0l;

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

			Calendar td = Calendar.getInstance();
			td.setTime(targetDate);
			td.set(Calendar.DATE, td.getActualMaximum(Calendar.DATE));
			Date baseEndDate = td.getTime();
			
			BigDecimal bd = null;
			NumberFormat nf = NumberFormat.getInstance();
			nf.setMinimumFractionDigits(1);
			//---------------------------------------------------------------------------------
			StringBuilder sql = new StringBuilder(4000);
			sql.append(" select mc.customer_id, mc.customer_no, customer_name1, customer_name2, ds.sales_date, staff_name1, staff_name2\n"
					+ ", designated_flag, visit_num,mc.phone_number, mc.cellular_number, mc.pc_mail_address, mc.cellular_mail_address \n"
					+ "from data_sales ds\n"
					+ "inner join \n"
					+ "(select shop_id, customer_id, max (sales_date) as sales_date\n"
					+ "from data_sales dsx\n"
					+ "where delete_date is null\n"
					+ "and dsx.shop_id=" + targetShop.getShopID() + " \n"
					+ "and customer_id in (-1");
					for (Integer tcId : tgtCustSet) {
						sql.append("," + tcId);
					}
					sql.append(")\n"
					+ "and sales_date <= '" + sdf.format(baseEndDate) + "'\n"
					+ "group by shop_id,customer_id\n"
					+ "order by customer_id) mv on ds.shop_id = mv.shop_id and ds.customer_id = mv.customer_id and ds.sales_date = mv.sales_date\n"
					+ "inner join mst_customer mc on ds.customer_id = mc.customer_id\n"
					+ "left join mst_staff ms on ds.staff_id = ms.staff_id order by customer_kana1, customer_kana2\n"
					+ ", ds.customer_id, ds.slip_no desc");
			SystemInfo.getLogger().info(sql.toString());
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
			int tmp_customer_id = -1;
			while (rs.next()) {
				if (rs.getInt("customer_id") == tmp_customer_id) {
					continue;
				}
				tmp_customer_id = rs.getInt("customer_id");
				Object[] rowData = {
					getUserSearchButton(rs.getInt("customer_id")),
					rs.getString("customer_no"),
					rs.getString("customer_name1") + rs.getString("customer_name2"),
					sdf.format(rs.getDate("sales_date")),
					((rs.getString("staff_name1")!=null)?rs.getString("staff_name1"):"")  + ((rs.getString("staff_name2") !=null)?rs.getString("staff_name2"):""),
					((Boolean) rs.getBoolean("designated_flag") ? "●" : ""),
					rs.getLong("visit_num"),
					rs.getString("phone_number"),
					rs.getString("cellular_number"),
					rs.getString("pc_mail_address").length() > 0 || rs.getString("cellular_mail_address").length() > 0 ? "●" : "",
					true
				};
				customerCountTotal += 1;
				visitCountTotal += rs.getLong("visit_num");
				model.addRow(rowData);
			}

			rs.close();

			SwingUtil.clearTable(totalTable);
			DefaultTableModel totalModel = (DefaultTableModel) totalTable.getModel();
			totalModel.addRow(new Object[]{customerCountTotal, visitCountTotal, salesValueTotal, visitCountTotal > 0 ? (salesValueTotal / visitCountTotal) : 0});

			mclistCreator = new MstCustomerListCreator(tgtCustSet);
			mclistCreator.start();

		} catch (Exception e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		} finally {
			setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		}
	}

	private void print() {

		DefaultTableModel model = (DefaultTableModel) customersTable.getModel();

		if (model.getRowCount() == 0) {
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return;
		}

		JExcelApi jx = new JExcelApi("modesty_analysis_list");
		jx.setTemplateFile("/com/geobeck/sosia/pos/report/custom/modesty_analysis_list.xls");

		// シート名
		jx.getTargetSheet().setName("リスト");

		// タイトル
		jx.setValue(1, 1, "現状分析対象者リスト");

		// ヘッダ
		jx.setValue(2, 3, shop.getText());
		jx.setValue(2, 4, targetPeriod.getText());
		jx.setValue(2, 5, txtTargetType.getText());
		int row = 8;

		// 追加行数セット
		jx.insertRow(row, model.getRowCount() - 1);

		// データセット
		for (int i = 0; i < model.getRowCount(); i++) {

			if (model.getValueAt(i, 0) instanceof JButton) {
				jx.setValue(1, row, i + 1);
			} else {
				jx.setValue(1, row, model.getValueAt(i, 0));
			}
			jx.setValue(2, row, model.getValueAt(i, 1));
			jx.setValue(3, row, model.getValueAt(i, 2));
			jx.setValue(4, row, model.getValueAt(i, 3));
			jx.setValue(5, row, model.getValueAt(i, 4));
			jx.setValue(6, row, model.getValueAt(i, 5));
			jx.setValue(7, row, model.getValueAt(i, 6));
			jx.setValue(8, row, model.getValueAt(i, 7));
			jx.setValue(9, row, model.getValueAt(i, 8));
			jx.setValue(10, row, model.getValueAt(i, 9));
			row++;
		}
		jx.removeRow(row);
		jx.openWorkbook();
		return;
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutput;
    private javax.swing.JButton closeButton;
    private javax.swing.ButtonGroup comingCycleGroup;
    private javax.swing.ButtonGroup customerCategoryGroup;
    private javax.swing.ButtonGroup customerGroup;
    private com.geobeck.swing.JTableEx customersTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mailButton;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JButton postcardButton;
    private javax.swing.JLabel productDivisionLabel;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton sealButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JLabel shopLabel2;
    private javax.swing.JLabel targetPeriod;
    private com.geobeck.swing.JTableEx totalTable;
    private javax.swing.JLabel txtTargetType;
    // End of variables declaration//GEN-END:variables

	private void setKeyListener() {
	}

	/**
	 * 初期化処理を行う。
	 */
	private void init() {
		SwingUtil.setJTableHeaderRenderer(customersTable, SystemInfo.getTableHeaderRenderer());
		this.customersTable.setDefaultRenderer(Object.class, new TableCellRenderer());
		SwingUtil.setJTableHeaderRenderer(totalTable, SystemInfo.getTableHeaderRenderer());
		totalTable.setRowHeight(30);
	}

	/**
	 * 再来予測分析テーブル用のTableCellRenderer
	 */
	public class TableCellRenderer extends SelectTableCellRenderer {

		/**
		 * Creates a new instance of TableCellRenderer
		 */
		public TableCellRenderer() {
			super();
		}

		/**
		 * テーブルセルレンダリングを返します。
		 *
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTable table, Object value,
				boolean isSelected, boolean hasFocus, int row, int column) {

			super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
			switch (column) {
				default:
					super.setHorizontalAlignment(SwingConstants.CENTER);
					break;
			}
			return this;
		}

	}

	/**
	 * ユーザ検索ボタンを取得する
	 */
	private JButton getUserSearchButton(final Integer customerID) {
		JButton searchButton = new JButton();
		searchButton.setBorderPainted(false);
		searchButton.setContentAreaFilled(false);
		searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
		searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
		searchButton.setSize(48, 25);
		searchButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				DefaultTableModel model = (DefaultTableModel) customersTable.getModel();

				MstCustomerPanel mcp = null;

				try {

					setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
					mcp = new MstCustomerPanel(customerID, true, true);
					SwingUtil.openAnchorDialog(parentFrame, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);

				} finally {
					setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
				}

				mcp = null;
			}
		});
		return searchButton;
	}

	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth() {
		//列の幅を設定する

		customersTable.getColumnModel().getColumn(0).setPreferredWidth(30); //顧客情報ボタン
		customersTable.getColumnModel().getColumn(1).setPreferredWidth(48); //顧客No.       
		customersTable.getColumnModel().getColumn(2).setPreferredWidth(78); //氏名.
		customersTable.getColumnModel().getColumn(3).setPreferredWidth(50); //前回来店日       
		customersTable.getColumnModel().getColumn(4).setPreferredWidth(78); //担当者
		customersTable.getColumnModel().getColumn(5).setPreferredWidth(18); //指名
		customersTable.getColumnModel().getColumn(6).setPreferredWidth(38); //来店回数
		customersTable.getColumnModel().getColumn(7).setPreferredWidth(52); //電話番号 
		customersTable.getColumnModel().getColumn(8).setPreferredWidth(52); //携帯番号
		customersTable.getColumnModel().getColumn(9).setPreferredWidth(18); //メール送信
		customersTable.getColumnModel().getColumn(10).setPreferredWidth(18); //送信対象
	}

	public long getSelectedRow() {
		return selectedRow;
	}

	public void setSelectedRow(long selectedRow) {
		this.selectedRow = selectedRow;
	}

	public Object getTarget() {
		return target;
	}

	public void setTarget(Object target) {
		this.target = target;
	}

	public String getStaffName() {
		return staffName;
	}

	public void setStaffName(String staffName) {
		this.staffName = staffName;
	}

	public String getTargetPeriodStartDate() {
		return targetPeriodStartDate;
	}

	public void setTargetPeriodStartDate(String targetPeriodStartDate) {
		this.targetPeriodStartDate = targetPeriodStartDate;
	}

	public String getTargetPeriodEndDate() {
		return targetPeriodEndDate;
	}

	public void setTargetPeriodEndDate(String targetPeriodEndDate) {
		this.targetPeriodEndDate = targetPeriodEndDate;
	}

	public String getTaxName() {
		return taxName;
	}

	public void setTaxName(String taxName) {
		this.taxName = taxName;
	}

	public String getProductDivisionName() {
		return productDivisionName;
	}

	public void setProductDivisionName(String productDivisionName) {
		this.productDivisionName = productDivisionName;
	}

	public String getProductDivisionLabelName() {
		return productDivisionLabelName;
	}

	public void setProductDivisionLabelName(String productDivisionLabelName) {
		this.productDivisionLabelName = productDivisionLabelName;
	}

	public long getLimitCount() {
		return limitCount;
	}

	public void setLimitCount(long limitCount) {
		this.limitCount = limitCount;
	}

	public String getWhereCondition() {
		return whereCondition;
	}

	public void setWhereCondition(String whereCondition) {
		this.whereCondition = whereCondition;
	}

	public String getFmType() {
		return fmType;
	}

	public void setFmType(String fmType) {
		this.fmType = fmType;
	}

	public String getFvalue() {
		return fvalue;
	}

	public void setFvalue(String fvalue) {
		this.fvalue = fvalue;
	}

	public String getMvalue() {
		return mvalue;
	}

	public void setMvalue(String mvalue) {
		this.mvalue = mvalue;
	}

}
