/*
 * BusinessReportPanel.java
 *
 * Created on 2006/10/19, 10:39
 */

package com.geobeck.sosia.pos.hair.report;

import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.text.*;
import org.apache.commons.lang.math.NumberUtils;

import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.report.bean.*;
import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.util.*;

/**
 *
 * @author  katagiri
 */
public class ResponseRepeatAnalyzetPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private MstStaffs staffs = null;
        private boolean isLoading = false;
	
	/** Creates new form BusinessReportPanel */
	public ResponseRepeatAnalyzetPanel()
	{
                isLoading = true;
                
		initComponents();
		addMouseCursorChange();
		this.setSize(518, 282);
		this.setPath("反響分折");
		this.setTitle("反響リピート分析");
		this.setKeyListener();
		SystemInfo.initGroupShopComponents(target, 3);
                initYearCombo(cmbTargetYear, Calendar.getInstance().get(Calendar.YEAR));
                cmbTargetMonth.setSelectedIndex(Calendar.getInstance().get(Calendar.MONTH));
                changeTargetDate();
                isLoading = false;
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        countTypeGroup = new javax.swing.ButtonGroup();
        techClassTypeGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        target = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        cmbTargetYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
            cmbTargetYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));
    lblTargetPeriod8 = new javax.swing.JLabel();
    lblTargetPeriod7 = new javax.swing.JLabel();
    cmbTargetMonth = new javax.swing.JComboBox();
    lblTargetPeriod = new javax.swing.JLabel();
    lblTargetPeriod1 = new javax.swing.JLabel();
    cmbReappearanceSpan = new javax.swing.JComboBox();
    lblTargetPeriod3 = new javax.swing.JLabel();
    lblTargetDate = new javax.swing.JLabel();
    lblTargetPeriod4 = new javax.swing.JLabel();
    txtFixedCount = new com.geobeck.swing.JFormattedTextFieldEx(
        FormatterCreator.createNumberFormatter(2, 2, 99));
    lblTargetPeriod5 = new javax.swing.JLabel();
    lblTargetPeriod6 = new javax.swing.JLabel();
    rdoTotalCount = new javax.swing.JRadioButton();
    rdoSimpleCount = new javax.swing.JRadioButton();
    targetLabel = new javax.swing.JLabel();
    btnOutputExcel = new javax.swing.JButton();

    setFocusCycleRoot(true);

    jPanel1.setOpaque(false);
    jPanel1.setOpaque(false);

    target.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            targetActionPerformed(evt);
        }
    });

    cmbTargetYear.setEditable(true);
    cmbTargetYear.setMaximumRowCount(12);
    cmbTargetYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    lblTargetPeriod8.setText("月");

    lblTargetPeriod7.setText("年");

    cmbTargetMonth.setMaximumRowCount(12);
    cmbTargetMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    cmbTargetMonth.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cmbTargetMonthItemStateChanged(evt);
        }
    });

    lblTargetPeriod.setText("集計期間");

    lblTargetPeriod1.setText("再来算出期間");

    cmbReappearanceSpan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1ヶ月", "45日", "2ヶ月", "3ヶ月", "4ヶ月", "5ヶ月", "6ヶ月" }));
    cmbReappearanceSpan.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cmbReappearanceSpanItemStateChanged(evt);
        }
    });

    lblTargetPeriod3.setText("評価期間");

    lblTargetPeriod4.setText("固定回数");

    txtFixedCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txtFixedCount.setText("3");
    txtFixedCount.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtFixedCountActionPerformed(evt);
        }
    });
    txtFixedCount.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            txtFixedCountFocusLost(evt);
        }
    });

    lblTargetPeriod5.setText("回以上");

    lblTargetPeriod6.setText("人数条件");

    countTypeGroup.add(rdoTotalCount);
    rdoTotalCount.setSelected(true);
    rdoTotalCount.setText("延べ客数");
    rdoTotalCount.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoTotalCount.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoTotalCount.setOpaque(false);

    countTypeGroup.add(rdoSimpleCount);
    rdoSimpleCount.setText("純客数");
    rdoSimpleCount.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoSimpleCount.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoSimpleCount.setOpaque(false);

    targetLabel.setText("対象");

    btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnOutputExcel.setBorderPainted(false);
    btnOutputExcel.setContentAreaFilled(false);
    btnOutputExcel.setFocusCycleRoot(true);
    btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOutputExcelActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(lblTargetPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(33, 33, 33))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                            .add(targetLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(cmbTargetYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(lblTargetPeriod7)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(cmbTargetMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(lblTargetPeriod8))
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(149, 149, 149)
                            .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(jPanel1Layout.createSequentialGroup()
                    .add(lblTargetPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(9, 9, 9)
                    .add(cmbReappearanceSpan, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel1Layout.createSequentialGroup()
                    .add(lblTargetPeriod6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(8, 8, 8)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(txtFixedCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(lblTargetPeriod5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(rdoTotalCount)
                            .add(23, 23, 23)
                            .add(rdoSimpleCount))))
                .add(jPanel1Layout.createSequentialGroup()
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(lblTargetPeriod4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(lblTargetPeriod3))
                    .add(51, 51, 51)
                    .add(lblTargetDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 323, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(205, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(targetLabel))
                .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblTargetPeriod, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(lblTargetPeriod7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(lblTargetPeriod8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbTargetMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbTargetYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblTargetPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbReappearanceSpan, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(lblTargetPeriod3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(lblTargetDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(lblTargetPeriod5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTargetPeriod4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtFixedCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rdoTotalCount, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(rdoSimpleCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(lblTargetPeriod6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    }// </editor-fold>//GEN-END:initComponents

    private void targetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetActionPerformed
        if (isLoading) return;
        changeTargetDate();
    }//GEN-LAST:event_targetActionPerformed

    private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputExcelActionPerformed

        if (!SystemInfo.checkAuthorityPassword(260)) return;
        
        if (inputCheck()) {

            btnOutputExcel.setCursor(null);

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                this.doOutput();

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }

    }//GEN-LAST:event_btnOutputExcelActionPerformed

    private void cmbTargetMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTargetMonthItemStateChanged
         changeTargetDate();       
    }//GEN-LAST:event_cmbTargetMonthItemStateChanged

    private void cmbReappearanceSpanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbReappearanceSpanItemStateChanged
        changeTargetDate();
    }//GEN-LAST:event_cmbReappearanceSpanItemStateChanged

    private void txtFixedCountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFixedCountFocusLost
        // TODO add your handling code here:
        int s = Integer.parseInt(this.txtFixedCount.getText());
        if(s>99)   
        {
            txtFixedCount.setText("99");
        }
        if (s<2)
        {
            txtFixedCount.setText("2");
        }
    }//GEN-LAST:event_txtFixedCountFocusLost

    private void txtFixedCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFixedCountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFixedCountActionPerformed
  
    private void changeTargetDate(){
	
	// 再来期間
	int reappearanceCount = getReappearanceSpan();

	// 集計期間を求める
	Calendar cal = Calendar.getInstance();
	try{
	    cal.set(Calendar.YEAR, Integer.parseInt(this.cmbTargetYear.getSelectedItem().toString()) );
	} catch(Exception e){
	    MessageDialog.showMessageDialog(this,
		MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "対象期間"),
		this.getTitle(),
		JOptionPane.ERROR_MESSAGE);
	    cmbTargetYear.setSelectedItem(Calendar.getInstance().get(Calendar.YEAR));
	    return;                
	}

	cal.set(Calendar.MONTH, Integer.parseInt(cmbTargetMonth.getSelectedItem().toString()) - 1);
	cal.set(Calendar.DAY_OF_MONTH, 1);

	java.util.Date targetDate = null;
	try {
	    targetDate = cal.getTime();
	} catch(Exception e){}

	if(targetDate == null){
	    MessageDialog.showMessageDialog(this,
		MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "対象期間"),
		this.getTitle(),
		JOptionPane.ERROR_MESSAGE);
	    cmbTargetYear.setSelectedItem(Calendar.getInstance().get(Calendar.YEAR));
	    return;
	}
        
	// ○ヶ月前の月初
	Calendar calculationStart = Calendar.getInstance();
	calculationStart.setTime(targetDate);
	if(reappearanceCount == 45){
	    // 45日再来は2ヶ月前の15日
	    calculationStart.add(Calendar.MONTH, -2);
	    calculationStart.set(Calendar.DAY_OF_MONTH, 15);
	} else {
	    // それ以外は○ヶ月前の1日
	    calculationStart.add(Calendar.MONTH, (reappearanceCount * -1));
	    calculationStart.set(Calendar.DAY_OF_MONTH, 1);
	}

	// 再来対象期間
	// 開始日は集計開始日と同じ
	Calendar targetStart = Calendar.getInstance();
	targetStart.setTime(calculationStart.getTime());

	Calendar targetEnd = Calendar.getInstance();
	targetEnd.setTime(targetStart.getTime());
	if (reappearanceCount == 45) {
	    // 45日再来の終了は、翌月の14日
	    targetEnd.add(Calendar.MONTH, 1);
	    targetEnd.set(Calendar.DAY_OF_MONTH, 14);
	} else {
	    // 終了は開始月の月末
	    targetEnd.add(Calendar.MONTH, 1);
	    targetEnd.add(Calendar.DAY_OF_MONTH, -1);
	}

        // 期間設定を締日基準にする
        if (reappearanceCount != 45) {
            this.resetSpan(targetStart, targetEnd);
        }
        
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
	this.lblTargetDate.setText( sdf.format(targetStart.getTime()) + " 〜 " + sdf.format(targetEnd.getTime()) );
    }
    
    /**
     * 再来算出期間を求める
     */
    private int getReappearanceSpan(){
        String textSpan = this.cmbReappearanceSpan.getSelectedItem().toString();
        
        if("1ヶ月".equals(textSpan)){
            return 1;
        } else if("45日".equals(textSpan)){
            return 45;
        } else if("2ヶ月".equals(textSpan)){
            return 2;
        } else if("3ヶ月".equals(textSpan)){
            return 3;
        } else if("4ヶ月".equals(textSpan)){
            return 4;
        } else if("5ヶ月".equals(textSpan)){
            return 5;
        } else {
            return 6;
        }
    }
    
    private void doOutput() {

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

	ReportLogic logic = new ReportLogic();
	ReportParameterBean paramBean = new ReportParameterBean();
	paramBean.setMainReportType(ReportParameterBean.MAIN_REPORT_STAFF);

	//グループ
	if(target.getSelectedItem() instanceof MstGroup) {
	    MstGroup mg = (MstGroup)target.getSelectedItem();
	    paramBean.setTargetName(mg.getGroupName());
	    paramBean.setShopIDList(mg.getShopIDListAll());
	}
	//店舗
	else if(target.getSelectedItem() instanceof MstShop) {
	    MstShop ms = (MstShop)target.getSelectedItem();
	    paramBean.setTargetName(ms.getShopName());
	    paramBean.setShopIDList(ms.getShopID().toString());
	}

	//対象となる店舗が存在しない場合
	if(paramBean.getShopIDList().equals("")) {
		MessageDialog.showMessageDialog(this,
			MessageUtil.getMessage(4001),
			this.getTitle(),
			JOptionPane.ERROR_MESSAGE);
		return;
	}
        // 主担当者
	paramBean.setStaffId(null);
	paramBean.setStaffName("全体");

	// 再来算出期間
	int reappearanceCount = getReappearanceSpan();
	paramBean.setReappearanceCountMessage(this.cmbReappearanceSpan.getSelectedItem().toString());

	// 固定回数
	int fixedCount = 5;
	try {
	    fixedCount = Integer.parseInt(this.txtFixedCount.getText());           
	} catch(NumberFormatException e){
	}
	paramBean.setFixedCount(fixedCount);

	// 人数条件
	String numberCondition = "延べ客数";
	if (this.rdoSimpleCount.isSelected()) {
	    numberCondition = "純客数";
	}
	paramBean.setNumberCondition(numberCondition);
        
	// 集計期間を求める
	Calendar cal = Calendar.getInstance();
	try{
	    cal.set(Calendar.YEAR, Integer.parseInt(this.cmbTargetYear.getSelectedItem().toString()) );
	} catch(Exception e) {
	}

	cal.set(Calendar.MONTH, Integer.parseInt(cmbTargetMonth.getSelectedItem().toString()) - 1);
	cal.set(Calendar.DAY_OF_MONTH, 1);
	java.util.Date targetDate = cal.getTime();

	// ○ヶ月前の月初
	Calendar calculationStart = Calendar.getInstance();
	calculationStart.setTime(targetDate);
	if (reappearanceCount == 45) {
	    // 45日再来は2ヶ月前の15日
	    calculationStart.add(Calendar.MONTH, -2);
	    calculationStart.set(Calendar.DAY_OF_MONTH, 15);
	} else {
	    // それ以外は○ヶ月前の1日
	    calculationStart.add(Calendar.MONTH, (reappearanceCount * -1));
	    calculationStart.set(Calendar.DAY_OF_MONTH, 1);
	}

	// 選んだ月の月末
	Calendar calculationEnd = Calendar.getInstance();
	calculationEnd.set(Integer.parseInt(this.cmbTargetYear.getSelectedItem().toString()), Integer.parseInt(cmbTargetMonth.getSelectedItem().toString()), 1 );// 選択月の翌月にして
	calculationEnd.add(Calendar.DAY_OF_MONTH, -1); // １日戻す

	// 再来対象期間
	// 開始日は集計開始日と同じ
	Calendar targetStart = Calendar.getInstance();
	targetStart.setTime(calculationStart.getTime());

	Calendar targetEnd = Calendar.getInstance();
	targetEnd.setTime(calculationStart.getTime());
	if(reappearanceCount == 45){
	    // 45日再来の終了は、翌月の14日
	    targetEnd.add(Calendar.MONTH, 1);
	    targetEnd.set(Calendar.DAY_OF_MONTH, 14);
	} else {
	    // 終了は開始月の月末
	    targetEnd.add(Calendar.MONTH, 1);         // 翌月にして
	    targetEnd.add(Calendar.DAY_OF_MONTH, -1); // １日戻す
	}

        // 期間設定を締日基準にする
        if (reappearanceCount != 45) {
            this.resetSpan(targetStart, targetEnd);
            this.resetSpan(calculationStart, calculationEnd);
            calculationStart.setTime(targetStart.getTime());
        }
        
	paramBean.setTargetStartDate(sdf.format(targetStart.getTime()));
	paramBean.setTargetEndDate(sdf.format(targetEnd.getTime()));
	paramBean.setTargetStartDateObj(targetStart.getTime());
	paramBean.setTargetEndDateObj(targetEnd.getTime());

	paramBean.setCalculationStartDate(sdf.format(calculationStart.getTime()));
	paramBean.setCalculationEndDate(sdf.format(calculationEnd.getTime()));
	paramBean.setCalculationStartDateObj(calculationStart.getTime());
	paramBean.setCalculationEndDateObj(calculationEnd.getTime());

	paramBean.setNumberCondition(numberCondition);

	//出力処理
	boolean logicResult = true;
	try {
            
            logicResult = logic.outResponseRepeatAnalyzetPanel(paramBean);
            
	} catch (Exception e) {
            
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(1099),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);

            return;
	}
        
	// エラー時
	if (!logicResult) {
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(4001),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
	}	
    }
    	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JComboBox cmbReappearanceSpan;
    private javax.swing.JComboBox cmbTargetMonth;
    private javax.swing.JComboBox cmbTargetYear;
    private javax.swing.ButtonGroup countTypeGroup;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTargetDate;
    private javax.swing.JLabel lblTargetPeriod;
    private javax.swing.JLabel lblTargetPeriod1;
    private javax.swing.JLabel lblTargetPeriod3;
    private javax.swing.JLabel lblTargetPeriod4;
    private javax.swing.JLabel lblTargetPeriod5;
    private javax.swing.JLabel lblTargetPeriod6;
    private javax.swing.JLabel lblTargetPeriod7;
    private javax.swing.JLabel lblTargetPeriod8;
    private javax.swing.JRadioButton rdoSimpleCount;
    private javax.swing.JRadioButton rdoTotalCount;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel target;
    private javax.swing.JLabel targetLabel;
    private javax.swing.ButtonGroup techClassTypeGroup;
    private javax.swing.JTextField txtFixedCount;
    // End of variables declaration//GEN-END:variables
	
	private	BusinessReportFocusTraversalPolicy	ftp	=
			new BusinessReportFocusTraversalPolicy();
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
            SystemInfo.addMouseCursorChange(btnOutputExcel);
	}
	
	private void setKeyListener()
	{
            cmbTargetYear.addKeyListener(SystemInfo.getMoveNextField());
            cmbTargetMonth.addKeyListener(SystemInfo.getMoveNextField());
            cmbTargetMonth.addFocusListener(SystemInfo.getSelectText());
            cmbReappearanceSpan.addKeyListener(SystemInfo.getMoveNextField());
            cmbReappearanceSpan.addFocusListener(SystemInfo.getSelectText());
            txtFixedCount.addKeyListener(SystemInfo.getMoveNextField());
            txtFixedCount.addFocusListener(SystemInfo.getSelectText());
            rdoTotalCount.addKeyListener(SystemInfo.getMoveNextField());  
            rdoSimpleCount.addKeyListener(SystemInfo.getMoveNextField());
	}
	
	
	/**
	 * 業務報告画面用FocusTraversalPolicyを取得する。
	 * @return  業務報告画面用FocusTraversalPolicy
	 */
	public BusinessReportFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	
	/**
	 * 業務報告画面用FocusTraversalPolicy
	 */
	private class BusinessReportFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponBusinessReportFocusTraversalPolicy。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(target) )
                        {
				return cmbTargetYear;
			}
			else if (aComponent.equals(cmbTargetYear.getComponent(2)))
			{
				return cmbTargetMonth;
			}
			else if (aComponent.equals(cmbTargetMonth))
			{
				return cmbReappearanceSpan;
			}
			else if (aComponent.equals(cmbReappearanceSpan))
			{
				return txtFixedCount;
			} else if(aComponent.equals(txtFixedCount)){
                            if(rdoTotalCount.isSelected()){
                                    return rdoTotalCount;
                            }
                            return rdoSimpleCount;   
                        }
                    
			return this.getStartComponent();
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
                       return this.getStartComponent();
			
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return this.getStartComponent();
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return rdoSimpleCount;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return this.getStartComponent();
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return this.getStartComponent();
		}
                 private Component getStartComponent(){
                    if(target.getItemCount() == 1)
                    {
                        return cmbTargetYear;
                    }
                    return target ;
                }
		
	}
        
        private void resetSpan(Calendar calStart, Calendar calEnd) {

            int cutoffDay = 0;

            if (target.getSelectedItem() instanceof MstShop) {
                MstShop ms = (MstShop)target.getSelectedItem();
                cutoffDay = ms.getCutoffDay();
            } else {
                cutoffDay = SystemInfo.getAccountSetting().getCutoffDay();
            }

            if (cutoffDay == 31) return;

            Calendar calTo = Calendar.getInstance();
            calTo.setTime(calEnd.getTime());

            if (calTo.getActualMaximum(Calendar.DATE) <= cutoffDay) {
                calTo.set(Calendar.DAY_OF_MONTH, calTo.getActualMaximum(Calendar.DATE));
            } else {
                calTo.set(Calendar.DAY_OF_MONTH, cutoffDay);
            }

            Calendar calFrom = (Calendar)calTo.clone();
            calFrom.add(Calendar.MONTH, -1);
            calFrom.add(Calendar.DAY_OF_MONTH, 1);

            calStart.setTime(calFrom.getTime());
            calEnd.setTime(calTo.getTime());
        }

        private void initYearCombo(final JComboBox cmb, int nowYear) {
            
            cmb.removeAllItems();

            int y = Calendar.getInstance().get(Calendar.YEAR);
            for (int i = 0; i < 5; i++) {
                cmb.addItem(String.valueOf(y - i));
            }
            cmb.setSelectedItem(nowYear);
            cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusGained(java.awt.event.FocusEvent evt) {
                    ((JTextField)cmb.getEditor().getEditorComponent()).selectAll();
                }
            });
        }
        
    private boolean inputCheck()
    {
        NumberUtils numUtil = new NumberUtils();
        if(!numUtil.isNumber(this.cmbTargetYear.getSelectedItem().toString())) {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "対象年"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            Calendar cdr = Calendar.getInstance();
            this.cmbTargetYear.requestFocusInWindow();
            return false;
        }

        return true;
    }
        
}
