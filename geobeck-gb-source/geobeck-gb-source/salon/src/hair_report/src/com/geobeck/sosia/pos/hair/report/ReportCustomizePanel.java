/*
 * ReportCustomizePanel.java
 *
 * Created on 2022/05/02, 13:00
 */
package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.hair.report.logic.EstheticManagementLogic; //Ａ・エステ管理_グラフ（全店＆各店スタッフ）
import com.geobeck.sosia.pos.hair.report.logic.SalesManagementLogic; //Ｂ・売上管理_グラフ（全店＆各店スタッフ）
import com.geobeck.sosia.pos.hair.report.logic.ReservationManagementLogic; //Ｃ・予約管理_グラフ（全店＆各店スタッフ）
import com.geobeck.sosia.pos.hair.report.logic.PurchaseManagementLogic; //Ｄ・購買管理_グラフ（全店＆各店スタッフ）
import com.geobeck.sosia.pos.hair.report.logic.ProductPurchaseByStaffLogic; //Ｅ・スタッフ別商品購買内訳
import com.geobeck.sosia.pos.hair.report.logic.EstheticTransitionInWeekLogic; //Ｆ・週で見るエステ推移
import com.geobeck.sosia.pos.hair.report.logic.WeeklyPurchasingLogic; //Ｇ・週で見る購買推移
import com.geobeck.sosia.pos.hair.report.logic.ReservationTransitionByWeekLogic; //Ｈ・週で見る予約推移

import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.*;
import javax.swing.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.company.MstGroup;
import com.geobeck.sosia.pos.util.*;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.text.JTextComponent;
import javax.swing.text.PlainDocument;


/**
 *
 * @author IVS
 */
public class ReportCustomizePanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private CusContractHistoryReportFocusTraversalPolicy ftp =
            new CusContractHistoryReportFocusTraversalPolicy();

    /**
     * Creates new form ReportCustomizePanel
     */
    public ReportCustomizePanel() {

        initComponents();
        this.setSize(958, 750);
        this.setPath("カスタム帳票");
        this.setTitle("カスタム帳票");
        this.setKeyListener();
        addMouseCursorChange();
        init();
    }

    private void setKeyListener() {
        rdoSales.addKeyListener(SystemInfo.getMoveNextField());
        rdoEsthetic.addKeyListener(SystemInfo.getMoveNextField());
    }
    
    private void addMouseCursorChange()
    {
	    SystemInfo.addMouseCursorChange(btnExcelReport);
            SystemInfo.addMouseCursorChange(btnExcelReport1);
    }

    /**
     * init form
     */
    private void init() {

        Calendar cal = Calendar.getInstance();

        //期間を初期設定する    
        Calendar cdr = Calendar.getInstance();
        cdr.setTime(new Date());
        int nowYear = cdr.get(Calendar.YEAR);
        int nowMonth = cdr.get(Calendar.MONTH);

        this.initYearCombo(startYear, nowYear);
        this.initYearCombo(startYear1, nowYear);
        
        startYear.setSelectedItem(String.valueOf(nowYear-1));
        startMonth.setSelectedIndex(nowMonth);
        startMonth1.setSelectedIndex(nowMonth);

        SystemInfo.initGroupShopComponents(shop, 2);
    }
    
    /**
     * int data for year combobx
     *
     * @param cmb
     * @param nowYear
     */
    private void initYearCombo(final JComboBox cmb, int nowYear) {
        cmb.removeAllItems();

        int y = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = 0; i < 5; i++) {
            cmb.addItem(String.valueOf(y - i));
        }
        cmb.setSelectedItem(String.valueOf(nowYear));
        cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ((JTextField) cmb.getEditor().getEditorComponent()).selectAll();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportTypeGroup = new javax.swing.ButtonGroup();
        taxGroup = new javax.swing.ButtonGroup();
        countGroup = new javax.swing.ButtonGroup();
        customerGroup = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        typeGroup = new javax.swing.ButtonGroup();
        aggregationGroup = new javax.swing.ButtonGroup();
        timeGroup = new javax.swing.ButtonGroup();
        outputGroup = new javax.swing.ButtonGroup();
        taxGroup2 = new javax.swing.ButtonGroup();
        aggregateGroup = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        btnPerformance = new javax.swing.ButtonGroup();
        reportPanel = new javax.swing.JPanel();
        btnExcelReport = new javax.swing.JButton();
        rdoEsthetic = new javax.swing.JRadioButton();
        rdoSales = new javax.swing.JRadioButton();
        rdoReservation = new javax.swing.JRadioButton();
        rdoPurchase = new javax.swing.JRadioButton();
        rdoStaffPurchase = new javax.swing.JRadioButton();
        lblTargetDate = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        startMonth = new javax.swing.JComboBox();
        startYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
            startYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));
    lblTargetDate2 = new javax.swing.JLabel();
    jLabel9 = new javax.swing.JLabel();
    lblTargetDate1 = new javax.swing.JLabel();
    rdoStaffByShop = new javax.swing.JRadioButton();
    rdoAllShop = new javax.swing.JRadioButton();
    shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
    reportPanel1 = new javax.swing.JPanel();
    btnExcelReport1 = new javax.swing.JButton();
    rdoEstheticInWeek = new javax.swing.JRadioButton();
    rdoPurchaseInWeek = new javax.swing.JRadioButton();
    rdoReservationInWeek = new javax.swing.JRadioButton();
    jLabel7 = new javax.swing.JLabel();
    jLabel8 = new javax.swing.JLabel();
    startMonth1 = new javax.swing.JComboBox();
    startYear1 = new javax.swing.JComboBox();
    ((PlainDocument)((JTextComponent)     startYear1.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(     new CustomFilter(4, CustomFilter.NUMBER));
    lblTargetDate3 = new javax.swing.JLabel();
    lblTargetDate4 = new javax.swing.JLabel();
    lblTargetDate5 = new javax.swing.JLabel();
    rdoByStaff = new javax.swing.JRadioButton();
    rdoByShop = new javax.swing.JRadioButton();

    setFocusCycleRoot(true);

    reportPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    reportPanel.setOpaque(false);
    reportPanel.setPreferredSize(new java.awt.Dimension(780, 155));
    reportPanel.setRequestFocusEnabled(false);

    btnExcelReport.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnExcelReport.setBorderPainted(false);
    btnExcelReport.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnExcelReport.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnExcelReportActionPerformed(evt);
        }
    });

    buttonGroup1.add(rdoEsthetic);
    rdoEsthetic.setSelected(true);
    rdoEsthetic.setText("エステ管理");
    rdoEsthetic.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoEsthetic.setContentAreaFilled(false);
    rdoEsthetic.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoEsthetic.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdoEstheticActionPerformed(evt);
        }
    });

    buttonGroup1.add(rdoSales);
    rdoSales.setText("売上管理");
    rdoSales.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoSales.setContentAreaFilled(false);
    rdoSales.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoSales.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdoSalesActionPerformed(evt);
        }
    });

    buttonGroup1.add(rdoReservation);
    rdoReservation.setText("予約管理");
    rdoReservation.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoReservation.setContentAreaFilled(false);
    rdoReservation.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoReservation.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdoReservationActionPerformed(evt);
        }
    });

    buttonGroup1.add(rdoPurchase);
    rdoPurchase.setText("購買管理");
    rdoPurchase.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoPurchase.setContentAreaFilled(false);
    rdoPurchase.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoPurchase.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdoPurchaseActionPerformed(evt);
        }
    });

    buttonGroup1.add(rdoStaffPurchase);
    rdoStaffPurchase.setText("スタッフ別商品購買内訳");
    rdoStaffPurchase.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoStaffPurchase.setContentAreaFilled(false);
    rdoStaffPurchase.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoStaffPurchase.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdoStaffPurchaseActionPerformed(evt);
        }
    });

    lblTargetDate.setText("出力帳票");
    lblTargetDate.setFocusCycleRoot(true);

    jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel5.setText("年");

    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel6.setText("月");

    startMonth.setMaximumRowCount(12);
    startMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    startMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    startMonth.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            startMonthActionPerformed(evt);
        }
    });

    startYear.setEditable(true);
    startYear.setMaximumRowCount(12);
    startYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    startYear.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            startYearActionPerformed(evt);
        }
    });

    lblTargetDate2.setText("対象基準月");
    lblTargetDate2.setFocusCycleRoot(true);

    jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel9.setText("(設定した月を起点として12か月分を表示します)");

    lblTargetDate1.setText("出力対象");
    lblTargetDate1.setFocusCycleRoot(true);

    buttonGroup2.add(rdoStaffByShop);
    rdoStaffByShop.setSelected(true);
    rdoStaffByShop.setText("店舗別スタッフ出力");
    rdoStaffByShop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoStaffByShop.setContentAreaFilled(false);
    rdoStaffByShop.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoStaffByShop.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdoStaffByShopActionPerformed(evt);
        }
    });

    buttonGroup2.add(rdoAllShop);
    rdoAllShop.setText("全店舗リスト出力");
    rdoAllShop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoAllShop.setContentAreaFilled(false);
    rdoAllShop.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoAllShop.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdoAllShopActionPerformed(evt);
        }
    });

    shop.setMaximumRowCount(12);
    shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    shop.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            shopActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout reportPanelLayout = new org.jdesktop.layout.GroupLayout(reportPanel);
    reportPanel.setLayout(reportPanelLayout);
    reportPanelLayout.setHorizontalGroup(
        reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(reportPanelLayout.createSequentialGroup()
            .add(5, 5, 5)
            .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                .add(lblTargetDate1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(org.jdesktop.layout.GroupLayout.LEADING, lblTargetDate2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                .add(org.jdesktop.layout.GroupLayout.LEADING, lblTargetDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(rdoAllShop)
                .add(reportPanelLayout.createSequentialGroup()
                    .add(startYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 0, 0)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 0, 0)
                    .add(startMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(0, 0, 0)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(reportPanelLayout.createSequentialGroup()
                    .add(rdoStaffByShop)
                    .add(18, 18, 18)
                    .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(reportPanelLayout.createSequentialGroup()
                    .add(rdoEsthetic)
                    .add(18, 18, 18)
                    .add(rdoSales, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(rdoReservation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(rdoPurchase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(rdoStaffPurchase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 149, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(62, 62, 62)
                    .add(btnExcelReport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .add(85, 85, 85))
    );
    reportPanelLayout.setVerticalGroup(
        reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(reportPanelLayout.createSequentialGroup()
            .add(15, 15, 15)
            .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rdoEsthetic)
                    .add(rdoSales)
                    .add(rdoReservation)
                    .add(lblTargetDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoPurchase)
                    .add(rdoStaffPurchase))
                .add(btnExcelReport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(startYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTargetDate2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(startMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .add(18, 18, 18)
            .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(reportPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTargetDate1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoStaffByShop))
                .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(rdoAllShop)
            .add(13, 13, 13))
    );

    reportPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    reportPanel1.setOpaque(false);
    reportPanel1.setPreferredSize(new java.awt.Dimension(780, 148));

    btnExcelReport1.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnExcelReport1.setBorderPainted(false);
    btnExcelReport1.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnExcelReport1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnExcelReport1ActionPerformed(evt);
        }
    });

    buttonGroup3.add(rdoEstheticInWeek);
    rdoEstheticInWeek.setSelected(true);
    rdoEstheticInWeek.setText("週で見るエステ推移");
    rdoEstheticInWeek.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoEstheticInWeek.setContentAreaFilled(false);
    rdoEstheticInWeek.setMargin(new java.awt.Insets(0, 0, 0, 0));

    buttonGroup3.add(rdoPurchaseInWeek);
    rdoPurchaseInWeek.setText("週で見る購買推移");
    rdoPurchaseInWeek.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoPurchaseInWeek.setContentAreaFilled(false);
    rdoPurchaseInWeek.setMargin(new java.awt.Insets(0, 0, 0, 0));

    buttonGroup3.add(rdoReservationInWeek);
    rdoReservationInWeek.setText("週で見る予約推移");
    rdoReservationInWeek.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoReservationInWeek.setContentAreaFilled(false);
    rdoReservationInWeek.setMargin(new java.awt.Insets(0, 0, 0, 0));

    jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel7.setText("年");

    jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel8.setText("月");

    startMonth1.setMaximumRowCount(12);
    startMonth1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    startMonth1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    startMonth1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            startMonth1ActionPerformed(evt);
        }
    });

    startYear1.setEditable(true);
    startYear1.setMaximumRowCount(12);
    startYear1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    startYear1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            startYear1ActionPerformed(evt);
        }
    });

    lblTargetDate3.setText("出力帳票");
    lblTargetDate3.setFocusCycleRoot(true);

    lblTargetDate4.setText("対象月");
    lblTargetDate4.setFocusCycleRoot(true);

    lblTargetDate5.setText("出力対象");
    lblTargetDate5.setFocusCycleRoot(true);

    buttonGroup4.add(rdoByStaff);
    rdoByStaff.setSelected(true);
    rdoByStaff.setText("スタッフ別");
    rdoByStaff.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoByStaff.setContentAreaFilled(false);
    rdoByStaff.setMargin(new java.awt.Insets(0, 0, 0, 0));

    buttonGroup4.add(rdoByShop);
    rdoByShop.setText("店舗別");
    rdoByShop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoByShop.setContentAreaFilled(false);
    rdoByShop.setMargin(new java.awt.Insets(0, 0, 0, 0));

    org.jdesktop.layout.GroupLayout reportPanel1Layout = new org.jdesktop.layout.GroupLayout(reportPanel1);
    reportPanel1.setLayout(reportPanel1Layout);
    reportPanel1Layout.setHorizontalGroup(
        reportPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(reportPanel1Layout.createSequentialGroup()
            .add(5, 5, 5)
            .add(reportPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(reportPanel1Layout.createSequentialGroup()
                    .add(reportPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(lblTargetDate4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(lblTargetDate3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(reportPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(reportPanel1Layout.createSequentialGroup()
                            .add(startYear1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(0, 0, 0)
                            .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(0, 0, 0)
                            .add(startMonth1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(0, 0, 0)
                            .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(reportPanel1Layout.createSequentialGroup()
                            .add(rdoEstheticInWeek, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 129, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(18, 18, 18)
                            .add(rdoPurchaseInWeek, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(18, 18, 18)
                            .add(rdoReservationInWeek, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(134, 134, 134)
                            .add(btnExcelReport1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(reportPanel1Layout.createSequentialGroup()
                    .add(lblTargetDate5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(rdoByStaff)
                    .add(29, 29, 29)
                    .add(rdoByShop)))
            .add(85, 85, 85))
    );
    reportPanel1Layout.setVerticalGroup(
        reportPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(reportPanel1Layout.createSequentialGroup()
            .add(15, 15, 15)
            .add(reportPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(reportPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTargetDate3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoEstheticInWeek, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoPurchaseInWeek)
                    .add(rdoReservationInWeek))
                .add(btnExcelReport1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(reportPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(reportPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(startYear1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTargetDate4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(startMonth1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(reportPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblTargetDate5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(rdoByStaff)
                .add(rdoByShop))
            .addContainerGap(23, Short.MAX_VALUE))
    );

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                .add(reportPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 806, Short.MAX_VALUE)
                .add(reportPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 806, Short.MAX_VALUE))
            .addContainerGap(19, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(reportPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(27, 27, 27)
            .add(reportPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(52, Short.MAX_VALUE))
    );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 期間で絞って詳細な売上のEXCELボタンを押下。
     *
     * @param evt
     */
    private void btnExcelReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelReportActionPerformed

        btnExcelReport.setCursor(null);

        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            ReportParameterBean paramBean = new ReportParameterBean();

            boolean logicResult = true;

            try {

                if (startYear.getSelectedItem() == null || startYear.getSelectedItem().toString().length() == 0
                    || (rdoStaffByShop.isSelected() &&  shop.getSelectedItem().toString().length() == 0)) {
                    MessageDialog.showMessageDialog(this,
                            "正しい条件を設定してください",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(rdoEsthetic.isSelected()){
                    reportEsthetic(); //Ａ・エステ管理_グラフ（全店＆各店スタッフ）
                }else if(rdoSales.isSelected()){
                    reportSalesManagement(); //Ｂ・売上管理_グラフ（全店＆各店スタッフ）
                }else if(rdoReservation.isSelected()){
                    reportReservationManagement(); //Ｃ・予約管理_グラフ（全店＆各店スタッフ）
                }else if(rdoPurchase.isSelected()){
                    reportPurchaseManagement(); //Ｄ・購買管理_グラフ（全店＆各店スタッフ）
                }else if(rdoStaffPurchase.isSelected()){
                    reportProductPurchaseByStaffLogic(); //Ｅ・スタッフ別商品購買内訳
                }
            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(1099),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // エラー時
            if (!logicResult) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            }
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnExcelReportActionPerformed

    private void startMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMonthActionPerformed

    }//GEN-LAST:event_startMonthActionPerformed

    private void startYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startYearActionPerformed

    }//GEN-LAST:event_startYearActionPerformed

    private void btnExcelReport1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelReport1ActionPerformed
        btnExcelReport1.setCursor(null);

        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            ReportParameterBean paramBean = new ReportParameterBean();

            boolean logicResult = true;

            try {

                if (startYear1.getSelectedItem() == null || startYear1.getSelectedItem().toString().length() == 0) {
                    MessageDialog.showMessageDialog(this,
                            "正しい条件を設定してください",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                int year = Integer.parseInt(startYear1.getSelectedItem().toString());
                int month = startMonth1.getSelectedIndex();

                //Ｆ・週で見るエステ推移
                if(rdoEstheticInWeek.isSelected()){
                    reportEstheticTransitionInWeek(year, Integer.parseInt(startMonth1.getSelectedItem().toString()));
                }

                //Ｇ・週で見る購買推移
                if (rdoPurchaseInWeek.isSelected()) {
                    reportWeeklyPurchasing(year, month);
                }

                //Ｈ・週で見る予約推移
                if (rdoReservationInWeek.isSelected()) {
                    reportReservationTransitionByWeek(year, month);
                }

            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(1099),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // エラー時
            if (!logicResult) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            }
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnExcelReport1ActionPerformed

    private void startMonth1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMonth1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startMonth1ActionPerformed

    private void startYear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startYear1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startYear1ActionPerformed

    private void rdoEstheticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoEstheticActionPerformed
        this.rdoAllShop.setEnabled(true);
        
    }//GEN-LAST:event_rdoEstheticActionPerformed

    private void rdoStaffByShopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoStaffByShopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoStaffByShopActionPerformed

    private void rdoAllShopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoAllShopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoAllShopActionPerformed

    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shopActionPerformed

    private void rdoStaffPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoStaffPurchaseActionPerformed
        this.rdoAllShop.setEnabled(false);
        this.rdoStaffByShop.setSelected(true);
    }//GEN-LAST:event_rdoStaffPurchaseActionPerformed

    private void rdoSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSalesActionPerformed
        this.rdoAllShop.setEnabled(true);
    }//GEN-LAST:event_rdoSalesActionPerformed

    private void rdoReservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoReservationActionPerformed
        this.rdoAllShop.setEnabled(true);
    }//GEN-LAST:event_rdoReservationActionPerformed

    private void rdoPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoPurchaseActionPerformed
        this.rdoAllShop.setEnabled(true);
    }//GEN-LAST:event_rdoPurchaseActionPerformed

    /*
    Ａ・エステ管理_グラフ（全店＆各店スタッフ）
    */
    private boolean reportEsthetic() {
        String shopIDList       = "";
        String targetStores     = "";
        EstheticManagementLogic.OutputType outputType   = null;
         //グループ
        if(rdoAllShop.isSelected()) {
            MstGroup	mg	=	SystemInfo.getGroup();
            
            shopIDList      = mg.getShopIDListAll();
            targetStores    = "全店舗出力";
            outputType      = EstheticManagementLogic.OutputType.SHOP;
        }
        //店舗
        else if(rdoStaffByShop.isSelected()) {
            MstShop ms	=   (MstShop)shop.getSelectedItem();
            shopIDList  =   ms.getShopID().toString();
            targetStores    = ms.getShopName();
            outputType  =   EstheticManagementLogic.OutputType.STAFF;
        }
        
        // エステ管理
        EstheticManagementLogic logic = new EstheticManagementLogic(shopIDList, targetStores, Integer.parseInt(startYear.getSelectedItem().toString()), Integer.parseInt(startMonth.getSelectedItem().toString()), outputType);
        return logic.report();
    }

    /*
    Ｂ・売上管理_グラフ（全店＆各店スタッフ）
    */
    private boolean reportSalesManagement() {
        String shopIDList       = "";
        String targetStores     = "";
        SalesManagementLogic.OutputType outputType   = null;
         //グループ
        if(rdoAllShop.isSelected()) {
            MstGroup	mg	=	SystemInfo.getGroup();
            
            shopIDList      = mg.getShopIDListAll();
            targetStores    = "全店舗出力";
            outputType      = SalesManagementLogic.OutputType.SHOP;
        }
        //店舗
        else if(rdoStaffByShop.isSelected()) {
            MstShop ms	=   (MstShop)shop.getSelectedItem();
            shopIDList  =   ms.getShopID().toString();
            targetStores    = ms.getShopName();
            outputType  =   SalesManagementLogic.OutputType.STAFF;
        }
        
        // 売上管理
        SalesManagementLogic logic = new SalesManagementLogic(shopIDList, targetStores, Integer.parseInt(startYear.getSelectedItem().toString()), Integer.parseInt(startMonth.getSelectedItem().toString()), outputType);
        return logic.report();
    }

    /*
    Ｃ・予約管理_グラフ（全店＆各店スタッフ）
    */
    private boolean reportReservationManagement() {
        String shopIDList       = "";
        String targetStores     = "";
        ReservationManagementLogic.OutputType outputType   = null;
         //全店舗リスト
        if(rdoAllShop.isSelected()) {
            MstGroup mg = SystemInfo.getGroup();
            
            shopIDList      = mg.getShopIDListAll();
            targetStores    = "";
            outputType      = ReservationManagementLogic.OutputType.SHOP;
        }
        //店舗別スタッフ
        else if(rdoStaffByShop.isSelected()) {
            MstShop ms	=   (MstShop)shop.getSelectedItem();
            shopIDList  =   ms.getShopID().toString();
            targetStores    = ms.getShopName();
            outputType  =   ReservationManagementLogic.OutputType.STAFF;
        }
        
        // 予約管理
        ReservationManagementLogic logic = new ReservationManagementLogic(shopIDList, targetStores, Integer.parseInt(startYear.getSelectedItem().toString()), Integer.parseInt(startMonth.getSelectedItem().toString()), outputType);
        return logic.report();
    }

    /*
    Ｄ・購買管理_グラフ（全店＆各店スタッフ）
    */
    private boolean reportPurchaseManagement() {
        String shopIDList       = "";
        String targetStores     = "";
        PurchaseManagementLogic.OutputType outputType   = null;
         //全店舗リスト
        if(rdoAllShop.isSelected()) {
            MstGroup mg = SystemInfo.getGroup();
            
            shopIDList      = mg.getShopIDListAll();
            targetStores    = "";
            outputType      = PurchaseManagementLogic.OutputType.SHOP;
        }
        //店舗別スタッフ
        else if(rdoStaffByShop.isSelected()) {
            MstShop ms	=   (MstShop)shop.getSelectedItem();
            shopIDList  =   ms.getShopID().toString();
            targetStores    = ms.getShopName();
            outputType  =   PurchaseManagementLogic.OutputType.STAFF;
        }
        
        // 購買管理
        PurchaseManagementLogic logic = new PurchaseManagementLogic(shopIDList, targetStores, Integer.parseInt(startYear.getSelectedItem().toString()), Integer.parseInt(startMonth.getSelectedItem().toString()), outputType);
        return logic.report();
    }

    /*
    Ｅ・スタッフ別商品購買内訳
    */
    private boolean reportProductPurchaseByStaffLogic() {
        String shopIDList       = "";
        String targetStores     = "";

        //店舗
        MstShop ms	=   (MstShop)shop.getSelectedItem();
        shopIDList  =   ms.getShopID().toString();
        targetStores    = ms.getShopName();
        
        // スタッフ別商品購買内訳
        ProductPurchaseByStaffLogic logic = new ProductPurchaseByStaffLogic(shopIDList, targetStores, Integer.parseInt(startYear.getSelectedItem().toString()), Integer.parseInt(startMonth.getSelectedItem().toString()));
        return logic.report();
    }

    /*
    Ｆ・週で見るエステ推移
    */
    private boolean reportEstheticTransitionInWeek(Integer year, Integer month) {
        String shopIDList       = "";
        EstheticTransitionInWeekLogic.OutputType outputType   = null;
         //グループ
        if(rdoByShop.isSelected()) {
            MstGroup	mg	=	SystemInfo.getGroup();
            
            shopIDList      = mg.getShopIDListAll();
            outputType      = EstheticTransitionInWeekLogic.OutputType.SHOP;
        }
        //店舗
        else if(rdoByStaff.isSelected()) {
            MstShop ms	=   (MstShop)shop.getSelectedItem();
            shopIDList  =   ms.getShopID().toString();
            outputType  =   EstheticTransitionInWeekLogic.OutputType.STAFF;
        }
        
        // 週で見るエステ推移
        EstheticTransitionInWeekLogic logic = new EstheticTransitionInWeekLogic(shopIDList, year, month, outputType);
        return logic.report();
    }

    /*
    Ｇ・週で見る購買推移
    */
    private boolean reportWeeklyPurchasing(Integer year, Integer month) {
        WeeklyPurchasingLogic.OutputType outputType = null;

        //スタッフ別
        if (rdoByStaff.isSelected()) {
            outputType = WeeklyPurchasingLogic.OutputType.STAFF;
        }
        //店舗別
        else if (rdoByShop.isSelected()) {
            outputType = WeeklyPurchasingLogic.OutputType.SHOP;
        }
        
        List<Map<String, String>> weeklyList = getWeeklyList(year, month);
        
        WeeklyPurchasingLogic logic = new WeeklyPurchasingLogic(year, month, outputType, weeklyList);
        return logic.report();
    }
    
    /*
    Ｈ・週で見る予約推移
    */
    private boolean reportReservationTransitionByWeek(Integer year, Integer month) {
        ReservationTransitionByWeekLogic.OutputType outputType = null;

        //スタッフ別
        if (rdoByStaff.isSelected()) {
            outputType = ReservationTransitionByWeekLogic.OutputType.STAFF;
        }
        //店舗別
        else if (rdoByShop.isSelected()) {
            outputType = ReservationTransitionByWeekLogic.OutputType.SHOP;
        }
        
        List<Map<String, String>> weeklyList = getWeeklyList(year, month);
        
        ReservationTransitionByWeekLogic logic = new ReservationTransitionByWeekLogic(year, month, outputType, weeklyList);
        return logic.report();
    }
    
    private List<Map<String, String>> getWeeklyList(Integer year, Integer month) {
        List<Map<String, String>> weeklyList = new ArrayList<Map<String, String>>();
        Map<String, String> dtItem = new HashMap<String, String>();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMdd");
        int dayOfWeek = 8;        
        int stOfWeek = 1;
        
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.YEAR, year);
        cal.set(Calendar.MONTH, month);
        cal.set(Calendar.DATE, getEdDayOfMonth(year, month));
        
        String edDateOfMonth = formatter.format(cal.getTime());
        
        cal.set(Calendar.DATE, stOfWeek);
        dtItem.put("stOfWeek", formatter.format(cal.getTime()));

        int edOfWeek = (stOfWeek + dayOfWeek) - cal.get(Calendar.DAY_OF_WEEK);
        edOfWeek = edOfWeek == 8 ? 1 : edOfWeek;
  
        cal.set(Calendar.DATE, edOfWeek);
        dtItem.put("edOfWeek", formatter.format(cal.getTime()));

        weeklyList.add(dtItem);
        
        for (int i = 1; i <= 3; i++) {
            dtItem = new HashMap<String, String>();
            
            stOfWeek = edOfWeek + 1;
            cal.set(Calendar.DATE, stOfWeek);
            dtItem.put("stOfWeek", formatter.format(cal.getTime()));
            
            edOfWeek = (stOfWeek + dayOfWeek) - cal.get(Calendar.DAY_OF_WEEK);
            cal.set(Calendar.DATE, edOfWeek);
            dtItem.put("edOfWeek", formatter.format(cal.getTime()));
            
            weeklyList.add(dtItem);
        }
        
        if (edDateOfMonth.compareTo(formatter.format(cal.getTime())) > 0) {
            dtItem = new HashMap<String, String>();

            cal.set(Calendar.DATE, edOfWeek + 1);
            dtItem.put("stOfWeek", formatter.format(cal.getTime()));
            dtItem.put("edOfWeek", edDateOfMonth);
            
            weeklyList.add(dtItem);
        }
        
        return weeklyList;
    }
    
    private int getEdDayOfMonth(Integer year, Integer month){
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.YEAR, year);
        cal.set(Calendar.MONTH, month);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        
        return cal.getActualMaximum(Calendar.DATE);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup aggregateGroup;
    private javax.swing.ButtonGroup aggregationGroup;
    private javax.swing.JButton btnExcelReport;
    private javax.swing.JButton btnExcelReport1;
    private javax.swing.ButtonGroup btnPerformance;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private javax.swing.ButtonGroup countGroup;
    private javax.swing.ButtonGroup customerGroup;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblTargetDate;
    private javax.swing.JLabel lblTargetDate1;
    private javax.swing.JLabel lblTargetDate2;
    private javax.swing.JLabel lblTargetDate3;
    private javax.swing.JLabel lblTargetDate4;
    private javax.swing.JLabel lblTargetDate5;
    private javax.swing.ButtonGroup outputGroup;
    private javax.swing.JRadioButton rdoAllShop;
    private javax.swing.JRadioButton rdoByShop;
    private javax.swing.JRadioButton rdoByStaff;
    private javax.swing.JRadioButton rdoEsthetic;
    private javax.swing.JRadioButton rdoEstheticInWeek;
    private javax.swing.JRadioButton rdoPurchase;
    private javax.swing.JRadioButton rdoPurchaseInWeek;
    private javax.swing.JRadioButton rdoReservation;
    private javax.swing.JRadioButton rdoReservationInWeek;
    private javax.swing.JRadioButton rdoSales;
    private javax.swing.JRadioButton rdoStaffByShop;
    private javax.swing.JRadioButton rdoStaffPurchase;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JPanel reportPanel1;
    private javax.swing.ButtonGroup reportTypeGroup;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JComboBox startMonth;
    private javax.swing.JComboBox startMonth1;
    private javax.swing.JComboBox startYear;
    private javax.swing.JComboBox startYear1;
    private javax.swing.ButtonGroup taxGroup;
    private javax.swing.ButtonGroup taxGroup2;
    private javax.swing.ButtonGroup timeGroup;
    private javax.swing.ButtonGroup typeGroup;
    // End of variables declaration//GEN-END:variables

    private void writeExcelValue(JExcelApi jx, int col, int row, String value) throws SQLException {
        jx.setValue(col, row, value);
    }

    public CusContractHistoryReportFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    private class CusContractHistoryReportFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponentStaffShopRankingFocusTraversalPolicy。 aContainer は
         * aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (rdoEsthetic.isSelected()) {
                return rdoSales;
            } else {
                return rdoEsthetic;
            }
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {

            return this.getStartComponent();
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。 このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer 先頭の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。 このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer aContainer - 最後の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer) {
//            if (cmbTargetPeriodStartDate.isSelected()) {
//                return cmbTargetPeriodStartDate;
//            }
            return rdoEsthetic;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。 aContainer
         * をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         *
         * @param aContainer デフォルトの Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。 show() または setVisible(true)
         * の呼び出しで一度ウィンドウが表示されると、 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、 または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         *
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        public Component getInitialComponent(Window window) {
            return this.getStartComponent();
        }

        private Component getStartComponent() {
            if (rdoEsthetic.isSelected()) {
                return rdoEsthetic;
            }
            return rdoEsthetic;
        }
    }
}
