/*
 * StaffWorkTimeUpdatePanel.java
 *
 * Created on 2007/08/09, 16:29
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sql.ConnectionWrapper;
import java.util.HashMap;
import javax.swing.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sql.ResultSetWrapper;
import java.sql.SQLException;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author geobeck
 */
public class ItoMenuSettingPanel extends  com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private Map<Integer, Integer> menuMap = new HashMap<Integer, Integer>();
    
    public ItoMenuSettingPanel() {

	initComponents();
	this.setPath("メニュー設定");
	this.setTitle("メニュー設定");
	this.setSize(500, 500);
	init();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        renewButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();

        setFocusCycleRoot(true);
        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "カラー", "トリートメント", "パーマ", "ストレート"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        menuTable.setRowSelectionAllowed(false);
        menuTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        menuTable.getTableHeader().setReorderingAllowed(false);
        menuTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        menuTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        SwingUtil.setJTableHeaderRenderer(menuTable, SystemInfo.getTableHeaderRenderer());
        TableColumnModel menuModel = menuTable.getColumnModel();

        menuTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                menuTableMouseReleased(evt);
            }
        });
        menuTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                menuTableKeyReleased(evt);
            }
        });

        jScrollPane1.setViewportView(menuTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(renewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(renewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void menuTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuTableMouseReleased
        changeSelectedMenu();
    }//GEN-LAST:event_menuTableMouseReleased

    private void menuTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_menuTableKeyReleased
        changeSelectedMenu();
    }//GEN-LAST:event_menuTableKeyReleased

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.close();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void changeSelectedMenu()
    {
        int row = menuTable.getSelectedRow();
        int col = menuTable.getSelectedColumn();
        
        if (row < 0 || col < 1) return;
        
        if ((Boolean)menuTable.getValueAt(row, col)) {
            for (int i = 1; i < 5; i++) {
                if (i == col) continue;
                menuTable.setValueAt(false, row, i);
            }
        }
    }
        
    /**
     * 初期化する
     */
    private void init()
    {
        SystemInfo.addMouseCursorChange(closeButton);
        SystemInfo.addMouseCursorChange(renewButton);

        menuTable.getColumnModel().getColumn(0).setPreferredWidth(150);
        
        showData();
    }
    
    private void renewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renewButtonActionPerformed

        int ret = MessageDialog.showYesNoDialog(
                        this,
                        MessageUtil.getMessage(103),
                        this.getTitle(),
                        JOptionPane.QUESTION_MESSAGE,
                        JOptionPane.NO_OPTION);
                    
        if (ret == JOptionPane.YES_OPTION) {
            this.regist();
            this.close();
        }

    }//GEN-LAST:event_renewButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable menuTable;
    private javax.swing.JButton renewButton;
    // End of variables declaration//GEN-END:variables
  
    private void showData()
    {
        SwingUtil.clearTable(menuTable);
        menuMap.clear();
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      a.technic_class_id");
        sql.append("     ,a.technic_class_name");
        sql.append("     ,b.menu_setting_id");
        sql.append(" from");
        sql.append("     mst_technic_class a");
        sql.append("         left join mst_ito_menu_setting b");
        sql.append("         using (technic_class_id)");
        sql.append(" where");
        sql.append("     a.delete_date is null");
        sql.append(" order by");
        sql.append("      a.display_seq");
        sql.append("     ,a.technic_class_id");

        try {
            ConnectionWrapper con = SystemInfo.getConnection();
            ResultSetWrapper rs = con.executeQuery(sql.toString());
            
            DefaultTableModel model = (DefaultTableModel)menuTable.getModel();
            
            int row = 0;
            
            while (rs.next()) {
                menuMap.put(row, rs.getInt("technic_class_id"));

                int settingId = rs.getInt("menu_setting_id");
                
                model.addRow(new Object[]{
                    rs.getString("technic_class_name"),
                    settingId == 1,
                    settingId == 2,
                    settingId == 3,
                    settingId == 4
                });
                
                row++;
            }

        } catch(SQLException e) {
            e.printStackTrace();
        }
    }
    
    
    private void regist()
    {
        ConnectionWrapper con = SystemInfo.getConnection();
        
        try {

            con.begin();
            con.execute("truncate table mst_ito_menu_setting");

            for (int row = 0; row < menuTable.getRowCount(); row++) {
                boolean isSelected = false;
                int settingId = 0;
                for (int col = 1; col < menuTable.getColumnCount(); col++) {
                    if ((Boolean)menuTable.getValueAt(row, col)) {
                        isSelected = true;
                        settingId = col;
                    }
                }
                
                if (isSelected) {
                    StringBuilder sql = new StringBuilder(1000);
                    sql.append(" insert into mst_ito_menu_setting");
                    sql.append(" (");
                    sql.append("      technic_class_id");
                    sql.append("     ,menu_setting_id");
                    sql.append(" ) values");
                    sql.append(" (");
                    sql.append("      " + menuMap.get(row));
                    sql.append("     ," + settingId);
                    sql.append(" )");
                    con.execute(sql.toString());
                }
            }
            
            con.commit();
            
        } catch(SQLException e) {
            try {
                con.rollback();
            } catch (Exception e2) {
            }
            e.printStackTrace();
        }        
    }
    
    /**
     * ダイアログを閉じる
     */
    private void close()
    {
        if (this.isDialog()) {
            ((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
        } else {
            this.setVisible(false);
        }
    }
}
