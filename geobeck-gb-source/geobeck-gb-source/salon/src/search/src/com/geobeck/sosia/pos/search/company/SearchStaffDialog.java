/*
 * SearchStaffDialog.java
 *
 * Created on 2006/04/21, 9:25
 */

package com.geobeck.sosia.pos.search.company;

import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.util.SQLUtil;

/**
 * スタッフ検索画面
 * @author katagiri
 */
public class SearchStaffDialog extends javax.swing.JDialog
{   
        //IVS_TMTrong start add 2015/10/22 New request #43779
	private ArrayList<MstShop> shopList = new ArrayList<MstShop>();
        //IVS_TMTrong end add 2015/10/22 New request #43779
        
	/**
	 * コンストラクタ
	 * @param parent 
	 * @param modal 
	 */
	public SearchStaffDialog(java.awt.Frame parent, boolean modal)
	{
            super(parent, modal);
            initComponents();
            addMouseCursorChange();
            SwingUtil.moveCenter(this);
            this.init();
            this.load();
            this.showData();
	}
	/**
	 * コンストラクタ
	 * @param parent 
	 * @param modal 
	 */
	public SearchStaffDialog(java.awt.Dialog parent, boolean modal)
	{
            super(parent, modal);
            initComponents();
            addMouseCursorChange();
            SwingUtil.moveCenter(this);
            this.init();
            this.load();
            this.showData();
	}

        public void init() {
            if (SystemInfo.isGroup()) {
                registButton.setVisible(false);
                staffs.removeColumn(staffs.getColumn("表示"));
            }
            //IVS_TMTrong start add 2015/10/22 New request #43779
            this.loadShopList();
            for(MstShop ms : shopList)
            {
                    shop.addItem(ms);
            }
            //IVS_TMTrong end add 2015/10/22 New request #43779
        }

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backPanel = new com.geobeck.swing.ImagePanel();
        staffsScrollPane = new javax.swing.JScrollPane();
        staffs = new com.geobeck.swing.JTableEx();
        selectButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        displaySeqSettingButton = new javax.swing.JButton();
        registButton = new javax.swing.JButton();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("スタッフ一覧");

        backPanel.setImage(SystemInfo.getImageIcon("/contents_background.jpg"));
        backPanel.setRepeat(true);

        staffsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        staffs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "スタッフ区分", "スタッフNo.", "名前", "在籍店舗", "表示"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        staffs.setSelectionBackground(new java.awt.Color(255, 210, 142));
        staffs.setSelectionForeground(new java.awt.Color(0, 0, 0));
        staffs.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        staffs.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(staffs, SystemInfo.getTableHeaderRenderer());
        staffs.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        staffs.setDefaultRenderer(String.class, new TableCellAlignRenderer());
        staffs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                staffsMouseClicked(evt);
            }
        });
        staffsScrollPane.setViewportView(staffs);

        selectButton.setIcon(SystemInfo.getImageIcon("/button/select/select_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        backButton.setBorderPainted(false);
        backButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        displaySeqSettingButton.setIcon(SystemInfo.getImageIcon("/button/common/display_seq_setting_off.jpg"));
        displaySeqSettingButton.setBorderPainted(false);
        displaySeqSettingButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/display_seq_setting_on.jpg"));
        displaySeqSettingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displaySeqSettingButtonActionPerformed(evt);
            }
        });

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        shopLabel.setText("店舗");

        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout backPanelLayout = new org.jdesktop.layout.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(staffsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, backPanelLayout.createSequentialGroup()
                        .add(displaySeqSettingButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 151, Short.MAX_VALUE)
                        .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(26, 26, 26)
                        .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(backPanelLayout.createSequentialGroup()
                        .add(shopLabel)
                        .add(18, 18, 18)
                        .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 183, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(displaySeqSettingButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(staffsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 333, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void displaySeqSettingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displaySeqSettingButtonActionPerformed

        SystemInfo.getLogger().log(Level.INFO, "スタッフ表示順設定");
        
        StaffDispSettingDialog ssd = new StaffDispSettingDialog(this, true);
        ssd.setVisible(true);

        this.load();
        this.showData();

        ssd = null;
        
    }//GEN-LAST:event_displaySeqSettingButtonActionPerformed

	private void staffsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_staffsMouseClicked
	{//GEN-HEADEREND:event_staffsMouseClicked
            if (evt.getClickCount() == 2) {
                //IVS_TMTrong start add 2015/10/23 New request #43779
                if (!SystemInfo.isGroup()) {
                    if(staffs.getSelectedColumn()==4)
                        return;
                }
                //IVS_TMTrong end add 2015/10/23 New request #43779
                if (0 <= staffs.getSelectedRow()) {
                    this.setSelectedStaff();
                }
            }
	}//GEN-LAST:event_staffsMouseClicked

	/**
	 * 選択ボタンが押されたときの処理
	 * @param evt 
	 */
	private void selectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectButtonActionPerformed
	{//GEN-HEADEREND:event_selectButtonActionPerformed
		int		index	=	staffs.getSelectedRow();
		
		if(0 <= index)
		{
			selectedStaff	=	staffArray.get(index);
		}
		
		this.setVisible(false);
	}//GEN-LAST:event_selectButtonActionPerformed

	/**
	 * 戻るボタンが押されたときの処理
	 * @param evt 
	 */
	private void backButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButtonActionPerformed
	{//GEN-HEADEREND:event_backButtonActionPerformed
		this.setVisible(false);
	}//GEN-LAST:event_backButtonActionPerformed

        private void registButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registButtonActionPerformed
             //IVS_TMTrong start add 2015/10/23 New request #43779
            if(staffs.isEditing()){
                staffs.getCellEditor().stopCellEditing();
            }
             //IVS_TMTrong end add 2015/10/23 New request #43779
            ConnectionWrapper con = null;

            try {
                
                con = SystemInfo.getConnection();
                con.begin();
                 //IVS_TMTrong start add 2015/10/23 New request #43779
                /*con.executeUpdate("delete from mst_staff_nondisplay where shop_id = " + SQLUtil.convertForSQL(SystemInfo.getCurrentShop().getShopID()));
                
                for (int row = 0; row < staffs.getRowCount(); row++) {
                    Boolean display = (Boolean)staffs.getValueAt(row, 4);
                    if (!display) {
                        MstStaff stf = staffArray.get(row);
                        con.executeUpdate("insert into mst_staff_nondisplay(shop_id, staff_id) values(" + SQLUtil.convertForSQL(SystemInfo.getCurrentShop().getShopID()) + ", " + SQLUtil.convertForSQL(stf.getStaffID()) + ")");
                    }
                }*/
                
                //if(((MstShop)shop.getSelectedItem()).getShopID()!=null){
                //    con.executeUpdate("delete from mst_staff_nondisplay where shop_id = " + ((MstShop)shop.getSelectedItem()).getShopID());
                //}else{
                    con.executeUpdate("delete from mst_staff_nondisplay where shop_id = " + SystemInfo.getCurrentShop().getShopID());
                //}
                
                for(int row =0; row<staffs.getRowCount();row++){
                    MstStaff tempStaff = (MstStaff)staffArray.get(row);
                    JComboBox seletedShopCombo = (JComboBox)staffs.getValueAt(row, 3);
                    if(tempStaff.getShopID()!=((MstShop)seletedShopCombo.getSelectedItem()).getShopID()){
                        String mstStaffUpdateSQL = String.format("update mst_staff set shop_id =%1s where staff_id =%2s", ((MstShop)seletedShopCombo.getSelectedItem()).getShopID(),tempStaff.getStaffID());
                        con.executeUpdate(mstStaffUpdateSQL);
                    }
                    
                    Boolean display = (Boolean)staffs.getValueAt(row, 4);
                    if (!display) {
                        //if(((MstShop)seletedShopCombo.getSelectedItem()).getShopID()!=null){
                        //    con.executeUpdate("insert into mst_staff_nondisplay(shop_id, staff_id) values(" + ((MstShop)seletedShopCombo.getSelectedItem()).getShopID() + ", " + SQLUtil.convertForSQL(tempStaff.getStaffID()) + ")");
                        //}else{
                            con.executeUpdate("insert into mst_staff_nondisplay(shop_id, staff_id) values(" +  SQLUtil.convertForSQL(SystemInfo.getCurrentShop().getShopID()) + ", " + SQLUtil.convertForSQL(tempStaff.getStaffID()) + ")");
                        //}
                    }
                }
                con.commit();
                
                this.load();
                this.showData();
                //IVS_TMTrong end add 2015/10/23 New request #43779
                MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
                    this.getTitle(),
                    JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception e) {

                try {
                    if (con.isBeginTran()) {
                        con.rollback();
                    }

                    con.close();

                } catch (SQLException sql_e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
            }

        }//GEN-LAST:event_registButtonActionPerformed

    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
        //IVS_TMTrong start add 2015/10/23 New request #43779
        if(staffs.isEditing()){
            staffs.getCellEditor().stopCellEditing();
        }
        
        this.load();
        this.showData();
         //IVS_TMTrong end add 2015/10/23 New request #43779
    }//GEN-LAST:event_shopActionPerformed
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private com.geobeck.swing.ImagePanel backPanel;
    private javax.swing.JButton displaySeqSettingButton;
    private javax.swing.JButton registButton;
    private javax.swing.JButton selectButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JTable staffs;
    private javax.swing.JScrollPane staffsScrollPane;
    // End of variables declaration//GEN-END:variables
	
	private ArrayList<MstStaff>		staffArray		=	new ArrayList<MstStaff>();
	
	private MstStaff	selectedStaff	=	null;
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(selectButton);
		SystemInfo.addMouseCursorChange(backButton);
		SystemInfo.addMouseCursorChange(displaySeqSettingButton);
		SystemInfo.addMouseCursorChange(registButton);
	}

	/**
	 * 選択されたスタッフを取得する。
	 * @return 選択されたスタッフ
	 */
	public MstStaff getSelectedStaff()
	{
		return selectedStaff;
	}
	
	private void setSelectedStaff()
	{
                int index = staffs.getSelectedRow();
		
		if (0 <= index) {
                    selectedStaff = staffArray.get(index);
		}
		
		this.setVisible(false);
	}
	
	/**
	 * データベースからスタッフを読み込む。
	 */
	private void load()
	{
            staffArray.clear();

            ConnectionWrapper con = SystemInfo.getConnection();

            try {
                //IVS_TMTrong start add 2015/10/22 New request #43779
                MstShop seletedShop=(MstShop)shop.getSelectedItem();
                ResultSetWrapper rs = con.executeQuery(this.getSelectSQL(seletedShop.getShopID()));
                //IVS_TMTrong end add 2015/10/22 New request #43779
                while(rs.next()) {
                    MstStaff ms	= new MstStaff();
                    ms.setData(rs);
                    ms.setShopName(rs.getString("shop_name"));
                    ms.setStaffClassName(rs.getString("staff_class_name"));
                    ms.setDisplay(rs.getBoolean("display"));
                    staffArray.add(ms);
                }

            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
	}
	/**
	 * スタッフを取得するＳＱＬ文を取得する。
	 * @return スタッフを取得するＳＱＬ文
	 */
	private String getSelectSQL(Integer shopID)
	{
            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select");
            sql.append("      ms.*");
            sql.append("     ,msh.shop_name");
            sql.append("     ,msc.staff_class_name");
            sql.append("     ,(");
            //IVS_TMTrong start add 2015/10/22 New request #43779 
            //sql.append("         where shop_id = " + SQLUtil.convertForSQL(SystemInfo.getCurrentShop().getShopID()));
            sql.append("         select 1 from mst_staff_nondisplay st");
            if(shopID!=null){
                sql.append("         where st.shop_id = " + shopID);
            }else{
                //sql.append("         where st.shop_id = ms.shop_id");
                sql.append("         where st.shop_id ="+SystemInfo.getCurrentShop().getShopID());
            }
            sql.append("           and st.staff_id = ms.staff_id");
            //IVS_TMTrong end add 2015/10/22 New request #43779
            sql.append("     ) is null as display");
            sql.append(" from");
            sql.append("     mst_staff ms");
            sql.append("         left join mst_shop msh");
            sql.append("                on msh.shop_id = ms.shop_id");
            sql.append("               and msh.delete_date is null");
            sql.append("         left join mst_staff_class msc");
            sql.append("                on msc.staff_class_id = ms.staff_class_id");
            sql.append("               and msc.delete_date is null");
            sql.append(" where");
            sql.append("     ms.delete_date is null");
            //IVS_TMTrong start add 2015/10/22 New request #43779
            if(shopID!=null){
                sql.append("    and ms.shop_id="+shopID);
            }
            //IVS_TMTrong end add 2015/10/22 New request #43779
            sql.append(" order by");
            // 店舗ログインの場合
            //IVS_TMTrong start add 2015/10/22 New request #43779
            //if (SystemInfo.getCurrentShop().getShopID() != 0) {
            //    sql.append(" case when ms.shop_id = " + SystemInfo.getCurrentShop().getShopID() + " then 0 else 1 end,");
            //}
            if (shopID!=null && shopID != 0) {
                sql.append(" case when ms.shop_id = " + shopID + " then 0 else 1 end,");
            }
            //IVS_TMTrong end add 2015/10/22 New request #43779
            sql.append("      ms.shop_id");
            sql.append("     ,ms.display_seq");
            sql.append("     ,lpad(ms.staff_no, 10, '0')");
            sql.append("     ,ms.staff_id");

            return sql.toString();
	}
	
	/**
	 * スタッフ情報を表示する。
	 */
	private void showData()
	{
            SwingUtil.clearTable(staffs);

            DefaultTableModel model = (DefaultTableModel)staffs.getModel();

            for (MstStaff ms : staffArray) {

                Object[] rowData =
                    {
                        ms.getStaffClassName(),
                        ms.getStaffNo(),
                        ms.getFullStaffName(),
                        //IVS_TMTrong start add 2015/10/22 New request #43779
                        //ms.getShopName(),
                        this.getShopComboBox(ms.getShopID()),
                        //IVS_TMTrong end add 2015/10/22 New request #43779
                        ms.isDisplay()
                    };

                model.addRow(rowData);
            }
	}
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		staffs.getColumnModel().getColumn(0).setPreferredWidth(140);
		staffs.getColumnModel().getColumn(1).setPreferredWidth(80);
		staffs.getColumnModel().getColumn(2).setPreferredWidth(140);
		staffs.getColumnModel().getColumn(3).setPreferredWidth(140);
	}
	
	
	/**
	 * 列の表示位置を設定するTableCellRenderer
	 */
	private class TableCellAlignRenderer extends SelectTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}

		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);
			
			switch(column)
			{
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}

			return this;
		}
	}
        //IVS_TMTrong start add 2015/10/22 New request #43779
        private void loadShopList()
	{
		shopList.clear();
		if(SystemInfo.getGroup().getGroupID() != 0)
		{
			shopList.add(new MstShop());
		}
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		try
		{
			ResultSetWrapper	rs	=	con.executeQuery(this.getShopListSQL());	
			while(rs.next())
			{
				MstShop		ms	=	new MstShop();
				ms.setData(rs);
				shopList.add(ms);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
        private String getShopListSQL()
	{
		return	"select * from mst_shop where delete_date is null order by shop_id";
	}
        private JComboBox getShopComboBox(Integer shopID) {
            JComboBox shopCombo = new JComboBox();
            shopCombo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            
            for(MstShop iShop:shopList){
                shopCombo.addItem(iShop);
            }
            
            this.setSeletedShop(shopCombo,shopID);
            shopCombo.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {                    
                    //Integer seletedRow = staffs.getSelectedRow();
                    //Integer seletedColumn = 3;
                    //JComboBox seletedShopCombo = (JComboBox)staffs.getValueAt(seletedRow, seletedColumn);
                    //System.out.println("shopID :"+((MstShop)seletedShopCombo.getSelectedItem()).getShopName()); 
//                    MstStaff handleStaff = (MstStaff)staffArray.get(seletedRow);
//                    System.out.println("*************");
//                    System.out.println(handleStaff.getShopID());
//                    System.out.println(handleStaff.getShopName());
//                    System.out.println(handleStaff.getStaffNo());
                }
            });
            return shopCombo;
        }
        private void setSeletedShop(JComboBox shopCombo, Integer shopID) {
            for (int i = 0; i < shopCombo.getItemCount(); i++) {
                MstShop ms = (MstShop) shopCombo.getItemAt(i);
                if (ms.getShopID()== null) {
                    shopCombo.setSelectedIndex(0);
                } else if (ms.getShopID().equals(shopID)) {
                    shopCombo.setSelectedIndex(i);
                    return;
                }
            }
        }
        //IVS_TMTrong end add 2015/10/22 New request #43779
}
