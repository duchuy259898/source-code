/*
 * SearchStaffDialog.java
 *
 * Created on 2006/04/21, 9:25
 */

package com.geobeck.sosia.pos.search.company;

import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.master.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.search.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;

/**
 * スタッフ検索画面
 * @author katagiri
 */
public class StaffDispSettingDialog extends javax.swing.JDialog
{
	/**
	 * コンストラクタ
	 * @param parent 
	 * @param modal 
	 */
	public StaffDispSettingDialog(java.awt.Dialog parent, boolean modal)
	{
		super(parent, modal);
		initComponents();
		addMouseCursorChange();
		SwingUtil.moveCenter(this);
                SystemInfo.initGroupShopComponents(shop, 3);
		this.load();
		this.showData();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        backPanel = new com.geobeck.swing.ImagePanel();
        staffsScrollPane = new javax.swing.JScrollPane();
        staffs = new javax.swing.JTable();
        registButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("\u30b9\u30bf\u30c3\u30d5\u8868\u793a\u9806\u8a2d\u5b9a");
        backPanel.setImage(SystemInfo.getImageIcon("/contents_background.jpg"));
        backPanel.setRepeat(true);
        staffsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "スタッフ区分", "スタッフNo.", "名前", "在籍店舗", "表示順"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        staffs.setSelectionBackground(new java.awt.Color(255, 255, 204));
        staffs.setSelectionForeground(new java.awt.Color(0, 0, 0));
        staffs.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        staffs.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(staffs, SystemInfo.getTableHeaderRenderer());
        staffs.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        staffs.setDefaultRenderer(String.class, new TableCellAlignRenderer());
        TableColumnModel model = staffs.getColumnModel();
        model.getColumn(4).setCellEditor(new IntegerCellEditor(new JTextField()));

        staffsScrollPane.setViewportView(staffs);

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setContentAreaFilled(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        backButton.setBorderPainted(false);
        backButton.setContentAreaFilled(false);
        backButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        shopLabel.setText("\u5e97\u8217");

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout backPanelLayout = new org.jdesktop.layout.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, staffsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                    .add(backPanelLayout.createSequentialGroup()
                        .add(shopLabel)
                        .add(13, 13, 13)
                        .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 215, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 108, Short.MAX_VALUE)
                        .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(staffsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
        this.load();
        this.showData();
    }//GEN-LAST:event_shopActionPerformed

	/**
	 * 登録ボタンが押されたときの処理
	 * @param evt 
	 */
    private void registButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registButtonActionPerformed

        try {
            
            ConnectionWrapper con = SystemInfo.getConnection();

            for (int i = 0; i < staffs.getRowCount(); i++) {
                selectedStaff = staffArray.get(i);
                Integer dispSeq = (Integer)staffs.getValueAt(i, 4);
                if (dispSeq != null) {
                    selectedStaff.setDisplaySeq(dispSeq);
                    selectedStaff.regist(con);
                }
            }            
            
            MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
                            this.getTitle(),
                            JOptionPane.INFORMATION_MESSAGE);

            this.load();
            this.showData();
            
        } catch (Exception e) {
            
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            
        }
    }//GEN-LAST:event_registButtonActionPerformed

	/**
	 * 戻るボタンが押されたときの処理
	 * @param evt 
	 */
	private void backButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButtonActionPerformed
	{//GEN-HEADEREND:event_backButtonActionPerformed
		this.setVisible(false);
	}//GEN-LAST:event_backButtonActionPerformed
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private com.geobeck.swing.ImagePanel backPanel;
    private javax.swing.JButton registButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JTable staffs;
    private javax.swing.JScrollPane staffsScrollPane;
    // End of variables declaration//GEN-END:variables
	
	private ArrayList<MstStaff> staffArray = new ArrayList<MstStaff>();
	
	private MstStaff selectedStaff = null;
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(registButton);
		SystemInfo.addMouseCursorChange(backButton);
	}

	/**
	 * データベースからスタッフを読み込む。
	 */
	private void load()
	{
		staffArray.clear();
		
		ConnectionWrapper con = SystemInfo.getConnection();
		
		try {
                    
                    ResultSetWrapper rs = con.executeQuery(this.getSelectSQL());
			
                    while (rs.next()) {
                        MstStaff ms = new MstStaff();
				
                        ms.setData(rs);
			ms.setShopName(rs.getString("shop_name"));
			ms.setStaffClassName(rs.getString("staff_class_name"));
				
                        staffArray.add(ms);
                    }
                    
		} catch(SQLException e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * スタッフを取得するＳＱＬ文を取得する。
	 * @return スタッフを取得するＳＱＬ文
	 */
	private String getSelectSQL()
	{
            String shopIDList = "";
            if (shop.getSelectedItem() instanceof MstShop) {
                //店舗
                MstShop ms = (MstShop)shop.getSelectedItem();
                shopIDList = ms.getShopID().toString();
            }
            
            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select");
            sql.append("      ms.*");
            sql.append("     ,msh.shop_name");
            sql.append("     ,msc.staff_class_name");
            sql.append(" from");
            sql.append("     mst_staff ms");
            sql.append("         left join mst_shop msh");
            sql.append("                on msh.shop_id = ms.shop_id");
            sql.append("               and msh.delete_date is null");
            sql.append("         left join mst_staff_class msc");
            sql.append("                on msc.staff_class_id = ms.staff_class_id");
            sql.append("               and msc.delete_date is null");
            sql.append(" where");
            sql.append("         ms.delete_date is null");
            
            if (shopIDList.length() > 0) {
                sql.append(" and ms.shop_id in (" + shopIDList + ")");
            }
            
            sql.append(" order by");
            
            if (shopIDList.length() > 0) {
                sql.append("  ms.display_seq");
            } else {
                sql.append("  ms.shop_id");
                sql.append(" ,ms.display_seq");
            }
            
            sql.append("     ,lpad(ms.staff_no, 10, '0')");
            sql.append("     ,ms.staff_id");

            return sql.toString();
	}
	
	/**
	 * スタッフ情報を表示する。
	 */
	private void showData()
	{
            SwingUtil.clearTable(staffs);

            DefaultTableModel model = (DefaultTableModel)staffs.getModel();

            for (MstStaff ms : staffArray) {

                Object[] rowData =
                    {
                        ms.getStaffClassName(),
                        ms.getStaffNo(),
                        ms.getStaffName(0) + "　" + ms.getStaffName(1),
                        ms.getShopName(),
                        ms.getDisplaySeq()
                    };

                model.addRow(rowData);
            }
	}
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		staffs.getColumnModel().getColumn(0).setPreferredWidth(140);
		staffs.getColumnModel().getColumn(1).setPreferredWidth(80);
		staffs.getColumnModel().getColumn(2).setPreferredWidth(140);
		staffs.getColumnModel().getColumn(3).setPreferredWidth(140);
	}
	
	
	/**
	 * 列の表示位置を設定するTableCellRenderer
	 */
	private class TableCellAlignRenderer extends SelectTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}

		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);
			
			switch(column)
			{
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}

			return this;
		}
	}
}
