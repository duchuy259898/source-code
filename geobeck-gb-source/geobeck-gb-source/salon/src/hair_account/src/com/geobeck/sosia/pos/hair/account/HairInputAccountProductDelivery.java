/*
 * HairInputAccountProductDelivery.java
 *
 * Created on 2013/03/12, 11:24
 */
package com.geobeck.sosia.pos.hair.account;

import com.geobeck.sosia.pos.account.DeliveryConfirmData;
import com.geobeck.sosia.pos.account.PrintConfirm;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.master.customer.MstDataDeliveryProduct;
import com.geobeck.sosia.pos.search.SearchAddressDialog;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sql.*;
import com.geobeck.swing.*;
import static java.lang.Integer.parseInt;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.PlainDocument;

/**
 *
 * @author lhSon
 */
public class HairInputAccountProductDelivery extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private boolean isClose = false;
    private MstCustomer customer = new MstCustomer();
    private Integer slipNo = null;
    private Boolean flgSlipNo = false;
    private boolean print = false;
    private boolean isCopy = false;
    private int printFlg = 0;
    private Integer shopID = null;

    public int getPrintFlg() {
        return printFlg;
    }

    public void setPrintFlg(int printFlg) {
        this.printFlg = printFlg;
    }

    public boolean isPrint() {
        return print;
    }

    public void setPrint(boolean print) {
        this.print = print;
    }

    public boolean isIsCopy() {
        return isCopy;
    }

    public void setIsCopy(boolean isCopy) {
        this.isCopy = isCopy;
    }
    ArrayList<MstDataDeliveryProduct> listProduct = new ArrayList<MstDataDeliveryProduct>();

    public MstCustomer getCustomer() {
        return customer;
    }

    public void setCustomer(MstCustomer customer) {
        this.customer = customer;
    }

    /**
     * Creates new form SimpleMasterPanel
     */
    public HairInputAccountProductDelivery(MstCustomer customer) {
        super();
        initComponents();
        addMouseCursorChange();
        //2014/06/10 Thien An edited start
        //this.setSize(760, 500);
        this.setSize(820, 620);
        //2014/06/10 Thien An edited end
        this.setTitle("è§ïiéÛìn");
        this.setListener();
        try {
            this.customer = customer;
            this.customer.load(SystemInfo.getConnection());
        } catch (Exception ex) {
            SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
        }
        this.refresh();
    }

    public HairInputAccountProductDelivery(MstCustomer customer, Integer slipNo, Boolean flag, Integer shopID) {
        super();
        initComponents();
        addMouseCursorChange();
        //2014/06/10 Thien An edited start
        //this.setSize(760, 500);
        this.setSize(820, 620);
        //2014/06/10 Thien An edited end
        this.setTitle("è§ïiéÛìn");
        this.setListener();
        try {
            this.slipNo = slipNo;
            this.customer = customer;
            this.shopID = shopID;
            this.customer.load(SystemInfo.getConnection());
        } catch (Exception ex) {
            SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
        }
        this.flgSlipNo = flag;
        this.refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        slipNoLabel1 = new javax.swing.JLabel();
        customerNo = new com.geobeck.swing.JFormattedTextFieldEx();
        customerName = new com.geobeck.swing.JFormattedTextFieldEx();
        registButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        productsScrollPane1 = new javax.swing.JScrollPane();
        products = new com.geobeck.swing.JTableEx();
        jPanel1 = new javax.swing.JPanel();
        lblPostalCode = new javax.swing.JLabel();
        txtPostalCode = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createPostalCodeFormatter());
        lblAddress1 = new javax.swing.JLabel();
        lblAddress2 = new javax.swing.JLabel();
        lblAddress3 = new javax.swing.JLabel();
        lblAddress4 = new javax.swing.JLabel();
        lblOperationDate = new javax.swing.JLabel();
        calOperationDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        txtDeliveryMinute = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)txtDeliveryMinute.getDocument()).setDocumentFilter(
            new CustomFilter(2, CustomFilter.NUMBER));
        txtDeliveryHour = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)txtDeliveryHour.getDocument()).setDocumentFilter(
            new CustomFilter(2, CustomFilter.NUMBER));
        lblColon = new javax.swing.JLabel();
        lblNote = new javax.swing.JLabel();
        lblDeliveryDate = new javax.swing.JLabel();
        calDeliveryDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        txtAddress1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)txtAddress1.getDocument()).setDocumentFilter(
            new CustomFilter(16));
        txtAddress2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)txtAddress2.getDocument()).setDocumentFilter(
            new CustomFilter(64));
        txtAddress3 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)txtAddress3.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        txtAddress4 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)txtAddress4.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        btnSearchAddress = new javax.swing.JButton();

        setFocusCycleRoot(true);
        setPreferredSize(new java.awt.Dimension(900, 608));

        slipNoLabel1.setText("å⁄ãqñº");

        customerNo.setEditable(false);
        customerNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        customerName.setEditable(false);
        customerName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerName.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        backButton.setBorderPainted(false);
        backButton.setFocusable(false);
        backButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonbackPrevious(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("éÛìnè§ïi"));

        productsScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        productsScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        products.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "çwì¸ì˙", "è§ïiñº", "çwì¸êî", "écêî", "écã‡äz", "éÛìnêî", "ëÓëóêî", "íSìñé“"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        products.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        products.setSelectionBackground(new java.awt.Color(255, 210, 142));
        products.setSelectionForeground(new java.awt.Color(0, 0, 0));
        products.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(products, SystemInfo.getTableHeaderRenderer());
        products.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        //SelectTableCellRenderer.setSelectTableCellRenderer(products);
        products.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                productsPropertyChange(evt);
            }
        });
        productsScrollPane1.setViewportView(products);
        products.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        TableColumnModel productsModel = products.getColumnModel();
        productsModel.getColumn(5).setCellEditor(new IntegerCellEditor(new JTextField()));
        productsModel.getColumn(6).setCellEditor(new IntegerCellEditor(new JTextField()));
        //products.setDefaultRenderer(String.class, new ProductTableCellRenderer());

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(productsScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 740, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(productsScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 278, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18))
        );

        jPanel1.setOpaque(false);

        lblPostalCode.setText("óXï÷î‘çÜ");

        txtPostalCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtPostalCode.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtPostalCode.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        txtPostalCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPostalCodeFocusLost(evt);
            }
        });

        lblAddress1.setText("ìsìπï{åß");

        lblAddress2.setText("ésãÊí¨ë∫");

        lblAddress3.setText("í¨àÊÅEî‘ín");

        lblAddress4.setText("É}ÉìÉVÉáÉìñºìô");

        lblOperationDate.setText("éÛìnì˙");

        calOperationDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        calOperationDate.setDate(new java.util.Date());
        calOperationDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                calOperationDateItemStateChanged(evt);
            }
        });
        calOperationDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                calOperationDateFocusGained(evt);
            }
        });

        txtDeliveryMinute.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtDeliveryMinute.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDeliveryMinute.setText("00");
        txtDeliveryMinute.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtDeliveryMinutePropertyChange(evt);
            }
        });

        txtDeliveryHour.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtDeliveryHour.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDeliveryHour.setText("00");
        txtDeliveryHour.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtDeliveryHourPropertyChange(evt);
            }
        });

        lblColon.setText(":");

        lblNote.setText("Å¶îzëóÇÃèÍçáÇÕÅAîzëóäÛñ]éûä‘Çì¸óÕÇµÇƒâ∫Ç≥Ç¢ÅB");

        lblDeliveryDate.setText("îzëóì˙éû");

        calDeliveryDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        calDeliveryDate.setDate(new java.util.Date());
        calDeliveryDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                calDeliveryDateItemStateChanged(evt);
            }
        });
        calDeliveryDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                calDeliveryDateFocusGained(evt);
            }
        });

        txtAddress1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtAddress1.setInputKanji(true);

        txtAddress2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtAddress2.setInputKanji(true);

        txtAddress3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtAddress3.setInputKanji(true);

        txtAddress4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtAddress4.setColumns(128);
        txtAddress4.setInputKanji(true);

        btnSearchAddress.setIcon(SystemInfo.getImageIcon("/button/search/search_address_off.jpg"));
        btnSearchAddress.setBorderPainted(false);
        btnSearchAddress.setContentAreaFilled(false);
        btnSearchAddress.setFocusable(false);
        btnSearchAddress.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_address_on.jpg"));
        btnSearchAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchAddressActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, lblAddress1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(lblAddress2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, lblAddress3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, lblPostalCode, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(lblAddress4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(lblOperationDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblDeliveryDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(38, 38, 38)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(calDeliveryDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(txtDeliveryHour, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(5, 5, 5)
                        .add(lblColon)
                        .add(5, 5, 5)
                        .add(txtDeliveryMinute, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(29, 29, 29)
                        .add(lblNote))
                    .add(calOperationDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(txtPostalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(28, 28, 28)
                        .add(btnSearchAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(txtAddress2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtAddress1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtAddress3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtAddress4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(11, 11, 11)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(txtPostalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(lblPostalCode))
                    .add(btnSearchAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtAddress1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblAddress1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtAddress2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblAddress2))
                .add(5, 5, 5)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblAddress3)
                    .add(txtAddress3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblAddress4)
                    .add(txtAddress4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(calOperationDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblOperationDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(calDeliveryDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblDeliveryDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtDeliveryHour, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(lblColon))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(txtDeliveryMinute, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(lblNote)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(slipNoLabel1)
                        .add(29, 29, 29)
                        .add(customerNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(25, 25, 25)
                        .add(customerName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(319, 319, 319)
                        .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(slipNoLabel1)
                        .add(customerNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(customerName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Thanh start add 2014/06/17
    private boolean checkInput(ArrayList<MstDataDeliveryProduct> arrMstDDP) {
        boolean flg = false;
        for (int i = 0; i < arrMstDDP.size(); i++) {
            if (arrMstDDP.get(i).getDeliveryNum() > 0) {
                flg = true;
            }
        }
        if (flg) {
            if (txtPostalCode.getText().replaceAll("[-_]", "").equals("")) {
                txtPostalCode.requestFocusInWindow();
                return false;
            }
            if (txtAddress1.getText().equals("")) {
                txtAddress1.requestFocusInWindow();
                return false;
            }
            if (txtAddress2.getText().equals("")) {
                txtAddress2.requestFocusInWindow();
                return false;
            }
            if (txtAddress3.getText().equals("")) {
                txtAddress3.requestFocusInWindow();
                return false;
            }
        }

        return true;
    }
    // Thanh end add 2014/06/17

    private void registButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registButtonActionPerformed
        if (products.getCellEditor() != null) {
            products.getCellEditor().stopCellEditing();
        }
        //2014/06/11 Thien An added start
        if (calOperationDate.getDate() == null) {
            for (int row = 0; row < products.getRowCount(); row++) {
                if (Integer.parseInt(products.getValueAt(row, 5).toString()) > 0) {
                    MessageDialog.showMessageDialog(
                            this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "éÛìnì˙"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    calOperationDate.requestFocusInWindow();
                    return;
                }
            }
        }
        if (calDeliveryDate.getDate() == null) {
            for (int row = 0; row < products.getRowCount(); row++) {
                if (Integer.parseInt(products.getValueAt(row, 6).toString()) > 0) {
                    MessageDialog.showMessageDialog(
                            this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "îzëóì˙éû"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    calDeliveryDate.requestFocusInWindow();
                    return;
                }
            }
        }
        //è§ïiéÛìn
        boolean flg = false;
        for (int row = 0; row < products.getRowCount(); row++) {
            if (Integer.parseInt(products.getValueAt(row, 5).toString()) > 0) {
                flg = true;
                break ;
            }
            //IVS_LVTu start add 2016/02/16 Bug #48423
            if (SystemInfo.getDatabase().equals("pos_hair_missionf") || SystemInfo.getDatabase().equals("pos_hair_missionf_dev")) {
                if ((Integer.parseInt(products.getValueAt(row, 5).toString()) + Integer.parseInt(products.getValueAt(row, 6).toString())) > 0) {
                    flg = true;
                    break ;
                }
            }
            //IVS_LVTu end add 2016/02/16 Bug #48423
        }

        if (!flg) {
            MessageDialog.showMessageDialog(
                    this,
                    "éÛìnêîÇ™ì¸óÕÇ≥ÇÍÇƒÇ¢Ç‹ÇπÇÒÅB",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            calDeliveryDate.requestFocusInWindow();
            return;
        }


        //2014/06/11 Thien An addded end
        if (products.getRowCount() == 0) {
            return;
        }
        try {

            ArrayList<MstDataDeliveryProduct> list = setDataUpdate();
            if (list.size() == 0) {
                return;
            } // Thanh start add 2014/06/17
            else if (!this.checkInput(list)) {
                MessageDialog.showMessageDialog(
                        this,
                        "îzëóêîÇÃì¸óÕÇ™Ç†ÇÈéûÇÕÅAèZèäãyÇ—îzëóì˙éûÇì¸óÕÇµÇƒÇ≠ÇæÇ≥Ç¢",
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // Thanh end add 2014/06/17
            MstDataDeliveryProduct mdp = new MstDataDeliveryProduct();
            ConnectionWrapper con = SystemInfo.getConnection();
            // Thanh start edit 2014/06/17
            boolean result = mdp.registMission(list, con);
            // Thanh start edit 2014/06/17
            if (!result) {
                MessageDialog.showMessageDialog(
                        this,
                        MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "è§ïiéÛìn"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                getRootPane().getParent().setVisible(false);
            } else {
                //LUC START EDIT 20131225
                //                if (MessageDialog.showYesNoDialog(this,
                //                        "éÛìnämîFèëÇàÛç¸ÇµÇ‹Ç∑Ç©ÅH",
                //                        this.getTitle(),
                //                        JOptionPane.OK_CANCEL_OPTION) == 0) {
                //                     //è§ïiéÛìnämîFèë
                //                    PrintConfirm pr = new PrintConfirm();
                //                    if (!pr.canPrint()) {
                //                        getRootPane().getParent().setVisible(false);
                //                        return;
                //                    }
                //                    printReceiptGeneral(pr);
                //                }

//                ConfirmDeliveryPrintPanel frm = new ConfirmDeliveryPrintPanel(this);
//                SwingUtil.openAnchorDialog(null, true, frm, "Åyè§ïiéÛìnâÊñ Åz", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);
//                //Flg = 0:not print
//                if(this.printFlg==0) {
//                    return;
//                }
//                //Flg = 1,2:ëﬁìXâÊñ Çï\é¶ÅB
//                //Flg = 2:è§ïiéÛìnâÊñ Çï\é¶ÅB
//                if(this.printFlg==2) {
//                    PrintConfirm pr = new PrintConfirm();
//                    if (!pr.canPrint()) {
//                        getRootPane().getParent().setVisible(false);
//                        return;
//                    }
//                    printReceiptGeneral(pr);
//                    if(this.isCopy) {
//                        PrintConfirm prCopy = new PrintConfirm();
//                        printReceiptGeneral(prCopy);   
//                    }
//                }
                //LUC END EDIT 20131225

                JCheckBox checkbox = new JCheckBox("çTÇ¶àÛç¸");
                String message = "éÛìnämîFèëÇàÛç¸ÇµÇ‹Ç∑Ç©ÅH";
                Object[] params = {message, checkbox};
                int n = JOptionPane.showConfirmDialog(this, params, this.getTitle(), JOptionPane.YES_NO_OPTION);
                if (n == JOptionPane.YES_OPTION) {
                    PrintConfirm pr = new PrintConfirm();
                    if (!pr.canPrint()) {
                        getRootPane().getParent().setVisible(false);
                        return;
                    }
                    printReceiptGeneral(pr, 0);
                    boolean isCopy = checkbox.isSelected();
                    if (isCopy) {
                        pr = new PrintConfirm();
                        printReceiptGeneral(pr, 1);
                    }

                }
                if (n != JOptionPane.CLOSED_OPTION) {
                    getRootPane().getParent().setVisible(false);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(HairInputAccountProductDelivery.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_registButtonActionPerformed

    private void backButtonbackPrevious(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonbackPrevious
        ((JDialog) this.getParent().getParent().getParent().getParent()).setVisible(false);
    }//GEN-LAST:event_backButtonbackPrevious

    private void calOperationDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_calOperationDateItemStateChanged
    }//GEN-LAST:event_calOperationDateItemStateChanged

    private void calOperationDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_calOperationDateFocusGained
        calOperationDate.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_calOperationDateFocusGained

    private void productsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_productsPropertyChange
        // TODO add your handling code here:
        int row = products.getSelectedRow();
        int col = products.getSelectedColumn();
        MstDataDeliveryProduct mdp = new MstDataDeliveryProduct();
        if (row >= 0) {
            mdp = listProduct.get(row);
        }
        if (col == 5) {

            Integer productNum = Integer.parseInt(products.getValueAt(row, col).toString());
            Integer deliveryNum = Integer.parseInt(products.getValueAt(row, 6).toString()); //2014/06/09 An added
            //2014/06/09 Thien An edited start
//            if (productNum < 0 || productNum > mdp.getUsedNum()) {
//                products.setValueAt(mdp.getUsedNum().intValue() , row, col);
//            }
            if (productNum < 0 || productNum > mdp.getUsedNum() - deliveryNum) {
                products.setValueAt(mdp.getUsedNum().intValue() - deliveryNum, row, col);
            }
            //2014/06/09 Thien An edited end
        }

        //2014/06/05 Thien An added start
        if (col == 6) {
            Integer productNum = Integer.parseInt(products.getValueAt(row, 5).toString());
            Integer deliveryNum = Integer.parseInt(products.getValueAt(row, col).toString());
            if (deliveryNum < 0 || deliveryNum > mdp.getUsedNum() - productNum) {
                products.setValueAt(mdp.getUsedNum().intValue() - productNum, row, col);
            }
        }
        //2014/06/05 Thien An added end

        if (products.getCellEditor() != null) {
            products.getCellEditor().stopCellEditing();
        }
    }//GEN-LAST:event_productsPropertyChange

    private void calDeliveryDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_calDeliveryDateItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_calDeliveryDateItemStateChanged

    private void calDeliveryDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_calDeliveryDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_calDeliveryDateFocusGained

    //2014/06/06 Thien An added start
    private void txtDeliveryHourPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtDeliveryHourPropertyChange
        // TODO add your handling code here:
        if (txtDeliveryHour.getText().equals("") || parseInt(txtDeliveryHour.getText()) > 23) {
            txtDeliveryHour.setText("00");
        }
    }//GEN-LAST:event_txtDeliveryHourPropertyChange

    private void txtDeliveryMinutePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtDeliveryMinutePropertyChange
        // TODO add your handling code here:
        if (txtDeliveryMinute.getText().equals("") || parseInt(txtDeliveryMinute.getText()) > 59) {
            txtDeliveryMinute.setText("00");
        }
    }//GEN-LAST:event_txtDeliveryMinutePropertyChange

    private void btnSearchAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchAddressActionPerformed
        SearchAddressDialog sa = new SearchAddressDialog(parentFrame, true);
        sa.setVisible(true);

        if (!sa.getSelectedPrefecture().equals("")) {
            txtPostalCode.setText(sa.getSelectedPostalCode());
            txtAddress1.setText(sa.getSelectedPrefecture());
            txtAddress2.setText(sa.getSelectedCity());
            txtAddress3.setText(sa.getSelectedTown().replaceAll("Åi.+", ""));
        }

        sa = null;
    }//GEN-LAST:event_btnSearchAddressActionPerformed

    // Thanh start add 2014/06/18
    private void txtPostalCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPostalCodeFocusLost
        String temp = txtPostalCode.getText().replaceAll("[-_]", "");

        //óXï÷î‘çÜÇ™ì¸ò^Ç≥ÇÍÇƒÇ¢Ç»Ç¢èÍçá
        if (temp.equals("") || temp.length() != 7) {
            txtAddress1.setText("");
            txtAddress2.setText("");
            txtAddress3.setText("");
        } //óXï÷î‘çÜÇ™ì¸ò^Ç≥ÇÍÇƒÇ¢ÇÈèÍçá
        else {
            AddressUtil au = new AddressUtil();

            au.setPostalCode(temp);

            try {
                ConnectionWrapper con = SystemInfo.getBaseConnection();

                //óXï÷î‘çÜÇ©ÇÁèZèäÇéÊìæ
                if (au.getDataByPostalCode(con)) {
                    txtAddress1.setText(au.getPrefectureName());
                    txtAddress2.setText(au.getCityName());
                    txtAddress3.setText(au.getTownName().replaceAll("Åi.+", ""));
                } else {
                    txtAddress1.setText("");
                    txtAddress2.setText("");
                    txtAddress3.setText("");
                }
            } catch (SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }
    }//GEN-LAST:event_txtPostalCodeFocusLost
    // Thanh start end 2014/06/18
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton btnSearchAddress;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo calDeliveryDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo calOperationDate;
    private com.geobeck.swing.JFormattedTextFieldEx customerName;
    private com.geobeck.swing.JFormattedTextFieldEx customerNo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel lblAddress1;
    private javax.swing.JLabel lblAddress2;
    private javax.swing.JLabel lblAddress3;
    private javax.swing.JLabel lblAddress4;
    private javax.swing.JLabel lblColon;
    private javax.swing.JLabel lblDeliveryDate;
    private javax.swing.JLabel lblNote;
    private javax.swing.JLabel lblOperationDate;
    private javax.swing.JLabel lblPostalCode;
    private com.geobeck.swing.JTableEx products;
    private javax.swing.JScrollPane productsScrollPane1;
    private javax.swing.JButton registButton;
    private javax.swing.JLabel slipNoLabel1;
    private com.geobeck.swing.JFormattedTextFieldEx txtAddress1;
    private com.geobeck.swing.JFormattedTextFieldEx txtAddress2;
    private com.geobeck.swing.JFormattedTextFieldEx txtAddress3;
    private com.geobeck.swing.JFormattedTextFieldEx txtAddress4;
    private com.geobeck.swing.JFormattedTextFieldEx txtDeliveryHour;
    private com.geobeck.swing.JFormattedTextFieldEx txtDeliveryMinute;
    private com.geobeck.swing.JFormattedTextFieldEx txtPostalCode;
    // End of variables declaration//GEN-END:variables
    private MstDataDeliveryProduct sm = new MstDataDeliveryProduct();

    /**
     * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(registButton);
        SystemInfo.addMouseCursorChange(backButton);

    }

    /**
     * ÉRÉìÉ|Å[ÉlÉìÉgÇÃäeÉäÉXÉiÅ[ÇÉZÉbÉgÇ∑ÇÈÅB
     */
    private void setListener() {
        customerNo.addKeyListener(SystemInfo.getMoveNextField());
        customerNo.addFocusListener(SystemInfo.getSelectText());
        customerName.addKeyListener(SystemInfo.getMoveNextField());
        customerName.addFocusListener(SystemInfo.getSelectText());
        calOperationDate.addKeyListener(SystemInfo.getMoveNextField());
        calOperationDate.addFocusListener(SystemInfo.getSelectText());
    }

    private String getDate(java.util.Date date) {
        DateFormat df = new SimpleDateFormat("yyyy/MM/dd");
        if (date != null) {
            return df.format(date);
        } else {
            return "";
        }
    }

    /**
     * çƒï\é¶ÇçsÇ§ÅB
     */
    private void refresh() {
        try {
            customerNo.setText(customer.getCustomerNo());
            customerName.setText(customer.getCustomerName(0) + " " + customer.getCustomerName(1));
            java.util.GregorianCalendar delivery = new java.util.GregorianCalendar();
            delivery.setTime(calOperationDate.getDate());

            //2014/06/06 Thien An added start
            txtPostalCode.setText(customer.getPostalCode());
            txtAddress1.setText(customer.getAddress(0));
            txtAddress2.setText(customer.getAddress(1));
            txtAddress3.setText(customer.getAddress(2));
            txtAddress4.setText(customer.getAddress(3));
            //2014/06/06 Thien An added end

            //É}ÉXÉ^ÇÉfÅ[É^ÉxÅ[ÉXÇ©ÇÁì«Ç›çûÇﬁ
            if (flgSlipNo) {
                listProduct = sm.loadOnlySlipNo(SystemInfo.getConnection(), customer.getCustomerID(), this.shopID, this.slipNo);
            } else {
                listProduct = sm.load(SystemInfo.getConnection(), customer.getCustomerID(), this.shopID, this.slipNo);
            }
            //ÉeÅ[ÉuÉãÇ…É}ÉXÉ^ÉfÅ[É^Çï\é¶Ç∑ÇÈ   
            this.initProductsColumn();
            this.showTableData(listProduct);
            //ì¸óÕÇÉNÉäÉAÇ∑ÇÈ
            customerNo.requestFocusInWindow();
        } catch (Exception ex) {
            Logger.getLogger(HairInputAccountProductDelivery.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * ÉeÅ[ÉuÉãÇ…É}ÉXÉ^ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
     */
    private void showTableData(ArrayList<MstDataDeliveryProduct> listProduct) {
        DefaultTableModel model = (DefaultTableModel) products.getModel();
        //ëSçsçÌèú
        model.setRowCount(0);
        products.removeAll();
        for (MstDataDeliveryProduct md : listProduct) {
            Object[] rowData = {getDate(md.getSaleDate()) // çwì¸ì˙ 
                , md.getProductName(), md.getSalesNum().intValue(), md.getUsedNum().intValue() // écêî  îÃîÑì˙éûì_Ç≈ÇÕÇ‹ÇæìnÇµÇƒÇ¢Ç»Ç¢ÇÃÇ≈écêîÇÕîÃîÑêîÇ…Ç»ÇËÇ‹Ç∑ÅB
                , (md.getSlipNo() == this.slipNo) ? md.getPrice().intValue() * md.getSalesNum().intValue() : md.getAmount().doubleValue() // écã‡äz Ç±ÇøÇÁÇ‡îÃîÑì˙éûì_Ç≈ÇÕÇ‹ÇæìnÇµÇƒÇ¢Ç»Ç¢ÇÃÇ≈écã‡äzÇÕîÃîÑã‡äzÇ…Ç»ÇËÇ‹Ç∑ÅB
                // , md.getPickNum().intValue(), // éÛìnêî 
                , 0 // éÛìnêî 
                , 0 // ëÓîzêî 2014/06/10 Thien An added
                //2014/06/10 Thien An edited start
                //, getStaffComboBox(md.getStaffs().getIndexByID(md.getStaffID()))
                , getStaffComboBox(0)
            //2014/06/10 Thien An edited end
            };
            model.addRow(rowData);
        }
    }

    private void initProductsColumn() {
        //óÒÇÃïùÇê›íËÇ∑ÇÈÅB
        //2014/06/25 Thien An edited start
        if (SystemInfo.getDatabase().equals("pos_hair_missionf") || SystemInfo.getDatabase().equals("pos_hair_missionf_dev")) {
            jPanel1.setVisible(true);

            products.getColumnModel().getColumn(0).setPreferredWidth(80);   // çwì¸ì˙
            products.getColumnModel().getColumn(1).setPreferredWidth(170);  // è§ïiñº
            products.getColumnModel().getColumn(2).setPreferredWidth(70);   // çwì¸êî
            products.getColumnModel().getColumn(3).setPreferredWidth(70);   // écêî
            products.getColumnModel().getColumn(4).setPreferredWidth(90);   // écã‡äz
            products.getColumnModel().getColumn(5).setPreferredWidth(70);   // éÛìnêî
            products.getColumnModel().getColumn(6).setPreferredWidth(70);   // ëÓëóêî
            products.getColumnModel().getColumn(7).setPreferredWidth(100);  // íSìñé“
        } else {
            lblPostalCode.setVisible(false);
            txtPostalCode.setVisible(false);
            btnSearchAddress.setVisible(false);
            lblAddress1.setVisible(false);
            txtAddress1.setVisible(false);
            lblAddress2.setVisible(false);
            txtAddress2.setVisible(false);
            lblAddress3.setVisible(false);
            txtAddress3.setVisible(false);
            lblAddress4.setVisible(false);
            txtAddress4.setVisible(false);

            lblOperationDate.setVisible(true);
            calOperationDate.setVisible(true);

            lblDeliveryDate.setVisible(false);
            calDeliveryDate.setVisible(false);
            txtDeliveryHour.setVisible(false);
            lblColon.setVisible(false);
            txtDeliveryMinute.setVisible(false);
            lblNote.setVisible(false);

            products.getColumnModel().getColumn(0).setPreferredWidth(90);   // çwì¸ì˙
            products.getColumnModel().getColumn(1).setPreferredWidth(180);  // è§ïiñº
            products.getColumnModel().getColumn(2).setPreferredWidth(80);   // çwì¸êî
            products.getColumnModel().getColumn(3).setPreferredWidth(80);   // écêî
            products.getColumnModel().getColumn(4).setPreferredWidth(100);   // écã‡äz
            products.getColumnModel().getColumn(5).setPreferredWidth(80);   // éÛìnêî
            products.getColumnModel().getColumn(7).setPreferredWidth(110);  // íSìñé“        

            // ëÓëóêî
            products.getColumnModel().getColumn(6).setMinWidth(0);
            products.getColumnModel().getColumn(6).setMaxWidth(0);
            products.getColumnModel().getColumn(6).setPreferredWidth(0);

            this.setSize(820, 470);
        }
        //2014/06/25 Thien An edited end
    }

    private JCheckBox getStaffDesignatedFlag(boolean designated) {
        JCheckBox designatedFlg = new JCheckBox();
        designatedFlg.setSelected(designated);
        designatedFlg.setOpaque(false);
        designatedFlg.setHorizontalAlignment(SwingConstants.CENTER);
        return designatedFlg;
    }

    public boolean isClose() {
        return this.isClose;
    }

    /**
     * ÉXÉ^ÉbÉtÉRÉìÉ{ÇéÊìæÇ∑ÇÈ
     */
    private JComboBox getStaffComboBox(Integer staffID) {
        //2014/06/10 Thien An edited start
        //JComboBox staffCombo = new JComboBox(sm.getStaffs().toArray());
        JComboBox staffCombo = new JComboBox(sm.getStaffsNotBlank().toArray());
        //2014/06/10 Thien An edited end
        staffCombo.setSelectedIndex(staffID);
        staffCombo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        return staffCombo;
    }

    private ArrayList<MstDataDeliveryProduct> setDataUpdate() {
        Integer productNum = 0;
        Integer deliveryNum = 0; //2014/06/06 Thien An added

        JComboBox jcmb = new JComboBox();
        MstDataDeliveryProduct mdp = new MstDataDeliveryProduct();
        MstStaff staff = new MstStaff();
        ArrayList<MstDataDeliveryProduct> result = new ArrayList<MstDataDeliveryProduct>();
        for (int i = 0; i < this.products.getRowCount(); i++) {
            productNum = Integer.parseInt(this.products.getValueAt(i, 5).toString());
            deliveryNum = Integer.parseInt(this.products.getValueAt(i, 6).toString()); //2014/06/06 Thien An added
            jcmb = (JComboBox) this.products.getValueAt(i, 7);
            mdp = listProduct.get(i);
            if (productNum + deliveryNum < 1) { //2014/06/06 Thien An edited
                continue;
            }
            //if (jcmb.getSelectedIndex() > 0) { //2014/06/10 Thien An deleted
            staff = (MstStaff) jcmb.getSelectedItem();
            mdp.setStaff(staff);
            //} //2014/06/10 Thien An deleted
            mdp.setStatus(0);
            mdp.setProductNum(productNum);
            //2014/06/06 Thien An added start
            mdp.setDeliveryNum(deliveryNum);
            //2014/06/25 Thien An edited start
            if (SystemInfo.getDatabase().equals("pos_hair_missionf") || SystemInfo.getDatabase().equals("pos_hair_missionf_dev")) {
                if (calDeliveryDate.getDateStr() != null) {
                    mdp.setDeliveryDate(calDeliveryDate.getDateStr("-") + " " + txtDeliveryHour.getText() + ":" + txtDeliveryMinute.getText() + ":00");
                }
                mdp.setPostalCode(txtPostalCode.getText().replace("-", ""));
                mdp.setAddress1(txtAddress1.getText());
                mdp.setAddress2(txtAddress2.getText());
                mdp.setAddress3(txtAddress3.getText());
                mdp.setAddress4(txtAddress4.getText());
            }
            //2014/06/25 Thien An edited end
            //2014/06/06 Thien An added end
            mdp.setOperationDate(calOperationDate.getDate());
            result.add(mdp);
        }
        return result;
    }

    private void printReceiptGeneral(PrintConfirm pr, Integer flag) {
        pr.setCustomer(this.getCustomer());
        DefaultTableModel model = (DefaultTableModel) products.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String productName = (String) model.getValueAt(i, 1);
            Integer purchasesNo = (Integer) model.getValueAt(i, 2); //da mua

            Integer stillNum = (Integer) model.getValueAt(i, 3); // con lai truoc giao
            //Double amountNo = (Double) model.getValueAt(i, 4); 
            Integer remainingNo = (Integer) model.getValueAt(i, 5); //vua giao

            Integer remainingNo2 = (Integer) model.getValueAt(i, 6); // vua giao 2 //2014/06/10 Thien An added

            //2014/06/10 Thien An edited
            //Integer productNumUsed = stillNum - remainingNo ; // con lai sau khi giao
            Integer productNumUsed = stillNum - remainingNo - remainingNo2; // con lai sau khi giao

            //2014/06/10 Thien An edited
            //Integer totalpick =(Integer) purchasesNo - stillNum + remainingNo ; // tong so da giao den hien tai
            Integer totalpick = (Integer) purchasesNo - stillNum + remainingNo + remainingNo2; // tong so da giao den hien tai

            //2014/06/20 Thien An edited
            //if(remainingNo <1) {continue;}
            if (remainingNo + remainingNo2 < 1) {
                continue;
            }

            //2014/06/10 Thien An edited
            //String staffName = ((MstStaff) ((JComboBox) model.getValueAt(i, 6)).getSelectedItem() != null ? ((MstStaff) ((JComboBox) model.getValueAt(i, 6)).getSelectedItem()).getFullStaffName() : "");
            String staffName = ((MstStaff) ((JComboBox) model.getValueAt(i, 7)).getSelectedItem() != null ? ((MstStaff) ((JComboBox) model.getValueAt(i, 7)).getSelectedItem()).getFullStaffName() : "");

            pr.add(new DeliveryConfirmData(productName, staffName, purchasesNo, productNumUsed, totalpick, remainingNo));
        }

        if (model.getRowCount() > 0) {
            switch (pr.getReceiptSetting().getReceiptSize()) {
                case 0:
                    pr.setReceiptType(PrintConfirm.ReceiptType.LARGE);
                    break;
                case 1:
                    pr.setReceiptType(PrintConfirm.ReceiptType.NORMAL);
                    break;
            }
            pr.print(flag);
        }
    }
}
