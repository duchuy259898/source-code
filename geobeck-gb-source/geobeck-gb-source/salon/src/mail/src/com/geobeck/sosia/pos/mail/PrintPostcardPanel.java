/*
 * PrintPostcardPanel.java
 *
 * Created on 2006/10/23, 12:23
 */

package com.geobeck.sosia.pos.mail;

import com.geobeck.sosia.pos.master.customer.MstCustomer;
import java.io.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.util.*;
import com.lowagie.text.pdf.*;

import com.geobeck.sosia.pos.system.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.report.util.*;
import com.geobeck.sosia.pos.hair.customer.*;
import com.geobeck.sosia.pos.hair.report.*;
import com.geobeck.sosia.pos.report.custom.ModestyReportAnalysisListPanel;
import com.geobeck.sosia.pos.util.MessageUtil;

/**
 *
 * @author  katagiri
 */
public class PrintPostcardPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private static final Float DEFAULT_POSTAL_TOP	    = 12.0f;
	private static final Float DEFAULT_POSTAL_LEFT	    = 44.0f;
	private static final Float DEFAULT_POSTAL_SIZE	    = 14.0f;
	
	private static final Float DEFAULT_ADDRESS_TOP	    = 50.0f;
	private static final Float DEFAULT_ADDRESS_LEFT	    = 20.0f;
	private static final Float DEFAULT_ADDRESS_SIZE	    = 12.0f;
	
	private static final Float DEFAULT_NAME_TOP	    = 90.0f;
	private static final Float DEFAULT_NAME_LEFT	    = 30.0f;
	private static final Float DEFAULT_NAME_SIZE	    = 24.0f;
	
	private static final Float LOCATION_CONVERT_RATE    = 3.13f;
	private static final Float FONT_SIZE_CONVERT_RATE   = 1.00f;
	
	/** Creates new form PrintPostcardPanel */
	public PrintPostcardPanel(Object target, ArrayList<MstCustomer> cusArray)
        {
            this(cusArray);
            
            if (target instanceof MstShop) {
                this.shopID = ((MstShop)target).getShopID();
            }
        }   
        
	public PrintPostcardPanel(ArrayList<MstCustomer> cusArray)
	{
	    super();
	    initComponents();
	    addMouseCursorChange();
	    this.setSize(833, 691);
	    this.setPath("メール機能 >> 条件検索");
	    this.setTitle("ハガキ作成");
	    this.cusArray	=	cusArray;
	    this.setDefault();
	    this.initCustomersTable();
	    this.setPreviewText();
	    this.showPreview();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        addressTop = new javax.swing.JTextField();
        ((PlainDocument)addressTop.getDocument()).setDocumentFilter(
            new CustomFilter(6, CustomFilter.NUMERIC));
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        addressLeft = new javax.swing.JTextField();
        ((PlainDocument)addressLeft.getDocument()).setDocumentFilter(
            new CustomFilter(6, CustomFilter.NUMERIC));
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        addressSize = new javax.swing.JTextField();
        ((PlainDocument)addressSize.getDocument()).setDocumentFilter(
            new CustomFilter(3, CustomFilter.NUMERIC));
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        nameTop = new javax.swing.JTextField();
        ((PlainDocument)nameTop.getDocument()).setDocumentFilter(
            new CustomFilter(6, CustomFilter.NUMERIC));
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        nameLeft = new javax.swing.JTextField();
        ((PlainDocument)nameLeft.getDocument()).setDocumentFilter(
            new CustomFilter(6, CustomFilter.NUMERIC));
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        nameSize = new javax.swing.JTextField();
        ((PlainDocument)nameSize.getDocument()).setDocumentFilter(
            new CustomFilter(3, CustomFilter.NUMERIC));
        jLabel21 = new javax.swing.JLabel();
        previewButton = new javax.swing.JButton();
        outputButton = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        customerNoPrint = new javax.swing.JComboBox();
        previewPanel = new com.geobeck.swing.ImagePanel();
        nameLabel = new javax.swing.JLabel();
        addressPanel = new javax.swing.JPanel();
        addressLabel0 = new javax.swing.JLabel();
        addressLabel1 = new javax.swing.JLabel();
        addressLabel2 = new javax.swing.JLabel();
        addressLabel3 = new javax.swing.JLabel();
        customerNoLabel = new javax.swing.JLabel();
        customersScrollPane = new javax.swing.JScrollPane();
        customersTable = new com.geobeck.swing.JTableEx();
        closeButton = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        targetCount = new javax.swing.JLabel();
        historyButton = new javax.swing.JButton();
        dmTitle = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();

        setFocusCycleRoot(true);

        jPanel4.setOpaque(false);

        jPanel2.setOpaque(false);

        jLabel8.setText("【住　所】");

        jLabel9.setText("上");

        addressTop.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel10.setText("mm");

        jLabel11.setText("左");

        addressLeft.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel12.setText("mm");

        jLabel13.setText("文字サイズ");

        addressSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel14.setText("ポイント");

        jLabel15.setText("【氏　名】");

        jLabel16.setText("上");

        nameTop.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel17.setText("mm");

        jLabel18.setText("左");

        nameLeft.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel19.setText("mm");

        jLabel20.setText("文字サイズ");

        nameSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel21.setText("ポイント");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(0, 0, 0)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(addressTop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(1, 1, 1)
                        .add(jLabel10)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel11)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(addressLeft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(1, 1, 1)
                        .add(jLabel12)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel13)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(addressSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(1, 1, 1)
                        .add(jLabel14))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel15)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 9, Short.MAX_VALUE)
                        .add(jLabel16)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(nameTop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(1, 1, 1)
                        .add(jLabel17)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel18)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(nameLeft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(1, 1, 1)
                        .add(jLabel19)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel20)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(nameSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(1, 1, 1)
                        .add(jLabel21)))
                .add(33, 33, 33))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(addressSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel13)
                    .add(jLabel12)
                    .add(addressLeft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel11)
                    .add(jLabel10)
                    .add(addressTop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9)
                    .add(jLabel8))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 16, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel21)
                    .add(jLabel20)
                    .add(jLabel19)
                    .add(nameLeft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel18)
                    .add(jLabel17)
                    .add(nameTop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(nameSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel16)
                    .add(jLabel15)))
        );

        previewButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
        previewButton.setBorderPainted(false);
        previewButton.setContentAreaFilled(false);
        previewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });

        outputButton.setIcon(SystemInfo.getImageIcon("/button/print/output_pdf_off.jpg"));
        outputButton.setBorderPainted(false);
        outputButton.setContentAreaFilled(false);
        outputButton.setPressedIcon(SystemInfo.getImageIcon("/button/print/output_pdf_on.jpg"));
        outputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputButtonActionPerformed(evt);
            }
        });

        jLabel22.setText("顧客No.");

        customerNoPrint.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "出力する", "出力しない" }));
        customerNoPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNoPrintActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(customerNoPrint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(previewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(outputButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 19, Short.MAX_VALUE))
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 26, Short.MAX_VALUE)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel22, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                        .add(customerNoPrint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(outputButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                        .add(previewButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)))
                .addContainerGap())
        );

        previewPanel.setAdjust(true);
        previewPanel.setImage(new javax.swing.ImageIcon(getClass().getResource("/images/common/mail/post_card.png")));
        previewPanel.setKeepProportion(true);
        previewPanel.setOpaque(false);
        previewPanel.setLayout(null);

        nameLabel.setFont(new java.awt.Font("ＭＳ Ｐ明朝", 0, 24)); // NOI18N
        previewPanel.add(nameLabel);
        nameLabel.setBounds(95, 310, 350, 50);

        addressPanel.setOpaque(false);

        addressLabel0.setFont(new java.awt.Font("ＭＳ Ｐ明朝", 0, 12)); // NOI18N

        addressLabel1.setFont(new java.awt.Font("ＭＳ Ｐ明朝", 0, 12)); // NOI18N

        addressLabel2.setFont(new java.awt.Font("ＭＳ Ｐ明朝", 0, 12)); // NOI18N

        addressLabel3.setFont(new java.awt.Font("ＭＳ Ｐ明朝", 0, 12));

        org.jdesktop.layout.GroupLayout addressPanelLayout = new org.jdesktop.layout.GroupLayout(addressPanel);
        addressPanel.setLayout(addressPanelLayout);
        addressPanelLayout.setHorizontalGroup(
            addressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(addressPanelLayout.createSequentialGroup()
                .add(addressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(addressLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addressLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                .addContainerGap())
            .add(addressLabel0, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(addressPanelLayout.createSequentialGroup()
                .add(addressLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        addressPanelLayout.setVerticalGroup(
            addressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(addressPanelLayout.createSequentialGroup()
                .add(addressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(addressPanelLayout.createSequentialGroup()
                        .add(28, 28, 28)
                        .add(addressLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, 0)
                        .add(addressLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(addressLabel0, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, 0)
                .add(addressLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );

        previewPanel.add(addressPanel);
        addressPanel.setBounds(65, 130, 290, 230);

        customerNoLabel.setFont(new java.awt.Font("ＭＳ Ｐ明朝", 0, 12)); // NOI18N
        customerNoLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        previewPanel.add(customerNoLabel);
        customerNoLabel.setBounds(170, 360, 177, 15);

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "<html>出力<br>対象</html> ", "顧客情報", "氏名", "住所", "家族"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.getTableHeader().setReorderingAllowed(false);
        customersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        SwingUtil.setJTableHeaderRenderer(customersTable, SystemInfo.getTableHeaderRenderer());
        customersTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        customersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                customersTableMouseReleased(evt);
            }
        });
        customersTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customersTableKeyReleased(evt);
            }
        });
        customersScrollPane.setViewportView(customersTable);

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/back_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/back_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel23.setText("【対象人数】 ");

        targetCount.setFont(new java.awt.Font("MS UI Gothic", 0, 14));
        targetCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        targetCount.setText("9999 人");

        historyButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_history_off.jpg"));
        historyButton.setBorderPainted(false);
        historyButton.setContentAreaFilled(false);
        historyButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_history_on.jpg"));
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        jLabel25.setText("DMタイトル");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, customersScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 414, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(30, 30, 30))
                            .add(layout.createSequentialGroup()
                                .add(jLabel25)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel23)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(targetCount))
                            .add(layout.createSequentialGroup()
                                .add(dmTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 191, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(historyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .add(33, 33, 33)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(previewPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(targetCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(dmTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(historyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(customersScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(24, 24, 24)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(previewPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed

        historyButton.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            registDmHistory();
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

    }//GEN-LAST:event_historyButtonActionPerformed

	private void customersTableMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_customersTableMouseReleased
	{//GEN-HEADEREND:event_customersTableMouseReleased
	    this.setPreviewText();
	    this.showPreview();
	}//GEN-LAST:event_customersTableMouseReleased

	private void customersTableKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_customersTableKeyReleased
	{//GEN-HEADEREND:event_customersTableKeyReleased
	    this.setPreviewText();
	    this.showPreview();
	}//GEN-LAST:event_customersTableKeyReleased

	private void previewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_previewButtonActionPerformed
	{//GEN-HEADEREND:event_previewButtonActionPerformed
	    this.showPreview();
	}//GEN-LAST:event_previewButtonActionPerformed

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeButtonActionPerformed
	{//GEN-HEADEREND:event_closeButtonActionPerformed
            boolean isDialog = false;
            isDialog = isDialog || this.getOpener() instanceof ReappearancePredictionPanel;
            isDialog = isDialog || this.getOpener() instanceof StaffShopRankingDecilePanel;
            isDialog = isDialog || this.getOpener() instanceof KarteAnalysisPanel;
            isDialog = isDialog || this.getOpener() instanceof Ito3DCustomerListPanel;
            //nhanvt start add 20150126 GB_Mashu Task #34581
            isDialog = isDialog || this.getOpener() instanceof MasherRankingPanel;
            //nhanvt end add 20150126 GB_Mashu Task #34581
			isDialog = isDialog || this.getOpener() instanceof ModestyReportAnalysisListPanel;
			
            
            if (isDialog) {
		((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
	    } else {
		this.showOpener();
	    }
	}//GEN-LAST:event_closeButtonActionPerformed

	private void outputButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_outputButtonActionPerformed
	{//GEN-HEADEREND:event_outputButtonActionPerformed
	    this.setSetting();
	    this.outputPDF();
	}//GEN-LAST:event_outputButtonActionPerformed

        private void customerNoPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNoPrintActionPerformed
            this.showPreview();
        }//GEN-LAST:event_customerNoPrintActionPerformed
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressLabel0;
    private javax.swing.JLabel addressLabel1;
    private javax.swing.JLabel addressLabel2;
    private javax.swing.JLabel addressLabel3;
    private javax.swing.JTextField addressLeft;
    private javax.swing.JPanel addressPanel;
    private javax.swing.JTextField addressSize;
    private javax.swing.JTextField addressTop;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel customerNoLabel;
    private javax.swing.JComboBox customerNoPrint;
    private javax.swing.JScrollPane customersScrollPane;
    private com.geobeck.swing.JTableEx customersTable;
    private javax.swing.JTextField dmTitle;
    private javax.swing.JButton historyButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameLeft;
    private javax.swing.JTextField nameSize;
    private javax.swing.JTextField nameTop;
    private javax.swing.JButton outputButton;
    private javax.swing.JButton previewButton;
    private com.geobeck.swing.ImagePanel previewPanel;
    private javax.swing.JLabel targetCount;
    // End of variables declaration//GEN-END:variables
	
	public Double mm2dot(Double d) {
	    return d / 25.4 * 72;
	}
	
	private	PostcardSetting ps = new PostcardSetting();
	private	ArrayList<MstCustomer> cusArray = new ArrayList<MstCustomer>();
	
	private Integer selectedIndex = 0;
	
	private	Integer shopID = 0;
        
	/**
	 * ハガキ印刷画面用FocusTraversalPolicy
	 */
	private	PrintPostcardFocusTraversalPolicy ftp = new PrintPostcardFocusTraversalPolicy();
	
	/**
	 * ハガキ印刷画面用FocusTraversalPolicyを取得する。
	 * @return ハガキ印刷画面用FocusTraversalPolicy
	 */
	public PrintPostcardFocusTraversalPolicy getFocusTraversalPolicy()
	{
	    return ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
	    SystemInfo.addMouseCursorChange(closeButton);
	    SystemInfo.addMouseCursorChange(previewButton);
	    SystemInfo.addMouseCursorChange(outputButton);
	    SystemInfo.addMouseCursorChange(historyButton);
	}
	
	private void setDefault()
	{
	    addressTop.setText(DEFAULT_ADDRESS_TOP.toString());
	    addressLeft.setText(DEFAULT_ADDRESS_LEFT.toString());
	    addressSize.setText(DEFAULT_ADDRESS_SIZE.toString());

	    nameTop.setText(DEFAULT_NAME_TOP.toString());
	    nameLeft.setText(DEFAULT_NAME_LEFT.toString());
	    nameSize.setText(DEFAULT_NAME_SIZE.toString());
	}
	
	private void initCustomersTable()
	{
	    DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
	    if( customersTable.getCellEditor() != null ) customersTable.getCellEditor().stopCellEditing();
	    SwingUtil.clearTable(customersTable);

	    for (MstCustomer mc : cusArray) {
		model.addRow(new Object[]
		{
		    getTargetFlag(true),
                    getUserSearchButton(mc),
                    mc,
                    mc.getFullAddress(),
                    mc.existsFamily() ? "　●" : ""
		});
	    }
	    
            setTargetCount();
	    
	}
	
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
	    //列の幅を設定する。
	    customersTable.getColumnModel().getColumn(0).setPreferredWidth(40);
	    customersTable.getColumnModel().getColumn(1).setPreferredWidth(65);
	    customersTable.getColumnModel().getColumn(3).setPreferredWidth(200);
	    customersTable.getColumnModel().getColumn(4).setPreferredWidth(35);
	}
	
	/**
	 * 対象フラグを取得する
	 */
	private JCheckBox getTargetFlag(boolean isSelected)
	{
		JCheckBox check = new JCheckBox();
		check.setSelected( isSelected );
		check.setOpaque( false );
		check.setHorizontalAlignment(SwingConstants.CENTER);
		check.addActionListener(
			new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                setTargetCount();
			    }
                        });
		return check;
	}
        
        private void setTargetCount() {
            
            int count = 0;
            
	    for (int i = 0; i < customersTable.getRowCount(); i++) {
		if(((JCheckBox)customersTable.getValueAt(i, 0)).isSelected()){
                    count++;
		}
	    }
            
	    targetCount.setText(count + " 人");
        }
        
        /**
	 * ユーザ検索ボタンを取得する
	 */
	private JButton getUserSearchButton(final MstCustomer mc)
	{
		JButton		searchButton	=	new JButton();
		searchButton.setBorderPainted(false);
		searchButton.setContentAreaFilled(false);
		searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
		searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
		searchButton.setSize(48, 25);
		searchButton.addActionListener(new java.awt.event.ActionListener()
		{
		    public void actionPerformed(java.awt.event.ActionEvent evt)
		    {
			MstCustomerPanel mcp = null;
                        
                        try {

                            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            mcp = new MstCustomerPanel(mc.getCustomerID(), true, true);
                            SwingUtil.openAnchorDialog( (JFrame)null, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );

                        } finally {
                            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        }
                        
			mcp = null;

			int row = customersTable.getSelectedRow();

			try {
			    MstCustomer cus = new MstCustomer(mc.getCustomerID());
			    if (cus.load(SystemInfo.getConnection())) {
                                cus.setFamilyList(mc.getFamilyList());
				cusArray.set(row, cus);
			    }
			} catch (Exception e) {
			}

			DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
			model.setValueAt(cusArray.get(row).getFullAddress(), row, 3);
		    }
		});
		return searchButton;
	}        
	
	private void outputPDF()
	{
	    try
	    {
		com.lowagie.text.Rectangle r = new com.lowagie.text.Rectangle(mm2dot(100d).intValue(), mm2dot(148d).intValue());
		com.lowagie.text.Document d = new com.lowagie.text.Document(r, 0, 0, 0, 0);
		PdfWriter pw = PdfWriter.getInstance(d, new FileOutputStream(System.getenv(SystemInfo.getTempDirStr()) + "/1.pdf"));
		
		d.open();
		PdfContentByte pcb = pw.getDirectContent();

		boolean isFirst = true;

		for (int index = 0; index < cusArray.size(); index ++) {
		    
		    if (!((JCheckBox)customersTable.getValueAt(index, 0)).isSelected()) continue;

		    MstCustomer mc = cusArray.get(index);

		    if (isFirst) {
			isFirst = false;
		    } else {
			d.newPage();
		    }

		    pcb.beginText();

		    //住所
		    pcb.setFontAndSize(ps.getSelectedFont(), ps.getAddress().getSize() - 2);
		    pcb.setTextMatrix(ps.getAddress().getOptimizedLeft() - 10, ps.getAddress().getOptimizedTop());
		    pcb.showText("〒 " + mc.getFormatedPostalCode());
		    pcb.setTextMatrix(ps.getAddress().getOptimizedLeft() - 10, ps.getAddress().getOptimizedTop() + -20);
                    pcb.showText(mc.getAddress(0) + mc.getAddress(1));
		    pcb.setTextMatrix(ps.getAddress().getOptimizedLeft() - 10, ps.getAddress().getOptimizedTop() + -40);
		    pcb.showText(mc.getAddress(2));
		    pcb.setTextMatrix(ps.getAddress().getOptimizedLeft() - 10, ps.getAddress().getOptimizedTop() + -60);
		    pcb.showText(mc.getAddress(3));
		    
		    //氏名
		    pcb.setFontAndSize(ps.getSelectedFont(), ps.getName().getSize() - 6);
		    pcb.setTextMatrix(ps.getName().getOptimizedLeft() - 10, ps.getName().getOptimizedTop());
		    pcb.showText(mc.getFullCustomerName() + "　様");
                    int offset = 0;
                    for (MstCustomer family : mc.getFamilyList()) {
                        offset -= 20;
                        pcb.setTextMatrix(ps.getName().getOptimizedLeft() - 10, ps.getName().getOptimizedTop() + offset);
                        pcb.showText(family.getFullCustomerName() + "　様");
                    }

                    //顧客No.
                    if (!mc.existsFamily() && customerNoPrint.getSelectedIndex() == 0) {
                        pcb.setFontAndSize(ps.getSelectedFont(), ps.getAddress().getSize() - 2);
                        pcb.setTextMatrix(ps.getName().getOptimizedLeft() - 10 + 80, ps.getName().getOptimizedTop()  + (-30 + offset));
                        pcb.showText("[" + mc.getCustomerNo().trim().replace("　", "") + "]");
                    }
                    
		    pcb.endText();
		}

		d.close();
		pw.close();

		Runtime runtime = Runtime.getRuntime();

		//runtime.exec(ReportManager.getPdfViewerPath() + " " + System.getenv(SystemInfo.getTempDirStr()) + "/1.pdf");
                 runtime.exec("rundll32 url.dll,FileProtocolHandler " + System.getenv(SystemInfo.getTempDirStr()) + "/1.pdf");
	    }
	    catch(Exception e)
	    {
		e.printStackTrace();
	    }
	}
	
	private void setSetting()
	{
	    ps.setSelectedIndex(0);
/*	    
	    ps.getPostal().setSize(DEFAULT_POSTAL_SIZE);
	    ps.getPostal().setTop(DEFAULT_POSTAL_TOP);
	    ps.getPostal().setLeft(DEFAULT_POSTAL_LEFT);
*/
	    ps.getAddress().setSize(Float.parseFloat(addressSize.getText()));
	    ps.getAddress().setTop(Float.parseFloat(addressTop.getText()));
	    ps.getAddress().setLeft(Float.parseFloat(addressLeft.getText()));

	    ps.getName().setSize(Float.parseFloat(nameSize.getText()));
	    ps.getName().setTop(Float.parseFloat(nameTop.getText()));
	    ps.getName().setLeft(Float.parseFloat(nameLeft.getText()));
	}
	
	private void setPreviewText()
	{
	    MstCustomer mc = null;
	    if (0 <= customersTable.getSelectedRow()) {
		mc = cusArray.get(customersTable.getSelectedRow());
	    } else {
		mc = cusArray.get(0);
	    }

	    //住所
	    addressLabel0.setText("〒 " + mc.getFormatedPostalCode());
	    addressLabel1.setText(mc.getAddress(0) + mc.getAddress(1));
	    addressLabel2.setText(mc.getAddress(2));
	    addressLabel3.setText(mc.getAddress(3));

	    //氏名
            StringBuilder nm = new StringBuilder(1000);
            nm.append("<html>");
            nm.append(mc.getFullCustomerName() + "　様");
            for (MstCustomer family : mc.getFamilyList()) {
                nm.append("<br>" + family.getFullCustomerName() + "　様");
            }
            nm.append("</html>");
	    nameLabel.setText(nm.toString());

            //顧客No.
            customerNoLabel.setText("");
            if (!mc.existsFamily()) {
                customerNoLabel.setText("[" + mc.getCustomerNo().trim().replace("　", "") + "]");
            }

            // ラベルサイズと位置調整
            nameLabel.setSize(nameLabel.getWidth(), 50);
            customerNoLabel.setSize(customerNoLabel.getWidth(), 15);
            if (mc.getFamilyList().size() > 1) {
                int offset = 25 * (mc.getFamilyList().size() - 1);
                nameLabel.setSize(nameLabel.getWidth(), nameLabel.getHeight() + offset);
                customerNoLabel.setSize(customerNoLabel.getWidth(), customerNoLabel.getHeight() + offset);
            }
	}
	
	private void showPreview()
	{
	    //住所
	    addressPanel.setLocation(
			    getInputLocationValue(addressLeft, DEFAULT_ADDRESS_LEFT),
			    getInputLocationValue(addressTop, DEFAULT_ADDRESS_TOP));

	    addressLabel0.setFont(new java.awt.Font(addressLabel0.getFont().getFontName(), 0, getInputFontSizeValue(addressSize, DEFAULT_ADDRESS_SIZE)));
	    addressLabel1.setFont(new java.awt.Font(addressLabel1.getFont().getFontName(), 0, getInputFontSizeValue(addressSize, DEFAULT_ADDRESS_SIZE)));
	    addressLabel2.setFont(new java.awt.Font(addressLabel2.getFont().getFontName(), 0, getInputFontSizeValue(addressSize, DEFAULT_ADDRESS_SIZE)));
	    addressLabel3.setFont(new java.awt.Font(addressLabel3.getFont().getFontName(), 0, getInputFontSizeValue(addressSize, DEFAULT_ADDRESS_SIZE)));

	    //氏名
	    nameLabel.setLocation(
			    getInputLocationValue(nameLeft, DEFAULT_NAME_LEFT),
			    getInputLocationValue(nameTop, DEFAULT_NAME_TOP));
	    
	    nameLabel.setFont(new java.awt.Font(nameLabel.getFont().getFontName(), 0, getInputFontSizeValue(nameSize, DEFAULT_NAME_SIZE)));

            //顧客No.
            if (customerNoPrint.getSelectedIndex() == 0) {
                customerNoLabel.setVisible(true);
                customerNoLabel.setLocation(
                                getInputLocationValue(nameLeft, DEFAULT_NAME_LEFT) + 100,
                                getInputLocationValue(nameTop, DEFAULT_NAME_TOP) + 50);
            } else {
                customerNoLabel.setVisible(false);
            }

	    previewPanel.updateUI();
	}
	
	private Integer getInputLocationValue(JTextField text, Float defaultValue)
	{
	    Integer result = convertScaleForPrevew(defaultValue);

	    try
	    {
		result = convertScaleForPrevew(
		Float.parseFloat(text.getText()));
	    }
	    catch(Exception e)
	    {
	    }

	    return result;
	}
	
	private Integer convertScaleForPrevew(Float value)
	{
	    Float temp = value * LOCATION_CONVERT_RATE;	
	    return temp.intValue();
	}
	
	private Integer getInputFontSizeValue(JTextField text, Float defaultValue)
	{
	    Integer result = convertScaleForPrevew(defaultValue);

	    try
	    {
		Integer temp = convertFontSizeForPrevew(Float.parseFloat(text.getText()));

		if (0 < temp && temp < 72) {
		    result = temp;
		}
	    }
	    catch(Exception e)
	    {
	    }

	    return result;
	}
	
	private Integer convertFontSizeForPrevew(Float value)
	{
	    Float temp = value * FONT_SIZE_CONVERT_RATE;
	    return temp.intValue();
	}
	
	
	/**
	 * ハガキ印刷画面用FocusTraversalPolicy
	 */
	private class PrintPostcardFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(addressTop))
			{
				return addressLeft;
			}
			else if (aComponent.equals(addressLeft))
			{
				return addressSize;
			}
			else if (aComponent.equals(addressSize))
			{
				return nameTop;
			}
			else if (aComponent.equals(nameTop))
			{
				return nameLeft;
			}
			else if (aComponent.equals(nameLeft))
			{
				return nameSize;
			}
			else if (aComponent.equals(nameSize))
			{
				return addressTop;
			}
			
			return addressTop;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(addressLeft))
			{
				return addressTop;
			}
			else if (aComponent.equals(addressSize))
			{
				return addressLeft;
			}
			else if (aComponent.equals(nameTop))
			{
				return addressSize;
			}
			else if (aComponent.equals(nameLeft))
			{
				return nameTop;
			}
			else if (aComponent.equals(nameSize))
			{
				return nameLeft;
			}
			
			return addressTop;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return addressTop;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return nameSize;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return addressTop;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return addressTop;
		}
	}
        
        private void registDmHistory() {

            ArrayList<MstCustomer> targetList = new ArrayList<MstCustomer>();
            for (int i = 0; i < cusArray.size(); i++) {
                if(((JCheckBox)customersTable.getValueAt(i, 0)).isSelected()){
                    targetList.add(cusArray.get(i));
                }
            }

            if (targetList.size() == 0) {
                MessageDialog.showMessageDialog(this, "登録対象の顧客を選択してください。", this.getTitle(), JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            DmHistory dh = new DmHistory(this, targetList, dmTitle.getText(), DmHistory.DM_POSTCARD);

            if (!dh.checkInput()) {
                dmTitle.requestFocusInWindow();
                return;
            }

            if (!dh.showRegistDialog()) {
                dmTitle.requestFocusInWindow();
                return;
            }

            if (targetList.size() > 0) {

                dh.regist();

            } else {

                MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(1112),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            }

        }
        
}
