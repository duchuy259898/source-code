/*
 * RegisterOrderSlipPanel.java
 *
 * Created on 2008/09/17, 11:37
 */

package com.geobeck.sosia.pos.hair.product;

import com.geobeck.sosia.pos.basicinfo.commodity.EditabeTableCellRenderer;
import com.geobeck.sosia.pos.hair.data.product.DataSlipOrder;
import com.geobeck.sosia.pos.hair.data.product.DataSlipOrderDetail;
import com.geobeck.sosia.pos.hair.product.logic.ProductOrderReportLogic;
import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.sosia.pos.master.commodity.MstSupplier;
import com.geobeck.sosia.pos.master.commodity.MstSupplierItem;
import com.geobeck.sosia.pos.master.commodity.MstSuppliers;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.product.MstItemClass;
import com.geobeck.sosia.pos.master.product.MstItemClasses;
import com.geobeck.sosia.pos.master.product.MstPlace;
import com.geobeck.sosia.pos.master.product.MstPlaces;
import com.geobeck.sosia.pos.products.ProductClass;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.util.TaxUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.IntegerCellEditor;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author  mizukawa
 */
public class RegisterOrderSlipPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private MstItemClasses		mics		=	new MstItemClasses();
	private MstPlaces			mps			=	new MstPlaces();
	private MstSuppliers		mss			=	new MstSuppliers();
	
	private	DataSlipOrder		data		=	new	DataSlipOrder();
	private TableRecord[]		allLines	=	new TableRecord[0];
	private List<TableRecord>	showLines	=	new	ArrayList<TableRecord>();
	
	/** ìKê≥ç›å… */
	private StockCalculator		properStock;
	/** ç›å…óp */
	private StockCalculator		stock;
	/** ê≈ó¶ */
	private double				taxRate		=	0d;
	private boolean				dirty		=	false;
	
	/**
	 * Creates new form RegisterOrderSlipPanel
	 */
	public RegisterOrderSlipPanel()
	{
		initComponents();
		init();
		initStaff(staff);
		addMouseCursorChange();
		this.setSize(833, 690);
		this.setPath("è§ïiä«óù >> î≠íçèëçÏê¨");
		this.setTitle("î≠íçèëçÏê¨");
		SystemInfo.initGroupShopComponents(shop, 2);
		this.setKeyListener();
                
                if (SystemInfo.getAccountSetting().getReportPriceType() == 0) {
                    taxBlankRadio.setSelected(false);
                    taxUnitRadio.setSelected(true);
                } else {
                    taxBlankRadio.setSelected(true);
                    taxUnitRadio.setSelected(false);
                }
                
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        supplierLabel = new javax.swing.JLabel();
        supplierNo = new javax.swing.JTextField();

        try
        {
            ConnectionWrapper	con	=	SystemInfo.getConnection();

            mss.load(con, false);

            con.close();

            mss.add(0, new MstSupplier());
        }
        catch(SQLException e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        supplier = new JComboBox(new DefaultComboBoxModel(mss.toArray())
            {
                public void setSelectedItem(Object o)
                {
                    super.setSelectedItem(o);
                }
            });
            slipNoLabel = new javax.swing.JLabel();
            orderDateLabel = new javax.swing.JLabel();
            slipNo = new com.geobeck.swing.JFormattedTextFieldEx();
            orderDate = new com.geobeck.swing.JFormattedTextFieldEx();
            staffLabel = new javax.swing.JLabel();
            staffNo = new javax.swing.JTextField();
            staff = new javax.swing.JComboBox();
            productsScrollPane = new javax.swing.JScrollPane();
            products = new com.geobeck.swing.JTableEx();
            jLabel1 = new javax.swing.JLabel();
            matchAllRadio = new javax.swing.JRadioButton();
            matchLackRadio = new javax.swing.JRadioButton();
            jLabel2 = new javax.swing.JLabel();

            try
            {
                ConnectionWrapper	con	=	SystemInfo.getConnection();

                mics.load(con);

                con.close();

                mics.add(0, new MstItemClass());
            }
            catch(SQLException e)
            {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            itemClass = new JComboBox(new DefaultComboBoxModel(mics.toArray())
                {
                    public void setSelectedItem(Object o)
                    {
                        super.setSelectedItem(o);
                    }
                });
                jLabel3 = new javax.swing.JLabel();

                try
                {
                    ConnectionWrapper	con	=	SystemInfo.getConnection();

                    mps.load(con);

                    con.close();

                    mps.add(0, new MstPlace());
                }
                catch(SQLException e)
                {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
                place = new JComboBox(new DefaultComboBoxModel(mps.toArray())
                    {
                        public void setSelectedItem(Object o)
                        {
                            super.setSelectedItem(o);
                        }
                    });
                    showButton = new javax.swing.JButton();
                    jPanel1 = new javax.swing.JPanel();
                    jScrollPane1 = new javax.swing.JScrollPane();
                    sumTable = new com.geobeck.swing.JTableEx();
                    jLabel5 = new javax.swing.JLabel();
                    taxUnitRadio = new javax.swing.JRadioButton();
                    taxBlankRadio = new javax.swing.JRadioButton();
                    findButton = new javax.swing.JButton();
                    clearButton = new javax.swing.JButton();
                    deleteButton = new javax.swing.JButton();
                    outputPdfButton = new javax.swing.JButton();
                    registerButton = new javax.swing.JButton();
                    outputExcelButton = new javax.swing.JButton();
                    jLabel4 = new javax.swing.JLabel();
                    sendMailButton = new javax.swing.JButton();
                    butGoodsExport = new javax.swing.JButton();

                    setFocusCycleRoot(true);

                    shopLabel.setText("ìXï‹");

                    shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                    shop.setMaximumRowCount(15);
                    shop.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            shopActionPerformed(evt);
                        }
                    });

                    supplierLabel.setText("édì¸êÊ");

                    supplierNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                    supplierNo.addFocusListener(new java.awt.event.FocusAdapter() {
                        public void focusLost(java.awt.event.FocusEvent evt) {
                            supplierNoFocusLost(evt);
                        }
                    });

                    supplier.setMaximumRowCount(15);
                    supplier.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                    supplier.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            supplierActionPerformed(evt);
                        }
                    });

                    slipNoLabel.setText("ì`ï[No.");

                    orderDateLabel.setText("î≠íçì˙");

                    slipNo.setEditable(false);
                    slipNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                    slipNo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

                    orderDate.setEditable(false);
                    orderDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                    orderDate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

                    staffLabel.setText("î≠íçíSìñé“");

                    staffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                    staffNo.addFocusListener(new java.awt.event.FocusAdapter() {
                        public void focusLost(java.awt.event.FocusEvent evt) {
                            staffNoFocusLost(evt);
                        }
                    });

                    staff.setMaximumRowCount(15);
                    staff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                    staff.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            staffActionPerformed(evt);
                        }
                    });

                    productsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                    productsScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

                    products.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][]
                        {

                        },
                        new String []
                        {
                            "ï™óﬁ", "è§ïiñº", "édì¸âøäi", "ìXìKê≥", "ã∆ìKê≥", "ìXç›å…", "ã∆ç›å…", "ìXîÃóp", "ã∆ñ±óp", "î≠íççáåv", "ã‡äz"
                        }
                    )
                    {
                        Class[] types = new Class []
                        {
                            java.lang.Object.class, java.lang.String.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Long.class
                        };
                        boolean[] canEdit = new boolean []
                        {
                            false, false, false, false, false, false, false, true, true, false, false
                        };

                        public Class getColumnClass(int columnIndex)
                        {
                            return types [columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex)
                        {
                            return canEdit [columnIndex] && getValueAt(rowIndex, columnIndex) != null;
                        }
                    });
                    products.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
                    products.setSelectionBackground(new java.awt.Color(255, 210, 142));
                    products.setSelectionForeground(new java.awt.Color(0, 0, 0));
                    products.getTableHeader().setReorderingAllowed(false);
                    this.initProductsColumn();
                    products.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);

                    TableColumnModel productsModel = products.getColumnModel();
                    productsModel.getColumn(7).setCellRenderer(new EditabeTableCellRenderer(Integer.class, "-"));
                    productsModel.getColumn(8).setCellRenderer(new EditabeTableCellRenderer(Integer.class, "-"));
                    productsModel.getColumn(7).setCellEditor(new IntegerCellEditor(new JTextField()));
                    productsModel.getColumn(8).setCellEditor(new IntegerCellEditor(new JTextField()));

                    SwingUtil.setJTableHeaderRenderer(products, SystemInfo.getTableHeaderRenderer());
                    SelectTableCellRenderer.setSelectTableCellRenderer(products);
                    products.addFocusListener(new java.awt.event.FocusAdapter() {
                        public void focusGained(java.awt.event.FocusEvent evt) {
                            productsFocusGained(evt);
                        }
                    });
                    products.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                        public void propertyChange(java.beans.PropertyChangeEvent evt) {
                            productsPropertyChange(evt);
                        }
                    });
                    productsScrollPane.setViewportView(products);

                    jLabel1.setText("ï\é¶èåè");

                    buttonGroup1.add(matchAllRadio);
                    matchAllRadio.setSelected(true);
                    matchAllRadio.setText("ëSÇƒ");
                    matchAllRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                    matchAllRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
                    matchAllRadio.setOpaque(false);

                    buttonGroup1.add(matchLackRadio);
                    matchLackRadio.setText("ïsë´è§ïi");
                    matchLackRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                    matchLackRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
                    matchLackRadio.setOpaque(false);

                    jLabel2.setText("è§ïiï™óﬁ");

                    itemClass.setMaximumRowCount(15);
                    itemClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

                    jLabel3.setText("íuÇ´èÍ");

                    place.setMaximumRowCount(15);
                    place.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

                    showButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
                    showButton.setBorderPainted(false);
                    showButton.setFocusable(false);
                    showButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
                    showButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            showButtonActionPerformed(evt);
                        }
                    });

                    jPanel1.setOpaque(false);

                    jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
                    jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

                    sumTable.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                            {null, null, null, null}
                        },
                        new String [] {
                            "ìXîÃóp", "ã∆ñ±óp", "î≠íççáåv", "ã‡äz"
                        }
                    ) {
                        Class[] types = new Class [] {
                            java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Long.class
                        };
                        boolean[] canEdit = new boolean [] {
                            false, false, false, false
                        };

                        public Class getColumnClass(int columnIndex) {
                            return types [columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit [columnIndex];
                        }
                    });
                    sumTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
                    sumTable.setSelectionBackground(new java.awt.Color(255, 210, 142));
                    sumTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
                    sumTable.getTableHeader().setReorderingAllowed(false);
                    this.initSumTableColumn();
                    sumTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);

                    SwingUtil.setJTableHeaderRenderer(sumTable, SystemInfo.getTableHeaderRenderer());
                    SelectTableCellRenderer.setSelectTableCellRenderer(sumTable);
                    jScrollPane1.setViewportView(sumTable);

                    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                    jPanel1.setLayout(jPanel1Layout);
                    jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(87, 87, 87)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(20, Short.MAX_VALUE))
                    );
                    jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                    );

                    jLabel5.setText("ê≈ãÊï™");

                    buttonGroup2.add(taxUnitRadio);
                    taxUnitRadio.setSelected(true);
                    taxUnitRadio.setText("ê≈çû");
                    taxUnitRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                    taxUnitRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
                    taxUnitRadio.setOpaque(false);
                    taxUnitRadio.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            taxUnitRadioActionPerformed(evt);
                        }
                    });

                    buttonGroup2.add(taxBlankRadio);
                    taxBlankRadio.setText("ê≈î≤");
                    taxBlankRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                    taxBlankRadio.setMargin(new java.awt.Insets(0, 0, 0, 0));
                    taxBlankRadio.setOpaque(false);
                    taxBlankRadio.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            taxBlankRadioActionPerformed(evt);
                        }
                    });

                    findButton.setIcon(SystemInfo.getImageIcon("/button/search/search_slip_off.jpg"));
                    findButton.setBorderPainted(false);
                    findButton.setFocusable(false);
                    findButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_slip_on.jpg"));
                    findButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            findButtonActionPerformed(evt);
                        }
                    });

                    clearButton.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg"));
                    clearButton.setBorderPainted(false);
                    clearButton.setFocusable(false);
                    clearButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg"));
                    clearButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            clearButtonActionPerformed(evt);
                        }
                    });

                    deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
                    deleteButton.setBorderPainted(false);
                    deleteButton.setFocusable(false);
                    deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
                    deleteButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            deleteButtonActionPerformed(evt);
                        }
                    });

                    outputPdfButton.setIcon(SystemInfo.getImageIcon("/button/print/output_pdf_off.jpg"));
                    outputPdfButton.setBorderPainted(false);
                    outputPdfButton.setFocusable(false);
                    outputPdfButton.setPressedIcon(SystemInfo.getImageIcon("/button/print/output_pdf_on.jpg"));
                    outputPdfButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            outputPdfButtonActionPerformed(evt);
                        }
                    });

                    registerButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
                    registerButton.setBorderPainted(false);
                    registerButton.setFocusable(false);
                    registerButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
                    registerButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            registerButtonActionPerformed(evt);
                        }
                    });

                    outputExcelButton.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
                    outputExcelButton.setBorderPainted(false);
                    outputExcelButton.setFocusable(false);
                    outputExcelButton.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
                    outputExcelButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            outputExcelButtonActionPerformed(evt);
                        }
                    });

                    jLabel4.setText("<html>\nìKê≥ç›å…Çê›íËÇµÇƒÇ¢ÇÈèÍçáÇÕÅAìKê≥ç›å…Ç…ñûÇΩÇ»Ç¢êîó Ç™<br>\né©ìÆìIÇ…î≠íçå¬êîÇ…ì¸óÕÇ≥ÇÍÇ‹Ç∑ÅB\n</html>\n");

                    sendMailButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_mail_off.jpg"));
                    sendMailButton.setBorderPainted(false);
                    sendMailButton.setFocusable(false);
                    sendMailButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_mail_on.jpg"));
                    sendMailButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            sendMailButtonActionPerformed(evt);
                        }
                    });

                    butGoodsExport.setIcon(SystemInfo.getImageIcon("/button/print/goods_off.jpg"));
                    butGoodsExport.setBorderPainted(false);
                    butGoodsExport.setFocusable(false);
                    butGoodsExport.setPressedIcon(SystemInfo.getImageIcon("/button/print/goods_on.jpg"));
                    butGoodsExport.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            butGoodsExportActionPerformed(evt);
                        }
                    });

                    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                    this.setLayout(layout);
                    layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(productsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel5))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(taxUnitRadio)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(taxBlankRadio)
                                            .addGap(55, 55, 55)
                                            .addComponent(showButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(place, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(itemClass, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(shopLabel)
                                                .addComponent(orderDateLabel)
                                                .addComponent(supplierLabel))
                                            .addGap(17, 17, 17)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(supplierNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(supplier, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(slipNoLabel)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(slipNo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(findButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(staffLabel)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(staffNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(staff, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                            .addGap(93, 93, 93)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(sendMailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(matchAllRadio)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(matchLackRadio)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(outputPdfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(outputExcelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(butGoodsExport, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addContainerGap())
                    );
                    layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(shopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(slipNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(slipNo, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(findButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(registerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(orderDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(staffLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(staffNo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(staff, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(sendMailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(supplierLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(supplierNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(supplier, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(matchAllRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(matchLackRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(itemClass, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(place, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(taxUnitRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(taxBlankRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(showButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(outputPdfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(outputExcelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(butGoodsExport, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(productsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(10, 10, 10))))
                    );
                }// </editor-fold>//GEN-END:initComponents

    private void sendMailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMailButtonActionPerformed

        if (dirty) {

            if (MessageDialog.showYesNoDialog(
                    this,
                    MessageUtil.getMessage(12000, "î≠íçèë"),
                    this.getTitle(),
                    JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION)
            {
                return;
            }

            if (!checkInput(false)) {
                return;
            }

            if (!register()) {
                return;
            }

            showData();
            dirty = false;
        }

        MstSupplier sp = (MstSupplier)supplier.getSelectedItem();
        
        if (sp.getMailAddress().length() == 0) {
            MessageDialog.showMessageDialog(
                this,
                "ÉÅÅ[ÉãÉAÉhÉåÉXÇ™ìoò^Ç≥ÇÍÇƒÇ¢Ç‹ÇπÇÒÅB",
                this.getTitle(),
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        RegisterOrderSlipSendMailPanel p = new RegisterOrderSlipSendMailPanel((MstShop)shop.getSelectedItem(), sp, data);
        SwingUtil.openAnchorDialog( this.parentFrame, true, p, "î≠íçèëÉÅÅ[ÉãëóêM", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );
        ((JDialog)p.getParent().getParent().getParent().getParent()).dispose();
        p = null;

    }//GEN-LAST:event_sendMailButtonActionPerformed

	private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
		if (checkInput(true)) {
			if (register()) {
				showData();
				dirty = false;
			}
		}
	}//GEN-LAST:event_registerButtonActionPerformed
	
	private void outputExcelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_outputExcelButtonActionPerformed
	{//GEN-HEADEREND:event_outputExcelButtonActionPerformed
		outputExcel();
	}//GEN-LAST:event_outputExcelButtonActionPerformed
		
	private void taxUnitRadioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_taxUnitRadioActionPerformed
	{//GEN-HEADEREND:event_taxUnitRadioActionPerformed
		showList();
	}//GEN-LAST:event_taxUnitRadioActionPerformed
	
	private void taxBlankRadioActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_taxBlankRadioActionPerformed
	{//GEN-HEADEREND:event_taxBlankRadioActionPerformed
		showList();
	}//GEN-LAST:event_taxBlankRadioActionPerformed
	
	private void shopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopActionPerformed
	{//GEN-HEADEREND:event_shopActionPerformed
		dirty = true;
		findItems();
	}//GEN-LAST:event_shopActionPerformed
	
	private void outputPdfButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_outputPdfButtonActionPerformed
	{//GEN-HEADEREND:event_outputPdfButtonActionPerformed
		outputPdf();
	}//GEN-LAST:event_outputPdfButtonActionPerformed
	
	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		deleteSlip();
		dirty = false;
	}//GEN-LAST:event_deleteButtonActionPerformed
	
	private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
	{//GEN-HEADEREND:event_clearButtonActionPerformed
		clear();
		dirty = true;
	}//GEN-LAST:event_clearButtonActionPerformed
	
	//ì`ï[åüçıâÊñ 
	private void findButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_findButtonActionPerformed
	{//GEN-HEADEREND:event_findButtonActionPerformed
		loadSlip();
		dirty = false;
	}//GEN-LAST:event_findButtonActionPerformed
	
	private void showButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showButtonActionPerformed
	{//GEN-HEADEREND:event_showButtonActionPerformed
		showList();
	}//GEN-LAST:event_showButtonActionPerformed
	
	private void productsPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_productsPropertyChange
	{//GEN-HEADEREND:event_productsPropertyChange
		this.changeProducts();
	}//GEN-LAST:event_productsPropertyChange
	
	private void productsFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_productsFocusGained
	{//GEN-HEADEREND:event_productsFocusGained
		if(products.getInputContext() != null)
			products.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_productsFocusGained
	
	private void staffActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_staffActionPerformed
	{//GEN-HEADEREND:event_staffActionPerformed
		UIUtil.outputStaff(staff, staffNo);
		
		dirty = true;
	}//GEN-LAST:event_staffActionPerformed
	
	private void staffNoFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_staffNoFocusLost
	{//GEN-HEADEREND:event_staffNoFocusLost
		UIUtil.selectStaff(staffNo, staff);
	}//GEN-LAST:event_staffNoFocusLost
	
	private void supplierActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_supplierActionPerformed
	{//GEN-HEADEREND:event_supplierActionPerformed

            supplier.hidePopup();

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                UIUtil.outputSupplier(supplier, supplierNo);
		dirty = true;
		findItems();
                
            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
                
	}//GEN-LAST:event_supplierActionPerformed
	
	private void supplierNoFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_supplierNoFocusLost
	{//GEN-HEADEREND:event_supplierNoFocusLost
		UIUtil.selectSupplier(supplierNo, supplier);
	}//GEN-LAST:event_supplierNoFocusLost
    //IVS_LVTu start add 2014/09/03 MASHU_î≠íçèëçÏê¨(î[ïièëèoóÕ)
    private void butGoodsExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGoodsExportActionPerformed
        exportData();
    }//GEN-LAST:event_butGoodsExportActionPerformed
    //IVS_LVTu start add 2014/09/03 MASHU_î≠íçèëçÏê¨(î[ïièëèoóÕ)
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butGoodsExport;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton findButton;
    private javax.swing.JComboBox itemClass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton matchAllRadio;
    private javax.swing.JRadioButton matchLackRadio;
    private com.geobeck.swing.JFormattedTextFieldEx orderDate;
    private javax.swing.JLabel orderDateLabel;
    private javax.swing.JButton outputExcelButton;
    private javax.swing.JButton outputPdfButton;
    private javax.swing.JComboBox place;
    private com.geobeck.swing.JTableEx products;
    private javax.swing.JScrollPane productsScrollPane;
    private javax.swing.JButton registerButton;
    private javax.swing.JButton sendMailButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JButton showButton;
    private com.geobeck.swing.JFormattedTextFieldEx slipNo;
    private javax.swing.JLabel slipNoLabel;
    private javax.swing.JComboBox staff;
    private javax.swing.JLabel staffLabel;
    private javax.swing.JTextField staffNo;
    private com.geobeck.swing.JTableEx sumTable;
    private javax.swing.JComboBox supplier;
    private javax.swing.JLabel supplierLabel;
    private javax.swing.JTextField supplierNo;
    private javax.swing.JRadioButton taxBlankRadio;
    private javax.swing.JRadioButton taxUnitRadio;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * FocusTraversalPolicy
	 */
	private	FocusTraversalPolicy traversalPolicy	=
		new RegisterOrderSlipPanelFocusTraversalPolicy();
	
	/**
	 * FocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
	 * @return FocusTraversalPolicy
	 */
	public FocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	traversalPolicy;
	}
	
	private void init()
	{
		clear();
	}
	
	/**
	 * ñæç◊ÇÃóÒÇèâä˙âªÇ∑ÇÈÅB
	 */
	private void initProductsColumn()
	{
		//óÒÇÃïùÇê›íËÇ∑ÇÈÅB
		products.getColumnModel().getColumn(0).setPreferredWidth(70);		// ï™óﬁ
		products.getColumnModel().getColumn(1).setPreferredWidth(210);		// è§ïi
		products.getColumnModel().getColumn(2).setPreferredWidth(55);		// édì¸âøäi
		products.getColumnModel().getColumn(3).setPreferredWidth(45);		// ìXìKê≥
		products.getColumnModel().getColumn(4).setPreferredWidth(45);		// ã∆ìKê≥
		products.getColumnModel().getColumn(5).setPreferredWidth(45);		// ìXç›å…
		products.getColumnModel().getColumn(6).setPreferredWidth(45);		// ã∆ç›å…
		products.getColumnModel().getColumn(7).setPreferredWidth(65);		// ìXîÃóp
		products.getColumnModel().getColumn(8).setPreferredWidth(65);		// ã∆ñ±óp
		products.getColumnModel().getColumn(9).setPreferredWidth(65);		// î≠íççáåv
		products.getColumnModel().getColumn(10).setPreferredWidth(80);		// ã‡äz
	}
	
	private void initSumTableColumn()
	{
		sumTable.getColumnModel().getColumn(0).setPreferredWidth(65);		// ìXîÃóp
		sumTable.getColumnModel().getColumn(1).setPreferredWidth(65);		// ã∆ñ±óp
		sumTable.getColumnModel().getColumn(2).setPreferredWidth(65);		// î≠íççáåv
		sumTable.getColumnModel().getColumn(3).setPreferredWidth(80);		// ã‡äz
	}
	
	private void selectSupplier(Integer supplierNo)
	{
		supplier.setSelectedIndex(0);
		
		for(int i = 1; i < supplier.getItemCount(); i ++)
		{
			MstSupplier	ms	=	(MstSupplier)supplier.getItemAt(i);
			
			if(ms.getSupplierNo().equals(supplierNo))
			{
				supplier.setSelectedIndex(i);
				break;
			}
		}
	}
	
	/**
	 *
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(findButton);
		SystemInfo.addMouseCursorChange(registerButton);
		SystemInfo.addMouseCursorChange(deleteButton);
		SystemInfo.addMouseCursorChange(clearButton);
		SystemInfo.addMouseCursorChange(outputPdfButton);
		SystemInfo.addMouseCursorChange(outputExcelButton);
		SystemInfo.addMouseCursorChange(showButton);
		SystemInfo.addMouseCursorChange(sendMailButton);
	}
	
	/**
	 *
	 */
	private void setKeyListener()
	{
		shop.addKeyListener(SystemInfo.getMoveNextField());
		shop.addFocusListener(SystemInfo.getSelectText());
		supplier.addKeyListener(SystemInfo.getMoveNextField());
		supplier.addFocusListener(SystemInfo.getSelectText());
		supplierNo.addKeyListener(SystemInfo.getMoveNextField());
		supplierNo.addFocusListener(SystemInfo.getSelectText());
		staffNo.addKeyListener(SystemInfo.getMoveNextField());
		staffNo.addFocusListener(SystemInfo.getSelectText());
		staff.addKeyListener(SystemInfo.getMoveNextField());
		staff.addFocusListener(SystemInfo.getSelectText());
		matchAllRadio.addKeyListener(SystemInfo.getMoveNextField());
		matchLackRadio.addKeyListener(SystemInfo.getMoveNextField());
		itemClass.addKeyListener(SystemInfo.getMoveNextField());
		place.addKeyListener(SystemInfo.getMoveNextField());
		taxUnitRadio.addKeyListener(SystemInfo.getMoveNextField());
		taxBlankRadio.addKeyListener(SystemInfo.getMoveNextField());
	}
	
	/**
	 * ëIëÇ≥ÇÍÇƒÇ¢ÇÈï™óﬁÇéÊìæÇ∑ÇÈÅB
	 * @return ëIëÇ≥ÇÍÇƒÇ¢ÇÈï™óﬁ
	 */
	public ProductClass getSelectedProductClass(JTable productClassesTable)
	{
		if(productClassesTable.getSelectedRow() < 0)	return	null;
		
		return	(ProductClass)productClassesTable.getValueAt(productClassesTable.getSelectedRow(), 0);
	}
	
	/**
	 * íSìñé“Çèâä˙âªÇ∑ÇÈÅB
	 */
	protected void initStaff( JComboBox cb )
	{
		cb.addItem(new MstStaff());
		SystemInfo.initStaffComponent(cb);
		
		cb.setSelectedIndex(0);
	}
	
	/**
	 *
	 */
	private void clear()
	{
            dirty		=	true;
            data		=	new DataSlipOrder();
            allLines	=	new TableRecord[0];
            showLines	=	new	ArrayList<TableRecord>();

            matchAllRadio.setSelected(true);
            if (itemClass.getItemCount() > 0) {
                itemClass.setSelectedIndex(0);
            }
            if (place.getItemCount() > 0) {
                place.setSelectedIndex(0);
            }

            showData();

            if (shop.getItemCount() >= 2) {
                shop.requestFocusInWindow();
            } else {
                supplier.requestFocusInWindow();
            }

	}
	
	/**
	 * ì`ï[åüçıÉ{É^Éìâüâ∫éûèàóù
	 */
	public void loadSlip()
	{
		data = new DataSlipOrder();
		
		SystemInfo.getLogger().log(Level.INFO, "ì`ï[åüçı");
		SearchSlipDialog	ssp	=	new SearchSlipDialog(parentFrame, true, SearchSlip.SlipType.ORDER);
		ssp.setShop((MstShop) shop.getSelectedItem());
		ssp.setVisible(true);
		
		//ì`ï[Ç™ëIëÇ≥ÇÍÇΩèÍçá
		if(ssp.getSelectedSlip() != null)
		{
                    matchAllRadio.setSelected(true);
                    if (itemClass.getItemCount() > 0) {
                        itemClass.setSelectedIndex(0);
                    }
                    if (place.getItemCount() > 0) {
                        place.setSelectedIndex(0);
                    }

                    SlipData sd = ssp.getSelectedSlip();

                    MstShop s = new MstShop();
                    s.setShopID(sd.getShopID());
                    this.shop.setSelectedItem(s);

                    data = new DataSlipOrder();
                    data.load(s.getShopID(), sd.getSlipNo());

                    this.showData();
                    dirty = false;
		}

		ssp.dispose();
	}
	
	/**
	 *
	 */
	private void showData()
	{
		// êVãKÇ©ì«Ç›çûÇ›Ç©Ç≈êUÇËï™ÇØ
		if (data.getSlipNo() == null)
		{
			// ì`ï[î‘çÜ
			slipNo.setText("ÅÉêVãKÅÑ");
			// édì¸êÊ
			supplier.setEnabled(true);
			supplierNo.setEditable(true);
			if (supplier.getItemCount() > 0)
			{
				supplier.setSelectedIndex(0);
			}
			supplierNo.setText("");
			// ìXï‹
			shop.setEnabled(true);
			if (shop.getItemCount() > 0)
			{
				shop.setSelectedIndex(0);
			}
			// î≠íçíSìñé“
			staff.setEnabled(true);
			staffNo.setEditable(true);
			if (staff.getItemCount() > 0)
			{
				staff.setSelectedIndex(0);
			}
			staffNo.setText("");
			// ì˙ït
			SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd");
			orderDate.setText(fmt.format(new Date()));
			orderDate.setEnabled(true);
			
			registerButton.setEnabled(true);
			deleteButton.setEnabled(false);
			sendMailButton.setEnabled(false);
            //IVS_LVTu start add 2014/09/03 MASHU_î≠íçèëçÏê¨(î[ïièëèoóÕ)
            butGoodsExport.setEnabled(false);
            //IVS_LVTu end add 2014/09/03 MASHU_î≠íçèëçÏê¨(î[ïièëèoóÕ)
		}
		else
		{
			// ì`ï[î‘çÜ
			slipNo.setText(data.getSlipNo().toString());
			// édì¸êÊ
			MstSupplier sup = new MstSupplier();
			sup.setSupplierID(data.getSupplierId());
			supplier.setSelectedItem(sup);
			
			supplier.setEnabled(false);
			supplierNo.setEditable(false);
			// ìXï‹
			MstShop shp = new MstShop();
			shp.setShopID(data.getShopId());
			shop.setSelectedItem(shp);
			shop.setEnabled(false);
			
			MstStaff stf = new MstStaff();
			stf.setStaffID(data.getStaffId());
			staff.setSelectedItem(stf);
			// î≠íçíSìñé“
			staff.setEnabled(true);
			staffNo.setEditable(true);
			// ì˙ït
			SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd");
			orderDate.setText(fmt.format(data.getOrderDate()));
			orderDate.setEnabled(true);

			registerButton.setEnabled(true);
			deleteButton.setEnabled(true);
			sendMailButton.setEnabled(true);
            //IVS_LVTu start add 2014/09/03 MASHU_î≠íçèëçÏê¨(î[ïièëèoóÕ)
            butGoodsExport.setEnabled(true);
            //IVS_LVTu end add 2014/09/03 MASHU_î≠íçèëçÏê¨(î[ïièëèoóÕ)
		}
		
		findItems();
	}
	
	/**
	 *
	 */
	public void showList()
	{
		SwingUtil.clearTable(products);
		DefaultTableModel	model	=	(DefaultTableModel)products.getModel();
		
		showLines = new ArrayList<TableRecord>();
		for (TableRecord r : allLines)
		{
			if (acceptToShow(r))
			{
				showLines.add(r);
			}
		}
		
		for (TableRecord r : showLines)
		{
			int costPrice = r.getCostPrice();
			if (taxBlankRadio.isSelected())
			{
				costPrice = costPrice - (TaxUtil.getTax(costPrice, taxRate, 1));
			}
			int sumOfOrder = (r.getSellOrderNum() != null ? r.getSellOrderNum() : 0) + (r.getUseOrderNum() != null ? r.getUseOrderNum() : 0);
			
			MstItemClass mic = mics.lookup(r.getItemClass().getItemClassID());
			Vector row = new Vector();
			row.add(mic);
			row.add(r.getItemName());
			row.add(costPrice);
			row.add(r.getSellProperStock());
			row.add(r.getUseProperStock());
			row.add(r.getSellStock());
			row.add(r.getUseStock());
			row.add(r.getSellOrderNum());
			row.add(r.getUseOrderNum());
			
			row.add(sumOfOrder);
			row.add(costPrice * sumOfOrder);
			
			model.addRow(row);
		}
		
		showSum();
	}
	
	public void showSum()
	{
		SwingUtil.clearTable(sumTable);
		
		int sumOrderSell = 0;
		int sumOrderUse = 0;
		long sumPrice = 0L;
		for (TableRecord r : allLines)
		{
			int sell = (r.getSellOrderNum() != null ? r.getSellOrderNum() : 0);
			int use = (r.getUseOrderNum() != null ? r.getUseOrderNum() : 0);
			long costprice = r.getCostPrice() * (sell + use);
			
			sumOrderSell += sell;
			sumOrderUse += use;
			sumPrice += costprice;
		}
		
		Vector v = new Vector();
		v.add(sumOrderSell);
		v.add(sumOrderUse);
		v.add(sumOrderSell + sumOrderUse);
		if (taxBlankRadio.isSelected())
		{
			sumPrice = sumPrice - (TaxUtil.getTax(sumPrice, taxRate, 1));
			v.add(sumPrice);
		}
		else
		{
			v.add(sumPrice);
		}
		
		((DefaultTableModel) sumTable.getModel()).addRow(v);
	}
	
	/**
	 * î≠íçêîïœçXéûÇ…åƒÇŒÇÍÇÈ
	 */
	private void changeProducts()
	{
		int	row		=	products.getEditingRow();
		int	col		=	products.getEditingColumn();
		
		if(row < 0 || col < 0)	return;
		
		Integer val = (Integer) products.getValueAt(row, col);
		
		TableRecord r = showLines.get(row);
		switch (col)
		{
			case 7:
				r.setSellOrderNum(val);
				break;
			case 8:
				r.setUseOrderNum(val);
				break;
			default:
				return;
		}
		
		// î≠íççáåvÇïœçX
		int sum = (r.getSellOrderNum() != null ? r.getSellOrderNum() : 0) + (r.getUseOrderNum() != null ? r.getUseOrderNum() : 0);
		products.setValueAt(sum, row, 9);
		// ã‡äzçáåvÇïœçX
		int costPrice = sum * r.getCostPrice();
		if (taxBlankRadio.isSelected())
		{
			costPrice = costPrice - (TaxUtil.getTax(costPrice, taxRate, 1));
		}
		products.setValueAt(costPrice, row, 10);
		
		dirty = true;
		showSum();
	}
	
	/**
	 *
	 */
	private void findItems()
	{
		try
		{
			ConnectionWrapper con = SystemInfo.getConnection();
			try
			{
				// édì¸êÊåüçıèåè
				Integer supplierId = UIUtil.getSupplierID(supplier);
				if (supplierId == null)
				{
					SwingUtil.clearTable(products);
					SwingUtil.clearTable(sumTable);
					showSum();
					return;
				}
				
				MstShop mstShop = (MstShop) shop.getSelectedItem();
				
				// ì˙ït
				Date orderDate = (data.getOrderDate() != null ? data.getOrderDate() : new Date());
				// ìKê≥ç›å…åüçı
				properStock = StockCalculator.calcProperStock(con, mstShop.getShopID(), orderDate);
                                
				Map<Integer, TableRecord> map = new HashMap<Integer, TableRecord>();
				MstSupplierItem[] msis = MstSupplierItem.find(con, mstShop.getShopID(), supplierId);
                                
				// ç›å…åüçı
				//stock = StockCalculator.calcStock(con, mstShop.getShopID(), orderDate);
                                List<Integer> itemIdList = new ArrayList<Integer>();
                                for (int i = 0; i < msis.length; i++) {
                                    itemIdList.add(msis[i].getItemID());
                                }
				stock = StockCalculator.calcStock(con, mstShop.getShopID(), orderDate, itemIdList);
                                
				allLines = new TableRecord[msis.length];
				for (int i = 0; i < msis.length; i++)
				{
					TableRecord r = new TableRecord();
					r.setData(msis[i]);
					r.getItemClass().setDisplaySeq(mics.lookup(r.getItemClass().getItemClassID()).getDisplaySeq());

					// ìXîÃópìKê≥ç›å…
					int propSell = properStock.getStock(r.getItemID(), 1);
					// ã∆ñ±ópìKê≥ç›å…
					int propUse = propUse = properStock.getStock(r.getItemID(), 2);

					r.setSellProperStock(propSell);
					r.setUseProperStock(propUse);

					int stockSell = stock.getStock(r.getItemID(), 1);
					int stockUse = stock.getStock(r.getItemID(), 2);
                                        
					r.setUseStock(stockUse);
					r.setSellStock(stockSell);

					// ìXîÃã∆ñ±ãÊï™Ç≈î≠íçêîÇÃèâä˙ílï“èW
					if (r.getItemUseDivision() == 1)
					{
						// ìXîÃópè§ïi
						r.setUseOrderNum(null);
						r.setUseProperStock(null);
						r.setSellOrderNum(0);
					}
					else if (r.getItemUseDivision() == 2)
					{
						// ã∆ñ±ópè§ïi
						r.setUseOrderNum(0);
						r.setSellOrderNum(null);
						r.setSellProperStock(null);
					}
					else if (r.getItemUseDivision() == 3)
					{
						r.setUseOrderNum(0);
						r.setSellOrderNum(0);
					}
					else
					{
						r.setUseOrderNum(null);
						r.setUseProperStock(null);
						r.setSellOrderNum(null);
						r.setSellProperStock(null);
					}
					
					map.put(msis[i].getItemID(), r);
					allLines[i] = r;
				}
				
				// î≠íçèëÇÃì«Ç›çûÇ›Ç»ÇÁÅAî≠íçèëÇÃì‡óeÇìWäJÇ∑ÇÈ
				// êVãKÇ»ÇÁÅAìKê≥ç›å… - ç›å…Çî≠íçêîÇ…ÉZÉbÉgÇ∑ÇÈ
				if (data != null && data.getSlipNo() != null)
				{
					// î≠íçèëÇÃì‡óeÇìWäJ
					for (DataSlipOrderDetail d : data.getDetail())
					{
						TableRecord r = map.get(d.getItemID());
						if (r == null)
						{
							continue;
						}
						
						// édì¸âøäi
						r.setCostPrice(d.getCostPrice());
						
						// î≠íçêî
						switch (d.getOrderItemUseDivision())
						{
							case 1:
								r.setSellOrderNum(d.getOrderNum());
								break;
							case 2:
								r.setUseOrderNum(d.getOrderNum());
								break;
						}
					}
				}
				else
				{
					// ìKê≥ç›å… - ç›å…Çî≠íçêîÇ…ÉZÉbÉg
					for (TableRecord r : allLines)
					{
						if (r.getUseOrderNum() != null)
						{
							int propUse = r.getUseProperStock();
							int stockUse = r.getUseStock();
							r.setUseOrderNum(Math.max(0, propUse - stockUse));
						}
						if (r.getSellOrderNum() != null)
						{
							int propSell = r.getSellProperStock();
							int stockSell = r.getSellStock();
							r.setSellOrderNum(Math.max(0, propSell - stockSell));
						}
					}
				}
				
				// ê≈ó¶åüçı
				taxRate = SystemInfo.getTaxRate(data.getOrderDate());
				
				showList();
			}
			finally
			{
				con.close();
			}
		}
		catch (RuntimeException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			throw e;
		}
		catch (Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 *
	 */
	private boolean acceptToShow(TableRecord record)
	{
		if (matchLackRadio.isSelected())
		{
			if (!isLack(record))
			{
				return false;
			}
		}
		
		MstItemClass mic = (MstItemClass) itemClass.getSelectedItem();
		if (mic.getItemClassID() != null)
		{
			if (!mic.getItemClassID().equals(record.getItemClass().getItemClassID()))
			{
				return false;
			}
		}
		
		MstPlace mp = (MstPlace) place.getSelectedItem();
		if (mp.getPlaceID() != null)
		{
			if (!mp.getPlaceID().equals(record.getPlaceID()))
			{
				return false;
			}
		}
		
		return true;
	}
	
	/**
	 * ã∆ñ±ópìKê≥ç›å…Ç©ìXîÃópìKê≥ç›å…Çâ∫âÒÇ¡ÇƒÇ¢ÇÈÇ©Çï‘Ç∑
	 * @param record ÉeÅ[ÉuÉãÇÃÉåÉRÅ[Éh
	 * @return ç›å…Ç™ã∆ñ±ópìKê≥ç›å…Ç©ìXîÃópìKê≥ç›å…Çâ∫âÒÇ¡ÇƒÇ¢ÇÍÇŒtrue
	 */
	private boolean isLack(TableRecord record)
	{
		if (record.getUseProperStock() != null && record.getUseProperStock() - record.getUseStock() > 0)
		{
			return true;
		}

		if (record.getSellProperStock() != null && record.getSellProperStock() - record.getSellStock() > 0)
		{
			return true;
		}

		return false;
	}
	
	/**
	 * ì¸óÕílÉ`ÉFÉbÉN
	 */
	public boolean checkInput(boolean confirm)
	{
		// ìXï‹
		MstShop mstShop = (MstShop) shop.getSelectedItem();
		if (mstShop == null || mstShop.getShopID() == null)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ìXï‹"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			shop.requestFocusInWindow();
			return false;
		}
		// édì¸êÊ
		if (UIUtil.getSupplierID(supplier) == null)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "édì¸êÊ"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			supplier.requestFocusInWindow();
			return false;
		}
		// î≠íçíSìñé“
		MstStaff mstStaff = (MstStaff) staff.getSelectedItem();
		if (mstStaff == null || mstStaff.getStaffID() == null)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "î≠íçíSìñé“"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			staff.requestFocusInWindow();
			return false;
		}
		// î≠íçè§ïiêî
		if (allLines == null || allLines.length == 0)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED, "î≠íçÇ∑ÇÈè§ïi"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return	false;
		}
		// î≠íçêî
		int sum = 0;
		for (TableRecord r : allLines)
		{
			if (r.getSellOrderNum() != null && r.getSellOrderNum() < 0)
			{
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "ìXîÃópî≠íçêî"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
				return false;
			}
			if (r.getUseOrderNum() != null && r.getUseOrderNum() < 0)
			{
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "ã∆ñ±ópî≠íçêî"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
				return false;
			}
			
			sum += (r.getSellOrderNum() != null ? r.getSellOrderNum() : 0);
			sum += (r.getUseOrderNum() != null ? r.getUseOrderNum() : 0);
		}
		if (sum == 0)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "î≠íçêî"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return false;
		}
		
		if (confirm)
		{
			if (MessageDialog.showYesNoDialog(this,
				MessageUtil.getMessage(MessageUtil.CONFIRM_REGIST, "î≠íçèë"),
				this.getTitle(),
				JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION)
			{
				return false;
			}
		}
		
		return true;
	}
	
	/**
	 * ìoò^
	 */
	public boolean register()
	{
		MstShop mstShop = (MstShop) shop.getSelectedItem();
		MstStaff mstStaff = (MstStaff) staff.getSelectedItem();
		
		// ìoò^ópÉIÉuÉWÉFÉNÉgçÏê¨
		DataSlipOrder dataSlipOrder = new DataSlipOrder();
		if (data.getSlipNo() != null)
		{
			dataSlipOrder.setSlipNo(data.getSlipNo());
		}
		dataSlipOrder.setShopId(mstShop.getShopID());
		dataSlipOrder.setSupplierId(UIUtil.getSupplierID(supplier));
		dataSlipOrder.setStaffId(mstStaff.getStaffID());
		SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd");
		try
		{
			dataSlipOrder.setOrderDate(fmt.parse(orderDate.getText()));
		}
		catch (ParseException e)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			throw new RuntimeException(e);
		}
		// è⁄ç◊èÓïÒ
		for (TableRecord r : allLines)
		{
			if (r.getSellOrderNum() != null && r.getSellOrderNum() != 0)
			{
				DataSlipOrderDetail d = new DataSlipOrderDetail(dataSlipOrder);
				d.setData(r);
				d.getItemClass().setDisplaySeq(r.getItemClass().getDisplaySeq());
				d.setOrderNum(r.getSellOrderNum());
				d.setCostPrice(r.getCostPrice());
				d.setOrderItemUseDivision(1);
				
				dataSlipOrder.addDetail(d);
			}
			
			if (r.getUseOrderNum() != null && r.getUseOrderNum() != 0)
			{
				DataSlipOrderDetail d = new DataSlipOrderDetail(dataSlipOrder);
				d.setData(r);
				d.getItemClass().setDisplaySeq(r.getItemClass().getDisplaySeq());
				d.setOrderNum(r.getUseOrderNum());
				d.setCostPrice(r.getCostPrice());
				d.setOrderItemUseDivision(2);
				
				dataSlipOrder.addDetail(d);
			}
		}
		
		// ìoò^
		if (!dataSlipOrder.register())
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "î≠íçèë"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return false;
		}
		
		data = dataSlipOrder;
		dirty = false;
		MessageDialog.showMessageDialog(this,
			MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
			this.getTitle(),
			JOptionPane.INFORMATION_MESSAGE);
		return true;
	}
	
	public void deleteSlip()
	{
		if (MessageDialog.showYesNoDialog(this,
			MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, "î≠íçèë"),
			this.getTitle(),
			JOptionPane.WARNING_MESSAGE) != JOptionPane.YES_OPTION)
		{
			return;
		}
		
		if (data == null || data.getSlipNo() == null)
		{
			clear();
			return;
		}
		
		if (!data.delete())
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED, "î≠íçèë"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		clear();
		MessageDialog.showMessageDialog(this,
			MessageUtil.getMessage(MessageUtil.INFO_DELETE_SUCCESS),
			this.getTitle(),
			JOptionPane.INFORMATION_MESSAGE);
	}
	
	/**
	 * PDFèoóÕ
	 */
	public void outputPdf()
	{
            if (dirty) {

                if (MessageDialog.showYesNoDialog(
				this
				, MessageUtil.getMessage(12000, "î≠íçèë")
				, this.getTitle()
				, JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION)
                {
                    return;
		}
			
                if (!checkInput(false)) {
                    return;
                }
			
                if (!register()) {
                    return;
                }
			
                showData();
                dirty = false;
            }
		
            // PDFèoóÕ
            int result = ProductOrderReportLogic.OutputPdfReport(data.getShopId(), data.getSlipNo(), data.getOrderDate());
		
            if (result == ProductOrderReportLogic.RESULT_SUCCESS ) {

                // ê¨å˜

            } else if(result == ProductOrderReportLogic.RESULT_DATA_NOTHNIG ) {
                
                // ÉfÅ[É^Ç»Çµ
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
			
            } else if(result == ProductOrderReportLogic.RESULT_ERROR ) {
                
                // ó\ä˙ÇπÇ ÉGÉâÅ[
                MessageDialog.showMessageDialog( this,
                        MessageUtil.getMessage(1099),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE );
            }
	}
	
	/**
	 * ExcelèoóÕ
	 */
	public void outputExcel()
	{
		if (dirty)
		{
			if (MessageDialog.showYesNoDialog(
				this
				, MessageUtil.getMessage(12000, "î≠íçèë")
				, this.getTitle()
				, JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION)
			{
				return;
			}
			
			if (!checkInput(false))
			{
				return;
			}
			
			if (!register())
			{
				return;
			}
			
			showData();
			dirty = false;
		}
		
		// ExcelèoóÕ
		int result = ProductOrderReportLogic.OutputExcelReport(data.getShopId(), data.getSlipNo(), data.getOrderDate());
		
		if(result == ProductOrderReportLogic.RESULT_SUCCESS )
		{
			// ê¨å˜
		}
		else if(result == ProductOrderReportLogic.RESULT_DATA_NOTHNIG )
		{
			// ÉfÅ[É^Ç»Çµ
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(4001),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			
		}
		else if(result == ProductOrderReportLogic.RESULT_ERROR )
		{
			// ó\ä˙ÇπÇ ÉGÉâÅ[
			MessageDialog.showMessageDialog( this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE );
		}
	}
	
	/**
	 *
	 */
	private class TableRecord extends MstSupplierItem
	{
		/** ã∆ñ±ópç›å… */
		private	Integer	useStock = 0;
		/** ìXîÃópç›å… */
		private Integer sellStock = 0;
		
		/** ã∆ñ±ópî≠íçêî */
		private Integer useOrderNum = 0;
		/** ìXîÃópî≠íçêî */
		private Integer sellOrderNum = 0;
		
		TableRecord()
		{
		}
		
		public void setUseStock(Integer value)
		{
			this.useStock = value;
		}
		
		public Integer getUseStock()
		{
			return this.useStock;
		}
		
		public void setSellStock(Integer value)
		{
			this.sellStock = value;
		}
		
		public Integer getSellStock()
		{
			return this.sellStock;
		}
		
		public void setUseOrderNum(Integer value)
		{
			this.useOrderNum = value;
		}
		
		public Integer getUseOrderNum()
		{
			return this.useOrderNum;
		}
		
		public void setSellOrderNum(Integer value)
		{
			this.sellOrderNum = value;
		}
		
		public Integer getSellOrderNum()
		{
			return this.sellOrderNum;
		}
	}
	
	/**
	 * î≠íçèëçÏê¨âÊñ ópFocusTraversalPolicy
	 */
	private class RegisterOrderSlipPanelFocusTraversalPolicy extends FocusTraversalPolicy
	{
		/**
		 * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentAfter(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(shop))
			{
				return staffNo;
			}
                        else if(aComponent.equals(staffNo)){
                            return staff;
                        }
                        else if(aComponent.equals(staff)){
                            return supplierNo;
                        }
			else if (aComponent.equals(supplierNo))
			{
				return supplier;
			}
			else if (aComponent.equals(supplier))
			{
				if(matchAllRadio.isSelected()){
                                    return matchAllRadio;
                                }
                                return matchLackRadio;
			}
			else if (aComponent.equals(matchAllRadio) || aComponent.equals(matchLackRadio) )
			{
				return itemClass;
			}
			else if (aComponent.equals(itemClass))
			{
				return place;
			}
			else if (aComponent.equals(place))
			{
				if(taxUnitRadio.isSelected()){
                                    return taxUnitRadio;
                                }return taxBlankRadio;
			}
			
			
			return this.getStartComponent();
		}
		
		/**
		 * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentBefore(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(taxBlankRadio))
			{
				return taxUnitRadio;
			}
			else if (aComponent.equals(taxUnitRadio))
			{
				return place;
			}
			else if (aComponent.equals(place))
			{
				return itemClass;
			}
			else if (aComponent.equals(itemClass))
			{
				return matchLackRadio;
			}
			else if (aComponent.equals(matchLackRadio))
			{
				return matchAllRadio;
			}
			else if (aComponent.equals(matchAllRadio))
			{
				return staff;
			}
			else if (aComponent.equals(staff))
			{
				return staffNo;
			}
			else if (aComponent.equals(staffNo))
			{
				return supplier;
			}
			else if (aComponent.equals(supplier))
			{
				return supplierNo;
			}
			else if (aComponent.equals(supplierNo))
			{
				return shop;
			}
			else if (aComponent.equals(shop))
			{
				return shop;
			}
			
			return this.getStartComponent();
		}
		
		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer êÊì™ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return this.getStartComponent();
		}
		
		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer aContainer - ç≈å„ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return place;
		}
		
		/**
		 * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
		 * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return this.getStartComponent();
		}
		
		/**
		 * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * show() Ç‹ÇΩÇÕ setVisible(true) ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA
		 * èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
		 * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA
		 * Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
		 * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
		 * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
		 */
		public Component getInitialComponent(Window window)
		{
			return this.getStartComponent();
		}
                public Component getStartComponent()
		{
			if(shop.getItemCount() >1){
                            return shop;
                        }
                        return staffNo;
		}
	}
        //IVS_LVTu start add 2014/09/03 MASHU_î≠íçèëçÏê¨(î[ïièëèoóÕ)
        /**
         * Export Data to file excel.
         * Function exportData.
         */
        public void exportData()
        {
            ReportLogic logic = new ReportLogic();
            ReportParameterBean paramBean = new ReportParameterBean();

            //ìXï‹
            if(shop.getSelectedItem() instanceof MstShop) {
                    MstShop		ms	=	(MstShop)shop.getSelectedItem();
                    paramBean.setShopId(ms.getShopID());
            }
            paramBean.setSlipNo(Integer.parseInt(slipNo.getText()));

            try {
                    logic.outSlipReport(paramBean);
            } catch (Exception e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                    MessageDialog.showMessageDialog(this,
                            e.getMessage(),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
            }
        }
        //IVS_LVTu end add 2014/09/03 MASHU_î≠íçèëçÏê¨(î[ïièëèoóÕ)
        
        
}
