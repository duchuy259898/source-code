/*
 * PrintInventoryPanel.java
 *
 * Created on 2008/09/10, 14:14
 */

package com.geobeck.sosia.pos.hair.product;

import com.geobeck.sosia.pos.hair.product.logic.PrintInventoryLogic;
import com.geobeck.sosia.pos.master.commodity.MstSupplier;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.MessageDialog;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.swing.JOptionPane;
/**
 *
 * @author  s_matsumura
 */
public class PrintInventoryPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
    private PrintInventry	ia	=	new PrintInventry();
    private InventryPeriod	ib	=	new InventryPeriod();
    
    private int inventory = 0;
    private int taxcond   = 0;
    
    /** Creates new form PrintInventoryPanel */
    public PrintInventoryPanel() {
        super();
        initComponents();
        
        ftp	= new LocalFocusTraversalPolicy();
        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        
        addMouseCursorChange();
        this.setSize(463, 170);
        this.setPath("è§ïiä«óù >> í†ï[");
        this.setTitle("íIâµï\");
        SystemInfo.initGroupShopComponents(shop, 2);
        this.setKeyListener();
        try {
            this.init();
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1099),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
        }
        
        //íIâµãÊï™
        rdoInventryBlank.setSelected(true);
        rdoInventryUnit.setSelected(false);
        this.inventory = PrintInventoryLogic.INVENTORY_FOR_OPERATION;
        
        //ê≈î≤ÅAê≈çûÇÃèâä˙ê›íË
        if (SystemInfo.getAccountSetting().getReportPriceType() == 0) {
            rdoTaxBlank.setSelected(false);
            rdoTaxUnit.setSelected(true);
        } else {
            rdoTaxBlank.setSelected(true);
            rdoTaxUnit.setSelected(false);
        }
        
        this.taxcond = PrintInventoryLogic.INVENTORY_WITH_TAX;
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        jLabel2 = new javax.swing.JLabel();
        suppliersNo = new javax.swing.JTextField();
        suppliers = new javax.swing.JComboBox();
        lblTax = new javax.swing.JLabel();
        rdoTaxUnit = new javax.swing.JRadioButton();
        rdoTaxBlank = new javax.swing.JRadioButton();
        lblInventry = new javax.swing.JLabel();
        rdoInventryUnit = new javax.swing.JRadioButton();
        rdoInventryBlank = new javax.swing.JRadioButton();
        lblInventryPeriod = new javax.swing.JLabel();
        inventryPeriod = new javax.swing.JComboBox();
        btnOutputExcel = new javax.swing.JButton();

        shopLabel.setText("ìXï‹");

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        jLabel2.setText("édì¸êÊ");

        suppliersNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        suppliersNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                suppliersNoFocusLost(evt);
            }
        });

        suppliers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        suppliers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppliersActionPerformed(evt);
            }
        });

        lblTax.setText("ê≈ãÊï™");

        buttonGroup2.add(rdoTaxUnit);
        rdoTaxUnit.setSelected(true);
        rdoTaxUnit.setText("ê≈çû");
        rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxUnit.setOpaque(false);
        rdoTaxUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTaxUnitActionPerformed(evt);
            }
        });

        buttonGroup2.add(rdoTaxBlank);
        rdoTaxBlank.setText("ê≈î≤");
        rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxBlank.setOpaque(false);
        rdoTaxBlank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTaxBlankActionPerformed(evt);
            }
        });

        lblInventry.setText("íIâµãÊï™");

        buttonGroup1.add(rdoInventryUnit);
        rdoInventryUnit.setText("ìXîÃóp");
        rdoInventryUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoInventryUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoInventryUnit.setOpaque(false);
        rdoInventryUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoInventryUnitActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdoInventryBlank);
        rdoInventryBlank.setSelected(true);
        rdoInventryBlank.setText("ã∆ñ±óp");
        rdoInventryBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoInventryBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoInventryBlank.setOpaque(false);
        rdoInventryBlank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoInventryBlankActionPerformed(evt);
            }
        });

        lblInventryPeriod.setText("íIâµä˙ä‘");

        inventryPeriod.setMaximumRowCount(20);
        inventryPeriod.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setContentAreaFilled(false);
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shopLabel)
                    .addComponent(lblTax)
                    .addComponent(lblInventryPeriod)
                    .addComponent(lblInventry)
                    .addComponent(jLabel2))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 208, Short.MAX_VALUE)
                        .addComponent(btnOutputExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(suppliersNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(suppliers, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rdoTaxUnit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdoTaxBlank, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rdoInventryUnit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdoInventryBlank))
                            .addComponent(inventryPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(201, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(suppliersNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(suppliers, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInventry, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdoInventryUnit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdoInventryBlank, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInventryPeriod, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inventryPeriod, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTax, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdoTaxUnit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdoTaxBlank, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnOutputExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void rdoTaxBlankActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoTaxBlankActionPerformed
    {//GEN-HEADEREND:event_rdoTaxBlankActionPerformed
        this.taxcond = PrintInventoryLogic.INVENTORY_WITHOU_TAX;
    }//GEN-LAST:event_rdoTaxBlankActionPerformed
    
    private void rdoTaxUnitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoTaxUnitActionPerformed
    {//GEN-HEADEREND:event_rdoTaxUnitActionPerformed
        this.taxcond = PrintInventoryLogic.INVENTORY_WITH_TAX;
    }//GEN-LAST:event_rdoTaxUnitActionPerformed
    
    private void rdoInventryBlankActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoInventryBlankActionPerformed
    {//GEN-HEADEREND:event_rdoInventryBlankActionPerformed
        this.inventory = PrintInventoryLogic.INVENTORY_FOR_OPERATION;
        initPeriod();
    }//GEN-LAST:event_rdoInventryBlankActionPerformed
    
    private void rdoInventryUnitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoInventryUnitActionPerformed
    {//GEN-HEADEREND:event_rdoInventryUnitActionPerformed
        this.inventory = PrintInventoryLogic.INVENTORY_FOR_SELL;
        initPeriod();
    }//GEN-LAST:event_rdoInventryUnitActionPerformed
    
	private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutputExcelActionPerformed
	{//GEN-HEADEREND:event_btnOutputExcelActionPerformed
            btnOutputExcel.setCursor(null);

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                this.generateInventory();

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }

	}//GEN-LAST:event_btnOutputExcelActionPerformed
                
        private int checkInput() {
            int  err = 0;
            
            if( err == 0 && ( this.suppliers.getSelectedIndex() < 0 ) ||
                    this.suppliersNo.getText().equals( "" ) ) {
                err = 12003;
            }
            
            if( err == 0 && this.inventryPeriod.getSelectedIndex() < 0 ) {
                //display message
                err = 12004;
            }
            
            return err;
        }
        //édì¸êÊÇÃÉvÉãÉ_ÉEÉìÉÅÉjÉÖÅ[ëÄçÏéû
	private void suppliersActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_suppliersActionPerformed
	{//GEN-HEADEREND:event_suppliersActionPerformed
            UIUtil.outputSupplier(suppliers, suppliersNo);
	}//GEN-LAST:event_suppliersActionPerformed
        
        //édì¸êÊÉeÉLÉXÉgÇ©ÇÁÉtÉHÅ[ÉJÉXÇ™ÇÕÇ∏ÇÍÇΩÇ∆Ç´
	private void suppliersNoFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_suppliersNoFocusLost
	{//GEN-HEADEREND:event_suppliersNoFocusLost
            UIUtil.selectSupplier(suppliersNo, suppliers);
	}//GEN-LAST:event_suppliersNoFocusLost
        
        //èâä˙âª
        private void init() throws SQLException {
            this.initSupplier();
            this.initPeriod();
            
        }
        
        /**
         * édì¸êÊÇèâä˙âªÇ∑ÇÈÅB
         */
        private void initSupplier() throws SQLException {
            suppliers.removeAllItems();
            
            for(MstSupplier ms : ia.getSuppliers()) {
                suppliers.addItem(ms);
            }
            suppliers.setSelectedIndex(0);
        }
        
        //íIâµä˙ä‘
        private void initPeriod() {
            try {
                ConnectionWrapper cw = SystemInfo.getConnection();
                inventryPeriod.removeAllItems();
                MstShop		ms	=	(MstShop)shop.getSelectedItem();
                ib.setcutoffday(ms.getCutoffDay());
                ib.setShop(ms.getShopID());
				if (rdoInventryUnit.isSelected())
				{
					ib.setInventoryDivision(1);
				}
				else if (rdoInventryBlank.isSelected())
				{
					ib.setInventoryDivision(2);
				}
                for(DateRange obj : ib.getInventrydate(cw, false)) {
                    inventryPeriod.addItem(obj);
                }
                
                if(inventryPeriod.getItemCount() > 0) {
                    inventryPeriod.setSelectedIndex(0);
                }
                
            } catch(SQLException e) {
                throw new RuntimeException(e);
            }
        }
        
        private void generateInventory() {
            int err  = this.checkInput();
            if( 0 == err ) {
                MstShop shop = (MstShop)this.shop.getSelectedItem();
                MstSupplier supplier = (MstSupplier)this.suppliers.getSelectedItem();
                DateRange range = (DateRange)this.inventryPeriod.getSelectedItem();
                
                PrintInventoryLogic logic = new PrintInventoryLogic(shop, supplier);
                logic.setDateRange(range.getTo(), range.getFrom());
                logic.setInventory(this.inventory);
                logic.setTaxCondition(this.taxcond);
                int result = logic.viewInventoryReport();
                
                if(result == logic.RESULT_SUCCESS ){
                    // ê¨å˜
                }else if(result == logic.RESULT_DATA_NOTHNIG ){
                    // ÉfÅ[É^Ç»Çµ
                    err = 4001;
                }else if(result == logic.RESULT_ERROR ){
                    // ó\ä˙ÇπÇ ÉGÉâÅ[
                    err = 1099;
                }
            }
            if( err != 0 ) {
                this.displayMessage(err);
            }
        }
        
        private void displayMessage(int msgid) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(msgid),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
        }
        
    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
        initPeriod();
    }//GEN-LAST:event_shopActionPerformed
    
    /**
     * É{É^ÉìÇÃÉ}ÉEÉXÉJÅ[É\ÉãÇïœçXÇ∑ÇÈ
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(btnOutputExcel);
    }
    
    private void setKeyListener() {
        shop.addKeyListener(SystemInfo.getMoveNextField());
        shop.addFocusListener(SystemInfo.getSelectText());
        inventryPeriod.addKeyListener(SystemInfo.getMoveNextField());
        inventryPeriod.addFocusListener(SystemInfo.getSelectText());
        suppliers.addKeyListener(SystemInfo.getMoveNextField());
        suppliers.addFocusListener(SystemInfo.getSelectText());
        suppliersNo.addKeyListener(SystemInfo.getMoveNextField());
        suppliersNo.addFocusListener(SystemInfo.getSelectText());
        rdoInventryBlank.addKeyListener(SystemInfo.getMoveNextField());
        rdoInventryUnit.addKeyListener(SystemInfo.getMoveNextField());
        rdoTaxBlank.addKeyListener(SystemInfo.getMoveNextField());
        rdoTaxUnit.addKeyListener(SystemInfo.getMoveNextField());
        suppliers.addKeyListener(SystemInfo.getMoveNextField());
    }
    
    // <editor-fold defaultstate="collapsed" desc="  Variables declaration - do not modify  ">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox inventryPeriod;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblInventry;
    private javax.swing.JLabel lblInventryPeriod;
    private javax.swing.JLabel lblTax;
    private javax.swing.JRadioButton rdoInventryBlank;
    private javax.swing.JRadioButton rdoInventryUnit;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JComboBox suppliers;
    private javax.swing.JTextField suppliersNo;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    
    private LocalFocusTraversalPolicy   ftp;
    /**
     * FocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
     * @return FocusTraversalPolicy
     */
    public LocalFocusTraversalPolicy getFocusTraversalPolicy() {
        return  ftp;
    }
    
    /**
     * FocusTraversalPolicy
     */
    private class LocalFocusTraversalPolicy
            extends FocusTraversalPolicy {
        ArrayList<Component> controls = new ArrayList<Component>();
        public LocalFocusTraversalPolicy() {
            controls.add(shop);
            controls.add(suppliersNo);
            controls.add(rdoInventryUnit);
            controls.add(rdoInventryBlank);
            controls.add(inventryPeriod);
            controls.add(rdoTaxUnit);
            controls.add(rdoTaxBlank);
            
            // ç≈å„Ç…êÊì™Ççƒìxìoò^(ìØéûÇ…EnabledÇ™FalseÇ…Ç»ÇÁÇ»Ç¢Ç∆Ç±ÇÎÇ‹Ç≈èdï°ìoò^)
            controls.add(shop);
            controls.add(suppliersNo);
        };
        
        /**
         * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            boolean find = false;
            for(Component co : controls){
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }
        
        /**
         * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            boolean find = false;
            for( int ii = controls.size(); ii>0; ii-- ){
                Component co = controls.get(ii-1);
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }
        
        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getFirstComponent(Container aContainer) {
            return getDefaultComponent(aContainer);
        }
        
        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getLastComponent(Container aContainer) {
            return getComponentBefore(aContainer, controls.get(0));
        }
        
        /**
         * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getDefaultComponent(Container aContainer) {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
        
        /**
         * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getInitialComponent(Window window) {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
    }
    
}
