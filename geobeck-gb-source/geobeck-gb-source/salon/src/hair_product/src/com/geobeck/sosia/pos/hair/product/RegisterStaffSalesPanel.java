/*
 * RegisterCheckInVoucherPanel.java
 *
 * Created on 2008/09/17, 9:56
 */

package com.geobeck.sosia.pos.hair.product;

import com.geobeck.sosia.pos.hair.data.product.DataSlipShip;
import com.geobeck.sosia.pos.hair.data.product.DataStaffSales;
import com.geobeck.sosia.pos.hair.data.product.DataStaffSalesDetail;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.product.MstItem;
import com.geobeck.sosia.pos.master.product.MstItemClass;
import com.geobeck.sosia.pos.master.product.MstItemClasses;
import com.geobeck.sosia.pos.master.product.MstItems;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.util.TaxUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.CustomFilter;
import com.geobeck.swing.DoubleCellEditor;
import com.geobeck.swing.IntegerCellEditor;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import com.geobeck.util.CheckUtil;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.Graphics;
import java.awt.Window;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.text.PlainDocument;

/**
 *
 * @author  ryu
 */
public class RegisterStaffSalesPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	/**
	 * FocusTraversalPolicy
	 */
	private	FocusTraversalPolicy traversalPolicy = 	new FocusTraversalPolicyImpl();

	/**
	 * FocusTraversalPolicyを取得する。
	 * @return FocusTraversalPolicy
	 */
	public FocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	traversalPolicy;
	}

	//手動だけでイベントを実行する
	private int eventFlg = 0;
	//新規フラグ 0:既存/1：新規
	private int newFlag = 1;

	private MstItemClasses	classes;
	private DataStaffSales	dataStaffSales	=	new DataStaffSales();

	/**
	 * Creates new form RegisterCheckInVoucherPanel
	 */
	public RegisterStaffSalesPanel()
	{
		this.setSize(800, 800);
		this.setPath("商品管理 >> スタッフ販売 >> 販売入力");
		this.setTitle("スタッフ販売入力");
		initComponents();
		init();
		clear();
	}
	
	/*
	 *コンボボックスの内容初期化など
	 */
	private void init()
	{
		SystemInfo.initGroupShopComponents(shop, 2);
		initStaff(staffName);
		initStaff(confirmStaffName);
		
		initItemClass();
		
		//add listener to detail info
		SelectionListener listener = new SelectionListener(tblDetailInfo);
		tblDetailInfo.getModel().addTableModelListener(listener);
		
		//編集コラム属性を設置する
		JFormattedTextField ftf = new javax.swing.JFormattedTextField();
		((PlainDocument)ftf.getDocument()).setDocumentFilter(
			new CustomFilter(20, CustomFilter.NUMERIC));
		
//		tblDetailInfo.getColumnModel().getColumn(3).setCellRenderer(new EditabeTableCellRenderer(Integer.class, "0"));
//		tblDetailInfo.getColumnModel().getColumn(5).setCellRenderer(new EditabeTableCellRenderer(Double.class, "0"));
		
		// テーブルのカラムサイズを調整
		initDetailColumn();
		
		// ボタンの上にマウスカーソルが乗った時にカーソルを変更する
		addMouseCursorChange();
		// enterキーで項目を移動する
		setKeyListener();
	}
	
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnRegist = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        salesDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel5 = new javax.swing.JLabel();
        confirmStaffName = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        panelDetail = new javax.swing.JScrollPane();
        tblDetailInfo = new com.geobeck.swing.JTableEx();
        voucherNo = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        confirmStaffNo = new javax.swing.JFormattedTextField();
        ((PlainDocument)confirmStaffNo.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.ALPHAMERIC));
        btnClose = new javax.swing.JButton();
        staffNo = new javax.swing.JFormattedTextField();
        ((PlainDocument)staffNo.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.ALPHAMERIC));
        staffName = new javax.swing.JComboBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProductDetail = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        lAccount = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        lCheap = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        lSum = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        lTax = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();

        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        setPreferredSize(new java.awt.Dimension(750, 530));
        addAncestorListener(new javax.swing.event.AncestorListener()
        {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt)
            {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt)
            {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt)
            {
            }
        });

        jLabel1.setText("\u5e97\u8217");

        jLabel2.setText("\u4f1d\u7968NO");

        btnRegist.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg")
        );
        btnRegist.setBorder(null);
        btnRegist.setBorderPainted(false);
        btnRegist.setContentAreaFilled(false);
        btnRegist.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg")
        );
        btnRegist.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnRegistActionPerformed(evt);
            }
        });

        btnDelete.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg")
        );
        btnDelete.setBorder(null);
        btnDelete.setBorderPainted(false);
        btnDelete.setContentAreaFilled(false);
        btnDelete.setEnabled(false);
        btnDelete.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg")
        );
        btnDelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg")
        );
        btnClear.setBorder(null);
        btnClear.setBorderPainted(false);
        btnClear.setContentAreaFilled(false);
        btnClear.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg")
        );
        btnClear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnClearActionPerformed(evt);
            }
        });

        jLabel3.setText("\u30b9\u30bf\u30c3\u30d5");

        jLabel4.setText("\u8ca9\u58f2\u65e5");

        salesDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        salesDate.setDate(new java.util.Date());

        jLabel5.setText("\u78ba\u8a8d\u8005");

        confirmStaffName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        confirmStaffName.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                confirmStaffNameItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 341, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 138, Short.MAX_VALUE)
        );

        panelDetail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        tblDetailInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "分類", "商品名", "単価", "数量", "金額", "割引", "合計", "削除"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Object.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Double.class, java.lang.Long.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, true, false, true, false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblDetailInfo.setSelectionBackground(new java.awt.Color(255, 210, 142));
        tblDetailInfo.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tblDetailInfo.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(tblDetailInfo, SystemInfo.getTableHeaderRenderer());
        tblDetailInfo.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(tblDetailInfo);

        TableColumnModel tblDetailInfoModel = tblDetailInfo.getColumnModel();
        tblDetailInfoModel.getColumn(3).setCellEditor(new IntegerCellEditor(new JTextField()));
        tblDetailInfoModel.getColumn(5).setCellEditor(new DoubleCellEditor(new JTextField()));
        tblDetailInfoModel.getColumn(5).setCellRenderer(new DiscountCellRenderer());
        panelDetail.setViewportView(tblDetailInfo);

        voucherNo.setEditable(false);
        voucherNo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        voucherNo.setText("\u3000\u3000<\u65b0\u898f>");
        voucherNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 809, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 161, Short.MAX_VALUE)
        );

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                shopActionPerformed(evt);
            }
        });

        confirmStaffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        confirmStaffNo.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                confirmStaffNoFocusLost(evt);
            }
        });

        btnClose.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg")
        );
        btnClose.setBorder(null);
        btnClose.setBorderPainted(false);
        btnClose.setContentAreaFilled(false);
        btnClose.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg")
        );
        btnClose.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCloseActionPerformed(evt);
            }
        });

        staffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffNo.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                staffNoFocusLost(evt);
            }
        });

        staffName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffName.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                staffNameItemStateChanged(evt);
            }
        });

        jScrollPane6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "商品分類"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblProduct.setSelectionBackground(new java.awt.Color(255, 210, 142));
        tblProduct.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tblProduct.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(tblProduct, SystemInfo.getTableHeaderRenderer());
        tblProduct.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(tblProduct);

        tblProduct.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                tblProductMouseReleased(evt);
            }
        });
        tblProduct.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                tblProductKeyReleased(evt);
            }
        });

        jScrollPane6.setViewportView(tblProduct);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        tblProductDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "商品名", "単価"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblProductDetail.setSelectionBackground(new java.awt.Color(255, 210, 142));
        tblProductDetail.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tblProductDetail.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(tblProductDetail, SystemInfo.getTableHeaderRenderer());
        tblProductDetail.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(tblProductDetail);

        tblProductDetail.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tblProductDetailMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(tblProductDetail);

        jLabel6.setText("\u5c0f\u8a08");

        lAccount.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lAccount.setText(" ");

        jLabel7.setText("\u5186");

        jLabel8.setText("\u5272\u5f15");

        lCheap.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lCheap.setText(" ");

        jLabel9.setText("\u5186");

        jLabel10.setText("(\u6d88\u8cbb\u7a0e)");

        lSum.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lSum.setText(" ");

        jLabel11.setText("\u5186");

        jLabel12.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
        jLabel12.setText("\u5408\u8a08\u91d1\u984d");

        lTax.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lTax.setText(" ");

        jLabel13.setText("\u5186\uff09");

        jLabel14.setText("\uff08");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2935, 2935, 2935)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1263, 1263, 1263)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lCheap, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(19, 19, 19)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lTax, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lSum, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel11)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(514, 514, 514)
                                .addComponent(confirmStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(voucherNo, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(btnRegist, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(staffNo, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(staffName, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(salesDate, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(confirmStaffNo, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(505, 505, 505)
                                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lCheap, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lTax, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lSum, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRegist, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(voucherNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(confirmStaffNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(confirmStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(staffNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(staffName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(salesDate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
                        .addGap(6, 6, 6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(442, 442, 442)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(669, 669, 669)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void shopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopActionPerformed
	{//GEN-HEADEREND:event_shopActionPerformed
		SwingUtil.clearTable(tblProductDetail);
		tblProductDoClick();
	}//GEN-LAST:event_shopActionPerformed

	private void formAncestorAdded(javax.swing.event.AncestorEvent evt)//GEN-FIRST:event_formAncestorAdded
	{//GEN-HEADEREND:event_formAncestorAdded
		// ダイアログでなければ閉じるボタンを非表示
		if (!isDialog())
		{
			btnClose.setVisible(false);
		}
	}//GEN-LAST:event_formAncestorAdded
	
    private void staffNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_staffNameItemStateChanged
		UIUtil.outputStaff(staffName, staffNo);
    }//GEN-LAST:event_staffNameItemStateChanged
	
    private void staffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_staffNoFocusLost
		UIUtil.selectStaff(staffNo, staffName);
    }//GEN-LAST:event_staffNoFocusLost
	
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
		SwingUtilities.getWindowAncestor(this).setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed
	
    private void tblProductKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblProductKeyReleased
		tblProductDoClick();
    }//GEN-LAST:event_tblProductKeyReleased
	
        private void tblProductMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductMouseReleased
			tblProductDoClick();
        }//GEN-LAST:event_tblProductMouseReleased
		
	private void btnClearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnClearActionPerformed
	{//GEN-HEADEREND:event_btnClearActionPerformed
		clear();
	}//GEN-LAST:event_btnClearActionPerformed
	
	private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteActionPerformed
	{//GEN-HEADEREND:event_btnDeleteActionPerformed
		if (MessageDialog.showYesNoDialog(this,
			MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, "スタッフ販売"),
			this.getTitle(),
			JOptionPane.WARNING_MESSAGE) != JOptionPane.YES_OPTION)
		{
			return;
		}

		//新規の場合、削除できません
		if (!CheckUtil.isNumeric(voucherNo.getText()))
		{
			clear();
			return;
		}

		ConnectionWrapper con = SystemInfo.getConnection();
		try
		{
			try
			{
				con.begin();

				// スタッフ販売データ削除
				dataStaffSales.getDetails().deleteAll(con, true);
				dataStaffSales.delete(con);
				//初期状態に戻る
				clear();
				con.commit();
			}
			catch (Exception e)
			{
				con.rollback();
				throw e;
			}
			finally
			{
				con.close();
			}
		}
		catch (RuntimeException ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			throw ex;
		}
		catch (Exception ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "スタッフ販売"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return;
		}

		MessageDialog.showMessageDialog(this,
			MessageUtil.getMessage(MessageUtil.INFO_DELETE_SUCCESS),
			this.getTitle(),
			JOptionPane.INFORMATION_MESSAGE);
	}//GEN-LAST:event_btnDeleteActionPerformed

	private void btnRegistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRegistActionPerformed
	{//GEN-HEADEREND:event_btnRegistActionPerformed
		//伝票情報を更新する
		if (!inputCheck())
		{
			return;
		}

		if (MessageDialog.showYesNoDialog(this,
			MessageUtil.getMessage(MessageUtil.CONFIRM_REGIST, "スタッフ販売"),
			this.getTitle(),
			JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION)
		{
			return;
		}

		try
		{
			ConnectionWrapper con = SystemInfo.getConnection();
			try
			{
				con.begin();
				DataStaffSales dss = new DataStaffSales();
				//新規の場合
				if (getNewFlag() == 1)
				{
					dss.setShopId(((MstShop)shop.getSelectedItem()).getShopID());

					//伝票NOを生成する
					dss.setNewSlipNo(con);

					// 販売日
					dss.setSalesDate(salesDate.getDate());
					// スタッフ
					MstStaff mstStaff = (MstStaff) staffName.getSelectedItem();
					dss.setStaffId(mstStaff.getStaffID());
					// 確認者
					MstStaff mstConfirmStaff = (MstStaff) confirmStaffName.getSelectedItem();
					if (mstConfirmStaff != null && mstConfirmStaff.getStaffID() != null)
					{
						dss.setConfirmStaffId(mstConfirmStaff.getStaffID());
					}

					//挿入する
					dss.insert(con);
				}
				else
				{
					dss.setShopId(((MstShop)shop.getSelectedItem()).getShopID());
					dss.setSlipNo(Integer.parseInt(voucherNo.getText()));
					// 販売日
					dss.setSalesDate(salesDate.getDate());
					// スタッフ
					MstStaff mstStaff = (MstStaff) staffName.getSelectedItem();
					dss.setStaffId(mstStaff.getStaffID());
					// 確認者
					MstStaff mstConfirmStaff = (MstStaff) confirmStaffName.getSelectedItem();
					if (mstConfirmStaff != null && mstConfirmStaff.getStaffID() != null)
					{
						dss.setConfirmStaffId(mstConfirmStaff.getStaffID());
					}

					dss.update(con);
				}

				//伝票詳細情報を更新し、出庫伝票を作成する
				Map<Integer, DataSlipShip> supplierSlipShipMap = new HashMap<Integer, DataSlipShip>();
				dss.getDetails().deleteAll(con, false);
				for (int i = 0; i < tblDetailInfo.getRowCount(); i++)
				{
					DataStaffSalesDetail dssd = new DataStaffSalesDetail();

					dssd.setShopId(dss.getShopId());
					dssd.setSlipNo(dss.getSlipNo());
					dssd.setSlipDetailNo(i + 1);

					MstItem item = (MstItem)tblDetailInfo.getValueAt(i, 1);
					dssd.setData(item);

					// 単価
					Long price = (Long) tblDetailInfo.getValueAt(i, 2);
					if (price == null)
					{
						price = 0L;
					}
					dssd.setItemValue(BigDecimal.valueOf(price));
					// 数量
					Integer inNum = (Integer) tblDetailInfo.getValueAt(i, 3);
					if (inNum == null || inNum == 0)
					{
						// 0個ならデータベースに追加しない
						continue;
					}
					dssd.setItemNum(inNum);
					// 総金額
					Long totalPrice = (Long) tblDetailInfo.getValueAt(i, 4);
					if (totalPrice == null)
					{
						totalPrice = 0L;
					}
					// 販売金額
					Long salesPrice = (Long) tblDetailInfo.getValueAt(i, 6);
					if (salesPrice == null)
					{
						salesPrice = 0L;
					}
					// 割引金額
					Long discountValue = totalPrice - salesPrice;
					// 割引率
					Number discountRate = (Number) tblDetailInfo.getValueAt(i, 5);
					if (!(0 < discountRate.doubleValue() && discountRate.doubleValue() < 1))
					{
						discountRate = 0d;
					}
					dssd.setDiscountRate(BigDecimal.valueOf(discountRate.doubleValue()));
					dssd.setDiscountValue(BigDecimal.valueOf(discountValue));

					// 店販業務区分
					switch (item.getItemUseDivision())
					{
						case 1:
							dssd.setSalesItemUseDivision(1);
							break;
						case 2:
							dssd.setSalesItemUseDivision(2);
							break;
						case 3:
							dssd.setSalesItemUseDivision(1);
							break;
						default:
							dssd.setSalesItemUseDivision(item.getItemUseDivision());
							break;
					}

					//新規
					dssd.setNewSlipDetailNo(con);
					dssd.insert(con);

					dss.addDetail(dssd);

//					// 出庫伝票作成
//					MstSupplierItem mstSupplierItem = MstSupplierItem.findByItemId(con, item.getItemID());
//					if (mstSupplierItem != null)
//					{
//						DataSlipShip slipShip = supplierSlipShipMap.get(mstSupplierItem.getSupplier().getSupplierID());
//						if (slipShip == null)
//						{
//							slipShip = new DataSlipShip();
//							slipShip.setShopId(dss.getShopId());
//							slipShip.setSupplierId(mstSupplierItem.getSupplier().getSupplierID());
//							slipShip.setSalesSlipNo(dss.getSlipNo());
//							if (!slipShip.loadBySupplierSalesShip(con))
//							{
//								// 自動採番
//								slipShip.setSlipNo(-1);
//							}
//
//							slipShip.setShipDate(dss.getSalesDate());
//							slipShip.setStaffId(dss.getStaffId());
//
//							supplierSlipShipMap.put(mstSupplierItem.getSupplier().getSupplierID(), slipShip);
//						}
//
//						DataSlipShipDetail detail = new DataSlipShipDetail();
//						detail.setShopId(dssd.getShopId());
//						detail.setItemId(dssd.getItemID());
//						switch (item.getItemUseDivision())
//						{
//							case 1:
//								detail.setItemUseDivision(1);
//								break;
//							case 2:
//								detail.setItemUseDivision(2);
//								break;
//							case 3:
//								detail.setItemUseDivision(1);
//								break;
//						}
//						detail.setOutClass(5);
//						detail.setOutNum(dssd.getItemNum());
//						detail.setCostPrice(mstSupplierItem.getCostPrice());
//						slipShip.addDetail(detail);
//					}
				}

//				// スタッフ販売に関連する出庫伝票を物理削除
//				DataSlipShip.physicalDeleteBySalesSlipNo(con, dss.getShopId(), dss.getSlipNo());
//				// 出庫伝票をデータベースに登録
//				for (DataSlipShip slipShip : supplierSlipShipMap.values())
//				{
//					if (slipShip.getSlipNo() <= 0)
//					{
//						slipShip.setNewSlipNo(con);
//					}
//					slipShip.insert(con);
//					for (DataSlipShipDetail d : slipShip.getDetail())
//					{
//						d.setSlipNo(slipShip.getSlipNo());
//						d.setNewSlipDetailNo(con);
//						d.insert(con);
//					}
//				}

				con.commit();

				clear();
				dataStaffSales = dss;
				setNewFlag(0);
				showData();
			}
			catch (Exception e)
			{
				con.rollback();
				throw e;
			}
			finally
			{
				con.close();
			}
		}
		catch (RuntimeException ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			throw ex;
		}
		catch (Exception ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "スタッフ販売"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return;
		}

		MessageDialog.showMessageDialog(this,
			MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
			this.getTitle(),
			JOptionPane.INFORMATION_MESSAGE);
	}//GEN-LAST:event_btnRegistActionPerformed

        private void confirmStaffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_confirmStaffNoFocusLost
			UIUtil.selectStaff(confirmStaffNo, confirmStaffName);
        }//GEN-LAST:event_confirmStaffNoFocusLost
		
		private boolean inputCheck()
		{
			MstStaff mstStaff = (MstStaff) staffName.getSelectedItem();
			if (mstStaff == null || mstStaff.getStaffID() == null)
			{
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "スタッフ"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
				staffName.requestFocusInWindow();
				return	false;
			}

			if (salesDate.getDate() == null)
			{
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "販売日"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
				salesDate.requestFocusInWindow();
				return	false;
			}

			MstStaff mstConfirmStaff = (MstStaff) confirmStaffName.getSelectedItem();
			if (mstConfirmStaff == null || mstConfirmStaff.getStaffID() == null)
			{
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "確認者"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
				confirmStaffName.requestFocusInWindow();
				return	false;
			}

			if (tblDetailInfo.getRowCount() == 0)
			{
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED, "販売する商品"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
				return false;
			}

			// 販売数
			boolean valid = false;
			for (int i = 0; i < tblDetailInfo.getRowCount(); i++)
			{
				Integer num = (Integer) tblDetailInfo.getValueAt(i, 3);
				if (num != null && num != 0)
				{
					valid = true;
					break;
				}
			}

			if (!valid)
			{
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "販売数"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
				return false;
			}

			return true;
		}

    private void tblProductDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductDetailMouseClicked
		if (evt.getClickCount() == 2 && evt.getButton() == 1)
		{
			int selectedRow = tblProductDetail.getSelectedRow();
			if (selectedRow < 0)
			{
				return;
			}

			//追加商品がリストに存在かどうか確認する
			if (!singleCheck((MstItem) tblProductDetail.getValueAt(selectedRow,0)))
			{
				return;
			}

			//イベントフラッグを設置する
			setEventFlg(0);

			//用途を設置する
			MstItem item = (MstItem)tblProductDetail.getValueAt(tblProductDetail.getSelectedRow(), 0);

			DataStaffSalesDetail detail = new DataStaffSalesDetail();
			detail.setData(item);
			detail.setItemNum(0);
			detail.setDiscountRate(BigDecimal.valueOf(0d));
			detail.setDiscountValue(BigDecimal.valueOf(0L));
			addDetailLine(tblDetailInfo, detail);

			//イベントフラッグを設置する
			setEventFlg(1);
		}
    }//GEN-LAST:event_tblProductDetailMouseClicked

	private void tblProductDoClick()
	{
		if (tblProduct.getSelectedRow() < 0)
		{
			SwingUtil.clearTable(tblProductDetail);
			return;
		}
		MstItemClass mic = (MstItemClass)tblProduct.getValueAt(tblProduct.getSelectedRow(),0);

		MstShop mstShop = (MstShop) shop.getSelectedItem();

		MstItems mis = new MstItems(mic.getItemClassID());
		mis.setShopId(mstShop.getShopID());
		try
		{
			mis.loadAllWithShopId(SystemInfo.getConnection());
			//商品リストを初期化する
			SwingUtil.clearTable(tblProductDetail);

			double taxRate = SystemInfo.getTaxRate(new Date());
			for (int i = 0; i<mis.size(); i++)
			{
				if (i == tblProductDetail.getModel().getRowCount())
				{
					((DefaultTableModel)tblProductDetail.getModel()).addRow(new Vector());
				}
				tblProductDetail.setValueAt(mis.get(i),i,0) ;

				long price = mis.get(i).getPrice();
				tblProductDetail.setValueAt(price,i,1) ;

			}
		}
		catch (RuntimeException ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			throw ex;
		}
		catch (Exception ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}
	
    private void confirmStaffNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_confirmStaffNameItemStateChanged
		UIUtil.outputStaff(confirmStaffName, confirmStaffNo);
    }//GEN-LAST:event_confirmStaffNameItemStateChanged

	private void initItemClass()
	{
		classes = new MstItemClasses();
		try
		{
			classes.loadAll(SystemInfo.getConnection());
			for (int i = 0;i < classes.size(); i++)
			{
				MstItemClass class1 = classes.get(i);

				if (i == tblProduct.getModel().getRowCount())
				{
					((DefaultTableModel)tblProduct.getModel()).addRow(new Vector());
				}
				tblProduct.setValueAt(class1,i,0) ;
			}
		}
		catch (RuntimeException ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			throw ex;
		}
		catch (Exception ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}
	
	private boolean singleCheck(MstItem item)
	{
		for (int i = 0; i < tblDetailInfo.getRowCount(); i++)
		{
			MstItem mi = (MstItem) tblDetailInfo.getValueAt(i,1);
			
			if (mi.getItemID() == item.getItemID())
			{
				return false;
			}
		}
		
		return true;
	}

	public int getEventFlg()
	{
		return eventFlg;
	}

	public void setEventFlg(int eventFlg)
	{
		this.eventFlg = eventFlg;
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRegist;
    private javax.swing.JComboBox confirmStaffName;
    private javax.swing.JFormattedTextField confirmStaffNo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lAccount;
    private javax.swing.JLabel lCheap;
    private javax.swing.JLabel lSum;
    private javax.swing.JLabel lTax;
    private javax.swing.JScrollPane panelDetail;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo salesDate;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JComboBox staffName;
    private javax.swing.JFormattedTextField staffNo;
    private com.geobeck.swing.JTableEx tblDetailInfo;
    private javax.swing.JTable tblProduct;
    private javax.swing.JTable tblProductDetail;
    private javax.swing.JTextField voucherNo;
    // End of variables declaration//GEN-END:variables
	
	class SelectionListener implements TableModelListener
	{
		JTable table;
		
		// It is necessary to keep the table since it is not possible
		// to determine the table from the event's source
		SelectionListener(JTable table)
		{
			this.table = table;
		}
		
		
		public void tableChanged(TableModelEvent e)
		{
			int column = e.getColumn();
			int row = e.getFirstRow();
			
			reCalculate(table,row,column);
		}
		
	}

	private void reCalculate(JTable table)
	{
		int cnt = table.getRowCount();
		for (int i = 0; i < cnt; i++)
		{
			reCalculate(table, i, 3);
		}
	}

	private void reCalculate(JTable table, int row, int column)
	{
		//単価
		int PRICE_COLUMN = 2;
		//数量
		int COUNT_COLUMN = 3;
		//金額
		int MONEY_COLUMN = 4;
		//割引
		int CHEAP_COLUMN = 5;
		//合計
		int SUM_COLUMN = 6;
		
		//初期化まだアイテム追加時、処理しない
		if (getEventFlg() == 0)
		{
			return;
		}
		
		if (column == COUNT_COLUMN || column == CHEAP_COLUMN)
		{
			//入庫計と入庫金額を更新する
			BigDecimal priceValue = new BigDecimal(table.getValueAt(row,PRICE_COLUMN).toString());
			BigDecimal countValue = new BigDecimal(table.getValueAt(row,COUNT_COLUMN).toString());

			BigDecimal moneyValue = priceValue.multiply(countValue);
			table.setValueAt(moneyValue.longValue(), row, MONEY_COLUMN);

			BigDecimal sumValue;
			BigDecimal discountValue = new BigDecimal(table.getValueAt(row,CHEAP_COLUMN).toString());
			if (0 < discountValue.doubleValue() && discountValue.doubleValue() < 1)
			{
				sumValue = moneyValue.multiply(BigDecimal.valueOf(1d).subtract(discountValue)).setScale(0, BigDecimal.ROUND_FLOOR);
			}
			else
			{
				discountValue = discountValue.setScale(0, BigDecimal.ROUND_FLOOR);
				sumValue = moneyValue.subtract(discountValue);
			}
			table.setValueAt(sumValue.longValue(), row, SUM_COLUMN);

			//合計入庫数,添付数、入庫計、まだ入庫金額を更新する
			BigDecimal totalMoney = new BigDecimal("0");
			BigDecimal totalSum = new BigDecimal("0");
			for (int i = 0; i < table.getRowCount(); i++)
			{
				totalMoney = totalMoney.add(new BigDecimal(table.getValueAt(i,MONEY_COLUMN).toString()));
				totalSum = totalSum.add(new BigDecimal(table.getValueAt(i,SUM_COLUMN).toString()));
			}
			BigDecimal totalCheap = totalMoney.subtract(totalSum);

			//値を設置する
			DecimalFormat fmt = new DecimalFormat("#,##0");
			lAccount.setText(fmt.format(totalMoney.longValue()));
			lCheap.setText(fmt.format(totalCheap.longValue()));

			double taxRate;
			if (salesDate == null)
			{
				taxRate = SystemInfo.getTaxRate(new Date());
			}
			else
			{
				taxRate = SystemInfo.getTaxRate(salesDate.getDate());
			}

			lTax.setText(fmt.format(TaxUtil.getTax(totalSum.longValue(), taxRate, 1)));
			lSum.setText(fmt.format(totalSum.longValue()));
		}
	}

	public int getNewFlag()
	{
		return newFlag;
	}
	
	public void setNewFlag(int newFlag)
	{
		this.newFlag = newFlag;
	}
	
	/*
	 *新規状態に戻る
	 */
	private void clear()
	{
		dataStaffSales = new DataStaffSales();

		showData();
		//新規フラグを設置する
		setNewFlag(1);
	}

	public void load(int shopId, int slipNo)
	{
		dataStaffSales.setShopId(shopId);
		dataStaffSales.setSlipNo(slipNo);
		try
		{
			ConnectionWrapper con = SystemInfo.getConnection();
			try
			{
				dataStaffSales.load(con);
			}
			finally
			{
				con.close();
			}

			setEventFlg(0);
			showData();
			setEventFlg(1);
			reCalculate(tblDetailInfo);
			setNewFlag(0);
		}
		catch (RuntimeException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			throw e;
		}
		catch (Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}

	private void showData()
	{
		SwingUtil.clearTable(tblProductDetail);
		SwingUtil.clearTable(tblDetailInfo);

		if (dataStaffSales.getSlipNo() == 0)
		{
			shop.setSelectedIndex(0);
			voucherNo.setText("＜新規＞");
			salesDate.setDate(new Date());
			staffNo.setText("");
			staffName.setSelectedIndex(0);
			confirmStaffNo.setText("");
			confirmStaffName.setSelectedIndex(0);

//			if (shop.getItemCount() > 1)
//			{
//				shop.setEnabled(true);
//			}
//
//			salesDate.setEditable(true);
//			staffNo.setEditable(true);
//			staffName.setEnabled(true);
//			confirmStaffNo.setEditable(true);
//			confirmStaffName.setEnabled(true);
			btnDelete.setEnabled(false);
		}
		else
		{
			MstShop mstShop = new MstShop();
			mstShop.setShopID(dataStaffSales.getShopId());
			shop.setSelectedItem(mstShop);

			voucherNo.setText(String.valueOf(dataStaffSales.getSlipNo()));
			salesDate.setDate(dataStaffSales.getSalesDate());
			MstStaff mstStaff = new MstStaff();
			mstStaff.setStaffID(dataStaffSales.getStaffId());
			staffName.setSelectedItem(mstStaff);
			mstStaff = new MstStaff();
			mstStaff.setStaffID(dataStaffSales.getConfirmStaffId());
			confirmStaffName.setSelectedItem(mstStaff);

			for (DataStaffSalesDetail d : dataStaffSales.getDetails())
			{
				addDetailLine(tblDetailInfo, d);
			}

//			if (shop.getItemCount() > 1)
//			{
//				shop.setEnabled(false);
//			}
//
//			salesDate.setEditable(false);
//			staffNo.setEditable(false);
//			staffName.setEnabled(false);
//			confirmStaffNo.setEditable(false);
//			confirmStaffName.setEnabled(false);

			btnDelete.setEnabled(true);
		}
	}

	public void addDetailLine(JTable tblDetailInfo, DataStaffSalesDetail d)
	{
		Vector v = new Vector();
		MstItemClass cls = classes.lookup(d.getItemClass().getItemClassID());
		v.add(cls);
		v.add(d);
		v.add(d.getPrice());
		v.add(d.getItemNum());
		long sum = d.getPrice() * d.getItemNum();
		v.add(sum);
		double discountRate = d.getDiscountRate().doubleValue();
		if (0 < discountRate && discountRate < 1)
		{
			v.add(d.getDiscountRate().doubleValue());
		}
		else
		{
			v.add(d.getDiscountValue().longValue());
		}
		v.add(sum - d.getDiscountValue().longValue());
		v.add(getDeleteButton());

		int rowIndex = findInsertPoint(tblDetailInfo, d);
		//一行を追加する
		((DefaultTableModel)tblDetailInfo.getModel()).insertRow(rowIndex, v);
	}

	private int findInsertPoint(JTable tblDetailInfo, MstItem item)
	{
		int itemClassDispSeq = classes.lookup(item.getItemClass().getItemClassID()).getDisplaySeq();
		int itemDispSeq = item.getDisplaySeq();

		int itemUseDivision = item.getItemUseDivision();
		int cnt = tblDetailInfo.getRowCount();
		for (int i = 0; i < cnt; i++)
		{
			MstItem rowItem = (MstItem) tblDetailInfo.getValueAt(i, 1);
			MstItemClass cls = classes.lookup(rowItem.getItemClass().getItemClassID());
			if (cls.getDisplaySeq() > itemClassDispSeq)
			{
				return i;
			}
			else if (cls.getDisplaySeq() == itemClassDispSeq)
			{
				if (rowItem.getDisplaySeq() > itemDispSeq)
				{
					return i;
				}
			}
		}
		
		return cnt;
	}

	/**
	 * 担当者を初期化する。
	 */
	protected void initStaff( JComboBox cb )
	{
		cb.addItem(new MstStaff());
		SystemInfo.initStaffComponent(cb);
		
		cb.setSelectedIndex(0);
	}
	
	/**
	 *
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(btnRegist);
		SystemInfo.addMouseCursorChange(btnDelete);
		SystemInfo.addMouseCursorChange(btnClear);
		SystemInfo.addMouseCursorChange(btnClose);
	}
	
	/**
	 *
	 */
	private void setKeyListener()
	{
		shop.addKeyListener(SystemInfo.getMoveNextField());
		shop.addFocusListener(SystemInfo.getSelectText());
		staffNo.addKeyListener(SystemInfo.getMoveNextField());
		staffNo.addFocusListener(SystemInfo.getSelectText());
		staffName.addKeyListener(SystemInfo.getMoveNextField());
		salesDate.addKeyListener(SystemInfo.getMoveNextField());
		salesDate.addFocusListener(SystemInfo.getSelectText());
		confirmStaffNo.addKeyListener(SystemInfo.getMoveNextField());
		confirmStaffNo.addFocusListener(SystemInfo.getSelectText());
		confirmStaffName.addKeyListener(SystemInfo.getMoveNextField());
	}
	
	/**
	 * 明細の列を初期化する。
	 */
	private void initDetailColumn()
	{
		//列の幅を設定する。
		tblDetailInfo.getColumnModel().getColumn(0).setPreferredWidth(90);		// 分類
		tblDetailInfo.getColumnModel().getColumn(1).setPreferredWidth(180);		// 商品名
		tblDetailInfo.getColumnModel().getColumn(2).setPreferredWidth(85);		// 単価
		tblDetailInfo.getColumnModel().getColumn(3).setPreferredWidth(65);		// 数量
		tblDetailInfo.getColumnModel().getColumn(4).setPreferredWidth(85);		// 金額
		tblDetailInfo.getColumnModel().getColumn(5).setPreferredWidth(85);		// 割引
		tblDetailInfo.getColumnModel().getColumn(6).setPreferredWidth(128);		// 合計
		tblDetailInfo.getColumnModel().getColumn(7).setPreferredWidth(48);		// 削除
		tblDetailInfo.getColumnModel().getColumn(7).setResizable(false);
	}

	/**
	 * 削除ボタンを取得する
	 */
	private JButton getDeleteButton()
	{
		JButton		delButton	=	new JButton();
		delButton.setBorderPainted(false);
		delButton.setContentAreaFilled(false);
		delButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_off.jpg")));
		delButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_on.jpg")));
		delButton.setSize(48, 25);
		delButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				deleteProduct();
			}
		});
		return delButton;
	}

	/**
	 * 売上明細を１行削除する。
	 * @param index 削除する明細のインデックス
	 * @param evt 
	 */
	private void deleteProduct()
	{
		DefaultTableModel	model		=	(DefaultTableModel) tblDetailInfo.getModel();
		int					row			=	tblDetailInfo.getSelectedRow();		// 選択行
		int					modelRow	=	tblDetailInfo.convertRowIndexToModel(row);

		if( tblDetailInfo.getCellEditor() != null ) tblDetailInfo.getCellEditor().stopCellEditing();
		model.removeRow(modelRow);
	}

	/**
	 * 割引セル描画クラス
	 */
	private static class DiscountCellRenderer extends DefaultTableCellRenderer
	{
		/**
		 * セルの端とテキストのマージン
		 */
		private static final	int		SIDE_MARGIN		=	4;

		private	Object		value			=	null;
		/**
		 * 選択されているかどうか
		 */
		private	boolean		isSelected		=	false;

		/**
		 * 選択時の色
		 */
		private Color		selectedRowColor	=	null;

		/**
		 * 影の色０
		 */
		private Color		shadow0Color		=	null;
		/**
		 * 影の色１
		 */
		private Color		shadow1Color		=	null;
		/**
		 * ハイライトの色
		 */
		private Color		highlightColor		=	null;

		/**
		 * コンストラクタ
		 */
		public DiscountCellRenderer()
		{
			super();
			//setSelectedRowColor(new Color(236, 236, 236));
			setSelectedRowColor(new Color(255, 210, 142));
			setShadow0Color(new Color(113, 113, 113));
			setShadow1Color(new Color(172, 172, 172));
			setHighlightColor(new Color(241, 241, 241));
		}

		public String getText()
		{
			if(super.getText() == null)
			{
				return	"";
			}
			else
			{
				return	super.getText();
			}
		}


		/**
		 * 選択時の色を取得する。
		 * @return 選択時の色
		 */
		public Color getSelectedRowColor()
		{
			return selectedRowColor;
		}

		/**
		 * 選択時の色を設定する。
		 * @param selectedRowColor 選択時の色
		 */
		public void setSelectedRowColor(Color selectedRowColor)
		{
			this.selectedRowColor = selectedRowColor;
		}

		/**
		 * 影の色０を取得する。
		 * @return 影の色０
		 */
		public Color getShadow0Color()
		{
			return shadow0Color;
		}

		/**
		 * 影の色０を設定する。
		 * @param shadow0Color 影の色０
		 */
		public void setShadow0Color(Color shadow0Color)
		{
			this.shadow0Color = shadow0Color;
		}

		/**
		 * 影の色１を取得する。
		 * @return 影の色１
		 */
		public Color getShadow1Color()
		{
			return shadow1Color;
		}

		/**
		 * 影の色１を設定する。
		 * @param shadow1Color 影の色１
		 */
		public void setShadow1Color(Color shadow1Color)
		{
			this.shadow1Color = shadow1Color;
		}

		/**
		 * ハイライトの色を取得する。
		 * @return ハイライトの色
		 */
		public Color getHighlightColor()
		{
			return highlightColor;
		}

		/**
		 * ハイライトの色を設定する。
		 * @param highlightColor ハイライトの色
		 */
		public void setHighlightColor(Color highlightColor)
		{
			this.highlightColor = highlightColor;
		}

		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);

			this.value	=	value;
			this.isSelected	=	isSelected;
			super.setForeground((isSelected ? table.getSelectionForeground() : table.getForeground()));
			super.setBackground((isSelected ? table.getSelectionBackground() : table.getBackground()));
			return this;
		}

		/**
		 * 数値かどうかを設定する。
		 * @param value 判定する値
		 */
		private boolean isNumeric()
		{
			if(value instanceof Integer || 
					value instanceof Byte || 
					value instanceof Short || 
					value instanceof Long || 
					value instanceof Float || 
					value instanceof Double)
				return	true;
			else
				return	false;
		}

		/**
		 * 小数かどうかを設定する。
		 * @param value 判定する値
		 */
		private boolean isDecimal()
		{
			if(value instanceof Float || 
					value instanceof Double)
				return	true;
			else
				return	false;
		}

		/**
		 * 描画処理を行う。
		 * @param g Graphics
		 */
		public void paint(Graphics g)
		{
			//選択されている場合、凹んでいるように背景を描画する
			if(isSelected)
			{
				g.setColor(selectedRowColor);
				g.fillRect(0, 0, this.getWidth(), this.getHeight());
				g.setColor(shadow0Color);
				g.drawLine(0, 0, 0, this.getHeight() - 1);
				g.drawLine(0, 0, this.getWidth() - 1, 0);
				g.setColor(shadow1Color);
				g.drawLine(1, 1, 1, this.getHeight() - 2);
				g.drawLine(1, 1, this.getWidth() - 2, 1);
				g.setColor(highlightColor);
				g.drawLine(this.getWidth() - 1, 1, this.getWidth() - 1, this.getHeight() - 1);
				g.drawLine(1, this.getHeight() - 1, this.getWidth() - 1, this.getHeight() - 1);
			}
			//選択されていない場合
			else
			{
				g.setColor(Color.white);
				g.fillRect(0, 0, this.getWidth(), this.getHeight());
			}

			g.setColor(Color.black);

			String	temp	=	this.getText();

			Color foreColor = this.getForeground();
			if(this.isNumeric())
			{
				if(this.isDecimal() && 0d < ((Number) value).doubleValue() && ((Number) value).doubleValue() < 1d)
				{
					temp	=	String.format("%1$,.2f", value);
				}
				else
				{
					temp	=	String.format("%1$,d", ((Number) value).longValue());
				}

				if (((Number) value).doubleValue() < 0)
				{
					foreColor = Color.red;
				}
			}

			int	baseX	=	0;
			Rectangle2D	r2d	=	this.getFont().getStringBounds(temp,
					new FontRenderContext(new AffineTransform(), true, false));

			switch(this.getHorizontalAlignment())
			{
				case SwingConstants.LEADING:
					if(this.isNumeric())
					{
						baseX	=	this.getWidth() - ((Double)r2d.getWidth()).intValue() - SIDE_MARGIN;
					}
					else if(isDateTime(this.getText()) || isPostalCode(this.getText()))
					{
						baseX	=	(this.getWidth() - ((Double)r2d.getWidth()).intValue()) / 2;
					}
					else
					{
						baseX	=	SIDE_MARGIN;
					}
					break;
				case SwingConstants.LEFT:
					baseX	=	SIDE_MARGIN;
					break;
				case SwingConstants.CENTER:
					baseX	=	(this.getWidth() - ((Double)r2d.getWidth()).intValue()) / 2;
					break;
				case SwingConstants.RIGHT:
					baseX	=	this.getWidth() - ((Double)r2d.getWidth()).intValue() - SIDE_MARGIN;
					break;
			}

			int	baseY	=	-1;

			switch(this.getVerticalAlignment())
			{
				case SwingConstants.TOP:
					baseY	+=	this.getFont().getSize();
					break;
				case SwingConstants.CENTER:
					baseY	+=	(this.getHeight() + this.getFont().getSize()) / 2;
					break;
				case SwingConstants.BOTTOM:
					baseY	+=	this.getHeight();
					break;
			}

			g.setColor(foreColor);

			g.drawString(temp, baseX + (isSelected ? 1 : 0), baseY + (isSelected ? 1 : 0));
		}

		private static boolean isDateTime(String value)
		{
			return	value.matches("[0-9]{4}/[0-9]{2}/[0-9]{2}") ||
					value.matches("[0-9]{4}/[0-9]{2}") ||
					value.matches("[0-9]{2}:[0-9]{2}");
		}

		private static boolean isPostalCode(String value)
		{
			return	value.matches("[0-9]{3}-[0-9]{4}");
		}
	}

	private class FocusTraversalPolicyImpl extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(shop))
			{
				return staffNo;
			}
			else if (aComponent.equals(staffNo))
			{
				return staffName;
			}
			else if (aComponent.equals(staffName))
			{
				return salesDate;
			}
			else if (aComponent.equals(salesDate))
			{
				return confirmStaffNo;
			}
			else if (aComponent.equals(confirmStaffNo))
			{
				return confirmStaffName;
			}
			else if (aComponent.equals(confirmStaffName))
			{
				return shop;
			}
			
			return shop;
		}
		
		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(confirmStaffName))
			{
				return confirmStaffNo;
			}
			else if (aComponent.equals(confirmStaffNo))
			{
				return salesDate;
			}
			else if (aComponent.equals(salesDate))
			{
				return staffName;
			}
			else if (aComponent.equals(staffName))
			{
				return staffNo;
			}
			else if (aComponent.equals(staffNo))
			{
				return shop;
			}
			
			return shop;
		}
		
		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return shop;
		}
		
		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return confirmStaffName;
		}
		
		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return shop;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return shop;
		}
	}
}



