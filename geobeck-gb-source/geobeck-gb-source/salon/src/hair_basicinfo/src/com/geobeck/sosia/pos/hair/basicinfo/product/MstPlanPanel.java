
/*
 * MstPlanPanel.java
 *
 * Created on 2018/03/05, 10:58
 */
package com.geobeck.sosia.pos.hair.basicinfo.product;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.hair.master.product.*;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.util.ArrayList;

/**
 *
 * @author lvtu
 */
public class MstPlanPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private MstCourseClasses        mccs = new MstCourseClasses();
    private MstCourseClass          mtc = new MstCourseClass();
    private MstPlan                 mp = new MstPlan();
    private ArrayList<MstPlan>      listPlan = new ArrayList<MstPlan>();
    private Integer                 selIndex = -1;

    /**
     * Creates new form MstPlanPanel
     */
    public MstPlanPanel() {
        super();
        initComponents();
        addMouseCursorChange();
        this.setSize(900, 670);
        this.setPath("基本設定＞月会員管理＞プラン登録");
        this.setTitle("プラン登録");
        this.setListener();
        this.init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        praiseTimeLimitGroup = new javax.swing.ButtonGroup();
        numLabel = new javax.swing.JLabel();
        praiseTimeLimitLabel = new javax.swing.JLabel();
        displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        renewButton = new javax.swing.JButton();
        courseClassLable = new javax.swing.JLabel();
        price = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)price.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        try
        {
            ConnectionWrapper	con	=	SystemInfo.getConnection();

            mccs.load(con);
            mccs.add(0, new MstCourseClass());

            con.close();
        }
        catch(SQLException e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        cmbCourseClass = new JComboBox(mccs.toArray());
        deleteButton = new javax.swing.JButton();
        planNameText = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)planNameText.getDocument()).setDocumentFilter(
            new CustomFilter(60));
        planNameLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        technicsScrollPane = new javax.swing.JScrollPane();
        planTable = new javax.swing.JTable();
        displaySeqLabel = new javax.swing.JLabel();
        praiseTimeLimit = new com.geobeck.swing.JFormattedTextFieldEx();
        num = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)num.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        yenLabel = new javax.swing.JLabel();
        cmbCourse = new javax.swing.JComboBox();
        courseLable = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        TimesLabel = new javax.swing.JLabel();

        setFocusCycleRoot(true);

        numLabel.setText("消化回数");

        praiseTimeLimitLabel.setText("有効期限");

        displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        displaySeq.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                displaySeqFocusLost(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        courseClassLable.setText("コース分類");

        price.setEditable(false);
        price.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        price.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        cmbCourseClass.setMaximumRowCount(12);
        cmbCourseClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbCourseClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCourseClassActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        planNameText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        planNameText.setColumns(30);
        planNameText.setInputKanji(true);

        planNameLabel.setText("プラン名");

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        technicsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        planTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "プラン名", "コース分類名", "コース名", "金額", "消化回数", "有効期限", "表示順"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Long.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        planTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        planTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        planTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        planTable.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(planTable, SystemInfo.getTableHeaderRenderer());
        planTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(planTable);
        planTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                planTableMouseReleased(evt);
            }
        });
        planTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                planTableKeyReleased(evt);
            }
        });
        technicsScrollPane.setViewportView(planTable);

        displaySeqLabel.setText("表示順");

        praiseTimeLimit.setEditable(false);
        praiseTimeLimit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        praiseTimeLimit.setColumns(15);
        praiseTimeLimit.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        num.setEditable(false);
        num.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        num.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        yenLabel.setText("円");

        cmbCourse.setMaximumRowCount(12);
        cmbCourse.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCourseActionPerformed(evt);
            }
        });

        courseLable.setText("コース名");

        priceLabel.setText("金額");

        TimesLabel.setText("回");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(planNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(planNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(50, 50, 50)
                .add(displaySeqLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(courseClassLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(cmbCourseClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 253, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(courseLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(cmbCourse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 253, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(86, 86, 86)
                .add(priceLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(price, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(yenLabel)
                .add(39, 39, 39)
                .add(numLabel)
                .add(4, 4, 4)
                .add(num, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(TimesLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(86, 86, 86)
                .add(praiseTimeLimitLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(praiseTimeLimit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(304, 304, 304)
                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(8, 8, 8)
                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(8, 8, 8)
                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(technicsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 820, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(planNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(planNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displaySeqLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(courseClassLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbCourseClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(courseLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbCourse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(priceLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(price, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(yenLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(numLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(num, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(TimesLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(praiseTimeLimitLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(praiseTimeLimit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(17, 17, 17)
                .add(technicsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void displaySeqFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_displaySeqFocusLost
        if (!CheckUtil.isNumber(displaySeq.getText())) {
            displaySeq.setText("");
        }
    }//GEN-LAST:event_displaySeqFocusLost

    private void cmbCourseClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCourseClassActionPerformed
        changeCourseByCourseClass();
    }//GEN-LAST:event_cmbCourseClassActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
            if (this.delete()) {
                this.refresh();
            }
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
            if (this.checkInput()) {
                if (this.regist(false)) {
                    this.refresh();
                } else {
                    MessageDialog.showMessageDialog(
                            this,
                            MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "プラン登録"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }
            }
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
            if (this.checkInput()) {
                if (this.regist(true)) {
                    this.refresh();
                } else {
                    MessageDialog.showMessageDialog(
                            this,
                            MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "プラン登録"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }
            }
	}//GEN-LAST:event_addButtonActionPerformed

	private void planTableMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_planTableMouseReleased
	{//GEN-HEADEREND:event_planTableMouseReleased
            this.changeCurrentData();
	}//GEN-LAST:event_planTableMouseReleased

	private void planTableKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_planTableKeyReleased
	{//GEN-HEADEREND:event_planTableKeyReleased
            this.changeCurrentData();
	}//GEN-LAST:event_planTableKeyReleased

    private void cmbCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCourseActionPerformed
        if (0 <= cmbCourse.getSelectedIndex()) {
            MstCourse course = (MstCourse) cmbCourse.getSelectedItem();
            this.setValueCourse(course);
        } else {
            this.price.setText(new String());
            this.praiseTimeLimit.setText(new String());
            this.num.setText(new String());
        }
    }//GEN-LAST:event_cmbCourseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TimesLabel;
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox cmbCourse;
    private javax.swing.JComboBox cmbCourseClass;
    private javax.swing.JLabel courseClassLable;
    private javax.swing.JLabel courseLable;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private com.geobeck.swing.JFormattedTextFieldEx num;
    private javax.swing.JLabel numLabel;
    private javax.swing.JLabel planNameLabel;
    private com.geobeck.swing.JFormattedTextFieldEx planNameText;
    private javax.swing.JTable planTable;
    private com.geobeck.swing.JFormattedTextFieldEx praiseTimeLimit;
    private javax.swing.ButtonGroup praiseTimeLimitGroup;
    private javax.swing.JLabel praiseTimeLimitLabel;
    private com.geobeck.swing.JFormattedTextFieldEx price;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JButton renewButton;
    private javax.swing.JScrollPane technicsScrollPane;
    private javax.swing.JLabel yenLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * プランマスタ登録画面用FocusTraversalPolicy
     */
    private MstPlanFocusTraversalPolicy ftp
            = new MstPlanFocusTraversalPolicy();

    /**
     * プランマスタ登録画面用FocusTraversalPolicyを取得する。
     *
     * @return コースマスタ登録画面用FocusTraversalPolicy
     */
    public MstPlanFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(addButton);
        SystemInfo.addMouseCursorChange(renewButton);
        SystemInfo.addMouseCursorChange(deleteButton);
    }

    /**
     * コンポーネントの各リスナーをセットする。
     */
    private void setListener() {
        displaySeq.addKeyListener(SystemInfo.getMoveNextField());
        displaySeq.addFocusListener(SystemInfo.getSelectText());
        price.addKeyListener(SystemInfo.getMoveNextField());
        price.addFocusListener(SystemInfo.getSelectText());
        cmbCourseClass.addKeyListener(SystemInfo.getMoveNextField());
        cmbCourse.addKeyListener(SystemInfo.getMoveNextField());
        planNameText.addKeyListener(SystemInfo.getMoveNextField());
        planNameText.addFocusListener(SystemInfo.getSelectText());
    }

    /**
     * 初期化処理を行う。
     */
    private void init() {
        if (0 < mccs.size()) {
            cmbCourseClass.setSelectedIndex(0);
        }

        this.refresh();
    }

    /**
     * 再表示を行う。
     */
    private void refresh() {
        try {
            ConnectionWrapper con = SystemInfo.getConnection();

            listPlan = mp.load(con);
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        //テーブルに商品マスタデータを表示する
        this.showData();
        //入力をクリアする
        this.clear();

        planNameText.requestFocusInWindow();
    }

    /**
     * 入力項目をクリアする。
     */
    private void clear() {
        selIndex = -1;
        planNameText.setText("");
        displaySeq.setText("");
        if (0 < planTable.getRowCount()) {
            planTable.removeRowSelectionInterval(0, planTable.getRowCount() - 1);
        }
        if (0 < mccs.size()) {
            cmbCourseClass.setSelectedIndex(0);
        }
        if(0 < mtc.size()) {
            cmbCourse.setSelectedIndex(0);
        }

        this.changeCurrentData();

    }

    /**
     * データを表示する。
     */
    private void showData() {
        SwingUtil.clearTable(planTable);
        DefaultTableModel model = (DefaultTableModel) planTable.getModel();

        for (MstPlan mplan : listPlan) {
            Object[] rowData = {mplan,
                mplan.getCourseClass().getCourseClassName(),
                mplan.getCourse().getCourseName(),
                mplan.getCourse().getPrice(),
                mplan.getCourse().getNum(),
                mplan.getCourse().getPraiseTimeLimit(),
                mplan.getDisplaySeq()
            };
            model.addRow(rowData);
        }
    }

    /**
     * change course by Course class
     */
    private void changeCourseByCourseClass() {
        if(0 <= cmbCourseClass.getSelectedIndex()){
            mtc = (MstCourseClass) cmbCourseClass.getSelectedItem();
            if(mtc.getCourseClassID() != null) {
                try {
                    ConnectionWrapper con = SystemInfo.getConnection();

                    mtc.loadCourse(con);
                    mtc.add(0, new MstCourse());
                } catch (Exception e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
            }
        }
        cmbCourse.removeAllItems();
        for (MstCourse item : mtc) {
            cmbCourse.addItem(item);
        }
    }

    /**
     * 選択データが変更されたときの処理を行う。
     */
    private void changeCurrentData() {
        int index = planTable.getSelectedRow();

        if (0 <= index && index < listPlan.size() && index != selIndex) {
            selIndex = index;
            //選択されているデータを表示
            this.showCurrentData();
        }

        this.changeButtonEnabled(0 <= selIndex);
    }

    /**
     * 選択されたデータを入力項目に表示する。
     */
    private void showCurrentData() {
        MstPlan mplan = listPlan.get(selIndex);

        planNameText.setText(mplan.getPlanName());
        displaySeq.setText(mplan.getDisplaySeq().toString());
        cmbCourseClass.setSelectedIndex(0);
        this.setSelectedCourseClassID(mplan.getCourseClass().getCourseClassID());
        cmbCourse.setSelectedIndex(0);
        this.setSelectedCourseID(mplan.getCourse().getCourseID());
    }

    /**
     * ボタンのEnabledを変更する。
     *
     * @param enabled Enabled
     */
    private void changeButtonEnabled(boolean enabled) {
        renewButton.setEnabled(enabled);
        deleteButton.setEnabled(enabled);
    }

    /**
     * 入力チェックを行う。
     *
     * @return 入力エラーがなければtrueを返す。
     */
    private boolean checkInput() {
        //プラン名
        if (planNameText.getText().trim().equals("")) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "プラン名"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            planNameText.requestFocusInWindow();
            return false;
        }
        //コース分類
        if (cmbCourseClass.getSelectedIndex() <= 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "コース分類"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbCourseClass.requestFocusInWindow();
            return false;
        }
        //コース名
        if (cmbCourse.getSelectedIndex() <= 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "コース名"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbCourse.requestFocusInWindow();
            return false;
        }
        //表示順
        if (displaySeq.getText().equals("0")) {
            MessageDialog.showMessageDialog(this,
                    "挿入位置は 1 以上を指定してください。",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            displaySeq.requestFocusInWindow();
            return false;
        }

        return true;
    }

    /**
     * 選択されているコース分類ＩＤをセットする。
     *
     * @param courseClassID コース分類ＩＤ
     */
    public void setSelectedCourseClassID(Integer courseClassID) {
        if (courseClassID == null) {
            return;
        }

        for (MstCourseClass tc : mccs) {
            if (courseClassID.equals(tc.getCourseClassID())) {
                cmbCourseClass.setSelectedItem(tc);
                return;
            }
        }
    }

    /**
     * 選択されているコースＩＤをセットする。
     *
     * @param courseID コースＩＤ
     */
    public void setSelectedCourseID(Integer courseID) {
        if (courseID == null) {
            return;
        }

        for (MstCourse item : mtc) {
            if (courseID.equals(item.getCourseID())) {
                cmbCourse.setSelectedItem(item);
                return;
            }
        }
    }
    
    /**
     * 選択されているコースをセットする。
     * @param course コース
     */
    private void setValueCourse(MstCourse course) {
        if (course != null && course.getCourseID() != null) {
            this.price.setText(course.getPrice().toString());
            this.praiseTimeLimit.setText(course.getPraiseTimeLimit().toString() + "ヵ月");
            this.num.setText(course.getNum().toString());
        } else {
            this.price.setText(new String());
            this.praiseTimeLimit.setText(new String());
            this.num.setText(new String());
        }
    }

    /**
     * 入力されたデータを登録する。
     *
     * @param isAdd true - 追加処理
     * @return true - 成功
     */
    private boolean regist(boolean isAdd) {
        boolean result = false;
        MstPlan mplan = new MstPlan();

        if (!isAdd && 0 <= selIndex) {
            mplan.setData(listPlan.get(selIndex));
        }
        this.setData(mplan);

        ConnectionWrapper con = SystemInfo.getConnection();

        try {

            con.begin();

            if (mplan.regist(con, (0 <= selIndex ? listPlan.get(selIndex).getDisplaySeq() : -1))) {
                result = true;
                con.commit();
            } else {
                con.rollback();
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return result;
    }

    /**
     * プランマスタデータからデータをセットする。
     *
     * @param mt プランマスタデータ
     */
    private void setData(MstPlan mp) {
        mp.setCourse((MstCourse) cmbCourse.getSelectedItem());
        mp.setPlanName(planNameText.getText());
        mp.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText().replace(",", ""))));
    }

    /**
     * 選択されたデータを削除する。
     *
     * @return true - 成功
     */
    private boolean delete() {
        boolean result = false;
        MstPlan mplan = new MstPlan();

        if (0 <= selIndex && selIndex < listPlan.size()) {
            mplan = listPlan.get(selIndex);
        }

        ConnectionWrapper con = SystemInfo.getConnection();

        try {

            con.begin();
            
            // プランを設定している顧客がいる場合は削除不可
            if(mplan.isExistsPlanSettingCustomer(con)) {
                MessageDialog.showMessageDialog(this,
                    "このプランを課金中の顧客がいるため削除できません。",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                planNameText.requestFocusInWindow();
                return false;
            }
            
            //削除確認
            if(MessageDialog.showYesNoDialog(this,
                            MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, mplan.getPlanName()),
                            this.getTitle(),
                            JOptionPane.WARNING_MESSAGE) != 0)
            {
                    return false;
            }

            if (mplan.delete(con)) {
                con.commit();
                this.refresh();
                result = true;
            } else {
                con.rollback();
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return result;
    }

    /**
     * プランマスタ登録画面用FocusTraversalPolicy
     */
    private class MstPlanFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(planNameText)) {
                return cmbCourseClass;
            } else if (aComponent.equals(cmbCourseClass)) {
                return cmbCourse;
            } else if (aComponent.equals(cmbCourse)) {
                return displaySeq;
            } else if (aComponent.equals(displaySeq)) {
                return planNameText;
            }

            return planNameText;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(planNameText)) {
                return planNameText;
            } else if (aComponent.equals(cmbCourseClass)) {
                return planNameText;
            } else if (aComponent.equals(cmbCourse)) {
                return cmbCourseClass;
            } else if (aComponent.equals(displaySeq)) {
                return cmbCourse;
            }

            return planNameText;
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。 このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer 先頭の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer) {
            return planNameText;
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。 このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer aContainer - 最後の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer) {
            return displaySeq;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。 aContainer
         * をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         *
         * @param aContainer デフォルトの Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer) {
            return planNameText;
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。 show() または setVisible(true)
         * の呼び出しで一度ウィンドウが表示されると、 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、 または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         *
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        public Component getInitialComponent(Window window) {
            return planNameText;
        }
    }

    /**
     * JTableの列幅を初期化する。
     */
    private void initTableColumnWidth() {
        //列の幅を設定する。
        planTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        planTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        planTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        planTable.getColumnModel().getColumn(3).setPreferredWidth(50);
        planTable.getColumnModel().getColumn(4).setPreferredWidth(50);
        planTable.getColumnModel().getColumn(5).setPreferredWidth(50);
        planTable.getColumnModel().getColumn(6).setPreferredWidth(50);
    }
}
