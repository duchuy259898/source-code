
/*
 * DataMonthlyBatchPanel.java
 *
 * Created on 2018/03/16, 10:58
 */
package com.geobeck.sosia.pos.hair.basicinfo.product;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.sql.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.data.account.DataPayment;
import com.geobeck.sosia.pos.data.account.DataPaymentDetail;
import com.geobeck.sosia.pos.hair.customer.MstCustomerPanel;
import com.geobeck.sosia.pos.hair.data.account.Course;
import com.geobeck.sosia.pos.hair.data.account.DataSales;
import com.geobeck.sosia.pos.hair.data.account.DataSalesDetail;
import com.geobeck.sosia.pos.hair.data.course.DataContract;
import com.geobeck.sosia.pos.hair.data.member.DataMonthlyBatchDetailLog;
import com.geobeck.sosia.pos.hair.data.member.DataMonthlyBatchLog;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.account.MstAccountSetting;
import com.geobeck.sosia.pos.master.account.MstPaymentClass;
import com.geobeck.sosia.pos.master.account.MstPaymentClasses;
import com.geobeck.sosia.pos.master.account.MstPaymentMethod;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.company.MstStaffs;
import com.geobeck.sosia.pos.products.Product;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.border.BevelBorder;

/**
 *
 * @author lvtu
 */
public class DataMonthlyBatchPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private final int COL_BUTTON_CUSTOMER           = 1;
   
    private final int COL_CHECK                     = 10;
    /**
     * îÑä|ã‡ÉRÅ[Éh
     */
    private final int CODE_ACCOUNTS_RECEIVABLE      = 999;
    /**
     * îÑä|ã‡
     */
    private final String NAME_ACCOUNTS_RECEIVABLE   = "îÑä|ã‡";

    private MstPaymentClasses mp = new MstPaymentClasses();
    private ArrayList<DataMonthlyBatchLog> dataBatch = new ArrayList<DataMonthlyBatchLog>();
    private DataMonthlyBatchLog batch = new DataMonthlyBatchLog();
    /**
     * ÉXÉ^ÉbÉtÉäÉXÉg
     */
    protected MstStaffs staffs = null;

    /**
     * Creates new form DataMonthlyBatchPanel
     */
    public DataMonthlyBatchPanel() {
        super();
        initComponents();
        addMouseCursorChange();
        this.setSize(900, 670);
        this.setPath("äÓñ{ê›íËÅÑåéâÔàıä«óù");
        this.setTitle("àÍäáèàóù");
        this.setListener();
        if (SystemInfo.getCurrentShop().getShopID() == 0) {
            cmbShop.addItem(new MstShop());
        }
        SystemInfo.initGroupShopComponents(cmbShop, 2);
        this.init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        praiseTimeLimitGroup = new javax.swing.ButtonGroup();
        btnOutputExcel = new javax.swing.JButton();
        TargetMonthLabel = new javax.swing.JLabel();
        cmbPayment = new JComboBox();
        batchButton = new javax.swing.JButton();
        shopLabel = new javax.swing.JLabel();
        extractionButton = new javax.swing.JButton();
        technicsScrollPane = new javax.swing.JScrollPane();
        dataMemberTable = new com.geobeck.swing.JTableEx();
        cmbShop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        dayLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        checkProcessed = new javax.swing.JCheckBox();
        checkUntreated = new javax.swing.JCheckBox();
        paymentLabel = new javax.swing.JLabel();
        processDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        yeaLabel = new javax.swing.JLabel();
        monthLable = new javax.swing.JLabel();
        cmbMonth = new javax.swing.JComboBox();
        cmbYear = new javax.swing.JComboBox();
        cmbStaff = new javax.swing.JComboBox();
        staffLable = new javax.swing.JLabel();

        setFocusCycleRoot(true);

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setEnabled(false);
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputExcelActionPerformed(evt);
            }
        });

        TargetMonthLabel.setText("ëŒè€åé");

        cmbPayment.setMaximumRowCount(12);
        cmbPayment.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        batchButton.setIcon(SystemInfo.getImageIcon("/button/master/batch_off.jpg"));
        batchButton.setBorderPainted(false);
        batchButton.setEnabled(false);
        batchButton.setPressedIcon(SystemInfo.getImageIcon("/button/master/batch_on.jpg"));
        batchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchButtonActionPerformed(evt);
            }
        });

        shopLabel.setText("ìXï‹ñº");

        extractionButton.setIcon(SystemInfo.getImageIcon("/button/master/extraction_off.jpg"));
        extractionButton.setBorderPainted(false);
        extractionButton.setPressedIcon(SystemInfo.getImageIcon("/button/master/extraction_on.jpg"));
        extractionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractionButtonActionPerformed(evt);
            }
        });

        technicsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        dataMemberTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ì¸âÔìXï‹", "å⁄ãq", "å⁄ãqNo", "å⁄ãqñº", "ì¸âÔì˙", "å_ñÒÉvÉâÉì", "ã‡äz", "è¡âªâÒêî", "èàóùì˙", "èàóùãÊï™", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataMemberTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        dataMemberTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        dataMemberTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        dataMemberTable.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(dataMemberTable, SystemInfo.getTableHeaderRenderer());
        dataMemberTable.getColumnModel().getColumn(this.COL_CHECK).setHeaderRenderer(this.getTableHeaderRenderer(dataMemberTable.getTableHeader()));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( SwingConstants.CENTER );
        dataMemberTable.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        dataMemberTable.getColumnModel().getColumn(8).setCellRenderer( centerRenderer );
        dataMemberTable.getColumnModel().getColumn(9).setCellRenderer( centerRenderer );
        dataMemberTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(dataMemberTable);
        dataMemberTable.setSelectionBackground(new java.awt.Color(255, 210, 142));
        technicsScrollPane.setViewportView(dataMemberTable);

        dayLabel.setText("èàóùì˙");

        statusLabel.setText("èàóùãÊï™");

        checkProcessed.setText("èàóùçœÇ›");
        checkProcessed.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkProcessed.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkProcessed.setOpaque(false);

        checkUntreated.setText("ñ¢èàóù");
        checkUntreated.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkUntreated.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkUntreated.setOpaque(false);

        paymentLabel.setText("éxï•ï˚ñ@");

        processDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        processDate.setForeground(java.awt.Color.white);
        processDate.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        processDate.setMaximumSize(new java.awt.Dimension(65, 20));
        processDate.setMinimumSize(new java.awt.Dimension(65, 20));
        processDate.setPreferredSize(new java.awt.Dimension(85, 20));

        yeaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        yeaLabel.setText("îN");

        monthLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monthLable.setText("åé");

        cmbMonth.setMaximumRowCount(13);
        cmbMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbYear.setMaximumRowCount(12);
        cmbYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbStaff.setMaximumRowCount(20);
        cmbStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        staffLable.setText("ÉåÉWíSìñ");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(TargetMonthLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .add(shopLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmbShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(54, 54, 54)
                .add(statusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 64, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checkUntreated, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checkProcessed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(520, 520, 520)
                .add(extractionButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(batchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(technicsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 820, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(paymentLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmbPayment, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(dayLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(cmbYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(yeaLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, 0)
                                .add(cmbMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, 0)
                                .add(monthLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(processDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(staffLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cmbStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 129, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(cmbShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(statusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(checkUntreated, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(checkProcessed, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(TargetMonthLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(2, 2, 2)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(yeaLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(monthLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(cmbYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(cmbMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(dayLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(processDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(staffLable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(paymentLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbPayment, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(extractionButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(batchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(technicsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void batchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_batchButtonActionPerformed
	{//GEN-HEADEREND:event_batchButtonActionPerformed
            if (this.checkInput()) {
                if (MessageDialog.showYesNoDialog(
                        this,
                        "àÍäáèàóùÇçsÇ§Ç∆éÊè¡Ç≈Ç´Ç‹ÇπÇÒÅB\nèàóùÇäJénÇµÇƒÇÊÇÎÇµÇ¢Ç≈Ç∑Ç©ÅH",
                        this.getTitle(),
                        JOptionPane.WARNING_MESSAGE,
                        JOptionPane.NO_OPTION) != JOptionPane.YES_OPTION) {
                    return;
                }
                if (this.regist()) {
                    MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
					this.getTitle(),
					JOptionPane.INFORMATION_MESSAGE);
                    //ì¸óÕÇÉNÉäÉAÇ∑ÇÈ
                    this.clear();
                } else {
                    MessageDialog.showMessageDialog(
                            this,
                            MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "àÍäáèàóù"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }
            }
	}//GEN-LAST:event_batchButtonActionPerformed

	private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutputExcelActionPerformed
	{//GEN-HEADEREND:event_btnOutputExcelActionPerformed
            btnOutputExcel.setCursor(null);
            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                this.exportExcel();
            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
	}//GEN-LAST:event_btnOutputExcelActionPerformed

	private void extractionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_extractionButtonActionPerformed
	{//GEN-HEADEREND:event_extractionButtonActionPerformed
            if (this.checkInputSearch()) {
                this.setData(this.batch);
                this.refresh();
                int index = dataMemberTable.getRowCount();
                this.changeButtonEnabled(0 < index);
                if(dataMemberTable.getRowCount() == 0) {
                    MessageDialog.showMessageDialog(this,
                                MessageUtil.getMessage(1112),
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
        }
            }
	}//GEN-LAST:event_extractionButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TargetMonthLabel;
    private javax.swing.JButton batchButton;
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JCheckBox checkProcessed;
    private javax.swing.JCheckBox checkUntreated;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbPayment;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cmbShop;
    private javax.swing.JComboBox cmbStaff;
    private javax.swing.JComboBox cmbYear;
    private javax.swing.JTable dataMemberTable;
    private javax.swing.JLabel dayLabel;
    private javax.swing.JButton extractionButton;
    private javax.swing.JLabel monthLable;
    private javax.swing.JLabel paymentLabel;
    private javax.swing.ButtonGroup praiseTimeLimitGroup;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo processDate;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JLabel staffLable;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JScrollPane technicsScrollPane;
    private javax.swing.JLabel yeaLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * àÍäáèàóùâÊñ ópFocusTraversalPolicy
     */
    private DataBatchFocusTraversalPolicy ftp
            = new DataBatchFocusTraversalPolicy();

    /**
     * àÍäáèàóùâÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
     *
     * @return àÍäáèàóùâÊñ ópFocusTraversalPolicy
     */
    public DataBatchFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    /**
     * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(extractionButton);
        SystemInfo.addMouseCursorChange(btnOutputExcel);
        SystemInfo.addMouseCursorChange(batchButton);

    }

    /**
     * ÉRÉìÉ|Å[ÉlÉìÉgÇÃäeÉäÉXÉiÅ[ÇÉZÉbÉgÇ∑ÇÈÅB
     */
    private void setListener() {
        cmbShop.addKeyListener(SystemInfo.getMoveNextField());
        cmbYear.addKeyListener(SystemInfo.getMoveNextField());
        cmbMonth.addKeyListener(SystemInfo.getMoveNextField());
        cmbPayment.addKeyListener(SystemInfo.getMoveNextField());
        processDate.addKeyListener(SystemInfo.getMoveNextField());
        processDate.addFocusListener(SystemInfo.getSelectText());
        cmbStaff.addKeyListener(SystemInfo.getMoveNextField());
        cmbStaff.addFocusListener(SystemInfo.getSelectText());
    }

    /**
     * èâä˙âªèàóùÇçsÇ§ÅB
     */
    private void init() {
        try {
            ConnectionWrapper con = SystemInfo.getConnection();

            mp.loadClasses(con);
            
            this.prefixPaymentMethodName();

            con.close();

            this.cmbPayment.addItem(new MstPaymentMethod());
            // îÑä|ã‡í«â¡
            MstPaymentMethod mstpm = new MstPaymentMethod() ;
            mstpm.setPaymentMethodID(CODE_ACCOUNTS_RECEIVABLE);
            mstpm.setPaymentMethodName(NAME_ACCOUNTS_RECEIVABLE);
            this.cmbPayment.addItem(mstpm);
            for (MstPaymentClass paymentClass : mp) {
                for (MstPaymentMethod paymentMethod : paymentClass) {
                    this.cmbPayment.addItem(paymentMethod);
                }
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        this.initYearComboBox();
        processDate.setDate((java.util.Date) null);
        this.initStaff();
    }
    
    /**
     * set prefix payment method class
     */
    private void prefixPaymentMethodName() {
        for(MstPaymentClass methodClass : mp) {
            if(methodClass.size() > 1) {
                for (MstPaymentMethod method : methodClass) {
                    method.setPaymentMethodName(methodClass.getPaymentClassName() + "Åj" + method.getPaymentMethodName());
                }
            }
        }
    }
    
    /**
     * ÉåÉWíSìñé“Çèâä˙âªÇ∑ÇÈÅB
     */
    private void initStaff() {
        cmbStaff.removeAllItems();

        staffs = new MstStaffs();
        staffs.setShopIDList(SystemInfo.getCurrentShop().getShopID().toString());

        try {

            staffs.load(SystemInfo.getConnection(), true);

        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        for (MstStaff ms : staffs) {
            cmbStaff.addItem(ms);
        }

        cmbStaff.setSelectedIndex(0);
    }

    /**
     * çƒï\é¶ÇçsÇ§ÅB
     */
    private void refresh() {
        try {
            this.dataBatch.clear();
            ConnectionWrapper con = SystemInfo.getConnection();
            this.dataBatch = this.batch.load(con);
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        //ÉeÅ[ÉuÉãÇ…è§ïiÉ}ÉXÉ^ÉfÅ[É^Çï\é¶Ç∑ÇÈ
        this.showData();

        cmbShop.requestFocusInWindow();

    }

    /**
     * ì¸óÕçÄñ⁄ÇÉNÉäÉAÇ∑ÇÈÅB
     */
    private void clear() {
        
        SwingUtil.clearTable(dataMemberTable);
        this.uncheckHeader();
        int index = dataMemberTable.getRowCount();

        if (0 < dataMemberTable.getRowCount()) {
            dataMemberTable.removeRowSelectionInterval(0, dataMemberTable.getRowCount() - 1);
        }
        this.cmbShop.setSelectedIndex(0);
        this.cmbYear.setSelectedIndex(0);
        this.cmbMonth.setSelectedIndex(0);
        this.cmbStaff.setSelectedIndex(0);
        this.cmbPayment.setSelectedIndex(0);
        processDate.setDate((java.util.Date) null);
        this.checkProcessed.setSelected(Boolean.FALSE);
        this.checkUntreated.setSelected(Boolean.FALSE);
        
        this.changeButtonEnabled(0 < index);
    }
    
    /**
     * É{É^ÉìÇÃEnabledÇïœçXÇ∑ÇÈÅB
     *
     * @param enabled Enabled
     */
    private void changeButtonEnabled(boolean enabled) {
        batchButton.setEnabled(enabled);
        btnOutputExcel.setEnabled(enabled);
    }
    
    /**
     * uncheck checkbox header
     */
    private void uncheckHeader() {
        if(dataMemberTable.getColumnModel().getColumn(this.COL_CHECK).getHeaderRenderer() instanceof BevelBorderHeaderRenderer) {
            ((BevelBorderHeaderRenderer)dataMemberTable.getColumnModel().getColumn(this.COL_CHECK).getHeaderRenderer()).check.setSelected(Boolean.FALSE);
        }
    }

    /**
     * ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
     */
    private void showData() {
        SwingUtil.clearTable(dataMemberTable);
        this.uncheckHeader();
        DefaultTableModel model = (DefaultTableModel) dataMemberTable.getModel();

        for (DataMonthlyBatchLog item : this.dataBatch) {
            for (DataMonthlyBatchDetailLog detail : item) {
                Object[] rowData = {
                    item,
                    getUserSearchButton(detail.getCustomer().getCustomerID()),
                    detail.getCustomer().getCustomerNo(),
                    detail.getCustomer().getFullCustomerName(),
                    (detail.getDataMonthMember().getJoinDate() != null) ? DateUtil.format(detail.getDataMonthMember().getJoinDate(), "yyyy/MM/dd") : "",
                    detail.getDataMonthMember().getmPlan().getPlanName(),
                    detail.getCourse().getPrice(),
                    detail.getCourse().getNum(),
                    (item.getProcessDate() != null) ? DateUtil.format(item.getProcessDate(), "yyyy/MM/dd") : "",
                    item.isProcessed() ? this.checkProcessed.getText() : this.checkUntreated.getText()
                };
                model.addRow(rowData);
            }
        }
        if (dataMemberTable.getCellEditor() != null) {
            dataMemberTable.getCellEditor().stopCellEditing();
        }
    }

    /**
     * ì¸óÕÉ`ÉFÉbÉNÇçsÇ§ÅB
     *
     * @return ì¸óÕÉGÉâÅ[Ç™Ç»ÇØÇÍÇŒtrueÇï‘Ç∑ÅB
     */
    private boolean checkInput() {
        //ëŒè€åé
        if (cmbYear.getSelectedIndex() <= 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ëŒè€åé"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbYear.requestFocusInWindow();
            return false;
        }
        if (cmbMonth.getSelectedIndex() <= 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ëŒè€åé"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbMonth.requestFocusInWindow();
            return false;
        }
        // èàóùì˙
        if (processDate.getDate() == null) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "èàóùì˙"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            processDate.requestFocusInWindow();
            return false;
        }
        //ÉåÉWíSìñ
        if (cmbStaff.getSelectedIndex() <= 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ÉåÉWíSìñ"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbStaff.requestFocusInWindow();
            return false;
        }
        //éxï•ï˚ñ@
        if (cmbPayment.getSelectedIndex() <= 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "éxï•ï˚ñ@"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbPayment.requestFocusInWindow();
            return false;
        }
        //àÍóóÇÃ?
        boolean isCheck = false;
        for (int row = 0; row < this.dataMemberTable.getRowCount(); row ++) {
            if((((Boolean)this.dataMemberTable.getValueAt(row, this.dataMemberTable.getColumnCount() - 1)) != null
                        && ((Boolean)this.dataMemberTable.getValueAt(row, this.dataMemberTable.getColumnCount() - 1)))) {
                
                isCheck = true;
            }
        }
        if(!isCheck) {
            MessageDialog.showMessageDialog(this,
                "ëŒè€èàóùÇ™Ç†ÇËÇ‹ÇπÇÒÅB",
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }
    
    /**
     * ì¸óÕÉ`ÉFÉbÉNÇçsÇ§ÅB
     *
     * @return ì¸óÕÉGÉâÅ[Ç™Ç»ÇØÇÍÇŒtrueÇï‘Ç∑ÅB
     */
    private boolean checkInputSearch() {
        //ëŒè€åé
        if (cmbYear.getSelectedIndex() <= 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ëŒè€åé"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbYear.requestFocusInWindow();
            return false;
        }
        if (cmbMonth.getSelectedIndex() <= 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ëŒè€åé"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbMonth.requestFocusInWindow();
            return false;
        }

        return true;
    }

    /**
     * ì¸óÕÇ≥ÇÍÇΩÉfÅ[É^Çìoò^Ç∑ÇÈÅB
     *
     * @return true - ê¨å˜
     */
    private boolean regist() {
        if (!this.checkInput()) {
            return false;
        }
        DataMonthlyBatchLog Regist = new DataMonthlyBatchLog();
        this.setData(Regist);

        if (dataMemberTable.getCellEditor() != null) {
            dataMemberTable.getCellEditor().stopCellEditing();
        }
        
        //ÉRÉlÉNÉVÉáÉìÇéÊìæ
        ConnectionWrapper con = SystemInfo.getConnection();
        try {
            con.begin();
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            //get valid_date
            GregorianCalendar calDate = new GregorianCalendar();
            if (processDate.getDate() != null) {
                calDate.setTime(processDate.getDate());
            }
            //âÔåvê›íËÉ}ÉXÉ^ÉNÉâÉX
            MstAccountSetting ms = SystemInfo.getAccountSetting();
            ms.load(con);
            ms.setTaxRate(SystemInfo.getTaxRate(SystemInfo.getSystemDate()));

            DataSales dsSales;
            DataSalesDetail dsDetail;
            DataContract dContract;
            DataPayment dp;
            DataPaymentDetail dpd;
            boolean isChecked = false;

            for (int row = 0; row < this.dataMemberTable.getRowCount(); row ++) {
                if((((Boolean)this.dataMemberTable.getValueAt(row, this.dataMemberTable.getColumnCount() - 1)) != null
                        && ((Boolean)this.dataMemberTable.getValueAt(row, this.dataMemberTable.getColumnCount() - 1)))) {
                
                    DataMonthlyBatchLog batchLog = (DataMonthlyBatchLog)this.dataMemberTable.getValueAt(row, 0);
                    for (DataMonthlyBatchDetailLog detail : batchLog) {
                        dsSales = new DataSales();
                        dsDetail = new DataSalesDetail();
                        dContract = new DataContract();
                        dp = new DataPayment();
                        dpd = new DataPaymentDetail();
                        MstShop shopSales = detail.getDataMonthMember().getmShop();

                        dsSales.setShop(shopSales);
                        dsSales.setNewSlipNo(con);
                        dsSales.setSalesDate(Regist.getProcessDate());
                        dsSales.setCustomer(detail.getCustomer());
                        dsSales.setStaff(Regist.getStaff());
                        dsSales.setType(3);

                        Integer contractNo = dContract.loadMaxContractNo(con, dsSales.getShop().getShopID()) + 1;

                        Course course = detail.getCourse();
                        Product p = new Product();
                        p.setProductID(course.getCourseId());
                        dContract = new DataContract();
                        dContract.setContractNo(contractNo);
                        dContract.setShop(dsSales.getShop());
                        dContract.setSlipNo(dsSales.getSlipNo());
                        dContract.setProduct(p);
                        dContract.setProductValue(course.getPrice());
                        dContract.setProductNum(course.getNum());
                        dContract.setContractDetailNo(dContract.loadMaxContractDetailNo(con, dContract.getShop().getShopID(), dContract.getContractNo()) + 1);
                        dContract.setTaxRate(SystemInfo.getTaxRate(Regist.getProcessDate()));
                        if (course.getPraiseTimeLimit() > 0) {
                            calDate = new GregorianCalendar();
                            if (processDate.getDate() != null) {
                                calDate.setTime(processDate.getDate());
                            }
                            calDate.add(Calendar.MONTH, course.getPraiseTimeLimit());
                            calDate.add(Calendar.DAY_OF_MONTH, -1);
                            dContract.setValidDate(calDate.getTime());
                            detail.setValidDate(calDate.getTime());
                        }
                        dContract.setStaff(dsSales.getStaff());
                        //ÉRÅ[ÉXå_ñÒóöó
                        if (!dContract.registDataContract(con)) {
                            con.rollback();
                            return false;
                        }
                        //ì`ï[ÉwÉbÉ_ÉfÅ[É^
                        if (!dsSales.registDataSale(con)) {
                            con.rollback();
                            return false;
                        }

                        dsDetail.setAccountSetting(ms);
                        dsDetail.setSlipNo(dsSales.getSlipNo());
                        dsDetail.setShop(dsSales.getShop());
                        dsDetail.setNewSlipDetailNo(con);
                        dsDetail.setStaff(dsSales.getStaff());
                        // 5 = ÉRÅ[ÉX
                        dsDetail.setProductDivision(5);
                        dsDetail.setProductValue(course.getPrice());
                        dsDetail.setProductNum(1);
                        dsDetail.setProduct(p);
                        dsDetail.setTaxRate(SystemInfo.getTaxRate(Regist.getProcessDate()));
                        if (!dsDetail.regist(con)) {
                            con.rollback();
                            return false;
                        }

                        dp.setShop(dsSales.getShop());
                        dp.setSlipNo(dsSales.getSlipNo());
                        dp.setBillValue(0l);
                        // default paymentNo : 0
                        dp.setPaymentNo(0);
                        dp.setPaymentDate(Regist.getProcessDate());
                        dp.setStaff(dsSales.getStaff());

                        //IVS start edit 2020/04/01 å˚ç¿êUë÷òAåg
                        MstPaymentMethod paymentMethod = ((MstPaymentMethod)cmbPayment.getSelectedItem());
                        dpd.setPaymentMethod(paymentMethod);
                        dpd.setPaymentValue(course.getPrice());
                        if (paymentMethod.getPaymentMethodName().contains(NAME_ACCOUNTS_RECEIVABLE)) {
                            dp.setBillValue(course.getPrice());
                        } else {
                            dp.add(dpd);
                        }
                        //IVS end edit 2020/04/01 å˚ç¿êUë÷òAåg
                        if (!dp.registAll(con)) {
                            con.rollback();
                            return false;
                        }
                        detail.setSlipNO(dsSales.getSlipNo());
                        Regist.add(detail);
                    }
                    isChecked = true;
                }
            }
            if(isChecked) {
                if (!Regist.registAll(con)) {
                    con.rollback();
                    return false;
                }
            }

            //ÉgÉâÉìÉUÉNÉVÉáÉìÉRÉ~ÉbÉg
            con.commit();
            con.close();

        } catch (Exception e) {
            try {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                con.rollback();
                return false;
            } catch (SQLException ex) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        return true;
    }

    /**
     * àÍäáèàóùÉ}ÉXÉ^ÉfÅ[É^Ç©ÇÁÉfÅ[É^ÇÉZÉbÉgÇ∑ÇÈÅB
     *
     * @param mt àÍäáèàóùÉ}ÉXÉ^ÉfÅ[É^
     */
    private void setData(DataMonthlyBatchLog batch) {
        if (((MstShop) cmbShop.getSelectedItem()) != null && ((MstShop) cmbShop.getSelectedItem()).getShopID() != null) {
            batch.setShop((MstShop) cmbShop.getSelectedItem());
        } else {
            MstShop shop = new MstShop();
            shop.setShopID(0);
            batch.setShop(shop);
        }
        batch.setTargetMonth(this.setTargetMonth());
        batch.setProcessDate(this.processDate.getDate());
        if (((MstPaymentMethod) this.cmbPayment.getSelectedItem()) != null) {
            batch.setPaymentMethodID(((MstPaymentMethod) this.cmbPayment.getSelectedItem()).getPaymentMethodID());
        }
        batch.setProcessed(checkProcessed.isSelected());
        batch.setUntreated(checkUntreated.isSelected());
        MstStaff staff = new MstStaff();
        if(cmbStaff.getSelectedItem() instanceof MstStaff) {
            staff = (MstStaff)cmbStaff.getSelectedItem();
        }
        batch.setStaff(staff);
  
    }

    /**
     * ëŒè€åé
     * @return 
     */
    private java.util.Date setTargetMonth() {
        if (this.cmbYear.getSelectedItem().toString().equals("") || this.cmbMonth.getSelectedItem().toString().equals("")) {
            return null;
        }
        Calendar calendar = new GregorianCalendar(Integer.parseInt(this.cmbYear.getSelectedItem().toString()), (Integer.parseInt(this.cmbMonth.getSelectedItem().toString())-1), 1);

        return calendar.getTime();
    }

    /**
     * EXCELèoóÕ
     */
    private void exportExcel() {
        if (dataMemberTable.getRowCount() == 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        JExcelApi jx = new JExcelApi("àÍäáèàóùàÍóó");
        jx.setTemplateFile("/reports/àÍäáèàóùàÍóó.xls");

        // ÉwÉbÉ_èoóÕ
        //ìXï‹ñº
        jx.setValue(2, 3, (this.batch.getShop() != null && this.batch.getShop().getShopName() != null)? this.batch.getShop().getShopName(): "");
        //ëŒè€åé
        jx.setValue(2, 4, this.getTargetMonthExcel(this.batch.getTargetMonth()));
        //èàóùãÊï™
        jx.setValue(5, 3, this.getProcessDivision(this.batch));

        int outRow = 7;

        // í«â¡çsêîÉZÉbÉg
        jx.insertRow(outRow, dataMemberTable.getRowCount() - 1);

        // ÉfÅ[É^ÉZÉbÉg
        DefaultTableModel model = (DefaultTableModel) dataMemberTable.getModel();
        for (int row = 0; row < dataMemberTable.getRowCount(); row++) {
            int step = 1;
            for (int col = 0; col < dataMemberTable.getColumnCount(); col++) {
                if (col == this.COL_BUTTON_CUSTOMER || col == this.COL_CHECK) {
                    step--;
                    continue;
                }
                if (col == 0) {
                    jx.setValue(col + step, outRow, model.getValueAt(row, col).toString());
                } else {
                    jx.setValue(col + step, outRow, model.getValueAt(row, col));
                }
            }
            outRow++;
        }

        jx.openWorkbook();
    }
    
    /**
     * ëŒè€åé
     * @param targetMonth
     * @return 
     */
    private String getTargetMonthExcel(java.util.Date targetMonth) {
        if(targetMonth == null) {
            return "";
        }
        Calendar cal = GregorianCalendar.getInstance();
        cal.setTime(targetMonth);
        int month = cal.get(Calendar.MONTH) + 1;
        int year = cal.get(Calendar.YEAR);
        return year + yeaLabel.getText() + month + monthLable.getText();
    }
    
    /**
     * èàóùãÊï™
     * @param batch
     * @return 
     */
    private String getProcessDivision(DataMonthlyBatchLog batch) {
        String divisonName = "";
        if(batch.isProcessed()) {
            divisonName = this.checkProcessed.getText();
        }
        if(batch.isUntreated()) {
            if(!divisonName.equals("")) {
                divisonName = divisonName + "ÅA" + this.checkUntreated.getText();
            }else {
                divisonName = this.checkUntreated.getText();
            }
        }
        return divisonName;
    }

    /**
     * ëŒè€åé
     */
    private void initYearComboBox() {

        this.cmbYear.removeAllItems();
        Calendar cal = Calendar.getInstance();
        int nowYear = cal.get(Calendar.YEAR);
        //îN
        this.cmbYear.addItem("");
        //IVS_LVTu start add 2020/12/07 åéâÔàıä«óùí«â¡_èâä˙ílÇìñîNÇ∆ÇµÇƒ+1îNÇ‹Ç≈ï\é¶Ç∑ÇÈÇÊÇ§Ç…
        this.cmbYear.addItem(String.valueOf(nowYear + 1));
        //IVS_LVTu end add 2020/12/07 åéâÔàıä«óùí«â¡_èâä˙ílÇìñîNÇ∆ÇµÇƒ+1îNÇ‹Ç≈ï\é¶Ç∑ÇÈÇÊÇ§Ç…
        for (int i = 0; i < 5; i++) {
            this.cmbYear.addItem(String.valueOf(nowYear - i));
        }
        //åé
        this.cmbMonth.addItem("");
        for (int mon = 1; mon <= 12; mon++) {
            this.cmbMonth.addItem(String.valueOf(mon));
        }
    }

    /**
     * ÉÜÅ[ÉUåüçıÉ{É^ÉìÇéÊìæÇ∑ÇÈ
     */
    private JButton getUserSearchButton(final Integer customerID) {
        JButton searchButton = new JButton();
        searchButton.setBorderPainted(false);
        searchButton.setContentAreaFilled(false);
        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
        searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
        searchButton.setSize(48, 25);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MstCustomerPanel mcp = null;

                try {

                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    mcp = new MstCustomerPanel(customerID, true, true);
                    SwingUtil.openAnchorDialog((JFrame) null, true, mcp, "å⁄ãqèÓïÒ", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);

                } finally {
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }

                mcp = null;
            }
        });
        return searchButton;
    }

    /**
     * àÍäáèàóùâÊñ ópFocusTraversalPolicy
     */
    private class DataBatchFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            
            if (aComponent.equals(cmbShop)) {
                return cmbYear;
            }else if(aComponent.equals(cmbYear)) {
                return cmbMonth;
            }else if(aComponent.equals(cmbMonth)) {
                return processDate;
            }else if(aComponent.equals(processDate)) {
                return cmbStaff;
            }else if(aComponent.equals(cmbStaff)) {
                return cmbPayment;
            }else if(aComponent.equals(cmbPayment)) {
                return checkUntreated;
            }else if(aComponent.equals(checkUntreated)) {
                return checkProcessed;
            }
            
            return cmbShop;
        }

        /**
         * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            
            if (aComponent.equals(cmbShop)) {
                return cmbShop;
            }else if(aComponent.equals(cmbYear)) {
                return cmbShop;
            }else if(aComponent.equals(cmbMonth)) {
                return cmbYear;
            }else if(aComponent.equals(processDate)) {
                return cmbMonth;
            }else if(aComponent.equals(cmbStaff)) {
                return processDate;
            }else if(aComponent.equals(cmbPayment)) {
                return cmbStaff;
            }else if(aComponent.equals(checkUntreated)) {
                return cmbPayment;
            }else if(aComponent.equals(checkProcessed)) {
                return checkUntreated;
            }

            return cmbShop;
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer êÊì™ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getFirstComponent(Container aContainer) {
            return cmbYear;
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer aContainer - ç≈å„ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getLastComponent(Container aContainer) {
            return checkProcessed;
        }

        /**
         * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB aContainer
         * ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
         *
         * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getDefaultComponent(Container aContainer) {
            return cmbYear;
        }

        /**
         * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB show() Ç‹ÇΩÇÕ setVisible(true)
         * ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
         * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
         * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
         * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
         * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
         */
        public Component getInitialComponent(Window window) {
            return cmbYear;
        }
    }

    /**
     * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
     */
    private void initTableColumnWidth() {
        //óÒÇÃïùÇê›íËÇ∑ÇÈÅB
        dataMemberTable.getColumnModel().getColumn(0).setPreferredWidth(80);
        dataMemberTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        dataMemberTable.getColumnModel().getColumn(2).setPreferredWidth(80);
        dataMemberTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        dataMemberTable.getColumnModel().getColumn(4).setPreferredWidth(80);
        dataMemberTable.getColumnModel().getColumn(5).setPreferredWidth(100);
        dataMemberTable.getColumnModel().getColumn(6).setPreferredWidth(80);
        dataMemberTable.getColumnModel().getColumn(7).setPreferredWidth(80);
        dataMemberTable.getColumnModel().getColumn(8).setPreferredWidth(80);
        dataMemberTable.getColumnModel().getColumn(9).setPreferredWidth(80);
        dataMemberTable.getColumnModel().getColumn(10).setPreferredWidth(35);
    }

    /**
     * óÒÇÃï\é¶à íuÇê›íËÇ∑ÇÈTableCellRenderer
     */
    private class TableCellAlignRenderer extends DefaultTableCellRenderer {

        /**
         * Creates a new instance of ReservationTableCellRenderer
         */
        public TableCellAlignRenderer() {
            super();
        }

        /**
         * ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉOÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param table JTable
         * @param value ÉZÉãÇ…äÑÇËìñÇƒÇÈíl
         * @param isSelected ÉZÉãÇ™ëIëÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÇÕ true
         * @param hasFocus ÉtÉHÅ[ÉJÉXÇ™Ç†ÇÈèÍçáÇÕ true
         * @param row çs
         * @param column óÒ
         * @return ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉO
         */
        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value,
                    isSelected, hasFocus, row, column);

            switch (column) {
                case 3:
                case 8:
                    super.setHorizontalAlignment(SwingConstants.CENTER);
                    break;
                default:
                    super.setHorizontalAlignment(SwingConstants.LEFT);
                    break;
            }

            return this;
        }
    }

    /**
     * ÉeÅ[ÉuÉãÉwÉbÉ_Å[ÇÃÉåÉìÉ_ÉâÅ[ÇéÊìæÇ∑ÇÈ
     *
     * @return ÉeÅ[ÉuÉãÉwÉbÉ_Å[ÇÃÉåÉìÉ_ÉâÅ[
     */
    public BevelBorderHeaderRenderer getTableHeaderRenderer(JTableHeader header) {
        BevelBorderHeaderRenderer tableHeaderRenderer = null;
        if (tableHeaderRenderer == null) {
            tableHeaderRenderer = new BevelBorderHeaderRenderer(header);
        }
        return tableHeaderRenderer;
    }

    /**
     * JTableÇÃÉwÉbÉ_ÇÃêFÇïœçXÇ≈Ç´ÇÈRenderer
     *
     * @author katagiri
     */
    public class BevelBorderHeaderRenderer extends DefaultTableCellRenderer implements TableCellRenderer {

        /**
         * îwåiêFÇ∆ÅAÉnÉCÉâÉCÉgïîÅEÉVÉÉÉhÉEïîÇÃêFÇÃç∑
         */
        private static final int DIFFERENCE_OF_COLOR = 50;

        private final JCheckBox check = new JCheckBox();

        /**
         * ÉRÉìÉXÉgÉâÉNÉ^
         *
         * @param baseColor îwåiêF
         */
        public BevelBorderHeaderRenderer(JTableHeader header) {
            super();
            Color baseColor = new Color(204, 204, 204);
            check.setOpaque(false);
            this.setIcon(new CheckBoxIcon(check));
            this.setHorizontalAlignment(SwingConstants.CENTER);
            this.setBackground(baseColor);
            this.setBorder(new BevelBorder(BevelBorder.RAISED,
                    this.createHighlightColor(),
                    this.createShadowColor()));

            header.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseClicked(MouseEvent e) {
                    JTable table = ((JTableHeader) e.getSource()).getTable();
                    TableColumnModel columnModel = table.getColumnModel();
                    int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                    int modelColumn = table.convertColumnIndexToModel(viewColumn);
                    if (modelColumn == COL_CHECK) {
                        check.setSelected(!check.isSelected());
                        TableModel m = table.getModel();
                        Boolean f = check.isSelected();
                        for (int i = 0; i < m.getRowCount(); i++) {
                            m.setValueAt(f, i, modelColumn);
                        }
                        ((JTableHeader) e.getSource()).repaint();
                    }
                }
            });
        }

        /**
         * ÉRÉìÉXÉgÉâÉNÉ^
         *
         * @param baseColor îwåiêF
         * @param highlight ÉnÉCÉâÉCÉg
         * @param shadow ÉVÉÉÉhÉE
         */
        public BevelBorderHeaderRenderer(Color baseColor, Color highlight, Color shadow) {
            super();
            this.setHorizontalAlignment(SwingConstants.CENTER);
            this.setBackground(baseColor);
            this.setBorder(new BevelBorder(BevelBorder.RAISED,
                    highlight, shadow));
        }

        /**
         *
         * @param table
         * @param value
         * @param isSelected
         * @param hasFocus
         * @param row
         * @param column
         * @return
         */
        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus,
                int row, int column) {
            this.setValue((value == null) ? "" : value.toString());
            return this;
        }

        /**
         * ÉnÉCÉâÉCÉgêFÇçÏÇÈ
         *
         * @return
         */
        private Color createHighlightColor() {
            Color baseColor = this.getBackground();
            return new Color(
                    this.reviseValue(baseColor.getRed() + BevelBorderHeaderRenderer.DIFFERENCE_OF_COLOR),
                    this.reviseValue(baseColor.getGreen() + BevelBorderHeaderRenderer.DIFFERENCE_OF_COLOR),
                    this.reviseValue(baseColor.getBlue() + BevelBorderHeaderRenderer.DIFFERENCE_OF_COLOR));
        }

        /**
         * ÉVÉÉÉhÉEêFÇçÏÇÈ
         *
         * @return
         */
        private Color createShadowColor() {
            Color baseColor = this.getBackground();
            return new Color(
                    this.reviseValue(baseColor.getRed() - BevelBorderHeaderRenderer.DIFFERENCE_OF_COLOR),
                    this.reviseValue(baseColor.getGreen() - BevelBorderHeaderRenderer.DIFFERENCE_OF_COLOR),
                    this.reviseValue(baseColor.getBlue() - BevelBorderHeaderRenderer.DIFFERENCE_OF_COLOR));
        }

        /**
         * êFÇéwíËÇ∑ÇÈêîílÇ™îÕàÕäOÇÃèÍçáï‚ê≥Ç∑ÇÈ
         *
         * @param value êFÇéwíËÇ∑ÇÈêîíl
         * @return ï‚ê≥å„ÇÃêFÇéwíËÇ∑ÇÈêîíl
         */
        private int reviseValue(int value) {
            if (value < 0) {
                return 0;
            } else if (255 < value) {
                return 255;
            } else {
                return value;
            }
        }

        private class CheckBoxIcon implements Icon {

            private final JCheckBox check;

            public CheckBoxIcon(JCheckBox check) {
                this.check = check;
            }

            @Override
            public int getIconWidth() {
                return check.getPreferredSize().width;
            }

            @Override
            public int getIconHeight() {
                return check.getPreferredSize().height;
            }

            @Override
            public void paintIcon(Component c, Graphics g, int x, int y) {
                SwingUtilities.paintComponent(
                        g, check, (Container) c, x, y, getIconWidth(), getIconHeight());
            }
        }
    }
}
