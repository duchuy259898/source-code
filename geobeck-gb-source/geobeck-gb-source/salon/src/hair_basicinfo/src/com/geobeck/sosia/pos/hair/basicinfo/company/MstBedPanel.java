/*
 * MstBedPanel.java
 *
 * Created on 2006/10/20, 10:16
 */

package com.geobeck.sosia.pos.hair.basicinfo.company;

import com.geobeck.sosia.pos.hair.master.company.*;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.swing.*;
import java.awt.event.HierarchyEvent;

/**
 *
 * @author  katagiri
 */
public class MstBedPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private MstBeds		mbs			=	new MstBeds();
	private Integer		selIndex	=	-1;
        
    //IVS_LVTu start add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
    private boolean isLoadDisplay= false;
    //IVS_LVTu end add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
        //VUINV start add 20140707 MASHU_é{èpë‰ìoò^      
        
        private MstShopCategorys categories = new MstShopCategorys();
        
        //Åîmst_shop.use_shop_category=1
        //ÇÃèÍçáÇÃÇ›ï\é¶
        private Integer useShopCategory = 1;
        //VUINV end add 20140707 MASHU_é{èpë‰ìoò^
	
	/** Creates new form MstBedPanel */
	public MstBedPanel()
	{
		super();
		initComponents();
		addMouseCursorChange();
                // IVS VUINV start edit 20140703 MASHU_é{èpë‰ìoò^
		//this.setSize(476, 680);
                this.setSize(820, 680);
		// IVS VUINV end edit 20140703 MASHU_é{èpë‰ìoò^
                this.setPath("äÓñ{ê›íË >> âÔé–É}ÉXÉ^");
		this.setTitle("é{èpë‰ìoò^");
		this.setListener();
		SystemInfo.initGroupShopComponents(shop, 2);
                
                //VUINV start add 20140707 MASHU_é{èpë‰ìoò^
                //Åîmst_shop.use_shop_category=1
                //ÇÃèÍçáÇÃÇ›ï\é¶
                this.useShopCategory = ((MstShop) shop.getSelectedItem()).getUseShopCategory();
                //VUINV end add 20140707 MASHU_é{èpë‰ìoò^
                
		this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        renewButton = new javax.swing.JButton();
        bedName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)bedName.getDocument()).setDocumentFilter(
            new CustomFilter(15));
        bedsScrollPane = new javax.swing.JScrollPane();
        beds = new javax.swing.JTable();
        displaySeqLabel = new javax.swing.JLabel();
        bedNameLabel = new javax.swing.JLabel();
        bedNumLabel = new javax.swing.JLabel();
        displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        deleteButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        bedNum = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)bedNum.getDocument()).setDocumentFilter(
            new CustomFilter(3, CustomFilter.NUMERIC));
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        bedsScrollPane1 = new javax.swing.JScrollPane();
        businessCategory = new com.geobeck.swing.JTableEx();
        businessCategoryLabel = new javax.swing.JLabel();

        setFocusCycleRoot(true);
        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setContentAreaFilled(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        bedName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        bedName.setColumns(15);
        bedName.setInputKanji(true);

        bedsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        beds.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "é{èpë‰ñº", "è∞êî", "ï\é¶èá", "ã∆ë‘"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        beds.setSelectionBackground(new java.awt.Color(220, 220, 220));
        beds.setSelectionForeground(new java.awt.Color(0, 0, 0));
        beds.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        beds.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(beds, SystemInfo.getTableHeaderRenderer());
        beds.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(beds);
        beds.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bedsFocusGained(evt);
            }
        });
        beds.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bedsMouseReleased(evt);
            }
        });
        beds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bedsKeyReleased(evt);
            }
        });
        bedsScrollPane.setViewportView(beds);

        displaySeqLabel.setText("ë}ì¸à íu");

        bedNameLabel.setText("é{èpë‰ñº");

        bedNumLabel.setText("è∞êî");

        displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setContentAreaFilled(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        bedNum.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        bedNum.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        shopLabel.setText("ìXï‹");

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        bedsScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        businessCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "ã∆ë‘ñº", "ëIë"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        businessCategory.setSelectionBackground(new java.awt.Color(220, 220, 220));
        businessCategory.setSelectionForeground(new java.awt.Color(0, 0, 0));
        businessCategory.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        businessCategory.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(businessCategory, SystemInfo.getTableHeaderRenderer());
        businessCategory.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableBisinessCategoryColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(businessCategory);
        businessCategory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                businessCategoryFocusLost(evt);
            }
        });
        businessCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                businessCategoryMouseReleased(evt);
            }
        });
        businessCategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                businessCategoryKeyReleased(evt);
            }
        });
        bedsScrollPane1.setViewportView(businessCategory);

        businessCategoryLabel.setText("ã∆ë‘");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, bedsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 819, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(bedNameLabel)
                            .add(bedNumLabel)
                            .add(shopLabel)
                            .add(businessCategoryLabel))
                        .add(14, 14, 14)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 307, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(bedName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(bedNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(displaySeqLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, bedsScrollPane1))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(shopLabel)
                    .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bedNameLabel)
                    .add(bedName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(7, 7, 7)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bedNumLabel)
                    .add(bedNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displaySeqLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(businessCategoryLabel)
                        .add(bedsScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 154, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bedsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void shopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopActionPerformed
	{//GEN-HEADEREND:event_shopActionPerformed
		this.init();
                
                //VUINV start add 20140714 MASHU_é{èpë‰ìoò^
                //ì¸óÕÇÉNÉäÉAÇ∑ÇÈ
		this.clear();
                //VUINV end add 20140714 MASHU_é{èpë‰ìoò^
                
	}//GEN-LAST:event_shopActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
            //VUINV start add 20140708 MASHU_é{èpë‰ìoò^
            if (businessCategory.getCellEditor() != null) {
                businessCategory.getCellEditor().stopCellEditing();
            }
            //VUINV end add 20140708 MASHU_é{èpë‰ìoò^
            
            this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
            //VUINV start add 20140708 MASHU_é{èpë‰ìoò^
            if (businessCategory.getCellEditor() != null) {
                businessCategory.getCellEditor().stopCellEditing();
            }
            //VUINV end add 20140708 MASHU_é{èpë‰ìoò^
            //ì¸óÕÉ`ÉFÉbÉN
		if(this.checkInput())
		{
			//ìoò^èàóù
			this.regist(false);
			this.refresh();
		}
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
                //VUINV start add 20140708 MASHU_é{èpë‰ìoò^
                if (businessCategory.getCellEditor() != null) {
                    businessCategory.getCellEditor().stopCellEditing();
                }
                //VUINV end add 20140708 MASHU_é{èpë‰ìoò^

                //ì¸óÕÉ`ÉFÉbÉN
		if(this.checkInput())
		{
			//ìoò^èàóù
			this.regist(true);
			this.refresh();
		}
	}//GEN-LAST:event_addButtonActionPerformed

	private void bedsMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_bedsMouseReleased
	{//GEN-HEADEREND:event_bedsMouseReleased
		this.changeCurrentData();
	}//GEN-LAST:event_bedsMouseReleased

	private void bedsKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_bedsKeyReleased
	{//GEN-HEADEREND:event_bedsKeyReleased
		this.changeCurrentData();
	}//GEN-LAST:event_bedsKeyReleased

    private void businessCategoryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_businessCategoryMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_businessCategoryMouseReleased

    private void businessCategoryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_businessCategoryKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_businessCategoryKeyReleased

    private void businessCategoryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_businessCategoryFocusLost
        
    }//GEN-LAST:event_businessCategoryFocusLost

    private void bedsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bedsFocusGained
        if (businessCategory.getCellEditor() != null) {
            businessCategory.getCellEditor().stopCellEditing();
        }
    }//GEN-LAST:event_bedsFocusGained

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
        //IVS_LVTu start add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑  
        if ((evt.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
            if (!evt.getComponent().isDisplayable() && isLoadDisplay) {
                SystemInfo.MessageDialogGB(this, this.getTitle());
            }
        }
        //IVS_LVTu end add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
    }//GEN-LAST:event_formHierarchyChanged
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private com.geobeck.swing.JFormattedTextFieldEx bedName;
    private javax.swing.JLabel bedNameLabel;
    private com.geobeck.swing.JFormattedTextFieldEx bedNum;
    private javax.swing.JLabel bedNumLabel;
    private javax.swing.JTable beds;
    private javax.swing.JScrollPane bedsScrollPane;
    private javax.swing.JScrollPane bedsScrollPane1;
    private javax.swing.JTable businessCategory;
    private javax.swing.JLabel businessCategoryLabel;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private javax.swing.JButton renewButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * ÉxÉbÉhÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicy
	 */
	private	MstBedFocusTraversalPolicy	ftp	=
			new MstBedFocusTraversalPolicy();
	
	/**
	 * ÉxÉbÉhÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
	 * @return ÉxÉbÉhÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicy
	 */
	public MstBedFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(addButton);
		SystemInfo.addMouseCursorChange(renewButton);
		SystemInfo.addMouseCursorChange(deleteButton);
	}
	
	/**
	 * ÉRÉìÉ|Å[ÉlÉìÉgÇÃäeÉäÉXÉiÅ[ÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	private void setListener()
	{
		bedName.addKeyListener(SystemInfo.getMoveNextField());
		bedName.addFocusListener(SystemInfo.getSelectText());
		bedNum.addKeyListener(SystemInfo.getMoveNextField());
		bedNum.addFocusListener(SystemInfo.getSelectText());
		displaySeq.addKeyListener(SystemInfo.getMoveNextField());
		displaySeq.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * èâä˙âªèàóùÇçsÇ§ÅB
	 */
	private void init()
	{
                //VUINV start add 20140707 MASHU_é{èpë‰ìoò^
                this.useShopCategory = ((MstShop) shop.getSelectedItem()).getUseShopCategory();
                if (useShopCategory != 1) {
                    businessCategoryLabel.setVisible(false);
                    bedsScrollPane1.setVisible(false);
                } else {
                    businessCategoryLabel.setVisible(true);
                    bedsScrollPane1.setVisible(true);
                }
                SwingUtil.clearTable(beds);
                initTableColumnWidth();
                //VUINV end add 20140707 MASHU_é{èpë‰ìoò^
                
		mbs.setShop((MstShop)shop.getSelectedItem());
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			mbs.load(con);
                        
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		this.showData();
	}
	
	/**
	 * çƒï\é¶ÇçsÇ§ÅB
	 */
	private void refresh()
	{
		//ÉfÅ[É^ÉxÅ[ÉXÇ©ÇÁÉfÅ[É^Çì«Ç›çûÇﬁ
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			mbs.load(con);
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		//ÉeÅ[ÉuÉãÇ…è§ïiãÊï™É}ÉXÉ^ÉfÅ[É^Çï\é¶Ç∑ÇÈ
		this.showData();
		//ì¸óÕÇÉNÉäÉAÇ∑ÇÈ
		this.clear();
	}
	
	/**
	 * ì¸óÕçÄñ⁄ÇÉNÉäÉAÇ∑ÇÈÅB
	 */
	private void clear()
	{
		selIndex	=	-1;
		bedName.setText("");
		bedNum.setText("");
		displaySeq.setText("");
		
		if(0 < beds.getRowCount())
				beds.removeRowSelectionInterval(0, beds.getRowCount() - 1);
		
		this.changeCurrentData();
	}
	
	
	/**
	 * ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 */
	private void showData()
	{
		DefaultTableModel	model	=	(DefaultTableModel)beds.getModel();
		
		//ëSçsçÌèú
		model.setRowCount(0);
		beds.removeAll();
		for(MstBed mb : mbs)
		{
                        //IVS VUINV start edit 20140703 MASHU_é{èpë‰ìoò^
                        if (useShopCategory != 1) {
                            Object[]	rowData	=	{	mb.getBedName(),
										mb.getBedNum(),
										mb.getDisplaySeq()	};
                            model.addRow(rowData);
                        } else {
                            Object[]	rowData	=	{	mb.getBedName(),
										mb.getBedNum(),
										mb.getDisplaySeq(),
                                                                                mb.getBusinessCategory() };
                            model.addRow(rowData);
                        }
                        //IVS VUINV end edit 20140703 MASHU_é{èpë‰ìoò^
		}
                //IVS_Nhanvt start edit Merge 20140821 MASHU_é{èpë‰ìoò^
                //IVS VUINV start add 20140703 MASHU_é{èpë‰ìoò^
                //initTableColumnWidth();
                if (useShopCategory == 1) {
                    showBusinessCategory();
                }
                //IVS VUINV end add 20140703 MASHU_é{èpë‰ìoò^
                //IVS_Nhanvt end edit Merge 20140821 MASHU_é{èpë‰ìoò^
                
	}
        
        //IVS VUINV start add 20140708 MASHU_é{èpë‰ìoò^
        private void showBusinessCategory(){
            try {
                DefaultTableModel	model	=	(DefaultTableModel)businessCategory.getModel();
                model.setRowCount(0);
                businessCategory.removeAll();
                
                ConnectionWrapper	con	=	SystemInfo.getConnection();

                categories.loadBusinessCategory(con, ((MstShop) shop.getSelectedItem()).getShopID(), ((selIndex != -1 && mbs.size() > selIndex) ? mbs.get(selIndex).getBedID() : 0));
                
                for(MstShopCategory msc : categories) {
                    Object[]	rowData	=	{ msc.getShopClassName(), getBCSelect(msc.isIsCheck()) };
                    model.addRow(rowData);
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(MstBedPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //IVS VUINV end add 20140708 MASHU_é{èpë‰ìoò^
        
        //IVS VUINV start add 20140703 MASHU_é{èpë‰ìoò^
        /**
        * get checkbox
        */
        private JCheckBox getBCSelect(boolean isCheck) {
            JCheckBox checkBox = new JCheckBox();
            checkBox.setSelected(isCheck);

            checkBox.setOpaque(false);
            checkBox.setHorizontalAlignment(SwingConstants.CENTER);
            return checkBox;
        }
        //IVS VUINV end add 20140703 MASHU_é{èpë‰ìoò^
	
	/**
	 * ëIëÉfÅ[É^Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
	 */
	private void changeCurrentData()
	{
		int	index	=	beds.getSelectedRow();
		
		if(0 <= index && index < mbs.size() && index != selIndex)
		{
			selIndex	=	index;
			//ëIëÇ≥ÇÍÇƒÇ¢ÇÈÉfÅ[É^Çï\é¶
			this.showCurrentData();
		}
                
                //IVS VUINV start add 20140707 MASHU_é{èpë‰ìoò^
                if (useShopCategory == 1) {
                    showBusinessCategory();
                }
                //IVS VUINV end add 20140707 MASHU_é{èpë‰ìoò^
		
		//É{É^ÉìÇÃégópâ¬ïsâ¬ÇïœçXÇ∑ÇÈ
		renewButton.setEnabled(0 <= selIndex);
		deleteButton.setEnabled(0 <= selIndex);
	}
	
	/**
	 * ëIëÇ≥ÇÍÇΩÉfÅ[É^Çì¸óÕçÄñ⁄Ç…ï\é¶Ç∑ÇÈÅB
	 */
	private void showCurrentData()
	{
		bedName.setText(mbs.get(selIndex).getBedName());
		bedNum.setText(mbs.get(selIndex).getBedNum().toString());
		displaySeq.setText(mbs.get(selIndex).getDisplaySeq().toString());
	}
	
	/**
	 * ì¸óÕÉ`ÉFÉbÉNÇçsÇ§ÅB
	 * @return ì¸óÕÉGÉâÅ[Ç™Ç»ÇØÇÍÇŒtrueÇï‘Ç∑ÅB
	 */
	private boolean checkInput()
	{
		//ÉxÉbÉhñº
		if(bedName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "é{èpë‰ñº"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			bedName.requestFocusInWindow();
			return	false;
		}
                //IVS_LVTu start add 2014/07/31 Mashu_é{èpë‰ìoò^
		if(displaySeq.getText().equals("0"))
		{
			MessageDialog.showMessageDialog(this,
					"ë}ì¸à íuÇÕ 1 à»è„ÇéwíËÇµÇƒÇ≠ÇæÇ≥Ç¢ÅB",
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			displaySeq.requestFocusInWindow();
			return	false;
		}
                //IVS_LVTu end add 2014/07/31 Mashu_é{èpë‰ìoò^
		//è∞êî
		if(!CheckUtil.isNumber(bedNum.getText()))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "è∞êî"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			bedNum.requestFocusInWindow();
			return	false;
		}
		
		//ë}ì¸à íu
		if(!displaySeq.getText().equals("") && !CheckUtil.isNumber(displaySeq.getText()))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "ë}ì¸à íu"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			displaySeq.requestFocusInWindow();
			return	false;
		}
		
		return	true;
	}
	
	
	/**
	 * ì¸óÕÇ≥ÇÍÇΩÉfÅ[É^Çìoò^Ç∑ÇÈÅB
	 * @param isAdd true - í«â¡èàóù
	 * @return true - ê¨å˜
	 */
	private boolean regist(boolean isAdd)
	{
		boolean		result	=	false;
		MstBed		mb		=	null;
		int			lastSeq	=	-1;
		
		if(isAdd || selIndex < 0)
		{
			mb	=	new MstBed();
		}
		else
		{
			lastSeq	=	mbs.get(selIndex).getDisplaySeq();
			mb		=	mbs.get(selIndex);
		}
		
		//ì¸óÕÇ≥ÇÍÇΩÉfÅ[É^ÇÉZÉbÉgÇ∑ÇÈ
		mb.setShop(mbs.getShop());
		mb.setBedName(bedName.getText());
		mb.setBedNum(Integer.parseInt(bedNum.getText()));
		mb.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText())));
		
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			try
			{
				con.begin();
                                
                                //IVS VUINV start add 20140708 MASHU_é{èpë‰ìoò^
                                if (!isAdd && selIndex > - 1 && useShopCategory == 1) {
                                    MstBedRelation mbr = new MstBedRelation();
                                    mbr.setShopID(((MstShop) shop.getSelectedItem()).getShopID());
                                    mbr.setBedID(mbs.get(selIndex).getBedID());
                                    mbr.delete(con);
                                    
                                    for (int i = 0; i < categories.size(); i++) {
                                        
                                        if (((JCheckBox) businessCategory.getValueAt(i, 1)).isSelected()) {
                                            mbr = new MstBedRelation();
                                            mbr.setShopID(((MstShop) shop.getSelectedItem()).getShopID());
                                            mbr.setBedID(mbs.get(selIndex).getBedID());
                                            mbr.setShopCategoryID(categories.get(i).getShopCategoryId());
                                            mbr.insert(con);
                                        }
                                        
                                    }
                                    
                                }
                                
                                //IVS VUINV end add 20140708 MASHU_é{èpë‰ìoò^
				
				if(mb.regist(con, lastSeq))
				{
                                        //IVS VUINV start add 20140708 MASHU_é{èpë‰ìoò^
                                    
                                        if (isAdd) {
                                            int maxBedId = mb.getMaxBedId(con);
                                            if (maxBedId > 0) {
                                                MstBedRelation mbr = new MstBedRelation();
                                                for (int i = 0; i < categories.size(); i++) {

                                                    if (((JCheckBox) businessCategory.getValueAt(i, 1)).isSelected()) {
                                                        mbr = new MstBedRelation();
                                                        mbr.setShopID(((MstShop) shop.getSelectedItem()).getShopID());
                                                        mbr.setBedID(maxBedId);
                                                        mbr.setShopCategoryID(categories.get(i).getShopCategoryId());
                                                        mbr.insert(con);
                                                    }

                                                }
                                            }
                                        }

                                        //IVS VUINV end add 20140708 MASHU_é{èpë‰ìoò^
                                        
					con.commit();
					result	=	true;
                    //IVS_LVTu start add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
                    isLoadDisplay = true;
                    //IVS_LVTu end add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
				}
				else
				{
					con.rollback();
				}
			}
			catch(SQLException e)
			{
				con.rollback();
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	result;
	}
	
	
	/**
	 * ëIëÇ≥ÇÍÇΩÉfÅ[É^ÇçÌèúÇ∑ÇÈÅB
	 * @return true - ê¨å˜
	 */
	private void delete()
	{
		boolean		result	=	false;
		MstBed		mb		=	null;
		
		if(0 <= selIndex && selIndex < mbs.size())
		{
			mb	=	mbs.get(selIndex);
		}
		
		//çÌèúämîF
		if(MessageDialog.showYesNoDialog(this,
					MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, mb.getBedName()),
					this.getTitle(),
					JOptionPane.WARNING_MESSAGE) != 0)
		{
			return;
		}
		
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
                        
                        //VUINV start add 20140708 MASHU_é{èpë‰ìoò^
                        MstBedRelation mbr = new MstBedRelation();
                        if (selIndex > - 1) {
                                mbr.setShopID(((MstShop) shop.getSelectedItem()).getShopID());
                                mbr.setBedID(mbs.get(selIndex).getBedID());
                        }
                        //VUINV start add 20140708 MASHU_é{èpë‰ìoò^
			try
			{
				con.begin();
				
                                //VUINV start add 20140709 MASHU_é{èpë‰ìoò^
                                mbr.delete(con);
                                //VUINV end add 20140709 MASHU_é{èpë‰ìoò^
                                
				if(mb.delete(con))
				{
					con.commit();
					result	=	true;
                    //IVS_LVTu start add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
                    isLoadDisplay = true;
                    //IVS_LVTu end add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
				}
				else
				{
					con.rollback();
				}
			}
			catch(SQLException e)
			{
				con.rollback();
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		if(result)
		{
			this.refresh();
		}
		else
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED,
							"é{èpë‰"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * ÉxÉbÉhÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicy
	 */
	private class MstBedFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent ÇÃÇ†Ç∆Ç≈MstBedFocusTraversalPolicyÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(bedName))
			{
				return bedNum;
			}
			else if (aComponent.equals(bedNum))
			{
				return displaySeq;
			}
			else if (aComponent.equals(displaySeq))
			{
				return displaySeq;
			}
			
			return getDefaultComponent();
		}

		/**
		 * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(bedName))
			{
				return bedName;
			}
			else if (aComponent.equals(bedNum))
			{
				return bedName;
			}
			else if (aComponent.equals(displaySeq))
			{
				return bedNum;
			}
			
			return getDefaultComponent();
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer êÊì™ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return getDefaultComponent();
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer aContainer - ç≈å„ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return displaySeq;
		}

		/**
		 * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
		 * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return getDefaultComponent();
		}
		
		/**
		 * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * show() Ç‹ÇΩÇÕ setVisible(true) ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA
		 * èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
		 * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA
		 * Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
		 * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
		 * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
		 */
		public Component getInitialComponent(Window window)
		{
			return getDefaultComponent();
		}
		
		public Component getDefaultComponent()
		{
			if(1 < shop.getItemCount())
			{
				return	shop;
			}
			else
			{
				return bedName;
			}
		}
	}
	/**
	 * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
	 */
	private void initTableColumnWidth()
	{
		//óÒÇÃïùÇê›íËÇ∑ÇÈÅB
		beds.getColumnModel().getColumn(0).setPreferredWidth(200);
		beds.getColumnModel().getColumn(1).setPreferredWidth(50);
		beds.getColumnModel().getColumn(2).setPreferredWidth(50);
                
                // IVS VUINV start add 20140703 MASHU_é{èpë‰ìoò^
                if (useShopCategory == 1) {
                    //IVS_Nhanvt start edit Merge 20140821 MASHU_é{èpë‰ìoò^
                    //beds.getColumnModel().getColumn(3).setPreferredWidth(200);
                    //IVS_LVTu start edit 2014/07/28 Mashu_é{èpë‰ìoò^
                    //beds.getColumnModel().getColumn(3).setMinWidth(200);
                    //beds.getColumnModel().getColumn(3).setMaxWidth(200);
                    //beds.getColumnModel().getColumn(3).setMinWidth(20);
                    //beds.getColumnModel().getColumn(3).setMaxWidth(700);
                    //IVS_LVTu end edit 2014/07/25 Mashu_é{èpë‰ìoò^
                    
                    beds = new javax.swing.JTable();

                    beds.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                            {null, null, null, null}
                        },
                        new String [] {
                            "é{èpë‰ñº", "è∞êî", "ï\é¶èá", "ã∆ë‘"
                        }
                    ) {
                        Class[] types = new Class [] {
                            java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
                        };
                        boolean[] canEdit = new boolean [] {
                            false, false, false, false
                        };

                        public Class getColumnClass(int columnIndex) {
                            return types [columnIndex];
                        }

                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return canEdit [columnIndex];
                        }
                    });

                    beds.setSelectionBackground(new java.awt.Color(220, 220, 220));

                    beds.setSelectionForeground(new java.awt.Color(0, 0, 0));


                    beds.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    beds.getTableHeader().setReorderingAllowed(false);
                    SwingUtil.setJTableHeaderRenderer(beds, SystemInfo.getTableHeaderRenderer());
                    beds.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
                    // IVS_nhanvt start edit 20140820 MASHU_é{èpë‰ìoò^_Merge
                    //this.initTableColumnWidth();
                    // IVS_nhanvt end edit 20140820 MASHU_é{èpë‰ìoò^_Merge
                    SelectTableCellRenderer.setSelectTableCellRenderer(beds);
                    beds.addFocusListener(new java.awt.event.FocusAdapter() {
                        public void focusGained(java.awt.event.FocusEvent evt) {
                            bedsFocusGained(evt);
                        }
                    });
                    beds.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseReleased(java.awt.event.MouseEvent evt) {
                            bedsMouseReleased(evt);
                        }
                    });
                    beds.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyReleased(java.awt.event.KeyEvent evt) {
                            bedsKeyReleased(evt);
                        }
                    });

                    bedsScrollPane.setViewportView(beds);
                    //IVS_Nhanvt end edit Merge 20140821 MASHU_é{èpë‰ìoò^
                } else {
                    beds.getColumnModel().getColumn(3).setPreferredWidth(0);         
                    beds.getColumnModel().getColumn(3).setMinWidth(0);
                    beds.getColumnModel().getColumn(3).setMaxWidth(0);
                }
                // IVS VUINV end add 20140703 MASHU_é{èpë‰ìoò^
	}
        
        // IVS VUINV start add 20140703 MASHU_é{èpë‰ìoò^
        /**
	 * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
	 */
	private void initTableBisinessCategoryColumnWidth()
	{
		//óÒÇÃïùÇê›íËÇ∑ÇÈÅB
                businessCategory.getColumnModel().getColumn(0).setPreferredWidth(275);
                businessCategory.getColumnModel().getColumn(1).setPreferredWidth(25);
                //IVS_LVTu start add 2014/07/28 Mashu_é{èpë‰ìoò^
                businessCategory.getColumnModel().getColumn(1).setMinWidth(100);
                businessCategory.getColumnModel().getColumn(1).setMaxWidth(100);
                //IVS_LVTu end add 2014/07/28 Mashu_é{èpë‰ìoò^
	}
        // IVS VUINV end add 20140703 MASHU_é{èpë‰ìoò^
	
	/**
	 * óÒÇÃï\é¶à íuÇê›íËÇ∑ÇÈTableCellRenderer
	 */
	private class TableCellAlignRenderer extends DefaultTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}

		/**
		 * ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉOÇï‘ÇµÇ‹Ç∑ÅB
		 * @param table JTable
		 * @param value ÉZÉãÇ…äÑÇËìñÇƒÇÈíl
		 * @param isSelected ÉZÉãÇ™ëIëÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÇÕ true
		 * @param hasFocus ÉtÉHÅ[ÉJÉXÇ™Ç†ÇÈèÍçáÇÕ true
		 * @param row çs
		 * @param column óÒ
		 * @return ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉO
		 */
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);
			
			switch(column)
			{
				case 1:
				case 2:
					super.setHorizontalAlignment(SwingConstants.RIGHT);
					break;
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}

			return this;
		}
	}
}
