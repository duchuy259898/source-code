/*
 * MstTechnicPanel.java
 *
 * Created on 2006/10/20, 10:58
 */
package com.geobeck.sosia.pos.hair.basicinfo.product;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.master.product.*;
import com.geobeck.sosia.pos.hair.master.product.*;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.basicinfo.product.*;
import java.awt.event.HierarchyEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 *
 * @author katagiri
 */
public class MstTechnicPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private MstTechnicClasses mtcs = new MstTechnicClasses();
    private MstTechnicClass mtc = new MstTechnicClass();
    private Integer selIndex = -1;
    //IVS_LVTu start add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
    private boolean isLoadDisplay= false;
    //IVS_LVTu end add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
    /**
     * Creates new form MstTechnicPanel
     */
    public MstTechnicPanel() {
        super();
        initComponents();
        addMouseCursorChange();
        this.setSize(650, 670);
        this.setPath("äÓñ{ê›íË >> ãZèpÉ}ÉXÉ^");
        this.setTitle("ãZèpìoò^");
        this.setListener();
        this.init();
        if (SystemInfo.getCurrentShop().getShopID() == 0 || SystemInfo.getCurrentShop().isProportionally()) {
            //ñ{ïîÅAÇ†ÇÈÇ¢ÇÕà¬ï™ÇégópÇ∑ÇÈìXï‹ÇÃÇ›ï\é¶Ç∑ÇÈ
            proportionallyButton.setVisible(true);
        } else {
            //è„ãLà»äOÇÃèÍçáÅAï\é¶ÇµÇ»Ç¢
            proportionallyButton.setVisible(false);
        }

        sosiaInfoLabel.setVisible(SystemInfo.isSosiaGearEnable());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        praiseTimeLimitGroup = new javax.swing.ButtonGroup();
        buttonGroupWebReservation = new javax.swing.ButtonGroup();
        displaySeqLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        renewButton = new javax.swing.JButton();
        operationTimeLabel = new javax.swing.JLabel();
        operationTime = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)operationTime.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        jLabel1 = new javax.swing.JLabel();
        technicNo = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)technicNo.getDocument()).setDocumentFilter(
            new CustomFilter(15));
        price = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)price.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        try
        {
            ConnectionWrapper	con	=	SystemInfo.getConnection();

            mtcs.load(con);

            con.close();
        }
        catch(SQLException e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        technicClass = new JComboBox(mtcs.toArray());
        deleteButton = new javax.swing.JButton();
        technicName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)technicName.getDocument()).setDocumentFilter(
            new CustomFilter(30));
        productNameLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        technicsScrollPane = new javax.swing.JScrollPane();
        technics = new javax.swing.JTable();
        productNoLabel = new javax.swing.JLabel();
        proportionallyButton = new javax.swing.JButton();
        taxOffPrice = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)price.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        priceLabel1 = new javax.swing.JLabel();
        productNameLabel1 = new javax.swing.JLabel();
        productNameLabel2 = new javax.swing.JLabel();
        praiseTimeLimit = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)technicNo.getDocument()).setDocumentFilter(
            new CustomFilter(15));
        rdoPraiseTimeLimitEnable = new javax.swing.JRadioButton();
        rdoPraiseTimeLimitDisable = new javax.swing.JRadioButton();
        sosiaInfoLabel = new javax.swing.JLabel();
        productNameLabel3 = new javax.swing.JLabel();
        rdoWebReservationTrue = new javax.swing.JRadioButton();
        rdoWebReservationFalse = new javax.swing.JRadioButton();

        setFocusCycleRoot(true);
        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });

        displaySeqLabel.setText("ë}ì¸à íu");

        priceLabel.setText("âøäiÅiê≈çûÅj");

        displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        displaySeq.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                displaySeqFocusLost(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        operationTimeLabel.setText("é{èpéûä‘");

        operationTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        operationTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel1.setText("ï™óﬁñº");

        technicNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        technicNo.setColumns(15);

        price.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        price.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        price.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                priceCaretUpdate(evt);
            }
        });

        technicClass.setMaximumRowCount(12);
        technicClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        technicClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                technicClassActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        technicName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        technicName.setColumns(30);
        technicName.setInputKanji(true);

        productNameLabel.setText("ãZèpñº");

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        technicsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        technics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ãZèpNo.", "ãZèpñº", "âøäi(ê≈çû)", "é{èpéûä‘", "è‹î¸ä˙å¿", "è‹î¸ä˙å¿ì˙êî", "Webó\ñÒ", "ï\é¶èá"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        technics.setSelectionBackground(new java.awt.Color(220, 220, 220));
        technics.setSelectionForeground(new java.awt.Color(0, 0, 0));
        technics.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        technics.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(technics, SystemInfo.getTableHeaderRenderer());
        technics.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        TechnicTableCellRenderer.setSelectTableCellRenderer(technics);
        technics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                technicsMouseReleased(evt);
            }
        });
        technics.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                technicsKeyReleased(evt);
            }
        });
        technicsScrollPane.setViewportView(technics);

        productNoLabel.setText("ãZèpNo.");

        proportionallyButton.setIcon(SystemInfo.getImageIcon("/button/master/regist_proportionally_off.jpg"));
        proportionallyButton.setBorderPainted(false);
        proportionallyButton.setEnabled(false);
        proportionallyButton.setPressedIcon(SystemInfo.getImageIcon("/button/master/regist_proportionally_on.jpg"));
        proportionallyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proportionallyButtonActionPerformed(evt);
            }
        });

        taxOffPrice.setEditable(false);
        taxOffPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        taxOffPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        priceLabel1.setText("âøäiÅiê≈î≤Åj");

        productNameLabel1.setText("è‹î¸ä˙å¿");

        productNameLabel2.setText("è‹î¸ä˙å¿ì˙êî");

        praiseTimeLimit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        praiseTimeLimit.setColumns(15);

        praiseTimeLimitGroup.add(rdoPraiseTimeLimitEnable);
        rdoPraiseTimeLimitEnable.setText("óòópÇ∑ÇÈ");
        rdoPraiseTimeLimitEnable.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoPraiseTimeLimitEnable.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoPraiseTimeLimitEnable.setOpaque(false);
        rdoPraiseTimeLimitEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoPraiseTimeLimitEnableActionPerformed(evt);
            }
        });

        praiseTimeLimitGroup.add(rdoPraiseTimeLimitDisable);
        rdoPraiseTimeLimitDisable.setText("óòópÇµÇ»Ç¢");
        rdoPraiseTimeLimitDisable.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoPraiseTimeLimitDisable.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoPraiseTimeLimitDisable.setOpaque(false);
        rdoPraiseTimeLimitDisable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoPraiseTimeLimitDisableActionPerformed(evt);
            }
        });

        sosiaInfoLabel.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
        // sosiaInfoLabel.setForeground(java.awt.Color.blue);
        // sosiaInfoLabel.setText("<html>\nÅ¶ÉPÅ[É^ÉCó\ñÒÉÅÉjÉÖÅ[Çí«â¡Ç∑ÇÈèÍçáÇÕÅAãZèpNo.ÇÃêÊì™Ç…<br>\nÅ@ mo-rsv- Çí«â¡ÇµÇƒÇ≠ÇæÇ≥Ç¢ÅBÅ@ÅÀ Åió·ÅF mo-rsv-001Åj\n</html>\n");

        productNameLabel3.setText("Webó\ñÒ");

        buttonGroupWebReservation.add(rdoWebReservationTrue);
        rdoWebReservationTrue.setText("óòópÇ∑ÇÈ");
        rdoWebReservationTrue.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoWebReservationTrue.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoWebReservationTrue.setOpaque(false);
        rdoWebReservationTrue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoWebReservationTrueActionPerformed(evt);
            }
        });

        buttonGroupWebReservation.add(rdoWebReservationFalse);
        rdoWebReservationFalse.setSelected(true);
        rdoWebReservationFalse.setText("óòópÇµÇ»Ç¢");
        rdoWebReservationFalse.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoWebReservationFalse.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoWebReservationFalse.setOpaque(false);
        rdoWebReservationFalse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoWebReservationFalseActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, technicsScrollPane)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(productNameLabel)
                            .add(productNoLabel)
                            .add(jLabel1))
                        .add(35, 35, 35)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(technicClass, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(technicNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(sosiaInfoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 336, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, technicName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(proportionallyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(225, 225, 225)
                                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                    .add(operationTimeLabel)
                                    .add(26, 26, 26)
                                    .add(operationTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(displaySeqLabel)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(productNameLabel3)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(rdoWebReservationTrue)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(rdoWebReservationFalse)
                                    .add(20, 20, 20))
                                .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(productNameLabel2)
                                        .add(productNameLabel1))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(layout.createSequentialGroup()
                                            .add(rdoPraiseTimeLimitEnable)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(rdoPraiseTimeLimitDisable))
                                        .add(layout.createSequentialGroup()
                                            .add(praiseTimeLimit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                            .add(priceLabel)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(price, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                            .add(priceLabel1)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                            .add(taxOffPrice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(technicClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(productNoLabel)
                        .add(technicNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(sosiaInfoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(productNameLabel)
                    .add(technicName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(productNameLabel1)
                    .add(rdoPraiseTimeLimitEnable)
                    .add(rdoPraiseTimeLimitDisable))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(productNameLabel2)
                    .add(praiseTimeLimit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(priceLabel)
                    .add(price, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(priceLabel1)
                    .add(taxOffPrice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(rdoWebReservationTrue)
                        .add(rdoWebReservationFalse))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(displaySeqLabel)
                        .add(operationTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(operationTimeLabel)
                        .add(productNameLabel3)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(proportionallyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(technicsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 443, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * ëIëãZèpÇ÷ÇÃà¬ï™ìoò^
     */
        private void proportionallyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proportionallyButtonActionPerformed

            SystemInfo.getLogger().log(Level.INFO, "ãZèpà¬ï™ìoò^");
            MstTechnicProportionallyPanel mtpp = new MstTechnicProportionallyPanel();

            // ëIëíÜÇÃãZèpãÊï™ÇãZèpà¬ï™ìoò^Ç…ÉZÉbÉg
            if (0 <= selIndex) {
                mtpp.setSelectedTechnicClassID(mtcs.get(technicClass.getSelectedIndex()).getTechnicClassID());
            }
            // ëIëíÜÇÃãZèpÇãZèpà¬ï™ìoò^Ç…ÉZÉbÉg
            if (0 <= technics.getSelectedRow()) {
                mtpp.setSelectedTechnicID(mtc.get(technics.getSelectedRow()).getTechnicID());
            }

            mtpp.setBackButtonVisible(true);
            mtpp.setOpener(this);
            parentFrame.changeContents(mtpp);

        }//GEN-LAST:event_proportionallyButtonActionPerformed

    private void rdoPraiseTimeLimitDisableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoPraiseTimeLimitDisableActionPerformed
        this.praiseTimeLimit.setEnabled(false);
    }//GEN-LAST:event_rdoPraiseTimeLimitDisableActionPerformed

    private void rdoPraiseTimeLimitEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoPraiseTimeLimitEnableActionPerformed
        this.praiseTimeLimit.setEnabled(true);
    }//GEN-LAST:event_rdoPraiseTimeLimitEnableActionPerformed

    private void displaySeqFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_displaySeqFocusLost
        if (!CheckUtil.isNumber(displaySeq.getText())) {
            displaySeq.setText("");
        }
    }//GEN-LAST:event_displaySeqFocusLost

	private void priceCaretUpdate(javax.swing.event.CaretEvent evt)//GEN-FIRST:event_priceCaretUpdate
	{//GEN-HEADEREND:event_priceCaretUpdate
            this.showTaxOffPrice();
	}//GEN-LAST:event_priceCaretUpdate

    private void technicClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_technicClassActionPerformed
        refresh();
        changeTextEditable(true);
    }//GEN-LAST:event_technicClassActionPerformed

    /**
     * ëIëãZèpÇ÷ÇÃà¬ï™ìoò^
     */
	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
            if (this.delete()) {
                this.refresh();
            }
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
            if (this.checkInput()) {
                if (this.regist(false)) {
                    this.refresh();
                } else {
                    MessageDialog.showMessageDialog(
                            this,
                            MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "ãZèp"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }
            }
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
            if (this.checkInput()) {
                if (this.regist(true)) {
                    this.refresh();
                } else {
                    MessageDialog.showMessageDialog(
                            this,
                            MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "ãZèp"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }
            }
	}//GEN-LAST:event_addButtonActionPerformed

	private void technicsMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_technicsMouseReleased
	{//GEN-HEADEREND:event_technicsMouseReleased
            this.changeCurrentData();
            this.checkMobileData();
	}//GEN-LAST:event_technicsMouseReleased

	private void technicsKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_technicsKeyReleased
	{//GEN-HEADEREND:event_technicsKeyReleased
            this.changeCurrentData();
            this.checkMobileData();
	}//GEN-LAST:event_technicsKeyReleased

    private void rdoWebReservationTrueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoWebReservationTrueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoWebReservationTrueActionPerformed

    private void rdoWebReservationFalseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoWebReservationFalseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoWebReservationFalseActionPerformed

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
       //IVS_LVTu start add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑  
        if ((evt.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
            if (!evt.getComponent().isDisplayable() && isLoadDisplay) {
                SystemInfo.MessageDialogGB(this, this.getTitle());
            }
        }
        //IVS_LVTu end add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
    }//GEN-LAST:event_formHierarchyChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.ButtonGroup buttonGroupWebReservation;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private javax.swing.JLabel jLabel1;
    private com.geobeck.swing.JFormattedTextFieldEx operationTime;
    private javax.swing.JLabel operationTimeLabel;
    private com.geobeck.swing.JFormattedTextFieldEx praiseTimeLimit;
    private javax.swing.ButtonGroup praiseTimeLimitGroup;
    private com.geobeck.swing.JFormattedTextFieldEx price;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel priceLabel1;
    private javax.swing.JLabel productNameLabel;
    private javax.swing.JLabel productNameLabel1;
    private javax.swing.JLabel productNameLabel2;
    private javax.swing.JLabel productNameLabel3;
    private javax.swing.JLabel productNoLabel;
    private javax.swing.JButton proportionallyButton;
    private javax.swing.JRadioButton rdoPraiseTimeLimitDisable;
    private javax.swing.JRadioButton rdoPraiseTimeLimitEnable;
    private javax.swing.JRadioButton rdoWebReservationFalse;
    private javax.swing.JRadioButton rdoWebReservationTrue;
    private javax.swing.JButton renewButton;
    private javax.swing.JLabel sosiaInfoLabel;
    private com.geobeck.swing.JFormattedTextFieldEx taxOffPrice;
    private javax.swing.JComboBox technicClass;
    private com.geobeck.swing.JFormattedTextFieldEx technicName;
    private com.geobeck.swing.JFormattedTextFieldEx technicNo;
    private javax.swing.JTable technics;
    private javax.swing.JScrollPane technicsScrollPane;
    // End of variables declaration//GEN-END:variables
    private String tmpTechnicNo = "";
    /**
     * ãZèpÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicy
     */
    private MstTechnicFocusTraversalPolicy ftp =
            new MstTechnicFocusTraversalPolicy();

    /**
     * ãZèpÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
     *
     * @return ãZèpÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicy
     */
    public MstTechnicFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    /**
     * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(addButton);
        SystemInfo.addMouseCursorChange(renewButton);
        SystemInfo.addMouseCursorChange(deleteButton);

        SystemInfo.addMouseCursorChange(proportionallyButton);	// à¬ï™ìoò^É{É^Éì
    }

    /**
     * ÉRÉìÉ|Å[ÉlÉìÉgÇÃäeÉäÉXÉiÅ[ÇÉZÉbÉgÇ∑ÇÈÅB
     */
    private void setListener() {
        displaySeq.addKeyListener(SystemInfo.getMoveNextField());
        displaySeq.addFocusListener(SystemInfo.getSelectText());
        operationTime.addKeyListener(SystemInfo.getMoveNextField());
        operationTime.addFocusListener(SystemInfo.getSelectText());
        price.addKeyListener(SystemInfo.getMoveNextField());
        price.addFocusListener(SystemInfo.getSelectText());
        technicClass.addKeyListener(SystemInfo.getMoveNextField());
        technicNo.addKeyListener(SystemInfo.getMoveNextField());
        technicNo.addFocusListener(SystemInfo.getSelectText());
        technicName.addKeyListener(SystemInfo.getMoveNextField());
        technicName.addFocusListener(SystemInfo.getSelectText());
    }

    /**
     * èâä˙âªèàóùÇçsÇ§ÅB
     */
    private void init() {
        if (0 < mtcs.size()) {
            technicClass.setSelectedIndex(0);
        }

        this.refresh();
    }

    public boolean checkClassRegisted() {
        return (0 < mtcs.size());
    }

    /**
     * çƒï\é¶ÇçsÇ§ÅB
     */
    private void refresh() {
        if (0 <= technicClass.getSelectedIndex()) {
            mtc = (MstTechnicClass) technicClass.getSelectedItem();
            //ãZèpÉ}ÉXÉ^ÇÉfÅ[É^ÉxÅ[ÉXÇ©ÇÁì«Ç›çûÇﬁ
            try {
                ConnectionWrapper con = SystemInfo.getConnection();

                mtc.loadTechnic(con);
            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }
        //ÉeÅ[ÉuÉãÇ…è§ïiÉ}ÉXÉ^ÉfÅ[É^Çï\é¶Ç∑ÇÈ
        this.showData();
        //ì¸óÕÇÉNÉäÉAÇ∑ÇÈ
        this.clear();

        technicNo.requestFocusInWindow();
    }

    /**
     * ì¸óÕçÄñ⁄ÇÉNÉäÉAÇ∑ÇÈÅB
     */
    private void clear() {
        selIndex = -1;
        technicNo.setText("");
        tmpTechnicNo = "";
        technicName.setText("");
        price.setText("");
        operationTime.setText("");
        displaySeq.setText("");

        praiseTimeLimit.setText("");
        rdoPraiseTimeLimitEnable.setSelected(true);
        rdoWebReservationFalse.setSelected(true);
        praiseTimeLimit.setEnabled(true);
        if (0 < technics.getRowCount()) {
            technics.removeRowSelectionInterval(0, technics.getRowCount() - 1);
        }

        this.changeCurrentData();


    }

    /**
     * ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
     */
    private void showData() {
        SwingUtil.clearTable(technics);
        DefaultTableModel model = (DefaultTableModel) technics.getModel();

        for (MstTechnic mt : mtc) {
            Object[] rowData = {mt.getTechnicNo(),
                mt.getTechnicName(),
                mt.getPrice(),
                mt.getOperationTime(),
                (mt.isPraiseTime() ? "Åú" : ""),
                (mt.isPraiseTime() ? mt.getPraiseTimeLimit() : ""),
                (mt.getMobileFlag() == 1 ? "Åú" : ""),
                mt.getDisplaySeq()
            };
            model.addRow(rowData);
        }
        //HorizotanAlignment right cell 
        DefaultTableCellRenderer temp = new DefaultTableCellRenderer();
        temp.setHorizontalAlignment(JLabel.RIGHT);
        technics.getColumnModel().getColumn(2).setCellRenderer(temp);
        technics.getColumnModel().getColumn(3).setCellRenderer(temp);
        technics.getColumnModel().getColumn(5).setCellRenderer(temp);
        technics.getColumnModel().getColumn(6).setCellRenderer(temp);
        technics.getColumnModel().getColumn(7).setCellRenderer(temp);
        //HorizotanAlignment right cell 
    }

    /**
     * ëIëÉfÅ[É^Ç™ÉÇÉoÉCÉãópÉfÅ[É^ÇÃéûéwíËÇÃÉeÉLÉXÉgì¸óÕÇïsâ¬
     */
    private void checkMobileData() {
        MstTechnic mt = mtc.get(selIndex);
        boolean isMobileData = true;

        if (mt.getTechnicNo().length() >= 7 && mt.getTechnicNo().substring(0, 7).equals(mt.getMobileTechnicNo())) {
            isMobileData = false;
        }
        changeTextEditable(isMobileData);
    }

    /**
     * ÉeÉLÉXÉgÇÃEnabledÇïœçXÇ∑ÇÈÅB
     *
     * @param enabled Enabled
     */
    private void changeTextEditable(boolean Enabled) {
        technicNo.setEditable(Enabled);
        //technicName.setEditable(Enabled);
        //price.setEditable(Enabled);
    }

    /**
     * ëIëÉfÅ[É^Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
     */
    private void changeCurrentData() {
        int index = technics.getSelectedRow();

        if (0 <= index && index < mtc.size() && index != selIndex) {
            selIndex = index;
            //ëIëÇ≥ÇÍÇƒÇ¢ÇÈÉfÅ[É^Çï\é¶
            this.showCurrentData();
        }

        this.changeButtonEnabled(0 <= selIndex);
    }

    /**
     * ëIëÇ≥ÇÍÇΩÉfÅ[É^Çì¸óÕçÄñ⁄Ç…ï\é¶Ç∑ÇÈÅB
     */
    private void showCurrentData() {
        MstTechnic mt = mtc.get(selIndex);

        technicNo.setText(mt.getTechnicNo());
        tmpTechnicNo = mt.getTechnicNo();
        technicName.setText(mt.getTechnicName());
        price.setText(mt.getPrice().toString());
        operationTime.setText(mt.getOperationTime().toString());
        displaySeq.setText(mt.getDisplaySeq().toString());
        praiseTimeLimit.setText(mt.getPraiseTimeLimit().toString());
        if (mt.isPraiseTime().booleanValue()) {
            this.rdoPraiseTimeLimitEnable.setSelected(true);
            this.praiseTimeLimit.setEnabled(true);
        } else {
            this.rdoPraiseTimeLimitDisable.setSelected(true);
            this.praiseTimeLimit.setEnabled(false);
            this.praiseTimeLimit.setText("");
        }
        if (mt.getMobileFlag() >= 1) {
            rdoWebReservationTrue.setSelected(true);
        } else {
            rdoWebReservationFalse.setSelected(true);
        }
        this.showTaxOffPrice();
    }

    private void showTaxOffPrice() {
        Long priceValue = 0l;
        Long taxOffValue = 0l;
        Double temptaxOffValue;

        try {
            priceValue = Long.parseLong(price.getText().replace(",", ""));
        } catch (Exception e) {
        }


//		taxOffValue	=	priceValue - SystemInfo.getTax(priceValue, SystemInfo.getSystemDate());
        temptaxOffValue = (priceValue / (1 + SystemInfo.getTaxRate(SystemInfo.getSystemDate())));
        BigDecimal a = new BigDecimal(temptaxOffValue);
        a = a.setScale(3, RoundingMode.HALF_UP);
        taxOffValue = ((Double) Math.ceil(a.doubleValue())).longValue();
        taxOffPrice.setText(taxOffValue.toString());

    }

    /**
     * É{É^ÉìÇÃEnabledÇïœçXÇ∑ÇÈÅB
     *
     * @param enabled Enabled
     */
    private void changeButtonEnabled(boolean enabled) {
        //addButton.setEnabled(!enabled);
        renewButton.setEnabled(enabled);
        deleteButton.setEnabled(enabled);
        proportionallyButton.setEnabled(enabled);   // à¬ï™ìoò^
    }

    /**
     * ì¸óÕÉ`ÉFÉbÉNÇçsÇ§ÅB
     *
     * @return ì¸óÕÉGÉâÅ[Ç™Ç»ÇØÇÍÇŒtrueÇï‘Ç∑ÅB
     */
    private boolean checkInput() {
        //ãZèpï™óﬁ
        if (technicClass.getSelectedIndex() < 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ãZèpï™óﬁ"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            technicClass.requestFocusInWindow();
            return false;
        }
        //ãZèpNo.
        if (technicNo.getText().equals("")) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ãZèpNo."),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            technicNo.requestFocusInWindow();
            return false;
        }
        //ãZèpñº
        if (technicName.getText().equals("")) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ãZèpñº"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            technicName.requestFocusInWindow();
            return false;
        }

        // è‹î¸ä˙å¿
        if (rdoPraiseTimeLimitEnable.isSelected()) {
            try {
                Integer.parseInt(praiseTimeLimit.getText());
            } catch (NumberFormatException e) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "è‹î¸ä˙å¿"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            	//IVS_LVTu start edit 2017/08/18  #22255 [gb]ãZèpÅEè§ïiÅEÉRÅ[ÉXìoò^âÊñ  ë}ì¸à íuÇ™Ç»Ç¢ëÊ1î‘ñ⁄ÇÃìoò^Ç™Ç≈Ç´Ç»Ç¢ÅB
                praiseTimeLimit.requestFocusInWindow();
            	//IVS_LVTu end edit 2017/08/18 #22255 [gb]ãZèpÅEè§ïiÅEÉRÅ[ÉXìoò^âÊñ  ë}ì¸à íuÇ™Ç»Ç¢ëÊ1î‘ñ⁄ÇÃìoò^Ç™Ç≈Ç´Ç»Ç¢ÅB
                return false;
            }
        }

        //îÑíl

            try {
                Long.parseLong(price.getText());
            } catch (Exception e) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "îÑíl"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                price.requestFocusInWindow();
                return false;

            }
        



        //é{èpéûä‘
        if (operationTime.getText().equals("")) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "é{èpéûä‘"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            operationTime.requestFocusInWindow();
            return false;
        } else {
            if (!CheckUtil.isNumber(operationTime.getText())) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "é{èpéûä‘"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                operationTime.requestFocusInWindow();
                return false;
            }
        }

        //ï\é¶èá
        if (displaySeq.getText().equals("0")) {
            MessageDialog.showMessageDialog(this,
                    "ë}ì¸à íuÇÕ 1 à»è„ÇéwíËÇµÇƒÇ≠ÇæÇ≥Ç¢ÅB",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            displaySeq.requestFocusInWindow();
            return false;
        }

        return true;
    }

    /**
     * ëIëÇ≥ÇÍÇƒÇ¢ÇÈãZèpï™óﬁÇhÇcÇÉZÉbÉgÇ∑ÇÈÅB
     *
     * @param technicClassID ãZèpï™óﬁÇhÇc
     */
    public void setSelectedTechnicClassID(Integer technicClassID) {
        if (technicClassID == null) {
            return;
        }

        for (MstTechnicClass tc : mtcs) {
            if (technicClassID == tc.getTechnicClassID()) {
                technicClass.setSelectedItem(tc);
                return;
            }
        }
    }

    /**
     * ì¸óÕÇ≥ÇÍÇΩÉfÅ[É^Çìoò^Ç∑ÇÈÅB
     *
     * @param isAdd true - í«â¡èàóù
     * @return true - ê¨å˜
     */
    private boolean regist(boolean isAdd) {
        boolean result = false;
        MstTechnic mt = new MstTechnic();
        Integer shopID = SystemInfo.getCurrentShop().getShopID();

        if (!isAdd && 0 <= selIndex) {
            mt.setData(mtc.get(selIndex));
        }

        this.setData(mt);

        ConnectionWrapper con = SystemInfo.getConnection();

        try {

            if ((isAdd || !technicNo.getText().equals(tmpTechnicNo)) && mt.isExistsByTechnicNo(con)) {
                MessageDialog.showMessageDialog(
                        this,
                        MessageUtil.getMessage(MessageUtil.ERROR_SAME_NO_EXIST, "ãZèpNo"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);

                technicNo.requestFocusInWindow();
                technicNo.setText(tmpTechnicNo);
                return false;
            }

            con.begin();

            if (mt.regist(con, (0 <= selIndex ? mtc.get(selIndex).getDisplaySeq() : -1))) {
                //IVS_TMTrong start add 2015/10/21 New request #43515
                result = true;
                //IVS_TMTrong end add 2015/10/21 New request #43515
                if (shopID != 0) {
                    //IVS_TMTrong start add 2015/10/20 New request #43515
                    MstUseProduct mup = new MstUseProduct();
                    if(isAdd || (!isAdd && mup.isExist_Technic_UseProduct(con, SystemInfo.getCurrentShop().getShopID(), 1, mt.getTechnicID()))){
                        mup.setShop(SystemInfo.getCurrentShop());
                        mup.setProductDivision(1);
                        mup.setProductID(mt.getTechnicID());
                        mup.setPrice(0l);
                        if(displaySeq.getText().equals("")){
                        	//IVS_LVTu start add 2017/08/17 #21596 [gb]ãZèpÅEè§ïiÅEÉRÅ[ÉXìoò^âÊñ  ë}ì¸à íuÇ™Ç»Ç¢ëÊ1î‘ñ⁄ÇÃìoò^Ç™Ç≈Ç´Ç»Ç¢
                            if (technics.getRowCount()> 0) {
                                int maxRowIndex = technics.getRowCount()-1;
                                int displaySeqTemp = Integer.parseInt(technics.getValueAt(maxRowIndex, 7).toString());
                                mup.setDisplay_seq(displaySeqTemp+1);
                            } else {
                                mup.setDisplay_seq(1);
                            }
                        	//IVS_LVTu end add 2017/08/17 #21596 [gb]ãZèpÅEè§ïiÅEÉRÅ[ÉXìoò^âÊñ  ë}ì¸à íuÇ™Ç»Ç¢ëÊ1î‘ñ⁄ÇÃìoò^Ç™Ç≈Ç´Ç»Ç¢
                        }else{
                            mup.setDisplay_seq(Integer.valueOf(displaySeq.getText()));
                        }
                        //IVS_TMTrong end add 2015/10/20 New request #43515
                        try {
                            mup.setPrice(Long.parseLong(price.getText().replace(",", "")));
                        } catch (Exception e) {}
                        result = mup.regist(con);
                    }
                } 
                //IVS_LVTu start add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
                isLoadDisplay = true;
                //IVS_LVTu end add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑

                //IVS_TMTrong start edit 2015/10/21 New request #43515
                //else {
                //    result = true;
                //}
                //IVS_TMTrong end edit 2015/10/21 New request #43515
            }

            if (result) {
                con.commit();
            } else {
                con.rollback();
            }

        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return result;
    }

    /**
     * ãZèpï™óﬁÉ}ÉXÉ^ÉfÅ[É^Ç©ÇÁÉfÅ[É^ÇÉZÉbÉgÇ∑ÇÈÅB
     *
     * @param mt ãZèpï™óﬁÉ}ÉXÉ^ÉfÅ[É^
     */
    private void setData(MstTechnic mt) {
        mt.setTechnicClass((MstTechnicClass) technicClass.getSelectedItem());
        mt.setTechnicNo(technicNo.getText());

        mt.setTechnicName(technicName.getText());
        mt.setPrice(0l);
        try {
            mt.setPrice(Long.parseLong(price.getText().replace(",", "")));
        } catch (Exception e) {
        }
        mt.setOperationTime(0);
        try {
            mt.setOperationTime(Integer.parseInt(operationTime.getText()));
        } catch (Exception e) {
        }
        mt.setDisplaySeq(0);
        try {
            mt.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText().replace(",", ""))));
        } catch (Exception e) {
        }
        if (this.rdoPraiseTimeLimitEnable.isSelected()) {
            mt.setPraiseTimeLimit(Integer.parseInt(praiseTimeLimit.getText()));
        } else {
            mt.setPraiseTimeLimit(null);
        }
        mt.setPraiseTime(this.rdoPraiseTimeLimitEnable.isSelected());
        if (rdoWebReservationTrue.isSelected()) {
            mt.setMobileFlag(1);
        } else {
            mt.setMobileFlag(0);
        }

    }

    /**
     * ëIëÇ≥ÇÍÇΩÉfÅ[É^ÇçÌèúÇ∑ÇÈÅB
     *
     * @return true - ê¨å˜
     */
    private boolean delete() {
        boolean result = false;
        MstTechnic mt = null;
        MstUseProducts mup = new MstUseProducts();

        if (0 <= selIndex && selIndex < mtc.size()) {
            mt = mtc.get(selIndex);
        }

        ConnectionWrapper con = SystemInfo.getConnection();

        try {
            mup.setProductDivision(1);


            con.begin();

            if (mt.delete(con) && mup.deleteProductId(con, mt.getTechnicID())) {
                con.commit();
                this.refresh();
                result = true;
                //IVS_LVTu start add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
                isLoadDisplay = true;
                //IVS_LVTu end add 2017/08/15 #21596 [gb] É}ÉXÉ^ìoò^ÇÃÇ†Ç∆çƒãNìÆÉAÉâÅ[ÉgÇèoÇ∑
            } else {
                con.rollback();
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return result;
    }

    /**
     * ãZèpÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicy
     */
    private class MstTechnicFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(technicClass)) {
                return technicNo;
            } else if (aComponent.equals(technicNo)) {
                return technicName;
            } else if (aComponent.equals(technicName)) {
                return rdoPraiseTimeLimitEnable;
            } else if (aComponent.equals(rdoPraiseTimeLimitEnable)) {
                return rdoPraiseTimeLimitDisable;
            } else if (aComponent.equals(rdoPraiseTimeLimitDisable)) {
                return praiseTimeLimit;
            } else if (aComponent.equals(praiseTimeLimit)) {
                return price;
            } else if (aComponent.equals(price)) {
                return operationTime;
            } else if (aComponent.equals(operationTime)) {
                return displaySeq;
            } else if (aComponent.equals(displaySeq)) {
                return technicClass;
            }

            return technicClass;
        }

        /**
         * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(technicClass)) {
                return technicClass;
            } else if (aComponent.equals(technicNo)) {
                return technicClass;
            } else if (aComponent.equals(technicName)) {
                return technicNo;
            } else if (aComponent.equals(rdoPraiseTimeLimitEnable)) {
                return technicName;
            } else if (aComponent.equals(rdoPraiseTimeLimitDisable)) {
                return rdoPraiseTimeLimitEnable;
            } else if (aComponent.equals(praiseTimeLimit)) {
                return rdoPraiseTimeLimitDisable;
            } else if (aComponent.equals(price)) {
                return praiseTimeLimit;
            } else if (aComponent.equals(operationTime)) {
                return price;
            } else if (aComponent.equals(displaySeq)) {
                return operationTime;
            }

            return technicClass;
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer êÊì™ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getFirstComponent(Container aContainer) {
            return technicClass;
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer aContainer - ç≈å„ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getLastComponent(Container aContainer) {
            return displaySeq;
        }

        /**
         * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB aContainer
         * ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
         *
         * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getDefaultComponent(Container aContainer) {
            return technicClass;
        }

        /**
         * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB show() Ç‹ÇΩÇÕ setVisible(true)
         * ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
         * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
         * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
         * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
         * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
         */
        public Component getInitialComponent(Window window) {
            return technicClass;
        }
    }

    /**
     * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
     */
    private void initTableColumnWidth() {
        //óÒÇÃïùÇê›íËÇ∑ÇÈÅB
        technics.getColumnModel().getColumn(0).setPreferredWidth(60);
        technics.getColumnModel().getColumn(1).setPreferredWidth(150);
        technics.getColumnModel().getColumn(2).setPreferredWidth(50);
        technics.getColumnModel().getColumn(3).setPreferredWidth(35);
        technics.getColumnModel().getColumn(4).setPreferredWidth(35);
        technics.getColumnModel().getColumn(5).setPreferredWidth(35);
        technics.getColumnModel().getColumn(6).setPreferredWidth(65);
    }

    /**
     * óÒÇÃï\é¶à íuÇê›íËÇ∑ÇÈTableCellRenderer
     */
    private class TableCellAlignRenderer extends DefaultTableCellRenderer {

        /**
         * Creates a new instance of ReservationTableCellRenderer
         */
        public TableCellAlignRenderer() {
            super();
        }

        /**
         * ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉOÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param table JTable
         * @param value ÉZÉãÇ…äÑÇËìñÇƒÇÈíl
         * @param isSelected ÉZÉãÇ™ëIëÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÇÕ true
         * @param hasFocus ÉtÉHÅ[ÉJÉXÇ™Ç†ÇÈèÍçáÇÕ true
         * @param row çs
         * @param column óÒ
         * @return ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉO
         */
        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value,
                    isSelected, hasFocus, row, column);

            switch (column) {
                case 2:
                case 3:
                case 5:
                case 6:
                    super.setHorizontalAlignment(SwingConstants.RIGHT);
                    break;
                case 4:
                    super.setHorizontalAlignment(SwingConstants.CENTER);
                    break;
                default:
                    super.setHorizontalAlignment(SwingConstants.LEFT);
                    break;
            }

            return this;
        }
    }
}
