/*
 * MstCourseClassPanel.java
 *
 * Created on 2012/03/01, 11:01
 */

package com.geobeck.sosia.pos.hair.basicinfo.product;

import com.geobeck.sosia.pos.basicinfo.SimpleMaster;
import com.geobeck.sosia.pos.basicinfo.SimpleMasterDialog;
import com.geobeck.sosia.pos.hair.master.product.*;
import com.geobeck.sosia.pos.system.SystemInfo;
// IVS_LeTheHieu Start add 20140709 GB_MASHU_コース分類登録
import com.geobeck.sosia.pos.hair.master.product.MstCourseClass;
import com.geobeck.sosia.pos.hair.master.product.MstCourseClasses;
import com.geobeck.sosia.pos.master.MstData;
// IVS_LeTheHieu End add 20140709 GB_MASHU_コース分類登録
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;
import java.awt.event.HierarchyEvent;

/**
 *
 * @author  katagiri
 */
public class MstCourseClassPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private MstCourseClasses		mccs		=	new MstCourseClasses();
        // IVS_LeTheHieu Start add 20140709 GB_MASHU_コース分類登録
        private Integer                         useShopCategory =       null;
        private Integer                         shopId          =       null;
        // IVS_LeTheHieu End add 20140709 GB_MASHU_コース分類登録
	private Integer				selIndex	=	-1;

    //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
    private boolean isLoadDisplay= false;
    //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
	
	/** Creates new form MstCourseClassPanel */
	public MstCourseClassPanel()
	{
		super();
		initComponents();
		addMouseCursorChange();
		this.setSize(600, 680);
		this.setPath("基本設定 >> 技術マスタ");
		this.setTitle("コース分類登録");
		this.setListener();
                this.initTableColumnWidth();
		this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addButton = new javax.swing.JButton();
        technicClassesScrollPane = new javax.swing.JScrollPane();
        courseClasses = new javax.swing.JTable();
        displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        courseClassName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)courseClassName.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        deleteButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        courseClassNameLabel = new javax.swing.JLabel();
        displaySeqLabel = new javax.swing.JLabel();
        courseClassContractedNameLabel = new javax.swing.JLabel();
        courseClassContractedName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)courseClassName.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        businesslbl = new javax.swing.JLabel();
        business = new javax.swing.JComboBox();
        integrationlbl = new javax.swing.JLabel();
        courseintegration = new javax.swing.JComboBox();
        integration = new javax.swing.JButton();

        setName(""); // NOI18N
        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setContentAreaFilled(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        technicClassesScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        courseClasses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "分類名", "分類略称", "表示順", "コース統合名", "業態"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseClasses.setSelectionBackground(new java.awt.Color(220, 220, 220));
        courseClasses.setSelectionForeground(new java.awt.Color(0, 0, 0));
        courseClasses.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        courseClasses.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(courseClasses, SystemInfo.getTableHeaderRenderer());
        courseClasses.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(courseClasses);
        courseClasses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                courseClassesMouseReleased(evt);
            }
        });
        courseClasses.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                courseClassesKeyReleased(evt);
            }
        });
        technicClassesScrollPane.setViewportView(courseClasses);
        if (courseClasses.getColumnModel().getColumnCount() > 0) {
            courseClasses.getColumnModel().getColumn(0).setPreferredWidth(85);
            courseClasses.getColumnModel().getColumn(1).setPreferredWidth(80);
            courseClasses.getColumnModel().getColumn(2).setPreferredWidth(80);
            courseClasses.getColumnModel().getColumn(3).setPreferredWidth(80);
        }

        displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        courseClassName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        courseClassName.setDocument(new CustomPlainDocument(20));
        courseClassName.setInputKanji(true);

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setContentAreaFilled(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        courseClassNameLabel.setText("分類名");

        displaySeqLabel.setText("挿入位置");

        courseClassContractedNameLabel.setText("分類略称");

        courseClassContractedName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        courseClassContractedName.setDocument(new CustomPlainDocument(20));
        courseClassContractedName.setInputKanji(true);

        businesslbl.setText("業態");

        business.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));

        integrationlbl.setText("統合分類");

        courseintegration.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));

        integration.setIcon(SystemInfo.getImageIcon("/button/master/integration_reg_off.jpg"));
        integration.setBorderPainted(false);
        integration.setPressedIcon(SystemInfo.getImageIcon("/button/master/integration_reg_on.jpg"));
        integration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                integrationActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(courseClassContractedNameLabel)
                            .add(courseClassNameLabel)
                            .add(integrationlbl))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(courseClassName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 295, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(courseClassContractedName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 189, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(courseintegration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(27, 27, 27)
                                        .add(businesslbl)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(displaySeqLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(business, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(layout.createSequentialGroup()
                            .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(integration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, technicClassesScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 580, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(courseClassNameLabel)
                    .add(courseClassName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(courseClassContractedNameLabel)
                    .add(courseClassContractedName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displaySeqLabel)
                    .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(businesslbl)
                    .add(business, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .add(integrationlbl)
                    .add(courseintegration, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(integration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(technicClassesScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 512, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(38, 38, 38))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
	if(this.checkInput()) {
	    this.regist(true);
	    this.refresh();
	}
    }//GEN-LAST:event_addButtonActionPerformed

    private void renewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renewButtonActionPerformed
	if(this.checkInput()) {
	    this.regist(false);
	    this.refresh();
	}
    }//GEN-LAST:event_renewButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
	if(this.checkDelete()){
	    this.delete();
	    this.refresh();
	} else{
	    MessageDialog.showMessageDialog(this,
		MessageUtil.getMessage(7101, "分類","技術"),
		this.getTitle(),
		JOptionPane.ERROR_MESSAGE);
	}
    }//GEN-LAST:event_deleteButtonActionPerformed

	private void courseClassesMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_courseClassesMouseReleased
	{//GEN-HEADEREND:event_courseClassesMouseReleased
		this.changeCurrentData();
	}//GEN-LAST:event_courseClassesMouseReleased

	private void courseClassesKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_courseClassesKeyReleased
	{//GEN-HEADEREND:event_courseClassesKeyReleased
		this.changeCurrentData();
	}//GEN-LAST:event_courseClassesKeyReleased

    // IVS_LeTheHieu Start add 20140709 GB_MASHU_コース分類登録
    /**
     * コース統合を登録する。
     * @param  evt 
     * @return None
     * @author IVS_LeTheHieu
     * @since  20140703
     */
    private void integrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_integrationActionPerformed

        SimpleMasterDialog dlg = new SimpleMasterDialog(
            "コース統合分類",
            "mst_course_integration",
            "course_integration_id",
            "course_integration_name",
            20, SystemInfo.getTableHeaderRenderer());

        dlg.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, dlg, "コース統合名", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );

        this.initCourseIntegration();
        this.refresh();
    }//GEN-LAST:event_integrationActionPerformed

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
       //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す  
        if ((evt.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
            if (!evt.getComponent().isDisplayable() && isLoadDisplay) {
                SystemInfo.MessageDialogGB(this, this.getTitle());
            }
        }
        //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
    }//GEN-LAST:event_formHierarchyChanged

    // IVS_LeTheHieu End add 20140709 GB_MASHU_コース分類登録
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox business;
    private javax.swing.JLabel businesslbl;
    private com.geobeck.swing.JFormattedTextFieldEx courseClassContractedName;
    private javax.swing.JLabel courseClassContractedNameLabel;
    private com.geobeck.swing.JFormattedTextFieldEx courseClassName;
    private javax.swing.JLabel courseClassNameLabel;
    private javax.swing.JTable courseClasses;
    private javax.swing.JComboBox courseintegration;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private javax.swing.JButton integration;
    private javax.swing.JLabel integrationlbl;
    private javax.swing.JButton renewButton;
    private javax.swing.JScrollPane technicClassesScrollPane;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * コース分類マスタ登録画面用FocusTraversalPolicy
	 */
	private	MstCourseClassFocusTraversalPolicy	ftp	=
			new MstCourseClassFocusTraversalPolicy();
	
	/**
	 * コース分類マスタ登録画面用FocusTraversalPolicyを取得する。
	 * @return コース分類マスタ登録画面用FocusTraversalPolicy
	 */
	public MstCourseClassFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(addButton);
		SystemInfo.addMouseCursorChange(renewButton);
		SystemInfo.addMouseCursorChange(deleteButton);
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
		courseClassName.addKeyListener(SystemInfo.getMoveNextField());
		courseClassName.addFocusListener(SystemInfo.getSelectText());
		courseClassContractedName.addKeyListener(SystemInfo.getMoveNextField());
		courseClassContractedName.addFocusListener(SystemInfo.getSelectText());
		displaySeq.addKeyListener(SystemInfo.getMoveNextField());
		displaySeq.addFocusListener(SystemInfo.getSelectText());
               // IVS_LeTheHieu Start add 20140709 GB_MASHU_コース分類登録
                business.addKeyListener(SystemInfo.getMoveNextField());
                business.addFocusListener(SystemInfo.getSelectText());
                courseintegration.addKeyListener(SystemInfo.getMoveNextField());
                courseintegration.addFocusListener(SystemInfo.getSelectText());
                // IVS_LeTheHieu End add 20140709 GB_MASHU_コース分類登録
	}
	
        // IVS_LeTheHieu Start add 20140709 GB_MASHU_コース分類登録
        /**
         * 業態を初期化する。
         * @param  None
         * @return None
         * @author IVS_LeTheHieu
         * @since  20140703
         */
        private void initBusiness() {

            business.removeAllItems();
            business.addItem(null);
            
            SimpleMaster sb = new SimpleMaster(
                    "",
                    "mst_shop_category",
                    "shop_category_id",
                    "shop_class_name", 0);

            sb.loadData();
  
            for (MstData md : sb) {
                business.addItem(md);
            }

            business.setSelectedIndex(0);
        }
        
        /**
         * コース統合を初期化する。
         * @param  None
         * @return None
         * @author IVS_LeTheHieu
         * @since  20140703
         */
        private void initCourseIntegration() {

            courseintegration.removeAllItems();
            courseintegration.addItem(null);
            
            SimpleMaster sc = new SimpleMaster(
                    "",
                    "mst_course_integration",
                    "course_integration_id",
                    "course_integration_name", 0);

            sc.loadData();
  
            for (MstData mci : sc) {
                courseintegration.addItem(mci);
            }

            courseintegration.setSelectedIndex(0);
        }
        // IVS_LeTheHieu End add 20140709 GB_MASHU_コース分類登録
        
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			mccs.load(con);
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
                // IVS_LeTheHieu Start add 20140709 GB_MASHU_コース分類登録
                useShopCategory = SystemInfo.getCurrentShop().getUseShopCategory();
                shopId = SystemInfo.getCurrentShop().getShopID();
                if (shopId.equals(0)){
                    business.setVisible(true);
                    business.removeAllItems();
                    business.addItem(null);
                    // load business data
                    this.initBusiness();
                } else{
                    if (useShopCategory.equals(1)){
                        business.setVisible(true);
                        business.removeAllItems();
                        business.addItem(null);
                        // load business data
                        this.initBusiness();
                    }
                    else{
                        courseClasses.getColumnModel().getColumn(4).setMinWidth(0);
                        courseClasses.getColumnModel().getColumn(4).setMaxWidth(0);
                        courseClasses.getColumnModel().getColumn(4).setPreferredWidth(0);
                        businesslbl.setVisible(false);
                        business.removeAllItems();
                        business.setVisible(false);
                    }
                }
                
                this.initCourseIntegration();
                // IVS_LeTheHieu End add 20140709 GB_MASHU_コース分類登録
                
		this.showData();
	}
	
	/**
	 * 再表示を行う。
	 */
	private void refresh()
	{
		//データベースからデータを読み込む
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			mccs.load(con);
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		//テーブルに商品区分マスタデータを表示する
		this.showData();
		//入力をクリアする
		this.clear();
		
		courseClassName.requestFocusInWindow();
	}
	
	/**
	 * 入力項目をクリアする。
	 */
	private void clear()
	{
		selIndex	=	-1;
		courseClassName.setText("");
		courseClassContractedName.setText("");
		displaySeq.setText("");
                // IVS_LeTheHieu Start add 20140709 GB_MASHU_コース分類登録
                courseintegration.setSelectedIndex(0);
                if (shopId.equals(0)){
                   business.setSelectedIndex(0);
                } else{
                    if (useShopCategory.equals(1)){
                        business.setSelectedIndex(0);
                    }
                }
                // IVS_LeTheHieu End add 20140709 GB_MASHU_コース分類登録
		if(0 < courseClasses.getRowCount())
				courseClasses.removeRowSelectionInterval(0, courseClasses.getRowCount() - 1);
		
		this.changeCurrentData();
	}
	
	
	/**
	 * データを表示する。
	 */
	private void showData()
	{
		DefaultTableModel	model	=	(DefaultTableModel)courseClasses.getModel();
		
		//全行削除
		model.setRowCount(0);
		courseClasses.removeAll();
		
		for(MstCourseClass mtc : mccs)
		{
			Object[] rowData = {
                            mtc.getCourseClassName(),
                            mtc.getCourseClassContractedName(),
                            mtc.getDisplaySeq(),
                            // IVS_LeTheHieu Start add 20140709 GB_MASHU_コース分類登録
                            mtc.getCourseintegration(),
                            mtc.getBusiness()
                            // IVS_LeTheHieu End add 20140709 GB_MASHU_コース分類登録
                        };
			model.addRow(rowData);
		}
	}
	
	/**
	 * 選択データが変更されたときの処理を行う。
	 */
	private void changeCurrentData()
	{
		int	index	=	courseClasses.getSelectedRow();
		
		if(0 <= index && index < mccs.size() && index != selIndex)
		{
			selIndex	=	index;
			//選択されているデータを表示
			this.showCurrentData();
		}
		
		renewButton.setEnabled(0 <= selIndex);
		deleteButton.setEnabled(0 <= selIndex);
	}
	
	/**
	 * 選択されたデータを入力項目に表示する。
	 */
	private void showCurrentData()
	{
		courseClassName.setText(mccs.get(selIndex).getCourseClassName());
		courseClassContractedName.setText( mccs.get( selIndex ).getCourseClassContractedName() );
		displaySeq.setText(mccs.get(selIndex).getDisplaySeq().toString());
                // IVS_LeTheHieu Start add 20140709 GB_MASHU_コース分類登録
                courseintegration.setSelectedIndex(0);
                courseintegration.setSelectedItem(mccs.get(selIndex).getCourseintegration());
                
               if (shopId.equals(0)){
                   business.setSelectedIndex(0);
                   business.setSelectedItem(mccs.get(selIndex).getBusiness());
                } else{
                    if (useShopCategory.equals(1)){
                        business.setSelectedIndex(0);
                        business.setSelectedItem(mccs.get(selIndex).getBusiness());
                    }
                }
                // IVS_LeTheHieu End add 20140709 GB_MASHU_コース分類登録
	}
	
	
	/**
	 * 入力チェックを行う。
	 * @return 入力エラーがなければtrueを返す。
	 */
	private boolean checkInput()
	{
		//コース分類区分名
		if(courseClassName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "コース分類名"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			courseClassName.requestFocusInWindow();
			return	false;
		}
		if( ( !CheckUtil.checkStringLength( courseClassName.getText(), 20 ) ) )
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(1201, "コース分類名", "20文字"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			courseClassContractedName.requestFocusInWindow();
			return	false;
		}
		
		//コース分類略称
		if(courseClassContractedName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "コース分類略称"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			courseClassContractedName.requestFocusInWindow();
			return	false;
		}
		if( ( !CheckUtil.checkStringLength( courseClassContractedName.getText(), 5 ) )||!CheckUtil.is1ByteChars( courseClassContractedName.getText() ) )
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(1201, "コース分類略称", "半角5文字"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			courseClassContractedName.requestFocusInWindow();
			return	false;
		}
		
		//表示順
		if(displaySeq.getText().equals("0"))
		{
			MessageDialog.showMessageDialog(this,
					"挿入位置は 1 以上を指定してください。",
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			displaySeq.requestFocusInWindow();
			return	false;
		}
                
		return	true;
	}
	
	
	/**
	 * 入力されたデータを登録する。
	 * @param isAdd true - 追加処理
	 * @return true - 成功
	 */
	private boolean regist(boolean isAdd)
	{
		boolean		result	=	false;
		MstCourseClass	mcc	=	new MstCourseClass();
		
		if(!isAdd && 0 <= selIndex)
		{
			mcc.setData(mccs.get(selIndex));
		}
		
		mcc.setCourseClassName(courseClassName.getText());
		mcc.setCourseClassContractedName( courseClassContractedName.getText() );
		mcc.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText())));
		
                // IVS_LeTheHieu Start add 20140709 GB_MASHU_コース分類登録
                mcc.setBusiness((MstData)business.getSelectedItem());
                mcc.setCourseintegration((MstData)courseintegration.getSelectedItem());
                mcc.setMstShop(SystemInfo.getCurrentShop());
                // IVS_LeTheHieu End add 20140709 GB_MASHU_コース分類登録
                
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		try
		{
			con.begin();
			
			if(mcc.regist(con, (0 < selIndex ? mccs.get(selIndex).getDisplaySeq() : -1)))
			{
				con.commit();
				this.refresh();
				result	=	true;
                //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
                isLoadDisplay = true;
                //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
			}
			else
			{
				con.rollback();
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	result;
	}
	
	
	/**
	 * 選択されたデータを削除する。
	 * @return true - 成功
	 */
	private boolean delete()
	{
		boolean		result	=	false;
		MstCourseClass	mcc	=	null;
		
		if(0 <= selIndex && selIndex < mccs.size())
		{
			mcc	=	mccs.get(selIndex);
		}
		
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		try
		{
			con.begin();
			
			if(mcc.delete(con))
			{
				con.commit();
				this.refresh();
				result	=	true;
                //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
                isLoadDisplay = true;
                //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
			}
			else
			{
				con.rollback();
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	result;
	}
	
	/**
	 * 選択された分類に商品登録がされているか。
	 * @return true - 成功
	 */
	private boolean checkDelete()
	{
		boolean		result	=	false;
		MstCourseClass	mcc	=	null;
		
		if(0 <= selIndex && selIndex < mccs.size())
		{
			mcc	=	mccs.get(selIndex);
		}
		
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		try
		{
			
			mcc.loadCourse(con);
			if(mcc.size() == 0){
				result = true;
			}
			
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	result;
	}
	
	/**
	 * コース分類マスタ登録画面用FocusTraversalPolicy
	 */
	private class MstCourseClassFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(courseClassName))
			{
				return displaySeq;
			}
			else if (aComponent.equals(displaySeq))
			{
				return displaySeq;
			}
			
			return courseClassName;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(courseClassName))
			{
				return courseClassName;
			}
			else if (aComponent.equals(displaySeq))
			{
				return courseClassName;
			}
			
			return courseClassName;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return courseClassName;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return displaySeq;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return courseClassName;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return courseClassName;
		}
	}
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		courseClasses.getColumnModel().getColumn(0).setPreferredWidth(240);
		//courseClasses.getColumnModel().getColumn(1).setPreferredWidth(100);
                //courseClasses.getColumnModel().getColumn(2).setPreferredWidth(100);
                //courseClasses.getColumnModel().getColumn(3).setPreferredWidth(100);
                courseClasses.getColumnModel().getColumn(4).setPreferredWidth(160);
	}
	
	
	/**
	 * 列の表示位置を設定するTableCellRenderer
	 */
	private class TableCellAlignRenderer extends DefaultTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}

		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);
			
			switch(column)
			{
				case 1:
					super.setHorizontalAlignment(SwingConstants.RIGHT);
					break;
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}

			return this;
		}
	}
}
