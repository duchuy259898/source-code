
/*
 * DataMonthMemberPanel.java
 *
 * Created on 2018/03/06, 10:58
 */
package com.geobeck.sosia.pos.hair.basicinfo.product;

import com.geobeck.sosia.pos.basicinfo.SelectSameNoData;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.hair.master.product.*;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.hair.data.member.DataMonthMember;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.search.customer.SearchCustomerDialog;
import java.util.ArrayList;

/**
 * @author lvtu Created on 2018/03/05, 10:58
 */
public class DataMonthMemberPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private ArrayList<MstPlan>          listPlan = new ArrayList<MstPlan>();
    private ArrayList<DataMonthMember>  listMonthMember = new ArrayList<DataMonthMember>();
    private DataMonthMember             dataMonMember = null;
    private MstCustomer                 customer = new MstCustomer();
    private boolean                     flagSearch = false;

    /**
     * Creates new form DataMonthMemberPanel
     */
    public DataMonthMemberPanel() {
        super();
        initComponents();
        addMouseCursorChange();
        this.setSize(900, 670);
        this.setPath("äÓñ{ê›íËÅÑåéâÔàıä«óù");
        this.setTitle("àÍäáèàóù");
        this.setListener();
        if(SystemInfo.getCurrentShop().getShopID() == 0){
            cmbShop.addItem(new MstShop());
        }
        SystemInfo.initGroupShopComponents(cmbShop, 2);
        this.init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectActionGroup = new javax.swing.ButtonGroup();
        renewButton = new javax.swing.JButton();
        shopLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        memo = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)memo.getDocument()).setDocumentFilter(
            new CustomFilter(255));
        memoLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        technicsScrollPane = new javax.swing.JScrollPane();
        dataMemberTable = new javax.swing.JTable();
        joinDateLabel = new javax.swing.JLabel();
        cmbPlan = new javax.swing.JComboBox();
        planLabel = new javax.swing.JLabel();
        stopDateLabel = new javax.swing.JLabel();
        withdrawalDateLabel = new javax.swing.JLabel();
        customerName2 = new com.geobeck.swing.JFormattedTextFieldEx();
        searchCustomerButton = new javax.swing.JButton();
        customerNoLabel = new javax.swing.JLabel();
        customerNo = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)customerNo.getDocument()).setDocumentFilter(
            new CustomFilter(15, CustomFilter.ALPHAMERIC));
        customerNameLable = new javax.swing.JLabel();
        customerName1 = new com.geobeck.swing.JFormattedTextFieldEx();
        selectActionLabel = new javax.swing.JLabel();
        rdoRegist = new javax.swing.JRadioButton();
        rdoSearch = new javax.swing.JRadioButton();
        joinFrom = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        joinTo = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        withdrawalFrom = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        withdrawalTo = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        betweenJoinLabel = new javax.swing.JLabel();
        betweenWithoutLabel = new javax.swing.JLabel();
        stopFrom = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        stopTo = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        betweenStopLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        btnOutputExcel = new javax.swing.JButton();
        cmbShop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        clearButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        checkStop = new javax.swing.JCheckBox();
        checkWithdrawal = new javax.swing.JCheckBox();
        checkCharge = new javax.swing.JCheckBox();

        setFocusCycleRoot(true);
        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });
        setLayout(null);

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });
        add(renewButton);
        renewButton.setBounds(618, 190, 92, 25);

        shopLabel.setText("ì¸âÔìXï‹");
        add(shopLabel);
        shopLabel.setBounds(10, 40, 64, 24);

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        add(deleteButton);
        deleteButton.setBounds(720, 190, 92, 25);

        memo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        memo.setColumns(30);
        memo.setInputKanji(true);
        add(memo);
        memo.setBounds(444, 71, 253, 24);

        memoLabel.setText("ÉÅÉÇ");
        add(memoLabel);
        memoLabel.setBounds(376, 71, 64, 24);

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        add(addButton);
        addButton.setBounds(516, 190, 92, 25);

        technicsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        dataMemberTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ì¸âÔìXï‹", "å⁄ãqNo", "å⁄ãqñº", "ì¸âÔì˙", "å_ñÒÉvÉâÉì", "ÉXÉeÅ[É^ÉX", "ÉÅÉÇ", "í‚é~ì˙", "ëﬁâÔì˙"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataMemberTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        dataMemberTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        dataMemberTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        dataMemberTable.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(dataMemberTable, SystemInfo.getTableHeaderRenderer());
        dataMemberTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(dataMemberTable);
        dataMemberTable.setDefaultRenderer(String.class, new TableCellAlignRenderer());
        dataMemberTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                dataMemberTableMouseReleased(evt);
            }
        });
        dataMemberTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dataMemberTableKeyReleased(evt);
            }
        });
        technicsScrollPane.setViewportView(dataMemberTable);

        add(technicsScrollPane);
        technicsScrollPane.setBounds(10, 227, 820, 440);

        joinDateLabel.setText("ì¸âÔì˙");
        add(joinDateLabel);
        joinDateLabel.setBounds(10, 131, 64, 24);

        cmbPlan.setMaximumRowCount(12);
        cmbPlan.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPlanActionPerformed(evt);
            }
        });
        add(cmbPlan);
        cmbPlan.setBounds(78, 161, 230, 24);

        planLabel.setText("å_ñÒÉvÉâÉì");
        add(planLabel);
        planLabel.setBounds(10, 161, 64, 24);

        stopDateLabel.setText("í‚é~ì˙");
        add(stopDateLabel);
        stopDateLabel.setBounds(376, 101, 64, 24);

        withdrawalDateLabel.setText("ëﬁâÔì˙");
        add(withdrawalDateLabel);
        withdrawalDateLabel.setBounds(376, 131, 64, 24);

        customerName2.setEditable(false);
        customerName2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerName2.setFocusable(false);
        customerName2.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        customerName2.setInputKanji(true);
        add(customerName2);
        customerName2.setBounds(175, 101, 92, 24);

        searchCustomerButton.setIcon(SystemInfo.getImageIcon("/button/search/search_customer_off.jpg"));
        searchCustomerButton.setBorderPainted(false);
        searchCustomerButton.setContentAreaFilled(false);
        searchCustomerButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_customer_on.jpg"));
        searchCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomerButtonActionPerformed(evt);
            }
        });
        add(searchCustomerButton);
        searchCustomerButton.setBounds(175, 70, 92, 25);

        customerNoLabel.setText("å⁄ãqNo.");
        add(customerNoLabel);
        customerNoLabel.setBounds(10, 72, 64, 22);

        customerNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerNo.setColumns(15);
        customerNo.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        customerNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerNoFocusLost(evt);
            }
        });
        add(customerNo);
        customerNo.setBounds(78, 70, 91, 25);

        customerNameLable.setText("å⁄ãqñº");
        add(customerNameLable);
        customerNameLable.setBounds(10, 101, 64, 24);

        customerName1.setEditable(false);
        customerName1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerName1.setFocusable(false);
        customerName1.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        customerName1.setInputKanji(true);
        add(customerName1);
        customerName1.setBounds(78, 101, 91, 24);

        selectActionLabel.setText("èàóùãÊï™");
        add(selectActionLabel);
        selectActionLabel.setBounds(10, 10, 64, 24);

        selectActionGroup.add(rdoRegist);
        rdoRegist.setSelected(true);
        rdoRegist.setText("ìoò^ÅEï“èW");
        rdoRegist.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoRegist.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoRegist.setOpaque(false);
        rdoRegist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoRegistActionPerformed(evt);
            }
        });
        add(rdoRegist);
        rdoRegist.setBounds(78, 10, 81, 24);

        selectActionGroup.add(rdoSearch);
        rdoSearch.setText("åüçı");
        rdoSearch.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoSearch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoSearch.setOpaque(false);
        rdoSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSearchActionPerformed(evt);
            }
        });
        add(rdoSearch);
        rdoSearch.setBounds(165, 10, 59, 24);

        joinFrom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        joinFrom.setForeground(java.awt.Color.white);
        joinFrom.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        joinFrom.setMaximumSize(new java.awt.Dimension(65, 20));
        joinFrom.setMinimumSize(new java.awt.Dimension(65, 20));
        joinFrom.setPreferredSize(new java.awt.Dimension(85, 20));
        add(joinFrom);
        joinFrom.setBounds(78, 131, 93, 24);

        joinTo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        joinTo.setForeground(java.awt.Color.white);
        joinTo.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        joinTo.setMaximumSize(new java.awt.Dimension(65, 20));
        joinTo.setMinimumSize(new java.awt.Dimension(65, 20));
        joinTo.setPreferredSize(new java.awt.Dimension(85, 20));
        add(joinTo);
        joinTo.setBounds(193, 130, 100, 24);

        withdrawalFrom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        withdrawalFrom.setForeground(java.awt.Color.white);
        withdrawalFrom.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        withdrawalFrom.setMaximumSize(new java.awt.Dimension(65, 20));
        withdrawalFrom.setMinimumSize(new java.awt.Dimension(65, 20));
        withdrawalFrom.setPreferredSize(new java.awt.Dimension(85, 20));
        add(withdrawalFrom);
        withdrawalFrom.setBounds(444, 131, 93, 24);

        withdrawalTo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        withdrawalTo.setForeground(java.awt.Color.white);
        withdrawalTo.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        withdrawalTo.setMaximumSize(new java.awt.Dimension(65, 20));
        withdrawalTo.setMinimumSize(new java.awt.Dimension(65, 20));
        withdrawalTo.setPreferredSize(new java.awt.Dimension(85, 20));
        add(withdrawalTo);
        withdrawalTo.setBounds(560, 130, 90, 24);

        betweenJoinLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        betweenJoinLabel.setText("Å`");
        add(betweenJoinLabel);
        betweenJoinLabel.setBounds(170, 130, 24, 24);

        betweenWithoutLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        betweenWithoutLabel.setText("Å`");
        add(betweenWithoutLabel);
        betweenWithoutLabel.setBounds(534, 130, 30, 24);

        stopFrom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        stopFrom.setForeground(java.awt.Color.white);
        stopFrom.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        stopFrom.setMaximumSize(new java.awt.Dimension(65, 20));
        stopFrom.setMinimumSize(new java.awt.Dimension(65, 20));
        stopFrom.setPreferredSize(new java.awt.Dimension(85, 20));
        add(stopFrom);
        stopFrom.setBounds(444, 101, 93, 24);

        stopTo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        stopTo.setForeground(java.awt.Color.white);
        stopTo.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        stopTo.setMaximumSize(new java.awt.Dimension(65, 20));
        stopTo.setMinimumSize(new java.awt.Dimension(65, 20));
        stopTo.setPreferredSize(new java.awt.Dimension(85, 20));
        add(stopTo);
        stopTo.setBounds(560, 100, 90, 24);

        betweenStopLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        betweenStopLabel.setText("Å`");
        add(betweenStopLabel);
        betweenStopLabel.setBounds(534, 100, 30, 24);

        searchButton.setIcon(SystemInfo.getImageIcon("/button/search/search_off.jpg"));
        searchButton.setBorderPainted(false);
        searchButton.setEnabled(false);
        searchButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_on.jpg"));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        add(searchButton);
        searchButton.setBounds(312, 190, 92, 25);

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setEnabled(false);
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputExcelActionPerformed(evt);
            }
        });
        add(btnOutputExcel);
        btnOutputExcel.setBounds(414, 190, 92, 25);

        cmbShop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbShopActionPerformed(evt);
            }
        });
        add(cmbShop);
        cmbShop.setBounds(78, 40, 230, 24);

        clearButton.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg"));
        clearButton.setBorderPainted(false);
        clearButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg"));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        add(clearButton);
        clearButton.setBounds(210, 190, 92, 25);

        statusLabel.setText("ÉXÉeÅ[É^ÉX");
        add(statusLabel);
        statusLabel.setBounds(376, 40, 64, 24);

        checkStop.setText("í‚é~íÜ");
        checkStop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkStop.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkStop.setOpaque(false);
        checkStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkStopActionPerformed(evt);
            }
        });
        add(checkStop);
        checkStop.setBounds(513, 40, 64, 24);

        checkWithdrawal.setText("ëﬁâÔ");
        checkWithdrawal.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkWithdrawal.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkWithdrawal.setOpaque(false);
        checkWithdrawal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkWithdrawalActionPerformed(evt);
            }
        });
        add(checkWithdrawal);
        checkWithdrawal.setBounds(582, 40, 64, 24);

        checkCharge.setText("â€ã‡íÜ");
        checkCharge.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkCharge.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkCharge.setOpaque(false);
        checkCharge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkChargeActionPerformed(evt);
            }
        });
        add(checkCharge);
        checkCharge.setBounds(444, 40, 64, 24);
    }// </editor-fold>//GEN-END:initComponents

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
            if (this.delete()) {
                this.refresh();
            }
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
            if (this.checkInput(false)) {
                if (this.regist(false)) {
                    this.refresh();
                } else {
                    MessageDialog.showMessageDialog(
                            this,
                            MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "åéâÔàıìoò^"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }
            }
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
            if (this.checkInput(true)) {
                if (this.regist(true)) {
                    this.refresh();
                } else {
                    MessageDialog.showMessageDialog(
                            this,
                            MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "åéâÔàıìoò^"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }
            }
	}//GEN-LAST:event_addButtonActionPerformed

	private void dataMemberTableMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_dataMemberTableMouseReleased
	{//GEN-HEADEREND:event_dataMemberTableMouseReleased
            this.changeCurrentData();
	}//GEN-LAST:event_dataMemberTableMouseReleased

	private void dataMemberTableKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_dataMemberTableKeyReleased
	{//GEN-HEADEREND:event_dataMemberTableKeyReleased
            this.changeCurrentData();
	}//GEN-LAST:event_dataMemberTableKeyReleased

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged

    }//GEN-LAST:event_formHierarchyChanged

    private void cmbPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPlanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPlanActionPerformed

    private void searchCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerButtonActionPerformed
        SystemInfo.getLogger().log(Level.INFO, "å⁄ãqåüçı");
        SearchCustomerDialog sc = new SearchCustomerDialog(parentFrame, true);
        sc.setVisible(true);

        if (sc.getSelectedCustomer() != null
                && !sc.getSelectedCustomer().getCustomerID().equals("")) {
            customerNo.setText(sc.getSelectedCustomer().getCustomerNo());
            this.customer = sc.getSelectedCustomer();
            customerName1.setText(sc.getSelectedCustomer().getCustomerName(0));
            customerName2.setText(sc.getSelectedCustomer().getCustomerName(1));
        }
        sc.dispose();
        sc = null;
    }//GEN-LAST:event_searchCustomerButtonActionPerformed

    private void customerNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerNoFocusLost
        this.setCustomer();
    }//GEN-LAST:event_customerNoFocusLost

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        if(customerNo.getText().trim().equals("") || isExistsCustomer()) {
            dataMonMember = new DataMonthMember();
            this.flagSearch = true;
            this.setDataSearch();
            this.refresh();
            if(dataMemberTable.getRowCount() == 0) {
                MessageDialog.showMessageDialog(this,
                                    MessageUtil.getMessage(1112),
                                    this.getTitle(),
                                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputExcelActionPerformed
        btnOutputExcel.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            this.exportExcel();
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnOutputExcelActionPerformed

    private void cmbShopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbShopActionPerformed
        if(0 <= cmbShop.getSelectedIndex()) {
            MstShop shop = (MstShop)cmbShop.getSelectedItem();
            if(shop.getShopID() != null) {
                this.getListPlanByShop(shop);
            }
        }
    }//GEN-LAST:event_cmbShopActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        if (rdoSearch.isSelected()) {
            this.listMonthMember.clear();
            SwingUtil.clearTable(dataMemberTable);
        }
        this.clear();
        customerNo.requestFocusInWindow();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void rdoRegistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoRegistActionPerformed
        this.dataMonMember = null;
        this.refresh();
        changeButtonEnabled(Boolean.FALSE);
    }//GEN-LAST:event_rdoRegistActionPerformed

    private void rdoSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSearchActionPerformed
        this.refresh();
        changeButtonEnabled(Boolean.FALSE);
    }//GEN-LAST:event_rdoSearchActionPerformed

    private void checkChargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkChargeActionPerformed
        changeStatus(evt);
    }//GEN-LAST:event_checkChargeActionPerformed

    private void checkStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkStopActionPerformed
        changeStatus(evt);
    }//GEN-LAST:event_checkStopActionPerformed

    private void checkWithdrawalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkWithdrawalActionPerformed
        changeStatus(evt);
    }//GEN-LAST:event_checkWithdrawalActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel betweenJoinLabel;
    private javax.swing.JLabel betweenStopLabel;
    private javax.swing.JLabel betweenWithoutLabel;
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JCheckBox checkCharge;
    private javax.swing.JCheckBox checkStop;
    private javax.swing.JCheckBox checkWithdrawal;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox cmbPlan;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cmbShop;
    private com.geobeck.swing.JFormattedTextFieldEx customerName1;
    private com.geobeck.swing.JFormattedTextFieldEx customerName2;
    private javax.swing.JLabel customerNameLable;
    private com.geobeck.swing.JFormattedTextFieldEx customerNo;
    private javax.swing.JLabel customerNoLabel;
    private javax.swing.JTable dataMemberTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel joinDateLabel;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo joinFrom;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo joinTo;
    private com.geobeck.swing.JFormattedTextFieldEx memo;
    private javax.swing.JLabel memoLabel;
    private javax.swing.JLabel planLabel;
    private javax.swing.JRadioButton rdoRegist;
    private javax.swing.JRadioButton rdoSearch;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchCustomerButton;
    private javax.swing.ButtonGroup selectActionGroup;
    private javax.swing.JLabel selectActionLabel;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel stopDateLabel;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo stopFrom;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo stopTo;
    private javax.swing.JScrollPane technicsScrollPane;
    private javax.swing.JLabel withdrawalDateLabel;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo withdrawalFrom;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo withdrawalTo;
    // End of variables declaration//GEN-END:variables

    /**
     * åéâÔàıìoò^âÊñ ópFocusTraversalPolicy
     */
    private DataMonthMemberFocusTraversalPolicy ftp
            = new DataMonthMemberFocusTraversalPolicy();

    /**
     * åéâÔàıìoò^âÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
     *
     * @return åéâÔàıìoò^âÊñ ópFocusTraversalPolicy
     */
    public DataMonthMemberFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    /**
     * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(searchCustomerButton);
        SystemInfo.addMouseCursorChange(clearButton);
        SystemInfo.addMouseCursorChange(searchButton);
        SystemInfo.addMouseCursorChange(btnOutputExcel);
        SystemInfo.addMouseCursorChange(addButton);
        SystemInfo.addMouseCursorChange(renewButton);
        SystemInfo.addMouseCursorChange(deleteButton);

    }

    /**
     * ÉRÉìÉ|Å[ÉlÉìÉgÇÃäeÉäÉXÉiÅ[ÇÉZÉbÉgÇ∑ÇÈÅB
     */
    private void setListener() {
        customerNo.addKeyListener(SystemInfo.getMoveNextField());
        customerNo.addFocusListener(SystemInfo.getSelectText());
        joinFrom.addKeyListener(SystemInfo.getMoveNextField());
        joinFrom.addFocusListener(SystemInfo.getSelectText());
        joinTo.addKeyListener(SystemInfo.getMoveNextField());
        joinTo.addFocusListener(SystemInfo.getSelectText());
        stopFrom.addKeyListener(SystemInfo.getMoveNextField());
        stopFrom.addFocusListener(SystemInfo.getSelectText());
        stopTo.addKeyListener(SystemInfo.getMoveNextField());
        stopTo.addFocusListener(SystemInfo.getSelectText());
        withdrawalFrom.addKeyListener(SystemInfo.getMoveNextField());
        withdrawalFrom.addFocusListener(SystemInfo.getSelectText());
        withdrawalTo.addKeyListener(SystemInfo.getMoveNextField());
        withdrawalTo.addFocusListener(SystemInfo.getSelectText());
        memo.addKeyListener(SystemInfo.getMoveNextField());
        memo.addFocusListener(SystemInfo.getSelectText());
    }

    /**
     * èâä˙âªèàóùÇçsÇ§ÅB
     */
    private void init() {
        this.refresh();
    }

    /**
     * çƒï\é¶ÇçsÇ§ÅB
     */
    private void refresh() {
        try {
            this.listMonthMember.clear();
            ConnectionWrapper con = SystemInfo.getConnection();

            if (dataMonMember == null) {
                dataMonMember = new DataMonthMember();
            }
            if (cmbShop.getItemCount() > 0 && SystemInfo.getCurrentShop().getShopID() != 0) {
                dataMonMember.setmShop((MstShop)cmbShop.getSelectedItem());
            }
            this.listMonthMember = dataMonMember.load(con);
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        //ÉeÅ[ÉuÉãÇ…è§ïiÉ}ÉXÉ^ÉfÅ[É^Çï\é¶Ç∑ÇÈ
        this.showData();
        //ì¸óÕÇÉNÉäÉAÇ∑ÇÈ
        if(this.flagSearch) {
            this.flagSearch = false;
            return;
        }
        this.clear();

        customerNo.requestFocusInWindow();
    }

    /**
     * ì¸óÕçÄñ⁄ÇÉNÉäÉAÇ∑ÇÈÅB
     */
    private void clear() {
        if (cmbShop.getItemCount() > 0) {
            cmbShop.setSelectedIndex(0);
        }
        if (cmbPlan.getItemCount() > 0) {
            cmbPlan.setSelectedIndex(0);
        }
        customer = new MstCustomer();
        customerNo.setText("");
        customerName1.setText("");
        customerName2.setText("");
        joinFrom.setDate((java.util.Date) null);
        joinTo.setDate((java.util.Date) null);
        stopFrom.setDate((java.util.Date) null);
        stopTo.setDate((java.util.Date) null);
        withdrawalFrom.setDate((java.util.Date) null);
        withdrawalTo.setDate((java.util.Date) null);
        checkCharge.setSelected(Boolean.FALSE);
        checkStop.setSelected(Boolean.FALSE);
        checkWithdrawal.setSelected(Boolean.FALSE);
        memo.setText("");

        if (0 < dataMemberTable.getRowCount()) {
            dataMemberTable.removeRowSelectionInterval(0, dataMemberTable.getRowCount() - 1);
        }

        this.changeCurrentData();

    }

    /**
     * ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
     */
    private void showData() {
        SwingUtil.clearTable(dataMemberTable);
        DefaultTableModel model = (DefaultTableModel) dataMemberTable.getModel();

        for (DataMonthMember item : this.listMonthMember) {
            Object[] rowData = {
                item,
                item.getmCustomer().getCustomerNo(),
                item.getmCustomer().getFullCustomerName(),
                DateUtil.format(item.getJoinDate(), "yyyy/MM/dd"),
                item.getmPlan().getPlanName(),
                Status.getStatusByCode(item.getStatus()).getText(),
                item.getMemo(),
                (item.getStopDate() != null) ? DateUtil.format(item.getStopDate(), "yyyy/MM/dd") : "",
                (item.getWithdrawalDate() != null) ? DateUtil.format(item.getWithdrawalDate(), "yyyy/MM/dd") : ""
            };
            model.addRow(rowData);
        }
    }

    /**
     * ëIëÉfÅ[É^Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
     */
    private void changeCurrentData() {
        int index = dataMemberTable.getSelectedRow();
        
        checkCharge.setSelected(Boolean.FALSE);
        checkStop.setSelected(Boolean.FALSE);
        checkWithdrawal.setSelected(Boolean.FALSE);
        if (rdoRegist.isSelected()) {
            joinTo.setVisible(Boolean.FALSE);
            stopFrom.setEnabled(Boolean.FALSE);
            stopTo.setVisible(Boolean.FALSE);
            withdrawalFrom.setEnabled(Boolean.FALSE);
            withdrawalTo.setVisible(Boolean.FALSE);
            betweenJoinLabel.setVisible(Boolean.FALSE);
            betweenStopLabel.setVisible(Boolean.FALSE);
            betweenWithoutLabel.setVisible(Boolean.FALSE);
        } else if (rdoSearch.isSelected()) {
            joinTo.setVisible(Boolean.TRUE);
            stopFrom.setEnabled(Boolean.TRUE);
            stopTo.setVisible(Boolean.TRUE);
            betweenJoinLabel.setVisible(Boolean.TRUE);
            betweenStopLabel.setVisible(Boolean.TRUE);
            betweenWithoutLabel.setVisible(Boolean.TRUE);
            withdrawalFrom.setEnabled(Boolean.TRUE);
            withdrawalTo.setVisible(Boolean.TRUE);
        }

        if (0 <= index && index < listMonthMember.size()) {
            //ëIëÇ≥ÇÍÇƒÇ¢ÇÈÉfÅ[É^Çï\é¶
            this.showCurrentData();
        }

        this.changeButtonEnabled(0 <= index);
        this.changeCheckBoxEnabled(0 <= index);
    }

    /**
     * ëIëÇ≥ÇÍÇΩÉfÅ[É^Çì¸óÕçÄñ⁄Ç…ï\é¶Ç∑ÇÈÅB
     */
    private void showCurrentData() {
        int index = dataMemberTable.getSelectedRow();
        DataMonthMember datamm = listMonthMember.get(index);

        cmbShop.setSelectedIndex(0);
        this.setSelectedShopID(datamm.getmShop().getShopID());
        cmbPlan.setSelectedIndex(0);
        this.setSelectedPlanID(datamm.getmPlan().getPlanId());
        this.customer = datamm.getmCustomer();
        this.customerNo.setText(this.customer.getCustomerNo());
        this.customerName1.setText(this.customer.getCustomerName(0));
        this.customerName2.setText(this.customer.getCustomerName(1));
        memo.setText(datamm.getMemo());
        if (datamm.getStatus().equals(Status.CHARGE.getCode())) {
            checkCharge.setSelected(Boolean.TRUE);
        } else if (datamm.getStatus().equals(Status.STOP.getCode())) {
            checkStop.setSelected(Boolean.TRUE);
            stopFrom.setEnabled(Boolean.TRUE);
        } else if (datamm.getStatus().equals(Status.WITHDRAWL.getCode())) {
            checkWithdrawal.setSelected(Boolean.TRUE);
            withdrawalFrom.setEnabled(Boolean.TRUE);
        }
        joinFrom.setDate(datamm.getJoinDate());
        stopFrom.setDate(datamm.getStopDate());
        withdrawalFrom.setDate(datamm.getWithdrawalDate());

    }

    /**
     * É{É^ÉìÇÃEnabledÇïœçXÇ∑ÇÈÅB
     *
     * @param enabled Enabled
     */
    private void changeButtonEnabled(boolean enabled) {
        if (rdoRegist.isSelected()) {
            searchButton.setEnabled(Boolean.FALSE);
            btnOutputExcel.setEnabled(Boolean.FALSE);
            addButton.setEnabled(!enabled);
        } else if (rdoSearch.isSelected()) {
            searchButton.setEnabled(Boolean.TRUE);
            btnOutputExcel.setEnabled(Boolean.TRUE);
            addButton.setEnabled(Boolean.FALSE);
        }
        renewButton.setEnabled(enabled);
        deleteButton.setEnabled(enabled);
    }
    
    /**
     * É{É^ÉìÇÃEnabledÇïœçXÇ∑ÇÈÅB
     *
     * @param enabled Enabled
     */
    private void changeCheckBoxEnabled(boolean enabled) {
        if (rdoRegist.isSelected()) {
            checkStop.setEnabled(enabled);
            checkWithdrawal.setEnabled(enabled);
        } else if (rdoSearch.isSelected()) {
            checkStop.setEnabled(Boolean.TRUE);
            checkWithdrawal.setEnabled(Boolean.TRUE);
        }
    }
    
    /**
     * ÉXÉeÅ[É^ÉX
     */
    private void changeStatus(java.awt.event.ActionEvent evt) {
        final int index = dataMemberTable.getSelectedRow();
        if(rdoRegist.isSelected()) {
            stopFrom.setEnabled(Boolean.FALSE);
            withdrawalFrom.setEnabled(Boolean.FALSE);
            stopFrom.setDate((Date) null);
            withdrawalFrom.setDate((Date) null);
            if(evt.getSource().equals(checkCharge) && checkCharge.isSelected()) {
                checkStop.setSelected(Boolean.FALSE);
                checkWithdrawal.setSelected(Boolean.FALSE);
            }else if(evt.getSource().equals(checkStop) && checkStop.isSelected()) {
                checkCharge.setSelected(Boolean.FALSE);
                checkWithdrawal.setSelected(Boolean.FALSE);
                if(0 <= index) {
                    DataMonthMember datamm = listMonthMember.get(index);
                    stopFrom.setEnabled(Boolean.TRUE);
                    stopFrom.setDate(datamm.getStopDate());
                }
            }else if(evt.getSource().equals(checkWithdrawal) && checkWithdrawal.isSelected()) {
                withdrawalFrom.setEnabled(Boolean.TRUE);
                checkCharge.setSelected(Boolean.FALSE);
                checkStop.setSelected(Boolean.FALSE);
                if(0 <= index) {
                    DataMonthMember datamm = listMonthMember.get(index);
                    withdrawalFrom.setDate(datamm.getWithdrawalDate());
                }
            }
        }
    }

    /**
     * ì¸óÕÉ`ÉFÉbÉNÇçsÇ§ÅB
     *
     * @return ì¸óÕÉGÉâÅ[Ç™Ç»ÇØÇÍÇŒtrueÇï‘Ç∑ÅB
     */
    private boolean checkInput(boolean isAdd) {
        //ì¸âÔìXï‹
        if (cmbShop.getSelectedIndex() < 0 
                ||((MstShop)cmbShop.getSelectedItem()).getShopID() == null) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ì¸âÔìXï‹"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbShop.requestFocusInWindow();
            return false;
        }
        //å⁄ãqNo.
        if (customerNo.getText().equals("")) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "å⁄ãqNo."),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            customerNo.requestFocusInWindow();
            return false;
        }
        // check exists customer
        if(!isExistsCustomer()) {
            return false;
        }
        //ì¸âÔì˙
        if (joinFrom.getDate() == null) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ì¸âÔì˙"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            joinFrom.requestFocusInWindow();
            return false;
        }
        //å_ñÒÉvÉâÉì
        if (cmbPlan.getSelectedIndex() <= 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "å_ñÒÉvÉâÉì"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbPlan.requestFocusInWindow();
            return false;
        }
        //ÉXÉeÅ[É^ÉX
        if(!(checkCharge.isSelected() || checkStop.isSelected() || checkWithdrawal.isSelected())) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ÉXÉeÅ[É^ÉX"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            checkCharge.requestFocusInWindow();
            return false;
        }
        //í‚é~ì˙
        if(isAdd && checkStop.isSelected()) {
            MessageDialog.showMessageDialog(this,
                    "í‚é~ì˙ÇÕçXêVéûÇÃÇ›óLå¯Ç≈Ç∑ÅB",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            checkStop.requestFocusInWindow();
            return false;
        }
        
        if(!isAdd && checkStop.isSelected()) {
            if (stopFrom.getDate() == null) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "í‚é~ì˙"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                stopFrom.requestFocusInWindow();
                return false;
            }
        }
        //ëﬁâÔì˙
        if(checkWithdrawal.isSelected()) {
            if (withdrawalFrom.getDate() == null) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ëﬁâÔì˙"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                withdrawalFrom.requestFocusInWindow();
                return false;
            }
        }

        return true;
    }
    
    /**
     * check exists customer
     * @return 
     */
    private boolean isExistsCustomer() {
        try {
            MstCustomer mc = new MstCustomer();

            if(this.customer != null) {
                mc.setCustomerID(this.customer.getCustomerID());
                mc.setCustomerNo(this.customer.getCustomerNo());
            }
            if (!mc.isExists(SystemInfo.getConnection())) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_NOT_EXIST,
                        "å⁄ãqÉRÅ[Éh" + customerNo.getText()), this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                customerNo.requestFocusInWindow();
                return false;
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            return false;
        }
        return true;
    }

    /**
     * ëIëÇ≥ÇÍÇƒÇ¢ÇÈìXï‹ÇhÇcÇÉZÉbÉgÇ∑ÇÈÅB
     *
     * @param shopID ìXï‹ÇhÇc
     */
    public void setSelectedShopID(Integer shopID) {
        if (shopID == null) {
            return;
        }

        for (int i = 0; i < cmbShop.getItemCount(); i++) {
            MstShop shop = (MstShop) cmbShop.getItemAt(i);
            if (shop != null && shop.getShopID() != null && shop.getShopID().equals(shopID)) {
                cmbShop.setSelectedItem(shop);
                return;
            }
        }
    }

    /**
     * ëIëÇ≥ÇÍÇƒÇ¢ÇÈÉvÉâÉìÇhÇcÇÉZÉbÉgÇ∑ÇÈÅB
     *
     * @param planID ÉvÉâÉìÇhÇc
     */
    public void setSelectedPlanID(Integer planID) {
        if (planID == null) {
            return;
        }

        for (MstPlan item : listPlan) {
            if (planID.equals(item.getPlanId())) {
                cmbPlan.setSelectedItem(item);
                return;
            }
        }
    }

    /**
     * ì¸óÕÇ≥ÇÍÇΩÉfÅ[É^Çìoò^Ç∑ÇÈÅB
     *
     * @param isAdd true - í«â¡èàóù
     * @return true - ê¨å˜
     */
    private boolean regist(boolean isAdd) {
        boolean result = false;
        DataMonthMember datamm = new DataMonthMember();

        if (!isAdd) {
            int index = dataMemberTable.getSelectedRow();
            int col = 0;
            if (index < 0) {
                return false;
            }
            datamm = (DataMonthMember) dataMemberTable.getValueAt(index, col);
            datamm.setData(datamm);
        }
        this.setData(datamm);

        ConnectionWrapper con = SystemInfo.getConnection();

        try {

            con.begin();

            if (datamm.regist(con)) {
                result = true;
            }

            if (result) {
                con.commit();
            } else {
                con.rollback();
            }

        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return result;
    }

    /**
     * åéâÔàıìoò^É}ÉXÉ^ÉfÅ[É^Ç©ÇÁÉfÅ[É^ÇÉZÉbÉgÇ∑ÇÈÅB
     *
     * @param mt åéâÔàıìoò^É}ÉXÉ^ÉfÅ[É^
     */
    private void setData(DataMonthMember data) {
        data.setmShop((MstShop) cmbShop.getSelectedItem());
        data.setmCustomer(this.customer);
        data.setmPlan((MstPlan) cmbPlan.getSelectedItem());
        data.setJoinDate(joinFrom.getDate());
        data.setStopDate(stopFrom.getDate());
        data.setWithdrawalDate(withdrawalFrom.getDate());
        if (checkCharge.isSelected()) {
            data.setStatus(Status.CHARGE.getCode());
        } else if (checkStop.isSelected()) {
            data.setStatus(Status.STOP.getCode());
        } else if (checkWithdrawal.isSelected()) {
            data.setStatus(Status.WITHDRAWL.getCode());
        }
        data.setMemo(memo.getText());

    }

    /**
     * search åéâÔàıìoò^
     *
     * @param mt åéâÔàıìoò^É}ÉXÉ^ÉfÅ[É^
     */
    private void setDataSearch() {
        this.dataMonMember.setmShop((MstShop) cmbShop.getSelectedItem());
        this.dataMonMember.setmCustomer(this.customer);
        this.dataMonMember.setmPlan((MstPlan) cmbPlan.getSelectedItem());
        this.dataMonMember.setJoinDateFrom(joinFrom.getDate());
        this.dataMonMember.setJoinDateTo(joinTo.getDate());
        this.dataMonMember.setStopDateFrom(stopFrom.getDate());
        this.dataMonMember.setStopDateTo(stopTo.getDate());
        this.dataMonMember.setWithdrawalDateFrom(withdrawalFrom.getDate());
        this.dataMonMember.setWithdrawalDateTo(withdrawalTo.getDate());
        String statusList = "";
        if (checkCharge.isSelected()) {
            statusList = String.valueOf(Status.CHARGE.getCode());
        }
        if (checkStop.isSelected()) {
            if (statusList.equals("")) {
                statusList = String.valueOf(Status.STOP.getCode());
            } else {
                statusList = statusList + "," + String.valueOf(Status.STOP.getCode());
            }
        } 
        if (checkWithdrawal.isSelected()) {
            if (statusList.equals("")) {
                statusList = String.valueOf(Status.WITHDRAWL.getCode());
            } else {
                statusList = statusList + "," + String.valueOf(Status.WITHDRAWL.getCode());
            }
        }
        this.dataMonMember.setStatusList(statusList);
        this.dataMonMember.setMemo(memo.getText());

    }

    /**
     * ëIëÇ≥ÇÍÇΩÉfÅ[É^ÇçÌèúÇ∑ÇÈÅB
     *
     * @return true - ê¨å˜
     */
    private boolean delete() {
        int index = dataMemberTable.getSelectedRow();
        int col = 0;
        boolean result = false;
        DataMonthMember datamm = null;

        if (0 <= index && index < listMonthMember.size()) {
            datamm = (DataMonthMember) dataMemberTable.getValueAt(index, col);
        }

        ConnectionWrapper con = SystemInfo.getConnection();

        try {

            con.begin();

            if (datamm.delete(con)) {
                con.commit();
                this.refresh();
                result = true;
            } else {
                con.rollback();
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return result;
    }

    /**
     * å⁄ãqÇÉZÉbÉgÇ∑ÇÈÅB
     */
    private void setCustomer() {

        MstCustomer cus = new MstCustomer();
        boolean isChangedCustomerNo = !customerNo.getText().equals(this.customer.getCustomerNo());
        
        cus.setCustomerNo(customerNo.getText());

        try {
            if(isChangedCustomerNo) {
                cus = SelectSameNoData.getMstCustomerByNo(
                        parentFrame,
                        SystemInfo.getConnection(),
                        this.customerNo.getText(),
                        (SystemInfo.getSetteing().isShareCustomer() ? 0 : ((MstShop) cmbShop.getSelectedItem()).getShopID()));
            }else {
                    cus = new MstCustomer(this.customer.getCustomerID());
                    cus.load(SystemInfo.getConnection());
                }
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        if(!customerNo.getText().equals("")){
            this.customer = cus;
            customerName1.setText(cus.getCustomerName(0));
            customerName2.setText(cus.getCustomerName(1));
        }else {
            this.customer = new MstCustomer();
            customerName1.setText("");
            customerName2.setText("");
        }

    }
    
    /**
     * list plan
     * @param shop 
     */
    private void getListPlanByShop(MstShop shop) {
        try
	{
            ConnectionWrapper	con	=	SystemInfo.getConnection();
            MstPlan mp = new MstPlan();
            this.listPlan = mp.loadByShop(con, shop.getShopID());
            this.listPlan.add(0, new MstPlan());
            con.close();
	}
	catch(SQLException e)
	{
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	}
        cmbPlan.removeAllItems();
        for (MstPlan item : this.listPlan) {
            cmbPlan.addItem(item);
        }
    }

    /**
     * EXCELèoóÕ
     */
    private void exportExcel() {
        if (dataMemberTable.getRowCount() == 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        JExcelApi jx = new JExcelApi("åéâÔàıàÍóó");
        jx.setTemplateFile("/reports/åéâÔàıàÍóó.xls");

        // ÉwÉbÉ_èoóÕ
        //ì¸âÔìXï‹
        jx.setValue(2, 3, (this.dataMonMember.getmShop() != null) ? this.dataMonMember.getmShop().getShopName() : "");
        //å⁄ãqNo.
        jx.setValue(2, 4, this.dataMonMember.getmCustomer() != null ? this.dataMonMember.getmCustomer().getCustomerNo() : "");
        //ì¸âÔì˙
        jx.setValue(2, 5, getBetweenDate(this.dataMonMember.getJoinDateFrom(), this.dataMonMember.getJoinDateTo()));
        //å_ñÒÉvÉâÉì
        jx.setValue(2, 6, this.dataMonMember.getmPlan() != null ? this.dataMonMember.getmPlan().getPlanName() : "");
        //ÉXÉeÅ[É^ÉX
        jx.setValue(5, 3, getSelectedStatus());
        //ÉÅÉÇ
        jx.setValue(5, 4, this.dataMonMember.getMemo());
        //í‚é~ì˙
        jx.setValue(5, 5, getBetweenDate(this.dataMonMember.getStopDateFrom(), this.dataMonMember.getStopDateTo()));
        //ëﬁâÔì˙
        jx.setValue(5, 6, getBetweenDate(this.dataMonMember.getWithdrawalDateFrom(), this.dataMonMember.getWithdrawalDateTo()));

        int outRow = 9;

        // í«â¡çsêîÉZÉbÉg
        jx.insertRow(outRow, dataMemberTable.getRowCount() - 1);

        // ÉfÅ[É^ÉZÉbÉg
        DefaultTableModel model = (DefaultTableModel) dataMemberTable.getModel();
        for (int row = 0; row < dataMemberTable.getRowCount(); row++) {
            for (int col = 0; col < dataMemberTable.getColumnCount(); col++) {
                jx.setValue(col + 1, outRow, model.getValueAt(row, col).toString());
            }
            outRow++;
        }

        jx.openWorkbook();
    }

    private String getBetweenDate(java.util.Date from, java.util.Date to) {
        String strDate = "";

        if (from != null) {
            strDate = DateUtil.format(from, "yyyy/MM/dd");
        }
        if (from != null || to != null) {
            strDate = strDate + "Å`";
        }
        if (to != null) {
            strDate = strDate + DateUtil.format(to, "yyyy/MM/dd");;
        }

        return strDate;
    }

    private String getSelectedStatus() {
        String strStatus = "";
        if (this.dataMonMember.getStatusList().contains(String.valueOf(Status.CHARGE.getCode()))) {
            strStatus = Status.CHARGE.getText();
        }
        if (this.dataMonMember.getStatusList().contains(String.valueOf(Status.STOP.getCode()))) {
            if (strStatus.equals("")) {
                strStatus = Status.STOP.getText();
            } else {
                strStatus = strStatus + "ÅA" + Status.STOP.getText();
            }
        }
        if (this.dataMonMember.getStatusList().contains(String.valueOf(Status.WITHDRAWL.getCode()))) {
            if (strStatus.equals("")) {
                strStatus = Status.WITHDRAWL.getText();
            } else {
                strStatus = strStatus + ", " + Status.WITHDRAWL.getText();
            }
        }
        return strStatus;
    }

    /**
     * åéâÔàıìoò^âÊñ ópFocusTraversalPolicy
     */
    private class DataMonthMemberFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(cmbShop)) {
                return customerNo;
            }else if(aComponent.equals(customerNo)) {
                return joinFrom;
            }else if(aComponent.equals(joinFrom)) {
                if(joinTo.isVisible()) {
                    return joinTo;
                }else {
                    return cmbPlan;
                }
            }else if(aComponent.equals(joinTo)) {
                return cmbPlan;
            }else if(aComponent.equals(cmbPlan)) {
                return checkCharge;
            }else if(aComponent.equals(checkCharge)) {
                return checkStop;
            }else if(aComponent.equals(checkStop)) {
                return checkWithdrawal;
            }else if(aComponent.equals(checkWithdrawal)) {
                return memo;
            }else if(aComponent.equals(memo)) {
                if(stopFrom.isEnabled()) {
                    return stopFrom;
                }else if(withdrawalFrom.isEnabled()) {
                    return withdrawalFrom;
                }
                return cmbShop;
            }else if(aComponent.equals(stopFrom)) {
                if(stopTo.isVisible()) {
                    return stopTo;
                }else if(withdrawalFrom.isEnabled()) {
                    return withdrawalFrom;
                }
                return cmbShop;
            }else if(aComponent.equals(stopTo)) {
                if(withdrawalFrom.isEnabled()) {
                    return withdrawalFrom;
                }
                return cmbShop;
            }else if(aComponent.equals(withdrawalFrom)) {
                if(withdrawalTo.isVisible()) {
                    return withdrawalTo;
                }
                return cmbShop;
            }else if(aComponent.equals(withdrawalTo)) {
                return cmbShop;
            }

            return cmbShop;
        }

        /**
         * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(cmbShop)) {
                return cmbShop;
            }else if(aComponent.equals(customerNo)) {
                return cmbShop;
            }else if(aComponent.equals(joinFrom)) {
                return customerNo;
            }else if(aComponent.equals(joinTo)) {
                return joinFrom;
            }else if(aComponent.equals(cmbPlan)) {
                if(joinTo.isVisible()) {
                    return joinTo;
                }
                return joinFrom;
            }else if(aComponent.equals(checkCharge)) {
                return cmbPlan;
            }else if(aComponent.equals(checkStop)) {
                return checkCharge;
            }else if(aComponent.equals(checkWithdrawal)) {
                return checkStop;
            }else if(aComponent.equals(memo)) {
                return checkWithdrawal;
            }else if(aComponent.equals(stopFrom)) {
                return memo;
            }else if(aComponent.equals(stopTo)) {
                return stopFrom;
            }else if(aComponent.equals(withdrawalFrom)) {
                if(stopTo.isVisible()) {
                    return stopTo;
                }else if(stopFrom.isEditable()) {
                    return stopFrom;
                }
                return memo;
            }else if(aComponent.equals(withdrawalTo)) {
                if(withdrawalFrom.isEditable()) {
                    return withdrawalFrom;
                }else if(stopTo.isVisible()) {
                    return stopTo;
                }else if(stopFrom.isEditable()) {
                    return stopFrom;
                }
                return memo;
            }

            return cmbShop;
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer êÊì™ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getFirstComponent(Container aContainer) {
            return cmbShop;
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer aContainer - ç≈å„ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getLastComponent(Container aContainer) {
            return cmbShop;
        }

        /**
         * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB aContainer
         * ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
         *
         * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getDefaultComponent(Container aContainer) {
            return cmbShop;
        }

        /**
         * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB show() Ç‹ÇΩÇÕ setVisible(true)
         * ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
         * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
         * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
         * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
         * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
         */
        public Component getInitialComponent(Window window) {
            return cmbShop;
        }
    }

    /**
     * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
     */
    private void initTableColumnWidth() {
        //óÒÇÃïùÇê›íËÇ∑ÇÈÅB
        dataMemberTable.getColumnModel().getColumn(0).setPreferredWidth(80);
        dataMemberTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        dataMemberTable.getColumnModel().getColumn(2).setPreferredWidth(80);
        dataMemberTable.getColumnModel().getColumn(3).setPreferredWidth(50);
        dataMemberTable.getColumnModel().getColumn(4).setPreferredWidth(80);
        dataMemberTable.getColumnModel().getColumn(5).setPreferredWidth(50);
        dataMemberTable.getColumnModel().getColumn(6).setPreferredWidth(120);
        dataMemberTable.getColumnModel().getColumn(7).setPreferredWidth(50);
        dataMemberTable.getColumnModel().getColumn(8).setPreferredWidth(50);
    }

    /**
     * óÒÇÃï\é¶à íuÇê›íËÇ∑ÇÈTableCellRenderer
     */
    private class TableCellAlignRenderer extends SelectTableCellRenderer {

        /**
         * Creates a new instance of ReservationTableCellRenderer
         */
        public TableCellAlignRenderer() {
            super();
        }

        /**
         * ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉOÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param table JTable
         * @param value ÉZÉãÇ…äÑÇËìñÇƒÇÈíl
         * @param isSelected ÉZÉãÇ™ëIëÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÇÕ true
         * @param hasFocus ÉtÉHÅ[ÉJÉXÇ™Ç†ÇÈèÍçáÇÕ true
         * @param row çs
         * @param column óÒ
         * @return ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉO
         */
        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value,
                    isSelected, hasFocus, row, column);

            switch (column) {
                case 3:
                case 5:
                case 7:
                case 8:
                    super.setHorizontalAlignment(SwingConstants.CENTER);
                    break;
                default:
                    super.setHorizontalAlignment(SwingConstants.LEFT);
                    break;
            }

            return this;
        }
    }

    public enum Status {

        CHARGE(1, "â€ã‡íÜ"), STOP(2, "í‚é~íÜ"), WITHDRAWL(9, "ëﬁâÔ");

        private int code;
        private String text;

        private Status(int code, String text) {
            this.code = code;
            this.text = text;
        }

        public static Status getStatusByCode(int code) {
            for (Status status : Status.values()) {
                if (status.code == code) {
                    return status;
                }
            }
            return null;
        }

        public int getCode() {
            return code;
        }

        public void setCode(int code) {
            this.code = code;
        }

        public String getText() {
            return text;
        }

        public void setText(String text) {
            this.text = text;
        }
    }
}
