
/*
 * MstCoursePanel.java
 *
 * Created on 2006/10/20, 10:58
 */

package com.geobeck.sosia.pos.hair.basicinfo.product;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.master.product.*;
import com.geobeck.sosia.pos.hair.master.product.*;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.basicinfo.product.*;
import java.awt.event.HierarchyEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 *
 * @author  katagiri
 */
public class MstCoursePanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private MstCourseClasses	mccs		=	new MstCourseClasses();
	private	MstCourseClass		mtc			=	new MstCourseClass();
	private Integer				selIndex	=	-1;

    //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
    private boolean isLoadDisplay= false;
    //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
	
	/** Creates new form MstCoursePanel */
	public MstCoursePanel()
	{
		super();
		initComponents();
		addMouseCursorChange();
		this.setSize(650, 670);
		this.setPath("基本設定 >> 技術マスタ");
		this.setTitle("コース登録");
		this.setListener();
		this.init();
                
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        praiseTimeLimitGroup = new javax.swing.ButtonGroup();
        displaySeqLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        renewButton = new javax.swing.JButton();
        operationTimeLabel = new javax.swing.JLabel();
        operationTime = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)operationTime.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        jLabel1 = new javax.swing.JLabel();
        price = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)price.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        try
        {
            ConnectionWrapper	con	=	SystemInfo.getConnection();

            mccs.load(con);

            con.close();
        }
        catch(SQLException e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        courseClass = new JComboBox(mccs.toArray());
        deleteButton = new javax.swing.JButton();
        courseName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)courseName.getDocument()).setDocumentFilter(
            new CustomFilter(30));
        productNameLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        technicsScrollPane = new javax.swing.JScrollPane();
        courses = new javax.swing.JTable();
        taxOffPrice = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)price.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        priceLabel1 = new javax.swing.JLabel();
        productNameLabel1 = new javax.swing.JLabel();
        productNameLabel2 = new javax.swing.JLabel();
        praiseTimeLimit = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)praiseTimeLimit.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        rdoPraiseTimeLimitEnable = new javax.swing.JRadioButton();
        rdoPraiseTimeLimitDisable = new javax.swing.JRadioButton();
        num = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)num.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        numLabel = new javax.swing.JLabel();
        productNameLabel3 = new javax.swing.JLabel();

        setFocusCycleRoot(true);
        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });

        displaySeqLabel.setText("挿入位置");

        priceLabel.setText("価格（税込）");

        displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        displaySeq.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                displaySeqFocusLost(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        operationTimeLabel.setText("施術時間");

        operationTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        operationTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel1.setText("分類名");

        price.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        price.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        price.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                priceCaretUpdate(evt);
            }
        });

        courseClass.setMaximumRowCount(12);
        courseClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        courseClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseClassActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        courseName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        courseName.setColumns(30);
        courseName.setInputKanji(true);

        productNameLabel.setText("コース名");

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        technicsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        courses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "コース名", "価格(税込)", "消化回数", "施術時間", "有効期限", "有効期限(ヶ月)", "表示順"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Long.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courses.setSelectionBackground(new java.awt.Color(220, 220, 220));
        courses.setSelectionForeground(new java.awt.Color(0, 0, 0));
        courses.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        courses.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(courses, SystemInfo.getTableHeaderRenderer());
        courses.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(courses);
        courses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                coursesMouseReleased(evt);
            }
        });
        courses.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                coursesKeyReleased(evt);
            }
        });
        technicsScrollPane.setViewportView(courses);

        taxOffPrice.setEditable(false);
        taxOffPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        taxOffPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        priceLabel1.setText("価格（税抜）");

        productNameLabel1.setText("有効期限");

        productNameLabel2.setText("有効期限　　　");

        praiseTimeLimit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        praiseTimeLimit.setColumns(15);
        praiseTimeLimit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        praiseTimeLimitGroup.add(rdoPraiseTimeLimitEnable);
        rdoPraiseTimeLimitEnable.setSelected(true);
        rdoPraiseTimeLimitEnable.setText("利用する");
        rdoPraiseTimeLimitEnable.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoPraiseTimeLimitEnable.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoPraiseTimeLimitEnable.setOpaque(false);
        rdoPraiseTimeLimitEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoPraiseTimeLimitEnableActionPerformed(evt);
            }
        });

        praiseTimeLimitGroup.add(rdoPraiseTimeLimitDisable);
        rdoPraiseTimeLimitDisable.setText("利用しない");
        rdoPraiseTimeLimitDisable.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoPraiseTimeLimitDisable.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoPraiseTimeLimitDisable.setOpaque(false);
        rdoPraiseTimeLimitDisable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoPraiseTimeLimitDisableActionPerformed(evt);
            }
        });

        num.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        num.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        num.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                numCaretUpdate(evt);
            }
        });
        num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numActionPerformed(evt);
            }
        });

        numLabel.setText("消化回数");

        productNameLabel3.setText("ヶ月");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(203, 203, 203))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, technicsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(productNameLabel)
                            .add(productNameLabel1))
                        .add(27, 27, 27)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(3, 3, 3)
                                .add(rdoPraiseTimeLimitEnable)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(rdoPraiseTimeLimitDisable)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 412, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, courseName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                            .add(courseClass, 0, 554, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(priceLabel)
                                .add(18, 18, 18)
                                .add(price, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(10, 10, 10)
                                .add(priceLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(taxOffPrice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(42, 42, 42)
                                .add(operationTimeLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(operationTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(displaySeqLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(productNameLabel2)
                                    .add(numLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, num, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, praiseTimeLimit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(productNameLabel3)))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(courseClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(productNameLabel)
                    .add(courseName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rdoPraiseTimeLimitEnable)
                    .add(rdoPraiseTimeLimitDisable)
                    .add(productNameLabel1))
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(praiseTimeLimit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(productNameLabel2)
                    .add(productNameLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(num, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(numLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(priceLabel)
                    .add(price, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(taxOffPrice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(priceLabel1)
                    .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displaySeqLabel)
                    .add(operationTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(operationTimeLabel))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(technicsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 436, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

        /**
         * 選択技術への按分登録
         */
    private void rdoPraiseTimeLimitDisableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoPraiseTimeLimitDisableActionPerformed
        this.praiseTimeLimit.setEnabled(false);
    }//GEN-LAST:event_rdoPraiseTimeLimitDisableActionPerformed

    private void rdoPraiseTimeLimitEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoPraiseTimeLimitEnableActionPerformed
        this.praiseTimeLimit.setEnabled(true);
    }//GEN-LAST:event_rdoPraiseTimeLimitEnableActionPerformed

    private void displaySeqFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_displaySeqFocusLost
                if(! CheckUtil.isNumber(displaySeq.getText()))                                                                               
                        displaySeq.setText("");                                   
    }//GEN-LAST:event_displaySeqFocusLost

	private void priceCaretUpdate(javax.swing.event.CaretEvent evt)//GEN-FIRST:event_priceCaretUpdate
	{//GEN-HEADEREND:event_priceCaretUpdate
		this.showTaxOffPrice();
	}//GEN-LAST:event_priceCaretUpdate

    private void courseClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseClassActionPerformed
	refresh();
        changeTextEditable(true);
    }//GEN-LAST:event_courseClassActionPerformed

    /**
     * 選択技術への按分登録
     */
	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		if(this.delete())
		{
			this.refresh();
		}
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
            if (this.checkInput()) {
                if (this.regist(false)) {
                    this.refresh();
                } else {
                    MessageDialog.showMessageDialog(
                        this,
                        MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "コース"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                }
            }
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
            if (this.checkInput()) {
                if (this.regist(true)) {
                    this.refresh();
                } else {
                    MessageDialog.showMessageDialog(
                        this,
                        MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "コース"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                }
            }
	}//GEN-LAST:event_addButtonActionPerformed

	private void coursesMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_coursesMouseReleased
	{//GEN-HEADEREND:event_coursesMouseReleased
		this.changeCurrentData();
//                this.checkMobileData();
	}//GEN-LAST:event_coursesMouseReleased

	private void coursesKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_coursesKeyReleased
	{//GEN-HEADEREND:event_coursesKeyReleased
		this.changeCurrentData();
//                this.checkMobileData();
	}//GEN-LAST:event_coursesKeyReleased

        private void numCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_numCaretUpdate
            // TODO add your handling code here:
        }//GEN-LAST:event_numCaretUpdate

    private void numActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numActionPerformed

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
       //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す  
        if ((evt.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
            if (!evt.getComponent().isDisplayable() && isLoadDisplay) {
                SystemInfo.MessageDialogGB(this, this.getTitle());
            }
        }
        //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
    }//GEN-LAST:event_formHierarchyChanged
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox courseClass;
    private com.geobeck.swing.JFormattedTextFieldEx courseName;
    private javax.swing.JTable courses;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private javax.swing.JLabel jLabel1;
    private com.geobeck.swing.JFormattedTextFieldEx num;
    private javax.swing.JLabel numLabel;
    private com.geobeck.swing.JFormattedTextFieldEx operationTime;
    private javax.swing.JLabel operationTimeLabel;
    private com.geobeck.swing.JFormattedTextFieldEx praiseTimeLimit;
    private javax.swing.ButtonGroup praiseTimeLimitGroup;
    private com.geobeck.swing.JFormattedTextFieldEx price;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel priceLabel1;
    private javax.swing.JLabel productNameLabel;
    private javax.swing.JLabel productNameLabel1;
    private javax.swing.JLabel productNameLabel2;
    private javax.swing.JLabel productNameLabel3;
    private javax.swing.JRadioButton rdoPraiseTimeLimitDisable;
    private javax.swing.JRadioButton rdoPraiseTimeLimitEnable;
    private javax.swing.JButton renewButton;
    private com.geobeck.swing.JFormattedTextFieldEx taxOffPrice;
    private javax.swing.JScrollPane technicsScrollPane;
    // End of variables declaration//GEN-END:variables

	private String tmpCourseName = "";
    
	/**
	 * コースマスタ登録画面用FocusTraversalPolicy
	 */
	private	MstCourseFocusTraversalPolicy	ftp	=
			new MstCourseFocusTraversalPolicy();
	
	/**
	 * コースマスタ登録画面用FocusTraversalPolicyを取得する。
	 * @return コースマスタ登録画面用FocusTraversalPolicy
	 */
	public MstCourseFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(addButton);
		SystemInfo.addMouseCursorChange(renewButton);
		SystemInfo.addMouseCursorChange(deleteButton);
		
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
		displaySeq.addKeyListener(SystemInfo.getMoveNextField());
		displaySeq.addFocusListener(SystemInfo.getSelectText());
		operationTime.addKeyListener(SystemInfo.getMoveNextField());
		operationTime.addFocusListener(SystemInfo.getSelectText());
		price.addKeyListener(SystemInfo.getMoveNextField());
		price.addFocusListener(SystemInfo.getSelectText());
		courseClass.addKeyListener(SystemInfo.getMoveNextField());
		courseName.addKeyListener(SystemInfo.getMoveNextField());
		courseName.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
		if(0 < mccs.size())
		{
			courseClass.setSelectedIndex(0);
		}
		
		this.refresh();
	}
	
	public boolean checkClassRegisted()
	{
		return	(0 < mccs.size());
	}
	
	
	/**
	 * 再表示を行う。
	 */
	private void refresh()
	{
		if(0 <= courseClass.getSelectedIndex())
		{
			mtc	=	(MstCourseClass)courseClass.getSelectedItem();
			//技術マスタをデータベースから読み込む
			try
			{
				ConnectionWrapper	con	=	SystemInfo.getConnection();

				mtc.loadCourse(con);
			}
			catch(Exception e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		//テーブルに商品マスタデータを表示する
		this.showData();
		//入力をクリアする
		this.clear();
		
		courseName.requestFocusInWindow();
	}
	
	/**
	 * 入力項目をクリアする。
	 */
	private void clear()
	{
		selIndex	=	-1;
                tmpCourseName = "";
		courseName.setText("");
                num.setText("");
		price.setText("");
		operationTime.setText("");
		displaySeq.setText("");
		
		praiseTimeLimit.setText("");
                rdoPraiseTimeLimitEnable.setSelected(true);
		praiseTimeLimit.setEnabled(true);
		if(0 < courses.getRowCount())
				courses.removeRowSelectionInterval(0, courses.getRowCount() - 1);
		
		this.changeCurrentData();
		

	}
	
	
	/**
	 * データを表示する。
	 */
	private void showData()
	{
		SwingUtil.clearTable(courses);
		DefaultTableModel	model	=	(DefaultTableModel)courses.getModel();
		
		for(MstCourse mc : mtc)
		{
			Object[]	rowData	=	{	
										mc.getCourseName(),
										mc.getPrice(),
                                                                                mc.getNum(),
										mc.getOperationTime(),
                                                                                (mc.isPraiseTime() ? "利用する" : "利用しない"),
                                                                                (mc.isPraiseTime() ? mc.getPraiseTimeLimit() : ""),
										mc.getDisplaySeq()
                                                        };
			model.addRow(rowData);
		}
	}
        
// 	/**
//	 * 選択データがモバイル用データの時指定のテキスト入力を不可
//         */
//       private void checkMobileData(){
//               MstCourse	mt	=	mtc.get(selIndex);
//               boolean         isMobileData  = true;
//
//               if(mt.getTechnicNo().length() >= 7 && mt.getTechnicNo().substring(0,7).equals(mt.getMobileTechnicNo()))
//               {
//                             isMobileData=false;
//               }
//                changeTextEditable(isMobileData);
//       }

 	/**
	 * テキストのEnabledを変更する。
	 * @param enabled Enabled
	 */
      private void changeTextEditable(boolean Enabled){
               //technicName.setEditable(Enabled);
               //price.setEditable(Enabled);
       }
       
	/**
	 * 選択データが変更されたときの処理を行う。
	 */
	private void changeCurrentData()
	{
		int	index	=	courses.getSelectedRow();
		
		if(0 <= index && index < mtc.size() && index != selIndex)
		{
			selIndex	=	index;
			//選択されているデータを表示
			this.showCurrentData();
		}
		
		this.changeButtonEnabled(0 <= selIndex);
	}
	
	/**
	 * 選択されたデータを入力項目に表示する。
	 */
	private void showCurrentData()
	{
		MstCourse	mc	=	mtc.get(selIndex);

                tmpCourseName = mc.getCourseName();
		courseName.setText(mc.getCourseName());
                num.setText(mc.getNum().toString());
		price.setText(mc.getPrice().toString());
		operationTime.setText(mc.getOperationTime().toString());
		displaySeq.setText(mc.getDisplaySeq().toString());
		praiseTimeLimit.setText(mc.getPraiseTimeLimit().toString());
                if(mc.isPraiseTime().booleanValue()){
                    this.rdoPraiseTimeLimitEnable.setSelected(true);
                    this.praiseTimeLimit.setEnabled(true);
                }else {
                    this.rdoPraiseTimeLimitDisable.setSelected(true);
                    this.praiseTimeLimit.setEnabled(false);
                    this.praiseTimeLimit.setText("");
                }
		this.showTaxOffPrice();
	}
	
	private void showTaxOffPrice()
	{
		Long	priceValue		=	0l;
		Long	taxOffValue		=	0l;
		Double temptaxOffValue ;
		if(price.getText().replace(",", "").matches("[0-9]+"))
		{
			priceValue	=	Long.parseLong(price.getText().replace(",", ""));
		}
		
		//vtbphuong start edit Request #22169
		//taxOffValue	=	priceValue - SystemInfo.getTax(priceValue, SystemInfo.getSystemDate());
                temptaxOffValue	=	(priceValue / (1 + SystemInfo.getTaxRate(SystemInfo.getSystemDate())));
                BigDecimal a = new BigDecimal(temptaxOffValue);
                a = a.setScale(3, RoundingMode.HALF_UP);
                taxOffValue = ((Double)Math.ceil(a.doubleValue())).longValue();
                //vtbphuong end edit Request #22169
		
		taxOffPrice.setText(taxOffValue.toString());
	}
	
	/**
	 * ボタンのEnabledを変更する。
	 * @param enabled Enabled
	 */
	private void changeButtonEnabled(boolean enabled)
	{
		renewButton.setEnabled(enabled);
		deleteButton.setEnabled(enabled);
	}
	
	
	/**
	 * 入力チェックを行う。
	 * @return 入力エラーがなければtrueを返す。
	 */
	private boolean checkInput()
	{
		//コース分類
		if(courseClass.getSelectedIndex() < 0)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "コース分類"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			courseClass.requestFocusInWindow();
			return	false;
		}
		//コース名
		if(courseName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "コース名"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			courseName.requestFocusInWindow();
			return	false;
		}
		
                // 有効期限
                if(rdoPraiseTimeLimitEnable.isSelected()){
                    if(praiseTimeLimit.getText().equals(""))
                    {
                            MessageDialog.showMessageDialog(this,
                                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "有効期限"),
                                            this.getTitle(),
                                            JOptionPane.ERROR_MESSAGE);
                            praiseTimeLimit.requestFocusInWindow();
                            return	false;
                    }
                    else
                    {
                            if(!CheckUtil.isNumber(praiseTimeLimit.getText())){
                                    MessageDialog.showMessageDialog(this,
                                                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "有効期限"),
                                                    this.getTitle(),
                                                    JOptionPane.ERROR_MESSAGE);
                                    praiseTimeLimit.requestFocusInWindow();
                                    return	false;
                            }else if(!CheckUtil.checkStringLength( praiseTimeLimit.getText(), 2 )
                            || !CheckUtil.is1ByteChars( praiseTimeLimit.getText() ) ){
                                    MessageDialog.showMessageDialog(this,
                                    MessageUtil.getMessage(1201, "有効期限", "半角数値2桁"),
                                    this.getTitle(),
                                    JOptionPane.ERROR_MESSAGE);
                                    praiseTimeLimit.requestFocusInWindow();
                                    return	false;
                            }
                    }
                }

       		//消化回数
		if(num.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "消化回数"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			num.requestFocusInWindow();
			return	false;
		}
		else
		{
			if(!CheckUtil.isNumber(num.getText()))
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "消化回数"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				num.requestFocusInWindow();
				return	false;
			}
		}

		//価格
		if(price.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "価格"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			price.requestFocusInWindow();
			return	false;
		}
		else
		{
			if(!CheckUtil.isNumber(price.getText()))
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "価格"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				price.requestFocusInWindow();
				return	false;
			}
		}
		
		//施術時間
		if(operationTime.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "施術時間"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			operationTime.requestFocusInWindow();
			return	false;
		}
		else
		{
			if(!CheckUtil.isNumber(operationTime.getText()))
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "施術時間"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				operationTime.requestFocusInWindow();
				return	false;
			}
		}
		
		//表示順
		if(displaySeq.getText().equals("0"))
		{
			MessageDialog.showMessageDialog(this,
					"挿入位置は 1 以上を指定してください。",
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			displaySeq.requestFocusInWindow();
			return	false;
		}
                
		return	true;
	}
	
	/**
	 * 選択されているコース分類ＩＤをセットする。
	 * @param courseClassID 技術分類ＩＤ
	 */
	public void setSelectedCourseClassID(Integer courseClassID)
	{
		if(courseClassID == null)	return;
		
		for(MstCourseClass tc : mccs)
		{
			if(courseClassID == tc.getCourseClassID())
			{
				courseClass.setSelectedItem(tc);
				return;
			}
		}
	}
	
	
	/**
	 * 入力されたデータを登録する。
	 * @param isAdd true - 追加処理
	 * @return true - 成功
	 */
	private boolean regist(boolean isAdd)
	{
		boolean result = false;
		MstCourse mc = new MstCourse();
		Integer shopID = SystemInfo.getCurrentShop().getShopID();
		
		if (!isAdd && 0 <= selIndex) {
                    mc.setData(mtc.get(selIndex));
		}
		this.setData(mc);
		
		ConnectionWrapper con = SystemInfo.getConnection();
		
		try {
                    
                    con.begin();
			
                    if (mc.regist(con, (0 <= selIndex ? mtc.get(selIndex).getDisplaySeq() : -1))) {
                        //IVS_TMTrong start add 2015/10/21 New request #43515
                        result=true;
                        //IVS_TMTrong end add 2015/10/21 New request #43515
                        if (shopID != 0) {
                            //IVS_TMTrong start add 2015/10/21 New request #43515
                            MstUseProduct mup = new MstUseProduct();
                            if(isAdd || (!isAdd && mup.isExist_Course_UseProduct(con, SystemInfo.getCurrentShop().getShopID(), 3, mc.getCourseID()))){
                                mup.setShop(SystemInfo.getCurrentShop());
                                mup.setProductDivision(3);
                                mup.setProductID(mc.getCourseID());
                                mup.setPrice(Long.parseLong(price.getText().replace(",", "")));
                                if(displaySeq.getText().equals("")){
                                	//IVS_LVTu start add 2017/08/17 #21596 [gb]技術・商品・コース登録画面 挿入位置がない第1番目の登録ができない
                                    if (courses.getRowCount()>0) {
                                        int maxRowIndex = courses.getRowCount()-1;
                                        int displaySeqTemp = Integer.parseInt(courses.getValueAt(maxRowIndex, 6).toString());
                                        mup.setDisplay_seq(displaySeqTemp+1);
                                    } else {
                                        mup.setDisplay_seq(1);
                                    }
                               		//IVS_LVTu end add 2017/08/17 #21596 [gb]技術・商品・コース登録画面 挿入位置がない第1番目の登録ができない
                                }else{
                                    mup.setDisplay_seq(Integer.valueOf(displaySeq.getText()));
                                }
                                result = mup.regist(con);
                            }
                            //IVS_TMTrong end add 2015/10/21 New request #43515
                        } 
                        //IVS_TMTrong start edit 2015/10/21 New request #43515
                        //else {
                        //    result = true;
                        //}
                        //IVS_TMTrong end edit 2015/10/21 New request #43515
                    }

                    if (result) {
                        con.commit();
                        //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
                        isLoadDisplay = true;
                        //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
                    } else {
                        con.rollback();
                    }

		} catch(SQLException e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return result;
	}
	
	/**
	 * コース分類マスタデータからデータをセットする。
	 * @param mt コース分類マスタデータ
	 */
	private void setData(MstCourse mc)
	{
		mc.setCourseClass((MstCourseClass)courseClass.getSelectedItem());
		mc.setCourseName(courseName.getText());
                mc.setNum(Integer.parseInt(num.getText().replace(",", "")));
		mc.setPrice(Long.parseLong(price.getText().replace(",", "")));
		mc.setOperationTime(Integer.parseInt(operationTime.getText()));
		mc.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText().replace(",", ""))));
                if(this.rdoPraiseTimeLimitEnable.isSelected()){
                    mc.setPraiseTimeLimit(Integer.parseInt(praiseTimeLimit.getText()));
                } else {
                    mc.setPraiseTimeLimit(null);
                }
                mc.setPraiseTime(this.rdoPraiseTimeLimitEnable.isSelected());
	}
	
	
	/**
	 * 選択されたデータを削除する。
	 * @return true - 成功
	 */
	private boolean delete()
	{
		boolean		result	=	false;
		MstCourse		mc	=	null;
		MstUseProducts		mup = new MstUseProducts();
		
		if(0 <= selIndex && selIndex < mtc.size())
		{
			mc	=	mtc.get(selIndex);
		}
		
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		try
		{
			mup.setProductDivision(1);
			
			
			con.begin();
			
			if(mc.delete(con) && mup.deleteProductId(con,mc.getCourseID()))
			{
				con.commit();
				this.refresh();
				result	=	true;
                //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
                isLoadDisplay = true;
                //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
			}
			else
			{
				con.rollback();
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	result;
	}
	
	/**
	 * コースマスタ登録画面用FocusTraversalPolicy
	 */
	private class MstCourseFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(courseClass))
			{
				return courseName;
			}
			else if (aComponent.equals(courseName))
			{
				return rdoPraiseTimeLimitEnable;
			}
                        else if(aComponent.equals(rdoPraiseTimeLimitEnable)){
                            return rdoPraiseTimeLimitDisable;
                        }
                        else if(aComponent.equals(rdoPraiseTimeLimitDisable)){
                            if (rdoPraiseTimeLimitDisable.isSelected())
                            {
                                return num;
                            }
                            else
                            {
                                return praiseTimeLimit;
                            }
                        }
                        else if(aComponent.equals(praiseTimeLimit)){
                            return num;
                        }
                        else if(aComponent.equals(num)){
                            return price;
                        }
			else if (aComponent.equals(price))
			{
				return operationTime;
			}
			else if (aComponent.equals(operationTime))
			{
				return displaySeq;
			}
			else if (aComponent.equals(displaySeq))
			{
				return courseClass;
			}
			
			return courseClass;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(courseClass))
			{
				return courseClass;
			}
			else if (aComponent.equals(courseName))
			{
				return courseName;
			}
                        else if(aComponent.equals(rdoPraiseTimeLimitEnable)){
                            return courseName;
                        }
                        else if(aComponent.equals(rdoPraiseTimeLimitDisable))
                        {
                            return rdoPraiseTimeLimitEnable;
                        }
                        else if(aComponent.equals(praiseTimeLimit))
                        {
                            return rdoPraiseTimeLimitDisable;
                        }
			else if (aComponent.equals(num))
			{
                            if (rdoPraiseTimeLimitDisable.isSelected())
                            {
				return rdoPraiseTimeLimitDisable;
                            }
                            else
                            {
				return praiseTimeLimit;
                            }
			}
			else if (aComponent.equals(price))
			{
				return num;
			}
			else if (aComponent.equals(operationTime))
			{
				return price;
			}
			else if (aComponent.equals(displaySeq))
			{
				return operationTime;
			}
			
			return courseClass;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return courseClass;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return displaySeq;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return courseClass;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return courseClass;
		}
	}
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		courses.getColumnModel().getColumn(0).setPreferredWidth(150);
		courses.getColumnModel().getColumn(1).setPreferredWidth(60);
		courses.getColumnModel().getColumn(2).setPreferredWidth(50);
		courses.getColumnModel().getColumn(3).setPreferredWidth(35);
		courses.getColumnModel().getColumn(4).setPreferredWidth(35);
                courses.getColumnModel().getColumn(5).setPreferredWidth(65);
	}
	
	
	/**
	 * 列の表示位置を設定するTableCellRenderer
	 */
	private class TableCellAlignRenderer extends DefaultTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}

		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);
                        
			switch(column)
			{
				case 2:
				case 3:
                                case 5:
				case 6:
					super.setHorizontalAlignment(SwingConstants.RIGHT);
					break;
                                case 4:
                                        super.setHorizontalAlignment(SwingConstants.CENTER);
                                        break;
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}

			return this;
		}
	}
}
