/*
 * VisitKarteSettingPanel.java
 *
 * Created on 2017/03/29, 12:00
 */

package com.geobeck.sosia.pos.basicinfo.company;

import com.geobeck.sosia.pos.hair.master.product.MstFreeHeadingClass;
import com.geobeck.sosia.pos.hair.master.product.MstFreeHeadingClasses;
import com.geobeck.sosia.pos.system.SystemInfo;
import javax.swing.*;
import javax.swing.table.*;

import com.geobeck.swing.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.util.CheckUtil;

import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

/***
 * 来店カルテ設定画面
 * @author GB
 * 
 */
public class VisitKarteSettingPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
    
    private	VisitKarteSetting               visitKarteSetting  	=	null;
    private     MstFreeHeadingClasses           mfhc                    =       null;
    private     VisitKarteSettingPanel          parent;
    
    private static int editFlag;
    private boolean edited = false;
    private String tempInputStr;
    private int tempVisitKarteTableRow;
    private int tempVisitKarteTableCol;
    

    /**
     * Creates new form MstComeShopKartePanel
     * @param masterName:タイトル
     */
    public VisitKarteSettingPanel(String masterName) {
        super();
        initComponents();
        this.init(masterName);
        this.setSize(830,680);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        autoNumberingGroup = new javax.swing.ButtonGroup();
        qrDisplayButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        autoNumberingOn = new javax.swing.JRadioButton();
        autoNumberingOff = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        qrExpirationTime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        visitKarteScrollPane = new javax.swing.JScrollPane();
        visitKarteTable = new javax.swing.JTable();
        registButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(830, 680));

        qrDisplayButton.setIcon(SystemInfo.getImageIcon("/button/custom/qr_big_off.jpg"));
        qrDisplayButton.setPressedIcon(SystemInfo.getImageIcon("/button/custom/qr_big_on.jpg"));
        qrDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qrDisplayButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("顧客No");

        autoNumberingGroup.add(autoNumberingOn);
        autoNumberingOn.setText("自動採番する");
        autoNumberingOn.setEnabled(false);

        autoNumberingGroup.add(autoNumberingOff);
        autoNumberingOff.setSelected(true);
        autoNumberingOff.setText("自動採番しない");

        jLabel2.setText("二次元コード有効期限");

        qrExpirationTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel3.setText("分");

        jLabel4.setText("※自動採番しない場合は、顧客No.0で登録されます。");

        jLabel5.setText("＜入力項目＞");

        visitKarteScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        visitKarteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "表示", "必須", "項目名", "入力画面表示名"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        visitKarteTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        visitKarteTable.setSelectionBackground(new java.awt.Color(255, 210, 142));
        visitKarteTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        visitKarteTable.getTableHeader().setReorderingAllowed(false);
        visitKarteTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        visitKarteTable.getTableHeader().setReorderingAllowed(false);
        visitKarteTable.setDefaultRenderer(String.class, new SelectTableCellRenderer());
        SwingUtil.setJTableHeaderRenderer(visitKarteTable, SystemInfo.getTableHeaderRenderer());
        visitKarteTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        visitKarteTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                visitKarteTableMouseClicked(evt);
            }
        });
        visitKarteScrollPane.setViewportView(visitKarteTable);

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("※有効期限は既存顧客にのみ設定されます。");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(autoNumberingOn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(autoNumberingOff))
                            .addComponent(jLabel4))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(qrExpirationTime, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(registButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(qrDisplayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jLabel5)
                    .addComponent(visitKarteScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(registButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(autoNumberingOn)
                            .addComponent(autoNumberingOff)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(qrExpirationTime, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(qrDisplayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visitKarteScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void registButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registButtonActionPerformed
        this.regist();
        this.setQrDisplayButtonEnabled();
    }//GEN-LAST:event_registButtonActionPerformed

    private void qrDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qrDisplayButtonActionPerformed
        this.qrDisplay();
    }//GEN-LAST:event_qrDisplayButtonActionPerformed

    private void visitKarteTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_visitKarteTableMouseClicked
        if (tempInputStr != null) {
            setEditFlagIs(tempInputStr, visitKarteTable, tempVisitKarteTableRow, tempVisitKarteTableCol);
        }
        tempVisitKarteTableRow = visitKarteTable.getSelectedRow();
        tempVisitKarteTableCol = visitKarteTable.getSelectedColumn();
        Object o = visitKarteTable.getValueAt(tempVisitKarteTableRow, tempVisitKarteTableCol);
        if (o.getClass().equals(String.class)) {
            tempInputStr = o.toString();
        }
    }//GEN-LAST:event_visitKarteTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup autoNumberingGroup;
    private javax.swing.JRadioButton autoNumberingOff;
    private javax.swing.JRadioButton autoNumberingOn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JButton qrDisplayButton;
    private javax.swing.JTextField qrExpirationTime;
    private javax.swing.JButton registButton;
    private javax.swing.JScrollPane visitKarteScrollPane;
    private javax.swing.JTable visitKarteTable;
    // End of variables declaration//GEN-END:variables

   
    
    /**
     * 初期化
     * @param masterName:タイトル
     */
    private void init(String masterName)
	{
            visitKarteSetting	=	new VisitKarteSetting();
            mfhc                =       new MstFreeHeadingClasses();
            
            this.initTableModel();
            this.addMouseCursorChange();
            this.initTable();
            this.setQrDisplayButtonEnabled();
            this.addListener(visitKarteTable);
            this.setTitle(masterName);
            this.showData();
            this.initAutoNumbering();

	}
        
    
        /**
         * テーブル初期化
         */
        private void initTable() {
                initTableColumnSize();
                SwingUtil.clearTable(visitKarteTable);
                
                MstFreeHeadingClasses   mfhcs   =       new MstFreeHeadingClasses();
                DefaultTableModel	model	=	(DefaultTableModel)visitKarteTable.getModel();
                Object[]                list    =       new Object[4];
                
                for(int i = 0; i < visitKarteSetting.VISIT_KARTE_SETTING_PANEL_FIELDS.length; i++) {
                    // フリー項目以外
                    list[0] = false;
                    list[1] = false;
                    list[2] = visitKarteSetting.VISIT_KARTE_SETTING_PANEL_FIELDS[i];
                    list[3] = "";
                    model.addRow(list);
                }

                for(MstFreeHeadingClass item : mfhcs) {
                    // フリー項目
                    if(item.getUseFlg()) {
                        // 使用しているフリー項目区分のみ表示
                        list[0] = false;
                        list[1] = false;
                        list[2] = "フリー項目" + item.getFreeHeadingClassID().toString() +")" + item.getFreeHeadingClassName();
                        list[3] = "";
                        model.addRow(list);
                    }
                }
        }
        
        
        /**
         * QRコード表示ボタンの表示・非表示設定
         */
        private void setQrDisplayButtonEnabled() {
            qrDisplayButton.setEnabled(visitKarteSetting.isExists());
        }
        
        
       
        /**
         * 顧客No自動採番ありなし設定
         * 店舗情報登録画面で顧客No自動採番なしに設定されている場合は、顧客No自動採番なし固定
         * ※mst_shop.auto_number 0:なし 1:あり
         */
        private void initAutoNumbering() {
            Integer flag = SystemInfo.getCurrentShop().getAutoNumber();
            if(flag == 0) {
                autoNumberingOn.setEnabled(false);
            }else if(flag == 1) {
                autoNumberingOn.setEnabled(true);
            }
        }
        
        /**
         * 店舗情報設定とカルテ設定の顧客No自動採番整合性チェック
         */
        public void checkAutoNumbering() {
            Integer flag = SystemInfo.getCurrentShop().getAutoNumber();
            if(flag == 0) {
                if(visitKarteSetting.getAutoNumbering() == 1) {
                    MessageDialog.showMessageDialog(this,
                        "顧客No自動採番を有効にする際は、\n" +
                                "【基本設定】＞【会社関連】＞【店舗情報登録】画面で\n" +
                                "顧客No自動採番を有に設定して下さい。\n\n" +
                                "設定するまで顧客Noは0番で登録されます。",
                        this.getTitle(),
                        JOptionPane.WARNING_MESSAGE);
                }
            }
        }
        
        
        /**
         * DBに登録
         * @return true:成功 false:失敗
         */
        private boolean regist() {

             // 入力確定処理
            this.inputFixed();
            
            
            // 入力チェック
            if(!checkInput()) {
                return false;
            }

            
            this.setData();
            if(visitKarteSetting.regist()) {
                MessageDialog.showMessageDialog(
                     this,
                     MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
                     this.getTitle(),
                     JOptionPane.INFORMATION_MESSAGE);
                return true;
            }else {
                MessageDialog.showMessageDialog(this,
                    "登録処理が失敗しました。",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                return false;
            }

        }
        
        
        /**
         * QRコード画面をブラウザで表示する
         */
        private void qrDisplay() {
            VisitKarteDialog.ShowDialog(parentFrame, 0, (this.getOpener() == null ? this : parent));
        }
        
        
       
        /**
         * 入力されたデータを格納
         */
        private void setData() {
            // 顧客No自動採番
            Integer autoNumbering = 0;
            if(autoNumberingOn.isSelected()) {
                autoNumbering = 1;
            }
            visitKarteSetting.setAutoNumbering(autoNumbering);
            
            // QR有効期限
            visitKarteSetting.setOnetimeSetting(Integer.parseInt(qrExpirationTime.getText().trim()));
            
            for(int i = 0; i < visitKarteSetting.VISIT_KARTE_SETTING_PANEL_FIELDS.length; i++) {
                // フリー項目以外
                Integer flag = 0;
                if((Boolean)visitKarteTable.getValueAt(i, 0)) {
                    if((Boolean)visitKarteTable.getValueAt(i, 1)) {
                        flag = 2;
                    }else {
                        flag = 1;
                    }
                }
                // 表示・必須チェック
                visitKarteSetting.get(i).setFlag(flag);
                
                // 入力画面表示名
                visitKarteSetting.get(i).setName(visitKarteTable.getValueAt(i, 3).toString());
            }
            
            Integer row = visitKarteSetting.VISIT_KARTE_SETTING_PANEL_FIELDS.length;
            for(int i = visitKarteSetting.VISIT_KARTE_SETTING_PANEL_FIELDS.length; i < mfhc.size() + visitKarteSetting.VISIT_KARTE_SETTING_PANEL_FIELDS.length; i++) {
                // フリー項目
                Integer index = visitKarteSetting.getFreeHeadingClassIndex(i);
                if(mfhc.get(index).getUseFlg()) {
                    Integer flag = 0;
                    if((Boolean)visitKarteTable.getValueAt(row, 0)) {
                        if((Boolean)visitKarteTable.getValueAt(row, 1)) {
                            flag = 2;
                        }else {
                            flag = 1;
                        }
                    }
                    // 表示・必須チェック
                    visitKarteSetting.get(i).setFlag(flag);

                    // 入力画面表示名
                    visitKarteSetting.get(i).setName(visitKarteTable.getValueAt(row, 3).toString());

                    row++;
                }
            }
        }
        
        
        
        /**
         * テーブルに、取得したデータを設定
         */
        private void showData() {
            // 顧客No自動採番
            if(visitKarteSetting.getAutoNumbering() == 0) {
                // 自動採番しない
                autoNumberingOff.setSelected(true);
            }else if(visitKarteSetting.getAutoNumbering() == 1) {
                // 自動採番する
                autoNumberingOn.setSelected(true);
            }
            
            // QR有効期限
            qrExpirationTime.setText(visitKarteSetting.getOnetimeSetting().toString());
            
            for(int row = 0; row < visitKarteSetting.VISIT_KARTE_SETTING_PANEL_FIELDS.length; row++) {
                /* フリー項目以外 */
                // 表示・必須
                if(visitKarteSetting.get(row).getFlag() == 0) {
                    visitKarteTable.setValueAt(false, row, 0);
                    visitKarteTable.setValueAt(false, row, 1);
                }else if(visitKarteSetting.get(row).getFlag() == 1) {
                    visitKarteTable.setValueAt(true, row, 0);
                    visitKarteTable.setValueAt(false, row, 1);
                }else if(visitKarteSetting.get(row).getFlag() == 2) {
                    visitKarteTable.setValueAt(true, row, 0);
                    visitKarteTable.setValueAt(true, row, 1);
                }
                
                // 入力画面表示名
                visitKarteTable.setValueAt(visitKarteSetting.get(row).getName(), row, 3);
            }
            
            Integer row = visitKarteSetting.VISIT_KARTE_SETTING_PANEL_FIELDS.length;
            for(int i = visitKarteSetting.VISIT_KARTE_SETTING_PANEL_FIELDS.length; i < mfhc.size() + visitKarteSetting.VISIT_KARTE_SETTING_PANEL_FIELDS.length; i++) {
                /* フリー項目 */
                Integer index = visitKarteSetting.getFreeHeadingClassIndex(i);
                if(mfhc.get(index).getUseFlg()) {
                    // 表示・必須
                    if(visitKarteSetting.get(i).getFlag() == 0) {
                        visitKarteTable.setValueAt(false, row, 0);
                        visitKarteTable.setValueAt(false, row, 1);
                    }else if(visitKarteSetting.get(i).getFlag() == 1) {
                        visitKarteTable.setValueAt(true, row, 0);
                        visitKarteTable.setValueAt(false, row, 1);
                    }else if(visitKarteSetting.get(i).getFlag() == 2) {
                        visitKarteTable.setValueAt(true, row, 0);
                        visitKarteTable.setValueAt(true, row, 1);
                    }

                    // 入力画面表示名
                    visitKarteTable.setValueAt(visitKarteSetting.get(i).getName(), row, 3);
                    
                    row++;
                }
            }
        }
        
        
        
        /**
         * 入力チェック
         * @return true:OK false:NG入力あり
         */
        private boolean checkInput() {
            // QRコード有効期限
            String expirationTime = qrExpirationTime.getText().trim();
            if(expirationTime.equals("")) {
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1100, "二次元コード有効期限"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);	
                return	false;
            }else if (!CheckUtil.isNumber(expirationTime)){
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_NOT_NUMERIC, "二次元コード有効期限"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return	false;
            }else if (!CheckUtil.checkRange(Long.parseLong(expirationTime), 1, 1440)) {
                // 有効期限は1分以上24時間以内
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(1201, "二次元コード有効期限", "1分〜1440分"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return	false;
            }
            
            // 入力画面表示名
            // 表示にチェックが付いている場合、空白はNG
            for(int row = 0; row < visitKarteTable.getRowCount(); row++) {
                if((Boolean)visitKarteTable.getValueAt(row, 0)) {
                    if(visitKarteTable.getValueAt(row, 3).toString().trim().equals("")) {
                        MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(1100, "表示にチェックがついている項目の入力画面表示名"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                        return	false;
                    }
                }
            }
            
            // 顧客No自動採番整合性チェック
            // ※整合がとれていなくても登録はする
            this.checkAutoNumbering();

            return true;
        }

        
        
        /**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加
	 */
	private void addMouseCursorChange() {
		SystemInfo.addMouseCursorChange(registButton);
		SystemInfo.addMouseCursorChange(qrDisplayButton);
	}
        
        
        /**
         * テーブルの列幅設定
         */
        private void initTableColumnSize() {
            visitKarteTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            visitKarteTable.getColumnModel().getColumn(1).setPreferredWidth(40);
            visitKarteTable.getColumnModel().getColumn(2).setPreferredWidth(280);
            visitKarteTable.getColumnModel().getColumn(3).setPreferredWidth(408);
        }
        
        
        /**
         * テーブルにリスナー追加
         */
        private void addListener(JTable table) {
            SelectionListener listener = new SelectionListener(table);
            table.getModel().addTableModelListener(listener);
        }
       
        
        /**
         * 
         */
        private void initTableModel() {
                visitKarteTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },
                new String [] {
                    "表示", "必須", "項目名", "入力画面表示名"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    true, true, false, true
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    if(columnIndex == 0 && rowIndex == 0) {
                        // 名前の項目は表示チェック編集不可(必ず表示)
                        return false;
                    }
                    
                    if(columnIndex == 1) {
                        if(rowIndex == 0) {
                            // 名前の項目は必須チェック編集不可(必ず必須)
                            if((Boolean)visitKarteTable.getValueAt(0, 1)) {
                                return false;
                            }else {
                                return true;
                            }
                        }else {
                            // 必須チェック項目は表示にチェックがついている時のみ編集可
                            return (Boolean)visitKarteTable.getValueAt(rowIndex, 0);
                        }
                    }
                    
                    return canEdit [columnIndex];
                }
            });
            visitKarteTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
            visitKarteTable.setSelectionBackground(new java.awt.Color(255, 210, 142));
            visitKarteTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
            visitKarteTable.getTableHeader().setReorderingAllowed(false);
            visitKarteTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            visitKarteTable.getTableHeader().setReorderingAllowed(false);
            visitKarteTable.setDefaultRenderer(String.class, new SelectTableCellRenderer());
            SwingUtil.setJTableHeaderRenderer(visitKarteTable, SystemInfo.getTableHeaderRenderer());
            visitKarteTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
            visitKarteScrollPane.setViewportView(visitKarteTable);
        }
        
        
        /**
         * 入力確定処理
         */
        private void inputFixed() {
            if (visitKarteTable.getCellEditor() != null) {
                visitKarteTable.getCellEditor().stopCellEditing();

                if (getEditFlag() == 0) {
                    setEditFlagIs(tempInputStr, visitKarteTable, tempVisitKarteTableRow, tempVisitKarteTableCol);
                }
            }
            
        }
        
        private void setEditFlagIs(String s, JTable table, int row, int col) {
            if (s != null && edited == false && row != -1) {
                if (s.equals(table.getValueAt(row, col).toString()) == false) {
                    if (edited == false) {
                        setEditFlag(1);
                        edited = true;
                    }
                }

            }
        }
        
        private static int getEditFlag() {
            return editFlag;
        }

        private static void setEditFlag(int Flag) {
            editFlag = Flag;
        }
        
        
        
        /**
         * リスナー
         */
        class SelectionListener implements TableModelListener {
            JTable table;
            
            SelectionListener(JTable table) {
                this.table = table;
            }
            @Override
            public void tableChanged(TableModelEvent e) {
                int column = e.getColumn();
                int row = e.getFirstRow();
                
                // 使用のチェックが外れたら必須のチェックも外す
                if(column == 0) {
                    if(!(Boolean)table.getValueAt(row, column)){   
                        table.setValueAt(false, row, 1);
                    }
                }
            }
        }
        
        
}
