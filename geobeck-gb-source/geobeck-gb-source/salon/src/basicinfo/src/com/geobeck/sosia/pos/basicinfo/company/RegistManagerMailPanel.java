/*
 * RegistManagerMailPanel.java
 *
 * Created on 2010/07/06, 09:00
 */

package com.geobeck.sosia.pos.basicinfo.company;

import com.geobeck.sosia.pos.master.company.MstManager;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.util.SQLUtil;

/**
 *
 * @author  geobeck
 */
public class RegistManagerMailPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
    private ArrayList<MstManager> list = new ArrayList<MstManager>();
    private Integer selIndex = -1;
    private boolean isLoading = false;
	
    /** Creates new form RegistManagerMailPanel */
    public RegistManagerMailPanel()
    {
        super();
        
        isLoading = true;
        
        initComponents();
        SystemInfo.initGroupShopComponents(shop, 2);
        addMouseCursorChange();
        this.setSize(490, 500);
        this.setTitle("管理者メールアドレス登録");
        this.setListener();
        
        isLoading = false;
        
        this.init();
    }
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        displayReservationGroup = new javax.swing.ButtonGroup();
        managerScrollPane = new javax.swing.JScrollPane();
        managerTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        staffClassNameLabel = new javax.swing.JLabel();
        displayReservationLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        name1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)name1.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        name2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)name2.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        mail = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)mail.getDocument()).setDocumentFilter(
            new CustomFilter(64, CustomFilter.MAIL_ADDRESS));

        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        managerScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        managerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "氏名", "メールアドレス"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        managerTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        managerTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        managerTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        managerTable.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(managerTable, SystemInfo.getTableHeaderRenderer());
        managerTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(managerTable);
        managerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                managerTableMouseReleased(evt);
            }
        });
        managerTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                managerTableKeyReleased(evt);
            }
        });

        managerScrollPane.setViewportView(managerTable);

        jPanel1.setLayout(null);

        jPanel1.setOpaque(false);
        shopLabel.setText("\u5e97\u3000\u8217");
        jPanel1.add(shopLabel);
        shopLabel.setBounds(10, 10, 70, 21);

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        jPanel1.add(shop);
        shop.setBounds(90, 10, 230, 22);

        staffClassNameLabel.setText("\u6c0f\u3000\u540d");
        jPanel1.add(staffClassNameLabel);
        staffClassNameLabel.setBounds(10, 50, 70, 20);

        displayReservationLabel.setText("\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9");
        jPanel1.add(displayReservationLabel);
        displayReservationLabel.setBounds(10, 80, 70, 20);

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jPanel1.add(addButton);
        addButton.setBounds(170, 120, 92, 25);

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        jPanel1.add(renewButton);
        renewButton.setBounds(270, 120, 92, 25);

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jPanel1.add(deleteButton);
        deleteButton.setBounds(370, 120, 92, 25);

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jPanel1.add(closeButton);
        closeButton.setBounds(370, 10, 92, 25);

        name1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        name1.setColumns(20);
        name1.setInputKanji(true);
        jPanel1.add(name1);
        name1.setBounds(90, 50, 110, 20);

        name2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        name2.setColumns(20);
        name2.setInputKanji(true);
        jPanel1.add(name2);
        name2.setBounds(210, 50, 110, 20);

        mail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        mail.setColumns(64);
        jPanel1.add(mail);
        mail.setBounds(90, 80, 230, 20);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, managerScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 147, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(managerScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        ((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
        if (isLoading) return;
        this.refresh();
    }//GEN-LAST:event_shopActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed

            //削除確認
            if (MessageDialog.showYesNoDialog(
                    this,
                    MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, list.get(selIndex).getFullManagerName()),
                    this.getTitle(),
                    JOptionPane.WARNING_MESSAGE) != JOptionPane.YES_OPTION)
            {
                return;
            }

            this.delete();

	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
            if (this.checkInput()) {
                this.regist(false);
            }
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
            if (this.checkInput()) {
                this.regist(true);
            }
	}//GEN-LAST:event_addButtonActionPerformed

        private void managerTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_managerTableMouseReleased
            this.changeCurrentData();
        }//GEN-LAST:event_managerTableMouseReleased

        private void managerTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_managerTableKeyReleased
            this.changeCurrentData();
        }//GEN-LAST:event_managerTableKeyReleased
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.ButtonGroup displayReservationGroup;
    private javax.swing.JLabel displayReservationLabel;
    private javax.swing.JPanel jPanel1;
    private com.geobeck.swing.JFormattedTextFieldEx mail;
    private javax.swing.JScrollPane managerScrollPane;
    private javax.swing.JTable managerTable;
    private com.geobeck.swing.JFormattedTextFieldEx name1;
    private com.geobeck.swing.JFormattedTextFieldEx name2;
    private javax.swing.JButton renewButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JLabel staffClassNameLabel;
    // End of variables declaration//GEN-END:variables
	
    /**
     * FocusTraversalPolicy
     */
    private MstManagerFocusTraversalPolicy ftp = new MstManagerFocusTraversalPolicy();
	
    /**
     * FocusTraversalPolicyを取得する。
     * @return FocusTraversalPolicy
     */
    public MstManagerFocusTraversalPolicy getFocusTraversalPolicy()
    {
        return ftp;
    }

    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange()
    {
        SystemInfo.addMouseCursorChange(closeButton);
        SystemInfo.addMouseCursorChange(addButton);
        SystemInfo.addMouseCursorChange(renewButton);
        SystemInfo.addMouseCursorChange(deleteButton);
    }

    /**
     * コンポーネントの各リスナーをセットする。
     */
    private void setListener()
    {
        name1.addKeyListener(SystemInfo.getMoveNextField());
        name1.addFocusListener(SystemInfo.getSelectText());
        name2.addKeyListener(SystemInfo.getMoveNextField());
        name2.addFocusListener(SystemInfo.getSelectText());
        mail.addKeyListener(SystemInfo.getMoveNextField());
        mail.addFocusListener(SystemInfo.getSelectText());
    }
	
    /**
     * 初期化処理を行う。
     */
    private void init()
    {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("     *");
        sql.append(" from");
        sql.append("     mst_manager");
        sql.append(" where");
        sql.append("         delete_date is null");
        sql.append("     and mail_division = 1");
        sql.append("     and shop_id = " + SQLUtil.convertForSQL(((MstShop)shop.getSelectedItem()).getShopID()));
        
        try {
            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
            
            list.clear();
            
            while (rs.next()) {
                MstManager mm = new MstManager();
                mm.setData(rs);
                list.add(mm);
            }                
            
        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        this.showData();
    }
	
    /**
     * 再表示を行う。
     */
    private void refresh()
    {
        this.init();
        
        //入力をクリアする
        this.clear();

        name1.requestFocusInWindow();
    }
	
    /**
     * 入力項目をクリアする。
     */
    private void clear()
    {
        selIndex = -1;
        name1.setText("");
        name2.setText("");
        mail.setText("");
        
        if (0 < managerTable.getRowCount()) {
            managerTable.removeRowSelectionInterval(0, managerTable.getRowCount() - 1);
        }

        this.changeCurrentData();
    }
	
    /**
     * データを表示する。
     */
    private void showData()
    {
        
        SwingUtil.clearTable(managerTable);
        DefaultTableModel model = (DefaultTableModel)managerTable.getModel();

        //全行削除
        model.setRowCount(0);
        managerTable.removeAll();

        for (MstManager mm : list) {
            Object[] rowData =
            {
                mm,
                mm.getMailAddress()
            };
            model.addRow(rowData);
        }
        
    }

    /**
     * 選択データが変更されたときの処理を行う。
     */
    private void changeCurrentData()
    {
        int index = managerTable.getSelectedRow();

        if (0 <= index && index < list.size() && index != selIndex) {
            selIndex = index;

            //選択されているデータを表示
            this.showCurrentData();
        }

        renewButton.setEnabled(0 <= selIndex);
        deleteButton.setEnabled(0 <= selIndex);
    }
	
    /**
     * 選択されたデータを入力項目に表示する。
     */
    private void showCurrentData()
    {
        name1.setText(list.get(selIndex).getManagerName(0));
        name2.setText(list.get(selIndex).getManagerName(1));
        mail.setText(list.get(selIndex).getMailAddress());
    }
	
	
    /**
     * 入力チェックを行う。
     * @return 入力エラーがなければtrueを返す。
     */
    private boolean checkInput()
    {
        // 氏名
        if (name1.getText().equals("") && name2.getText().equals("")) {
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "氏名"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            name1.requestFocusInWindow();
            return false;
        }

        // メールアドレス
        if (mail.getText().equals("")) {
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "メールアドレス"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            mail.requestFocusInWindow();
            return false;
        }

        return	true;
    }
	
	
    /**
     * 入力されたデータを登録する。
     * @param isAdd true - 追加処理
     * @return true - 成功
     */
    private boolean regist(boolean isAdd)
    {
        boolean result = false;

        MstManager mm = new MstManager();

        if (!isAdd && 0 <= selIndex) {
            mm.setData(list.get(selIndex));
        } else {
            mm.setShopID(((MstShop)shop.getSelectedItem()).getShopID());
        }

        mm.setManagerName(0, name1.getText());
        mm.setManagerName(1, name2.getText());
        mm.setMailAddress(mail.getText());
        
        ConnectionWrapper con = SystemInfo.getConnection();

        try {
            con.begin();

            if (mm.regist(con)) {
                con.commit();
                this.refresh();
                result = true;
            } else {
                con.rollback();
            }
        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return result;
    }


    /**
     * 選択されたデータを削除する。
     * @return true - 成功
     */
    private boolean delete()
    {
        boolean result = false;
        MstManager mm = null;

        if (0 <= selIndex && selIndex < list.size()) {
            mm = list.get(selIndex);
        }

        ConnectionWrapper con = SystemInfo.getConnection();

        try {
            con.begin();

            if (mm.delete(con)) {
                con.commit();
                this.refresh();
                result = true;
            } else {
                con.rollback();
            }

        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return	result;
    }

    /**
     * FocusTraversalPolicy
     */
    private class MstManagerFocusTraversalPolicy extends FocusTraversalPolicy
    {
        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。
         * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
         */
        public Component getComponentAfter(Container aContainer, Component aComponent)
        {
            if (aComponent.equals(name1)) {
                return name2;
            } else if (aComponent.equals(name2)) {
                return mail;
            }

            return name1;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。
         * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
         */
        public Component getComponentBefore(Container aContainer, Component aComponent)
        {
            if (aComponent.equals(mail)) {
                return name2;
            } else if (aComponent.equals(name2)) {
                return name1;
            }

            return name1;
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。
         * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
         * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer)
        {
            return name1;
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。
         * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
         * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer)
        {
            return mail;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。
         * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer)
        {
            return name1;
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
         * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
         * 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
         * または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        public Component getInitialComponent(Window window)
        {
            return name1;
        }
    }

    /**
     * JTableの列幅を初期化する。
     */
    private void initTableColumnWidth()
    {
        //列の幅を設定する。
        managerTable.getColumnModel().getColumn(1).setPreferredWidth(200);
    }


    /**
     * 列の表示位置を設定するTableCellRenderer
     */
    private class TableCellAlignRenderer extends DefaultTableCellRenderer
    {
        /** Creates a new instance of ReservationTableCellRenderer */
        public TableCellAlignRenderer()
        {
                super();
        }

        /**
         * テーブルセルレンダリングを返します。
         * @param table JTable
         * @param value セルに割り当てる値
         * @param isSelected セルが選択されている場合は true
         * @param hasFocus フォーカスがある場合は true
         * @param row 行
         * @param column 列
         * @return テーブルセルレンダリング
         */
        public Component getTableCellRendererComponent(JTable table,
                        Object value, boolean isSelected, boolean hasFocus, int row, int column)
        {
            super.getTableCellRendererComponent(table, value,
                            isSelected, hasFocus, row, column);

            switch (column) {
                default:
                    super.setHorizontalAlignment(SwingConstants.LEFT);
                    break;
            }

            return this;
        }
    }
}
