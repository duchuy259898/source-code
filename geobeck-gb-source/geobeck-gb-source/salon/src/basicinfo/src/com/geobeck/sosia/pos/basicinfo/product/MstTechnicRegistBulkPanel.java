/*
 * MstTechnicRegistBulkPanel.java
 *
 * Created on 2017/01/04, 10:10
 */

package com.geobeck.sosia.pos.basicinfo.product;

import com.geobeck.sosia.pos.hair.master.product.MstTechnic;
import com.geobeck.sosia.pos.hair.master.product.MstTechnicClass;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.product.MstUseProduct;
import com.geobeck.sosia.pos.products.ProductClass;
import com.geobeck.sosia.pos.products.ProductClasses;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.CustomFilter;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import java.awt.*;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.JTextField;
import javax.swing.text.PlainDocument;
import org.apache.commons.lang.BooleanUtils;

/**
 * ãZèpàÍäáìoò^âÊñ 
 * @author 
 */
public class MstTechnicRegistBulkPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
    
    /** âpêîãLçÜÇÃê≥ãKï\åª */
    public static final String ALPHAMERIC_SYMBOL = "0-9a-zA-Z\\p{Punct}";
    
    public MstTechnicRegistBulkPanel(Integer productDivision) {
        initComponents();
        addMouseCursorChange();
        this.setSize(830, 720);
        this.setPath("äÓñ{ê›íË >> è§ïiÉ}ÉXÉ^");
        this.setTitle("ãZèpàÍäáìoò^");
        this.init();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        registButton = new javax.swing.JButton();
        productClassScrollPane = new javax.swing.JScrollPane();
        technicTable = new javax.swing.JTable();
        technicNameLabel = new javax.swing.JLabel();
        technicName = new javax.swing.JTextField();
        ((PlainDocument)technicName.getDocument()).setDocumentFilter(
            new CustomFilter(30));
        technicNoLabel = new javax.swing.JLabel();
        technicNo = new javax.swing.JTextField();
        ((PlainDocument)technicNo.getDocument()).setDocumentFilter(
            new CustomFilter(15, ALPHAMERIC_SYMBOL));

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setContentAreaFilled(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        technicTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ï™óﬁñº", "âøäi(ê≈çû)", "é{èpéûä‘", "è‹î¸ä˙å¿", "è‹î¸ì˙êî", "WEBó\ñÒ", "ï™óﬁID[hidden]"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        technicTable.setColumnSelectionAllowed(true);
        technicTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        technicTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        technicTable.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(technicTable, SystemInfo.getTableHeaderRenderer());
        technicTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(technicTable);
        TableColumnModel model = technicTable.getColumnModel();
        model.getColumn(1).setCellEditor(new IntegerCellCustomEditor(new JTextField()));
        IntegerCellCustomEditor editor = new IntegerCellCustomEditor(new JTextField());
        editor.setLimit (4);
        model.getColumn(2).setCellEditor(editor);
        model.getColumn(4).setCellEditor(new IntegerCellCustomEditor(new JTextField()));
        productClassScrollPane.setViewportView(technicTable);
        if (technicTable.getColumnModel().getColumnCount() > 0) {
            technicTable.getColumnModel().getColumn(6).setResizable(false);
            technicTable.getColumnModel().getColumn(6).setPreferredWidth(0);
        }
        technicTable.getColumnModel().getColumn(0).setPreferredWidth(130);
        technicTable.getColumnModel().getColumn(6).setResizable(false);
        technicTable.getColumnModel().getColumn(6).setPreferredWidth(0);
        technicTable.getColumnModel().getColumn(6).setMinWidth(0);
        technicTable.getColumnModel().getColumn(6).setMaxWidth(0);

        technicNameLabel.setText("ãZèpñº");
        technicNameLabel.setMaximumSize(new java.awt.Dimension(41, 13));
        technicNameLabel.setMinimumSize(new java.awt.Dimension(41, 13));
        technicNameLabel.setName(""); // NOI18N
        technicNameLabel.setPreferredSize(new java.awt.Dimension(41, 13));

        technicName.setNextFocusableComponent(technicNo);

        technicNoLabel.setText("ãZèpNO");

        technicNo.setNextFocusableComponent(technicName);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, productClassScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 543, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(technicNameLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(technicNoLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(technicName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                            .add(technicNo))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(technicNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(technicName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(technicNoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(technicNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(21, 21, 21)
                .add(productClassScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
        
	private void registButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_registButtonActionPerformed
	{//GEN-HEADEREND:event_registButtonActionPerformed

            if (technicTable.getCellEditor() != null) {
                technicTable.getCellEditor().stopCellEditing();
            }
            //ì¸óÕÉ`ÉFÉbÉN
            if (this.checkInput()) {
                
                registButton.setCursor(null);

                try {

                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                    if(this.regist()) {
                       
                        MessageDialog.showMessageDialog(this,
                                MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS,
                                "ãZèpàÍäáìoò^"),
                                this.getTitle(),
                                JOptionPane.INFORMATION_MESSAGE);
                        this.init();
                        technicName.requestFocusInWindow();
                        
                    } else {
                        MessageDialog.showMessageDialog(this,
                                MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED,
                                "ãZèpàÍäáìoò^"),
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                    }                

                } finally {
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
            
            }

	}//GEN-LAST:event_registButtonActionPerformed
                                                        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane productClassScrollPane;
    private javax.swing.JButton registButton;
    private javax.swing.JTextField technicName;
    private javax.swing.JLabel technicNameLabel;
    private javax.swing.JTextField technicNo;
    private javax.swing.JLabel technicNoLabel;
    private javax.swing.JTable technicTable;
    // End of variables declaration//GEN-END:variables
    
    /**
     * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(registButton);
    }
    
    /**
     * èâä˙âªèàóùÇçsÇ§ÅB
     */
    private void init() {
	
        this.showTechnicClasses();
        technicName.setText("");
        technicNo.setText("");
    }
    
    
    /**
     * ï™óﬁÇï\é¶Ç∑ÇÈÅB
     */
    private void showTechnicClasses() {
        SwingUtil.clearTable(technicTable);
        
        DefaultTableModel model	= (DefaultTableModel)technicTable.getModel();
        
        //ï™óﬁÇÃàÍóóÇéÊìæ
        ProductClasses pcs = new ProductClasses();
	pcs.setProductDivision(1);
        
        try {
            pcs.load(SystemInfo.getConnection());
        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        
        for(ProductClass pc : pcs) {
            Vector<Object> temp	= new Vector<>();
            temp.add(pc.getProductClassName());
            temp.add(null);
            temp.add(null);
            temp.add(null);
            temp.add(null);
            temp.add(null);
            temp.add(pc.getProductClassID());
            model.addRow(temp);
        }
    }
    
    /**
     * ìoò^èàóùÇçsÇ§ÅB
     * @return true - ê¨å˜ÅAfalse - é∏îs
     */
    public boolean regist() {
        
        boolean result = true;
        ConnectionWrapper con = null;
        try {
            con = SystemInfo.getConnection();
            
            con.begin();
            
            for (int i = 0; i < technicTable.getRowCount(); i++) {
                Integer price = (Integer)technicTable.getValueAt(i, 1);
                Integer opeTime = (Integer)technicTable.getValueAt(i, 2);
                Boolean isPraiseTime = (Boolean)technicTable.getValueAt(i, 3);
                if (isPraiseTime == null) {
                    isPraiseTime = false;
                }
                Integer praiseTimeLimit = (Integer)technicTable.getValueAt(i, 4);
                Boolean isWeb = (Boolean)technicTable.getValueAt(i, 5);
                if (isWeb == null) {
                    isWeb = false;
                }
                Integer classId = (Integer)technicTable.getValueAt(i, 6);

                //âøäiÇ™ñ¢ê›íËÇÃèÍçáÇÕëŒè€äO
                if (price == null) {
                    continue;
                }
                
                //////////////////
                //ãZèpÉ}ÉXÉ^ÇÃìoò^
                //////////////////
                MstTechnic mstTec = new MstTechnic();
                //ãZèpï™óﬁID
                MstTechnicClass mstTecClass = new MstTechnicClass(classId);
                mstTec.setTechnicClass(mstTecClass);
                //ãZèpÉRÅ[Éh
                mstTec.setTechnicNo(technicNo.getText());
                //ãZèpñº
                mstTec.setTechnicName(technicName.getText());
                //âøäi
                mstTec.setPrice(price.longValue());
                //é{èpéûä‘
                mstTec.setOperationTime(opeTime);
                //è‹î¸ä˙å¿égópóLñ≥
                mstTec.setPraiseTime(isPraiseTime);
                //è‹î¸ä˙å¿Åiì˙Åj
                mstTec.setPraiseTimeLimit(praiseTimeLimit);
                //ÉÇÉoÉCÉãÉtÉâÉO
                mstTec.setMobileFlag(BooleanUtils.toInteger(isWeb));

                //ãZèpÉ}ÉXÉ^ìoò^
                mstTec.registForBulk(con);
                
                //ãZèpIDÇÃéÊìæ
                Integer technicID = mstTec.getTechnicID();
                
                //ãZèpï™óﬁégópíÜÇÃìXï‹ÉäÉXÉgéÊìæ
                ArrayList<Integer> shopList = this.getShopIdList(con, classId);
                
                for (Integer shopId : shopList) {
                    
                    //////////////////////////////
                    //ìXï‹égópãZèpÅEè§ïiÉ}ÉXÉ^Ç…ìoò^
                    //////////////////////////////
                    MstUseProduct mstUseProduct = new MstUseProduct();
                    
                    //ÉVÉáÉbÉvID
                    MstShop mstShop = new MstShop();
                    mstShop.setShopID(shopId);
                    mstUseProduct.setShop(mstShop);
                    
                    //ãÊï™ID
                    mstUseProduct.setProductDivision(1);
                    //è§ïiID
                    mstUseProduct.setProductID(technicID);
                    //âøäi
                    mstUseProduct.setPrice(price.longValue());

                    mstUseProduct.registForBulk(con);
                }
            }
            
        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            result = false;
        } finally {
            if(result) {
                if (con != null) {
                    try {
                        con.commit();
                    } catch (SQLException ex) {
                        Logger.getLogger(MstTechnicRegistBulkPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    result = true;
                }
            } else {
                if (con != null) {
                    try {
                        con.rollback();
                    } catch (SQLException ex) {
                        Logger.getLogger(MstTechnicRegistBulkPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        
        return	result;
    }
    
    /**
     * ãZèpï™óﬁégópíÜÇÃìXï‹ÉäÉXÉgÇï‘Ç∑
     * 
     * @param con
     * @param shopId
     * @return ìXï‹ÉäÉXÉg
     * @throws SQLException 
     */
    private ArrayList<Integer> getShopIdList(ConnectionWrapper con, Integer shopId) throws SQLException {
        
        String strSql = "select x.shop_id from";
        strSql = strSql + "(select a.shop_id, a.product_id from mst_use_product a where a.product_division = 1 and a.delete_date is null) x,";
        strSql = strSql + "(select b.technic_class_id, b.technic_id from mst_technic b where b.technic_class_id = " + shopId.toString() + " and b.delete_date is null) y ";
        strSql = strSql + "where x.product_id = y.technic_id group by x.shop_id";

        ResultSetWrapper rs = con.executeQuery(strSql);
        
        ArrayList<Integer> list = new ArrayList<>();
        try {
            while(rs.next()) {
                list.add(rs.getInt("shop_id"));
            }
        } finally {
            rs.close();
        }
        
        return list;
    }
    /**
     * ì¸óÕÉ`ÉFÉbÉNèàóùÇçsÇ§ÅB
     * @return true - ê¨å˜ÅAfalse - é∏îs
     */
    private boolean checkInput() {
        
        //ãZèpñº
        if (technicName.getText().equals("")) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ãZèpñº"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            technicName.requestFocusInWindow();
            return false;
        }
        //ãZèpNO
        if (technicNo.getText().equals("")) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ãZèpNO"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            technicNo.requestFocusInWindow();
            return false;
        }

        boolean isAllNoPrice = true;
        //ëSåèÅAã‡äzÇ™ñ¢ì¸óÕ
        for (int i = 0; i < technicTable.getRowCount(); i++) {
            Integer price = (Integer)technicTable.getValueAt(i, 1);
            if (price != null) {
                isAllNoPrice = false;
            }
        }
        if (isAllNoPrice) {
            MessageDialog.showMessageDialog(this,
                        "ìoò^ÉfÅ[É^Ç™ë∂ç›ÇµÇ‹ÇπÇÒÅB",
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        //é{èpéûä‘ïKê{É`ÉFÉbÉN
        boolean notEntered = false;
        for (int i = 0; i < technicTable.getRowCount(); i++) {
            Integer price = (Integer)technicTable.getValueAt(i, 1);
            Integer opeTime = (Integer)technicTable.getValueAt(i, 2);
            
            //âøäiÇ™ì¸óÕÇ≥ÇÍÇƒÇ¢ÇÈÅ@äéÇ¬Å@é{èpéûä‘Ç™ñ¢ì¸óÕÇÃèÍçá
            if (price != null && opeTime == null) {
                notEntered = true;
            }
        }
        if (notEntered) {
            MessageDialog.showMessageDialog(this,
                        "é{èpéûä‘Ç™ñ¢ì¸óÕÇÃï™óﬁÇ™Ç†ÇËÇ‹Ç∑ÅB\nâøäiÇì¸óÕÇ≥ÇÍÇΩï™óﬁÇ…ÇÕé{èpéûä‘Çì¸óÕÇµÇƒÇ≠ÇæÇ≥Ç¢ÅB",
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        //è‹î¸ì˙êîïKê{É`ÉFÉbÉN
        boolean notLimit = false;
        for (int i = 0; i < technicTable.getRowCount(); i++) {
            Integer price = (Integer)technicTable.getValueAt(i, 1);
            Integer opeTime = (Integer)technicTable.getValueAt(i, 2);
            Boolean isPraiseTime = (Boolean)technicTable.getValueAt(i, 3);
            if (isPraiseTime == null) {
                isPraiseTime = false;
            }
            Integer praiseTimeLimit = (Integer)technicTable.getValueAt(i, 4);
            
            //âøäiÇ∆é{èpéûä‘Ç™ê›íËçœ
            if (price != null && opeTime != null) {
                if (isPraiseTime && praiseTimeLimit == null) {
                    notLimit = true;
                    break;
                }
            }
        }
        if (notLimit) {
            MessageDialog.showMessageDialog(this,
                        "è‹î¸ì˙êîÇ™ñ¢ì¸óÕÇÃï™óﬁÇ™Ç†ÇËÇ‹Ç∑ÅB\nè‹î¸ä˙å¿Çì¸óÕÇ≥ÇÍÇΩï™óﬁÇ…ÇÕè‹î¸ì˙êîÇì¸óÕÇµÇƒÇ≠ÇæÇ≥Ç¢ÅB",
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    public class IntegerCellCustomEditor extends DefaultCellEditor {
        
        JTextField textField = new JTextField();

        public IntegerCellCustomEditor(JTextField field) {
            super(field);
            this.textField = field;
            textField.setHorizontalAlignment(JTextField.RIGHT);
            ((PlainDocument)textField.getDocument()).setDocumentFilter(
                            new CustomFilter(9, CustomFilter.INTEGER));

            textField.addFocusListener(new FocusAdapter() {
                @Override
                public void focusGained(FocusEvent e) {
                    textField.selectAll();
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                                                 boolean isSelected, int row, int column){
            if (value != null) {
                textField.setText(value.toString());
            } else {
                textField.setText("");
            }

            textField.selectAll();
            return textField;
        }

        @Override
        public Integer getCellEditorValue() {
            if (textField.getText().equals("")) {
                return null;
            } else {
                return Integer.parseInt(textField.getText());
            }            
        }
        
        /**
         * ì¸óÕè„å¿ï∂éöêîÇÃê›íË
         * @param limit è„å¿ï∂éöêî
         */
        public void setLimit(int limit) {
            ((PlainDocument)textField.getDocument()).setDocumentFilter(new CustomFilter(limit, CustomFilter.INTEGER));
        }
    }
}
