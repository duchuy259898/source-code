/*
 * MstStaffPanel.java
 *
 * Created on 2006/10/20, 10:12
 */

package com.geobeck.sosia.pos.basicinfo.company;

import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.search.company.*;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import javax.swing.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.search.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.basicinfo.*;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import java.awt.event.HierarchyEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  katagiri
 */
public class MstStaffPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	//IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
	private boolean isLoadDisplay= false;
	//IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
	/** Creates new form MstStaffPanel */
	public MstStaffPanel()
	{
		super();
                this.init();
                initComponents();
		if (SystemInfo.getDatabase().equals("pos_hair_rizap") || SystemInfo.getDatabase().equals("pos_hair_rizap_bak")) {
                    staffID.setVisible(true);
                    jLabel13.setVisible(true);  
                }
                else
                {
                     staffID.setVisible(false);
                     jLabel13.setVisible(false);
                     staffID.setText("");
                }
                
                for(MstShop ms : shopList)
		{
			shop.addItem(ms);
		}
		
                //IVS_TMTrong start add 2015/09/22 New request #42800
                if(!SystemInfo.isGroup()){
                    MstShop loginShop = SystemInfo.getCurrentShop();
                    shop.setSelectedItem(loginShop);
                }
                //IVS_TMTrong end add 2015/09/22 New request #42800
                
		//SystemInfo.initGroupShopComponents(shop, 2);
		addMouseCursorChange();
                //IVS_vtnhan start edit 20140707 MASHU_スタッフ情報登録
		//this.setSize(407, 535);
                this.setSize(407, 700);
                //IVS_vtnhan end edit 20140707 MASHU_スタッフ情報登録
		this.setPath("基本設定 >> 会社マスタ");
		this.setTitle("スタッフ情報登録");
		this.setListener();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        mailAddress = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)mailAddress.getDocument()).setDocumentFilter(
            new CustomFilter(64, CustomFilter.MAIL_ADDRESS));
        cellularNumber = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)cellularNumber.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.PHONE_NUMBER));
        phoneNumber = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)phoneNumber.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.PHONE_NUMBER));
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        address1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address1.getDocument()).setDocumentFilter(
            new CustomFilter(16));
        postalCode = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createPostalCodeFormatter());
        searchAddressButton = new javax.swing.JButton();
        address2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address2.getDocument()).setDocumentFilter(
            new CustomFilter(64));
        address3 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address3.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        address4 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address4.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        shopLabel = new javax.swing.JLabel();
        shop = new javax.swing.JComboBox();
        staffClass = new JComboBox(staffClassList.toArray());
        staffKana1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)staffKana1.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        staffKana2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)staffKana2.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        staffName1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)staffName1.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        staffName2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)staffName2.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        jPanel6 = new javax.swing.JPanel();
        staffNo = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)staffNo.getDocument()).setDocumentFilter(
            new CustomFilter(10, CustomFilter.ALPHAMERIC));
        jLabel1 = new javax.swing.JLabel();
        showButton = new javax.swing.JButton();
        jpnLstMstRelation = new javax.swing.JPanel();
        jlblListRelationStaff = new javax.swing.JLabel();
        referenceLstStaffRelationScrollPane = new javax.swing.JScrollPane();
        tblListStaffRelation = new com.geobeck.swing.JTableEx();
        jLabel13 = new javax.swing.JLabel();
        staffID = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)staffID.getDocument()).setDocumentFilter(
            new CustomFilter(10, CustomFilter.ALPHAMERIC));
        jLabel14 = new javax.swing.JLabel();
        txtDisplayName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)mailAddress.getDocument()).setDocumentFilter(
            new CustomFilter(64, CustomFilter.MAIL_ADDRESS));
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();

        setFocusCycleRoot(true);
        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });
        setLayout(null);

        jPanel1.setOpaque(false);

        prevButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left_off.jpg"));
        prevButton.setBorderPainted(false);
        prevButton.setContentAreaFilled(false);
        prevButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left_on.jpg"));
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right_off.jpg"));
        nextButton.setBorderPainted(false);
        nextButton.setContentAreaFilled(false);
        nextButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right_on.jpg"));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        searchButton.setIcon(SystemInfo.getImageIcon("/button/common/view_list_off.jpg"));
        searchButton.setBorderPainted(false);
        searchButton.setContentAreaFilled(false);
        searchButton.setFocusable(false);
        searchButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/view_list_on.jpg"));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        clearButton.setIcon(SystemInfo.getImageIcon("/button/common/new_registration_off.jpg"));
        clearButton.setBorderPainted(false);
        clearButton.setContentAreaFilled(false);
        clearButton.setFocusable(false);
        clearButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/new_registration_on.jpg"));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(prevButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(nextButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(searchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(clearButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(prevButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(nextButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(searchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(clearButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        add(jPanel1);
        jPanel1.setBounds(10, 10, 360, 30);

        jPanel2.setOpaque(false);

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setContentAreaFilled(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setContentAreaFilled(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setEnabled(false);
        deleteButton.setFocusable(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        add(jPanel2);
        jPanel2.setBounds(10, 45, 295, 30);

        jPanel3.setOpaque(false);

        jLabel8.setText("メールアドレス");

        jLabel7.setText("携帯番号");

        jLabel6.setText("電話番号");

        mailAddress.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        mailAddress.setColumns(64);

        cellularNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cellularNumber.setColumns(20);

        phoneNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        phoneNumber.setColumns(20);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, cellularNumber, 0, 1, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, phoneNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(mailAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(1, 1, 1))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(phoneNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(cellularNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(mailAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        add(jPanel3);
        jPanel3.setBounds(10, 385, 385, 90);

        jPanel4.setOpaque(false);

        jLabel5.setText("都道府県");

        jLabel12.setText("マンション名等");

        jLabel11.setText("町域・番地");

        jLabel9.setText("市区町村");

        address1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address1.setColumns(16);
        address1.setInputKanji(true);

        postalCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        postalCode.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        postalCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                postalCodeFocusLost(evt);
            }
        });

        searchAddressButton.setIcon(SystemInfo.getImageIcon("/button/search/search_address_off.jpg"));
        searchAddressButton.setBorderPainted(false);
        searchAddressButton.setContentAreaFilled(false);
        searchAddressButton.setFocusable(false);
        searchAddressButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_address_on.jpg"));
        searchAddressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAddressButtonActionPerformed(evt);
            }
        });

        address2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address2.setColumns(64);
        address2.setInputKanji(true);

        address3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address3.setColumns(128);
        address3.setInputKanji(true);

        address4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address4.setColumns(128);
        address4.setInputKanji(true);

        jLabel4.setText("郵便番号");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 233, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(address4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
            .add(jPanel4Layout.createSequentialGroup()
                .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(address3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(address3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(address4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        add(jPanel4);
        jPanel4.setBounds(10, 230, 385, 150);

        jPanel5.setOpaque(false);

        jLabel10.setText("スタッフ区分");

        jLabel3.setText("フリガナ");

        jLabel2.setText("氏名");

        shopLabel.setText("所属店舗");

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        /*
        shop.setRenderer(new GroupComboBoxCellRenderer());
        */

        staffClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        if(0 < staffClass.getItemCount())
        staffClass.setSelectedIndex(0);

        staffKana1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffKana1.setColumns(20);
        staffKana1.setInputKanji(true);

        staffKana2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffKana2.setColumns(20);
        staffKana2.setInputKanji(true);

        staffName1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffName1.setColumns(20);
        staffName1.setInputKanji(true);

        staffName2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffName2.setColumns(20);
        staffName2.setInputKanji(true);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(shop, 0, 228, Short.MAX_VALUE))
            .add(jPanel5Layout.createSequentialGroup()
                .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(staffClass, 0, 227, Short.MAX_VALUE))
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(staffName1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(staffKana1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(staffName2, 0, 1, Short.MAX_VALUE)
                    .add(staffKana2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(staffClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(staffName1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(staffName2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(staffKana1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(staffKana2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargeShopActionPerformed(evt);
            }
        });

        add(jPanel5);
        jPanel5.setBounds(10, 110, 312, 120);

        jPanel6.setOpaque(false);

        staffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffNo.setColumns(10);
        staffNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                staffNoFocusLost(evt);
            }
        });

        jLabel1.setText("スタッフNo.");

        showButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
        showButton.setBorderPainted(false);
        showButton.setContentAreaFilled(false);
        showButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(staffNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel1)
                .add(staffNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        add(jPanel6);
        jPanel6.setBounds(10, 80, 310, 30);

        jpnLstMstRelation.setOpaque(false);

        jlblListRelationStaff.setText("担当業態");

        tblListStaffRelation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "業態名", "選択", "業態ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblListStaffRelation.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tblListStaffRelation.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(tblListStaffRelation, SystemInfo.getTableHeaderRenderer());
        tblListStaffRelation.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(tblListStaffRelation);
        referenceLstStaffRelationScrollPane.setViewportView(tblListStaffRelation);
        if (tblListStaffRelation.getColumnModel().getColumnCount() > 0) {
            tblListStaffRelation.getColumnModel().getColumn(0).setMinWidth(245);
            tblListStaffRelation.getColumnModel().getColumn(0).setMaxWidth(245);
            tblListStaffRelation.getColumnModel().getColumn(2).setMinWidth(0);
            tblListStaffRelation.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        jLabel13.setText("スタッフID");

        staffID.setEditable(false);
        staffID.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffID.setColumns(10);
        staffID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                staffIDFocusLost(evt);
            }
        });

        jLabel14.setText("表示名");

        txtDisplayName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtDisplayName.setColumns(64);

        jLabel15.setText("※表示名はレジート及びWEB予約の表示名となります。");

        jLabel16.setText("    未設定の場合は氏名が表示されます。");

        org.jdesktop.layout.GroupLayout jpnLstMstRelationLayout = new org.jdesktop.layout.GroupLayout(jpnLstMstRelation);
        jpnLstMstRelation.setLayout(jpnLstMstRelationLayout);
        jpnLstMstRelationLayout.setHorizontalGroup(
            jpnLstMstRelationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpnLstMstRelationLayout.createSequentialGroup()
                .add(jlblListRelationStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(referenceLstStaffRelationScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .add(jpnLstMstRelationLayout.createSequentialGroup()
                .add(jLabel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(staffID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
            .add(jpnLstMstRelationLayout.createSequentialGroup()
                .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(txtDisplayName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jpnLstMstRelationLayout.createSequentialGroup()
                .add(86, 86, 86)
                .add(jpnLstMstRelationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel15)
                    .add(jLabel16))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jpnLstMstRelationLayout.setVerticalGroup(
            jpnLstMstRelationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpnLstMstRelationLayout.createSequentialGroup()
                .add(4, 4, 4)
                .add(jpnLstMstRelationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(staffID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpnLstMstRelationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(txtDisplayName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel15)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel16)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpnLstMstRelationLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jlblListRelationStaff)
                    .add(referenceLstStaffRelationScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        add(jpnLstMstRelation);
        jpnLstMstRelation.setBounds(10, 480, 385, 270);
    }// </editor-fold>//GEN-END:initComponents

	private void showButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showButtonActionPerformed
	{//GEN-HEADEREND:event_showButtonActionPerformed
		//this.setCustomerByNo();
		if(this.loadStaff())	this.showData();
	}//GEN-LAST:event_showButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		this.registData(false);
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
		this.registData(true);
	}//GEN-LAST:event_addButtonActionPerformed

	private void nextButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextButtonActionPerformed
	{//GEN-HEADEREND:event_nextButtonActionPerformed
		this.moveStaff(true);
	}//GEN-LAST:event_nextButtonActionPerformed

	private void prevButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_prevButtonActionPerformed
	{//GEN-HEADEREND:event_prevButtonActionPerformed
		this.moveStaff(false);
	}//GEN-LAST:event_prevButtonActionPerformed

	private void searchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchButtonActionPerformed
	{//GEN-HEADEREND:event_searchButtonActionPerformed
		SystemInfo.getLogger().log(Level.INFO, "スタッフ検索");
		SearchStaffDialog ssd = new SearchStaffDialog(parentFrame, true);
		ssd.setVisible(true);
		
		//スタッフが選択された場合
		if(ssd.getSelectedStaff() != null)
		{
                    //staffNo.setName(ssd.getSelectedStaff().getStaffID().toString());
                    staffNo.setText(ssd.getSelectedStaff().getStaffNo());
                    staffID.setText(ssd.getSelectedStaff().getStaffID().toString());
                    if (SystemInfo.getDatabase().equals("pos_hair_rizap") || SystemInfo.getDatabase().equals("pos_hair_rizap_bak")) {
                        staffID.setVisible(true);
                        jLabel13.setVisible(true);
                        staffID.setText(ssd.getSelectedStaff().getStaffID() == null ? "" : ssd.getSelectedStaff().getStaffID().toString());
                    }
                    else
                    {
                         staffID.setVisible(false);
                         jLabel13.setVisible(false);
                    }
			
                    this.loadStaff();
                    this.showData();
			
			staffName1.requestFocusInWindow();
		}
		
		ssd = null;
	}//GEN-LAST:event_searchButtonActionPerformed

	private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
	{//GEN-HEADEREND:event_clearButtonActionPerformed
		this.clear();
	}//GEN-LAST:event_clearButtonActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void searchAddressButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchAddressButtonActionPerformed
	{//GEN-HEADEREND:event_searchAddressButtonActionPerformed
		SystemInfo.getLogger().log(Level.INFO, "住所検索");
		SearchAddressDialog		sa	=	new SearchAddressDialog(parentFrame, true);
		sa.setVisible(true);
		
		if(!sa.getSelectedPrefecture().equals(""))
		{
			postalCode.setText(sa.getSelectedPostalCode());
			address1.setText(sa.getSelectedPrefecture());
			address2.setText(sa.getSelectedCity());
			address3.setText(sa.getSelectedTown().replaceAll("（.+", ""));
		}
		
		sa = null;
	}//GEN-LAST:event_searchAddressButtonActionPerformed

	private void postalCodeFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_postalCodeFocusLost
	{//GEN-HEADEREND:event_postalCodeFocusLost
		String		temp	=	postalCode.getText().replaceAll("[-_]", "");
		
		//郵便番号が入録されていない場合
		if(temp.equals("") || temp.length() != 7)
		{
			address1.setText("");
			address2.setText("");
			address3.setText("");
		}
		else
		{
			AddressUtil		au	=	new	AddressUtil();
			
			au.setPostalCode(temp);
			
			try
			{
				ConnectionWrapper	con	=	SystemInfo.getBaseConnection();
				
				if(au.getDataByPostalCode(con))
				{
					address1.setText(au.getPrefectureName());
					address2.setText(au.getCityName());
					address3.setText(au.getTownName().replaceAll("（.+", ""));
				}
				else
				{
					address1.setText("");
					address2.setText("");
					address3.setText("");
				}
			}
			catch(SQLException e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
	}//GEN-LAST:event_postalCodeFocusLost

	private void staffNoFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_staffNoFocusLost
	{//GEN-HEADEREND:event_staffNoFocusLost
		
	}//GEN-LAST:event_staffNoFocusLost

    private void staffIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_staffIDFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_staffIDFocusLost

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
        //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す  
        if ((evt.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
            if (!evt.getComponent().isDisplayable() && isLoadDisplay) {
                SystemInfo.MessageDialogGB(this, this.getTitle());
            }
        }
        //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
    } //GEN-LAST:event_formHierarchyChanged
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private com.geobeck.swing.JFormattedTextFieldEx address1;
    private com.geobeck.swing.JFormattedTextFieldEx address2;
    private com.geobeck.swing.JFormattedTextFieldEx address3;
    private com.geobeck.swing.JFormattedTextFieldEx address4;
    private com.geobeck.swing.JFormattedTextFieldEx cellularNumber;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel jlblListRelationStaff;
    private javax.swing.JPanel jpnLstMstRelation;
    private com.geobeck.swing.JFormattedTextFieldEx mailAddress;
    private javax.swing.JButton nextButton;
    private com.geobeck.swing.JFormattedTextFieldEx phoneNumber;
    private com.geobeck.swing.JFormattedTextFieldEx postalCode;
    private javax.swing.JButton prevButton;
    private javax.swing.JScrollPane referenceLstStaffRelationScrollPane;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton searchAddressButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JButton showButton;
    private javax.swing.JComboBox staffClass;
    private com.geobeck.swing.JFormattedTextFieldEx staffID;
    private com.geobeck.swing.JFormattedTextFieldEx staffKana1;
    private com.geobeck.swing.JFormattedTextFieldEx staffKana2;
    private com.geobeck.swing.JFormattedTextFieldEx staffName1;
    private com.geobeck.swing.JFormattedTextFieldEx staffName2;
    private com.geobeck.swing.JFormattedTextFieldEx staffNo;
    private javax.swing.JTable tblListStaffRelation;
    private com.geobeck.swing.JFormattedTextFieldEx txtDisplayName;
    // End of variables declaration//GEN-END:variables
	
	private	MstStaff		staff	=	new MstStaff();
	
	private ArrayList<MstShop>			shopList		=	new ArrayList<MstShop>();
	
	private ArrayList<MstStaffClass>	staffClassList	=	new ArrayList<MstStaffClass>();
        //IVS_vtnhan start add 20140707 MASHU_スタッフ情報登録
        private MstStaffRelations		msr		=	new MstStaffRelations();
        private	MstStaffRelation		staffRelation	=	new MstStaffRelation();
        //IVS_vtnhan end add 20140707 MASHU_スタッフ情報登録
	/**
	 * スタッフ登録画面用FocusTraversalPolicy
	 */
	private	MstStaffFocusTraversalPolicy	ftp	=
			new MstStaffFocusTraversalPolicy();
	
	/**
	 * スタッフ登録画面用FocusTraversalPolicyを取得する。
	 * @return スタッフ登録画面用FocusTraversalPolicy
	 */
	public MstStaffFocusTraversalPolicy	getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(prevButton);
		SystemInfo.addMouseCursorChange(nextButton);
		SystemInfo.addMouseCursorChange(searchButton);
		SystemInfo.addMouseCursorChange(searchAddressButton);
		SystemInfo.addMouseCursorChange(addButton);
		SystemInfo.addMouseCursorChange(renewButton);
		SystemInfo.addMouseCursorChange(deleteButton);
		SystemInfo.addMouseCursorChange(clearButton);
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
		address1.addKeyListener(SystemInfo.getMoveNextField());
		address1.addFocusListener(SystemInfo.getSelectText());
		address2.addKeyListener(SystemInfo.getMoveNextField());
		address2.addFocusListener(SystemInfo.getSelectText());
		address3.addKeyListener(SystemInfo.getMoveNextField());
		address3.addFocusListener(SystemInfo.getSelectText());
		address4.addKeyListener(SystemInfo.getMoveNextField());
		address4.addFocusListener(SystemInfo.getSelectText());
		cellularNumber.addKeyListener(SystemInfo.getMoveNextField());
		cellularNumber.addFocusListener(SystemInfo.getSelectText());
		mailAddress.addKeyListener(SystemInfo.getMoveNextField());
		mailAddress.addFocusListener(SystemInfo.getSelectText());
		phoneNumber.addKeyListener(SystemInfo.getMoveNextField());
		phoneNumber.addFocusListener(SystemInfo.getSelectText());
		postalCode.addKeyListener(SystemInfo.getMoveNextField());
		postalCode.addFocusListener(SystemInfo.getSelectText());
		shop.addKeyListener(SystemInfo.getMoveNextField());
		staffClass.addKeyListener(SystemInfo.getMoveNextField());
		staffNo.addKeyListener(SystemInfo.getMoveNextField());
		staffNo.addFocusListener(SystemInfo.getSelectText());
		staffKana1.addKeyListener(SystemInfo.getMoveNextField());
		staffKana1.addFocusListener(SystemInfo.getSelectText());
		staffKana2.addKeyListener(SystemInfo.getMoveNextField());
		staffKana2.addFocusListener(SystemInfo.getSelectText());
		staffName1.addKeyListener(SystemInfo.getMoveNextField());
		staffName1.addFocusListener(SystemInfo.getSelectText());
		staffName2.addKeyListener(SystemInfo.getMoveNextField());
		staffName2.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
		this.loadShopList();
		this.loadStaffClassList();
                
	}
      
        //IVS_vtnhan start add 20140707 MASHU_スタッフ情報登録
        /**
	 * function show data on table 
	 */
	private void showDataMstStaffRelation()
	{
               
            SwingUtil.clearTable(tblListStaffRelation);
            DefaultTableModel model	= (DefaultTableModel)tblListStaffRelation.getModel();
	
		//全行削除
		model.setRowCount(0);
                if(staff != null){
                     MstShop ms = new MstShop();
                     ms = (MstShop)shop.getSelectedItem();
                        if(staff.getShopID() == ms.getShopID()){
                            if(msr != null){
                                for(MstStaffRelation mtc : msr)
                                {
                                    if(mtc != null){
                                        Vector<Object> temp	= new Vector<Object>();
                                        temp.add(mtc.getShopClassName());
                                        temp.add(mtc.getIsCheck());
                                        temp.add(mtc.getShopCategoryId());
                                        model.addRow(temp);  
                                    }

                                }
                            }
                        }else{
                            if(msr != null){
                                for(MstStaffRelation mtc : msr)
                                {
                                    if(mtc != null){
                                        Vector<Object> temp	= new Vector<Object>();
                                        temp.add(mtc.getShopClassName());
                                        temp.add(false);
                                        temp.add(mtc.getShopCategoryId());
                                        model.addRow(temp);  
                                    }

                                }
                            }
                        }
                }else{
                    if(msr != null){
                                for(MstStaffRelation mtc : msr)
                                {
                                    if(mtc != null){
                                        Vector<Object> temp	= new Vector<Object>();
                                        temp.add(mtc.getShopClassName());
                                        temp.add(false);
                                        temp.add(mtc.getShopCategoryId());
                                        model.addRow(temp);  
                                    }

                                }
                            }
                }
                
		
     
	}
        //IVS_vtnhan end add 20140707 MASHU_スタッフ情報登録

	/**
	 * 店舗情報のリストを読み込む。
	 */
	private void loadShopList()
	{
		shopList.clear();
		
		if(SystemInfo.getGroup().getGroupID() != 0)
		{
			shopList.add(new MstShop());
		}
		
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		try
		{
                    
			ResultSetWrapper	rs	=	con.executeQuery(this.getShopListSQL());
			
			while(rs.next())
			{
				MstShop		ms	=	new MstShop();
				
				ms.setData(rs);
				
				shopList.add(ms);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
        
        //IVS_vtnhan start add 20140707 MASHU_スタッフ情報登録
        private void loadMstStaffRelationList(){
            try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
                        MstShop		ms	= (MstShop)shop.getSelectedItem();
                        msr.setShopId(ms.getShopID());
                        msr.setStaff(staff);
			msr.load(con);
		}
		catch(Exception e)
		{

			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		this.showDataMstStaffRelation();
        }
        //IVS_vtnhan end add 20140707 MASHU_スタッフ情報登録
        
	
	/**
	 * スタッフ区分のリストを読み込む。
	 */
	private void loadStaffClassList()
	{
		staffClassList.clear();
		
		staffClassList.add(new MstStaffClass());
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		try
		{
			ResultSetWrapper	rs	=	con.executeQuery(this.getStaffClassListSQL());
			
			while(rs.next())
			{
				MstStaffClass	msc	=	new MstStaffClass();
				
				msc.setData(rs);
				
				staffClassList.add(msc);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * 店舗情報のリストを取得するＳＱＬ文を取得する。
	 * @return 店舗情報のリストを取得するＳＱＬ文
	 */
	private String getShopListSQL()
	{
		return	"select * from mst_shop where delete_date is null order by shop_id";
	}
	
	/**
	 * スタッフ区分のリストを取得するＳＱＬ文を取得する。
	 * @return スタッフ区分のリストを取得するＳＱＬ文
	 */
	private String getStaffClassListSQL()
	{
		return	"select * from mst_staff_class where delete_date is null order by display_seq";
	}
	
	/**
	 * 入力項目をクリアする。
	 */
	private void clear()
	{
		staff	=	null;
		staff	=	new MstStaff();
		staff.setShop(shopList.get(0));
		this.showData();
	}
	
	/**
	 * スタッフマスタからデータを読み込む。
	 * @return 成功時trueを返す。
	 */
	private boolean loadStaff()
	{
		staff.clear();
        staff.setStaffNo(staffNo.getText());
        //Luc start edit 20160127 #47248
        //staff.setStaffID(Integer.parseInt(staffID.getText()));
        try {
        staff.setStaffID(Integer.parseInt(staffID.getText()));
        }catch(Exception e){}
        //Luc end edit 20160127 #47248
        //IVS_LVTu start delete 2015/10/06 Bug #43231
//        if (staffNo.getName() != null) {
//            staff.setStaffID(Integer.valueOf(staffNo.getName()));
//        }
          //IVS_LVTu end delete 2015/10/06 Bug #43231
		
		try
		{
                    if (staff.getStaffID() != null) {

			staff = SelectSameNoData.getMstStaffByID(
					parentFrame,
					SystemInfo.getConnection(),
					staff.getStaffID());
                        
                    } else {

			staff = SelectSameNoData.getMstStaffByNo(
					parentFrame,
					SystemInfo.getConnection(),
					staffNo.getText());
                    }
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
         
		return	true;
	}
	
	/**
	 * staffのデータを表示する。
	 */
	private void showData()
	{
		if(staff == null)	return;
		
		staffNo.setText(staff.getStaffNo());
                if (SystemInfo.getDatabase().equals("pos_hair_rizap") || SystemInfo.getDatabase().equals("pos_hair_rizap_bak")) {
                    staffID.setVisible(true);
                    jLabel13.setVisible(true);
                    staffID.setText(staff.getStaffID() == null ? "" : staff.getStaffID().toString());
                }
                else
                {
                     staffID.setVisible(false);
                     jLabel13.setVisible(false);
                     staffID.setText("");
                }
		staffName1.setText(staff.getStaffName(0));
		staffName2.setText(staff.getStaffName(1));
		staffKana1.setText(staff.getStaffKana(0));
		staffKana2.setText(staff.getStaffKana(1));
		postalCode.setText((staff.getPostalCode() == null || staff.getPostalCode().trim().equals("") ? "" : staff.getPostalCode()));
		address1.setText((staff.getAddress(0) == null ? "" : staff.getAddress(0)));
		address2.setText((staff.getAddress(1) == null ? "" : staff.getAddress(1)));
		address3.setText((staff.getAddress(2) == null ? "" : staff.getAddress(2)));
		address4.setText((staff.getAddress(3) == null ? "" : staff.getAddress(3)));
		phoneNumber.setText((staff.getPhoneNumber() == null ? "" : staff.getPhoneNumber()));
		cellularNumber.setText((staff.getCellularNumber() == null ? "" : staff.getCellularNumber()));
		mailAddress.setText((staff.getMailAddress() == null ? "" : staff.getMailAddress()));
                // vtbphuong start add 20150513
                txtDisplayName.setText(staff.getDisplayName() == null ? "": staff.getDisplayName() );
                // vtbphuong end add 20150513 
		this.setSelectedShop();
		this.setSelectedStaffClass();
		
		this.changeButtonEnabled(staff.getStaffID() != null);
                
	}
	
	/**
	 * ボタンのEnabledを変更する。
	 * @param enabled Enabled
	 */
	private void changeButtonEnabled(boolean enabled)
	{
//		addButton.setEnabled(!enabled);
		renewButton.setEnabled(enabled);
		deleteButton.setEnabled(enabled);
	}
	
	
	/**
	 * 選択された店舗をセットする。
	 */
	private void setSelectedShop()
	{
		shop.setSelectedIndex(0);
		
		for(int i = 0; i < shopList.size(); i ++)
		{
			MstShop		ms	=	shopList.get(i);
			
			if(ms != null && staff != null && staff.getShop() != null &&
					ms.getShopID() == staff.getShop().getShopID())
			{
				shop.setSelectedIndex(i);
			}
		}
	}
	
	
	/**
	 * 選択されたスタッフ区分をセットする。
	 */
	private void setSelectedStaffClass()
	{
		if(staffClass.getItemCount() <= 0)	return;
		
		staffClass.setSelectedIndex(0);
		
		int		index	=	0;
		
		for(MstStaffClass msc : staffClassList)
		{
                        //IVS_LVTu start edit 2015/10/06 Bug #43156
			if(msc != null && staff != null && staff.getShop() != null &&  staff.getStaffClass() != null &&
					msc.getStaffClassID() != null && msc.getStaffClassID().equals(staff.getStaffClass().getStaffClassID()))
			{
				staffClass.setSelectedIndex(index);
			}
                        //IVS_LVTu end edit 2015/10/06 Bug #43156
			
			index	++;
		}
	}
	
	/**
	 * 入力チェックを行う。
	 * @return 成功時trueを返す。
	 */
	private boolean checkInput(boolean isAdd)
	{
		//スタッフNo.
		if(staffNo.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "スタッフNo."),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			staffNo.requestFocusInWindow();
			return	false;
		}
		if(isAdd)
		{
			MstStaff	temp	=	new MstStaff();
			temp.setStaffNo(staffNo.getText());
			try
			{
				if(temp.loadByNo(SystemInfo.getConnection()))
				{
					MessageDialog.showMessageDialog(this,
							MessageUtil.getMessage(MessageUtil.ERROR_SAME_NO_EXIST, "スタッフコード"),
							this.getTitle(),
							JOptionPane.ERROR_MESSAGE);
					staffNo.requestFocusInWindow();
					return	false;
				}
			}
			catch(SQLException e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		
		//スタッフ名
		if(staffName1.getText().equals("") && staffName2.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "スタッフ名"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			staffName1.requestFocusInWindow();
			return	false;
		}
		
		this.setData();
		
		return	true;
	}
	
	/**
	 * staffに入力されたデータをセットする。
	 */
	private void setData()
	{
		this.staff.setStaffNo(this.staffNo.getText());
		this.staff.setStaffName(0, this.staffName1.getText());
		this.staff.setStaffName(1, this.staffName2.getText());
		this.staff.setStaffKana(0, this.staffKana1.getText());
		this.staff.setStaffKana(1, this.staffKana2.getText());
		this.staff.setPostalCode(this.getPostalCode());
		this.staff.setAddress(0, this.address1.getText());
		this.staff.setAddress(1, this.address2.getText());
		this.staff.setAddress(2, this.address3.getText());
		this.staff.setAddress(3, this.address4.getText());
		this.staff.setPhoneNumber(this.phoneNumber.getText());
		this.staff.setCellularNumber(this.cellularNumber.getText());
		this.staff.setMailAddress(this.mailAddress.getText());
		this.staff.setShop((MstShop)this.shop.getSelectedItem());
		this.staff.setShop(((MstShop)shop.getSelectedItem()));
		this.staff.setStaffClass((staffClass.getSelectedIndex() == -1 ?
				null : (MstStaffClass)this.staffClass.getSelectedItem()));
                // vtbphuong start add 20150513
                this.staff.setDisplayName(this.txtDisplayName.getText());
                // vtbphuong start add 20150513
                
	}
	
	/**
	 * 入力されている郵便番号を取得する。
	 * @return 入力されている郵便番号
	 */
	private String getPostalCode()
	{
		return	this.postalCode.getText().replaceAll("[-_]", "");
	}
	
	/**
	 * データを登録する。
	 */
	private void registData(boolean isAdd)
	{
		//入力チェック
		if(!this.checkInput(isAdd))
		{
			return;
		}
		
		if(isAdd)
		{
			staff.setStaffID(null);
		}
		
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		if(con == null)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_CONNECT_FAILED),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		try
		{
			con.begin();
			
			if(registStaff(con))
			{
				con.commit();
                               //IVS_vtnhan start add 20140707 MASHU_スタッフ情報登録
                                MstShop ms = new MstShop();
                                ms = (MstShop)shop.getSelectedItem();

                                if(ms.getShopID() != null){

                                    registStaffRelation(con , isAdd);  
                                    SwingUtil.clearTable(tblListStaffRelation);
                                    loadMstStaffRelationList();
                                   
                                }


                                //IVS_vtnhan end add 20140707 MASHU_スタッフ情報登録
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
						this.getTitle(),
						JOptionPane.INFORMATION_MESSAGE);
				//IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
				isLoadDisplay = true;
				//IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
			}
			else
			{
				con.rollback();
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "スタッフ情報"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * スタッフマスタにデータを登録する。
	 * @param con コネクション
	 * @return 成功時trueを返す。
	 */
	private boolean registStaff(ConnectionWrapper con)
	{
		try
		{
			return	this.staff.regist(con);
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			return	false;
		}
	}
	
	
	/**
	 * 削除処理を行う。
	 */
	private void delete()
	{
		//スタッフIDを取得
		staff.setStaffNo(staffNo.getText());
		
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		if(con == null)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_CONNECT_FAILED),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		try
		{
			con.begin();
			//IVS_vtnhan start add 20140707 MASHU_スタッフ情報登録
                        MstShop ms = new MstShop();
                        ms = (MstShop)shop.getSelectedItem();

                        if(ms.getShopID() != null){





                             if(ms.getUseShopCategory() == 1){
                                    staffRelation.setStaffID(staff.getStaffID());
                                    if(staffRelation.delete(con)){
                                        SwingUtil.clearTable(tblListStaffRelation);
                                    }
                                    

                            }
                        }
                       
                       //IVS_vtnhan end add 20140707 MASHU_スタッフ情報登録
			if(staff.delete(con))
			{                               
				con.commit();
				this.clear();
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.INFO_DELETE_SUCCESS),
						this.getTitle(),
						JOptionPane.INFORMATION_MESSAGE);
                //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
                isLoadDisplay = true;
                //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
			}
			else
			{
				con.rollback();
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED),
						this.getTitle(),
						JOptionPane.INFORMATION_MESSAGE);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
        
        //IVS_vtnhan start add 20140707 MASHU_スタッフ情報登録
        /**
         * fuction regist data into table mst_staff_relation
         * @param con
         * @param isAdd
         * @return 
         */
        private boolean registStaffRelation(ConnectionWrapper con, boolean  isAdd)
	{
		try
		{
                    
                    if(isAdd){
                        staff.setStaffID(staff.selectMaxStaffId(con));
                    }
                    
                    MstStaffRelation relation = new MstStaffRelation();
                    relation.setStaffID(staff.getStaffID());
                    relation.delete(con);
                    if(staff != null){
                            if(staff.getStaffID() != null){
                                
                                 for(int i=0; i< tblListStaffRelation.getRowCount(); i++){
                                    relation = new MstStaffRelation();
                                    relation.setStaffID(staff.getStaffID());
                                    Integer shopCategoryId = (Integer)tblListStaffRelation.getModel().getValueAt(i, 2);
                                    relation.setShopCategoryId(shopCategoryId);
                                    String check = tblListStaffRelation.getModel().getValueAt(i, 1).toString();

                                    if(check.equals("true")){
                                        relation.setIsCheck(true);
                                    }else{
                                        relation.setIsCheck(false);
                                    }
                                    boolean result = relation.regist(con);
                                    if(!result){
                                        return result;
                                    }
                                        
                                }
                            }
                    }
                   
                    return true;
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			return	false;
		}
	}
        
       /**
         * change combo
         * @param evt 
         */
         private void chargeShopActionPerformed(java.awt.event.ActionEvent evt) {   
            MstShop ms = new MstShop();
            ms = (MstShop)shop.getSelectedItem();
            SwingUtil.clearTable(tblListStaffRelation);
            if(ms.getShopID() != null){

                if(ms.getUseShopCategory() == 1){
                    
                    jlblListRelationStaff.setVisible(true);
                    referenceLstStaffRelationScrollPane.setVisible(true);
                    this.tblListStaffRelation.setVisible(true);
                    SwingUtil.clearTable(tblListStaffRelation);
                    this.loadMstStaffRelationList();
                }else{
                    
                    jlblListRelationStaff.setVisible(false);
                    referenceLstStaffRelationScrollPane.setVisible(false);
                    this.tblListStaffRelation.setVisible(false);
                }
            }else{
                jlblListRelationStaff.setVisible(false);
                referenceLstStaffRelationScrollPane.setVisible(false);
                 this.tblListStaffRelation.setVisible(false);

            }
         


        }   
        //IVS_vtnhan end add 20140707 MASHU_スタッフ情報登録
	
	/**
	 * 次（前）のスタッフに移動する。
	 * @param isNext true - 次のスタッフ
	 */
	private void moveStaff(boolean isNext)
	{
		try
		{
			staff.moveStaff(SystemInfo.getConnection(), isNext);
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		this.showData();
	}
	
	
	/**
	 * スタッフ登録画面用FocusTraversalPolicy
	 */
	private class MstStaffFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(staffNo))
			{
				return shop;
			}
                        else if (aComponent.equals(shop))
			{
				return staffClass;
			}
                         else if (aComponent.equals(staffClass))
			{
				return staffName1;
			}
                        
                        else if (aComponent.equals(staffName1))
			{
				return staffName2;
			}
                        else if (aComponent.equals(staffName2))
			{
				return staffKana1;
			}
                        else if (aComponent.equals(staffKana1))
			{
				return staffKana2;
			}
                        else if (aComponent.equals(staffKana2))
			{
				return postalCode;
			}
			else if (aComponent.equals(postalCode))
			{
				return address1;
			}
			else if (aComponent.equals(searchAddressButton))
			{
				return address1;
			}
			else if (aComponent.equals(address1))
			{
				return address2;
			}
			else if (aComponent.equals(address2))
			{
				return address3;
			}
			else if (aComponent.equals(address3))
			{
				return address4;
			}
			else if (aComponent.equals(address4))
			{
				return phoneNumber;
			}
			else if (aComponent.equals(phoneNumber))
			{
				return cellularNumber;
			}
			else if (aComponent.equals(cellularNumber))
			{
				return mailAddress;
			}
                        // vtbphuong start change 20150513 
//                         else if (aComponent.equals(mailAddress))
//			{
//				return tblListStaffRelation;
//			}
                        else if (aComponent.equals(mailAddress))
			{
				return txtDisplayName;
			}
                        else if (aComponent.equals(txtDisplayName))
			{
				return tblListStaffRelation;
			}
                         // vtbphuong start change 20150513 
                         //IVS_vtnhan start edit 20140707 MASHU_スタッフ情報登録
			else if (aComponent.equals(mailAddress))
			{
				return tblListStaffRelation;
			}
                        else if(aComponent.equals(tblListStaffRelation)){
                            return staffNo;
                        }    
                        //IVS_vtnhan end edit 20140707 MASHU_スタッフ情報登録
			return staffNo;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(staffNo))
			{
				return staffNo;
			}
			if (aComponent.equals(staffName1))
			{
				return staffNo;
			}
			if (aComponent.equals(staffName2))
			{
				return staffName1;
			}
			if (aComponent.equals(staffKana1))
			{
				return staffName2;
			}
			if (aComponent.equals(staffKana2))
			{
				return staffKana1;
			}
			else if (aComponent.equals(postalCode))
			{
				return staffKana2;
			}
			else if (aComponent.equals(searchAddressButton))
			{
				return postalCode;
			}
			else if (aComponent.equals(address1))
			{
				return postalCode;
			}
			else if (aComponent.equals(address2))
			{
				return address1;
			}
			else if (aComponent.equals(address3))
			{
				return address2;
			}
			else if (aComponent.equals(address4))
			{
				return address3;
			}
			else if (aComponent.equals(phoneNumber))
			{
				return address4;
			}
			else if (aComponent.equals(cellularNumber))
			{
				return phoneNumber;
			}
			else if (aComponent.equals(mailAddress))
			{
				return cellularNumber;
			}
			else if (aComponent.equals(staffClass))
			{
				return mailAddress;
			}
                        //IVS_vtnhan start add 20140707 MASHU_スタッフ情報登録
                        else if (aComponent.equals(mailAddress))
			{
				return tblListStaffRelation;
			}
                        else if (aComponent.equals(tblListStaffRelation))
			{
				return staffNo;
			}
                        //IVS_vtnhan end add 20140707 MASHU_スタッフ情報登録
			
			return staffNo;
		}
                
               
		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return staffNo;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return mailAddress;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return staffNo;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return staffNo;
		}
      
	}
}
