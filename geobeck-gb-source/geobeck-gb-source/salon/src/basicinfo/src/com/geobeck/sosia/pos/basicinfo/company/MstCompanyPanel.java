/*
 * MstCompanyPanel.java
 *
 * Created on 2006/12/21, 10:14
 */

package com.geobeck.sosia.pos.basicinfo.company;

import com.geobeck.sosia.pos.basicinfo.WorkTimePasswordDialog;
import java.awt.*;
import java.sql.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.text.*;

import com.geobeck.sosia.pos.master.account.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.search.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sql.*;
import com.geobeck.swing.*;

/**
 *
 * @author  katagiri
 */
public class MstCompanyPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	
	/** Creates new form MstCompanyPanel */
	public MstCompanyPanel()
	{
            initComponents();
            this.init();
            //IVS_LVTu start edit 2014/07/11 Mashu_会社情報登録
            //this.setSize(435, 500);
            
            //IVS_TMTrong start edit 2015/08/13 Bug #41971
            //this.setSize(435, 520);
            this.setSize(435, 690);
            //IVS_TMTrong end edit 2015/08/13 Bug #41971
            
            //IVS_LVTu end edit 2014/07/11 Mashu_会社情報登録
            this.setPath("基本設定 >> 会社マスタ");
            this.setTitle("会社情報登録");

            // WEBチェック設定ボタン表示設定
            webcheckButton.setVisible(SystemInfo.getSetteing().isWebcheck());

            // 端数丸め非表示
            this.jLabel13.setVisible(false);
            this.roundDown.setVisible(false);
            this.round.setVisible(false);
            this.roundUp.setVisible(false);

            //会計単位非表示
            this.jLabel14.setVisible(false);
            this.unitOne.setVisible(false);
            this.unitTen.setVisible(false);
           
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        taxGroup = new javax.swing.ButtonGroup();
        discountTypeGroup = new javax.swing.ButtonGroup();
        roundGroup = new javax.swing.ButtonGroup();
        accountGroup = new javax.swing.ButtonGroup();
        taxReportGroup = new javax.swing.ButtonGroup();
        preSalesUpdateGroup = new javax.swing.ButtonGroup();
        displayGroup = new javax.swing.ButtonGroup();
        mailAddress = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)mailAddress.getDocument()).setDocumentFilter(
            new CustomFilter(64, CustomFilter.MAIL_ADDRESS));
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        faxNumber = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)faxNumber.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.PHONE_NUMBER));
        phoneNumber = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)phoneNumber.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.PHONE_NUMBER));
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        address4 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address4.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        jLabel9 = new javax.swing.JLabel();
        address3 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address3.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        jLabel8 = new javax.swing.JLabel();
        address2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address2.getDocument()).setDocumentFilter(
            new CustomFilter(64));
        jLabel4 = new javax.swing.JLabel();
        address1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address1.getDocument()).setDocumentFilter(
            new CustomFilter(16));
        jLabel3 = new javax.swing.JLabel();
        postalCode = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createPostalCodeFormatter());
        jLabel2 = new javax.swing.JLabel();
        groupName = new javax.swing.JFormattedTextField();
        searchAddressButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        discountType0 = new javax.swing.JRadioButton();
        discountType1 = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        inTax = new javax.swing.JRadioButton();
        outTax = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        unitOne = new javax.swing.JRadioButton();
        roundDown = new javax.swing.JRadioButton();
        round = new javax.swing.JRadioButton();
        roundUp = new javax.swing.JRadioButton();
        unitTen = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        cutoffDay = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createNumberFormatter(2, 1, 31));
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        inTaxR = new javax.swing.JRadioButton();
        outTaxR = new javax.swing.JRadioButton();
        jLabel18 = new javax.swing.JLabel();
        updateOK = new javax.swing.JRadioButton();
        updateNG = new javax.swing.JRadioButton();
        lblDisplaySwitchTechnic = new javax.swing.JLabel();
        rdoDisplaySwitchTechnic2 = new javax.swing.JRadioButton();
        rdoDisplaySwitchTechnic3 = new javax.swing.JRadioButton();
        jLabel19 = new javax.swing.JLabel();
        PeriodMonth = new javax.swing.JComboBox();
        jLabel20 = new javax.swing.JLabel();
        webcheckButton = new javax.swing.JButton();

        setFocusCycleRoot(true);

        mailAddress.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        mailAddress.setColumns(64);
        mailAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailAddressActionPerformed(evt);
            }
        });

        jLabel7.setText("メールアドレス");

        jLabel6.setText("FAX番号");

        faxNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        faxNumber.setColumns(20);

        phoneNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel5.setText("電話番号");

        jLabel10.setText("マンション名等");

        address4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address4.setColumns(128);
        address4.setInputKanji(true);
        address4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                address4ActionPerformed(evt);
            }
        });

        jLabel9.setText("町域・番地");

        address3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address3.setInputKanji(true);

        jLabel8.setText("市区町村");

        address2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address2.setInputKanji(true);

        jLabel4.setText("都道府県");

        address1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address1.setInputKanji(true);

        jLabel3.setText("郵便番号");

        postalCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        postalCode.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        postalCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                postalCodeFocusLost(evt);
            }
        });

        jLabel2.setText("会社名");

        groupName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        groupName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupNameActionPerformed(evt);
            }
        });

        searchAddressButton.setIcon(SystemInfo.getImageIcon("/button/search/search_address_off.jpg"));
        searchAddressButton.setBorderPainted(false);
        searchAddressButton.setContentAreaFilled(false);
        searchAddressButton.setFocusable(false);
        searchAddressButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_address_on.jpg"));
        searchAddressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAddressButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        jPanel1.setOpaque(false);

        discountTypeGroup.add(discountType0);
        discountType0.setSelected(true);
        discountType0.setText("税込額から割引");
        discountType0.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        discountType0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        discountType0.setOpaque(false);

        discountTypeGroup.add(discountType1);
        discountType1.setText("税抜額から割引");
        discountType1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        discountType1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        discountType1.setOpaque(false);

        jLabel11.setText("メニュー表示");

        jLabel12.setText("割引設定");

        taxGroup.add(inTax);
        inTax.setText("内税");
        inTax.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        inTax.setMargin(new java.awt.Insets(0, 0, 0, 0));
        inTax.setOpaque(false);

        taxGroup.add(outTax);
        outTax.setText("外税");
        outTax.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        outTax.setMargin(new java.awt.Insets(0, 0, 0, 0));
        outTax.setOpaque(false);
        outTax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outTaxActionPerformed(evt);
            }
        });

        jLabel13.setText("端数丸め");

        jLabel14.setText("会計単位");

        accountGroup.add(unitOne);
        unitOne.setSelected(true);
        unitOne.setText("1円単位");
        unitOne.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        unitOne.setMargin(new java.awt.Insets(0, 0, 0, 0));
        unitOne.setOpaque(false);

        roundGroup.add(roundDown);
        roundDown.setSelected(true);
        roundDown.setText("切り捨て");
        roundDown.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        roundDown.setMargin(new java.awt.Insets(0, 0, 0, 0));
        roundDown.setOpaque(false);
        roundDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundDownActionPerformed(evt);
            }
        });

        roundGroup.add(round);
        round.setText("四捨五入");
        round.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        round.setMargin(new java.awt.Insets(0, 0, 0, 0));
        round.setOpaque(false);

        roundGroup.add(roundUp);
        roundUp.setText("切り上げ");
        roundUp.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        roundUp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        roundUp.setOpaque(false);

        accountGroup.add(unitTen);
        unitTen.setText("10円単位");
        unitTen.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        unitTen.setMargin(new java.awt.Insets(0, 0, 0, 0));
        unitTen.setOpaque(false);

        jLabel15.setText("締め日");

        cutoffDay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cutoffDay.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel16.setText("日");

        jLabel17.setText("帳票税区分");

        taxReportGroup.add(inTaxR);
        inTaxR.setSelected(true);
        inTaxR.setText("税込");
        inTaxR.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        inTaxR.setMargin(new java.awt.Insets(0, 0, 0, 0));
        inTaxR.setOpaque(false);

        taxReportGroup.add(outTaxR);
        outTaxR.setText("税抜");
        outTaxR.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        outTaxR.setMargin(new java.awt.Insets(0, 0, 0, 0));
        outTaxR.setOpaque(false);
        outTaxR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outTaxRActionPerformed(evt);
            }
        });

        jLabel18.setText("前月以前のデータ更新");

        preSalesUpdateGroup.add(updateOK);
        updateOK.setText("可");
        updateOK.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        updateOK.setMargin(new java.awt.Insets(0, 0, 0, 0));
        updateOK.setOpaque(false);
        updateOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOKActionPerformed(evt);
            }
        });

        preSalesUpdateGroup.add(updateNG);
        updateNG.setText("不可");
        updateNG.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        updateNG.setMargin(new java.awt.Insets(0, 0, 0, 0));
        updateNG.setOpaque(false);
        updateNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateNGActionPerformed(evt);
            }
        });

        lblDisplaySwitchTechnic.setText("技術情報で統合情報を使い、三階層表示にする");

        displayGroup.add(rdoDisplaySwitchTechnic2);
        rdoDisplaySwitchTechnic2.setSelected(true);
        rdoDisplaySwitchTechnic2.setText("二階層表示(標準)");
        rdoDisplaySwitchTechnic2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoDisplaySwitchTechnic2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoDisplaySwitchTechnic2.setOpaque(false);
        rdoDisplaySwitchTechnic2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoDisplaySwitchTechnic2ActionPerformed(evt);
            }
        });

        displayGroup.add(rdoDisplaySwitchTechnic3);
        rdoDisplaySwitchTechnic3.setText("三階層表示");
        rdoDisplaySwitchTechnic3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoDisplaySwitchTechnic3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoDisplaySwitchTechnic3.setOpaque(false);
        rdoDisplaySwitchTechnic3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoDisplaySwitchTechnic3ActionPerformed(evt);
            }
        });

        jLabel19.setText("期末月");

        PeriodMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel20.setText("月");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(inTaxR, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(PeriodMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                                        .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(cutoffDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel16)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel20)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(outTaxR, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(inTax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(outTax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(unitOne, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(unitTen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(discountType0, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(discountType1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel18)
                                .add(32, 32, 32)
                                .add(updateOK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(updateNG))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(roundDown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(round, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(roundUp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jPanel1Layout.createSequentialGroup()
                                    .add(rdoDisplaySwitchTechnic2)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(rdoDisplaySwitchTechnic3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 79, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(4, 4, 4))
                                .add(lblDisplaySwitchTechnic, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 276, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jLabel19))
                        .add(0, 92, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(inTax)
                    .add(outTax))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(discountType0)
                    .add(discountType1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(inTaxR)
                    .add(outTaxR))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cutoffDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(PeriodMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(updateNG)
                    .add(updateOK))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblDisplaySwitchTechnic, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rdoDisplaySwitchTechnic3)
                    .add(rdoDisplaySwitchTechnic2))
                .add(28, 28, 28)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(roundDown)
                    .add(round)
                    .add(roundUp))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(unitOne)
                    .add(unitTen))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        webcheckButton.setIcon(SystemInfo.getImageIcon("/button/common/webcheck_off.jpg"));
        webcheckButton.setBorderPainted(false);
        webcheckButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/webcheck_on.jpg"));
        webcheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webcheckButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel5)
                            .add(jLabel6)
                            .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3)
                            .add(jLabel2)
                            .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(phoneNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(faxNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(address4, 0, 1, Short.MAX_VALUE)
                            .add(address3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, groupName)
                            .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(mailAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(webcheckButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {jLabel10, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8, jLabel9}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(webcheckButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(groupName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel9)
                    .add(address3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(address4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(phoneNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(faxNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(mailAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		if(this.checkInput())
		{
			this.regist();
		}
	}//GEN-LAST:event_renewButtonActionPerformed

	private void postalCodeFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_postalCodeFocusLost
	{//GEN-HEADEREND:event_postalCodeFocusLost
		String		temp	=	postalCode.getText().replaceAll("[-_]", "");
		
		//郵便番号が入録されていない場合
		if(temp.equals("") || temp.length() != 7)
		{
			address1.setText("");
			address2.setText("");
			address3.setText("");
		}
		else
		{
			AddressUtil		au	=	new	AddressUtil();
			
			au.setPostalCode(temp);
			
			try
			{
				ConnectionWrapper	con	=	SystemInfo.getBaseConnection();
				
				//住所が取得できた場合
				if(au.getDataByPostalCode(con))
				{
					address1.setText(au.getPrefectureName());
					address2.setText(au.getCityName());
					address3.setText(au.getTownName().replaceAll("（.+", ""));
				}
				//住所が取得できなかった場合住所をクリア
				else
				{
					address1.setText("");
					address2.setText("");
					address3.setText("");
				}
			}
			catch(SQLException e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
	}//GEN-LAST:event_postalCodeFocusLost

	private void searchAddressButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchAddressButtonActionPerformed
	{//GEN-HEADEREND:event_searchAddressButtonActionPerformed
		SearchAddressDialog		sa	=	new SearchAddressDialog(parentFrame, true);
		sa.setVisible(true);
		
		if(!sa.getSelectedPrefecture().equals(""))
		{
			postalCode.setText(sa.getSelectedPostalCode());
			address1.setText(sa.getSelectedPrefecture());
			address2.setText(sa.getSelectedCity());
			address3.setText(sa.getSelectedTown().replaceAll("（.+", ""));
		}
		
		sa = null;
	}//GEN-LAST:event_searchAddressButtonActionPerformed

        private void webcheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webcheckButtonActionPerformed
            if (WorkTimePasswordDialog.isAuthPassword()) {
                WebcheckSettingPanel p = new WebcheckSettingPanel();
                p.setOpener(this);
                SwingUtil.openAnchorDialog( null, true, p, "WEBチェック設定", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
            }
        }//GEN-LAST:event_webcheckButtonActionPerformed

    private void mailAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mailAddressActionPerformed

    private void rdoDisplaySwitchTechnic3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoDisplaySwitchTechnic3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoDisplaySwitchTechnic3ActionPerformed

    private void rdoDisplaySwitchTechnic2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoDisplaySwitchTechnic2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoDisplaySwitchTechnic2ActionPerformed

    private void updateNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateNGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateNGActionPerformed

    private void updateOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateOKActionPerformed

    private void outTaxRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outTaxRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outTaxRActionPerformed

    private void roundDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundDownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roundDownActionPerformed

    private void outTaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outTaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outTaxActionPerformed

    private void groupNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_groupNameActionPerformed

    private void address4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_address4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_address4ActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox PeriodMonth;
    private javax.swing.ButtonGroup accountGroup;
    private com.geobeck.swing.JFormattedTextFieldEx address1;
    private com.geobeck.swing.JFormattedTextFieldEx address2;
    private com.geobeck.swing.JFormattedTextFieldEx address3;
    private com.geobeck.swing.JFormattedTextFieldEx address4;
    private com.geobeck.swing.JFormattedTextFieldEx cutoffDay;
    private javax.swing.JRadioButton discountType0;
    private javax.swing.JRadioButton discountType1;
    private javax.swing.ButtonGroup discountTypeGroup;
    private javax.swing.ButtonGroup displayGroup;
    private com.geobeck.swing.JFormattedTextFieldEx faxNumber;
    private javax.swing.JFormattedTextField groupName;
    private javax.swing.JRadioButton inTax;
    private javax.swing.JRadioButton inTaxR;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblDisplaySwitchTechnic;
    private com.geobeck.swing.JFormattedTextFieldEx mailAddress;
    private javax.swing.JRadioButton outTax;
    private javax.swing.JRadioButton outTaxR;
    private com.geobeck.swing.JFormattedTextFieldEx phoneNumber;
    private com.geobeck.swing.JFormattedTextFieldEx postalCode;
    private javax.swing.ButtonGroup preSalesUpdateGroup;
    private javax.swing.JRadioButton rdoDisplaySwitchTechnic2;
    private javax.swing.JRadioButton rdoDisplaySwitchTechnic3;
    private javax.swing.JButton renewButton;
    private javax.swing.JRadioButton round;
    private javax.swing.JRadioButton roundDown;
    private javax.swing.ButtonGroup roundGroup;
    private javax.swing.JRadioButton roundUp;
    private javax.swing.JButton searchAddressButton;
    private javax.swing.ButtonGroup taxGroup;
    private javax.swing.ButtonGroup taxReportGroup;
    private javax.swing.JRadioButton unitOne;
    private javax.swing.JRadioButton unitTen;
    private javax.swing.JRadioButton updateNG;
    private javax.swing.JRadioButton updateOK;
    private javax.swing.JButton webcheckButton;
    // End of variables declaration//GEN-END:variables
	
	private MstGroup			companyData		=	new MstGroup();
	private MstAccountSetting	accountSetting	=	new MstAccountSetting();
	
	/**
	 * 会社情報登録画面用FocusTraversalPolicy
	 */
	private	MstCompanyFocusTraversalPolicy	ftp	=
			new MstCompanyFocusTraversalPolicy();
	
	/**
	 * 会社情報登録画面用FocusTraversalPolicyを取得する。
	 * @return 会社情報登録画面用FocusTraversalPolicy
	 */
	public MstCompanyFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	private void init()
	{       
		this.addMouseCursorChange();
		this.setListener();
                for(int i=1;i<=12;i++) {
                    PeriodMonth.addItem(i);
                }
		companyData.setGroupID(1);
		
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			companyData.loadData(con);
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		accountSetting	=	SystemInfo.getAccountSetting();
		
		this.showCompanyData();
		this.showAccountSetting();
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(searchAddressButton);
		SystemInfo.addMouseCursorChange(renewButton);
		SystemInfo.addMouseCursorChange(webcheckButton);
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
		address1.addKeyListener(SystemInfo.getMoveNextField());
		address1.addFocusListener(SystemInfo.getSelectText());
		address2.addKeyListener(SystemInfo.getMoveNextField());
		address2.addFocusListener(SystemInfo.getSelectText());
		address3.addKeyListener(SystemInfo.getMoveNextField());
		address3.addFocusListener(SystemInfo.getSelectText());
		address4.addKeyListener(SystemInfo.getMoveNextField());
		address4.addFocusListener(SystemInfo.getSelectText());
		faxNumber.addKeyListener(SystemInfo.getMoveNextField());
		faxNumber.addFocusListener(SystemInfo.getSelectText());
		mailAddress.addKeyListener(SystemInfo.getMoveNextField());
		mailAddress.addFocusListener(SystemInfo.getSelectText());
		phoneNumber.addKeyListener(SystemInfo.getMoveNextField());
		phoneNumber.addFocusListener(SystemInfo.getSelectText());
		postalCode.addKeyListener(SystemInfo.getMoveNextField());
		postalCode.addFocusListener(SystemInfo.getSelectText());
		groupName.addKeyListener(SystemInfo.getMoveNextField());
		groupName.addFocusListener(SystemInfo.getSelectText());
		inTax.addKeyListener(SystemInfo.getMoveNextField());
		outTax.addKeyListener(SystemInfo.getMoveNextField());
		discountType0.addKeyListener(SystemInfo.getMoveNextField());
		discountType1.addKeyListener(SystemInfo.getMoveNextField());
		roundDown.addKeyListener(SystemInfo.getMoveNextField());
		round.addKeyListener(SystemInfo.getMoveNextField());
		roundUp.addKeyListener(SystemInfo.getMoveNextField());
		unitOne.addKeyListener(SystemInfo.getMoveNextField());
		unitTen.addKeyListener(SystemInfo.getMoveNextField());
		cutoffDay.addKeyListener(SystemInfo.getMoveNextField());
		cutoffDay.addFocusListener(SystemInfo.getSelectText());
		inTaxR.addKeyListener(SystemInfo.getMoveNextField());
		outTaxR.addKeyListener(SystemInfo.getMoveNextField());
		updateOK.addKeyListener(SystemInfo.getMoveNextField());
		updateNG.addKeyListener(SystemInfo.getMoveNextField());
	}
	
	private void showCompanyData()
	{
		groupName.setText(companyData.getGroupName());
		postalCode.setText(companyData.getPostalCode());
		address1.setText(companyData.getAddress(0));
		address2.setText(companyData.getAddress(1));
		address3.setText(companyData.getAddress(2));
		address4.setText(companyData.getAddress(3));
		phoneNumber.setText(companyData.getPhoneNumber());
		faxNumber.setText(companyData.getFaxNumber());
		mailAddress.setText(companyData.getMailAddress());
	}
	
	private void showAccountSetting()
	{
		//メニュー表示
		if(accountSetting.getDisplayPriceType() == 1)
		{
			outTax.setSelected(true);
		}
		else
		{
			inTax.setSelected(true);
		}
		//割引設定
		if(accountSetting.getDiscountType() == 1)
		{
			discountType1.setSelected(true);
		}
		else
		{
			discountType0.setSelected(true);
		}
		//端数丸め
		if(accountSetting.getRounding() == 1)
		{
			round.setSelected(true);
		}
		else if(accountSetting.getRounding() == 2)
		{
			roundUp.setSelected(true);
		}
		else
		{
			roundDown.setSelected(true);
		}
		//会計単位
		if(accountSetting.getAccountingUnit() == 1)
		{
			unitTen.setSelected(true);
		}
		else
		{
			unitOne.setSelected(true);
		}
		//締め日
		if(accountSetting.getCutoffDay() != null)
		{
			cutoffDay.setText(accountSetting.getCutoffDay().toString());
		}
		else
		{
			cutoffDay.setText("");
		}
		//帳票税区分
		if(accountSetting.getReportPriceType() == 1)
		{
			outTaxR.setSelected(true);
		}
		else
		{
			inTaxR.setSelected(true);
		}
		//前月以前のデータ更新
		if(accountSetting.isPrevSalesUpdate())
		{
			updateOK.setSelected(true);
		}
		else
		{
			updateNG.setSelected(true);
		}
                //IVS_LVTu start add 2014/07/15 Mashu_会社情報登録
                if(accountSetting.getDisplaySwitchTechnic() == 3)
                {
                    rdoDisplaySwitchTechnic3.setSelected(true);
                }
                else
                {
                    rdoDisplaySwitchTechnic2.setSelected(true);
                }
                //IVS_LVTu end add 2014/07/15 Mashu_会社情報登録
                //Luc start add 20141202 期末を追加
                try {
                   this.PeriodMonth.setSelectedItem(accountSetting.getPeriodMonth());
                }catch (Exception e) {
                    
                }
                //Luc end add 20141202 期末を追加
                
                //IVS_PTThu start add 2015/04/15 New request #49651
                if(SystemInfo.getSystemType() == 1){
                    discountType0.setVisible(false);
                    discountType1.setVisible(false);
                    inTaxR.setVisible(false);
                    outTaxR.setVisible(false);
                    jLabel17.setVisible(false);
                    jLabel12.setVisible(false);
                    rdoDisplaySwitchTechnic2.setVisible(false);
                    updateNG.setVisible(false);
                    updateOK.setVisible(false);
                    jLabel18.setVisible(false);
                    lblDisplaySwitchTechnic.setVisible(false);
                    rdoDisplaySwitchTechnic3.setVisible(false);
                }
                 //IVS_PTThu end add 2015/04/15 New request #49651

	}
	
	private boolean checkInput()
	{
		if(groupName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "会社名"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			groupName.requestFocusInWindow();
			return	false;
		}
		//締日
		if(cutoffDay.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "締日"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			cutoffDay.requestFocusInWindow();
			return	false;
		}
		
		return	true;
	}
	
	private void regist()
	{
		this.setInputData();
		
		//データを登録
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			con.begin();
			
			if(companyData.regist(con) && accountSetting.regist(con))
			{
				con.commit();
				groupName.requestFocusInWindow();
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS, "会社情報"),
						this.getTitle(),
						JOptionPane.INFORMATION_MESSAGE);
			}
			else
			{
				con.rollback();
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "会社情報"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
			}
                        //Luc start add 20160126 #47150
                        SystemInfo.getGroup().load(con);
                        //Luc end add 20160126 #47150
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	private void setInputData()
	{
		companyData.setGroupName(groupName.getText());
		companyData.setPostalCode(this.getPostalCode());
		companyData.setAddress(0, address1.getText());
		companyData.setAddress(1, address2.getText());
		companyData.setAddress(2, address3.getText());
		companyData.setAddress(3, address4.getText());
		companyData.setPhoneNumber(phoneNumber.getText());
		companyData.setFaxNumber(faxNumber.getText());
		companyData.setMailAddress(mailAddress.getText());
		
		//メニュー表示
		if(outTax.isSelected())
		{
			accountSetting.setDisplayPriceType(1);
		}
		else
		{
			accountSetting.setDisplayPriceType(0);
		}
		//割引設定
		if(discountType1.isSelected())
		{
			accountSetting.setDiscountType(1);
		}
		else
		{
			accountSetting.setDiscountType(0);
		}
		//端数丸め
		if(round.isSelected())
		{
			round.setSelected(true);
			accountSetting.setRounding(1);
		}
		else if(roundUp.isSelected())
		{
			accountSetting.setRounding(2);
		}
		else
		{
			accountSetting.setRounding(0);
		}
		//会計単位
		if(unitTen.isSelected())
		{
			accountSetting.setAccountingUnit(1);
		}
		else
		{
			accountSetting.setAccountingUnit(0);
		}
		//帳票税区分
		if(outTaxR.isSelected())
		{
			accountSetting.setReportPriceType(1);
		}
		else
		{
			accountSetting.setReportPriceType(0);
		}

                //締め日
		accountSetting.setCutoffDay(Integer.parseInt(cutoffDay.getText()));

		//前月以前のデータ更新
		if(updateOK.isSelected())
		{
			accountSetting.setPrevSalesUpdate(1);
		}
		else
		{
			accountSetting.setPrevSalesUpdate(0);
		}
                //IVS_LVTu start add 2014/07/11 Mashu_会社情報登録
                if(rdoDisplaySwitchTechnic2.isSelected())
                {
                    accountSetting.setDisplaySwitchTechnic(2);
                }
                else
                {
                    accountSetting.setDisplaySwitchTechnic(3);
                }
                //IVS_LVTu end add 2014/07/11 Mashu_会社情報登録
                try {
                     accountSetting.setPeriodMonth(Integer.parseInt(this.PeriodMonth.getSelectedItem().toString()));
                }catch (Exception e) {
                   
                }
	}
	
	/**
	 * 入力されている郵便番号を取得する。
	 * @return 入力されている郵便番号
	 */
	private String getPostalCode()
	{
		return	postalCode.getText().replaceAll("[-_]", "");
	}
	
	
	/**
	 * MstShopPanel用FocusTraversalPolicy
	 */
	private class MstCompanyFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(groupName))
			{
				return postalCode;
			}
			else if (aComponent.equals(postalCode))
			{
				return address1;
			}
			else if (aComponent.equals(searchAddressButton))
			{
				return address1;
			}
			else if (aComponent.equals(address1))
			{
				return address2;
			}
			else if (aComponent.equals(address2))
			{
				return address3;
			}
			else if (aComponent.equals(address3))
			{
				return address4;
			}
			else if (aComponent.equals(address4))
			{
				return phoneNumber;
			}
			else if (aComponent.equals(phoneNumber))
			{
				return faxNumber;
			}
			else if (aComponent.equals(faxNumber))
			{
				return mailAddress;
			}
			else if (aComponent.equals(mailAddress))
			{
				if(inTax.isSelected()){
                                    return inTax;
                                }
                                return outTax;
			}
                        else if(aComponent.equals(inTax) || 
                                aComponent.equals(outTax))
                        {
                            if(discountType0.isSelected()){
                                return discountType0;
                            }
                            return discountType1;
                        } else if(aComponent.equals(discountType0) || 
                                aComponent.equals(discountType1))
                        {
                            if(inTaxR.isSelected()){
                                return inTaxR;
                            }
                            return outTaxR;
                        }
                         else if(aComponent.equals(inTaxR) || 
                                aComponent.equals(outTaxR))
                        {
                            return cutoffDay;
                        }
                        else if(aComponent.equals(cutoffDay))
                        {
                            if(updateOK.isSelected()){
                                return updateOK;
                            }
                            return updateNG;
                        }
                        
			return groupName;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(groupName))
			{
				return groupName;
			}
			else if (aComponent.equals(postalCode))
			{
				return groupName;
			}
			else if (aComponent.equals(searchAddressButton))
			{
				return postalCode;
			}
			else if (aComponent.equals(address1))
			{
				return postalCode;
			}
			else if (aComponent.equals(address2))
			{
				return address1;
			}
			else if (aComponent.equals(address3))
			{
				return address2;
			}
			else if (aComponent.equals(address4))
			{
				return address3;
			}
			else if (aComponent.equals(phoneNumber))
			{
				return address4;
			}
			else if (aComponent.equals(faxNumber))
			{
				return phoneNumber;
			}
			else if (aComponent.equals(mailAddress))
			{
				return faxNumber;
			}
			
			return groupName;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return groupName;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return mailAddress;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return groupName;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return groupName;
		}
	}
}
