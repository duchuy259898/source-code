/*
 * MstItemPanel.java
 *
 * Created on 2006/10/20, 10:55
 */
package com.geobeck.sosia.pos.basicinfo.product;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.logging.*;
import static java.lang.Integer.parseInt;
import com.geobeck.barcode.*;
import com.geobeck.sosia.pos.hair.customer.MstCustomerPanel;
import com.geobeck.sosia.pos.hair.master.product.MstTechnic;
import com.geobeck.sosia.pos.hair.master.product.MstTechnicClass;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.MstData;
import com.geobeck.sosia.pos.master.company.MstGroup;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.master.customer.MstDataDeliveryProduct;
import com.geobeck.sosia.pos.master.customer.MstDataPickupProduct;
import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.master.product.*;
import com.geobeck.sosia.pos.search.SearchAddressDialog;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;

/**
 *
 * @author katagiri
 */
public class DeliveryStatusManagementPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
        implements BarcodeListener {

    private Integer selIndex = -1;
    private ArrayList<MstProductDeliveryManagement> list = new ArrayList<MstProductDeliveryManagement>();
    private ArrayList<MstProductDeliveryManagement> listTemp = new ArrayList<MstProductDeliveryManagement>();
    private MstProductDeliveryManagement listSum = new MstProductDeliveryManagement();
    private MstProductDeliveryManagement pdm = new MstProductDeliveryManagement();
    int customerID = 0;
    /**
     * Creates new form MstItemPanel
     */
    public DeliveryStatusManagementPanel() {
        super();
        initComponents();
        addMouseCursorChange();
        this.setSize(842, 684);
        this.setPath("配送ステータス管理");
        this.setTitle("配送ステータス管理");
        this.setListener();
        this.init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        itemUseDivisionGroup = new javax.swing.ButtonGroup();
        rdoGroupStatus = new javax.swing.ButtonGroup();
        itemScrollPane = new javax.swing.JScrollPane();
        deliver = new com.geobeck.swing.JTableEx();
        renewButton = new javax.swing.JButton();
        itemAll = new javax.swing.JRadioButton();
        itemUseStatusOne = new javax.swing.JRadioButton();
        itemUseStatusTwo = new javax.swing.JRadioButton();
        priceLabel5 = new javax.swing.JLabel();
        customerAddressPanel = new javax.swing.JPanel();
        postalCodeLabel = new javax.swing.JLabel();
        postalCode = postalCode = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createPostalCodeFormatter());
        searchAddressButton = new javax.swing.JButton();
        address1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address1.getDocument()).setDocumentFilter(
            new CustomFilter(16));
        addressLabel = new javax.swing.JLabel();
        addressLabel1 = new javax.swing.JLabel();
        address2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address2.getDocument()).setDocumentFilter(
            new CustomFilter(64));
        addressLabel2 = new javax.swing.JLabel();
        address3 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address3.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        addressLabel3 = new javax.swing.JLabel();
        address4 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address4.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        SaveTemp = new javax.swing.JButton();
        cmbDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        priceLabel6 = new javax.swing.JLabel();
        rdoOne = new javax.swing.JRadioButton();
        rdoTwo = new javax.swing.JRadioButton();
        txt_Hour = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)txt_Hour.getDocument()).setDocumentFilter(
            new CustomFilter(2 ,CustomFilter.NUMBER));
        priceLabel7 = new javax.swing.JLabel();
        txt_Minute = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)txt_Minute.getDocument()).setDocumentFilter(
            new CustomFilter(2 ,CustomFilter.NUMBER));
        lblTax1 = new javax.swing.JLabel();
        dileveryNum_txt = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)dileveryNum_txt.getDocument()).setDocumentFilter(
            new CustomFilter(9 ,CustomFilter.NUMBER));
        priceLabel8 = new javax.swing.JLabel();
        customerInfoButton = new javax.swing.JButton();
        customerNo = new javax.swing.JLabel();
        customerName1 = new javax.swing.JLabel();
        customerName2 = new javax.swing.JLabel();
        cmbEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        cmbShop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        cmbStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lblTargetPeriod5 = new javax.swing.JLabel();
        targetLabel2 = new javax.swing.JLabel();
        termtLabe1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        searchAddressButton1 = new javax.swing.JButton();

        setFocusCycleRoot(true);
        setFocusTraversalPolicyProvider(true);

        itemScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        deliver.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "店舗 ", "顧客情報", "顧客No", "顧客名", "配送日時 ", "商品名 ", "購入数  ", "宅送数", "配送ステータス ", "null"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deliver.setSelectionBackground(new java.awt.Color(255, 210, 142));
        deliver.setSelectionForeground(new java.awt.Color(0, 0, 0));
        deliver.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        deliver.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(deliver, SystemInfo.getTableHeaderRenderer());
        deliver.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(deliver);
        deliver.setDefaultRenderer(String.class, new TableCellAlignRenderer());
        SwingUtil.setJTableHeaderRenderer(deliver, SystemInfo.getTableHeaderRenderer());
        deliver.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                deliverMouseReleased(evt);
            }
        });
        deliver.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                deliverKeyReleased(evt);
            }
        });
        itemScrollPane.setViewportView(deliver);
        deliver.getColumnModel().getColumn(9).setMinWidth(0);
        deliver.getColumnModel().getColumn(9).setPreferredWidth(0);
        deliver.getColumnModel().getColumn(9).setMaxWidth(0);

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_m_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_m_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        itemUseDivisionGroup.add(itemAll);
        itemAll.setSelected(true);
        itemAll.setText("全て ");
        itemAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        itemAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
        itemAll.setOpaque(false);

        itemUseDivisionGroup.add(itemUseStatusOne);
        itemUseStatusOne.setText("未配送 ");
        itemUseStatusOne.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        itemUseStatusOne.setMargin(new java.awt.Insets(0, 0, 0, 0));
        itemUseStatusOne.setOpaque(false);

        itemUseDivisionGroup.add(itemUseStatusTwo);
        itemUseStatusTwo.setText("配送済 ");
        itemUseStatusTwo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        itemUseStatusTwo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        itemUseStatusTwo.setOpaque(false);

        priceLabel5.setText("配送ステータス ");

        customerAddressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        customerAddressPanel.setOpaque(false);

        postalCodeLabel.setText("郵便番号");

        postalCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        postalCode.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        postalCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                postalCodeFocusLost(evt);
            }
        });

        searchAddressButton.setIcon(SystemInfo.getImageIcon("/button/search/search_address_off.jpg"));
        searchAddressButton.setBorderPainted(false);
        searchAddressButton.setContentAreaFilled(false);
        searchAddressButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_address_on.jpg"));
        searchAddressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAddressButtonActionPerformed(evt);
            }
        });

        address1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address1.setColumns(16);
        address1.setInputKanji(true);

        addressLabel.setText("都道府県");

        addressLabel1.setText("市区町村");

        address2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address2.setColumns(64);
        address2.setInputKanji(true);

        addressLabel2.setText("町域・番地");

        address3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address3.setColumns(128);
        address3.setInputKanji(true);

        addressLabel3.setText("マンション名等");

        address4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address4.setColumns(128);
        address4.setInputKanji(true);

        SaveTemp.setIcon(SystemInfo.getImageIcon("/button/common/refiection_off.jpg"));
        SaveTemp.setBorderPainted(false);
        SaveTemp.setEnabled(false);
        SaveTemp.setPressedIcon(SystemInfo.getImageIcon("/button/common/refiection_on.jpg"));
        SaveTemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveTempActionPerformed(evt);
            }
        });

        cmbDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDateItemStateChanged(evt);
            }
        });

        priceLabel6.setText("配送日時 ");

        rdoGroupStatus.add(rdoOne);
        rdoOne.setText("未配送 ");
        rdoOne.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoOne.setContentAreaFilled(false);
        rdoOne.setMargin(new java.awt.Insets(0, 0, 0, 0));

        rdoGroupStatus.add(rdoTwo);
        rdoTwo.setText("配送済 ");
        rdoTwo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTwo.setContentAreaFilled(false);
        rdoTwo.setMargin(new java.awt.Insets(0, 0, 0, 0));

        txt_Hour.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txt_Hour.setColumns(2);
        txt_Hour.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_Hour.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txt_HourMouseReleased(evt);
            }
        });
        txt_Hour.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txt_HourPropertyChange(evt);
            }
        });
        txt_Hour.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_HourKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_HourKeyTyped(evt);
            }
        });

        priceLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        priceLabel7.setText(":");

        txt_Minute.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txt_Minute.setColumns(2);
        txt_Minute.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_Minute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txt_MinuteMouseReleased(evt);
            }
        });
        txt_Minute.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_MinuteFocusLost(evt);
            }
        });
        txt_Minute.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txt_MinutePropertyChange(evt);
            }
        });
        txt_Minute.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_MinuteKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_MinuteKeyTyped(evt);
            }
        });

        lblTax1.setText("配送ステータス ");

        dileveryNum_txt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        dileveryNum_txt.setColumns(9);
        dileveryNum_txt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                dileveryNum_txtMouseReleased(evt);
            }
        });
        dileveryNum_txt.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dileveryNum_txtPropertyChange(evt);
            }
        });

        priceLabel8.setText("宅送数");

        customerInfoButton.setIcon(SystemInfo.getImageIcon("/button/account/cust_view_off.jpg"));
        customerInfoButton.setBorderPainted(false);
        customerInfoButton.setPressedIcon(SystemInfo.getImageIcon("/button/account/cust_view_on.jpg"));
        customerInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerInfoButtonActionPerformed(evt);
            }
        });

        customerNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        customerName1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        customerName2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        org.jdesktop.layout.GroupLayout customerAddressPanelLayout = new org.jdesktop.layout.GroupLayout(customerAddressPanel);
        customerAddressPanel.setLayout(customerAddressPanelLayout);
        customerAddressPanelLayout.setHorizontalGroup(
            customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(customerAddressPanelLayout.createSequentialGroup()
                .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(addressLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addressLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addressLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addressLabel3)
                    .add(priceLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(postalCodeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(customerAddressPanelLayout.createSequentialGroup()
                        .add(cmbDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(customerAddressPanelLayout.createSequentialGroup()
                                .add(txt_Hour, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(txt_Minute, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(customerAddressPanelLayout.createSequentialGroup()
                                .add(33, 33, 33)
                                .add(priceLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblTax1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rdoOne, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rdoTwo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(priceLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(dileveryNum_txt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(26, 26, 26)
                        .add(SaveTemp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(customerAddressPanelLayout.createSequentialGroup()
                            .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                        .add(address3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                        .add(address4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 203, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(208, 208, 208))
            .add(customerAddressPanelLayout.createSequentialGroup()
                .add(customerInfoButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(customerNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(customerName1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(customerName2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        customerAddressPanelLayout.setVerticalGroup(
            customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(customerAddressPanelLayout.createSequentialGroup()
                .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(customerInfoButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(customerNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(customerName1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(customerName2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(postalCodeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3)
                .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addressLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3)
                .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addressLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3)
                .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addressLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(address3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3)
                .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(address4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addressLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, priceLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .add(customerAddressPanelLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(SaveTemp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(customerAddressPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(priceLabel7)
                            .add(lblTax1)
                            .add(txt_Hour, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txt_Minute, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(rdoOne)
                            .add(rdoTwo)
                            .add(priceLabel8))
                        .add(dileveryNum_txt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
        );

        cmbEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbShop.setFocusCycleRoot(true);

        cmbStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblTargetPeriod5.setText("配送日 ");
        lblTargetPeriod5.setFocusCycleRoot(true);

        targetLabel2.setText("店舗 ");
        targetLabel2.setFocusCycleRoot(true);

        termtLabe1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        termtLabe1.setText("〜");

        btnSearch.setIcon(SystemInfo.getImageIcon("/button/common/search_mini_off.jpg"));
        btnSearch.setBorderPainted(false);
        btnSearch.setPressedIcon(SystemInfo.getImageIcon("/button/common/search_mini_on.jpg"));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        searchAddressButton1.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        searchAddressButton1.setBorderPainted(false);
        searchAddressButton1.setContentAreaFilled(false);
        searchAddressButton1.setEnabled(false);
        searchAddressButton1.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        searchAddressButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAddressButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(targetLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblTargetPeriod5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(priceLabel5))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(itemAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(itemUseStatusOne, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(itemUseStatusTwo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(btnSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(184, 184, 184))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(cmbShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(cmbStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(termtLabe1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(6, 6, 6)
                                        .add(cmbEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .add(layout.createSequentialGroup()
                        .add(itemScrollPane)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(customerAddressPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 678, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(34, 34, 34)
                        .add(searchAddressButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 48, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(cmbShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(targetLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(41, 41, 41)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(cmbStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(cmbEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(termtLabe1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblTargetPeriod5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(itemAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(itemUseStatusOne, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(itemUseStatusTwo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(priceLabel5)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(customerAddressPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(itemScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(161, 161, 161)
                        .add(searchAddressButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed

            if (this.UpdateDelivery()) {       
                    MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS, "レジデータ"),
                    this.getTitle(),
                    JOptionPane.INFORMATION_MESSAGE);
                this.refresh();
                renewButton.setEnabled(false);
                searchAddressButton1.setEnabled(true);
            } else {
                MessageDialog.showMessageDialog(
                        this,
                        "登録に失敗しました。",
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            }

	}//GEN-LAST:event_renewButtonActionPerformed

    private void postalCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_postalCodeFocusLost
        String temp = postalCode.getText().replaceAll("[-_]", "");

        //郵便番号が入録されていない場合
        if (temp.equals("") || temp.length() != 7) {
            address1.setText("");
            address2.setText("");
            address3.setText("");
        } //郵便番号が入録されている場合
        else {
            AddressUtil au = new AddressUtil();

            au.setPostalCode(temp);

            try {
                ConnectionWrapper con = SystemInfo.getBaseConnection();

                //郵便番号から住所を取得
                if (au.getDataByPostalCode(con)) {
                    address1.setText(au.getPrefectureName());
                    address2.setText(au.getCityName());
                    address3.setText(au.getTownName().replaceAll("（.+", ""));
                } else {
                    address1.setText("");
                    address2.setText("");
                    address3.setText("");
                }
            } catch (SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }
    }//GEN-LAST:event_postalCodeFocusLost

    private void searchAddressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAddressButtonActionPerformed
        SystemInfo.getLogger().log(Level.INFO, "住所検索");
        SearchAddressDialog sa = new SearchAddressDialog(parentFrame, true);
        sa.setVisible(true);

        if (!sa.getSelectedPrefecture().equals("")) {
            postalCode.setText(sa.getSelectedPostalCode());
            address1.setText(sa.getSelectedPrefecture());
            address2.setText(sa.getSelectedCity());
            address3.setText(sa.getSelectedTown().replaceAll("（.+", ""));
        }

        sa.dispose();
        sa = null;
    }//GEN-LAST:event_searchAddressButtonActionPerformed

    private void cmbDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDateItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDateItemStateChanged

    private void SaveTempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveTempActionPerformed
        // TODO add your handling code here:
        if(!checkInputTemp()){
           return;    
       }
        this.SaveTempData();     
    }//GEN-LAST:event_SaveTempActionPerformed

    private void txt_HourPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txt_HourPropertyChange
        // TODO add your handling code here:
        try{
        if (parseInt(txt_Hour.getText()) > 23 || txt_Hour.getText().equals("")) {
            txt_Hour.setText("00");
        }
        }catch(Exception ex){
            
        }
    }//GEN-LAST:event_txt_HourPropertyChange

    private void txt_MinutePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txt_MinutePropertyChange
        // TODO add your handling code here:
         try{
        if (parseInt(txt_Minute.getText()) > 59 || txt_Minute.getText().equals("")) {
            txt_Minute.setText("00");
        }
        }catch(Exception ex){
            
        }
    }//GEN-LAST:event_txt_MinutePropertyChange

    private void txt_HourKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_HourKeyReleased
        // TODO add your handling code here:
         try{
        if (parseInt(txt_Hour.getText()) > 23 || (txt_Hour.getText().equals(""))) {
            txt_Hour.setText("00");
        }
        }catch(Exception ex){
            
        }
    }//GEN-LAST:event_txt_HourKeyReleased

    private void txt_HourMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_HourMouseReleased
        // TODO add your handling code here:
        try{
        if (parseInt(txt_Hour.getText()) > 23 || (txt_Hour.getText().equals(""))) {
            txt_Hour.setText("00");
        }
        }catch(Exception ex){
            
        }
    }//GEN-LAST:event_txt_HourMouseReleased

    private void txt_MinuteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_MinuteKeyReleased
        // TODO add your handling code here:
        try{
        if (parseInt(txt_Minute.getText()) > 59 || txt_Minute.getText().equals("") ) {
            txt_Minute.setText("00");
        }
        }catch(Exception ex){
            
        }
    }//GEN-LAST:event_txt_MinuteKeyReleased

    private void txt_MinuteMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_MinuteMouseReleased
        // TODO add your handling code here:
        
         try{
        if (parseInt(txt_Minute.getText()) > 59 || txt_Minute.getText().equals("")) {
            txt_Minute.setText("00");
        }
        }catch(Exception ex){
            
        }
    }//GEN-LAST:event_txt_MinuteMouseReleased

    private void txt_HourKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_HourKeyTyped
        // TODO add your handling code here:
        try{
        if (parseInt(txt_Hour.getText()) > 23 || (txt_Hour.getText().equals(""))) {
            txt_Hour.setText("00");
        }
        }catch(Exception ex){
            
        }
      
    }//GEN-LAST:event_txt_HourKeyTyped

    private void txt_MinuteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_MinuteKeyTyped
        // TODO add your handling code here:
          try{
        if (parseInt(txt_Minute.getText()) > 59 || txt_Minute.getText().equals("")) {
            txt_Minute.setText("00");
        }
        }catch(Exception ex){
            
        }
    }//GEN-LAST:event_txt_MinuteKeyTyped

    private void txt_MinuteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_MinuteFocusLost
        // TODO add your handling code here:
         try{
        if (parseInt(txt_Minute.getText()) > 59 || txt_Minute.getText().equals("")) {
            txt_Minute.setText("00");
        }
        }catch(Exception ex){
            
        }
    }//GEN-LAST:event_txt_MinuteFocusLost

    private void deliverKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deliverKeyReleased
        this.changeCurrentData();
    }//GEN-LAST:event_deliverKeyReleased

    private void deliverMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deliverMouseReleased
        this.changeCurrentData();
    }//GEN-LAST:event_deliverMouseReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (!checkInput()) {
            return;
        }    
        this.SearchData();   
        selIndex = -1 ;
     
       
      
    }//GEN-LAST:event_btnSearchActionPerformed

    private void dileveryNum_txtPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dileveryNum_txtPropertyChange
        // TODO add your handling code here:
         try{
        if (dileveryNum_txt.getText().equals("")) {
            dileveryNum_txt.setText("0");
        }
        }catch(Exception ex){
            
        }
    }//GEN-LAST:event_dileveryNum_txtPropertyChange

    private void dileveryNum_txtMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dileveryNum_txtMouseReleased
        // TODO add your handling code here:
          try{
        if (dileveryNum_txt.getText().equals("")) {
            dileveryNum_txt.setText("0");
        }
        }catch(Exception ex){
            
        }
    }//GEN-LAST:event_dileveryNum_txtMouseReleased

    private void customerInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerInfoButtonActionPerformed

        customerInfoButton.setCursor(null);

        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            MstCustomer customer = new MstCustomer(customerID);
            if (customer.getCustomerID() != null) {

                MstCustomerPanel mcp = null;

                try {
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    mcp = new MstCustomerPanel(customer.getCustomerID(), false, false, true);
                    SwingUtil.openAnchorDialog(this.parentFrame, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);

                } finally {
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }

                ((JDialog) mcp.getParent().getParent().getParent().getParent()).dispose();

                customerNo.setText(mcp.getCustomer().getCustomerNo());
            }

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_customerInfoButtonActionPerformed

    private void searchAddressButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAddressButton1ActionPerformed
        String shopName = "";
           if (cmbShop.getSelectedItem() instanceof MstGroup) {

                MstGroup mg = (MstGroup) cmbShop.getSelectedItem();                
                shopName = mg.getGroupName();
            } else if (cmbShop.getSelectedItem() instanceof MstShop) {

                MstShop ms = (MstShop) cmbShop.getSelectedItem();
                shopName = ms.getShopName();
            }
        String statusName = "配送済";
        if (itemAll.isSelected()) {
            statusName = "全て" ;
        }
        else if(itemUseStatusOne.isSelected())
        {
            statusName = "未配送 " ;
        } 
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        String fileName = "配送ステータス一覧";
        JExcelApi jx = new JExcelApi(fileName);
        //テンプレートとなるファイルをセット
        jx.setTemplateFile("/report/" + fileName + ".xls");
        jx.setValue(2, 3, shopName);
        jx.setValue(2, 4, format.format(cmbStartDate.getDate()) + " 〜 " + format.format(cmbEndDate.getDate()));        
        jx.setValue(2, 5, statusName);
        int row = 8;
        jx.insertRow(8, list.size()-1);
        for (int i = 0; i < deliver.getRowCount(); i++) { 
            jx.setValue(1, row, deliver.getValueAt(i, 0).toString());
            jx.setValue(2, row, deliver.getValueAt(i, 2).toString());
            jx.setValue(3, row, deliver.getValueAt(i, 3).toString());
            jx.setValue(4, row, deliver.getValueAt(i, 4).toString());
            jx.setValue(5, row, deliver.getValueAt(i, 5).toString());
            jx.setValue(6, row, Integer.parseInt(deliver.getValueAt(i, 6).toString()));
            jx.setValue(7, row, Integer.parseInt(deliver.getValueAt(i, 7).toString()));
            jx.setValue(8, row, deliver.getValueAt(i, 8).toString());

            //郵便番号
            String code = list.get(i).getPostalCode();
            String temp = "";
            if(code != null && !code.equals("")) {
                temp = code.substring(0,3) + "-" + code.substring(3,code.length());
            }
            
            try {
                jx.setValue(9, row, temp!= null ? temp : "" );
            }catch(Exception e) {}
            //都道府県
             try {
                jx.setValue(10, row, list.get(i).getAddress(0));
            }catch(Exception e) {}
            //市区町村
              try {
                jx.setValue(11, row, list.get(i).getAddress(1));
             }catch(Exception e) {}
            //町域・番地
            try {
                jx.setValue(12, row, list.get(i).getAddress(2));
            }catch(Exception e) {}
            //マンション名等
            try {
                jx.setValue(13, row, list.get(i).getAddress(3));
            }catch(Exception e) {}
            row++;
        }
        //jx.removeRow(row);
        jx.openWorkbook();
        
    }//GEN-LAST:event_searchAddressButton1ActionPerformed
    private String getPostalCode() {
        return this.postalCode.getText().replaceAll("[-_]", "");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SaveTemp;
    private com.geobeck.swing.JFormattedTextFieldEx address1;
    private com.geobeck.swing.JFormattedTextFieldEx address2;
    private com.geobeck.swing.JFormattedTextFieldEx address3;
    private com.geobeck.swing.JFormattedTextFieldEx address4;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JLabel addressLabel1;
    private javax.swing.JLabel addressLabel2;
    private javax.swing.JLabel addressLabel3;
    private javax.swing.JButton btnSearch;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbEndDate;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cmbShop;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbStartDate;
    private javax.swing.JPanel customerAddressPanel;
    private javax.swing.JButton customerInfoButton;
    private javax.swing.JLabel customerName1;
    private javax.swing.JLabel customerName2;
    private javax.swing.JLabel customerNo;
    private javax.swing.JTable deliver;
    private com.geobeck.swing.JFormattedTextFieldEx dileveryNum_txt;
    private javax.swing.JRadioButton itemAll;
    private javax.swing.JScrollPane itemScrollPane;
    private javax.swing.ButtonGroup itemUseDivisionGroup;
    private javax.swing.JRadioButton itemUseStatusOne;
    private javax.swing.JRadioButton itemUseStatusTwo;
    private javax.swing.JLabel lblTargetPeriod5;
    private javax.swing.JLabel lblTax1;
    private com.geobeck.swing.JFormattedTextFieldEx postalCode;
    private javax.swing.JLabel postalCodeLabel;
    private javax.swing.JLabel priceLabel5;
    private javax.swing.JLabel priceLabel6;
    private javax.swing.JLabel priceLabel7;
    private javax.swing.JLabel priceLabel8;
    private javax.swing.ButtonGroup rdoGroupStatus;
    private javax.swing.JRadioButton rdoOne;
    private javax.swing.JRadioButton rdoTwo;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton searchAddressButton;
    private javax.swing.JButton searchAddressButton1;
    private javax.swing.JLabel targetLabel2;
    private javax.swing.JLabel termtLabe1;
    private com.geobeck.swing.JFormattedTextFieldEx txt_Hour;
    private com.geobeck.swing.JFormattedTextFieldEx txt_Minute;
    // End of variables declaration//GEN-END:variables
    /**
     * 商品マスタ登録画面用FocusTraversalPolicy
     */
    private DeliveryStatusManagementFocusTraversalPolicy ftp =
            new DeliveryStatusManagementFocusTraversalPolicy();

    /**
     * 商品マスタ登録画面用FocusTraversalPolicyを取得する。
     *
     * @return 商品マスタ登録画面用FocusTraversalPolicy
     */
    @Override
    public FocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange() {

        SystemInfo.addMouseCursorChange(renewButton);

    }

    /**
     * コンポーネントの各リスナーをセットする。
     */
    private void setListener() {
        cmbStartDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbEndDate.addKeyListener(SystemInfo.getMoveNextField());
        postalCode.addKeyListener(SystemInfo.getMoveNextField());
        postalCode.addFocusListener(SystemInfo.getSelectText());
        address1.addKeyListener(SystemInfo.getMoveNextField());
        address1.addFocusListener(SystemInfo.getSelectText());
        address2.addKeyListener(SystemInfo.getMoveNextField());
        address2.addFocusListener(SystemInfo.getSelectText());
        address3.addKeyListener(SystemInfo.getMoveNextField());
        address3.addFocusListener(SystemInfo.getSelectText());
        address4.addKeyListener(SystemInfo.getMoveNextField());
        address4.addFocusListener(SystemInfo.getSelectText());
        cmbDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbDate.addFocusListener(SystemInfo.getSelectText());
        dileveryNum_txt.addKeyListener(SystemInfo.getMoveNextField());
        dileveryNum_txt.addFocusListener(SystemInfo.getSelectText());

    }

    private boolean checkInput() {
        if (this.cmbStartDate.getDate() != null && this.cmbEndDate.getDate() != null) {
            if (this.cmbStartDate.getDate().compareTo(this.cmbEndDate.getDate()) > 0) {

                MessageDialog.showMessageDialog(this,
                        "配送日の入力値が不正です。入力内容を確認してください。",
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);

                this.cmbStartDate.requestFocusInWindow();
                return false;
            }
        }
        return true;
    }
      private boolean checkInputTemp() {
          
          if("".equals(postalCode.getText())){
                
                    MessageDialog.showMessageDialog(this,
                            "住所は郵便番号、都道府県、市区町村、町域までは必須入力です。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    postalCode.requestFocusInWindow();
                    return false;
               
            }
          
          if("".equals(address1.getText())){
                
                    MessageDialog.showMessageDialog(this,
                            "住所は郵便番号、都道府県、市区町村、町域までは必須入力です。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    address1.requestFocusInWindow();
                    return false;
               
            }
          
          if("".equals(address2.getText())){
                
                    MessageDialog.showMessageDialog(this,
                            "住所は郵便番号、都道府県、市区町村、町域までは必須入力です。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    address2.requestFocusInWindow();
                    return false;
               
            }
          if("".equals(address3.getText())){
                
                    MessageDialog.showMessageDialog(this,
                            "住所は郵便番号、都道府県、市区町村、町域までは必須入力です。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    address3.requestFocusInWindow();
                    return false;
               
            }
          
          if("".equals(cmbDate.getDate()) || cmbDate.getDate() == null){           
                    MessageDialog.showMessageDialog(this,
                            "配送日時が入力されていません。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    cmbDate.requestFocusInWindow();
                    return false;
               
            }
          if("".equals(txt_Hour.getText())){
                
                    MessageDialog.showMessageDialog(this,
                            "配送日時が入力されていません。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    txt_Hour.requestFocusInWindow();
                    return false;
               
            }
          if("".equals(txt_Minute.getText())){
             
                    MessageDialog.showMessageDialog(this,
                            "配送日時が入力されていません。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    txt_Minute.requestFocusInWindow();
                    return false;
              
            }
            int indexTemp = deliver.getSelectedRow();
            // Than start add 2014/06/26
            Integer tempDeliveryNum = 0;
            for (int i = 0; i < deliver.getRowCount(); i++) {
                    MstProductDeliveryManagement mdm = (MstProductDeliveryManagement)deliver.getValueAt(i, 9);
                    if (list.get(indexTemp).getSalesDetail().getSlipNo().equals(mdm.getSalesDetail().getSlipNo())                        
                            && list.get(indexTemp).getSalesDetail().getSlipDetailNo().equals(mdm.getSalesDetail().getSlipDetailNo())  
                            && list.get(indexTemp).getShopID().equals(mdm.getShopID()) 
                            && i != indexTemp) {
                        tempDeliveryNum += Integer.parseInt(deliver.getValueAt(i, 7).toString());
                    }
                }       
          if ((Integer.parseInt(dileveryNum_txt.getText()) + tempDeliveryNum + list.get(indexTemp).getPickNum().intValue()) > list.get(indexTemp).getSalesNum().intValue()) {
                  MessageDialog.showMessageDialog(this,
                          "宅送数が残数 (" + (list.get(indexTemp).getSalesNum().intValue() - list.get(indexTemp).getPickNum().intValue() - tempDeliveryNum) + ") より多く入力されています。",
                          this.getTitle(),
                          JOptionPane.ERROR_MESSAGE);
                  dileveryNum_txt.requestFocusInWindow();
                  return false;
              }
          // Than end add 2014/06/26
          return true;
    }

    /**
     * 初期化処理を行う。
     */
    private void init() {
        // Thanh start edit 2014/07/02 Request #26424
        SystemInfo.initGroupShopComponents(cmbShop, 3);
        this.cmbStartDate.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        this.cmbEndDate.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        // Thanh end edit 2014/07/02        
        btnSearch.setEnabled(true);
        txt_Hour.setText("00");
        txt_Minute.setText("00");
        dileveryNum_txt.setText("0");
        // Thanh start add 2014/07/01
        setEnableButtonInfo();
        // Thanh end add 2014/07/01
        if(SystemInfo.getCurrentShop().getShopID() == 0){
            postalCode.setEnabled(true);
            searchAddressButton.setEnabled(true);
            address1.setEnabled(true);
            address2.setEnabled(true);
            address3.setEnabled(true);
            address4.setEnabled(true);
            cmbDate.setEnabled(true);
            txt_Hour.setEnabled(true);
            txt_Minute.setEnabled(true);
            rdoOne.setEnabled(true);
            rdoTwo.setEnabled(true);
            dileveryNum_txt.setEnabled(true);
            SaveTemp.setEnabled(false);

            
        }else {
            postalCode.setEnabled(false);
            searchAddressButton.setEnabled(false);
            address1.setEnabled(false);
            address2.setEnabled(false);
            address3.setEnabled(false);
            address4.setEnabled(false);
            cmbDate.setEnabled(false);
            txt_Hour.setEnabled(false);
            txt_Minute.setEnabled(false);
            rdoOne.setEnabled(false);
            rdoTwo.setEnabled(false);
            dileveryNum_txt.setEnabled(false);          
            SaveTemp.setVisible(false);
            renewButton.setVisible(false);
            
        
        }
        
    }

    private void refresh() {
        this.clear();
    }

    /**
     * 入力項目をクリアする。
     */
    private void clear() {
        selIndex = -1;   
        this.SearchData();
    }

    private void clearTemp() {   
        postalCode.setText("");
        address1.setText("");
        address2.setText("");
        address3.setText("");
        address4.setText("");
        cmbDate.setDate("");
        txt_Hour.setText("00");
        txt_Minute.setText("00");
        rdoOne.setSelected(true);
        dileveryNum_txt.setText("0");
        SwingUtil.clearTable(deliver);
        searchAddressButton1.setEnabled(false);               
        if (0 < deliver.getRowCount()) {
            deliver.removeRowSelectionInterval(0, deliver.getRowCount() - 1);
        }
        this.changeCurrentData();        
        // Thanh start add 2014/07/01
        customerNo.setText("");
        customerName1.setText("");
        customerName2.setText("");
        customerID = 0;
        setEnableButtonInfo();
        SaveTemp.setEnabled(false); 
        // Thanh end add 2014/07/01
    }
    public MstShop getSelectedShop()
	{
                if (cmbShop.getSelectedItem() == null) {
                    return SystemInfo.getCurrentShop();
                } else {
                    return (MstShop)cmbShop.getSelectedItem();
                }
	}
    private boolean UpdateDelivery() {

        boolean result = true;
        ConnectionWrapper con = SystemInfo.getConnection();
        try {
            con.begin();
                for (MstProductDeliveryManagement pdm : listTemp) {
                    result &= UpdateDelivery(pdm, con);
                    if (!result) {
                        break;
                    }
                }
            if (!result) {
                con.rollback();
            } else {
                con.commit();
                listTemp.clear();
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        return result;
    }
    

    private boolean UpdateDelivery(MstProductDeliveryManagement pdm, ConnectionWrapper con) {
        boolean result = false;
        try {
            result = pdm.updateStatusDelivery(con);
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        return result;
    }

    /**
     * 選択データが変更されたときの処理を行う。
     */
    private void changeCurrentData() {   
        int index = deliver.getSelectedRow();
        if (0 <= index && index < list.size() && index != selIndex) {
            selIndex = index;
            
            //選択されているデータを表示
            this.showCurrentData();
          
        }
        this.changeButtonEnabled(0 <= selIndex);
        // Thanh start add 2014/07/01
        setEnableButtonInfo();
        // Thanh end add 2014/07/01
    }

    /**
     * 選択されたデータを入力項目に表示する。
     */
    private void showCurrentData() {
        MstProductDeliveryManagement pdm = list.get(selIndex);    
        // Thanh start add 2014/07/01
        customerNo.setText(pdm.getCustomer().getCustomerNo());
        customerName1.setText(pdm.getCustomer().getCustomerName(0));
        customerName2.setText(pdm.getCustomer().getCustomerName(1));
        customerID = pdm.getCustomer().getCustomerID();
        // Thanh end add 2014/07/01
        postalCode.setText((pdm.getPostalCode() == null ? "" : pdm.getPostalCode()));
        address1.setText((pdm.getAddress(0) == null ? "" : pdm.getAddress(0)));
        address2.setText((pdm.getAddress(1) == null ? "" : pdm.getAddress(1)));
        address3.setText((pdm.getAddress(2) == null ? "" : pdm.getAddress(2)));
        address4.setText((pdm.getAddress(3) == null ? "" : pdm.getAddress(3)));

        if (pdm.getStatus() == 1) {
            this.rdoOne.setSelected(true);

        } else if (pdm.getStatus() == 2) {
            this.rdoTwo.setSelected(true);

        }
        dileveryNum_txt.setText(pdm.getDelivertNum().toString());
        SaveTemp.setEnabled(true);
        if (pdm.getDeliverDate() != null) {
            cmbDate.setDate(pdm.getDeliverDate());
            Calendar cal2 = Calendar.getInstance();
            cal2.setTime(pdm.getDeliverDate());
            String hour = cal2.get(Calendar.HOUR_OF_DAY) + "";
            String minute = cal2.get(Calendar.MINUTE) + "";
            if(Integer.parseInt(hour) < 10){
                txt_Hour.setText("0"+ hour);
            }else{
            txt_Hour.setText(hour);
            }
            if(Integer.parseInt(minute) < 10){
                txt_Minute.setText("0"+minute);
            }else {
            txt_Minute.setText(minute);
            }
        } else {
            cmbDate.setDate("");
            txt_Hour.setText("00");
            txt_Minute.setText("00");
        }      
    }

    /**
     * ボタンのEnabledを変更する。
     *
     * @param enabled Enabled
     */
    private void changeButtonEnabled(boolean enabled) {
       // renewButton.setEnabled(enabled);
        if(SystemInfo.getCurrentShop().getShopID() == 0){
        SaveTemp.setEnabled(enabled);
        }else {
          SaveTemp.setEnabled(!enabled);
        }
        

    }

    private void setEnableButtonInfo() {        
        if (customerID > 0) {
            customerInfoButton.setEnabled(true);
        }
        else
        {
             customerInfoButton.setEnabled(false);
        }
    }
    
    private class TableCellAlignRenderer extends SelectTableCellRenderer {

           /**
            * Creates a new instance of ReservationTableCellRenderer
            */
           public TableCellAlignRenderer() {
               super();
           }

           /**
            * テーブルセルレンダリングを返します。
            *
            * @param table JTable
            * @param value セルに割り当てる値
            * @param isSelected セルが選択されている場合は true
            * @param hasFocus フォーカスがある場合は true
            * @param row 行
            * @param column 列
            * @return テーブルセルレンダリング
            */

           public Component getTableCellRendererComponent(JTable table,
                   Object value, boolean isSelected, boolean hasFocus, int row, int column) {
               super.getTableCellRendererComponent(table, value,
                       isSelected, hasFocus, row, column);

               switch (column) {                   
                   case 6:
                   case 7:                   
                       super.setHorizontalAlignment(SwingConstants.RIGHT);        
                       break;
                   case 1:
                       super.setHorizontalAlignment(SwingConstants.CENTER);       
                       break;
                   default:
                       super.setHorizontalAlignment(SwingConstants.LEFT);
                       break;
               }

               return this;
           }
       }

    public boolean readBarcode(BarcodeEvent be) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * 商品マスタ登録画面用FocusTraversalPolicy
     */
    private class DeliveryStatusManagementFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {

            if (SystemInfo.getCurrentShop().getShopID() == 0) {
                if (aComponent.equals(cmbShop)) {
                    return cmbStartDate;
                } else if (aComponent.equals(cmbStartDate)) {
                    return cmbEndDate;
                } else if (aComponent.equals(cmbEndDate)) {
                    if (itemAll.isSelected()) {
                        return itemAll;
                    } else if (itemUseStatusOne.isSelected()) {
                        return itemUseStatusOne;
                    }

                    return itemUseStatusTwo;
                } else if (aComponent.equals(itemAll) || aComponent.equals(itemUseStatusOne) || aComponent.equals(itemUseStatusTwo)) {
                    return postalCode;
                } else if (aComponent.equals(postalCode)) {
                    return address1;
                } else if (aComponent.equals(address1)) {
                    return address2;
                } else if (aComponent.equals(address2)) {
                    return address3;
                } else if (aComponent.equals(address3)) {
                    return address4;
                } else if (aComponent.equals(address4)) {
                    return cmbDate;
                } else if (aComponent.equals(cmbDate)) {
                    return txt_Hour;
                } else if (aComponent.equals(txt_Hour)) {
                    return txt_Minute;

                } else if (aComponent.equals(txt_Minute)) {
                    if (rdoOne.isSelected()) {
                        return rdoOne;
                    }
                    return rdoTwo;
                } else if (aComponent.equals(rdoOne) || aComponent.equals(rdoTwo)) {
                    return dileveryNum_txt;
                } else if (aComponent.equals(dileveryNum_txt)) {
                    if (cmbShop.isEnabled()) {
                        return cmbShop;
                    }
                    return cmbStartDate;
                }

                return cmbStartDate;
            } else {
                if (aComponent.equals(cmbStartDate)) {
                    return cmbEndDate;
                } else if (aComponent.equals(cmbEndDate)) {
                    if (itemAll.isSelected()) {
                        return itemAll;
                    } else if (itemUseStatusOne.isSelected()) {
                        return itemUseStatusOne;
                    }

                    return itemUseStatusTwo;

                }
                return cmbStartDate;
            }
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {     
            if (SystemInfo.getCurrentShop().getShopID() == 0) {
            if (aComponent.equals(cmbShop)) {
                return dileveryNum_txt;
            } else if (aComponent.equals(dileveryNum_txt)) {
                if (rdoOne.isSelected()) {
                    return rdoOne;
                }
                return rdoTwo;
                
            } else if (aComponent.equals(rdoOne) || aComponent.equals(rdoTwo)) {
               return txt_Minute; 
            } else if (aComponent.equals(txt_Minute)) {
                return txt_Hour;
               
            } else if (aComponent.equals(txt_Hour)) {
                return cmbDate;
               
            }else if (aComponent.equals(cmbDate)) {
                return address4;
               
            }else if (aComponent.equals(address4)) {
                return address3;
               
            }else if (aComponent.equals(address3)) {
                return address2;
               
            }else if (aComponent.equals(address2)) {
                return address1;
               
            }else if (aComponent.equals(address1)) {
                return postalCode;
               
            }else if (aComponent.equals(postalCode)) {
                if (itemUseStatusTwo.isSelected()) {
                    return itemUseStatusTwo;
                } else if (itemUseStatusOne.isSelected()) {
                    return itemUseStatusOne;
                }
                return itemAll;
               
            }else if (aComponent.equals(itemUseStatusTwo) || aComponent.equals(itemUseStatusOne) || aComponent.equals(itemAll)) {
                return cmbEndDate;
               
            }else if (aComponent.equals(cmbEndDate)) {
                return cmbStartDate;
               
            }
            else if (aComponent.equals(cmbStartDate)) {
                if(cmbShop.isEnabled()){
                    return cmbShop;
                }
                return cmbEndDate;
               
            }         
            return cmbShop;
        }else {
                if (aComponent.equals(itemUseStatusTwo) || aComponent.equals(itemUseStatusOne) || aComponent.equals(itemAll)) {
                    return cmbEndDate;
                } else if (aComponent.equals(cmbEndDate)) {
                    return cmbStartDate;

                } else if (aComponent.equals(cmbStartDate)) {
                    if (itemUseStatusTwo.isSelected()) {
                        return itemUseStatusTwo;
                    } else if (itemUseStatusOne.isSelected()) {
                        return itemUseStatusOne;
                    }
                    return itemAll;

                }
                return cmbStartDate;
            }
        }
        
        

        /**
         * トラバーサルサイクルの最初の Component を返します。 このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer 先頭の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer) {
            return itemAll;
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。 このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer aContainer - 最後の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer) {
            return itemAll;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。 aContainer
         * をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         *
         * @param aContainer デフォルトの Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer) {
            return itemAll;
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。 show() または setVisible(true)
         * の呼び出しで一度ウィンドウが表示されると、 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、 または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         *
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        @Override
        public Component getInitialComponent(Window window) {
            return itemAll;
        }
    }

    /**
     * JTableの列幅を初期化する。
     */
    private void initTableColumnWidth() {
        //列の幅を設定する。
        deliver.getColumnModel().getColumn(0).setPreferredWidth(100);
        deliver.getColumnModel().getColumn(1).setPreferredWidth(60);
        deliver.getColumnModel().getColumn(2).setPreferredWidth(60);
        deliver.getColumnModel().getColumn(3).setPreferredWidth(80);
        deliver.getColumnModel().getColumn(4).setPreferredWidth(90);
        deliver.getColumnModel().getColumn(5).setPreferredWidth(140);
        deliver.getColumnModel().getColumn(6).setPreferredWidth(35); 
        deliver.getColumnModel().getColumn(7).setPreferredWidth(35);
        deliver.getColumnModel().getColumn(8).setPreferredWidth(70);
    }

    private String getDate(java.util.Date date) {
        DateFormat df = new SimpleDateFormat("yyyy/MM/dd HH:mm");
        if (date != null) {
            return df.format(date);
        } else {
            return "";
        }
    }


    private void SearchData() {
        ConnectionWrapper con = SystemInfo.getConnection();
        try {
           
            listTemp.clear();
            renewButton.setEnabled(false);            
            Integer flag;
            pdm.setStartDate(this.cmbStartDate.getDate());
            pdm.setEndDate(this.cmbEndDate.getDate());
            if (itemUseStatusOne.isSelected()) {
                // 未配送 
                flag = 1;
            } else if (itemUseStatusTwo.isSelected()) {
                // 配送済 
                flag = 2;
            } else {
                // 全て
                flag = 0;
            }
              if (cmbShop.getSelectedItem() instanceof MstGroup) {

                MstGroup mg = (MstGroup) cmbShop.getSelectedItem();
                pdm.setShopID(0);
                pdm.setShopIDList(mg.getShopIDListAll());
                // Thanh start add 2014/07/02
                //対象となる店舗が存在しない場合
                if (pdm.getShopIDList().equals("")) {
                    
                    clearTemp();
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(4001),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);                    
                    return;
                }
                // Thanh end add 2014/07/02
            } else if (cmbShop.getSelectedItem() instanceof MstShop) {

                MstShop ms = (MstShop) cmbShop.getSelectedItem();
                pdm.setShopID(ms.getShopID());
            }
              
            try {
                list = pdm.loadDeliver(con, flag);
            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
             if(list.size() == 0){
                    postalCode.setText("");
                    address1.setText("");
                    address2.setText("");
                    address3.setText("");
                    address4.setText("");
                    cmbDate.setDate("");
                    txt_Hour.setText("00");
                    txt_Minute.setText("00");
                    rdoOne.setSelected(true);
                    dileveryNum_txt.setText("0");
                    SaveTemp.setEnabled(false);
                    searchAddressButton1.setEnabled(false);
                }
            
            NumberFormat nf = NumberFormat.getInstance();
            DefaultTableModel model = (DefaultTableModel) deliver.getModel();
            model.setRowCount(0);
            if (list != null && list.size() > 0) {
                for (MstProductDeliveryManagement mpdm : list) {
                    Object[] rowData = {
                        mpdm.getSalesDetail().getShop().getShopName(),
                        getCustomerInfoButton(mpdm.getCustomer().getCustomerID()),
                        mpdm.getCustomer().getCustomerNo(),
                        mpdm.getCustomer().getFullCustomerName(),
                        getDate(mpdm.getDeliverDate()) == null ? "" : getDate(mpdm.getDeliverDate()),
                        mpdm.getProductName(),
                        mpdm.getSalesNum().intValue(),                    
                        mpdm.getDelivertNum(),
                        mpdm.getStatus() == 1 ? "未配送" : "配送済",
                        mpdm
                    };
                    model.addRow(rowData);
                } 
                
                deliver.setRowSelectionInterval(0, 0);
                this.changeCurrentData();
                searchAddressButton1.setEnabled(true);
               
//                DefaultTableCellRenderer temp = new DefaultTableCellRenderer();
//                temp.setHorizontalAlignment(JLabel.RIGHT);
//                deliver.getColumnModel().getColumn(3).setCellRenderer(temp);               
//                deliver.getColumnModel().getColumn(4).setCellRenderer(temp);        
//                DefaultTableCellRenderer temp2 = new DefaultTableCellRenderer();
//                temp2.setHorizontalAlignment(JLabel.LEFT);
//                deliver.getColumnModel().getColumn(2).setCellRenderer(temp2);
//                DefaultTableCellRenderer temp3 = new DefaultTableCellRenderer();
//                temp3.setHorizontalAlignment(JLabel.CENTER);
//                deliver.getColumnModel().getColumn(0).setCellRenderer(temp3);
//                deliver.getColumnModel().getColumn(1).setCellRenderer(temp3);
//                deliver.getColumnModel().getColumn(5).setCellRenderer(temp3);
            } 
            con.close();
        } catch (Exception ex) {
            Logger.getLogger(DeliveryStatusManagementPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
	 * 顧客情報ボタンを取得する
	 */
	private JButton getCustomerInfoButton(final Integer customerID)
	{
		JButton		customerButton	=	new JButton();
		customerButton.setBorderPainted(false);
		customerButton.setContentAreaFilled(false);
                //上記以外の場合
                    customerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                    "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/customer_off.jpg")));
                    customerButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                                    "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/customer_on.jpg")));
		customerButton.setSize(48, 25);
		customerButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
			    MstCustomerPanel mcp = null;
                            
                            try {
                                
                                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                                mcp = new MstCustomerPanel(customerID , false, false, true);                                
                                SwingUtil.openAnchorDialog( null, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );

                            } finally {
                                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            }

			    //顧客情報が更新された場合、画面をリフレッシュ
                            boolean isRenewed = mcp.isRenewed();

			    ((JDialog)mcp.getParent().getParent().getParent().getParent()).dispose();
			    
                            if(isRenewed) {
                                refresh();
                            }
			    
			}
		});
		return customerButton;
	}    
    
    private void setData(MstProductDeliveryManagement pdm) {
        pdm.setPostalCode(this.getPostalCode());
        pdm.setAddress(0, this.address1.getText());
        pdm.setAddress(1, this.address2.getText());
        pdm.setAddress(2, this.address3.getText());
        pdm.setAddress(3, this.address4.getText());
        Calendar sCalendar = Calendar.getInstance();
        sCalendar.setTime(this.cmbDate.getDate());
        try {
           if (txt_Hour.getText() == null || txt_Minute.getText() == null) {
                sCalendar.set(Calendar.HOUR, 0);
                sCalendar.set(Calendar.MINUTE, 0);

            } else {
                sCalendar.set(Calendar.HOUR, (Integer.parseInt(txt_Hour.getText())));
                sCalendar.set(Calendar.MINUTE, (Integer.parseInt(txt_Minute.getText())));
                pdm.setDeliverDate(sCalendar.getTime());

            }
           if (dileveryNum_txt.getText() == null) {
               this.dileveryNum_txt.setText("0");

            } else {
                pdm.setDelivertNum(Integer.parseInt(dileveryNum_txt.getText()));
            }
        } catch (Exception ex) {
            SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);

        }
        

    }
    private void SaveTempData() {
        boolean isCheck = false;
        MstProductDeliveryManagement pdm = list.get(deliver.getSelectedRow());
        pdm.setPostalCode(this.getPostalCode());
        pdm.setAddress(0, this.address1.getText());
        pdm.setAddress(1, this.address2.getText());
        pdm.setAddress(2, this.address3.getText());
        pdm.setAddress(3, this.address4.getText());
        Calendar sCalendar = Calendar.getInstance();
        
        sCalendar.setTime(this.cmbDate.getDate());
        try {

        sCalendar.set(Calendar.HOUR, (Integer.parseInt(txt_Hour.getText())));
        sCalendar.set(Calendar.MINUTE, (Integer.parseInt(txt_Minute.getText())));
        pdm.setDeliverDate(sCalendar.getTime());

        if (dileveryNum_txt.getText() == null) {
            this.dileveryNum_txt.setText("0");

        } else {
            pdm.setDelivertNum(Integer.parseInt(dileveryNum_txt.getText()));
        }
        } catch (Exception ex) {
            SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
        }
       
        if (rdoOne.isSelected()) {
                pdm.setStatus(1);
            } else {
                pdm.setStatus(2);
            }

        for (MstProductDeliveryManagement item : listTemp) {
            //Xem lai cho nay neu ko dung ham equal hascode
            if (item.equals(pdm)) {
                isCheck = true;
            }
        }
        if (isCheck) {
            listTemp.remove(pdm);
        }
        listTemp.add(pdm);
        int index = deliver.getSelectedRow();
            if (listTemp.size() > 0) {
            renewButton.setEnabled(true);  
            searchAddressButton1.setEnabled(false);
            try{  
            deliver.setValueAt(sCalendar.getTime() ==null ? "" : getDate(sCalendar.getTime()), index, 4);      
            deliver.setValueAt(dileveryNum_txt.getText()== null ? "0" : Integer.parseInt(dileveryNum_txt.getText()), index, 7);
            deliver.setValueAt(rdoOne.isSelected() ? "未配送" : "配送済", index, 8);
            }
            catch(Exception ex){
               SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex); 
            }      

        }
        
    }
 
}
