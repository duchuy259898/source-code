/*
 * MstKarteDetailPanel.java
 *
 * Created on 2008/09/22, 22:00
 */

package com.geobeck.sosia.pos.basicinfo.customer;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.logging.*;

import com.geobeck.sosia.pos.master.customer.MstKarteClass;
import com.geobeck.sosia.pos.master.customer.MstKarteClasses;
import com.geobeck.sosia.pos.master.customer.MstKarteDetail;
import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.SystemInfo;


/**
 *
 * @author  saito
 */
public class MstKarteDetailPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private MstKarteClasses		mkcs		=	new MstKarteClasses();
	private MstKarteClass		mkc		=	new MstKarteClass();
	private Integer                 selIndex	=	-1;
	
    /**
     * Creates new form MstKarteDetailPanel
     */
	public MstKarteDetailPanel()
	{
		super();
		initComponents();
		addMouseCursorChange();
		this.setSize(420, 680);
		this.setPath("基本設定 >> 顧客マスタ");
		this.setTitle("カルテ詳細登録");
		this.setListener();
		this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        karteClassLabel = new javax.swing.JLabel();

        try
        {
            ConnectionWrapper	con	=	SystemInfo.getConnection();

            mkcs.load(con);

            con.close();
        }
        catch(SQLException e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        karteClass = new JComboBox(new DefaultComboBoxModel(mkcs.toArray())
            {
                public void setSelectedItem(Object o)
                {
                    super.setSelectedItem(o);
                }
            });
            karteDetailNameLabel = new javax.swing.JLabel();
            karteDetailName = new com.geobeck.swing.JFormattedTextFieldEx();
            ((PlainDocument)karteDetailName.getDocument()).setDocumentFilter(
                new CustomFilter(30));
            displaySeqLabel = new javax.swing.JLabel();
            displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
            ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
                new CustomFilter(4, CustomFilter.NUMERIC));
            jPanel1 = new javax.swing.JPanel();
            addButton = new javax.swing.JButton();
            renewButton = new javax.swing.JButton();
            deleteButton = new javax.swing.JButton();
            karteDetailScrollPane = new javax.swing.JScrollPane();
            karteDetail = new javax.swing.JTable();

            setFocusCycleRoot(true);
            setFocusTraversalPolicy(getFocusTraversalPolicy());
            setFocusTraversalPolicyProvider(true);
            karteClassLabel.setText("\u5206\u985e\u540d");

            karteClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            karteClass.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    karteClassActionPerformed(evt);
                }
            });

            karteDetailNameLabel.setText("\u30ab\u30eb\u30c6\u8a73\u7d30\u540d");

            karteDetailName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            karteDetailName.setColumns(30);
            karteDetailName.setInputKanji(true);

            displaySeqLabel.setText("\u633f\u5165\u4f4d\u7f6e");

            displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            displaySeq.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusLost(java.awt.event.FocusEvent evt) {
                    displaySeqFocusLost(evt);
                }
            });

            jPanel1.setOpaque(false);
            addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
            addButton.setBorderPainted(false);
            addButton.setContentAreaFilled(false);
            addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
            addButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    addButtonActionPerformed(evt);
                }
            });

            renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
            renewButton.setBorderPainted(false);
            renewButton.setContentAreaFilled(false);
            renewButton.setEnabled(false);
            renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
            renewButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    renewButtonActionPerformed(evt);
                }
            });

            deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
            deleteButton.setBorderPainted(false);
            deleteButton.setContentAreaFilled(false);
            deleteButton.setEnabled(false);
            deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
            deleteButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    deleteButtonActionPerformed(evt);
                }
            });

            org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(106, Short.MAX_VALUE)
                    .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            );

            karteDetailScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            karteDetail.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null}
                },
                new String [] {
                    "カルテ詳細名", "表示順"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.Integer.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            karteDetail.setSelectionBackground(new java.awt.Color(220, 220, 220));
            karteDetail.setSelectionForeground(new java.awt.Color(0, 0, 0));
            karteDetail.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            karteDetail.getTableHeader().setReorderingAllowed(false);
            SwingUtil.setJTableHeaderRenderer(karteDetail, SystemInfo.getTableHeaderRenderer());
            karteDetail.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
            this.initTableColumnWidth();
            SelectTableCellRenderer.setSelectTableCellRenderer(karteDetail);
            karteDetail.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    karteDetailMouseReleased(evt);
                }
            });
            karteDetail.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    karteDetailKeyReleased(evt);
                }
            });

            karteDetailScrollPane.setViewportView(karteDetail);

            org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, karteDetailScrollPane, 0, 0, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(karteClassLabel)
                                .add(karteDetailNameLabel))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(karteClass, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(karteDetailName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(displaySeqLabel)
                            .add(5, 5, 5)
                            .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(karteClassLabel)
                        .add(karteClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(karteDetailNameLabel)
                        .add(karteDetailName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(displaySeqLabel))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(karteDetailScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                    .addContainerGap())
            );
        }// </editor-fold>//GEN-END:initComponents

        private void displaySeqFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_displaySeqFocusLost
                if(! CheckUtil.isNumber(displaySeq.getText()))                                                                               
                        displaySeq.setText("");                        
        }//GEN-LAST:event_displaySeqFocusLost

        private void karteClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_karteClassActionPerformed
		refresh();
        }//GEN-LAST:event_karteClassActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		if(this.delete())
		{
			this.refresh();
		}
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		if(this.checkInput())
		{
			if(this.regist(false))
			{
				this.refresh();
			}
			else
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "カルテ詳細"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
		if(this.checkInput())
		{
			if(this.regist(true))
			{
				this.refresh();
			}
			else
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "カルテ詳細"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_addButtonActionPerformed

        private void karteDetailMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_karteDetailMouseReleased
		this.changeCurrentData();
        }//GEN-LAST:event_karteDetailMouseReleased

        private void karteDetailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_karteDetailKeyReleased
		this.changeCurrentData();
        }//GEN-LAST:event_karteDetailKeyReleased
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox karteClass;
    private javax.swing.JLabel karteClassLabel;
    private javax.swing.JTable karteDetail;
    private com.geobeck.swing.JFormattedTextFieldEx karteDetailName;
    private javax.swing.JLabel karteDetailNameLabel;
    private javax.swing.JScrollPane karteDetailScrollPane;
    private javax.swing.JButton renewButton;
    // End of variables declaration//GEN-END:variables
	/**
	 * カルテ詳細マスタ登録画面用FocusTraversalPolicy
	 */
	private	MstKarteDetailFocusTraversalPolicy	ftp	=
			new MstKarteDetailFocusTraversalPolicy();
	
	/**
	 * カルテ詳細マスタ登録画面用FocusTraversalPolicyを取得する。
	 * @return カルテ詳細マスタ登録画面用FocusTraversalPolicy
	 */
    @Override
	public FocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(addButton);
		SystemInfo.addMouseCursorChange(renewButton);
		SystemInfo.addMouseCursorChange(deleteButton);
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
		karteClass.addKeyListener(SystemInfo.getMoveNextField());
		karteDetailName.addKeyListener(SystemInfo.getMoveNextField());
		karteDetailName.addFocusListener(SystemInfo.getSelectText());
		displaySeq.addKeyListener(SystemInfo.getMoveNextField());
		displaySeq.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
		if(0 < karteClass.getItemCount())
		{
			karteClass.setSelectedIndex(0);
		}
		
		this.refresh();
	}
	
	public boolean checkClassRegisted()
	{
		return	(0 < mkcs.size());
	}
	
	/**
	 * 表示を更新する。
	 */
	private void refresh()
	{
		if(0 <= karteClass.getSelectedIndex())
		{
			mkc	=	(MstKarteClass)karteClass.getSelectedItem();
			
			//カルテ詳細マスタをデータベースから読み込む
			try
			{
				ConnectionWrapper	con	=	SystemInfo.getConnection();

				mkc.loadKarteDetail(con);
			}
			catch(SQLException e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		
		//テーブルにカルテ詳細マスタデータを表示する
		this.showData();
		//入力をクリアする
		this.clear();
		
		karteDetailName.requestFocusInWindow();
	}
	
	/**
	 * 入力項目をクリアする。
	 */
	private void clear()
	{
		selIndex	=	-1;
		karteDetailName.setText("");
		displaySeq.setText("");
		
		if(0 < karteDetail.getRowCount())
				karteDetail.removeRowSelectionInterval(0, karteDetail.getRowCount() - 1);
		
		this.changeCurrentData();
	}
	
	/**
	 * データを表示する。
	 */
	private void showData()
	{
		SwingUtil.clearTable(karteDetail);
		DefaultTableModel	model	=	(DefaultTableModel)karteDetail.getModel();
		
		for(MstKarteDetail mkd : mkc)
		{
			Object[]	rowData	=	{	mkd.getKarteDetailName(),
                                                                mkd.getDisplaySeq()	};
			model.addRow(rowData);
		}
	}
	
	/**
	 * 選択データが変更されたときの処理を行う。
	 */
	private void changeCurrentData()
	{
		int	index	=	karteDetail.getSelectedRow();
		
		if(0 <= index && index < mkc.size() && index != selIndex)
		{
			selIndex	=	index;
			
			//選択されているデータを表示
			this.showCurrentData();
		}
		
		this.changeButtonEnabled(0 <= selIndex);
	}
	
	/**
	 * 選択されたデータを入力項目に表示する。
	 */
	private void showCurrentData()
	{
		MstKarteDetail	mkd	=	mkc.get(selIndex);
		
		karteDetailName.setText(mkd.getKarteDetailName());
		displaySeq.setText(mkd.getDisplaySeq().toString());
	}
	
	/**
	 * ボタンのEnabledを変更する。
	 * @param enabled Enabled
	 */
	private void changeButtonEnabled(boolean enabled)
	{
		//addButton.setEnabled(!enabled);
		renewButton.setEnabled(enabled);
		deleteButton.setEnabled(enabled);
	}
	
	/**
	 * 入力チェックを行う。
	 * @return 入力エラーがなければtrueを返す。
	 */
	private boolean checkInput()
	{
		//カルテ分類
		if(karteClass.getSelectedIndex() < 0)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "カルテ分類"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			karteClass.requestFocusInWindow();
			return	false;
		}
		//カルテ詳細名
		if(karteDetailName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "カルテ詳細名"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			karteDetailName.requestFocusInWindow();
			return	false;
		}
		
		return	true;
	}
	
	/**
	 * 選択されているカルテ分類ＩＤをセットする。
	 * @param karteClassID カルテ分類ＩＤ
	 */
	public void setSelectedKarteClassID(Integer karteClassID)
	{
		if(karteClassID == null)	return;
		
		for(MstKarteClass mkc : mkcs)
		{
			if(karteClassID == mkc.getKarteClassId())
			{
				karteClass.setSelectedItem(mkc);
				return;
			}
		}
	}
	
	
	/**
	 * 入力されたデータを登録する。
	 * @param isAdd true - 追加処理
	 * @return true - 成功
	 */
	private boolean regist(boolean isAdd)
	{
		boolean		result	=	false;
		MstKarteDetail		mkd		=	new MstKarteDetail();
		
		if(!isAdd && 0 <= selIndex)
		{
			mkd.setData(mkc.get(selIndex));
		}
		
		this.setData(mkd);
		
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		try
		{
			con.begin();
			
			if(mkd.regist(con, (0 < selIndex ? mkc.get(selIndex).getDisplaySeq() : -1)))
			{
                                result	=	true;
			}
			
			if(result)
			{
				con.commit();
			}
			else
			{
				con.rollback();
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	result;
	}
	
	/**
	 * カルテ詳細マスタデータからデータをセットする。
	 * @param mkd カルテ詳細マスタ登録画面用FocusTraversalPolicy
	 */
	private void setData(MstKarteDetail mkd)
	{
		mkd.setKarteClass((MstKarteClass)karteClass.getSelectedItem());
		mkd.setKarteDetailName(karteDetailName.getText());
		mkd.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText().replace(",", ""))));
	}
	
	/**
	 * 選択されたデータを削除する。
	 * @return true - 成功
	 */
	private boolean delete()
	{
		boolean		result	=	false;
		MstKarteDetail		mkd	=	null;
		
		if(0 <= selIndex && selIndex < mkc.size())
		{
			mkd	=	mkc.get(selIndex);
		}
		
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		try
		{
			con.begin();
			
			if(mkd.delete(con))
			{
				con.commit();
				this.refresh();
				result	=	true;
			}
			else
			{
				con.rollback();
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	result;
	}
	
	/**
	 * カルテ詳細マスタ登録画面用FocusTraversalPolicy
	 */
	private class MstKarteDetailFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(karteClass))
			{
				return karteDetailName;
			}
			else if (aComponent.equals(karteDetailName))
			{
				return displaySeq;
			}
			else if (aComponent.equals(displaySeq))
			{
				return karteClass;
			}
			
			return karteClass;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(karteClass))
			{
				return displaySeq;
			}
			else if (aComponent.equals(karteDetailName))
			{
				return karteClass;
			}
			else if (aComponent.equals(displaySeq))
			{
				return karteDetailName;
			}
			
			return karteClass;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return karteClass;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return displaySeq;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return karteClass;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
        @Override
		public Component getInitialComponent(Window window)
		{
			return karteClass;
		}
	}
	
	
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		karteDetail.getColumnModel().getColumn(0).setPreferredWidth(240);
		karteDetail.getColumnModel().getColumn(1).setPreferredWidth(50);
	}
	
	/**
	 * 列の表示位置を設定するTableCellRenderer
	 */
	private class TableCellAlignRenderer extends DefaultTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}

		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
        @Override
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);
			
			switch(column)
			{
				case 1:
					super.setHorizontalAlignment(SwingConstants.RIGHT);
					break;
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}

			return this;
		}
	}
}
