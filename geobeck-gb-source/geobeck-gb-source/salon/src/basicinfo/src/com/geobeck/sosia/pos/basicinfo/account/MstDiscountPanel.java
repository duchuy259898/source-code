/*
 * MstDiscountPanel.java
 *
 * Created on 2008/10/11, 10:30
 */

package com.geobeck.sosia.pos.basicinfo.account;

import com.geobeck.sosia.pos.basicinfo.company.MstUseDiscountPanel;
import com.geobeck.sosia.pos.master.account.MstDiscount;
import com.geobeck.sosia.pos.master.account.MstDiscounts;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.swing.*;
import java.awt.event.HierarchyEvent;

/**
 *
 * @author  saito
 */
public class MstDiscountPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
        //割引区分
        public	static	final	int	DISCOUNT_DIVISION_ALL           =	0;
	public	static	final	int	DISCOUNT_DIVISION_TECHNIC	=	1;
	public	static	final	int	DISCOUNT_DIVISION_PRODUCT	=	2;
        //nhanvt start add 20141219 New request #34216
        public	static	final	int	DISCOUNT_DIVISION_COURSE	=	5;
        //nhanvt end add 20141219 New request #34216
        //割引方法
	public	static	final	int	DISCOUNT_METHOD_VALUE	=	1;
	public	static	final	int	DISCOUNT_METHOD_RATE	=	2;
	
	private MstDiscounts		mds			=	new MstDiscounts();
	private Integer		selIndex	=	-1;
	
    //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
    private boolean isLoadDisplay= false;
    //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す

	/**
     * Creates new form MstDiscountPanel
     */
	public MstDiscountPanel()
	{
		super();
		initComponents();
		addMouseCursorChange();
		this.setSize(515, 680);
		this.setPath("基本設定 >> 精算マスタ");
		this.setTitle("割引種別登録");
		this.setListener();
                this.setDiscountMethodEnabled();
		this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        monthGroup = new javax.swing.ButtonGroup();
        divisionGroup = new javax.swing.ButtonGroup();
        discountNameLabel = new javax.swing.JLabel();
        discountName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)discountName.getDocument()).setDocumentFilter(
            new CustomFilter(10));
        displaySeqLabel = new javax.swing.JLabel();
        displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        discountDivisionLabel = new javax.swing.JLabel();
        divisionAll = new javax.swing.JRadioButton();
        divisionTechnic = new javax.swing.JRadioButton();
        divisionProduct = new javax.swing.JRadioButton();
        discountMethodLabel = new javax.swing.JLabel();
        methodValue = new javax.swing.JRadioButton();
        discountValue = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)discountValue.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        yenLabel = new javax.swing.JLabel();
        methodRate = new javax.swing.JRadioButton();
        discountRate = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)discountRate.getDocument()).setDocumentFilter(
            new CustomFilter(3, CustomFilter.NUMBER));
        percentLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        discountsScrollPane = new javax.swing.JScrollPane();
        discounts = new javax.swing.JTable();
        shopSettingButton = new javax.swing.JButton();
        divisionCourse = new javax.swing.JRadioButton();

        setFocusCycleRoot(true);
        addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                formHierarchyChanged(evt);
            }
        });

        discountNameLabel.setText("割引種別名");

        discountName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        discountName.setColumns(10);
        discountName.setInputKanji(true);

        displaySeqLabel.setText("挿入位置");

        displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        discountDivisionLabel.setText("割引区分");

        divisionGroup.add(divisionAll);
        divisionAll.setSelected(true);
        divisionAll.setText("全体");
        divisionAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        divisionAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
        divisionAll.setOpaque(false);

        divisionGroup.add(divisionTechnic);
        divisionTechnic.setText("技術");
        divisionTechnic.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        divisionTechnic.setMargin(new java.awt.Insets(0, 0, 0, 0));
        divisionTechnic.setOpaque(false);

        divisionGroup.add(divisionProduct);
        divisionProduct.setText("商品");
        divisionProduct.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        divisionProduct.setMargin(new java.awt.Insets(0, 0, 0, 0));
        divisionProduct.setOpaque(false);

        discountMethodLabel.setText("割引方法");

        monthGroup.add(methodValue);
        methodValue.setSelected(true);
        methodValue.setText("金額");
        methodValue.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        methodValue.setMargin(new java.awt.Insets(0, 0, 0, 0));
        methodValue.setOpaque(false);
        methodValue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                methodValueStateChanged(evt);
            }
        });

        discountValue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        discountValue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        yenLabel.setText("円");

        monthGroup.add(methodRate);
        methodRate.setText("パーセント");
        methodRate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        methodRate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        methodRate.setOpaque(false);
        methodRate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                methodRateStateChanged(evt);
            }
        });

        discountRate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        discountRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        percentLabel.setText("％");

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        discountsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        discounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "割引種別名", "区分", "方法", "金額｜％", "表示順"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        discounts.setSelectionBackground(new java.awt.Color(220, 220, 220));
        discounts.setSelectionForeground(new java.awt.Color(0, 0, 0));
        discounts.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        discounts.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(discounts, SystemInfo.getTableHeaderRenderer());
        discounts.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(discounts);
        discounts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                discountsMouseReleased(evt);
            }
        });
        discounts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                discountsKeyReleased(evt);
            }
        });
        discountsScrollPane.setViewportView(discounts);

        shopSettingButton.setIcon(SystemInfo.getImageIcon("/button/master/shop_setting_off.jpg"));
        shopSettingButton.setBorderPainted(false);
        shopSettingButton.setPressedIcon(SystemInfo.getImageIcon("/button/master/shop_setting_on.jpg"));
        shopSettingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopSettingButtonActionPerformed(evt);
            }
        });

        divisionGroup.add(divisionCourse);
        divisionCourse.setText("コース");
        divisionCourse.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        divisionCourse.setMargin(new java.awt.Insets(0, 0, 0, 0));
        divisionCourse.setOpaque(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(discountNameLabel)
                            .add(discountDivisionLabel)
                            .add(discountMethodLabel))
                        .add(14, 14, 14)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(methodRate)
                                    .add(divisionAll)
                                    .add(methodValue))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(discountRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(percentLabel))
                                    .add(layout.createSequentialGroup()
                                        .add(discountValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(yenLabel))
                                    .add(layout.createSequentialGroup()
                                        .add(divisionTechnic)
                                        .add(31, 31, 31)
                                        .add(divisionProduct)
                                        .add(34, 34, 34)
                                        .add(divisionCourse)))
                                .add(176, 176, 176))
                            .add(layout.createSequentialGroup()
                                .add(discountName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(displaySeqLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(layout.createSequentialGroup()
                        .add(shopSettingButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(95, 95, 95)
                        .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(discountsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 500, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(discountNameLabel)
                    .add(discountName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displaySeqLabel))
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(divisionAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(discountDivisionLabel)
                    .add(divisionTechnic)
                    .add(divisionProduct)
                    .add(divisionCourse))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(discountMethodLabel)
                    .add(methodValue)
                    .add(discountValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(yenLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(discountRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(percentLabel)
                    .add(methodRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(shopSettingButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(discountsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void methodRateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_methodRateStateChanged
            this.setDiscountMethodEnabled();
    }//GEN-LAST:event_methodRateStateChanged

    private void methodValueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_methodValueStateChanged
            this.setDiscountMethodEnabled();
    }//GEN-LAST:event_methodValueStateChanged

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
                //入力チェック
		if(this.checkInput())
		{
			//登録処理
			this.regist(false);
			this.refresh();
		}
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
                //入力チェック
		if(this.checkInput())
		{
			//登録処理
			this.regist(true);
			this.refresh();
		}
	}//GEN-LAST:event_addButtonActionPerformed

        private void discountsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_discountsMouseReleased
		this.changeCurrentData();
        }//GEN-LAST:event_discountsMouseReleased

        private void discountsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountsKeyReleased
		this.changeCurrentData();
        }//GEN-LAST:event_discountsKeyReleased

        private void shopSettingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopSettingButtonActionPerformed

            MstUseDiscountPanel p = new MstUseDiscountPanel();
            p.setOpener(this);
            this.setVisible(false);
            parentFrame.changeContents(p);

        }//GEN-LAST:event_shopSettingButtonActionPerformed

        private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
        	//IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
            if ((evt.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
            	if (!evt.getComponent().isShowing()&& isLoadDisplay) {
                	SystemInfo.MessageDialogGB(this, this.getTitle());
                        isLoadDisplay = false;
                }
            }
        	//IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
    	} //GEN-LAST:event_formHierarchyChanged
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel discountDivisionLabel;
    private javax.swing.JLabel discountMethodLabel;
    private com.geobeck.swing.JFormattedTextFieldEx discountName;
    private javax.swing.JLabel discountNameLabel;
    private com.geobeck.swing.JFormattedTextFieldEx discountRate;
    private com.geobeck.swing.JFormattedTextFieldEx discountValue;
    private javax.swing.JTable discounts;
    private javax.swing.JScrollPane discountsScrollPane;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private javax.swing.JRadioButton divisionAll;
    private javax.swing.JRadioButton divisionCourse;
    private javax.swing.ButtonGroup divisionGroup;
    private javax.swing.JRadioButton divisionProduct;
    private javax.swing.JRadioButton divisionTechnic;
    private javax.swing.JRadioButton methodRate;
    private javax.swing.JRadioButton methodValue;
    private javax.swing.ButtonGroup monthGroup;
    private javax.swing.JLabel percentLabel;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton shopSettingButton;
    private javax.swing.JLabel yenLabel;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * 割引種別マスタ登録画面用FocusTraversalPolicy
	 */
	private	MstDiscountFocusTraversalPolicy	ftp	=
			new MstDiscountFocusTraversalPolicy();
	
	/**
	 * 割引種別マスタ登録画面用FocusTraversalPolicyを取得する。
	 * @return 割引種別マスタ登録画面用FocusTraversalPolicy
	 */
	public MstDiscountFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(addButton);
		SystemInfo.addMouseCursorChange(renewButton);
		SystemInfo.addMouseCursorChange(deleteButton);
		SystemInfo.addMouseCursorChange(shopSettingButton);
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
		discountName.addKeyListener(SystemInfo.getMoveNextField());
		discountName.addFocusListener(SystemInfo.getSelectText());
		displaySeq.addKeyListener(SystemInfo.getMoveNextField());
		displaySeq.addFocusListener(SystemInfo.getSelectText());
		divisionAll.addKeyListener(SystemInfo.getMoveNextField());
		divisionTechnic.addKeyListener(SystemInfo.getMoveNextField());
		divisionProduct.addKeyListener(SystemInfo.getMoveNextField());
                //nhanvt start add 20141219 New request #34216
                divisionCourse.addKeyListener(SystemInfo.getMoveNextField());
                //nhanvt end add 20141219 New request #34216
		methodValue.addKeyListener(SystemInfo.getMoveNextField());
		discountValue.addKeyListener(SystemInfo.getMoveNextField());
		discountValue.addFocusListener(SystemInfo.getSelectText());
		methodRate.addKeyListener(SystemInfo.getMoveNextField());
		discountRate.addKeyListener(SystemInfo.getMoveNextField());
		discountRate.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setDiscountMethodEnabled()
	{
                this.discountValue.setEnabled(this.methodValue.isSelected());
                this.discountRate.setEnabled(this.methodRate.isSelected());
                if (this.methodValue.isSelected()) {
                    this.discountRate.setText("");
                } else {
                    this.discountValue.setText("");
                }
	}
        
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			mds.load(con);
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		this.showData();
	}
	
	/**
	 * 再表示を行う。
	 */
	private void refresh()
	{
		//データベースからデータを読み込む
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			mds.load(con);
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		//テーブルに割引種別マスタデータを表示する
		this.showData();
		//入力をクリアする
		this.clear();
	}
	
	/**
	 * 入力項目をクリアする。
	 */
	private void clear()
	{
		selIndex	=	-1;
		discountName.setText("");
		displaySeq.setText("");
		divisionAll.setSelected(true);
		divisionTechnic.setSelected(false);
		divisionProduct.setSelected(false);
                //nhanvt start add 20141219 New request #34216
                divisionCourse.setSelected(false);
                //nhanvt end add 20141219 New request #34216
		methodValue.setSelected(true);
		methodRate.setSelected(false);
		discountValue.setText("");
		discountRate.setText("");
		
		if(0 < discounts.getRowCount())
				discounts.removeRowSelectionInterval(0, discounts.getRowCount() - 1);
		
		this.changeCurrentData();
	}
	
	
	/**
	 * データを表示する。
	 */
	private void showData()
	{
		DefaultTableModel	model	=	(DefaultTableModel)discounts.getModel();
		
		//全行削除
		model.setRowCount(0);
		discounts.removeAll();
		
		for(MstDiscount md : mds)
		{
			Object[]	rowData	=	{       md.getDiscountName(),
								md.getDiscountDivisionName(),
								md.getDiscountMethodName(),
								md.getDiscountMethod() == DISCOUNT_METHOD_VALUE ? md.getDiscountValue():md.getDiscountRatePercentage().longValue(),
								md.getDisplaySeq()	};
			model.addRow(rowData);
		}
	}
	
	/**
	 * 選択データが変更されたときの処理を行う。
	 */
	private void changeCurrentData()
	{
		int	index	=	discounts.getSelectedRow();
		
		if(0 <= index && index < mds.size() && index != selIndex)
		{
			selIndex	=	index;
			//選択されているデータを表示
			this.showCurrentData();
		}
		
		//ボタンの使用可不可を変更する
		renewButton.setEnabled(0 <= selIndex);
		deleteButton.setEnabled(0 <= selIndex);
	}
	
	/**
	 * 選択されたデータを入力項目に表示する。
	 */
	private void showCurrentData()
	{
		discountName.setText(mds.get(selIndex).getDiscountName());
		displaySeq.setText(mds.get(selIndex).getDisplaySeq().toString());
		switch(mds.get(selIndex).getDiscountDivision())
		{
			case DISCOUNT_DIVISION_ALL:
				divisionAll.setSelected(true);
				break;
			case DISCOUNT_DIVISION_TECHNIC:
				divisionTechnic.setSelected(true);
				break;
			case DISCOUNT_DIVISION_PRODUCT:
				divisionProduct.setSelected(true);
				break;
                        //nhanvt start add 20141219 New request #34216
                        case DISCOUNT_DIVISION_COURSE:
				divisionCourse.setSelected(true);
                        //nhanvt end add 20141219 New request #34216
		}
		switch(mds.get(selIndex).getDiscountMethod())
		{
			case DISCOUNT_METHOD_VALUE:
				methodValue.setSelected(true);
                		discountValue.setText(mds.get(selIndex).getDiscountValue().toString());
                		discountRate.setText("");
				break;
			case DISCOUNT_METHOD_RATE:
				methodRate.setSelected(true);
                		discountValue.setText("");
                		discountRate.setText(Integer.toString(mds.get(selIndex).getDiscountRatePercentage().intValue()));
				break;
		}
	}
	
	/**
	 * 入力チェックを行う。
	 * @return 入力エラーがなければtrueを返す。
	 */
	private boolean checkInput()
	{
		//割引種別名
		if(discountName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "割引種別名"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			discountName.requestFocusInWindow();
			return	false;
		}
		
		//挿入位置
		if(!displaySeq.getText().equals("") && !CheckUtil.isNumber(displaySeq.getText()))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "挿入位置"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			displaySeq.requestFocusInWindow();
			return	false;
		}
		
		//金額
		if(!discountValue.getText().equals("") && !CheckUtil.isNumber(discountValue.getText()))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "金額"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			discountValue.requestFocusInWindow();
			return	false;
		}
		
		//パーセント
		if(!discountRate.getText().equals("") && !CheckUtil.isNumber(discountRate.getText()))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "パーセント"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			discountRate.requestFocusInWindow();
			return	false;
		}
		
		return	true;
	}
	
	/**
	 * 入力されたデータを登録する。
	 * @param isAdd true - 追加処理
	 * @return true - 成功
	 */
	private boolean regist(boolean isAdd)
	{
		boolean		result	=	false;
		MstDiscount		md		=	null;
		int			lastSeq	=	-1;
		
		if(isAdd || selIndex < 0)
		{
			md	=	new MstDiscount();
		}
		else
		{
			lastSeq	=	mds.get(selIndex).getDisplaySeq();
			md		=	mds.get(selIndex);
		}
		
		//入力されたデータをセットする
		this.setData(md);
		
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			try
			{
				con.begin();
				
				if(md.regist(con, lastSeq))
				{
					con.commit();
					result	=	true;
                    //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
                    isLoadDisplay = true;
                    //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
				}
				else
				{
					con.rollback();
				}
			}
			catch(SQLException e)
			{
				con.rollback();
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	result;
	}
	
	/**
	 * 入力されたデータをクラスにセットする。
	 */
	private void setData(MstDiscount md)
	{
		md.setDiscountName(discountName.getText());
		md.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText())));
		md.setDiscountDivision(this.getDiscountDivision());
		md.setDiscountMethod(this.getDiscountMethod());
		md.setDiscountValue(Long.parseLong(!discountValue.getText().equals("") ? discountValue.getText().replace(",", "") : "0"));
		md.setDiscountRate(Double.parseDouble(!discountRate.getText().equals("") ? discountRate.getText() : "0") / 100d);
	}
	
	/**
	 * 割引区分を取得する。
	 * @return 割引区分
	 */
	private Integer	getDiscountDivision()
	{
		if(this.divisionAll.isSelected())
				return	DISCOUNT_DIVISION_ALL;
		else if(this.divisionTechnic.isSelected())
				return	DISCOUNT_DIVISION_TECHNIC;
		else if(this.divisionProduct.isSelected())
				return	DISCOUNT_DIVISION_PRODUCT;
                //nhanvt start add 20141219 New request #34216
                else if(this.divisionCourse.isSelected())
				return	DISCOUNT_DIVISION_COURSE;
                //nhanvt end add 20141219 New request #34216
		else	return	null;
	}
	
	/**
	 * 割引方法を取得する。
	 * @return 割引方法
	 */
	private Integer	getDiscountMethod()
	{
		if(this.methodValue.isSelected())
				return	DISCOUNT_METHOD_VALUE;
		else if(this.methodRate.isSelected())
				return	DISCOUNT_METHOD_RATE;
		else	return	null;
	}
	
	/**
	 * 選択されたデータを削除する。
	 * @return true - 成功
	 */
	private void delete()
	{
		boolean		result	=	false;
		MstDiscount		mb		=	null;
		
		if(0 <= selIndex && selIndex < mds.size())
		{
			mb	=	mds.get(selIndex);
		}
		
		//削除確認
		if(MessageDialog.showYesNoDialog(this,
					MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, mb.getDiscountName()),
					this.getTitle(),
					JOptionPane.WARNING_MESSAGE) != 0)
		{
			return;
		}
		
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			try
			{
				con.begin();
				
				if(mb.delete(con))
				{
					con.commit();
					result	=	true;
                    //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
                    isLoadDisplay = true;
                    //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
				}
				else
				{
					con.rollback();
				}
			}
			catch(SQLException e)
			{
				con.rollback();
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		if(result)
		{
			this.refresh();
		}
		else
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED,
							"割引種別"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * 割引種別マスタ登録画面用FocusTraversalPolicy
	 */
	private class MstDiscountFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでMstDiscountFocusTraversalPolicy。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(discountName))
			{
				return displaySeq;
			}
			else if (aComponent.equals(displaySeq))
			{
				return getSelectedDiscountDivision();
			}
                        else if (aComponent.equals(divisionAll) ||
					aComponent.equals(divisionTechnic) ||
					aComponent.equals(divisionProduct)
                                //nhanvt start add 20141219 New request #34216
                                ||aComponent.equals(divisionCourse)
                                //nhanvt end add 20141219 New request #34216
                                )
			{
				return getSelectedDiscountMethod();
			}
                        else if (aComponent.equals(methodValue) ||
					aComponent.equals(methodRate))
			{
				return getSelectedDiscountMethodText();
			}
                        else if (aComponent.equals(discountValue) ||
					aComponent.equals(discountRate))
			{
				return discountName;
			}
			
			return getDefaultComponent();
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(discountName))
			{
				return getSelectedDiscountMethodText();
			}
			else if (aComponent.equals(displaySeq))
			{
				return discountName;
			}
                        else if (aComponent.equals(divisionAll) ||
					aComponent.equals(divisionTechnic) ||
					aComponent.equals(divisionProduct)
                                        //nhanvt start add 20141219 New request #34216
                                        || aComponent.equals(divisionCourse)
                                        //nhanvt end add 20141219 New request #34216
                                )
			{
				return displaySeq;
			}
                        else if (aComponent.equals(methodValue) ||
					aComponent.equals(methodRate))
			{
				return getSelectedDiscountDivision();
			}
                        else if (aComponent.equals(discountValue) ||
					aComponent.equals(discountRate))
			{
				return getSelectedDiscountMethod();
			}
			
			return getDefaultComponent();
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return getDefaultComponent();
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return getSelectedDiscountMethod();
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return getDefaultComponent();
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return getDefaultComponent();
		}
		
		public Component getDefaultComponent()
		{
                        return discountName;
		}
	}
		
        /**
         * 選択中の割引区分を返します。
         */
        private Component getSelectedDiscountDivision()
        {
                if(divisionAll.isSelected())
                {
                        return	divisionAll;
                }
                else if(divisionTechnic.isSelected())
                {
                        return	divisionTechnic;
                }
                else if(divisionProduct.isSelected())
                {
                        return	divisionProduct;
                }

                //nhanvt start add 20141219 New request #34216
                else if(divisionCourse.isSelected())
                {
                        return	divisionCourse;
                }
                //nhanvt end add 20141219 New request #34216

                return	divisionAll;
        }
		
        /**
         * 選択中の割引方法を返します。
         */
        private Component getSelectedDiscountMethod()
        {
                if(methodValue.isSelected())
                {
                        return	methodValue;
                }
                else if(methodRate.isSelected())
                {
                        return	methodRate;
                }

                return	methodValue;
        }
		
        /**
         * 選択中の割引方法のテキスト項目を返します。
         */
        private Component getSelectedDiscountMethodText()
        {
                if(methodValue.isSelected())
                {
                        return	discountValue;
                }
                else if(methodRate.isSelected())
                {
                        return	discountRate;
                }

                return	discountValue;
        }

        /**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		discounts.getColumnModel().getColumn(0).setPreferredWidth(200);
		discounts.getColumnModel().getColumn(1).setPreferredWidth(30);
		discounts.getColumnModel().getColumn(2).setPreferredWidth(30);
		discounts.getColumnModel().getColumn(3).setPreferredWidth(90);
		discounts.getColumnModel().getColumn(4).setPreferredWidth(50);
	}
	
	
	/**
	 * 列の表示位置を設定するTableCellRenderer
	 */
	private class TableCellAlignRenderer extends DefaultTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}

		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);
			
			switch(column)
			{
				case 3:
				case 4:
					super.setHorizontalAlignment(SwingConstants.RIGHT);
					break;
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}

			return this;
		}
	}
}
