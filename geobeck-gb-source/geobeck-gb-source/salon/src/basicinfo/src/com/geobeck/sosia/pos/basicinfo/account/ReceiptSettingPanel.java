/*
 * ReceiptSettingPanel.java
 *
 * Created on 2007/10/22, 16:22
 */

package com.geobeck.sosia.pos.basicinfo.account;

import com.geobeck.sosia.pos.master.company.MstShop;
import java.io.*;
import javax.swing.*;

import javax.print.*;

import com.geobeck.swing.*;
import com.geobeck.swing.filechooser.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.util.SQLUtil;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author  katagiri
 */
public class ReceiptSettingPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private	final int       MAX_FILE_SIZE		=	1048576;
	private	final String    MAX_FILE_SIZE_STR	=	"1MB";
	private	ReceiptSettingFocusTraversalPolicy	ftp	=
			new ReceiptSettingFocusTraversalPolicy();
	/** Creates new form ReceiptSettingPanel */
	public ReceiptSettingPanel()
	{
		initComponents();
		this.setSize(800, 752);
		this.setPath("基本設定 >> 商品マスタ");
		this.setTitle("レシート設定");
                this.addMouseCursorChange();
		this.init();

                this.showTmpMessageList();

                //*****************************************
                //TODO ﾚｼｰﾄｻｲｽﾞとｶｳﾝｾﾘﾝｸﾞｼｰﾄを今のところ非表示にしておく
/*                
                jLabel6.setVisible(false);
                rdoReceipt80.setVisible(false);
                rdoReceipt58.setVisible(false);
                
                jLabel7.setVisible(false);
                printCounselingSheet.setVisible(false);
*/
                //*****************************************

	}

	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(registButton);
		SystemInfo.addMouseCursorChange(logoReferenceButton1);
		SystemInfo.addMouseCursorChange(referenceButton);
		SystemInfo.addMouseCursorChange(insertButton);
		SystemInfo.addMouseCursorChange(editButton);
		SystemInfo.addMouseCursorChange(deleteButton);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        tmpMessageLabel = new javax.swing.JLabel();
        printerList = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        footerImagePath = new com.geobeck.swing.JTextFieldEx();
        referenceButton = new javax.swing.JButton();
        logoImage = new com.geobeck.swing.ImagePanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        message = new com.geobeck.swing.JTextAreaEx();
        jLabel4 = new javax.swing.JLabel();
        logoPath = new com.geobeck.swing.JTextFieldEx();
        logoReferenceButton1 = new javax.swing.JButton();
        footerImage = new com.geobeck.swing.ImagePanel();
        registButton = new javax.swing.JButton();
        deleteLogo = new javax.swing.JCheckBox();
        deleteFooter = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        printReceipt = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        rdoReceipt80 = new javax.swing.JRadioButton();
        rdoReceipt58 = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        printCounselingSheet = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        counselingMenuList = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        tmpMessagePanel = new javax.swing.JPanel();
        insertButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tmpMessage = new com.geobeck.swing.JTextAreaEx();
        jScrollPane4 = new javax.swing.JScrollPane();
        tmpMessageTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cmbTargetPeriodStart = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        cmbTargetPeriodEnd = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        rdoReceiptSpecial = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        printNextInfo = new javax.swing.JCheckBox();

        setFocusCycleRoot(true);
        setLayout(null);

        tmpMessageLabel.setText("メッセージテンプレート");
        add(tmpMessageLabel);
        tmpMessageLabel.setBounds(470, 210, 200, 20);

        printerList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        add(printerList);
        printerList.setBounds(110, 40, 300, 24);

        jLabel2.setText("フッター画像");
        add(jLabel2);
        jLabel2.setBounds(10, 390, 80, 25);

        footerImagePath.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        add(footerImagePath);
        footerImagePath.setBounds(110, 390, 300, 24);

        referenceButton.setIcon(SystemInfo.getImageIcon("/button/select/select_file_off.jpg"));
        referenceButton.setBorderPainted(false);
        referenceButton.setContentAreaFilled(false);
        referenceButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_file_on.jpg"));
        referenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                referenceButtonActionPerformed(evt);
            }
        });
        add(referenceButton);
        referenceButton.setBounds(320, 420, 92, 25);

        logoImage.setBackground(new java.awt.Color(255, 255, 255));
        logoImage.setAdjust(true);
        logoImage.setKeepProportion(true);

        javax.swing.GroupLayout logoImageLayout = new javax.swing.GroupLayout(logoImage);
        logoImage.setLayout(logoImageLayout);
        logoImageLayout.setHorizontalGroup(
            logoImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        logoImageLayout.setVerticalGroup(
            logoImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        add(logoImage);
        logoImage.setBounds(110, 110, 200, 150);

        jLabel3.setText("メッセージ");
        add(jLabel3);
        jLabel3.setBounds(10, 270, 80, 19);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        message.setColumns(20);
        message.setRows(5);
        jScrollPane1.setViewportView(message);

        add(jScrollPane1);
        jScrollPane1.setBounds(110, 270, 300, 100);

        jLabel4.setText("ロゴ画像");
        add(jLabel4);
        jLabel4.setBounds(10, 79, 80, 20);

        logoPath.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        add(logoPath);
        logoPath.setBounds(110, 80, 300, 24);

        logoReferenceButton1.setIcon(SystemInfo.getImageIcon("/button/select/select_file_off.jpg"));
        logoReferenceButton1.setBorderPainted(false);
        logoReferenceButton1.setContentAreaFilled(false);
        logoReferenceButton1.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_file_on.jpg"));
        logoReferenceButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoReferenceButton1ActionPerformed(evt);
            }
        });
        add(logoReferenceButton1);
        logoReferenceButton1.setBounds(320, 110, 92, 25);

        footerImage.setBackground(new java.awt.Color(255, 255, 255));
        footerImage.setAdjust(true);
        footerImage.setKeepProportion(true);

        javax.swing.GroupLayout footerImageLayout = new javax.swing.GroupLayout(footerImage);
        footerImage.setLayout(footerImageLayout);
        footerImageLayout.setHorizontalGroup(
            footerImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        footerImageLayout.setVerticalGroup(
            footerImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        add(footerImage);
        footerImage.setBounds(110, 420, 200, 150);

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setContentAreaFilled(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });
        add(registButton);
        registButton.setBounds(10, 10, 92, 25);

        deleteLogo.setText("画像削除");
        deleteLogo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        deleteLogo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        deleteLogo.setOpaque(false);
        add(deleteLogo);
        deleteLogo.setBounds(330, 240, 61, 15);

        deleteFooter.setText("画像削除");
        deleteFooter.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        deleteFooter.setMargin(new java.awt.Insets(0, 0, 0, 0));
        deleteFooter.setOpaque(false);
        add(deleteFooter);
        deleteFooter.setBounds(330, 550, 100, 15);

        jLabel5.setText("次回案内印刷");
        add(jLabel5);
        jLabel5.setBounds(240, 590, 80, 25);

        printReceipt.setText("出力する");
        printReceipt.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        printReceipt.setMargin(new java.awt.Insets(0, 0, 0, 0));
        printReceipt.setOpaque(false);
        add(printReceipt);
        printReceipt.setBounds(110, 590, 65, 25);

        jLabel6.setForeground(java.awt.Color.red);
        jLabel6.setText("（※ 専用伝票は別途伝票作成が必要となります。）");
        add(jLabel6);
        jLabel6.setBounds(250, 640, 270, 20);

        buttonGroup.add(rdoReceipt80);
        rdoReceipt80.setSelected(true);
        rdoReceipt80.setText("80mm");
        rdoReceipt80.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoReceipt80.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoReceipt80.setOpaque(false);
        rdoReceipt80.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdoReceipt80ItemStateChanged(evt);
            }
        });
        add(rdoReceipt80);
        rdoReceipt80.setBounds(110, 620, 60, 20);

        buttonGroup.add(rdoReceipt58);
        rdoReceipt58.setText("58mm");
        rdoReceipt58.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoReceipt58.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoReceipt58.setOpaque(false);
        rdoReceipt58.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdoReceipt58ItemStateChanged(evt);
            }
        });
        add(rdoReceipt58);
        rdoReceipt58.setBounds(180, 620, 60, 20);

        jLabel7.setText("カウンセリングシート");
        add(jLabel7);
        jLabel7.setBounds(10, 650, 90, 25);

        printCounselingSheet.setText("出力する");
        printCounselingSheet.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        printCounselingSheet.setMargin(new java.awt.Insets(0, 0, 0, 0));
        printCounselingSheet.setOpaque(false);
        add(printCounselingSheet);
        printCounselingSheet.setBounds(110, 650, 65, 25);

        counselingMenuList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {""},
                {""},
                {""},
                {""}
            },
            new String [] {
                "名称"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        counselingMenuList.setRowSelectionAllowed(false);
        counselingMenuList.setSelectionForeground(new java.awt.Color(0, 0, 0));
        counselingMenuList.getTableHeader().setReorderingAllowed(false);
        counselingMenuList.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        counselingMenuList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        SwingUtil.setJTableHeaderRenderer(counselingMenuList, SystemInfo.getTableHeaderRenderer());
        TableColumnModel itemTypeModel = counselingMenuList.getColumnModel();
        itemTypeModel.getColumn(0).setCellEditor(new StringCellEditor(
            new JFormattedTextField()));
    jScrollPane2.setViewportView(counselingMenuList);

    add(jScrollPane2);
    jScrollPane2.setBounds(470, 60, 320, 123);

    jLabel8.setText("レシートプリンタ");
    add(jLabel8);
    jLabel8.setBounds(10, 40, 80, 20);

    tmpMessagePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    tmpMessagePanel.setOpaque(false);
    tmpMessagePanel.setLayout(null);

    insertButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
    insertButton.setBorderPainted(false);
    insertButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
    insertButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            insertButtonActionPerformed(evt);
        }
    });
    tmpMessagePanel.add(insertButton);
    insertButton.setBounds(20, 150, 92, 25);

    editButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
    editButton.setBorderPainted(false);
    editButton.setEnabled(false);
    editButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
    editButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            editButtonActionPerformed(evt);
        }
    });
    tmpMessagePanel.add(editButton);
    editButton.setBounds(120, 150, 92, 25);

    deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
    deleteButton.setBorderPainted(false);
    deleteButton.setEnabled(false);
    deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
    deleteButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteButtonActionPerformed(evt);
        }
    });
    tmpMessagePanel.add(deleteButton);
    deleteButton.setBounds(220, 150, 92, 25);

    jScrollPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    tmpMessage.setColumns(20);
    tmpMessage.setRows(5);
    jScrollPane3.setViewportView(tmpMessage);

    tmpMessagePanel.add(jScrollPane3);
    jScrollPane3.setBounds(10, 40, 300, 100);

    tmpMessageTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    tmpMessageTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null},
            {null, null}
        },
        new String [] {
            "適用期間", "メッセージ"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Object.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    tmpMessageTable.setSelectionBackground(new java.awt.Color(255, 204, 102));
    tmpMessageTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
    tmpMessageTable.getTableHeader().setReorderingAllowed(false);
    tmpMessageTable.setRowHeight(20);
    tmpMessageTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    SwingUtil.setJTableHeaderRenderer(tmpMessageTable, SystemInfo.getTableHeaderRenderer());
    tmpMessageTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseReleased(java.awt.event.MouseEvent evt) {
            tmpMessageTableMouseReleased(evt);
        }
    });
    tmpMessageTable.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            tmpMessageTableKeyReleased(evt);
        }
    });
    jScrollPane4.setViewportView(tmpMessageTable);

    tmpMessagePanel.add(jScrollPane4);
    jScrollPane4.setBounds(10, 180, 300, 160);

    jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel9.setText("〜");
    tmpMessagePanel.add(jLabel9);
    jLabel9.setBounds(200, 10, 20, 25);

    jLabel10.setText("メッセージ");
    tmpMessagePanel.add(jLabel10);
    jLabel10.setBounds(10, 20, 60, 20);

    cmbTargetPeriodStart.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbTargetPeriodStart.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            cmbTargetPeriodStartFocusGained(evt);
        }
    });
    tmpMessagePanel.add(cmbTargetPeriodStart);
    cmbTargetPeriodStart.setBounds(110, 10, 88, 23);

    cmbTargetPeriodEnd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbTargetPeriodEnd.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            cmbTargetPeriodEndFocusGained(evt);
        }
    });
    tmpMessagePanel.add(cmbTargetPeriodEnd);
    cmbTargetPeriodEnd.setBounds(220, 10, 88, 23);

    jLabel11.setText("期間");
    tmpMessagePanel.add(jLabel11);
    jLabel11.setBounds(80, 10, 30, 25);

    add(tmpMessagePanel);
    tmpMessagePanel.setBounds(470, 230, 320, 350);

    jLabel12.setText("カウンセリングシートメニュー表示設定");
    add(jLabel12);
    jLabel12.setBounds(470, 40, 200, 20);

    buttonGroup.add(rdoReceiptSpecial);
    rdoReceiptSpecial.setText("専用伝票");
    rdoReceiptSpecial.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoReceiptSpecial.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoReceiptSpecial.setOpaque(false);
    rdoReceiptSpecial.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            rdoReceiptSpecialItemStateChanged(evt);
        }
    });
    add(rdoReceiptSpecial);
    rdoReceiptSpecial.setBounds(250, 620, 70, 20);

    jLabel13.setText("レシートサイズ");
    add(jLabel13);
    jLabel13.setBounds(10, 620, 80, 20);

    jLabel14.setText("レシート出力");
    add(jLabel14);
    jLabel14.setBounds(10, 590, 80, 25);

    printNextInfo.setText("出力する");
    printNextInfo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    printNextInfo.setMargin(new java.awt.Insets(0, 0, 0, 0));
    printNextInfo.setOpaque(false);
    add(printNextInfo);
    printNextInfo.setBounds(330, 590, 90, 25);
    }// </editor-fold>//GEN-END:initComponents

    private void rdoReceipt58ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdoReceipt58ItemStateChanged

        printCounselingSheet.setSelected(false);
        printCounselingSheet.setEnabled(false);
        
    }//GEN-LAST:event_rdoReceipt58ItemStateChanged

    private void rdoReceipt80ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdoReceipt80ItemStateChanged

        printCounselingSheet.setEnabled(true);
        
    }//GEN-LAST:event_rdoReceipt80ItemStateChanged

	private void registButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_registButtonActionPerformed
	{//GEN-HEADEREND:event_registButtonActionPerformed
		this.regist();
	}//GEN-LAST:event_registButtonActionPerformed

	private void logoReferenceButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_logoReferenceButton1ActionPerformed
	{//GEN-HEADEREND:event_logoReferenceButton1ActionPerformed
		this.selectLogoImage();
	}//GEN-LAST:event_logoReferenceButton1ActionPerformed

	private void referenceButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_referenceButtonActionPerformed
	{//GEN-HEADEREND:event_referenceButtonActionPerformed
		this.selectFooterImage();
	}//GEN-LAST:event_referenceButtonActionPerformed

        private void cmbTargetPeriodStartFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodStartFocusGained
            cmbTargetPeriodStart.getInputContext().setCharacterSubsets(null);
}//GEN-LAST:event_cmbTargetPeriodStartFocusGained

        private void cmbTargetPeriodEndFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodEndFocusGained
            this.cmbTargetPeriodEnd.getInputContext().setCharacterSubsets(null);
}//GEN-LAST:event_cmbTargetPeriodEndFocusGained

        private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
            tmpMessageRegist(true);
        }//GEN-LAST:event_insertButtonActionPerformed

        private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
            tmpMessageRegist(false);
        }//GEN-LAST:event_editButtonActionPerformed

        private void tmpMessageTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tmpMessageTableKeyReleased
            showTmpMessage();
        }//GEN-LAST:event_tmpMessageTableKeyReleased

        private void tmpMessageTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tmpMessageTableMouseReleased
            showTmpMessage();
        }//GEN-LAST:event_tmpMessageTableMouseReleased

        private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
            this.tmpMessageDelete();
        }//GEN-LAST:event_deleteButtonActionPerformed

        private void rdoReceiptSpecialItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdoReceiptSpecialItemStateChanged

            printCounselingSheet.setSelected(false);
            printCounselingSheet.setEnabled(false);

        }//GEN-LAST:event_rdoReceiptSpecialItemStateChanged
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodEnd;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodStart;
    private javax.swing.JTable counselingMenuList;
    private javax.swing.JButton deleteButton;
    private javax.swing.JCheckBox deleteFooter;
    private javax.swing.JCheckBox deleteLogo;
    private javax.swing.JButton editButton;
    private com.geobeck.swing.ImagePanel footerImage;
    private com.geobeck.swing.JTextFieldEx footerImagePath;
    private javax.swing.JButton insertButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private com.geobeck.swing.ImagePanel logoImage;
    private com.geobeck.swing.JTextFieldEx logoPath;
    private javax.swing.JButton logoReferenceButton1;
    private com.geobeck.swing.JTextAreaEx message;
    private javax.swing.JCheckBox printCounselingSheet;
    private javax.swing.JCheckBox printNextInfo;
    private javax.swing.JCheckBox printReceipt;
    private javax.swing.JComboBox printerList;
    private javax.swing.JRadioButton rdoReceipt58;
    private javax.swing.JRadioButton rdoReceipt80;
    private javax.swing.JRadioButton rdoReceiptSpecial;
    private javax.swing.JButton referenceButton;
    private javax.swing.JButton registButton;
    private com.geobeck.swing.JTextAreaEx tmpMessage;
    private javax.swing.JLabel tmpMessageLabel;
    private javax.swing.JPanel tmpMessagePanel;
    private javax.swing.JTable tmpMessageTable;
    // End of variables declaration//GEN-END:variables
	
	private	ReceiptSetting receiptSetting = null;
	
	/**
	 * 初期化処理を行う
	 */
	private void init()
	{
		receiptSetting = new ReceiptSetting();
		
		this.initPrinterList();
		
		this.showData();
	}
	
	/**
	 * プリンタリストを初期化する
	 */
	private void initPrinterList()
	{
		for(PrintService ps : receiptSetting.getPrintServices())
		{
			printerList.addItem(ps.getName());
		}
	}
	
	/**
	 * データを表示する
	 */
	private void showData()
	{
		printerList.setSelectedItem(receiptSetting.getPrinterName());
		logoImage.setImage(receiptSetting.getLogoImage());
		logoImage.updateUI();
		deleteLogo.setSelected(false);
		message.setText(receiptSetting.getMessage());
		footerImage.setImage(receiptSetting.getFooterImage());
		footerImage.updateUI();
		deleteFooter.setSelected(false);
		printReceipt.setSelected(receiptSetting.isPrintReceipt());

                switch (receiptSetting.getReceiptSize()) {
                    case 0:
                        rdoReceipt80.setSelected(true);
                        break;
                    case 1:
                        rdoReceipt58.setSelected(true);
                        break;
                    default:
                        rdoReceiptSpecial.setSelected(true);
                        break;
                }
                
		printCounselingSheet.setSelected(receiptSetting.isPrintCounselingSheet());

                counselingMenuList.setValueAt(receiptSetting.getCounselingMenu1(), 0, 0);
                counselingMenuList.setValueAt(receiptSetting.getCounselingMenu2(), 1, 0);
                counselingMenuList.setValueAt(receiptSetting.getCounselingMenu3(), 2, 0);
                counselingMenuList.setValueAt(receiptSetting.getCounselingMenu4(), 3, 0);

		printNextInfo.setSelected(receiptSetting.isPrintNextInfo());
	}
	
	/**
	 * ロゴ画像選択時の処理
	 */
	private void selectLogoImage()
	{
		String filePath = this.selectImageFile();
		
                if (filePath.length() == 0) return;
                
		//画像をチェックする
		if(this.checkImage(filePath))
		{
			ImageIcon ii = new ImageIcon(filePath);
			logoImage.setImage(ii);
			logoImage.updateUI();
			logoPath.setText(filePath);
		}
		else
		{
			logoPath.setText("");
		}
	}
	
	/**
	 * フッター画像選択時の処理
	 */
	private void selectFooterImage()
	{
		String filePath = this.selectImageFile();

                if (filePath.length() == 0) return;
                
		//画像をチェックする
		if(this.checkImage(filePath))
		{
			ImageIcon ii = new ImageIcon(filePath);
			footerImage.setImage(ii);
			footerImage.updateUI();
			footerImagePath.setText(filePath);
		}
		else
		{
			footerImagePath.setText("");
		}
	}
	
	
	/**
	 * 画像ファイルを開く
	 * @return 
	 */
	private String selectImageFile()
	{
		JFileChooser jfc = new JFileChooser();
		WildcardFileFilter filter = new WildcardFileFilter("*.jpg", "JPGファイル");
		jfc.setFileFilter(filter);
		
		if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			return	jfc.getSelectedFile().getAbsolutePath();
		}
		
		return	"";
	}
	
	/**
	 * 画像をチェックする
	 * @param filePath 画像ファイルのパス
	 * @return true - OK
	 */
	private boolean checkImage(String filePath)
	{
		File	f	=	new File(filePath);

		//ファイルが存在する場合
		if(f.exists())
		{
			//ファイルサイズをチェック
			if(MAX_FILE_SIZE < f.length())
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(1201, "画像", MAX_FILE_SIZE_STR),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				return	false;
			}

			return	true;
		}
		else
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(1200,
					f.getAbsolutePath()),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return	false;
		}
	}
	
	/**
	 * 登録処理を行う
	 */
	private void regist()
	{
		if( counselingMenuList.getCellEditor() != null ) counselingMenuList.getCellEditor().stopCellEditing();
            
		//入力されたデータを設定する
		this.setData();
		
		//登録を行う
		if(receiptSetting.regist())
		{
			receiptSetting.load();
			this.showData();
			
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
					this.getTitle(),
					JOptionPane.INFORMATION_MESSAGE);
		}
		else
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "レシート設定"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * 入力されたデータを設定する
	 */
	private void setData()
	{
		receiptSetting.setPrinterName(
				printerList.getSelectedItem().toString());
		receiptSetting.setLogoFilePath(logoPath.getText());
		receiptSetting.setLogoImage(logoImage.getImage());
		receiptSetting.setDeleteLogo(deleteLogo.isSelected());
		receiptSetting.setMessage(message.getText());
		receiptSetting.setFooterImageFilePath(footerImagePath.getText());
		receiptSetting.setFooterImage(footerImage.getImage());
		receiptSetting.setDeleteFooter(deleteFooter.isSelected());
		receiptSetting.setPrintReceipt(printReceipt.isSelected());

                if (rdoReceipt80.isSelected()) {
                    receiptSetting.setReceiptSize(0);
                } else if (rdoReceipt58.isSelected()) {
                    receiptSetting.setReceiptSize(1);
                } else {
                    receiptSetting.setReceiptSize(2);
                }

		receiptSetting.setPrintCounselingSheet(printCounselingSheet.isSelected());

                receiptSetting.setCounselingMenu1(counselingMenuList.getValueAt(0, 0).toString());
                receiptSetting.setCounselingMenu2(counselingMenuList.getValueAt(1, 0).toString());
                receiptSetting.setCounselingMenu3(counselingMenuList.getValueAt(2, 0).toString());
                receiptSetting.setCounselingMenu4(counselingMenuList.getValueAt(3, 0).toString());

		receiptSetting.setPrintNextInfo(printNextInfo.isSelected());
	}

        private void showTmpMessageList() {
            DefaultTableModel model = (DefaultTableModel)tmpMessageTable.getModel();
            if (tmpMessageTable.getCellEditor() != null ) tmpMessageTable.getCellEditor().stopCellEditing();
            SwingUtil.clearTable(tmpMessageTable);
            tmpMessageTable.clearSelection();
            tmpMessage.setText("");

            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select * from mst_receipt_template");
            sql.append(" where");
            sql.append("         delete_date is null");
            sql.append("     and shop_id = " + SQLUtil.convertForSQL(SystemInfo.getCurrentShop().getShopID()));
            sql.append(" order by");
            sql.append("     from_date desc");

            try {
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
                while (rs.next()) {
                    ReceiptTemplateBean bean = new ReceiptTemplateBean();
                    bean.setData(rs);
                    model.addRow( new Object[]{
                        bean,
                        rs.getString("message")
                    });
                }
            } catch(Exception e){
                e.printStackTrace();
            }

            editButton.setEnabled(false);
            deleteButton.setEnabled(false);
            
        }

        private void tmpMessageRegist(boolean isAdd) {

            // 入力チェック
            if (cmbTargetPeriodStart.getDate() == null) {
                MessageDialog.showMessageDialog(
                        this,
                        "期間の開始日を入力してください。",
                        tmpMessageLabel.getText(),
                        JOptionPane.ERROR_MESSAGE);
                cmbTargetPeriodStart.requestFocusInWindow();
                return;
            }
            if (cmbTargetPeriodEnd.getDate() == null) {
                MessageDialog.showMessageDialog(
                        this,
                        "期間の終了日を入力してください。",
                        tmpMessageLabel.getText(),
                        JOptionPane.ERROR_MESSAGE);
                cmbTargetPeriodEnd.requestFocusInWindow();
                return;
            }
            if (cmbTargetPeriodStart.getDate().after(cmbTargetPeriodEnd.getDate())) {
                MessageDialog.showMessageDialog(
                        this,
                        "期間の設定が正しくありません。",
                        tmpMessageLabel.getText(),
                        JOptionPane.ERROR_MESSAGE);
                cmbTargetPeriodEnd.requestFocusInWindow();
                return;
            }
            //if (fromToDatesExist()) {
            if (isAdd && fromToDatesExist()) {
                MessageDialog.showMessageDialog(
                        this,
                        "既に登録されているテンプレートと期間が重複しています。",
                        tmpMessageLabel.getText(),
                        JOptionPane.ERROR_MESSAGE);
                cmbTargetPeriodEnd.requestFocusInWindow();
                return;
            }
            if (tmpMessage.getText().length() == 0) {
                MessageDialog.showMessageDialog(
                        this,
                        "メッセージを入力してください。",
                        tmpMessageLabel.getText(),
                        JOptionPane.ERROR_MESSAGE);
                tmpMessage.requestFocusInWindow();
                return;
            }

            if (MessageDialog.showYesNoDialog(
                    this,
                    "このテンプレートを" + (isAdd ? "追加" : "更新") + "しますか？",
                    tmpMessageLabel.getText(),
                    JOptionPane.WARNING_MESSAGE) == JOptionPane.NO_OPTION)
            {
                return;
            }

            // 登録処理
            ReceiptTemplateBean bean = null;
            if (isAdd) {
                bean = new ReceiptTemplateBean();
                bean.setShopId(SystemInfo.getCurrentShop().getShopID());
            } else {
                int row = tmpMessageTable.getSelectedRow();
                if (row == -1) return;
                bean = (ReceiptTemplateBean)tmpMessageTable.getValueAt(row, 0);
            }

            bean.setFromDate(cmbTargetPeriodStart.getDate());
            bean.setToDate(cmbTargetPeriodEnd.getDate());
            bean.setMessage(tmpMessage.getText());

            try {

                ConnectionWrapper con = SystemInfo.getConnection();
                if (isAdd) {
                    bean.insert(con);
                } else {
                    bean.update(con);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

            this.showTmpMessageList();
        }

        private void showTmpMessage() {

            int row = tmpMessageTable.getSelectedRow();
            if (row == -1) return;

            ReceiptTemplateBean bean = (ReceiptTemplateBean)tmpMessageTable.getValueAt(row, 0);
            cmbTargetPeriodStart.setDate(bean.getFromDate());
            cmbTargetPeriodEnd.setDate(bean.getToDate());
            tmpMessage.setText(bean.getMessage());

            editButton.setEnabled(true);
            deleteButton.setEnabled(true);

        }

        private void tmpMessageDelete() {

            int row = tmpMessageTable.getSelectedRow();
            if (row == -1) return;

            if (MessageDialog.showYesNoDialog(
                    this,
                    "このテンプレートを削除しますか？",
                    tmpMessageLabel.getText(),
                    JOptionPane.WARNING_MESSAGE) == JOptionPane.NO_OPTION)
            {
                return;
            }

            ReceiptTemplateBean bean = (ReceiptTemplateBean)tmpMessageTable.getValueAt(row, 0);

            try {

                ConnectionWrapper con = SystemInfo.getConnection();
                bean.delete(con);

            } catch (Exception e) {
                e.printStackTrace();
            }

            this.showTmpMessageList();
        }

        private boolean fromToDatesExist() {

            boolean result = false;

            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select");
            sql.append("     1");
            sql.append(" from");
            sql.append("     mst_receipt_template");
            sql.append(" where");
            sql.append("         delete_date is null");
            sql.append("     and shop_id = " + SQLUtil.convertForSQL(SystemInfo.getCurrentShop().getShopID()));
            sql.append("     and (");
            sql.append("             " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStart.getDate()) + " between from_date and to_date");
            sql.append("          or " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEnd.getDate()) + " between from_date and to_date");
            sql.append("         )");

            try {
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
                if (rs.next()) {
                    result = true;
                }
            } catch(Exception e){
                e.printStackTrace();
            }

            return result;
        }
        
        public ReceiptSettingFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
        
        private class ReceiptSettingFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(printerList))
			{
				return logoPath;
			}
                        else if (aComponent.equals(logoPath))
			{
				return deleteLogo;
			}
			else if (aComponent.equals(deleteLogo))
			{
				return message;
			}
			else if (aComponent.equals(message))
			{
				return footerImagePath;
			}
                        else if (aComponent.equals(footerImagePath))
			{
				return deleteFooter;
			}
                          else if (aComponent.equals(deleteFooter))
			{
				return printReceipt;
			}
                          else if (aComponent.equals(printReceipt))
			{
				return printNextInfo;
			}
                         else if (aComponent.equals(printNextInfo))
			{
				if(rdoReceipt80.isSelected()){
                                    return rdoReceipt80;
                                } else if(rdoReceipt58.isSelected()){
                                    return rdoReceipt58;
                                }
                                return rdoReceiptSpecial;
			}
                         else if ( aComponent.equals(rdoReceipt80) 
                                 || aComponent.equals(rdoReceipt58) 
                                 || aComponent.equals(rdoReceiptSpecial) )
			{
				return printCounselingSheet;
			}
                         else if ( aComponent.equals(printCounselingSheet))
			{
				return counselingMenuList;
			}else if ( aComponent.equals(counselingMenuList))
			{
				return cmbTargetPeriodStart;
			}
                        else if ( aComponent.equals(cmbTargetPeriodStart))
			{
				return cmbTargetPeriodEnd;
			}
                         else if ( aComponent.equals(cmbTargetPeriodEnd))
			{
				return tmpMessage;
			}
                         else if ( aComponent.equals(tmpMessage))
			{
				return tmpMessageTable;
			}
			return getDefaultComponent();
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(printerList))
			{
				return logoPath;
			}
                        else if (aComponent.equals(logoPath))
			{
				return deleteLogo;
			}
			else if (aComponent.equals(deleteLogo))
			{
				return message;
			}
			else if (aComponent.equals(message))
			{
				return footerImagePath;
			}
                        else if (aComponent.equals(footerImagePath))
			{
				return deleteFooter;
			}
                          else if (aComponent.equals(deleteFooter))
			{
				return printReceipt;
			}
                          else if (aComponent.equals(printReceipt))
			{
				return printNextInfo;
			}
                         else if (aComponent.equals(printNextInfo))
			{
				if(rdoReceipt80.isSelected()){
                                    return rdoReceipt80;
                                } else if(rdoReceipt58.isSelected()){
                                    return rdoReceipt58;
                                }
                                return rdoReceiptSpecial;
			}
                         else if ( aComponent.equals(rdoReceipt80) 
                                 || aComponent.equals(rdoReceipt58) 
                                 || aComponent.equals(rdoReceiptSpecial) )
			{
				return printCounselingSheet;
			}
                         else if ( aComponent.equals(printCounselingSheet))
			{
				return counselingMenuList;
			}else if ( aComponent.equals(counselingMenuList))
			{
				return cmbTargetPeriodStart;
			}
                        else if ( aComponent.equals(cmbTargetPeriodStart))
			{
				return cmbTargetPeriodEnd;
			}
                         else if ( aComponent.equals(cmbTargetPeriodEnd))
			{
				return tmpMessage;
			}
                         else if ( aComponent.equals(tmpMessage))
			{
				return tmpMessageTable;
			}
			return getDefaultComponent();
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return getDefaultComponent();
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return tmpMessageTable;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return getDefaultComponent();
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return getDefaultComponent();
		}
		
		public Component getDefaultComponent()
		{
			return printerList;
		}
	}
}
