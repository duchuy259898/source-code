/*
 * MstSupplierPanel.java
 *
 * Created on 2007/04/02, 15:21
 */

package com.geobeck.sosia.pos.basicinfo.commodity;

import com.geobeck.sosia.pos.master.commodity.MstSupplier;
import com.geobeck.sosia.pos.master.commodity.MstSupplierItem;
import com.geobeck.sosia.pos.master.product.MstItemClass;
import com.geobeck.sosia.pos.hair.search.supplier.SearchSupplierDialog;
import com.geobeck.sosia.pos.search.SearchAddressDialog;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.AddressUtil;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.CustomFilter;
import com.geobeck.swing.FormatterCreator;
import com.geobeck.swing.IntegerCellEditor;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.text.PlainDocument;


/**
 *
 * @author  mizukawa
 */
public class MstSupplierItemPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	
	/** Creates new form MstSupplierPanel */
	public MstSupplierItemPanel()
	{
            msim = new MstSupplierItemManager();
            initComponents();
            addMouseCursorChange();
            this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        purchaseDivision = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        supplierNo = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)supplierNo.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        supplierNoLabel = new javax.swing.JLabel();
        supplierName = new com.geobeck.swing.JFormattedTextFieldEx();
        showButton = new javax.swing.JButton();
        searchSupplierButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        phoneNumber = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)phoneNumber.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.PHONE_NUMBER));
        faxNumber = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)faxNumber.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.PHONE_NUMBER));
        mailAddress = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)mailAddress.getDocument()).setDocumentFilter(
            new CustomFilter(64, CustomFilter.MAIL_ADDRESS));
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        supplierStaff = new com.geobeck.swing.JFormattedTextFieldEx();
        jPanel4 = new javax.swing.JPanel();
        address4 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address4.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        address3 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address3.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        address2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address2.getDocument()).setDocumentFilter(
            new CustomFilter(64));
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        address1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address1.getDocument()).setDocumentFilter(
            new CustomFilter(16));
        postalCode = postalCode = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createPostalCodeFormatter());
        jLabel3 = new javax.swing.JLabel();
        searchAddressButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        paymentClass = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cutoffDay = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)cutoffDay.getDocument()).setDocumentFilter(
            new CustomFilter(2, CustomFilter.NUMERIC));
        paymentDay = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)paymentDay.getDocument()).setDocumentFilter(
            new CustomFilter(2, CustomFilter.NUMERIC));
        purchaseLabel = new javax.swing.JLabel();
        purchaseLabel.setVisible(false);
        trustPurchase = new javax.swing.JRadioButton();
        trustPurchase.setVisible(false);
        cashPurchase = new javax.swing.JRadioButton();
        cashPurchase.setVisible(false);
        jLabel15 = new javax.swing.JLabel();
        productClassScrollPane = new javax.swing.JScrollPane();
        itemClass = new javax.swing.JTable();
        referenceProductsScrollPane = new javax.swing.JScrollPane();
        referenceItems = new javax.swing.JTable();
        selectButton = new javax.swing.JButton();
        selectAllButton = new javax.swing.JButton();
        releaseAllButton = new javax.swing.JButton();
        releaseButton = new javax.swing.JButton();
        selectProductsScrollPane = new javax.swing.JScrollPane();
        selectItems = new javax.swing.JTable();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        jLabel2.setText("édì¸êÊñº");

        supplierNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        supplierNo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        supplierNoLabel.setText("édì¸êÊNo.");

        supplierName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        supplierName.setInputKanji(true);

        showButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
        showButton.setBorderPainted(false);
        showButton.setContentAreaFilled(false);
        showButton.setFocusable(false);
        showButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        searchSupplierButton.setIcon(SystemInfo.getImageIcon("/button/master/supplier_list_off.jpg"));
        searchSupplierButton.setBorderPainted(false);
        searchSupplierButton.setContentAreaFilled(false);
        searchSupplierButton.setFocusable(false);
        searchSupplierButton.setPressedIcon(SystemInfo.getImageIcon("/button/master/supplier_list_on.jpg"));
        searchSupplierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSupplierButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(supplierNoLabel))
                .add(30, 30, 30)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(supplierName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(supplierNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(searchSupplierButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(supplierNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(supplierNoLabel))
                    .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(searchSupplierButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(supplierName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(127, 127, 127))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {supplierName, supplierNo}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel2.setOpaque(false);

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setContentAreaFilled(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setContentAreaFilled(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        newButton.setIcon(SystemInfo.getImageIcon("/button/common/new_registration_off.jpg"));
        newButton.setBorderPainted(false);
        newButton.setContentAreaFilled(false);
        newButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/new_registration_on.jpg"));
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(newButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(newButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setOpaque(false);

        jLabel5.setText("ìdòbî‘çÜ");

        phoneNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        faxNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        faxNumber.setColumns(20);

        mailAddress.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        mailAddress.setColumns(64);

        jLabel7.setText("ÉÅÅ[ÉãÉAÉhÉåÉX");

        jLabel6.setText("FAXî‘çÜ");

        jLabel11.setText("édì¸êÊíSìñé“");

        supplierStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        supplierStaff.setInputKanji(true);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLabel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(faxNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(phoneNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mailAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 299, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(supplierStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(phoneNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(faxNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(mailAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(supplierStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel4.setOpaque(false);

        address4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address4.setColumns(128);
        address4.setInputKanji(true);

        jLabel10.setText("É}ÉìÉVÉáÉìñºìô");

        jLabel9.setText("í¨àÊÅEî‘ín");

        address3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address3.setInputKanji(true);

        address2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address2.setInputKanji(true);

        jLabel8.setText("ésãÊí¨ë∫");

        jLabel4.setText("ìsìπï{åß");

        address1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address1.setInputKanji(true);

        postalCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        postalCode.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        postalCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                postalCodeFocusLost(evt);
            }
        });

        jLabel3.setText("óXï÷î‘çÜ");

        searchAddressButton.setIcon(SystemInfo.getImageIcon("/button/search/search_address_off.jpg"));
        searchAddressButton.setBorderPainted(false);
        searchAddressButton.setContentAreaFilled(false);
        searchAddressButton.setFocusable(false);
        searchAddressButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_address_on.jpg"));
        searchAddressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAddressButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3)
                    .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(address4, 0, 1, Short.MAX_VALUE)
                    .add(address3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel9)
                    .add(address3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(address4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setOpaque(false);

        jLabel1.setText("éxï•Ç¢ÉTÉCÉg");

        jLabel12.setText("ì˙ÅY");

        paymentClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ìñ", "óÇ", "óÇÅX" }));

        jLabel13.setText("åé");

        jLabel14.setText("ì˙ï•Ç¢");

        cutoffDay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        paymentDay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        purchaseLabel.setText("édì¸ãÊï™");

        purchaseDivision.add(trustPurchase);
        trustPurchase.setSelected(true);
        trustPurchase.setText("ä|édì¸");
        trustPurchase.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        trustPurchase.setMargin(new java.awt.Insets(0, 0, 0, 0));
        trustPurchase.setOpaque(false);

        purchaseDivision.add(cashPurchase);
        cashPurchase.setText("åªã‡édì¸");
        cashPurchase.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cashPurchase.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cashPurchase.setOpaque(false);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(purchaseLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(trustPurchase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cashPurchase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(cutoffDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jLabel12)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(paymentClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel13)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(paymentDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(5, 5, 5)
                        .add(jLabel14)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(trustPurchase, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .add(cashPurchase, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .add(purchaseLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(7, 7, 7)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(cutoffDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel13)
                    .add(paymentDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel14)
                    .add(jLabel1)
                    .add(paymentClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel15.setText("ÅÉéÊàµè§ïiìoò^ÅÑ");

        itemClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ï™óﬁñº"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemClass.setSelectionForeground(new java.awt.Color(0, 0, 0));
        itemClass.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        itemClass.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(itemClass, SystemInfo.getTableHeaderRenderer());
        itemClass.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(itemClass);
        itemClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                itemClassMouseReleased(evt);
            }
        });
        itemClass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemClassKeyReleased(evt);
            }
        });
        productClassScrollPane.setViewportView(itemClass);

        referenceItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "å^î‘", "è§ïiñº", "îÃîÑâøäi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        referenceItems.setSelectionForeground(new java.awt.Color(0, 0, 0));
        referenceItems.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(referenceItems, SystemInfo.getTableHeaderRenderer());
        referenceItems.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(referenceItems);
        referenceItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                referenceItemsMouseClicked(evt);
            }
        });
        referenceProductsScrollPane.setViewportView(referenceItems);

        selectButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setContentAreaFilled(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        selectAllButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right2_off.jpg"));
        selectAllButton.setBorderPainted(false);
        selectAllButton.setContentAreaFilled(false);
        selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right2_on.jpg"));
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left2_off.jpg"));
        releaseAllButton.setBorderPainted(false);
        releaseAllButton.setContentAreaFilled(false);
        releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left2_on.jpg"));
        releaseAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseAllButtonActionPerformed(evt);
            }
        });

        releaseButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left_off.jpg"));
        releaseButton.setBorderPainted(false);
        releaseButton.setContentAreaFilled(false);
        releaseButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left_on.jpg"));
        releaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseButtonActionPerformed(evt);
            }
        });

        selectItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "å^î‘", "è§ïiñº", "îÃîÑâøäi", "<html>édì¸âøäi<br><center>(ê≈çû)</center></html>", "<html>édì¸âøäi<br><center>(ê≈î≤)</center></html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        selectItems.setSelectionForeground(new java.awt.Color(0, 0, 0));
        selectItems.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(selectItems, SystemInfo.getTableHeaderRenderer());
        selectItems.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(selectItems);
        TableColumnModel selectItemsModel = selectItems.getColumnModel();
        selectItemsModel.getColumn(3).setCellRenderer(new EditabeTableCellRenderer(Integer.class));
        selectItemsModel.getColumn(3).setCellEditor(new IntegerCellEditor(new JTextField()));
        selectItems.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectItemsFocusGained(evt);
            }
        });
        selectItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectItemsMouseClicked(evt);
            }
        });
        selectItems.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                selectItemsPropertyChange(evt);
            }
        });
        selectProductsScrollPane.setViewportView(selectItems);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(productClassScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(referenceProductsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 298, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(releaseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(selectProductsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 324, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(53, 53, 53)
                                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(21, 21, 21))))
                    .add(jLabel15))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 146, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .add(layout.createSequentialGroup()
                        .add(224, 224, 224)
                        .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(referenceProductsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                            .add(productClassScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                            .add(selectProductsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(86, 86, 86)
                        .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(36, 36, 36)
                        .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(releaseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchSupplierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSupplierButtonActionPerformed

	SystemInfo.getLogger().log(Level.INFO, "édì¸êÊàÍóó");
	SearchSupplierDialog ssp = new SearchSupplierDialog(parentFrame, true);
	ssp.setVisible(true);

	if (ssp.getSelectedSupplier() != null && !ssp.getSelectedSupplier().getSupplierID().equals("")) {
	    supplierNo.setText(ssp.getSelectedSupplier().getSupplierNo().toString());
	    changeCurrentData();
	}

	ssp.dispose();
	ssp = null;
    }//GEN-LAST:event_searchSupplierButtonActionPerformed

	private void selectItemsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_selectItemsMouseClicked
	{//GEN-HEADEREND:event_selectItemsMouseClicked
		if (evt.getClickCount() >= 2)
		{
                    //IVS_TMTrong start add 2015/09/22 New request #42801
                    if (selectItems.isEditing()){
                        selectItems.getCellEditor().stopCellEditing();
                    }
                    //IVS_TMTrong end add 2015/09/21 New request #42801
			this.moveItem(false);
		}
	}//GEN-LAST:event_selectItemsMouseClicked

	private void referenceItemsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_referenceItemsMouseClicked
	{//GEN-HEADEREND:event_referenceItemsMouseClicked
		if (evt.getClickCount() >= 2)
		{
                    //IVS_TMTrong start add 2015/09/22 New request #42801
                    if (selectItems.isEditing()){
                        selectItems.getCellEditor().stopCellEditing();
                    }
                    //IVS_TMTrong end add 2015/09/21 New request #42801
			this.moveItem(true);
		}
	}//GEN-LAST:event_referenceItemsMouseClicked
	
	private void selectItemsPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_selectItemsPropertyChange
	{//GEN-HEADEREND:event_selectItemsPropertyChange
		changeCostPriceValue();
	}//GEN-LAST:event_selectItemsPropertyChange
	
	private void selectItemsFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_selectItemsFocusGained
	{//GEN-HEADEREND:event_selectItemsFocusGained
		if(selectItems.getInputContext() != null)
			selectItems.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_selectItemsFocusGained
	
	private void newButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newButtonActionPerformed
	{//GEN-HEADEREND:event_newButtonActionPerformed
		this.clear();
	}//GEN-LAST:event_newButtonActionPerformed
	
	private void showButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showButtonActionPerformed
	{//GEN-HEADEREND:event_showButtonActionPerformed
		changeCurrentData();
	}//GEN-LAST:event_showButtonActionPerformed
	
	private void releaseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_releaseButtonActionPerformed
	{//GEN-HEADEREND:event_releaseButtonActionPerformed
		this.moveItem(false);
	}//GEN-LAST:event_releaseButtonActionPerformed
	
	private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_releaseAllButtonActionPerformed
	{//GEN-HEADEREND:event_releaseAllButtonActionPerformed
		this.moveAllItem(false);
	}//GEN-LAST:event_releaseAllButtonActionPerformed
	
	private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectAllButtonActionPerformed
	{//GEN-HEADEREND:event_selectAllButtonActionPerformed
		this.moveAllItem(true);
	}//GEN-LAST:event_selectAllButtonActionPerformed
	
	private void selectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectButtonActionPerformed
	{//GEN-HEADEREND:event_selectButtonActionPerformed
		this.moveItem(true);
	}//GEN-LAST:event_selectButtonActionPerformed
	
	private void itemClassMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_itemClassMouseReleased
	{//GEN-HEADEREND:event_itemClassMouseReleased
		this.showItems();
	}//GEN-LAST:event_itemClassMouseReleased
	
	private void itemClassKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_itemClassKeyReleased
	{//GEN-HEADEREND:event_itemClassKeyReleased
		this.showItems();
	}//GEN-LAST:event_itemClassKeyReleased
	
	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed
	
	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		//IVS_TMTrong start add 2015/09/22 New request #42801
                if (selectItems.isEditing()){
                        selectItems.getCellEditor().stopCellEditing();
                }
                //IVS_TMTrong end add 2015/09/22 New request #42801
                if(this.checkInput())
		{
			this.regist(false);
		}
	}//GEN-LAST:event_renewButtonActionPerformed
	
	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
		if(this.checkInput())
		{
			this.regist(true);
		}
	}//GEN-LAST:event_addButtonActionPerformed
	
	private void searchAddressButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchAddressButtonActionPerformed
	{//GEN-HEADEREND:event_searchAddressButtonActionPerformed
		SearchAddressDialog		sa	=	new SearchAddressDialog(parentFrame, true);
		sa.setVisible(true);
		
		if(!sa.getSelectedPrefecture().equals(""))
		{
			postalCode.setText(sa.getSelectedPostalCode());
			address1.setText(sa.getSelectedPrefecture());
			address2.setText(sa.getSelectedCity());
			address3.setText(sa.getSelectedTown().replaceAll("Åi.+", ""));
		}
		
		sa = null;
	}//GEN-LAST:event_searchAddressButtonActionPerformed
	
	private void postalCodeFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_postalCodeFocusLost
	{//GEN-HEADEREND:event_postalCodeFocusLost
		String		temp	=	postalCode.getText().replaceAll("[-_]", "");
		
		//óXï÷î‘çÜÇ™ì¸ò^Ç≥ÇÍÇƒÇ¢Ç»Ç¢èÍçá
		if(temp.equals("") || temp.length() != 7)
		{
			address1.setText("");
			address2.setText("");
			address3.setText("");
		}
		else
		{
			AddressUtil		au	=	new	AddressUtil();
			
			au.setPostalCode(temp);
			
			try
			{
				ConnectionWrapper	con	=	SystemInfo.getBaseConnection();
				
				//èZèäÇ™éÊìæÇ≈Ç´ÇΩèÍçá
				if(au.getDataByPostalCode(con))
				{
					address1.setText(au.getPrefectureName());
					address2.setText(au.getCityName());
					address3.setText(au.getTownName().replaceAll("Åi.+", ""));
				}
				//èZèäÇ™éÊìæÇ≈Ç´Ç»Ç©Ç¡ÇΩèÍçáèZèäÇÉNÉäÉA
				else
				{
					address1.setText("");
					address2.setText("");
					address3.setText("");
				}
			}
			catch(SQLException e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
	}//GEN-LAST:event_postalCodeFocusLost
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private com.geobeck.swing.JFormattedTextFieldEx address1;
    private com.geobeck.swing.JFormattedTextFieldEx address2;
    private com.geobeck.swing.JFormattedTextFieldEx address3;
    private com.geobeck.swing.JFormattedTextFieldEx address4;
    private javax.swing.JRadioButton cashPurchase;
    private com.geobeck.swing.JFormattedTextFieldEx cutoffDay;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx faxNumber;
    private javax.swing.JTable itemClass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private com.geobeck.swing.JFormattedTextFieldEx mailAddress;
    private javax.swing.JButton newButton;
    private javax.swing.JComboBox paymentClass;
    private com.geobeck.swing.JFormattedTextFieldEx paymentDay;
    private com.geobeck.swing.JFormattedTextFieldEx phoneNumber;
    private com.geobeck.swing.JFormattedTextFieldEx postalCode;
    private javax.swing.JScrollPane productClassScrollPane;
    private javax.swing.ButtonGroup purchaseDivision;
    private javax.swing.JLabel purchaseLabel;
    private javax.swing.JTable referenceItems;
    private javax.swing.JScrollPane referenceProductsScrollPane;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton releaseButton;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton searchAddressButton;
    private javax.swing.JButton searchSupplierButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JTable selectItems;
    private javax.swing.JScrollPane selectProductsScrollPane;
    private javax.swing.JButton showButton;
    private com.geobeck.swing.JFormattedTextFieldEx supplierName;
    private com.geobeck.swing.JFormattedTextFieldEx supplierNo;
    private javax.swing.JLabel supplierNoLabel;
    private com.geobeck.swing.JFormattedTextFieldEx supplierStaff;
    private javax.swing.JRadioButton trustPurchase;
    // End of variables declaration//GEN-END:variables
	
	private	MstSupplierManager	msm					=	null;
	private	MstSupplierItemManager msim				=	null;
	
	/**
	 * è§ïiÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicy
	 */
	private	MstSupplierFocusTraversalPolicy	ftp	=
		new MstSupplierFocusTraversalPolicy();
	
	/**
	 * è§ïiÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
	 * @return è§ïiÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicy
	 */
	public MstSupplierFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
	 */
	private void addMouseCursorChange()
	{
            SystemInfo.addMouseCursorChange(showButton);
            SystemInfo.addMouseCursorChange(searchSupplierButton);
            SystemInfo.addMouseCursorChange(searchAddressButton);
            
            SystemInfo.addMouseCursorChange(newButton);
            SystemInfo.addMouseCursorChange(addButton);
            SystemInfo.addMouseCursorChange(renewButton);
            SystemInfo.addMouseCursorChange(deleteButton);
            
            SystemInfo.addMouseCursorChange(selectButton);
            SystemInfo.addMouseCursorChange(selectAllButton);
            SystemInfo.addMouseCursorChange(releaseButton);
            SystemInfo.addMouseCursorChange(releaseAllButton);
	}
        
	private void init()
	{
            this.setSize(833, 691);
            this.setPath("äÓñ{ê›íË >> è§ïiÉ}ÉXÉ^");
            this.setTitle("édì¸êÊìoò^");
            this.addListener();

            msm	=	new MstSupplierManager();
            loadSupplier();
            //IVS_LVTu start edit 2016/02/26 New request #48791
            //showItemClasses();

            clear();

            //itemClass.setRowSelectionInterval(0, 0);
            //showItems();
	}
        
        private void showItem() {
            showItemClasses();
            itemClass.setRowSelectionInterval(0, 0);
            showItems();
        }
        //IVS_LVTu end edit 2016/02/26 New request #48791
	
	private void addListener()
	{
		supplierNo.addKeyListener(SystemInfo.getMoveNextField());
		supplierNo.addFocusListener(SystemInfo.getSelectText());
		supplierName.addKeyListener(SystemInfo.getMoveNextField());
		supplierName.addFocusListener(SystemInfo.getSelectText());
		trustPurchase.addKeyListener(SystemInfo.getMoveNextField());
		cashPurchase.addKeyListener(SystemInfo.getMoveNextField());
		postalCode.addKeyListener(SystemInfo.getMoveNextField());
		postalCode.addFocusListener(SystemInfo.getSelectText());
		address1.addKeyListener(SystemInfo.getMoveNextField());
		address1.addFocusListener(SystemInfo.getSelectText());
		address2.addKeyListener(SystemInfo.getMoveNextField());
		address2.addFocusListener(SystemInfo.getSelectText());
		address3.addKeyListener(SystemInfo.getMoveNextField());
		address3.addFocusListener(SystemInfo.getSelectText());
		address4.addKeyListener(SystemInfo.getMoveNextField());
		address4.addFocusListener(SystemInfo.getSelectText());
		phoneNumber.addKeyListener(SystemInfo.getMoveNextField());
		phoneNumber.addFocusListener(SystemInfo.getSelectText());
		faxNumber.addKeyListener(SystemInfo.getMoveNextField());
		faxNumber.addFocusListener(SystemInfo.getSelectText());
		mailAddress.addKeyListener(SystemInfo.getMoveNextField());
		mailAddress.addFocusListener(SystemInfo.getSelectText());
		cutoffDay.addKeyListener(SystemInfo.getMoveNextField());
		cutoffDay.addFocusListener(SystemInfo.getSelectText());
		paymentClass.addKeyListener(SystemInfo.getMoveNextField());
		paymentDay.addKeyListener(SystemInfo.getMoveNextField());
		paymentDay.addFocusListener(SystemInfo.getSelectText());
		supplierStaff.addKeyListener(SystemInfo.getMoveNextField());
		supplierStaff.addFocusListener(SystemInfo.getSelectText());
	}
	
	private void clear()
	{
		MstSupplier ms = new MstSupplier();
		msm.setCurrentSupplier(ms);
		msim.reload();
		msim.setSupplier(ms);
		this.showCurrentData();
	}
	
	private void changeCurrentData()
	{
//		int	index	=	supplierList.getSelectedRow();
//
//		if(0 <= index)
//		{
//			msm.setCurrentSupplier(msm.get(index));
//		}
//		else
//		{
//			msm.setCurrentSupplier(new MstSupplier());
//		}
		
		String inputNoString = supplierNo.getText();
		if (inputNoString == null || "".equals(inputNoString))
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "édì¸êÊNo"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		Integer inputNo = new Integer(inputNoString);
		MstSupplier supplier = msm.lookupSupplier(inputNo);
		if (supplier == null)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "édì¸êÊNo"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return;
		}
		//IVS_LVTu start edit 2016/02/26 New request #48791
                showItem();
                //IVS_LVTu start edit 2016/02/26 New request #48791
		msm.setCurrentSupplier(supplier);
		msim.reload();
		msim.setSupplier(supplier);
		this.showCurrentData();
	}
	
	private void showCurrentData()
	{
		MstSupplier		cs	=	msm.getCurrentSupplier();
		
		supplierNo.setText(cs.getSupplierNoString());
		supplierName.setText(cs.getSupplierName());
		this.setPurchaseDivision(cs.getPurchaseDivision());
		postalCode.setText(cs.getPostalCode().trim());
		address1.setText(cs.getAddress(0));
		address2.setText(cs.getAddress(1));
		address3.setText(cs.getAddress(2));
		address4.setText(cs.getAddress(3));
		phoneNumber.setText(cs.getPhoneNumber());
		faxNumber.setText(cs.getFaxNumber());
		mailAddress.setText(cs.getMailAddress());
		supplierStaff.setText(cs.getSupplierStaff());
		
		// éxï•ÉTÉCÉg
		if (cs.getCutoffDay() != null)
		{
			cutoffDay.setText(cs.getCutoffDay().toString());
		}
		else
		{
			cutoffDay.setText("");
		}
		// éxï•ÉTÉCÉgéxï•Ç¢åéÉRÅ[Éh
		if (cs.getPaymentClass() != null)
		{
			switch (cs.getPaymentClass().intValue())
			{
				case 1:
					paymentClass.setSelectedIndex(0);
					break;
				case 2:
					paymentClass.setSelectedIndex(1);
					break;
				case 3:
					paymentClass.setSelectedIndex(2);
					break;
				default:
					paymentClass.setSelectedIndex(-1);
					break;
			}
		}
		else
		{
			paymentClass.setSelectedIndex(-1);
		}
		
		// éxï•ÉTÉCÉgéxï•ì˙
		if (cs.getPaymentDay() != null)
		{
			paymentDay.setText(cs.getPaymentDay().toString());
		}
		else
		{
			paymentDay.setText("");
		}
		
		this.showItems();
		this.changeButtonEnabled(cs.getSupplierID() != null);
	}
	
	/**
	 * ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 */
	private void showItems()
	{
		Integer		index	=	itemClass.getSelectedRow();
		
		SwingUtil.clearTable(referenceItems);
		SwingUtil.clearTable(selectItems);
		
		if(index != null && 0 <= index)
		{
			this.showSupplierItems(msim.getReference().get(index), referenceItems, true);
			this.showSupplierItems(msim.getSelected().get(index), selectItems, false);
		}
	}
	
	/**
	 * ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 * @param pc ï™óﬁ
	 * @param table ÉeÅ[ÉuÉã
	 */
	private void showSupplierItems(ArrayList<MstSupplierItem> supplierItems, JTable table, boolean isReference)
	{
		SwingUtil.clearTable(table);
		
		DefaultTableModel model = (DefaultTableModel)table.getModel();
		
		MstSupplier cursupplier = msm.getCurrentSupplier();
		for(MstSupplierItem msi : supplierItems)
		{
                     if (!isReference) {
                        if (cursupplier.getSupplierID() == null) continue;
                        if (msi.getSupplier() == null) continue;
                        if (!cursupplier.getSupplierID().equals(msi.getSupplier().getSupplierID())) continue;
                    }

                    Vector<Object> temp = new Vector<Object>();
                    temp.add(msi.getItemNo());
                    temp.add(msi.getItemName());
                    temp.add(msi.getPrice());
                    if (!isReference) {
                        //IVS_TMTrong start add 2015/09/24 New request #42801
                        temp.add(msi.getCostPrice());
                        temp.add(getNonTaxOfPrice(msi.getCostPrice()));
                        //IVS_TMTrong end add 2015/09/24 New request #42801
                    }
                    model.addRow(temp);
		}
	}
	
	private void setPurchaseDivision(Integer purchaseDivision)
	{
		if(purchaseDivision == 1)
		{
			cashPurchase.setSelected(true);
		}
		else
		{
			trustPurchase.setSelected(true);
		}
	}
	
	private void changeButtonEnabled(boolean enabled)
	{
		renewButton.setEnabled(enabled);
		deleteButton.setEnabled(enabled);
	}
	
	private boolean checkInput()
	{
		if(supplierNo.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "édì¸êÊNo."),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			supplierNo.requestFocusInWindow();
			return	false;
		}
		
		if(supplierName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "édì¸êÊñº"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			supplierName.requestFocusInWindow();
			return	false;
		}
		
		// éxï•ÉTÉCÉgí˜Çﬂì˙
		// ïKê{É`ÉFÉbÉN
		if ("".equals(cutoffDay.getText()))
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "éxï•ÉTÉCÉgí˜Çﬂì˙"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			cutoffDay.requestFocusInWindow();
			return	false;
		}
		// ì˙ïtÉ`ÉFÉbÉN
		int cutoffdayVal = Integer.parseInt(cutoffDay.getText());
		if (cutoffdayVal <= 0 || cutoffdayVal >= 32)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "éxï•ÉTÉCÉgí˜Çﬂì˙"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			cutoffDay.requestFocusInWindow();
			return	false;
		}
		// éxï•ÉTÉCÉgéxï•Ç¢åéÉRÅ[Éh
		if (paymentClass.getSelectedIndex() < 0)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED, "éxï•ÉTÉCÉgéxï•Ç¢åé"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			paymentClass.requestFocusInWindow();
			return	false;
		}
		// éxï•ÉTÉCÉgéxï•ì˙
		// ïKê{É`ÉFÉbÉN
		if ("".equals(paymentDay.getText()))
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "éxï•ÉTÉCÉgéxï•ì˙"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			paymentDay.requestFocusInWindow();
			return	false;
		}
		//ì˙ïtÉ`ÉFÉbÉN
		int paymentDayVal = Integer.parseInt(paymentDay.getText());
		if (paymentDayVal <= 0 || paymentDayVal >= 32)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "éxï•ÉTÉCÉgéxï•ì˙"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			paymentDay.requestFocusInWindow();
			return	false;
		}
		
		// édì¸ÇÍâøäiÉ`ÉFÉbÉN
		ArrayList<ArrayList<MstSupplierItem>> itemClassList = msim.getSelected();
		for (int i = 0; i < itemClassList.size(); i++)
		{
			ArrayList<MstSupplierItem> itemList = itemClassList.get(i);
			int cnt = 0;
			for (int j = 0; j < itemList.size(); j++)
			{
				MstSupplierItem msi = itemList.get(j);
				if (msm.getCurrentSupplier().getSupplierID() != null && msm.getCurrentSupplier().getSupplierID().equals(msi.getSupplier().getSupplierID()))
				{
					//É}ÉCÉiÉXÉ`ÉFÉbÉN
					if (msi.getCostPrice() == null || msi.getCostPrice().intValue() < 0)
					{
						MessageDialog.showMessageDialog(this,
							"édì¸âøäiÇÕÉ}ÉCÉiÉXÇ≈ìoò^Ç≈Ç´Ç‹ÇπÇÒÅB",
							this.getTitle(),
							JOptionPane.ERROR_MESSAGE);
						
						itemClass.changeSelection(i, 0, false, false);
						showItems();
						selectItems.changeSelection(cnt, 3, false, false);
						return	false;
					}
					
					cnt++;
				}
			}
		}
		
		this.setCurrentData();
		
		if(!msm.checkSupplierNo())
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_SAME_NO_EXIST, "édì¸êÊNo."),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			supplierNo.requestFocusInWindow();
			return	false;
		}
		
		return	true;
	}
	
	private void setCurrentData()
	{
		MstSupplier		cs	=	msm.getCurrentSupplier();
		
		cs.setSupplierNo(Integer.parseInt(supplierNo.getText()));
		cs.setSupplierName(supplierName.getText());
		cs.setPurchaseDivision(this.getPurchaseDivision());
		cs.setPostalCode(this.getPostalCode().trim());
		cs.setAddress(0, address1.getText());
		cs.setAddress(1, address2.getText());
		cs.setAddress(2, address3.getText());
		cs.setAddress(3, address4.getText());
		cs.setPhoneNumber(phoneNumber.getText());
		cs.setFaxNumber(faxNumber.getText());
		cs.setMailAddress(mailAddress.getText());
		cs.setSupplierStaff(supplierStaff.getText());
		
		// éxï•ÉTÉCÉgí˜Çﬂì˙
		cs.setCutoffDay(new Integer(cutoffDay.getText()));
		// éxï•ÉTÉCÉgéxï•Ç¢åéÉRÅ[Éh
		switch (paymentClass.getSelectedIndex())
		{
			case 0:
				cs.setPaymentClass(1);
				break;
			case 1:
				cs.setPaymentClass(2);
				break;
			case 2:
				cs.setPaymentClass(3);
				break;
		}
		//éxï•ÉTÉCÉgéxï•ì˙
		cs.setPaymentDay(new Integer(paymentDay.getText()));
	}
	
	private void loadSupplier()
	{
		msm.load();
	}
	
	private Integer getPurchaseDivision()
	{
		if(cashPurchase.isSelected())
		{
			return	1;
		}
		else
		{
			return	0;
		}
	}

	/**
	 * ì¸óÕÇ≥ÇÍÇƒÇ¢ÇÈóXï÷î‘çÜÇéÊìæÇ∑ÇÈÅB
	 * @return ì¸óÕÇ≥ÇÍÇƒÇ¢ÇÈóXï÷î‘çÜ
	 */
	private String getPostalCode()
	{
		return	postalCode.getText().replaceAll("[-_]", "");
	}

	private void regist(boolean isAdd)
	{
		ConnectionWrapper	con	=	SystemInfo.getConnection();

		try
		{
			try
			{
				con.begin();

				if(isAdd)
				{
					// édì¸êÊNoÇÃèdï°É`ÉFÉbÉN
					if (msm.getCurrentSupplier().existsSameSupplierNo(con))
					{
						con.rollback();
						MessageDialog.showMessageDialog(this,
							MessageUtil.getMessage(MessageUtil.ERROR_SAME_NO_EXIST, "édì¸êÊNo."),
							this.getTitle(),
							JOptionPane.ERROR_MESSAGE);
						supplierNo.requestFocusInWindow();
						return;
					}

					msm.getCurrentSupplier().setSupplierID(null);
				}

				if(!msm.register(con))
				{
					con.rollback();
					MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "édì¸êÊ"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
					return;
				}

				if (isAdd)
				{
					msim.setSupplier(msm.getCurrentSupplier());
				}

				if(!msim.register(con))
				{
					con.rollback();
					MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED,
						"édì¸è§ïi"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
					return;
				}

				con.commit();

				this.clear();
				loadSupplier();

				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
					this.getTitle(),
					JOptionPane.INFORMATION_MESSAGE);
			}
			catch (SQLException e)
			{
				con.rollback();
				throw e;
			}
			finally
			{
				con.close();
			}
		}
		catch (SQLException e)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "édì¸êÊ"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}

	private void delete()
	{
                if(msim.checkExistItemRegisted()) {
                    MessageDialog.showMessageDialog(this,
				"è§ïiìoò^Ç≥ÇÍÇƒÇ¢ÇÈÇΩÇﬂÅAçÌèúÇ≈Ç´Ç‹ÇπÇÒÅB",
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
                        return;
                }
		//ämîFÉÅÉbÉZÅ[ÉW
		if(MessageDialog.showYesNoDialog(this,
			MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE,
			msm.getCurrentSupplier().getSupplierName()),
			this.getTitle(),
			JOptionPane.WARNING_MESSAGE) == JOptionPane.NO_OPTION)
		{
			return;
		}
		
		if(msm.delete())
		{
			if (!msim.delete())
			{
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED),
					this.getTitle(),
					JOptionPane.INFORMATION_MESSAGE);
				return;
			}
			this.clear();
			loadSupplier();
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.INFO_DELETE_SUCCESS),
				this.getTitle(),
				JOptionPane.INFORMATION_MESSAGE);
		}
		else
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED),
				this.getTitle(),
				JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	/**
	 * è§ïiÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicy
	 */
	private class MstSupplierFocusTraversalPolicy
		extends FocusTraversalPolicy
	{
		/**
		 * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentAfter(Container aContainer,
			Component aComponent)
		{
			if (aComponent.equals(supplierNo))
			{
				return supplierName;
			}
			else if (aComponent.equals(supplierName))
			{
//				return this.getSelectedPurchaseDivision();
				return postalCode;
			}
//			else if (aComponent.equals(trustPurchase))
//			{
//				return postalCode;
//			}
//			else if (aComponent.equals(cashPurchase))
//			{
//				return postalCode;
//			}
			else if (aComponent.equals(postalCode))
			{
				return address1;
			}
			else if (aComponent.equals(address1))
			{
				return address2;
			}
			else if (aComponent.equals(address2))
			{
				return address3;
			}
			else if (aComponent.equals(address3))
			{
				return address4;
			}
			else if (aComponent.equals(address4))
			{
				return cutoffDay;
			}
			else if (aComponent.equals(cutoffDay))
			{
				return paymentClass;
			}
			else if (aComponent.equals(paymentClass))
			{
				return paymentDay;
			}
			else if (aComponent.equals(paymentDay))
			{
				return phoneNumber;
			}
			else if (aComponent.equals(phoneNumber))
			{
				return faxNumber;
			}
			else if (aComponent.equals(faxNumber))
			{
				return mailAddress;
			}
			else if (aComponent.equals(mailAddress))
			{
				return supplierStaff;
			}
			else if (aComponent.equals(supplierStaff))
			{
				return supplierNo;
			}
			
			return supplierNo;
		}
		
		/**
		 * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentBefore(Container aContainer,
			Component aComponent)
		{
			if (aComponent.equals(supplierNo))
			{
				return mailAddress;
			}
			else if (aComponent.equals(supplierName))
			{
				return supplierNo;
			}
//			else if (aComponent.equals(trustPurchase))
//			{
//				return supplierName;
//			}
//			else if (aComponent.equals(cashPurchase))
//			{
//				return supplierName;
//			}
			else if (aComponent.equals(postalCode))
			{
//				return this.getSelectedPurchaseDivision();
				return postalCode;
			}
			else if (aComponent.equals(address1))
			{
				return postalCode;
			}
			else if (aComponent.equals(address2))
			{
				return address1;
			}
			else if (aComponent.equals(address3))
			{
				return address2;
			}
			else if (aComponent.equals(address4))
			{
				return address3;
			}
			else if (aComponent.equals(phoneNumber))
			{
				return address4;
			}
			else if (aComponent.equals(faxNumber))
			{
				return phoneNumber;
			}
			else if (aComponent.equals(mailAddress))
			{
				return faxNumber;
			}
			else if (aComponent.equals(cutoffDay))
			{
				return mailAddress;
			}
			else if (aComponent.equals(paymentClass))
			{
				return cutoffDay;
			}
			else if (aComponent.equals(paymentDay))
			{
				return paymentClass;
			}
			
			return supplierNo;
		}
		
		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer êÊì™ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return supplierNo;
		}
		
		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer aContainer - ç≈å„ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return mailAddress;
		}
		
		/**
		 * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
		 * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return supplierNo;
		}
		
		/**
		 * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * show() Ç‹ÇΩÇÕ setVisible(true) ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA
		 * èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
		 * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA
		 * Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
		 * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
		 * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
		 */
		public Component getInitialComponent(Window window)
		{
			return supplierNo;
		}
		
		private Component getSelectedPurchaseDivision()
		{
			if(trustPurchase.isSelected())
			{
				return	trustPurchase;
			}
			else
			{
				return	cashPurchase;
			}
		}
	}
	
	/**
	 * ï™óﬁÇï\é¶Ç∑ÇÈÅB
	 */
	private void showItemClasses()
	{
		SwingUtil.clearTable(itemClass);
		
		DefaultTableModel	model	=	(DefaultTableModel)itemClass.getModel();
		
		for(MstItemClass ic : msim.getItemClasses())
		{
			Vector<Object>	temp	=	new Vector<Object>();
			temp.add(ic);
			model.addRow(temp);
		}
	}
	
	/**
	 * è§ïiÇëIëÅiâèúÅjÇ∑ÇÈÅB
	 * @param isSelect trueÅFëIëÅAfalseÅFâèú
	 */
	public void moveItem(boolean isSelect)
	{
		Integer		classIndex	=	itemClass.getSelectedRow();
		JTable		fromTable	=	(isSelect ? referenceItems : selectItems);
		
		for(Integer i = fromTable.getSelectedRowCount() - 1; 0 <= i; i --)
		{
			msim.moveSupplierItem(isSelect, classIndex, fromTable.getSelectedRows()[i]);
		}
		
		msim.sort(isSelect, classIndex);
		
		this.showItems();
	}
	
	/**
	 * è§ïiÇëSÇƒëIëÅiâèúÅjÇ∑ÇÈÅB
	 * @param isSelect trueÅFëIëÅAfalseÅFâèú
	 */
	public void moveAllItem(boolean isSelect)
	{
		Integer		classIndex	=	itemClass.getSelectedRow();
		JTable		fromTable	=	(isSelect ? referenceItems : selectItems);
		
		msim.moveAllSupplierItem(isSelect, classIndex);
		
		this.showItems();
	}
	
	/**
	 * édì¸ÇÍâøäiÇ™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
	 */
	private void changeCostPriceValue()
	{
		int	row		=	selectItems.getEditingRow();
		int	col		=	selectItems.getEditingColumn();
		
		if(row < 0 || col < 0)	return;
		
		Integer val = (Integer) selectItems.getValueAt(row, col);
		
		List<MstSupplierItem> list = msim.getSelected().get(itemClass.getSelectedRow());
		int idx = MstSupplierItemManager.convertIndex(list, msm.getCurrentSupplier(), row);
		
		MstSupplierItem msi = list.get(idx);
                //IVS_TMTrong start add 2015/09/24 New request #42801
		//msi.setCostPrice(Integer.parseInt(getNonTaxOffPrice(val).toString()));
                msi.setCostPrice(val);
                //IVS_TMTrong end add 2015/09/24 New request #42801
                
                //IVS_TMTrong start add 2015/09/21 New request #42801
                selectItems.setValueAt(getNonTaxOfPrice(val), row, 4);
                //IVS_TMTrong end add 2015/09/21 New request #42801
	}
        
        //IVS_TMTrong start add 2015/09/21 New request #42801
        private Long getNonTaxOfPrice(Integer costprice)
	{
		Long	priceValue		=	0l;
		Long	taxOffValue		=	0l;
		Double temptaxOffValue ;
		if(costprice.toString().replace(",", "").matches("[0-9]+"))
		{
			priceValue	=	Long.parseLong(costprice.toString().replace(",", ""));
		}
                temptaxOffValue	=	(priceValue / (1 + SystemInfo.getTaxRate(SystemInfo.getSystemDate())));
                BigDecimal a = new BigDecimal(temptaxOffValue);
                a = a.setScale(3, RoundingMode.HALF_UP);
                taxOffValue = ((Double)Math.ceil(a.doubleValue())).longValue();
		
		return taxOffValue;
	}
        //IVS_TMTrong end add 2015/09/21 New request #42801  
}
