/*
 * MstSupplierPanel.java
 *
 * Created on 2007/04/02, 15:21
 */

package com.geobeck.sosia.pos.basicinfo.commodity;

import java.awt.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.search.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.master.product.*;
import com.geobeck.sosia.pos.master.commodity.*;

/**
 *
 * @author  katagiri
 */
public class MstSupplierPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	
	/** Creates new form MstSupplierPanel */
	public MstSupplierPanel()
	{
		initComponents();
		this.init();
	}
	
	public MstSupplierPanel(boolean isShowPurchasButton)
	{
		this();
		purchaseButton.setVisible(isShowPurchasButton);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        purchaseDivision = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        supplierNo = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)supplierNo.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        supplierNoLabel = new javax.swing.JLabel();
        supplierName = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel11 = new javax.swing.JLabel();
        trustPurchase = new javax.swing.JRadioButton();
        cashPurchase = new javax.swing.JRadioButton();
        supplierListScrollPane = new javax.swing.JScrollPane();
        supplierList = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        purchaseButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        phoneNumber = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)phoneNumber.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.PHONE_NUMBER));
        faxNumber = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)faxNumber.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.PHONE_NUMBER));
        mailAddress = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)mailAddress.getDocument()).setDocumentFilter(
            new CustomFilter(64, CustomFilter.MAIL_ADDRESS));
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        address4 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address4.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        address3 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address3.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        address2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address2.getDocument()).setDocumentFilter(
            new CustomFilter(64));
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        address1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address1.getDocument()).setDocumentFilter(
            new CustomFilter(16));
        postalCode = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createPostalCodeFormatter());
        jLabel3 = new javax.swing.JLabel();
        searchAddressButton = new javax.swing.JButton();

        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        jPanel1.setOpaque(false);
        jLabel2.setText("\u4ed5\u5165\u5148\u540d");

        supplierNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        supplierNo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        supplierNoLabel.setText("\u4ed5\u5165\u5148No.");

        supplierName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        supplierName.setInputKanji(true);

        jLabel11.setText("\u4ed5\u5165\u533a\u5206");

        purchaseDivision.add(trustPurchase);
        trustPurchase.setSelected(true);
        trustPurchase.setText("\u639b\u4ed5\u5165");
        trustPurchase.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        trustPurchase.setMargin(new java.awt.Insets(0, 0, 0, 0));
        trustPurchase.setOpaque(false);

        purchaseDivision.add(cashPurchase);
        cashPurchase.setText("\u73fe\u91d1\u4ed5\u5165");
        cashPurchase.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cashPurchase.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cashPurchase.setOpaque(false);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(supplierNoLabel)
                    .add(jLabel11))
                .add(30, 30, 30)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(trustPurchase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cashPurchase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(124, 124, 124))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(supplierName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(supplierNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap()))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(supplierNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(supplierNoLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(supplierName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(trustPurchase)
                    .add(cashPurchase))
                .add(108, 108, 108))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {supplierName, supplierNo}, org.jdesktop.layout.GroupLayout.VERTICAL);

        supplierList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "仕入先No.", "仕入先名", "仕入区分", "郵便番号", "住所", "電話番号", "FAX番号", "メールアドレス"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        supplierList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        supplierList.setSelectionForeground(new java.awt.Color(0, 0, 0));
        supplierList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        supplierList.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(supplierList, SystemInfo.getTableHeaderRenderer());
        supplierList.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(supplierList);
        supplierList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                supplierListKeyReleased(evt);
            }
        });
        supplierList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                supplierListMouseReleased(evt);
            }
        });

        supplierListScrollPane.setViewportView(supplierList);

        jPanel2.setOpaque(false);
        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setContentAreaFilled(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setContentAreaFilled(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        clearButton.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg"));
        clearButton.setBorderPainted(false);
        clearButton.setContentAreaFilled(false);
        clearButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg"));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        purchaseButton.setText("\u4ed5\u5165\u5546\u54c1\u767b\u9332");
        purchaseButton.setEnabled(false);
        purchaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(clearButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, purchaseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(clearButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(purchaseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setOpaque(false);
        jLabel5.setText("\u96fb\u8a71\u756a\u53f7");

        phoneNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        faxNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        faxNumber.setColumns(20);

        mailAddress.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        mailAddress.setColumns(64);

        jLabel7.setText("\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9");

        jLabel6.setText("FAX\u756a\u53f7");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel5)
                    .add(jLabel6)
                    .add(jLabel7))
                .add(7, 7, 7)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(phoneNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(faxNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mailAddress, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(phoneNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(faxNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(mailAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel4.setOpaque(false);
        address4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address4.setColumns(128);
        address4.setInputKanji(true);

        jLabel10.setText("\u30de\u30f3\u30b7\u30e7\u30f3\u540d\u7b49");

        jLabel9.setText("\u753a\u57df\u30fb\u756a\u5730");

        address3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address3.setInputKanji(true);

        address2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address2.setInputKanji(true);

        jLabel8.setText("\u5e02\u533a\u753a\u6751");

        jLabel4.setText("\u90fd\u9053\u5e9c\u770c");

        address1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address1.setInputKanji(true);

        postalCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        postalCode.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        postalCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                postalCodeFocusLost(evt);
            }
        });

        jLabel3.setText("\u90f5\u4fbf\u756a\u53f7");

        searchAddressButton.setIcon(SystemInfo.getImageIcon("/button/search/search_address_off.jpg"));
        searchAddressButton.setBorderPainted(false);
        searchAddressButton.setContentAreaFilled(false);
        searchAddressButton.setFocusable(false);
        searchAddressButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_address_on.jpg"));
        searchAddressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAddressButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3)
                    .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(address4, 0, 0, Short.MAX_VALUE)
                    .add(address3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                    .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel9)
                    .add(address3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(address4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(supplierListScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(supplierListScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void purchaseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_purchaseButtonActionPerformed
	{//GEN-HEADEREND:event_purchaseButtonActionPerformed
		SystemInfo.getLogger().log(Level.INFO, "仕入れ商品登録");
		MstPurchasePanel		mpp	=	new MstPurchasePanel(msm.getCurrentSupplier());
		mpp.setOpener(this);
		this.setVisible(false);
		parentFrame.changeContents(mpp);
	}//GEN-LAST:event_purchaseButtonActionPerformed

	private void supplierListMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_supplierListMouseReleased
	{//GEN-HEADEREND:event_supplierListMouseReleased
		this.changeCurrentData();
	}//GEN-LAST:event_supplierListMouseReleased

	private void supplierListKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_supplierListKeyReleased
	{//GEN-HEADEREND:event_supplierListKeyReleased
		this.changeCurrentData();
	}//GEN-LAST:event_supplierListKeyReleased

	private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
	{//GEN-HEADEREND:event_clearButtonActionPerformed
		this.clear();
	}//GEN-LAST:event_clearButtonActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		if(this.checkInput())
		{
			this.regist(false);
		}
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
		if(this.checkInput())
		{
			this.regist(true);
		}
	}//GEN-LAST:event_addButtonActionPerformed

	private void searchAddressButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchAddressButtonActionPerformed
	{//GEN-HEADEREND:event_searchAddressButtonActionPerformed
		SearchAddressDialog		sa	=	new SearchAddressDialog(parentFrame, true);
		sa.setVisible(true);
		
		if(!sa.getSelectedPrefecture().equals(""))
		{
			postalCode.setText(sa.getSelectedPostalCode());
			address1.setText(sa.getSelectedPrefecture());
			address2.setText(sa.getSelectedCity());
			address3.setText(sa.getSelectedTown().replaceAll("（.+", ""));
		}
		
		sa = null;
	}//GEN-LAST:event_searchAddressButtonActionPerformed

	private void postalCodeFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_postalCodeFocusLost
	{//GEN-HEADEREND:event_postalCodeFocusLost
		String		temp	=	postalCode.getText().replaceAll("[-_]", "");
		
		//郵便番号が入録されていない場合
		if(temp.equals("") || temp.length() != 7)
		{
			address1.setText("");
			address2.setText("");
			address3.setText("");
		}
		else
		{
			AddressUtil		au	=	new	AddressUtil();
			
			au.setPostalCode(temp);
			
			try
			{
				ConnectionWrapper	con	=	SystemInfo.getBaseConnection();
				
				//住所が取得できた場合
				if(au.getDataByPostalCode(con))
				{
					address1.setText(au.getPrefectureName());
					address2.setText(au.getCityName());
					address3.setText(au.getTownName().replaceAll("（.+", ""));
				}
				//住所が取得できなかった場合住所をクリア
				else
				{
					address1.setText("");
					address2.setText("");
					address3.setText("");
				}
			}
			catch(SQLException e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
	}//GEN-LAST:event_postalCodeFocusLost
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private com.geobeck.swing.JFormattedTextFieldEx address1;
    private com.geobeck.swing.JFormattedTextFieldEx address2;
    private com.geobeck.swing.JFormattedTextFieldEx address3;
    private com.geobeck.swing.JFormattedTextFieldEx address4;
    private javax.swing.JRadioButton cashPurchase;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx faxNumber;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private com.geobeck.swing.JFormattedTextFieldEx mailAddress;
    private com.geobeck.swing.JFormattedTextFieldEx phoneNumber;
    private com.geobeck.swing.JFormattedTextFieldEx postalCode;
    private javax.swing.JButton purchaseButton;
    private javax.swing.ButtonGroup purchaseDivision;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton searchAddressButton;
    private javax.swing.JTable supplierList;
    private javax.swing.JScrollPane supplierListScrollPane;
    private com.geobeck.swing.JFormattedTextFieldEx supplierName;
    private com.geobeck.swing.JFormattedTextFieldEx supplierNo;
    private javax.swing.JLabel supplierNoLabel;
    private javax.swing.JRadioButton trustPurchase;
    // End of variables declaration//GEN-END:variables
	
	private	MstSupplierManager	msm		=	null;
	
	/**
	 * 商品マスタ登録画面用FocusTraversalPolicy
	 */
	private	MstSupplierFocusTraversalPolicy	ftp	=
			new MstSupplierFocusTraversalPolicy();
	
	/**
	 * 商品マスタ登録画面用FocusTraversalPolicyを取得する。
	 * @return 商品マスタ登録画面用FocusTraversalPolicy
	 */
	public MstSupplierFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	private void init()
	{
		this.setSize(833, 691);
		this.setPath("基本設定 >> 商品マスタ");
		this.setTitle("仕入先登録");
		msm	=	new MstSupplierManager();
		this.addListener();
		this.initTableColumnWidth();
		
		this.showList();
	}
	
	private void addListener()
	{
		supplierNo.addKeyListener(SystemInfo.getMoveNextField());
		supplierNo.addFocusListener(SystemInfo.getSelectText());
		supplierName.addKeyListener(SystemInfo.getMoveNextField());
		supplierName.addFocusListener(SystemInfo.getSelectText());
		trustPurchase.addKeyListener(SystemInfo.getMoveNextField());
		cashPurchase.addKeyListener(SystemInfo.getMoveNextField());
		postalCode.addKeyListener(SystemInfo.getMoveNextField());
		postalCode.addFocusListener(SystemInfo.getSelectText());
		address1.addKeyListener(SystemInfo.getMoveNextField());
		address1.addFocusListener(SystemInfo.getSelectText());
		address2.addKeyListener(SystemInfo.getMoveNextField());
		address2.addFocusListener(SystemInfo.getSelectText());
		address3.addKeyListener(SystemInfo.getMoveNextField());
		address3.addFocusListener(SystemInfo.getSelectText());
		address4.addKeyListener(SystemInfo.getMoveNextField());
		address4.addFocusListener(SystemInfo.getSelectText());
		phoneNumber.addKeyListener(SystemInfo.getMoveNextField());
		phoneNumber.addFocusListener(SystemInfo.getSelectText());
		faxNumber.addKeyListener(SystemInfo.getMoveNextField());
		faxNumber.addFocusListener(SystemInfo.getSelectText());
		mailAddress.addKeyListener(SystemInfo.getMoveNextField());
		mailAddress.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		supplierList.getColumnModel().getColumn(0).setPreferredWidth(60);
		supplierList.getColumnModel().getColumn(1).setPreferredWidth(140);
		supplierList.getColumnModel().getColumn(2).setPreferredWidth(60);
		supplierList.getColumnModel().getColumn(3).setPreferredWidth(60);
		supplierList.getColumnModel().getColumn(4).setPreferredWidth(170);
		supplierList.getColumnModel().getColumn(5).setPreferredWidth(100);
		supplierList.getColumnModel().getColumn(6).setPreferredWidth(100);
		supplierList.getColumnModel().getColumn(7).setPreferredWidth(100);
	}
	
	private void showList()
	{
		msm.load();
		
		SwingUtil.clearTable(supplierList);
		
		DefaultTableModel	model	=	(DefaultTableModel)supplierList.getModel();
		
		for(MstSupplier ms : msm)
		{
			Vector<Object>	temp	=	new Vector<Object>();
			
			temp.add(ms.getSupplierNo());
			temp.add(ms.getSupplierName());
			temp.add(ms.getPurchaseDivisionName());
			temp.add(ms.getPostalCodeWithHyphen());
			temp.add(ms.getFullAddress());
			temp.add(ms.getPhoneNumber());
			temp.add(ms.getFaxNumber());
			temp.add(ms.getMailAddress());
			
			model.addRow(temp);
		}
	}
	
	private void clear()
	{
		if(0 < supplierList.getRowCount())
		{
			supplierList.removeRowSelectionInterval(0, supplierList.getRowCount() - 1);
		}
		
		this.changeCurrentData();
	}
	
	private void changeCurrentData()
	{
		int	index	=	supplierList.getSelectedRow();
		
		if(0 <= index)
		{
			msm.setCurrentSupplier(msm.get(index));
		}
		else
		{
			msm.setCurrentSupplier(new MstSupplier());
		}
		
		this.showCurrentData();
	}
	
	private void showCurrentData()
	{
		MstSupplier		cs	=	msm.getCurrentSupplier();
		
		supplierNo.setText(cs.getSupplierNoString());
		supplierName.setText(cs.getSupplierName());
		this.setPurchaseDivision(cs.getPurchaseDivision());
		postalCode.setText(cs.getPostalCode());
		address1.setText(cs.getAddress(0));
		address2.setText(cs.getAddress(1));
		address3.setText(cs.getAddress(2));
		address4.setText(cs.getAddress(3));
		phoneNumber.setText(cs.getPhoneNumber());
		faxNumber.setText(cs.getFaxNumber());
		mailAddress.setText(cs.getMailAddress());
		
		this.changeButtonEnabled(cs.getSupplierID() != null);
	}
	
	private void setPurchaseDivision(Integer purchaseDivision)
	{
		if(purchaseDivision == 1)
		{
			cashPurchase.setSelected(true);
		}
		else
		{
			trustPurchase.setSelected(true);
		}
	}
	
	private void changeButtonEnabled(boolean enabled)
	{
		renewButton.setEnabled(enabled);
		deleteButton.setEnabled(enabled);
		purchaseButton.setEnabled(enabled);
	}
	
	private boolean checkInput()
	{
		if(supplierNo.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "仕入先No."),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			supplierNo.requestFocusInWindow();
			return	false;
		}
		
		if(supplierName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "仕入先名"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			supplierName.requestFocusInWindow();
			return	false;
		}
		
		this.setCurrentData();
		
		if(!msm.checkSupplierNo())
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_SAME_NO_EXIST, "仕入先No."),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			supplierNo.requestFocusInWindow();
			return	false;
		}
		
		return	true;
	}
	
	private void setCurrentData()
	{
		MstSupplier		cs	=	msm.getCurrentSupplier();
		
		cs.setSupplierNo(Integer.parseInt(supplierNo.getText()));
		cs.setSupplierName(supplierName.getText());
		cs.setPurchaseDivision(this.getPurchaseDivision());
		cs.setPostalCode(this.getPostalCode());
		cs.setAddress(0, address1.getText());
		cs.setAddress(1, address2.getText());
		cs.setAddress(2, address3.getText());
		cs.setAddress(3, address4.getText());
		cs.setPhoneNumber(phoneNumber.getText());
		cs.setFaxNumber(faxNumber.getText());
		cs.setMailAddress(mailAddress.getText());
	}
	
	private Integer getPurchaseDivision()
	{
		if(cashPurchase.isSelected())
		{
			return	1;
		}
		else
		{
			return	0;
		}
	}
	
	/**
	 * 入力されている郵便番号を取得する。
	 * @return 入力されている郵便番号
	 */
	private String getPostalCode()
	{
		return	postalCode.getText().replaceAll("[-_]", "");
	}
	
	private void regist(boolean isAdd)
	{
		if(isAdd)
		{
			msm.getCurrentSupplier().setSupplierID(null);
		}
		
		if(msm.regist())
		{
			this.showList();
			this.clear();
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
					this.getTitle(),
					JOptionPane.INFORMATION_MESSAGE);
		}
		else
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "仕入先"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
		}
	}
	
	private void delete()
	{
		//確認メッセージ
		if(MessageDialog.showYesNoDialog(this,
					MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE,
						msm.getCurrentSupplier().getSupplierName()),
					this.getTitle(),
					JOptionPane.WARNING_MESSAGE) == JOptionPane.NO_OPTION)
		{
			return;
		}
		
		if(msm.delete())
		{
			this.showList();
			this.clear();
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.INFO_DELETE_SUCCESS),
					this.getTitle(),
					JOptionPane.INFORMATION_MESSAGE);
		}
		else
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED),
					this.getTitle(),
					JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	/**
	 * 商品マスタ登録画面用FocusTraversalPolicy
	 */
	private class MstSupplierFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(supplierNo))
			{
				return supplierName;
			}
			else if (aComponent.equals(supplierName))
			{
				return this.getSelectedPurchaseDivision();
			}
			else if (aComponent.equals(trustPurchase))
			{
				return postalCode;
			}
			else if (aComponent.equals(cashPurchase))
			{
				return postalCode;
			}
			else if (aComponent.equals(postalCode))
			{
				return address1;
			}
			else if (aComponent.equals(address1))
			{
				return address2;
			}
			else if (aComponent.equals(address2))
			{
				return address3;
			}
			else if (aComponent.equals(address3))
			{
				return address4;
			}
			else if (aComponent.equals(address4))
			{
				return phoneNumber;
			}
			else if (aComponent.equals(phoneNumber))
			{
				return faxNumber;
			}
			else if (aComponent.equals(faxNumber))
			{
				return mailAddress;
			}
			else if (aComponent.equals(mailAddress))
			{
				return supplierNo;
			}
			
			return supplierNo;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(supplierNo))
			{
				return mailAddress;
			}
			else if (aComponent.equals(supplierName))
			{
				return supplierNo;
			}
			else if (aComponent.equals(trustPurchase))
			{
				return supplierName;
			}
			else if (aComponent.equals(cashPurchase))
			{
				return supplierName;
			}
			else if (aComponent.equals(postalCode))
			{
				return this.getSelectedPurchaseDivision();
			}
			else if (aComponent.equals(address1))
			{
				return postalCode;
			}
			else if (aComponent.equals(address2))
			{
				return address1;
			}
			else if (aComponent.equals(address3))
			{
				return address2;
			}
			else if (aComponent.equals(address4))
			{
				return address3;
			}
			else if (aComponent.equals(phoneNumber))
			{
				return address4;
			}
			else if (aComponent.equals(faxNumber))
			{
				return phoneNumber;
			}
			else if (aComponent.equals(mailAddress))
			{
				return faxNumber;
			}
			
			return supplierNo;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return supplierNo;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return mailAddress;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return supplierNo;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return supplierNo;
		}
		
		private Component getSelectedPurchaseDivision()
		{
			if(trustPurchase.isSelected())
			{
				return	trustPurchase;
			}
			else
			{
				return	cashPurchase;
			}
		}
	}
}
