/*
 * MstItemPanel.java
 *
 * Created on 2006/10/20, 10:55
 */

package com.geobeck.sosia.pos.basicinfo.product;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.logging.*;

import com.geobeck.barcode.*;
import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.master.product.*;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.event.HierarchyEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;


/**
 *
 * @author  katagiri
 */
public class MstItemPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
		implements BarcodeListener
{
	private MstItemClasses mics = new MstItemClasses();
	private MstItemClass mic = new MstItemClass();
	private Integer selIndex = -1;
	private MstPlaces mps = new MstPlaces();
        boolean flgPrepra = false;
    //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
    private boolean isLoadDisplay= false;
    //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
	/** Creates new form MstItemPanel */
	public MstItemPanel()
	{
		super();
		initComponents();
		addMouseCursorChange();
		this.setSize(700, 680);
		this.setPath("基本設定 >> 商品マスタ");
		this.setTitle("商品登録");
		this.setListener();
		this.init();
                
                // JANコードを非表示にする
                if (!SystemInfo.isUseBarcodeReader()) {
                    janCodeLabel.setVisible(false);
                    janCode.setVisible(false);
                }
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        itemUseDivisionGroup = new javax.swing.ButtonGroup();
        productNoLabel = new javax.swing.JLabel();
        itemScrollPane = new javax.swing.JScrollPane();
        item = new javax.swing.JTable();
        price = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)price.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        priceLabel = new javax.swing.JLabel();
        itemName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)itemName.getDocument()).setDocumentFilter(
            new CustomFilter(30));
        itemNo = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)itemNo.getDocument()).setDocumentFilter(
            new CustomFilter(15));
        displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        displaySeqLabel = new javax.swing.JLabel();
        productNameLabel = new javax.swing.JLabel();

        try
        {
            ConnectionWrapper	con	=	SystemInfo.getConnection();

            mics.load(con);

            con.close();
        }
        catch(SQLException e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        itemClass = new JComboBox(new DefaultComboBoxModel(mics.toArray())
            {
                public void setSelectedItem(Object o)
                {
                    super.setSelectedItem(o);
                }
            });
            jLabel1 = new javax.swing.JLabel();
            janCodeLabel = new javax.swing.JLabel();
            janCode = new com.geobeck.swing.JFormattedTextFieldEx();
            ((PlainDocument)janCode.getDocument()).setDocumentFilter(
                new CustomFilter(13, CustomFilter.NUMBER));
            priceLabel1 = new javax.swing.JLabel();
            useProperStock = new com.geobeck.swing.JFormattedTextFieldEx();
            ((PlainDocument)useProperStock.getDocument()).setDocumentFilter(
                new CustomFilter(9, CustomFilter.NUMERIC));
            sellProperStock = new com.geobeck.swing.JFormattedTextFieldEx();
            ((PlainDocument)sellProperStock.getDocument()).setDocumentFilter(
                new CustomFilter(9, CustomFilter.NUMERIC));
            priceLabel2 = new javax.swing.JLabel();
            taxOffPrice = new JFormattedTextFieldEx(SystemInfo.getDecimalFormatter());
            ((PlainDocument)price.getDocument()).setDocumentFilter(
                new CustomFilter(9, CustomFilter.NUMERIC));
            priceLabel3 = new javax.swing.JLabel();
            placeLabel = new javax.swing.JLabel();
            addButton = new javax.swing.JButton();
            renewButton = new javax.swing.JButton();
            deleteButton = new javax.swing.JButton();
            itemUseDivision1Radio = new javax.swing.JRadioButton();
            itemUseDivision2Radio = new javax.swing.JRadioButton();
            itemUseDivision3Radio = new javax.swing.JRadioButton();
            priceLabel5 = new javax.swing.JLabel();

            try
            {
                ConnectionWrapper	con	=	SystemInfo.getConnection();

                mps.load(con);

                con.close();

                mps.add(0, new MstPlace());
            }
            catch(SQLException e)
            {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            place = new JComboBox(new DefaultComboBoxModel(mps.toArray())
                {
                    public void setSelectedItem(Object o)
                    {
                        super.setSelectedItem(o);
                    }
                });
                lblPrepaidPrice = new javax.swing.JLabel();
                txtPrepaidPrice = new javax.swing.JTextField();
                chkPrepaId = new javax.swing.JCheckBox();

                setFocusCycleRoot(true);
                setFocusTraversalPolicyProvider(true);
                addHierarchyListener(new java.awt.event.HierarchyListener() {
                    public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                        formHierarchyChanged(evt);
                    }
                });

                productNoLabel.setText("商品No.");

                itemScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

                item.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null, null, null, null, null}
                    },
                    new String [] {
                        "商品No.", "商品名", "価格(税込)", "業務適正在庫", "店販適正在庫", "<html>パスブック<br>利用可能額", "パスブック", "置場", "表示順"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false, true, false, false, false
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                item.setSelectionBackground(new java.awt.Color(220, 220, 220));
                item.setSelectionForeground(new java.awt.Color(0, 0, 0));
                item.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                item.getTableHeader().setReorderingAllowed(false);
                SwingUtil.setJTableHeaderRenderer(item, SystemInfo.getTableHeaderRenderer());
                item.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
                this.initTableColumnWidth();
                SelectTableCellRenderer.setSelectTableCellRenderer(item);
                item.setDefaultRenderer(String.class, new TableCellAlignRenderer());
                SwingUtil.setJTableHeaderRenderer(item, SystemInfo.getTableHeaderRenderer());
                item.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseReleased(java.awt.event.MouseEvent evt) {
                        itemMouseReleased(evt);
                    }
                });
                item.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        itemKeyReleased(evt);
                    }
                });
                itemScrollPane.setViewportView(item);

                price.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                price.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                price.addCaretListener(new javax.swing.event.CaretListener() {
                    public void caretUpdate(javax.swing.event.CaretEvent evt) {
                        priceCaretUpdate(evt);
                    }
                });

                priceLabel.setText("価格（税込）");

                itemName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                itemName.setColumns(30);
                itemName.setInputKanji(true);

                itemNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                itemNo.setColumns(15);

                displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                displaySeq.addFocusListener(new java.awt.event.FocusAdapter() {
                    public void focusLost(java.awt.event.FocusEvent evt) {
                        displaySeqFocusLost(evt);
                    }
                });

                displaySeqLabel.setText("挿入位置");

                productNameLabel.setText("商品名");

                itemClass.setMaximumRowCount(12);
                itemClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                itemClass.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        itemClassActionPerformed(evt);
                    }
                });

                jLabel1.setText("分類名");

                janCodeLabel.setText("JANコード");

                janCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                janCode.setColumns(15);

                priceLabel1.setText("業務適正在庫");

                useProperStock.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                useProperStock.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

                sellProperStock.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                sellProperStock.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

                priceLabel2.setText("店販適正在庫");

                taxOffPrice.setEditable(false);
                taxOffPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
                taxOffPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

                priceLabel3.setText("価格（税抜）");

                placeLabel.setText("置場");

                addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
                addButton.setBorderPainted(false);
                addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
                addButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        addButtonActionPerformed(evt);
                    }
                });

                renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
                renewButton.setBorderPainted(false);
                renewButton.setEnabled(false);
                renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
                renewButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        renewButtonActionPerformed(evt);
                    }
                });

                deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
                deleteButton.setBorderPainted(false);
                deleteButton.setEnabled(false);
                deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
                deleteButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        deleteButtonActionPerformed(evt);
                    }
                });

                itemUseDivisionGroup.add(itemUseDivision1Radio);
                itemUseDivision1Radio.setText("店販のみ");
                itemUseDivision1Radio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                itemUseDivision1Radio.setMargin(new java.awt.Insets(0, 0, 0, 0));
                itemUseDivision1Radio.setOpaque(false);

                itemUseDivisionGroup.add(itemUseDivision2Radio);
                itemUseDivision2Radio.setText("業務のみ");
                itemUseDivision2Radio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                itemUseDivision2Radio.setMargin(new java.awt.Insets(0, 0, 0, 0));
                itemUseDivision2Radio.setOpaque(false);

                itemUseDivisionGroup.add(itemUseDivision3Radio);
                itemUseDivision3Radio.setSelected(true);
                itemUseDivision3Radio.setText("業務＋店販");
                itemUseDivision3Radio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                itemUseDivision3Radio.setMargin(new java.awt.Insets(0, 0, 0, 0));
                itemUseDivision3Radio.setOpaque(false);

                priceLabel5.setText("使用区分");

                place.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

                lblPrepaidPrice.setText("パスブック利用可能額");

                ((PlainDocument)txtPrepaidPrice.getDocument()).setDocumentFilter(
                    new CustomFilter(9, CustomFilter.NUMBER));
                txtPrepaidPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

                txtPrepaidPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

                chkPrepaId.setText("パスブック");
                chkPrepaId.setOpaque(false);

                org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, itemScrollPane)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(productNoLabel)
                                    .add(jLabel1)
                                    .add(janCodeLabel)
                                    .add(productNameLabel)
                                    .add(priceLabel)
                                    .add(priceLabel5))
                                .add(19, 19, 19)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, itemClass, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, itemName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                                    .add(janCode, 0, 1, Short.MAX_VALUE)
                                    .add(itemNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                                .add(itemUseDivision1Radio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(itemUseDivision2Radio, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                                .add(price, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(priceLabel3)))
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(layout.createSequentialGroup()
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(itemUseDivision3Radio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                    .add(taxOffPrice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                            .add(layout.createSequentialGroup()
                                                .add(24, 24, 24)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(chkPrepaId)
                                                    .add(layout.createSequentialGroup()
                                                        .add(lblPrepaidPrice)
                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                                        .add(txtPrepaidPrice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, priceLabel1)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(priceLabel2)
                                    .add(placeLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(useProperStock, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(sellProperStock, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(place, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(14, 14, 14)
                                        .add(displaySeqLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(46, 46, 46)
                                        .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())
                );

                layout.linkSize(new java.awt.Component[] {itemNo, janCode, price, sellProperStock, useProperStock}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

                layout.setVerticalGroup(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(itemClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(productNoLabel)
                            .add(itemNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(janCodeLabel)
                            .add(janCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(productNameLabel)
                            .add(itemName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(priceLabel)
                                .add(price, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(taxOffPrice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(priceLabel3)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(priceLabel5)
                            .add(itemUseDivision1Radio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(itemUseDivision2Radio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(itemUseDivision3Radio, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(priceLabel1)
                            .add(useProperStock, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblPrepaidPrice, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(txtPrepaidPrice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(sellProperStock, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(priceLabel2)
                                    .add(chkPrepaId))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(placeLabel)
                                    .add(displaySeqLabel)
                                    .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(place, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(7, 7, 7)
                        .add(itemScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                        .addContainerGap())
                );
            }// </editor-fold>//GEN-END:initComponents

        private void displaySeqFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_displaySeqFocusLost
                if(! CheckUtil.isNumber(displaySeq.getText()))                                                                               
                        displaySeq.setText("");                        
        }//GEN-LAST:event_displaySeqFocusLost

	private void priceCaretUpdate(javax.swing.event.CaretEvent evt)//GEN-FIRST:event_priceCaretUpdate
	{//GEN-HEADEREND:event_priceCaretUpdate
		this.showTaxOffPrice();
	}//GEN-LAST:event_priceCaretUpdate

	private void itemClassActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemClassActionPerformed
	{//GEN-HEADEREND:event_itemClassActionPerformed
		refresh();
	}//GEN-LAST:event_itemClassActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		if(this.delete())
		{
			this.refresh();
		}
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
            if (this.checkInput()) {
                if (this.regist(false)) {
                    this.refresh();
                } else {
                    MessageDialog.showMessageDialog(
                        this,
                        MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "商品"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                }
            }
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
            if (this.checkInput()) {
                if (this.regist(true)) {
                    this.refresh();
                } else {
                    MessageDialog.showMessageDialog(
                        this,
                        MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "商品"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                }
            }
	}//GEN-LAST:event_addButtonActionPerformed

	private void itemMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_itemMouseReleased
	{//GEN-HEADEREND:event_itemMouseReleased
		this.changeCurrentData();
	}//GEN-LAST:event_itemMouseReleased

	private void itemKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_itemKeyReleased
	{//GEN-HEADEREND:event_itemKeyReleased
		this.changeCurrentData();
	}//GEN-LAST:event_itemKeyReleased

    private void formHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formHierarchyChanged
        //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す  
        if ((evt.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {
            if (!evt.getComponent().isDisplayable() && isLoadDisplay) {
                SystemInfo.MessageDialogGB(this, this.getTitle());
            }
        }
        //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
    }//GEN-LAST:event_formHierarchyChanged
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JCheckBox chkPrepaId;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private javax.swing.JTable item;
    private javax.swing.JComboBox itemClass;
    private com.geobeck.swing.JFormattedTextFieldEx itemName;
    private com.geobeck.swing.JFormattedTextFieldEx itemNo;
    private javax.swing.JScrollPane itemScrollPane;
    private javax.swing.JRadioButton itemUseDivision1Radio;
    private javax.swing.JRadioButton itemUseDivision2Radio;
    private javax.swing.JRadioButton itemUseDivision3Radio;
    private javax.swing.ButtonGroup itemUseDivisionGroup;
    private javax.swing.JLabel jLabel1;
    private com.geobeck.swing.JFormattedTextFieldEx janCode;
    private javax.swing.JLabel janCodeLabel;
    private javax.swing.JLabel lblPrepaidPrice;
    private javax.swing.JComboBox place;
    private javax.swing.JLabel placeLabel;
    private com.geobeck.swing.JFormattedTextFieldEx price;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel priceLabel1;
    private javax.swing.JLabel priceLabel2;
    private javax.swing.JLabel priceLabel3;
    private javax.swing.JLabel priceLabel5;
    private javax.swing.JLabel productNameLabel;
    private javax.swing.JLabel productNoLabel;
    private javax.swing.JButton renewButton;
    private com.geobeck.swing.JFormattedTextFieldEx sellProperStock;
    private com.geobeck.swing.JFormattedTextFieldEx taxOffPrice;
    private javax.swing.JTextField txtPrepaidPrice;
    private com.geobeck.swing.JFormattedTextFieldEx useProperStock;
    // End of variables declaration//GEN-END:variables

	private String tmpItemNo = "";
    
	/**
	 * 商品マスタ登録画面用FocusTraversalPolicy
	 */
	private	MstItemFocusTraversalPolicy	ftp	=
			new MstItemFocusTraversalPolicy();
	
	/**
	 * 商品マスタ登録画面用FocusTraversalPolicyを取得する。
	 * @return 商品マスタ登録画面用FocusTraversalPolicy
	 */
    @Override
	public FocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(addButton);
		SystemInfo.addMouseCursorChange(renewButton);
		SystemInfo.addMouseCursorChange(deleteButton);
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
                itemClass.addKeyListener(SystemInfo.getMoveNextField());
                itemNo.addKeyListener(SystemInfo.getMoveNextField());
                itemNo.addFocusListener(SystemInfo.getSelectText());
                janCode.addKeyListener(SystemInfo.getMoveNextField());
                janCode.addFocusListener(SystemInfo.getSelectText());
                itemName.addKeyListener(SystemInfo.getMoveNextField());
                itemName.addFocusListener(SystemInfo.getSelectText());
                price.addKeyListener(SystemInfo.getMoveNextField());
                price.addFocusListener(SystemInfo.getSelectText());
                useProperStock.addKeyListener(SystemInfo.getMoveNextField());
                useProperStock.addFocusListener(SystemInfo.getSelectText());
                sellProperStock.addKeyListener(SystemInfo.getMoveNextField());
                sellProperStock.addFocusListener(SystemInfo.getSelectText());
                displaySeq.addKeyListener(SystemInfo.getMoveNextField());
                displaySeq.addFocusListener(SystemInfo.getSelectText());
                txtPrepaidPrice.addKeyListener(SystemInfo.getMoveNextField());          //nahoang Add.
                txtPrepaidPrice.addFocusListener(SystemInfo.getSelectText());           //nahoang Add.
                itemUseDivision1Radio.addKeyListener(SystemInfo.getMoveNextField());
                itemUseDivision2Radio.addKeyListener(SystemInfo.getMoveNextField());
                itemUseDivision3Radio.addKeyListener(SystemInfo.getMoveNextField());
                place.addKeyListener(SystemInfo.getMoveNextField());
	}
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
            /**
             * @author nahoang Add Start
             */
            if ((SystemInfo.getSetteing().isUsePrepaid()) && (SystemInfo.getDatabase().equals("pos_hair_missionf") || SystemInfo.getDatabase().equals("pos_hair_missionf_dev"))) {
                lblPrepaidPrice.setVisible(true);
                txtPrepaidPrice.setVisible(true);
                chkPrepaId.setVisible(true);
            } else {
                lblPrepaidPrice.setVisible(false);
                txtPrepaidPrice.setVisible(false);
                chkPrepaId.setVisible(false);

                TableColumn tcol1 = item.getColumnModel().getColumn(5);
                TableColumn tcol2 = item.getColumnModel().getColumn(6);

                item.getColumnModel().removeColumn(tcol1);
                item.getColumnModel().removeColumn(tcol2);
            }
            /**
             * nahoang End.
             */
            if (0 < itemClass.getItemCount()) {
                itemClass.setSelectedIndex(0);
            }

            this.refresh();
	}
	
        public boolean checkClassRegisted()
        {
                return	(0 < mics.size());
        }


        /**
         * 表示を更新する。
         */
           private void refresh() {
            if (0 <= itemClass.getSelectedIndex()) {
                mic = (MstItemClass) itemClass.getSelectedItem();

                if (mic.getPrepaClassId().equals(1)) {
                    chkPrepaId.setEnabled(false);
                    txtPrepaidPrice.setEditable(true);
                    flgPrepra = true;
                } else {

                    txtPrepaidPrice.setEditable(false);
                    chkPrepaId.setEnabled(true);
                    flgPrepra = false;
                }
                //商品マスタをデータベースから読み込む
                try {
                    ConnectionWrapper con = SystemInfo.getConnection();

                    mic.loadItem(con);
                } catch (SQLException e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
            }

            //テーブルに商品マスタデータを表示する
            this.showData();
            //入力をクリアする
            this.clear();

            itemNo.requestFocusInWindow();
    }
	
	/**
	 * 入力項目をクリアする。
	 */
	private void clear()
	{
		selIndex	=	-1;
		itemNo.setText("");
                tmpItemNo = "";
		janCode.setText("");
		itemName.setText("");
		price.setText("");
		useProperStock.setText("");
		sellProperStock.setText("");
		displaySeq.setText("");
		txtPrepaidPrice.setText("");                    //nahoang Add.
                chkPrepaId.setSelected(false);                  //nahoang Add.
                
		if(0 < item.getRowCount())
				item.removeRowSelectionInterval(0, item.getRowCount() - 1);
		
		// 使用区分
                itemUseDivision3Radio.setSelected(true);
                
		// 置場
		place.setSelectedIndex(-1);
		
		this.changeCurrentData();
	}
	
	
	/**
	 * データを表示する。
	 */
	private void showData()
	{
            SwingUtil.clearTable(item);
            DefaultTableModel model = (DefaultTableModel)item.getModel();
		
            for (MstItem mi : mic) {
                // 置場を取得
		MstPlace mp = findMstPlace(mi.getPlaceID());
                // 1行分のデータ作成
		Object[] rowData =
                    {
                        mi.getItemNo(),
                        //			mi.getJANCode(),
                        mi.getItemName(),
                        mi.getPrice(),
                        mi.getUseProperStock(),
                        mi.getSellProperStock(),
                        mi.getPrepaidPrice(),                                   //nahhoang Add.
                        mi.getPrepaidID().equals(1) ? "●" : "",                 //nahoang Add.
                        mp != null ? mp.getPlaceName() : null,                      
                        mi.getDisplaySeq()
                    };

                    model.addRow(rowData);
            }
	}
	
	/**
	 * 選択データが変更されたときの処理を行う。
	 */
	private void changeCurrentData()
	{
		int	index	=	item.getSelectedRow();
		
		if(0 <= index && index < mic.size() && index != selIndex)
		{
			selIndex	=	index;
			
			//選択されているデータを表示
			this.showCurrentData();
		}
		
		this.changeButtonEnabled(0 <= selIndex);
	}
	
	/**
	 * 選択されたデータを入力項目に表示する。
	 */
	private void showCurrentData()
	{
		MstItem	mg	=	mic.get(selIndex);
		
		itemNo.setText(mg.getItemNo());
                tmpItemNo = mg.getItemNo();
		janCode.setText(mg.getJANCode());
		itemName.setText(mg.getItemName());
		price.setText(mg.getPrice().toString());
		useProperStock.setText(mg.getUseProperStock().toString());
		sellProperStock.setText(mg.getSellProperStock().toString());
		displaySeq.setText(mg.getDisplaySeq().toString());
		txtPrepaidPrice.setText(mg.getPrepaidPrice().toString());               //nahoang Add.
                chkPrepaId.setSelected(mg.getPrepaidID().equals(1) ? true : false);     //nahoang Add.
		// 使用区分
		if (mg.getItemUseDivision() == null)
		{
			itemUseDivisionGroup.clearSelection();
		} else {
			switch (mg.getItemUseDivision().intValue())
			{
				case 1:
					itemUseDivision1Radio.setSelected(true);
					break;
				case 2:
					itemUseDivision2Radio.setSelected(true);
					break;
				case 3:
					itemUseDivision3Radio.setSelected(true);
					break;
				default:
					itemUseDivisionGroup.clearSelection();
					break;
			}
		}
		
		// 置場
		MstPlace mp = findMstPlace(mg.getPlaceID());
		if (mp == null)
		{
			place.setSelectedItem(null);
		} else {
			place.setSelectedItem(mp);
		}
		
		this.showTaxOffPrice();
	}
	
	private void showTaxOffPrice()
	{
		Long	priceValue		=	0l;
		Long	taxOffValue		=	0l;
		Double temptaxOffValue ;
		if(price.getText().replace(",", "").matches("[0-9]+"))
		{
			priceValue	=	Long.parseLong(price.getText().replace(",", ""));
		}
		//vtbphuong start edit Request #22169
		//taxOffValue	=	priceValue - SystemInfo.getTax(priceValue, SystemInfo.getSystemDate());
                temptaxOffValue	=	(priceValue / (1 + SystemInfo.getTaxRate(SystemInfo.getSystemDate())));
                BigDecimal a = new BigDecimal(temptaxOffValue);
                a = a.setScale(3, RoundingMode.HALF_UP);
                taxOffValue = ((Double)Math.ceil(a.doubleValue())).longValue();
                //vtbphuong end edit Request #22169
		
		taxOffPrice.setText(taxOffValue.toString());
	}
	
	/**
	 * ボタンのEnabledを変更する。
	 * @param enabled Enabled
	 */
	private void changeButtonEnabled(boolean enabled)
	{
		//addButton.setEnabled(!enabled);
		renewButton.setEnabled(enabled);
		deleteButton.setEnabled(enabled);
	}
	
	
	/**
	 * 入力チェックを行う。
	 * @return 入力エラーがなければtrueを返す。
	 */
	private boolean checkInput()
	{
		//商品分類
		if(itemClass.getSelectedIndex() < 0)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "商品分類"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			itemClass.requestFocusInWindow();
			return	false;
		}
		//商品コード
		if(itemNo.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "商品No."),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			itemNo.requestFocusInWindow();
			return	false;
		}
		//商品名
		if(itemName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "商品名"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			itemName.requestFocusInWindow();
			return	false;
		}
		
		//価格
		if(price.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "価格"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			price.requestFocusInWindow();
			return	false;
		}
		else
		{
			if(!CheckUtil.isNumber(price.getText()))
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "価格"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				price.requestFocusInWindow();
				return	false;
			}
		}
		
		//使用区分
		if (!(itemUseDivision1Radio.isSelected() || itemUseDivision2Radio.isSelected() || itemUseDivision3Radio.isSelected()))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "使用区分"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			itemUseDivision3Radio.requestFocusInWindow();
			return	false;
		}
		
		//業務適正在庫
		if(useProperStock.getText().equals(""))
		{
			useProperStock.setText("0");
		}
		else
		{
			if(!CheckUtil.isNumber(useProperStock.getText()))
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "業務適正在庫"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				useProperStock.requestFocusInWindow();
				return	false;
			}
		}
                            /**
                   * @author nahoang Add Start
                   * プリペイド利用可能額
                   */
                  if (txtPrepaidPrice.getText().equals("") && flgPrepra) {
                      MessageDialog.showMessageDialog(this,
                                  MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "プリペイド利用可能額が入力されていません。"),
                                  this.getTitle(),
                                  JOptionPane.ERROR_MESSAGE);
                          txtPrepaidPrice.requestFocusInWindow();
                          return false;
                  } 


                  //プリペイド
          //            if (!chkPrepaId.isSelected()) {
          //                if(chkPrepaId.isEnabled()){
          //                MessageDialog.showMessageDialog(this,
          //                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "プリペイド"),
          //                    this.getTitle(),
          //                    JOptionPane.ERROR_MESSAGE);
          //            chkPrepaId.requestFocusInWindow();
          //            return false;
          //                }
          //            }          
                  /**
                   * nahoang End.
                   */
		//店販適正在庫
		if(sellProperStock.getText().equals(""))
		{
			sellProperStock.setText("0");
		}
		else
		{
			if(!CheckUtil.isNumber(sellProperStock.getText()))
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "店販適正在庫"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				sellProperStock.requestFocusInWindow();
				return	false;
			}
		}
		
		//表示順
		if(displaySeq.getText().equals("0"))
		{
			MessageDialog.showMessageDialog(this,
					"挿入位置は 1 以上を指定してください。",
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			displaySeq.requestFocusInWindow();
			return	false;
		}
                
                
		return	true;
	}
	
	/**
	 * 選択されている商品分類ＩＤをセットする。
	 * @param itemClassID 商品分類ＩＤ
	 */
	public void setSelectedItemClassID(Integer itemClassID)
	{
		if(itemClassID == null)	return;
		
		for(MstItemClass gc : mics)
		{
			if(itemClassID == gc.getItemClassID())
			{
				itemClass.setSelectedItem(gc);
				return;
			}
		}
	}
	
	
	/**
	 * 入力されたデータを登録する。
	 * @param isAdd true - 追加処理
	 * @return true - 成功
	 */
	private boolean regist(boolean isAdd)
	{
            boolean result = false;
            MstItem mg = new MstItem();
            Integer shopID = SystemInfo.getCurrentShop().getShopID();

            if (!isAdd && 0 <= selIndex) {
                mg.setData(mic.get(selIndex));
            }

            this.setData(mg);

            ConnectionWrapper con = SystemInfo.getConnection();

            try {
                
                if ((isAdd || !itemNo.getText().equals(tmpItemNo)) && mg.isExistsByItemNo(con)) {
                    MessageDialog.showMessageDialog(
                        this,
                        MessageUtil.getMessage(MessageUtil.ERROR_SAME_NO_EXIST, "商品No."),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                    
                    itemNo.requestFocusInWindow();
                    itemNo.setText(tmpItemNo);
                    return false;
                }

                con.begin();

                if (mg.regist(con, (0 <= selIndex ? mic.get(selIndex).getDisplaySeq() : -1))) {
                    //IVS_TMTrong start edt 2015/10/21 New request #43515  
                    result = true;
                    //IVS_TMTrong end edt 2015/10/21 New request #43515  
                    if (shopID != 0) {
                        //IVS_TMTrong start add 2015/10/21 New request #43515
                        MstUseProduct mup = new MstUseProduct();
                        if(isAdd || (!isAdd && mup.isExist_Item_UseProduct(con, SystemInfo.getCurrentShop().getShopID(), 2, mg.getItemID()))){
                            mup.setShop(SystemInfo.getCurrentShop());
                            mup.setProductDivision(2);
                            mup.setProductID(mg.getItemID());
                            mup.setPrice(Long.parseLong(price.getText().replace(",", ""))); 
                            if(displaySeq.getText().equals("")){
                                //IVS_LVTu start add 2017/08/17 #21596 [gb]技術・商品・コース登録画面 挿入位置がない第1番目の登録ができない
                                if (item.getRowCount() > 0) {
                                	int maxRowIndex = item.getRowCount()-1;
                                    //IVS_TMTrong start edit 2015/10/26 New request #43566
                                    int displaySeqTemp=0;
                                    if ((SystemInfo.getSetteing().isUsePrepaid()) && (SystemInfo.getDatabase().equals("pos_hair_missionf") || SystemInfo.getDatabase().equals("pos_hair_missionf_dev"))) {
                                    	displaySeqTemp = Integer.parseInt(item.getValueAt(maxRowIndex, 8).toString());
                                    }else{
                                    displaySeqTemp = Integer.parseInt(item.getValueAt(maxRowIndex, 6).toString());   
                                	}                                     
                                    mup.setDisplay_seq(displaySeqTemp+1);
                                    //IVS_TMTrong end edit 2015/10/26 New request #43566
                                } else {
                                	mup.setDisplay_seq(1);
                                }
                                //IVS_LVTu end add 2017/08/17 #21596 [gb]技術・商品・コース登録画面 挿入位置がない第1番目の登録ができない  
                            }else{
                                mup.setDisplay_seq(Integer.valueOf(displaySeq.getText()));
                            }
                            result = mup.regist(con);
                        }
                        //IVS_TMTrong end add 2015/10/21 New request #43515   
                    } 
                    //IVS_TMTrong start edt 2015/10/21 New request #43515   
                    //else {
                    //    result = true;
                    //}
                    //IVS_TMTrong end edt 2015/10/21 New request #43515   
                }

                if (result) {
                    con.commit();
                    //IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
                    isLoadDisplay = true;
                    //IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
                } else {
                    con.rollback();
                }
                
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            return result;
	}
	
	/**
	 * 商品マスタデータからデータをセットする。
	 * @param mg 商品マスタ登録画面用FocusTraversalPolicy
	 */
	private void setData(MstItem mg)
	{
                mg.setItemClass((MstItemClass) itemClass.getSelectedItem());
                mg.setItemNo(itemNo.getText());
                mg.setJANCode(janCode.getText());
                mg.setItemName(itemName.getText());
                mg.setPrice(Long.parseLong(price.getText().replace(",", "")));
                mg.setUseProperStock(Integer.parseInt(useProperStock.getText().replace(",", "")));
                mg.setSellProperStock(Integer.parseInt(sellProperStock.getText().replace(",", "")));
                mg.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText().replace(",", ""))));
                // nahoang add.
                if(flgPrepra == false){
                     mg.setPrepaidPrice(0);
                }
                else
                {
                    mg.setPrepaidPrice(Integer.parseInt(txtPrepaidPrice.getText().replace(",", "")));       
                }
                // 使用区分
                if (itemUseDivision1Radio.isSelected()) {
                    mg.setItemUseDivision(new Integer(1));
                } else if (itemUseDivision2Radio.isSelected()) {
                    mg.setItemUseDivision(new Integer(2));
                } else if (itemUseDivision3Radio.isSelected()) {
                    mg.setItemUseDivision(new Integer(3));
                }

                /**
                 * @author nahoang Start.
                 */
                if (chkPrepaId.isSelected()) {
                    mg.setPrepaidID(new Integer(1));
                } else {
                    mg.setPrepaidID(new Integer(0));
                }
                /**
                 * End.
                 */

                // 置場
                MstPlace mp = (MstPlace) place.getSelectedItem();
                if (mp != null) {
                    mg.setPlaceID(mp.getPlaceID());
                } else {
                    mg.setPlaceID(null);
                }
	}
	
	
	/**
	 * 選択されたデータを削除する。
	 * @return true - 成功
	 */
	private boolean delete()
	{
		boolean		result	=	false;
		MstItem		mg	=	null;
		MstUseProducts	mup	=	new MstUseProducts();
		
		if(0 <= selIndex && selIndex < mic.size())
		{
			mg	=	mic.get(selIndex);
		}
		
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		try
		{
			mup.setProductDivision(2);
			
			con.begin();
			
			if(mg.delete(con) && mup.deleteProductId(con,mg.getItemID()))
			{
				con.commit();
				this.refresh();
				result	=	true;
				//IVS_LVTu start add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
				isLoadDisplay = true;
				//IVS_LVTu end add 2017/08/15 #21596 [gb] マスタ登録のあと再起動アラートを出す
			}
			else
			{
				con.rollback();
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	result;
	}
	
	/**
	 * 商品マスタ登録画面用FocusTraversalPolicy
	 */
	private class MstItemFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(itemClass))
			{
				return itemNo;
			}
			else if (aComponent.equals(itemNo) && SystemInfo.isUseBarcodeReader())
			{
				return janCode;
			}
			else if (aComponent.equals(itemNo))
			{
				return itemName;
			}
			else if (aComponent.equals(janCode))
			{
				return itemName;
			}
			else if (aComponent.equals(itemName))
			{
				return price;
			}
			else if (aComponent.equals(price))
			{
				return itemUseDivision1Radio;
			}
			else if (aComponent.equals(itemUseDivision1Radio))
			{
				return itemUseDivision2Radio;
			}
			else if (aComponent.equals(itemUseDivision2Radio))
			{
				return itemUseDivision3Radio;
			}
			else if (aComponent.equals(itemUseDivision3Radio))
			{
				return useProperStock;
			}
			else if (aComponent.equals(useProperStock))
			{
				return sellProperStock;
			}
			else if (aComponent.equals(sellProperStock))
			{
				return place;
			}
			else if (aComponent.equals(place))
			{
				return displaySeq;
			}
			else if (aComponent.equals(displaySeq))
			{
				return itemClass;
			}
			
			return itemClass;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(itemClass))
			{
				return itemClass;
			}
			else if (aComponent.equals(itemNo))
			{
				return itemClass;
			}
			else if (aComponent.equals(janCode))
			{
				return itemNo;
			}
			else if (aComponent.equals(itemName) && SystemInfo.isUseBarcodeReader())
			{
				return janCode;
			}
			else if (aComponent.equals(itemName))
			{
				return itemNo;
			}
			else if (aComponent.equals(price))
			{
				return itemName;
			}
			else if (aComponent.equals(itemUseDivision1Radio))
			{
				return price;
			}
			else if (aComponent.equals(itemUseDivision2Radio))
			{
				return itemUseDivision1Radio;
			}
			else if (aComponent.equals(itemUseDivision3Radio))
			{
				return itemUseDivision2Radio;
			}
			else if (aComponent.equals(useProperStock))
			{
				return itemUseDivision3Radio;
			}
			else if (aComponent.equals(sellProperStock))
			{
				return useProperStock;
			}
			else if (aComponent.equals(place))
			{
				return sellProperStock;
			}
			else if (aComponent.equals(displaySeq))
			{
				return place;
			}
			
			return itemClass;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return itemClass;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return displaySeq;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return itemClass;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
        @Override
		public Component getInitialComponent(Window window)
		{
			return itemClass;
		}
	}
	
	
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		 //列の幅を設定する。
                item.getColumnModel().getColumn(0).setPreferredWidth(60);
        //		item.getColumnModel().getColumn(1).setPreferredWidth(80);   // JANコード
                item.getColumnModel().getColumn(1).setPreferredWidth(150);
                item.getColumnModel().getColumn(2).setPreferredWidth(100);
                item.getColumnModel().getColumn(3).setPreferredWidth(100);
                item.getColumnModel().getColumn(4).setPreferredWidth(100);              //nahoang Add
                item.getColumnModel().getColumn(5).setPreferredWidth(100);              //nahoang Add
                item.getColumnModel().getColumn(6).setPreferredWidth(100);
                item.getColumnModel().getColumn(7).setPreferredWidth(80);
                item.getColumnModel().getColumn(8).setPreferredWidth(60);
	}
	
	
            /**
        * 列の表示位置を設定するTableCellRenderer
        */
       private class TableCellAlignRenderer extends SelectTableCellRenderer {

           /**
            * Creates a new instance of ReservationTableCellRenderer
            */
           public TableCellAlignRenderer() {
               super();
           }

           /**
            * テーブルセルレンダリングを返します。
            *
            * @param table JTable
            * @param value セルに割り当てる値
            * @param isSelected セルが選択されている場合は true
            * @param hasFocus フォーカスがある場合は true
            * @param row 行
            * @param column 列
            * @return テーブルセルレンダリング
            */

           public Component getTableCellRendererComponent(JTable table,
                   Object value, boolean isSelected, boolean hasFocus, int row, int column) {
               super.getTableCellRendererComponent(table, value,
                       isSelected, hasFocus, row, column);

               switch (column) {
                   case 2:
                   case 3:
                   case 4:
                   case 5:
                       super.setHorizontalAlignment(SwingConstants.RIGHT);        //nahoang Add
                       break;
                   case 6:
                       super.setHorizontalAlignment(SwingConstants.CENTER);       //nahoang Add
                       break;
                   default:
                       super.setHorizontalAlignment(SwingConstants.LEFT);
                       break;
               }

               return this;
           }
       }
	
	public boolean readBarcode(BarcodeEvent be)
	{
		if(janCode.hasFocus())
		{
			janCode.setText(be.getBarcode());
			
			return	false;
		}
		
		return	true;
	}

	/**
	 * 置場IDから置場オブジェクトを返す
	 * @param placeID 置場ID
	 * @return 置場オブジェクト
	 */
	private MstPlace findMstPlace(Integer placeID)
	{
            for (MstPlace mp : mps) {
                if (mp == null || mp.getPlaceID() == null) {
                    continue;
                }

                if (mp.getPlaceID().equals(placeID)) {
                    return mp;
                }
            }

            return null;
	}
}
