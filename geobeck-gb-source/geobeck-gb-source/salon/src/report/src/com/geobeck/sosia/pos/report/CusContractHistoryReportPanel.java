/*
 * CusContractHistoryReportPanel.java
 *
 * Created on 2013/04/18, 13:00
 */
package com.geobeck.sosia.pos.report;

import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.*;
import javax.swing.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.hair.report.logic.*;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.account.MstAccountSetting;

import com.geobeck.sosia.pos.util.*;
import java.text.SimpleDateFormat;
import com.geobeck.sql.*;
import com.geobeck.swing.filechooser.WildcardFileFilter;
import com.geobeck.util.CheckUtil;
import com.geobeck.util.SQLUtil;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.SQLException;
import java.util.ArrayList;

import java.util.GregorianCalendar;
import org.apache.commons.lang.math.NumberUtils;
import java.util.HashMap;
import java.util.Iterator;

/**
 *
 * @author Duong Hoang Thanh
 */
public class CusContractHistoryReportPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private CusContractHistoryReportFocusTraversalPolicy ftp =
            new CusContractHistoryReportFocusTraversalPolicy();

    /**
     * Creates new form SalesTransitionReportPanel
     */
    public CusContractHistoryReportPanel() {

        initComponents();
        this.setSize(958, 750);
        this.setPath("å⁄ãqå_ñÒóöó");
        this.setTitle("å⁄ãqå_ñÒóöó");
        this.setKeyListener();
        init();

    }

    private void setKeyListener() {
        cmbTargetPeriodEndDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbTargetPeriodEndDate.addFocusListener(SystemInfo.getSelectText());
        cmbTargetPeriodStartDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbTargetPeriodStartDate.addFocusListener(SystemInfo.getSelectText());
        rdoTaxBlank.addKeyListener(SystemInfo.getMoveNextField());
        rdoTaxUnit.addKeyListener(SystemInfo.getMoveNextField());
    }

    /**
     * init form
     */
    private void init() {

        Calendar cal = Calendar.getInstance();
        SystemInfo.initGroupShopComponents(cmbTarget1, 3);

        //ä˙ä‘Çèâä˙ê›íËÇ∑ÇÈ    
        Calendar cdr = Calendar.getInstance();
        cdr.setTime(new Date());
        //îÑè„ç\ê¨Ç‚ÇªÇÃêÑà⁄ÉRÉìÉgÉçÅ[ÉãÇèâä˙ê›íËÇ∑ÇÈ

        cal.add(Calendar.MONTH, 1);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.add(Calendar.YEAR, -1);
        cal.add(Calendar.YEAR, 1);
        cal.add(Calendar.DAY_OF_MONTH, -1);

        //ëŒè€ä˙ä‘ÇÃê›íË
        this.cmbTargetPeriodStartDate.setDate(new Date());
        this.cmbTargetPeriodEndDate.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportTypeGroup = new javax.swing.ButtonGroup();
        taxGroup = new javax.swing.ButtonGroup();
        countGroup = new javax.swing.ButtonGroup();
        customerGroup = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        typeGroup = new javax.swing.ButtonGroup();
        aggregationGroup = new javax.swing.ButtonGroup();
        timeGroup = new javax.swing.ButtonGroup();
        outputGroup = new javax.swing.ButtonGroup();
        taxGroup2 = new javax.swing.ButtonGroup();
        aggregateGroup = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        buttonGroup8 = new javax.swing.ButtonGroup();
        btnPerformance = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblTarget1 = new javax.swing.JLabel();
        cmbTarget1 = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        btnExcelReport1 = new javax.swing.JButton();
        lblPeriod1 = new javax.swing.JLabel();
        cmbTargetPeriodStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        cmbTargetPeriodEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lblTax1 = new javax.swing.JLabel();
        rdoTaxUnit = new javax.swing.JRadioButton();
        rdoTaxBlank = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        btnCSVOutput = new javax.swing.JButton();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        lblTarget1.setText("ëŒè€");

        //shop.addItem(this.myShop);

        btnExcelReport1.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnExcelReport1.setBorderPainted(false);
        btnExcelReport1.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnExcelReport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelReport1ActionPerformed(evt);
            }
        });

        lblPeriod1.setText("ëŒè€ä˙ä‘");
        lblPeriod1.setFocusCycleRoot(true);

        cmbTargetPeriodStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodStartDate.setFocusCycleRoot(true);
        cmbTargetPeriodStartDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodStartDateFocusGained(evt);
            }
        });

        cmbTargetPeriodEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodEndDate.setFocusCycleRoot(true);
        cmbTargetPeriodEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodEndDateFocusGained(evt);
            }
        });

        lblTax1.setText("ê≈ãÊï™");

        buttonGroup3.add(rdoTaxUnit);
        rdoTaxUnit.setText("ê≈çû");
        rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxUnit.setContentAreaFilled(false);
        rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup3.add(rdoTaxBlank);
        rdoTaxBlank.setSelected(true);
        rdoTaxBlank.setText("ê≈î≤");
        rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxBlank.setContentAreaFilled(false);
        rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel1.setText("Å`");
        jLabel1.setFocusCycleRoot(true);

        btnCSVOutput.setIcon(SystemInfo.getImageIcon("/button/print/csv_off.jpg"));
        btnCSVOutput.setBorderPainted(false);
        btnCSVOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/csv_on.jpg"));
        btnCSVOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCSVOutputActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(lblPeriod1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(lblTarget1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(cmbTargetPeriodStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cmbTargetPeriodEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(cmbTarget1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(btnExcelReport1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnCSVOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(lblTax1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rdoTaxUnit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(20, 20, 20)
                        .add(rdoTaxBlank, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(lblTarget1)
                        .add(cmbTarget1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(btnExcelReport1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnCSVOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbTargetPeriodEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(cmbTargetPeriodStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTax1)
                    .add(rdoTaxUnit)
                    .add(rdoTaxBlank))
                .add(22, 22, 22))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(330, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(317, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * ä˙ä‘Ç≈çiÇ¡Çƒè⁄ç◊Ç»îÑè„ÇÃEXCELÉ{É^ÉìÇâüâ∫ÅB
     *
     * @param evt
     */
    private void btnExcelReport1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelReport1ActionPerformed

        btnExcelReport1.setCursor(null);

        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            ReportParameterBean paramBean = new ReportParameterBean();
            // ê≈ãÊï™(ê≈î≤Ç´)
            if (this.rdoTaxBlank.isSelected()) {
                paramBean.setTaxType(ReportParameterBean.TAX_TYPE_BLANK);
            } // ê≈ãÊï™(ê≈çûÇ›)
            else if (this.rdoTaxUnit.isSelected()) {
                paramBean.setTaxType(ReportParameterBean.TAX_TYPE_UNIT);
            }

            boolean logicResult = true;

            try {
                //ÉOÉãÅ[Év
                if (cmbTarget1.getSelectedItem() instanceof MstGroup) {
                    MstGroup mg = (MstGroup) cmbTarget1.getSelectedItem();
                    paramBean.setTargetName(mg.getGroupName());
                    paramBean.setShopIDList(mg.getShopIDListAll());
                } //ìXï‹
                else if (cmbTarget1.getSelectedItem() instanceof MstShop) {
                    MstShop ms = (MstShop) cmbTarget1.getSelectedItem();
                    paramBean.setTargetName(ms.getShopName());
                    paramBean.setShopIDList(ms.getShopID().toString());
                }

                //ëŒè€Ç∆Ç»ÇÈìXï‹Ç™ë∂ç›ÇµÇ»Ç¢èÍçá
                if (paramBean.getShopIDList().equals("")) {
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(4001),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }


                ConnectionWrapper con = SystemInfo.getConnection();
                ResultSetWrapper rs = con.executeQuery(getCusContractHistorySQL(paramBean));
                rs.last();
                int count = rs.getRow();
                rs.beforeFirst();
                if (count > 0) {
                    // ê≈çûÇ›•ê≈ï ÇÃãÊï™
                    String tax = "";
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                        tax = "ê≈î≤";
                    } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                        tax = "ê≈çû";
                    }

                    JExcelApi jx = new JExcelApi("å⁄ãqå_ñÒóöó");
                    jx.setTemplateFile("/reports/å⁄ãqå_ñÒóöó.xls");
                    // ÉwÉbÉ_
                    jx.setValue(3, 3, paramBean.getTargetName());
                    jx.setValue(3, 4, String.format("%1$tY/%1$tm/%1$td", cmbTargetPeriodStartDate.getDate()) + " Å` " + String.format("%1$tY/%1$tm/%1$td", cmbTargetPeriodEndDate.getDate()));
                    jx.setValue(3, 5, tax);
                    int row = 10;
                    // í«â¡çsêîÉZÉbÉg
                    jx.insertRow(row, count - 1);

                    while (rs.next()) {
                        //ìXï‹ÉRÅ[Éh
//                        jx.setValue(1, row, rs.getString(1));
//                        //ìXï‹ñº
//                        jx.setValue(2, row, rs.getString(2));
//                        //âÔàıNO
//                        jx.setValue(3, row, rs.getString(3));
//                        //éÅñº
//                        jx.setValue(4, row, rs.getString(4));
//                        //å_ñÒì˙
//                        jx.setValue(5, row, rs.getDate(5).toString());
//                        //ì`ï[No.
//                        jx.setValue(6, row, rs.getString(6));
//                        //íSìñé“
//                        jx.setValue(7, row, rs.getString(7));
//                        //î}ëÃ
//                        jx.setValue(8, row, rs.getString(8));
//                        //óàìXåãâ 
//                        jx.setValue(9, row, rs.getString(9));
//                        //ÉRÅ[ÉXå_ñÒì‡óe
//                        jx.setValue(10, row, rs.getString(10));



                        jx.setValue(1, row, rs.getString(2));
                        //ìXï‹ñº
                        jx.setValue(2, row, rs.getString(3));
                        //âÔàıNO
                        jx.setValue(3, row, rs.getString(4));
                        //éÅñº
                        jx.setValue(4, row, rs.getString(5));
                        //å_ñÒì˙
                        jx.setValue(5, row, rs.getDate(6).toString());
                        //ì`ï[No.
                        jx.setValue(6, row, rs.getString(7));
                        //íSìñé“
                        jx.setValue(7, row, rs.getString(8));
                        //î}ëÃ
                        jx.setValue(8, row, rs.getString(9));
                        //óàìXåãâ 
                        jx.setValue(9, row, rs.getString(10));
                        //óàìXåãâ 
                        String strStatus = "";
                        // Luc start edit 20140508
//                        if (rs.getDate("delete_date") != null || rs.getInt("contract_status") == 1) {
//                            strStatus = "âñÒ";
//                        }else if(rs.getInt("contract_status") == 2){
//                            strStatus = "ïœçX";
//                        }
                        strStatus = rs.getString("contract_status");
                        // luc end edit
                        jx.setValue(10, row, strStatus);
                        //ÉRÅ[ÉXå_ñÒì‡óe
                        jx.setValue(11, row, rs.getString(11));


                        //ê≈î≤
                        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                            //ÉRÅ[ÉXå_ñÒã‡äz




                            if (rs.getString("contract_status").trim().equals("ÉRÅ[ÉXâñÒ")) {
                                jx.setValue(24, row, 0);
                                jx.setValue(12, row, rs.getInt("contract_totalproductvalue_no_tax"));
                                jx.setValue(26, row, rs.getInt("contract_totalproductvalue_no_tax"));
                            } else {
                                //è¡âªã‡äz	
                                jx.setValue(24, row, rs.getInt("total_productvaluedigestion_no_tax"));
                                jx.setValue(12, row, rs.getInt("contract_totalproductvalue_no_tax"));
                                jx.setValue(26, row, rs.getInt("remaining_no_tax"));
                            }
                            //ñ¢è¡âªã‡äz	





                            //ê≈çû
                        } else {

                            if (rs.getString("contract_status").trim().equals("ÉRÅ[ÉXâñÒ")) {
                                //è¡âªã‡äz	
                                jx.setValue(24, row, 0);
                                //ÉRÅ[ÉXå_ñÒã‡äz
                                jx.setValue(12, row, rs.getInt("contract_totalproductvalue_in_tax"));
                                jx.setValue(26, row, rs.getInt("contract_totalproductvalue_in_tax"));
                            } else {
                                //è¡âªã‡äz	
                                jx.setValue(24, row, rs.getInt("total_productvaluedigestion_in_tax"));
                                //ÉRÅ[ÉXå_ñÒã‡äz
                                jx.setValue(12, row, rs.getInt("contract_totalproductvalue_in_tax"));
                                jx.setValue(26, row, rs.getInt("remaining_in_tax"));
                            }
                            //ñ¢è¡âªã‡äz	



                        }
                        //è§ïiå_ñÒì‡óe  
                        jx.setValue(13, row, rs.getString("item_name"));
                        //å¬êî
                        jx.setValue(14, row, rs.getString("Sale_TotalProductNum"));
                        //è§ïiå_ñÒã‡äz
                        jx.setValue(15, row, rs.getInt("sale_total"));
                        //äÑïä
                        //âÒêî	
                        jx.setValue(16, row, rs.getString("countpayment3"));
                        //ã‡äz 
                        jx.setValue(17, row, rs.getInt("TotalPayment3"));
                        //ÉJÅ[Éh
                        //éÌï  
                        jx.setValue(18, row, rs.getString("countPayment2"));
                        //ã‡äz
                        jx.setValue(19, row, rs.getInt("totalpayment2"));
                        //êUçû.ã‡äz

                        jx.setValue(20, row, rs.getInt("totalpayment1"));


                        //ã‡åî.ã‡äz
                        jx.setValue(21, row, rs.getInt("totalpayment4"));

                        //îÑä|ã‡.ã‡äz
                        if (rs.getString("contract_status").trim().equals("ÉRÅ[ÉXâñÒ")) {
                            jx.setValue(22, row, 0);
                        } else {
                            jx.setValue(22, row, rs.getInt("total_billvalue"));
                        }

                        if (rs.getString("contract_status").trim().equals("ÉRÅ[ÉXâñÒ")) {
                            //è¡âªâÒêî

                            jx.setValue(23, row, 0);
                            //écâÒêî	


                        } else {
                            //è¡âªâÒêî

                            jx.setValue(23, row, rs.getString("consumption_num"));



                        }
                        //écâÒêî	
                        if (rs.getString("contract_status").trim().equals("ÉRÅ[ÉXâñÒ")) {
                            jx.setValue(25, row, -1);
                        } else {

                            jx.setValue(25, row, rs.getString("remaining_product_num"));
                        }


                        //ç≈èIóàìXì˙
                        jx.setValue(27, row, rs.getDate("last_visit").toString());

                        row += 1;
                    }

                    jx.openWorkbook();

                } else {
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(4001),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }

            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(1099),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            // ÉGÉâÅ[éû
            if (!logicResult) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            }
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnExcelReport1ActionPerformed

    private String getCusContractHistorySQL(ReportParameterBean paramBean) {
        StringBuilder sql = new StringBuilder();

        //Add start 2013-09-11 ÉzÉA
        //èàóùë¨ìxâ¸ëPÇÃÇΩÇﬂExcelÇ≈åvéZÇµÇ»Ç¢ÇÊÇ§Ç…Ç∑ÇÈÅiSQLÇ≈ê≈Ç»Ç«åvéZÇ∑ÇÈÅj
        sql.append(" select * from ");
        sql.append(" (");
        sql.append("select distinct \n");
        sql.append("'' as contract_status,shop_id,shop_name,customer_no,cusname, sales_date, slip_no, \n");
        sql.append("staff_name, response_name,technic_name,  course_name,\n");
        sql.append("ceil(round(cast( contract_totalproductvalue / (1.0 + get_tax_rate(sales_date)) as numeric),3)) as contract_totalproductvalue_no_tax, \n");
        sql.append("contract_totalproductvalue as contract_totalproductvalue_in_tax, \n");
        sql.append("item_name,Sale_TotalProductNum, sale_total, countpayment3, totalpayment3,countpayment2, totalpayment2,\n");
        sql.append("totalpayment1,totalpayment4, total_billvalue,  \n");
        sql.append("case when consumption_num > Left_ProductNum then Left_ProductNum else consumption_num end as consumption_num, \n");
        sql.append("case when (Left_ProductNum - consumption_num) > 0 then (Left_ProductNum - consumption_num) else 0 end as remaining_product_num, \n");
        sql.append(" ceil(round(cast( case when (Left_ProductNum - consumption_num) <= 0 then left_productvalue else  total_productvaluedigestion end  \n");
        sql.append("/(1.0 + get_tax_rate(sales_date)) as numeric),3)) as total_productvaluedigestion_no_tax, \n");
        sql.append("case when (Left_ProductNum - consumption_num) <= 0 then left_productvalue else  total_productvaluedigestion end as total_productvaluedigestion_in_tax, \n");
        sql.append("ceil(round(cast( case when (Left_ProductNum - consumption_num) > 0 then (left_productvalue - total_productvaluedigestion) else 0 end  \n");
        sql.append("/ (1.0 + get_tax_rate(sales_date)) as numeric),3)) as remaining_no_tax, \n");
        sql.append("case when (Left_ProductNum - consumption_num) > 0 then (left_productvalue - total_productvaluedigestion) else 0 end as remaining_in_tax, \n");
        sql.append("last_visit \n");
        sql.append("from ( \n");
        //Add end 2013-09-11 ÉzÉA

        //ÉRÅ[ÉXå_ñÒ
        sql.append(" select a.delete_date ,a.contract_status,a.shop_id, a.shop_name, a.customer_no,a.cusName,a.sales_date,a.slip_no,");
        sql.append(" a.staff_name,response_name,technic_name,a.course_name,a.contract_TotalProductValue,a.item_name,a.Sale_TotalProductNum,\n");
        sql.append(" a.Sale_Total  ,a.countPayment3 ,a.TotalPayment3,a.countPayment2,a.TotalPayment2,a.totalpayment1,a.totalpayment4,a.total_billvalue,\n");
        sql.append("sum(a.consumption_num) as  consumption_num,sum(a.Total_ProductValueDigestion) as Total_ProductValueDigestion,a.left_productnum,a.left_productvalue,last_visit\n");
        sql.append(" from \n");
        sql.append(" (\n");

        sql.append(" Select  dc.delete_date ,dc.contract_status,ds.shop_id, ms.shop_name, mc.customer_no,\n");
        sql.append(" mc.customer_name1 || 'Å@' || mc.customer_name2 as cusName,\n");
        sql.append(" ds.sales_date, ds.slip_no,staff_name1 || 'Å@' || staff_name2 as staff_name,\n");
        sql.append(" array_to_string(array(SELECT response_name FROM data_response_effect\n");
        sql.append(" inner join mst_response using(response_id)\n");
        sql.append(" WHERE slip_no  = ds.slip_no order by response_id asc\n");
        sql.append(" ), 'ÅA') AS response_name,\n");
        sql.append(" array_to_string(array(SELECT technic_name FROM data_sales_detail dsd\n");
        sql.append(" inner join mst_technic mt on  dsd.product_id = mt.technic_id");
        sql.append(" WHERE dsd.slip_no  = ds.slip_no and dsd.shop_id  = ds.shop_id and product_division = 1 \n");
        sql.append(" and mt.technic_class_id = 14\n");
        sql.append(" ), 'ÅA') AS technic_name,\n");
        sql.append(" array_to_string(array(SELECT course_name FROM data_contract dc\n");
        sql.append(" inner join mst_course msc on  dc.product_id = msc.course_id\n");
        sql.append(" WHERE dc.slip_no  = ds.slip_no and ds.shop_id = dc.shop_id\n");
        sql.append(" ), 'ÅA') AS course_name,\n");
        sql.append(" (select sum(product_value) from data_contract where slip_no = ds.slip_no \n");
        sql.append(" and shop_id = ds.shop_id ) as contract_TotalProductValue,\n");
        sql.append(" array_to_string(array(SELECT item_name FROM data_sales_detail dsd \n");
        sql.append(" inner join mst_item msc on  dsd.product_id = msc.item_id\n");
        sql.append(" WHERE dsd.slip_no  = ds.slip_no and dsd.shop_id  = ds.shop_id and product_division in (2,4)\n");
        sql.append(" ), 'ÅA') AS item_name,\n");
        sql.append(" (select sum(product_num) from view_data_sales_detail_valid where shop_id = ds.shop_id \n");
        sql.append(" and slip_no = ds.slip_no and product_division in (2,4)) as Sale_TotalProductNum,\n");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append(" (select sum(discount_detail_value_no_tax) from view_data_sales_detail_valid \n");
            sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in(2,4)) as Sale_Total,\n");
        } else {
            sql.append(" (select sum(discount_detail_value_in_tax) from view_data_sales_detail_valid \n");
            sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in (2,4)) as Sale_Total,\n");
        }
        sql.append(" (array_to_string(array(select payment_method_name from data_payment_detail \n");
        sql.append(" left join mst_payment_method using(payment_method_id) \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 3)), 'ÅA')) as countPayment3,\n");
        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and delete_date is null and shop_id = ds.shop_id \n");
        sql.append(" and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 3)) as TotalPayment3,\n");
        sql.append(" array_to_string(array(select payment_method_name from data_payment_detail \n");
        sql.append(" left join mst_payment_method using(payment_method_id) \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 2)), 'ÅA') as countPayment2,\n");
        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" and payment_method_id in \n");
        sql.append(" ( ");
        sql.append(" select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 2)\n");
        sql.append(" ) as TotalPayment2,\n");
        sql.append(" (select sum(payment_value) \n");
        sql.append(" - (select change_value from data_payment \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" order by payment_no desc limit 1) \n");
        sql.append(" from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" and payment_method_id in \n");
        sql.append(" (select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 1)\n");
        sql.append(" ) as TotalPayment1,\n");
        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" and payment_method_id in \n");
        sql.append(" (select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 4)) as TotalPayment4,\n");
        sql.append(" (select bill_value from data_payment \n");
        sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and delete_date is null \n");
        sql.append(" and payment_no = ( \n");
        sql.append(" select max(payment_no) from data_payment \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id) \n");
        sql.append(" ) as total_BillValue,\n");

        //2013-09-06 Hoa Edit Start
        //sql.append("  sum(coalesce(cast(dcd.product_num as integer),0)) as consumption_num,\n");
//        sql.append(" (Select Sum(round(dd.product_num ,0)) \n");
//        sql.append("from data_contract_digestion dd  \n");
//        sql.append("inner join data_contract dc \n");
//        sql.append("on dc.contract_no =  dd.contract_no  \n");
//        sql.append("and dc.contract_detail_no =  dd.contract_detail_no \n");
//        sql.append("and dc.shop_id = dd.contract_shop_id  \n");
//        sql.append("and dc.slip_no = ds.slip_no and dc.shop_id = ds.shop_id  \n");
//        sql.append("where substring(dd.insert_date,0,12) <= " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate.getDate() ) + "\n");
//        sql.append(") as consumption_num ,  \n");

        //ë¨ìxâ¸ëP
        sql.append("sum(coalesce(cast(case when to_date(to_char(dcd.insert_date,'YYYY/MM/DD'), 'YYYY/MM/DD') <= " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "\n");
        sql.append(" then dcd.product_num else 0 end  as integer),0)) as consumption_num, \n");

        //2013-09-06 Hoa Edit End

        //2013-09-06 Hoa Edit Start
//        sql.append(" (Select Sum(round(cast (dd.product_num * (product_value / dc.product_num) as numeric),0)) \n");
//        sql.append(" from data_contract dc\n");
//        sql.append(" inner join data_contract_digestion dd \n");
//        sql.append(" on dc.contract_no =  dd.contract_no \n");
//        sql.append(" and dc.contract_detail_no =  dd.contract_detail_no and dc.shop_id = dd.contract_shop_id\n");
//        sql.append(" and dc.slip_no = ds.slip_no and dc.shop_id = ds.shop_id \n");
//        sql.append("and substring(dd.insert_date,0,12) <= " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate.getDate() ) + "\n");
//        sql.append(" ) as Total_ProductValueDigestion,\n");

        //ë¨ìxâ¸ëP
        sql.append("sum(coalesce(cast(case when to_date(to_char(dcd.insert_date,'YYYY/MM/DD'), 'YYYY/MM/DD') <= " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "\n");
        sql.append("then (dcd.product_num * (dc.product_value/dc.product_num )) else 0 end  as integer),0)) as Total_ProductValueDigestion, \n");

        //2013-09-06 Hoa Edit End

        sql.append(" (Select sum(product_num) \n");
        sql.append(" from data_contract dc \n");
        sql.append(" where dc.shop_id = ds.shop_id and dc.slip_no = ds.slip_no\n");
        sql.append(" ) as Left_ProductNum,\n");

        sql.append(" (Select sum(product_value) \n");
        sql.append(" from data_contract dc \n");
        sql.append(" where dc.shop_id = ds.shop_id and dc.slip_no = ds.slip_no\n");
        sql.append(" ) as Left_ProductValue,\n");

        //sql.append(" max(sales_date)  as last_visit \n");
        sql.append(" (select max(sales_date) from data_sales \n");
        sql.append(" where  shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and customer_id = mc.customer_id) as last_visit \n");
        sql.append(" from data_sales ds\n");
        sql.append(" inner join mst_shop ms using(shop_id)\n");
        sql.append(" inner join mst_customer mc using(customer_id)\n");
        sql.append(" left join mst_staff mst using(staff_id)\n");
        //IVS_LVTu start edit 2015/04/22 Bug #36397
        //sql.append(" inner join  data_contract dc on dc.shop_id = ds.shop_id and ds.slip_no = dc.slip_no and dc.delete_date is null \n");
        sql.append(" inner join  data_contract dc on dc.shop_id = ds.shop_id and ds.slip_no = dc.slip_no \n");
        //IVS_LVTu end edit 2015/04/22 Bug #36397
        sql.append(" left outer join data_contract_digestion dcd \n");
        sql.append(" on ds.shop_id = dcd.contract_shop_id and dc.contract_no = dcd.contract_no \n");
        sql.append(" and dc.contract_detail_no = dcd.contract_detail_no\n");
        sql.append(" where  ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and ds.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
        sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
        sql.append("  and dc.contract_status is null\n");
        sql.append("  group by ds.shop_id, ms.shop_name, mc.customer_no,cusName,ds.sales_date,ds.slip_no,\n");
        sql.append(" staff_name,response_name,contract_TotalProductValue,item_name,Sale_TotalProductNum,\n");
        sql.append(" Sale_Total,countPayment3,TotalPayment3,countPayment2,\n");
        sql.append(" TotalPayment2,TotalPayment1,TotalPayment4,total_BillValue,mc.customer_id,dc.delete_date ,dc.contract_status,dc.product_id\n");
        sql.append(" ) a\n");
        sql.append(" group by a.delete_date ,a.contract_status,a.shop_id, a.shop_name, a.customer_no,a.cusName,a.sales_date,a.slip_no,\n");
        sql.append(" a.staff_name,response_name,technic_name,a.course_name,a.contract_TotalProductValue,a.item_name,a.Sale_TotalProductNum,\n");
        sql.append(" a.Sale_Total  ,a.countPayment3 ,a.TotalPayment3,a.countPayment2,a.TotalPayment2,a.totalpayment1,a.totalpayment4,a.total_billvalue,\n");
        sql.append(" a.left_productnum,a.left_productvalue,a.last_visit\n");
       //è§ïi
        sql.append(" UNION \n");
        sql.append(" Select   null as delete_date , null as contract_status,ds.shop_id, ms.shop_name, mc.customer_no,\n");
        sql.append(" mc.customer_name1 || 'Å@' || mc.customer_name2 as cusName,\n");
        sql.append(" ds.sales_date, ds.slip_no,staff_name1 || 'Å@' || staff_name2 as staff_name,\n");
        sql.append(" array_to_string(array(SELECT response_name FROM data_response_effect\n");
        sql.append(" inner join mst_response using(response_id)\n");
        sql.append(" WHERE slip_no  = ds.slip_no order by response_id asc\n");
        sql.append(" ), 'ÅA') AS response_name,\n");
        sql.append(" array_to_string(array(SELECT technic_name FROM data_sales_detail dsd\n");
        sql.append(" inner join mst_technic mt on  dsd.product_id = mt.technic_id");
        sql.append(" WHERE dsd.slip_no  = ds.slip_no and dsd.shop_id  = ds.shop_id and product_division = 1 \n");
        sql.append(" and mt.technic_class_id = 14\n");
        sql.append(" ), 'ÅA') AS technic_name,\n");
        sql.append(" array_to_string(array(SELECT course_name FROM data_contract dc\n");
        sql.append(" inner join mst_course msc on  dc.product_id = msc.course_id\n");
        sql.append(" WHERE dc.slip_no  = ds.slip_no and ds.shop_id = dc.shop_id\n");
        sql.append(" ), 'ÅA') AS course_name,\n");
        sql.append(" (select sum(product_value) from data_contract where slip_no = ds.slip_no \n");
        sql.append(" and shop_id = ds.shop_id ) as contract_TotalProductValue,\n");
        sql.append(" array_to_string(array(SELECT item_name FROM data_sales_detail dsd \n");
        sql.append(" inner join mst_item msc on  dsd.product_id = msc.item_id\n");
        sql.append(" WHERE dsd.slip_no  = ds.slip_no and dsd.shop_id  = ds.shop_id and product_division in (2,4)\n");
        sql.append(" ), 'ÅA') AS item_name,\n");
        sql.append(" (select sum(product_num) from view_data_sales_detail_valid where shop_id = ds.shop_id \n");
        sql.append(" and slip_no = ds.slip_no and product_division in (2,4)) as Sale_TotalProductNum,\n");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append(" (select sum(discount_detail_value_no_tax) from view_data_sales_detail_valid \n");
            sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in (2,4)) as Sale_Total,\n");
        } else {
            sql.append(" (select sum(discount_detail_value_in_tax) from view_data_sales_detail_valid \n");
            sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in (2,4)) as Sale_Total,\n");
        }

        sql.append(" (array_to_string(array(select payment_method_name from data_payment_detail \n");
        sql.append(" left join mst_payment_method using(payment_method_id) \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 2)), 'ÅA')) as countPayment3,\n");

        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and delete_date is null and shop_id = ds.shop_id \n");
        sql.append(" and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 3)) as TotalPayment3,\n");

        sql.append(" array_to_string(array(select payment_method_name from data_payment_detail \n");
        sql.append(" left join mst_payment_method using(payment_method_id) \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 2)), 'ÅA') as countPayment2,\n");
        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" and payment_method_id in \n");
        sql.append(" ( ");
        sql.append(" select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 2)\n");
        sql.append(" ) as TotalPayment2,\n");
        sql.append(" (select sum(payment_value) \n");
        sql.append(" - (select change_value from data_payment \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" order by payment_no desc limit 1) \n");
        sql.append(" from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" and payment_method_id in \n");
        sql.append(" (select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 1)\n");
        sql.append(" ) as TotalPayment1,\n");
        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" and payment_method_id in \n");
        sql.append(" (select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 4)) as TotalPayment4,\n");
        sql.append(" (select bill_value from data_payment \n");
        sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and delete_date is null \n");
        sql.append(" and payment_no = ( \n");
        sql.append(" select max(payment_no) from data_payment \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id) \n");
        sql.append(" ) as total_BillValue,\n");
        sql.append("  0 as consumption_num,\n");
        sql.append("  0 as Total_ProductValueDigestion,\n");
        sql.append(" 0 as Left_ProductNum,\n");
        sql.append(" 0 as Left_ProductValue,\n");
        //sql.append(" max(sales_date)  as last_visit \n");
        sql.append(" (select max(sales_date) from data_sales \n");
        sql.append(" where  shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and customer_id = mc.customer_id) as last_visit \n");
        sql.append(" from data_sales ds\n");
        sql.append(" inner join mst_shop ms using(shop_id)\n");
        sql.append(" inner join mst_customer mc using(customer_id)\n");
        sql.append(" inner join mst_staff mst using(staff_id)\n");
        sql.append(" inner join  data_sales_detail dsds on dsds.shop_id = ds.shop_id and ds.slip_no = dsds.slip_no\n");

        //sql.append("left join  data_contract dc on dc.shop_id = ds.shop_id and ds.slip_no = dc.slip_no\n");
        //sql.append("left outer join data_contract_digestion dcd \n");
        //sql.append("on ds.shop_id = dcd.contract_shop_id and dc.contract_no = dcd.contract_no \n");
        //sql.append("and dc.contract_detail_no = dcd.contract_detail_no\n");

        sql.append(" where  ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and ds.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
        sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
        sql.append("  and dsds.product_division in (2,4) ");
        sql.append("  and ds.delete_date is null and dsds.delete_date is null");
        //sql.append("  and ds.slip_no not in (select slip_no from data_contract where shop_id = ds.shop_id and delete_date is null)");
        //IVS_LVTu start edit 2015/04/22 Bug #36397
        //sql.append("  and ds.slip_no not in (select slip_no from data_contract where shop_id = ds.shop_id  and slip_no =  ds.slip_no and  delete_date is null)");
        sql.append("  and ds.slip_no not in (select slip_no from data_contract where shop_id = ds.shop_id  and slip_no =  ds.slip_no )");
        //IVS_LVTu end edit 2015/04/22 Bug #36397
        //sql.append(" group by dc.delete_date ,dc.contract_status,ds.shop_id, ms.shop_name, mc.customer_no,cusName,ds.sales_date,ds.slip_no,\n");
        sql.append(" group by ds.shop_id, ms.shop_name, mc.customer_no,cusName,ds.sales_date,ds.slip_no,\n");
        sql.append(" staff_name,response_name,contract_TotalProductValue,item_name,Sale_TotalProductNum,\n");
        sql.append(" Sale_Total,countPayment3,TotalPayment3,countPayment2,\n");
        //sql.append(" TotalPayment2,TotalPayment1,TotalPayment4,total_BillValue,mc.customer_id,dc.product_id\n");
        sql.append(" TotalPayment2,TotalPayment1,TotalPayment4,total_BillValue,mc.customer_id \n");
        //Edit start 2013-09-11 ÉzÉA
        sql.append("  order by sales_date,shop_id,slip_no asc \n");
        //Edit endt 2013-09-11 ÉzÉA
        //Add start 2013-09-11 ÉzÉA

        sql.append(" ) as cus_history \n");
        //Add end 2013-09-11 ÉzÉA

        //kousuïœçX
        sql.append(" UNION ALL \n");
        sql.append("select \n");
        sql.append("'ÉRÅ[ÉXïœçX' as contract_status ,shop_id,shop_name,customer_no,cusname, sales_date, slip_no, \n");
        sql.append("staff_name, response_name,technic_name,  course_name,\n");
        sql.append("ceil(round(cast( contract_totalproductvalue / (1.0 + get_tax_rate(sales_date)) as numeric),3)) as contract_totalproductvalue_no_tax, \n");
        sql.append("contract_totalproductvalue as contract_totalproductvalue_in_tax, \n");
        sql.append("item_name,Sale_TotalProductNum, sale_total, countpayment3, totalpayment3,countpayment2, totalpayment2,\n");
        sql.append("totalpayment1,totalpayment4, total_billvalue,  \n");
        sql.append("case when consumption_num > Left_ProductNum then Left_ProductNum else consumption_num end as consumption_num, \n");
        sql.append("case when (Left_ProductNum - consumption_num) > 0 then (Left_ProductNum - consumption_num) else 0 end as remaining_product_num, \n");
        sql.append(" ceil(round(cast( case when (Left_ProductNum - consumption_num) <= 0 then left_productvalue else  total_productvaluedigestion end  \n");
        sql.append("/(1.0 + get_tax_rate(sales_date)) as numeric),3)) as total_productvaluedigestion_no_tax, \n");
        sql.append("case when (Left_ProductNum - consumption_num) <= 0 then left_productvalue else  total_productvaluedigestion end as total_productvaluedigestion_in_tax, \n");
        sql.append("ceil(round(cast( case when (Left_ProductNum - consumption_num) > 0 then (left_productvalue - total_productvaluedigestion) else 0 end  \n");
        sql.append("/ (1.0 + get_tax_rate(sales_date)) as numeric),3)) as remaining_no_tax, \n");
        sql.append("case when (Left_ProductNum - consumption_num) > 0 then (left_productvalue - total_productvaluedigestion) else 0 end as remaining_in_tax, \n");
        sql.append("last_visit \n");
        sql.append("from ( \n");
        //Add end 2013-09-11 ÉzÉA

        //ÉRÅ[ÉXå_ñÒ
        sql.append(" select a.delete_date ,a.contract_status,a.shop_id, a.shop_name, a.customer_no,a.cusName,a.sales_date,a.slip_no,");
        sql.append(" a.staff_name,response_name,technic_name,a.course_name,a.contract_TotalProductValue,a.item_name,a.Sale_TotalProductNum,\n");
        sql.append(" a.Sale_Total  ,a.countPayment3 ,a.TotalPayment3,a.countPayment2,a.TotalPayment2,a.totalpayment1,a.totalpayment4,a.total_billvalue,\n");
        sql.append("sum(a.consumption_num) as  consumption_num,sum(a.Total_ProductValueDigestion) as Total_ProductValueDigestion,a.left_productnum,a.left_productvalue,last_visit\n");
        sql.append(" from \n");
        sql.append(" (\n");

        sql.append(" Select  dc.delete_date ,dc.contract_status,ds.shop_id, ms.shop_name, mc.customer_no,\n");
        sql.append(" mc.customer_name1 || 'Å@' || mc.customer_name2 as cusName,\n");
        sql.append(" ds.sales_date, ds.slip_no,staff_name1 || 'Å@' || staff_name2 as staff_name,\n");
        sql.append(" array_to_string(array(SELECT response_name FROM data_response_effect\n");
        sql.append(" inner join mst_response using(response_id)\n");
        sql.append(" WHERE slip_no  = ds.slip_no order by response_id asc\n");
        sql.append(" ), 'ÅA') AS response_name,\n");
        sql.append(" array_to_string(array(SELECT technic_name FROM data_sales_detail dsd\n");
        sql.append(" inner join mst_technic mt on  dsd.product_id = mt.technic_id");
        sql.append(" WHERE dsd.slip_no  = ds.slip_no and dsd.shop_id  = ds.shop_id and product_division = 1 \n");
        sql.append(" and mt.technic_class_id = 14\n");
        sql.append(" ), 'ÅA') AS technic_name,\n");
        sql.append(" array_to_string(array(SELECT course_name FROM data_contract dc\n");
        sql.append(" inner join mst_course msc on  dc.product_id = msc.course_id\n");
        sql.append(" WHERE dc.slip_no  = ds.slip_no and ds.shop_id = dc.shop_id\n");
        sql.append(" ), 'ÅA') AS course_name,\n");
        sql.append(" (select sum(product_value) from data_contract where slip_no = ds.slip_no \n");
        //IVS_LVTu start edit 2015/04/22 Bug #36397
        //sql.append(" and shop_id = ds.shop_id and delete_date is Null) as contract_TotalProductValue,\n");
        sql.append(" and shop_id = ds.shop_id ) as contract_TotalProductValue,\n");
        //IVS_LVTu end edit 2015/04/22 Bug #36397
        sql.append(" array_to_string(array(SELECT item_name FROM data_sales_detail dsd \n");
        sql.append(" inner join mst_item msc on  dsd.product_id = msc.item_id\n");
        sql.append(" WHERE dsd.slip_no  = ds.slip_no and dsd.shop_id  = ds.shop_id and product_division in (2,4)\n");
        sql.append(" ), 'ÅA') AS item_name,\n");
        sql.append(" (select sum(product_num) from view_data_sales_detail_valid where shop_id = ds.shop_id \n");
        sql.append(" and slip_no = ds.slip_no and product_division in (2,4)) as Sale_TotalProductNum,\n");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append(" (select sum(discount_detail_value_no_tax) from view_data_sales_detail_valid \n");
            sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in(2,4)) as Sale_Total,\n");
        } else {
            sql.append(" (select sum(discount_detail_value_in_tax) from view_data_sales_detail_valid \n");
            sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in (2,4)) as Sale_Total,\n");
        }
        sql.append(" (array_to_string(array(select payment_method_name from data_payment_detail \n");
        sql.append(" left join mst_payment_method using(payment_method_id) \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 3)), 'ÅA')) as countPayment3,\n");
        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and delete_date is null and shop_id = ds.shop_id \n");
        sql.append(" and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 3)) as TotalPayment3,\n");
        sql.append(" array_to_string(array(select payment_method_name from data_payment_detail \n");
        sql.append(" left join mst_payment_method using(payment_method_id) \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 2)), 'ÅA') as countPayment2,\n");
        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" and payment_method_id in \n");
        sql.append(" ( ");
        sql.append(" select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 2)\n");
        sql.append(" ) as TotalPayment2,\n");
        sql.append(" (select sum(payment_value) \n");
        sql.append(" - (select change_value from data_payment \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" order by payment_no desc limit 1) \n");
        sql.append(" from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" and payment_method_id in \n");
        sql.append(" (select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 1)\n");
        sql.append(" ) as TotalPayment1,\n");
        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        //IVS_LVTu start edit 2015/04/22 Bug #36397
        //sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and dc.delete_date is Null \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id \n");
        //IVS_LVTu end edit 2015/04/22 Bug #36397
        sql.append(" and payment_method_id in \n");
        sql.append(" (select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 4)) as TotalPayment4,\n");
        sql.append(" (select bill_value from data_payment \n");
        //IVS_LVTu start edit 2015/04/22 Bug #36397
        //sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and dc.delete_date is null \n");
        sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no  \n");
        //IVS_LVTu end edit 2015/04/22 Bug #36397
        sql.append(" and payment_no = ( \n");
        sql.append(" select max(payment_no) from data_payment \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id) \n");
        sql.append(" ) as total_BillValue,\n");

        //ë¨ìxâ¸ëP
        sql.append("sum(coalesce(cast(case when to_date(to_char(dcd.insert_date,'YYYY/MM/DD'), 'YYYY/MM/DD') <= " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "\n");
        sql.append(" then dcd.product_num else 0 end  as integer),0)) as consumption_num, \n");


        //ë¨ìxâ¸ëP
        sql.append("sum(coalesce(cast(case when to_date(to_char(dcd.insert_date,'YYYY/MM/DD'), 'YYYY/MM/DD') <= " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "\n");
        sql.append("then (dcd.product_num * (dc.product_value/dc.product_num )) else 0 end  as integer),0)) as Total_ProductValueDigestion, \n");

        sql.append(" (Select sum(product_num) \n");
        sql.append(" from data_contract dc \n");
        sql.append(" where dc.shop_id = ds.shop_id and dc.slip_no = ds.slip_no\n");
        sql.append(" ) as Left_ProductNum,\n");

        sql.append(" (Select sum(product_value) \n");
        sql.append(" from data_contract dc \n");
        sql.append(" where dc.shop_id = ds.shop_id and dc.slip_no = ds.slip_no\n");
        sql.append(" ) as Left_ProductValue,\n");
        sql.append(" (select max(sales_date) from data_sales \n");
        sql.append(" where  shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and customer_id = mc.customer_id) as last_visit \n");
        sql.append(" from data_sales ds\n");
        sql.append(" inner join mst_shop ms using(shop_id)\n");
        sql.append(" inner join mst_customer mc using(customer_id)\n");
        sql.append(" inner join mst_staff mst using(staff_id)\n");
        sql.append(" inner join  data_contract dc on dc.shop_id = ds.shop_id and ds.slip_no = dc.slip_no\n");
        sql.append(" left outer join data_contract_digestion dcd \n");
        sql.append(" on ds.shop_id = dcd.contract_shop_id and dc.contract_no = dcd.contract_no \n");
        sql.append(" and dc.contract_detail_no = dcd.contract_detail_no\n");
        sql.append(" where  ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and ds.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
        sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
        //IVS_LVTu start edit 2015/04/22 Bug #36397
        //sql.append("  and dc.contract_status = 2 and dc.delete_date is null group by ds.shop_id, ms.shop_name, mc.customer_no,cusName,ds.sales_date,ds.slip_no,\n");
        sql.append("  and dc.contract_status = 2 group by ds.shop_id, ms.shop_name, mc.customer_no,cusName,ds.sales_date,ds.slip_no,\n");
        //IVS_LVTu end edit 2015/04/22 Bug #36397
        sql.append(" staff_name,response_name,contract_TotalProductValue,item_name,Sale_TotalProductNum,\n");
        sql.append(" Sale_Total,countPayment3,TotalPayment3,countPayment2,\n");
        sql.append(" TotalPayment2,TotalPayment1,TotalPayment4,total_BillValue,mc.customer_id,dc.delete_date ,dc.contract_status,dc.product_id\n");

        sql.append(" ) a\n");
        sql.append(" group by a.delete_date ,a.contract_status,a.shop_id, a.shop_name, a.customer_no,a.cusName,a.sales_date,a.slip_no,\n");
        sql.append(" a.staff_name,response_name,technic_name,a.course_name,a.contract_TotalProductValue,a.item_name,a.Sale_TotalProductNum,\n");
        sql.append(" a.Sale_Total  ,a.countPayment3 ,a.TotalPayment3,a.countPayment2,a.TotalPayment2,a.totalpayment1,a.totalpayment4,a.total_billvalue,\n");
        sql.append(" a.left_productnum,a.left_productvalue,a.last_visit\n");
        sql.append(" ) as cus_history \n");

        //ÉRÅ[ÉXâñÒ
        sql.append(" UNION ALL \n");
        sql.append("select \n");
        sql.append("'ÉRÅ[ÉXâñÒ' as contract_status,shop_id,shop_name,customer_no,cusname, sales_date, slip_no, \n");
        sql.append("staff_name, response_name,technic_name,  course_name,\n");
        sql.append("contract_totalproductvalue as contract_totalproductvalue_no_tax, \n");
        sql.append("contract_totalproductvalue as contract_totalproductvalue_in_tax, \n");
        sql.append("item_name,Sale_TotalProductNum, sale_total, countpayment3, totalpayment3,countpayment2, totalpayment2,\n");
        sql.append("totalpayment1,totalpayment4, total_billvalue,  \n");
        sql.append("case when consumption_num > Left_ProductNum then Left_ProductNum else consumption_num end as consumption_num, \n");
        sql.append("case when (Left_ProductNum - consumption_num) > 0 then -(Left_ProductNum - consumption_num) else 0 end as remaining_product_num, \n");
        sql.append(" ceil(round(cast( case when (Left_ProductNum - consumption_num) <= 0 then left_productvalue else  total_productvaluedigestion end  \n");
        sql.append("/(1.0 + get_tax_rate(sales_date)) as numeric),3)) as total_productvaluedigestion_no_tax, \n");
        sql.append("case when (Left_ProductNum - consumption_num) <= 0 then left_productvalue else  total_productvaluedigestion end as total_productvaluedigestion_in_tax, \n");
        sql.append("ceil(round(cast( case when (Left_ProductNum - consumption_num) > 0 then -(left_productvalue - total_productvaluedigestion) else 0 end  \n");
        sql.append("/ (1.0 + get_tax_rate(sales_date)) as numeric),3)) as remaining_no_tax, \n");
        sql.append("case when (Left_ProductNum - consumption_num) > 0 then -(left_productvalue - total_productvaluedigestion) else 0 end as remaining_in_tax, \n");
        sql.append("last_visit \n");
        sql.append("from ( \n");
        //Add end 2013-09-11 ÉzÉA

        //ÉRÅ[ÉXå_ñÒ
        sql.append(" select a.delete_date,a.shop_id, a.shop_name, a.customer_no,a.cusName,a.sales_date,a.slip_no,");
        sql.append(" a.staff_name,response_name,technic_name,a.course_name,a.contract_TotalProductValue,a.item_name,a.Sale_TotalProductNum,\n");
        sql.append(" a.Sale_Total  ,a.countPayment3 ,a.TotalPayment3,a.countPayment2,a.TotalPayment2,a.totalpayment1,a.totalpayment4,a.total_billvalue,\n");
        sql.append("sum(a.consumption_num) as  consumption_num,sum(a.Total_ProductValueDigestion) as Total_ProductValueDigestion,a.left_productnum,a.left_productvalue,last_visit\n");
        sql.append(" from \n");
        sql.append(" (\n");

        sql.append(" Select  ds.insert_date as delete_date ,ds.shop_id, ms.shop_name, mc.customer_no,\n");
        sql.append(" mc.customer_name1 || 'Å@' || mc.customer_name2 as cusName,\n");
        sql.append(" ds.insert_date as sales_date, ds.slip_no,staff_name1 || 'Å@' || staff_name2 as staff_name,\n");
        sql.append(" array_to_string(array(SELECT response_name FROM data_response_effect\n");
        sql.append(" inner join mst_response using(response_id)\n");
        sql.append(" WHERE slip_no  = ds.slip_no order by response_id asc\n");
        sql.append(" ), 'ÅA') AS response_name,\n");
        sql.append(" array_to_string(array(SELECT technic_name FROM data_sales_detail dsd\n");
        sql.append(" inner join mst_technic mt on  dsd.product_id = mt.technic_id");
        sql.append(" WHERE dsd.slip_no  = ds.slip_no and dsd.shop_id  = ds.shop_id and product_division = 1 \n");
        sql.append(" and mt.technic_class_id = 14\n");
        sql.append(" ), 'ÅA') AS technic_name,\n");
        sql.append(" array_to_string(array(SELECT course_name FROM\n");
        sql.append(" data_sales_detail dsd \n");
        sql.append(" inner join mst_course msc on dsd.product_id = msc.course_id where dsd.slip_no  = ds.slip_no and dsd.shop_id  = ds.shop_id and product_division in (8) \n");

        sql.append(" ), 'ÅA') AS course_name,\n");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append(" (select sum(discount_detail_value_no_tax) from view_data_sales_detail_valid \n");
        } else {
            sql.append(" (select sum(discount_detail_value_in_tax) from view_data_sales_detail_valid \n");
        }
        sql.append("  where slip_no = ds.slip_no and shop_id = ds.shop_id ) as contract_TotalProductValue,\n");
        sql.append(" array_to_string(array(SELECT item_name FROM data_sales_detail dsd \n");
        sql.append(" inner join mst_item msc on  dsd.product_id = msc.item_id\n");
        sql.append(" WHERE dsd.slip_no  = ds.slip_no and dsd.shop_id  = ds.shop_id and product_division in (2,4)\n");
        sql.append(" ), 'ÅA') AS item_name,\n");
        sql.append(" (select sum(product_num) from view_data_sales_detail_valid where shop_id = ds.shop_id \n");
        sql.append(" and slip_no = ds.slip_no and product_division in (2,4)) as Sale_TotalProductNum,\n");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append(" (select sum(discount_detail_value_no_tax) from view_data_sales_detail_valid \n");
            sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in(2,4)) as Sale_Total,\n");
        } else {
            sql.append(" (select sum(discount_detail_value_in_tax) from view_data_sales_detail_valid \n");
            sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in (2,4)) as Sale_Total,\n");
        }
        sql.append(" (array_to_string(array(select payment_method_name from data_payment_detail \n");
        sql.append(" left join mst_payment_method using(payment_method_id) \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 3)), 'ÅA')) as countPayment3,\n");
        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and delete_date is null and shop_id = ds.shop_id \n");
        sql.append(" and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 3)) as TotalPayment3,\n");
        sql.append(" array_to_string(array(select payment_method_name from data_payment_detail \n");
        sql.append(" left join mst_payment_method using(payment_method_id) \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and payment_method_id in (\n");
        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 2)), 'ÅA') as countPayment2,\n");
        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" and payment_method_id in \n");
        sql.append(" ( ");
        sql.append(" select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 2)\n");
        sql.append(" ) as TotalPayment2,\n");
        sql.append(" (select sum(payment_value) \n");
        sql.append(" - (select change_value from data_payment \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" order by payment_no desc limit 1) \n");
        sql.append(" from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" and payment_method_id in \n");


        sql.append(" (select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 1)\n");
        sql.append(" ) as TotalPayment1,\n");


        sql.append(" (select sum(payment_value) from data_payment_detail \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
        sql.append(" and payment_method_id in \n");
        sql.append(" (select payment_method_id from mst_payment_method \n");
        sql.append(" where payment_class_id = 4)) as TotalPayment4,\n");
        sql.append(" (select -bill_value from data_payment \n");
        sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and delete_date is null \n");
        sql.append(" and payment_no = ( \n");
        sql.append(" select max(payment_no) from data_payment \n");
        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id) \n");
        sql.append(" ) as total_BillValue,\n");

        sql.append(" 0 as consumption_num, \n");
        sql.append("0 as Total_ProductValueDigestion, \n");



        sql.append("  (Select sum(product_num) \n");
        sql.append("  from data_contract dc\n");
        sql.append("  where dc.shop_id = ds.shop_id and dc.slip_no = ds.slip_no\n");
        sql.append("  ) as Left_ProductNum,\n");
        sql.append(" (select sum(product_value) from data_sales_detail where slip_no = ds.slip_no  \n");
        sql.append(" and shop_id = ds.shop_id and product_division=8\n");
        sql.append(" ) as Left_ProductValue,\n");

        sql.append(" (select max(sales_date) from data_sales \n");
        sql.append(" where  shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and customer_id = mc.customer_id) as last_visit \n");
        sql.append(" from data_sales ds\n");
        sql.append(" inner join mst_shop ms using(shop_id)\n");
        sql.append(" left join mst_customer mc using(customer_id)\n");
        sql.append(" left join mst_staff mst using(staff_id)\n");
        sql.append(" where ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append(" and ds.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
        sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
        sql.append(" and exists( \n");
        sql.append(" select * from data_sales_detail dsd where ds.shop_id = dsd.shop_id and ds.slip_no = dsd.slip_no\n");
        sql.append(" and dsd.product_division=8 \n");
        sql.append(" )\n");

        sql.append(" group by ds.shop_id, ms.shop_name, mc.customer_no,cusName,ds.sales_date,ds.slip_no,\n");
        sql.append(" staff_name,response_name,contract_TotalProductValue,item_name,Sale_TotalProductNum,\n");
        sql.append(" Sale_Total,countPayment3,TotalPayment3,countPayment2,\n");
        sql.append(" TotalPayment2,TotalPayment1,TotalPayment4,total_BillValue,mc.customer_id,ds.insert_date\n");

        sql.append(" ) a\n");
        sql.append(" group by a.delete_date ,a.shop_id, a.shop_name, a.customer_no,a.cusName,a.sales_date,a.slip_no,\n");
        sql.append(" a.staff_name,response_name,technic_name,a.course_name,a.contract_TotalProductValue,a.item_name,a.Sale_TotalProductNum,\n");
        sql.append(" a.Sale_Total  ,a.countPayment3 ,a.TotalPayment3,a.countPayment2,a.TotalPayment2,a.totalpayment1,a.totalpayment4,a.total_billvalue,\n");
        sql.append(" a.left_productnum,a.left_productvalue,a.last_visit\n");
        //è§ïi
//        sql.append(" UNION \n");
//        //sql.append(" Select  dc.delete_date ,dc.contract_status,ds.shop_id, ms.shop_name, mc.customer_no,\n");
//        sql.append(" Select  null as delete_date ,null as contract_status,ds.shop_id, ms.shop_name, mc.customer_no,\n");
//        sql.append(" mc.customer_name1 || 'Å@' || mc.customer_name2 as cusName,\n");
//        sql.append(" ds.sales_date, ds.slip_no,staff_name1 || 'Å@' || staff_name2 as staff_name,\n");
//        sql.append(" array_to_string(array(SELECT response_name FROM data_response_effect\n");
//        sql.append(" inner join mst_response using(response_id)\n");
//        sql.append(" WHERE slip_no  = ds.slip_no order by response_id asc\n");
//        sql.append(" ), 'ÅA') AS response_name,\n");
//        sql.append(" array_to_string(array(SELECT technic_name FROM data_sales_detail dsd\n");
//        sql.append(" inner join mst_technic mt on  dsd.product_id = mt.technic_id");
//        sql.append(" WHERE dsd.slip_no  = ds.slip_no and dsd.shop_id  = ds.shop_id and product_division = 1 \n");
//        sql.append(" and mt.technic_class_id = 14\n");
//        sql.append(" ), 'ÅA') AS technic_name,\n");
//        sql.append(" '' AS course_name,\n");
//        sql.append(" 0 as contract_TotalProductValue,\n");
//        sql.append(" array_to_string(array(SELECT item_name FROM data_sales_detail dsd \n");
//        sql.append(" inner join mst_item msc on  dsd.product_id = msc.item_id\n");
//        sql.append(" WHERE dsd.slip_no  = ds.slip_no and dsd.shop_id  = ds.shop_id and product_division in (2,4)\n");
//        sql.append(" ), 'ÅA') AS item_name,\n");
//        sql.append(" (select sum(product_num) from view_data_sales_detail_valid where shop_id = ds.shop_id \n");
//        sql.append(" and slip_no = ds.slip_no and product_division in (2,4)) as Sale_TotalProductNum,\n");
//        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
//            sql.append(" (select sum(discount_detail_value_no_tax) from view_data_sales_detail_valid \n");
//            sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in (2,4)) as Sale_Total,\n");
//        } else {
//            sql.append(" (select sum(discount_detail_value_in_tax) from view_data_sales_detail_valid \n");
//            sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in (2,4)) as Sale_Total,\n");
//        }
//
//        sql.append(" (array_to_string(array(select payment_method_name from data_payment_detail \n");
//        sql.append(" left join mst_payment_method using(payment_method_id) \n");
//        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and payment_method_id in (\n");
//        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 2)), 'ÅA')) as countPayment3,\n");
//
//        sql.append(" (select sum(payment_value) from data_payment_detail \n");
//        sql.append(" where slip_no = ds.slip_no and delete_date is null and shop_id = ds.shop_id \n");
//        sql.append(" and payment_method_id in (\n");
//        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 3)) as TotalPayment3,\n");
//
//        sql.append(" array_to_string(array(select payment_method_name from data_payment_detail \n");
//        sql.append(" left join mst_payment_method using(payment_method_id) \n");
//        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and payment_method_id in (\n");
//        sql.append(" select payment_method_id from mst_payment_method where payment_class_id = 2)), 'ÅA') as countPayment2,\n");
//        sql.append(" (select sum(payment_value) from data_payment_detail \n");
//        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
//        sql.append(" and payment_method_id in \n");
//        sql.append(" ( ");
//        sql.append(" select payment_method_id from mst_payment_method \n");
//        sql.append(" where payment_class_id = 2)\n");
//        sql.append(" ) as TotalPayment2,\n");
//        sql.append(" (select sum(payment_value) \n");
//        sql.append(" - (select change_value from data_payment \n");
//        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
//        sql.append(" order by payment_no desc limit 1) \n");
//        sql.append(" from data_payment_detail \n");
//        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
//        sql.append(" and payment_method_id in \n");
//        sql.append(" (select payment_method_id from mst_payment_method \n");
//        sql.append(" where payment_class_id = 1)\n");
//        sql.append(" ) as TotalPayment1,\n");
//        sql.append(" (select sum(payment_value) from data_payment_detail \n");
//        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id and delete_date is Null \n");
//        sql.append(" and payment_method_id in \n");
//        sql.append(" (select payment_method_id from mst_payment_method \n");
//        sql.append(" where payment_class_id = 4)) as TotalPayment4,\n");
//        sql.append(" (select bill_value from data_payment \n");
//        sql.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and delete_date is null \n");
//        sql.append(" and payment_no = ( \n");
//        sql.append(" select max(payment_no) from data_payment \n");
//        sql.append(" where slip_no = ds.slip_no and shop_id = ds.shop_id) \n");
//        sql.append(" ) as total_BillValue,\n");
//        sql.append("  0 as consumption_num,\n");
//        sql.append("  0 as Total_ProductValueDigestion,\n");
//        sql.append(" 0 as Left_ProductNum,\n");
//        sql.append(" 0 as Left_ProductValue,\n");
//        //sql.append(" max(sales_date)  as last_visit \n");
//        sql.append(" (select max(sales_date) from data_sales \n");
//        sql.append(" where  shop_id in (" + paramBean.getShopIDList() + ")\n");
//        sql.append(" and customer_id = mc.customer_id) as last_visit \n");
//        sql.append(" from data_sales ds\n");
//        sql.append(" inner join mst_shop ms using(shop_id)\n");
//        sql.append(" inner join mst_customer mc using(customer_id)\n");
//        sql.append(" inner join mst_staff mst using(staff_id)\n");
//        sql.append(" inner join  data_sales_detail dsds on dsds.shop_id = ds.shop_id and ds.slip_no = dsds.slip_no\n");
//
//        //sql.append("left join  data_contract dc on dc.shop_id = ds.shop_id and ds.slip_no = dc.slip_no\n");
//        //sql.append("left outer join data_contract_digestion dcd \n");
//        //sql.append("on ds.shop_id = dcd.contract_shop_id and dc.contract_no = dcd.contract_no \n");
//        //sql.append("and dc.contract_detail_no = dcd.contract_detail_no\n");
//
//        sql.append(" where  ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
//        sql.append(" and ds.sales_date between " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodStartDate.getDate()));
//        sql.append("  and " + SQLUtil.convertForSQLDateOnly(cmbTargetPeriodEndDate.getDate()) + "");
//        sql.append("  and dsds.product_division in (2,4) ");
//        sql.append("  and ds.delete_date is null and dsds.delete_date is null");
//        sql.append("  and ds.slip_no not in (select slip_no from data_contract where shop_id = ds.shop_id and delete_date is null)");
//        //sql.append(" group by dc.delete_date ,dc.contract_status,ds.shop_id, ms.shop_name, mc.customer_no,cusName,ds.sales_date,ds.slip_no,\n");
//        sql.append(" group by ds.shop_id, ms.shop_name, mc.customer_no,cusName,ds.sales_date,ds.slip_no,\n");
//        sql.append(" staff_name,response_name,contract_TotalProductValue,item_name,Sale_TotalProductNum,\n");
//        sql.append(" Sale_Total,countPayment3,TotalPayment3,countPayment2,\n");
//        //sql.append(" TotalPayment2,TotalPayment1,TotalPayment4,total_BillValue,mc.customer_id,dc.product_id\n");
//        sql.append(" TotalPayment2,TotalPayment1,TotalPayment4,total_BillValue,mc.customer_id \n");
//        //Edit start 2013-09-11 ÉzÉA
//        sql.append("  order by sales_date,shop_id,slip_no asc \n");
        //Edit endt 2013-09-11 ÉzÉA
        //Add start 2013-09-11 ÉzÉA
        sql.append(" ) as cus_history \n");
        //Add end 2013-09-11 ÉzÉA         
        sql.append(" ) as t \n");
        sql.append(" order by t.sales_date,t.shop_id,t.slip_no ");
        return sql.toString();
    }
    private void cmbTargetPeriodEndDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodEndDateFocusGained
        cmbTargetPeriodEndDate.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_cmbTargetPeriodEndDateFocusGained

    private void cmbTargetPeriodStartDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodStartDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTargetPeriodStartDateFocusGained

    private void btnCSVOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCSVOutputActionPerformed
        // TODO add your handling code here:
        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            ReportParameterBean paramBean = new ReportParameterBean();
            // ê≈ãÊï™(ê≈î≤Ç´)
            if (this.rdoTaxBlank.isSelected()) {
                paramBean.setTaxType(ReportParameterBean.TAX_TYPE_BLANK);
            } // ê≈ãÊï™(ê≈çûÇ›)
            else if (this.rdoTaxUnit.isSelected()) {
                paramBean.setTaxType(ReportParameterBean.TAX_TYPE_UNIT);
            }

            boolean logicResult = true;

            //ÉOÉãÅ[Év
            if (cmbTarget1.getSelectedItem() instanceof MstGroup) {
                MstGroup mg = (MstGroup) cmbTarget1.getSelectedItem();
                paramBean.setTargetName(mg.getGroupName());
                paramBean.setShopIDList(mg.getShopIDListAll());
            } //ìXï‹
            else if (cmbTarget1.getSelectedItem() instanceof MstShop) {
                MstShop ms = (MstShop) cmbTarget1.getSelectedItem();
                paramBean.setTargetName(ms.getShopName());
                paramBean.setShopIDList(ms.getShopID().toString());
            }

            //ëŒè€Ç∆Ç»ÇÈìXï‹Ç™ë∂ç›ÇµÇ»Ç¢èÍçá
            if (paramBean.getShopIDList().equals("")) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!outputCSV(paramBean)) {
                return;
            }

        } catch (Exception e) {

            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnCSVOutputActionPerformed

    private boolean outputCSV(ReportParameterBean paramBean) {

        String fileName;
        //------------------
        // ê∏éZèÓïÒ
        //------------------
        fileName = getSaveCSVFileName("å⁄ãqå_ñÒóöó");
        if (fileName != null) {
            boolean compliteFlg = true;
            BufferedWriter bw = null;
            try {

                ConnectionWrapper con = SystemInfo.getConnection();
                ResultSetWrapper rs = con.executeQuery(getCusContractHistorySQL(paramBean));
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                //bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName), "Shift_JIS"));
                bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName)));
                String line;
                String header = "";
                header = header += "\"" + "ìXï‹ÉRÅ[Éh" + "\"" + ",";
                header = header += "\"" + "ìXï‹ñº" + "\"" + ",";
                header = header += "\"" + "âÔàıNO" + "\"" + ",";
                header = header += "\"" + "éÅñº" + "\"" + ",";
                header = header += "\"" + "å_ñÒì˙" + "\"" + ",";
                header = header += "\"" + "ì`ï[No." + "\"" + ",";
                header = header += "\"" + "íSìñé“" + "\"" + ",";
                header = header += "\"" + "î}ëÃ" + "\"" + ",";
                header = header += "\"" + "óàìXåãâ " + "\"" + ",";

                header = header += "\"" + "å_ñÒèÛãµ" + "\"" + ",";

                header = header += "\"" + "ÉRÅ[ÉXå_ñÒì‡óe" + "\"" + ",";
                header = header += "\"" + "ÉRÅ[ÉXå_ñÒã‡äz" + "\"" + ",";
                header = header += "\"" + "è§ïiå_ñÒì‡óe" + "\"" + ",";
                header = header += "\"" + "å¬êî" + "\"" + ",";
                header = header += "\"" + "è§ïiå_ñÒã‡äz" + "\"" + ",";
                header = header += "\"" + "äÑïäâÒêî" + "\"" + ",";
                header = header += "\"" + "äÑïäã‡äz" + "\"" + ",";
                header = header += "\"" + "ÉJÅ[ÉhéÌï " + "\"" + ",";
                header = header += "\"" + "ÉJÅ[Éhã‡äz" + "\"" + ",";
                header = header += "\"" + "êUçûã‡äz" + "\"" + ",";
                header = header += "\"" + "ã‡åîã‡äz" + "\"" + ",";
                header = header += "\"" + "îÑä|ã‡" + "\"" + ",";
                header = header += "\"" + "è¡âªâÒêî" + "\"" + ",";
                header = header += "\"" + "è¡âªã‡äz" + "\"" + ",";
                header = header += "\"" + "écâÒêî" + "\"" + ",";
                header = header += "\"" + "ñ¢è¡âªã‡äz" + "\"" + ",";
                header = header += "\"" + "ç≈èIóàìXì˙" + "\"" + "";
                bw.write(header);
                bw.newLine();
                while (rs.next()) {
                    line = "";
                    // ìXï‹ÉRÅ[Éh 
                    line += "\"" + (rs.getString("shop_id") != null ? rs.getString("shop_id") : "") + "\"" + ",";
                    //ìXï‹ñº 
                    line += "\"" + (rs.getString("shop_name") != null ? rs.getString("shop_name") : "") + "\"" + ",";
                    // âÔàıNO
                    line += "\"" + (rs.getString("customer_no") != null ? rs.getString("customer_no") : "") + "\"" + ",";
                    // éÅñº
                    line += "\"" + (rs.getString("cusname") != null ? rs.getString("cusname") : "") + "\"" + ",";
                    // å_ñÒì˙ 
                    line += "\"" + (rs.getString("sales_date") != null ? dateFormat.format(rs.getDate("sales_date")) : "") + "\"" + ",";
                    // ì`ï[No 
                    line += "\"" + (rs.getString("slip_no") != null ? rs.getString("slip_no") : "") + "\"" + ",";
                    // íSìñé“
                    line += "\"" + (rs.getString("staff_name") != null ? rs.getString("staff_name") : "") + "\"" + ",";
                    // î}ëÃ
                    line += "\"" + (rs.getString("response_name") != null ? rs.getString("response_name") : "") + "\"" + ",";
                    // óàìXåãâ 
                    line += "\"" + (rs.getString("technic_name") != null ? rs.getString("technic_name") : "") + "\"" + ",";
                    // å_ñÒèÛãµ
                    String strStatus = "";
                    strStatus = rs.getString("contract_status");
                    line += "\"" + (strStatus != null ? strStatus : "") + "\"" + ",";
                    // ÉRÅ[ÉXå_ñÒì‡óe
                    line += "\"" + (rs.getString("course_name") != null ? rs.getString("course_name") : "") + "\"" + ",";
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                        // ÉRÅ[ÉXå_ñÒã‡äz 
                        line += "\"" + rs.getInt("contract_totalproductvalue_no_tax") + "\"" + ",";
                    } else {
                        line += "\"" + rs.getInt("contract_totalproductvalue_in_tax") + "\"" + ",";
                    }
                    //è§ïiå_ñÒì‡óe  
                    line += "\"" + (rs.getString("item_name") != null ? rs.getString("item_name") : "") + "\"" + ",";
                    //å¬êî
                    line += "\"" + (rs.getString("Sale_TotalProductNum") != null ? rs.getString("Sale_TotalProductNum") : "") + "\"" + ",";
                    //è§ïiå_ñÒã‡äz
                    line += "\"" + rs.getInt("sale_total") + "\"" + ",";
                    //äÑïä
                    //âÒêî	
                    line += "\"" + (rs.getString("countpayment3") != null ? rs.getString("countpayment3") : "") + "\"" + ",";
                    //ã‡äz 
                    line += "\"" + rs.getInt("TotalPayment3") + "\"" + ",";
                    //ÉJÅ[Éh
                    //éÌï  
                    line += "\"" + (rs.getString("countPayment2") != null ? rs.getString("countPayment2") : "") + "\"" + ",";
                    //ã‡äz
                    line += "\"" + rs.getInt("totalpayment2") + "\"" + ",";
                    //êUçû.ã‡äz
                    line += "\"" + rs.getInt("totalpayment1") + "\"" + ",";
                    //ã‡åî.ã‡äz
                    line += "\"" + rs.getInt("totalpayment4") + "\"" + ",";
                    //îÑä|ã‡.ã‡äz
                    line += "\"" + rs.getInt("total_billvalue") + "\"" + ",";
                    //è¡âªâÒêî
                    line += "\"" + (rs.getString("consumption_num") != null ? rs.getString("consumption_num") : "") + "\"" + ",";
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                        //è¡âªã‡äz 
                        line += "\"" + rs.getInt("total_productvaluedigestion_no_tax") + "\"" + ",";
                    } else {
                        // è¡âªã‡äz
                        line += "\"" + rs.getInt("total_productvaluedigestion_in_tax") + "\"" + ",";
                    }
                    //écâÒêî	
                    line += "\"" + rs.getString("remaining_product_num") + "\"" + ",";

                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                        // ñ¢è¡âªã‡äz 
                        line += "\"" + rs.getInt("remaining_no_tax") + "\"" + ",";
                    } else {
                        //  ñ¢è¡âªã‡äz 
                        line += "\"" + rs.getInt("remaining_in_tax") + "\"" + ",";
                    }
                    //ç≈èIóàìXì˙
                    line += "\"" + rs.getDate("last_visit").toString() + "\"";

                    bw.write(line);
                    bw.newLine();
                }

            } catch (FileNotFoundException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                compliteFlg = false;
            } catch (IOException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                compliteFlg = false;
            } catch (SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                compliteFlg = false;
            } finally {
                try {
                    if (bw != null) {
                        bw.flush();
                        bw.close();
                    }
                } catch (Exception e) {
                }
            }
            return compliteFlg;
        }
        return true;

    }

    /**
     * CSVÉtÉ@ÉCÉãÇäJÇ≠
     */
    private String getSaveCSVFileName(String fileName) {
        JFileChooser jfc = new JFileChooser();
        WildcardFileFilter filter = new WildcardFileFilter("*.csv", "CSVÉtÉ@ÉCÉã");

        File file = new File(new File(fileName + "_" + String.format("%1$tY%1$tm%1$td%2$ts", new GregorianCalendar(), new java.util.Date()) + ".csv").getAbsolutePath());
        jfc.setSelectedFile(file);
        jfc.setFileFilter(filter);

        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            return jfc.getSelectedFile().getAbsolutePath();
        }
        return null;
    }

    /**
     * inputCheckyear
     *
     * @param cmb
     * @param itemName
     * @return
     */
    private boolean inputCheckYear(JComboBox cmb, String itemName) {
        NumberUtils numUtil = new NumberUtils();
        if (!numUtil.isNumber(cmb.getSelectedItem().toString())) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, itemName),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmb.requestFocusInWindow();
            return false;
        }

        return true;
    }

    private GregorianCalendar dateToGregorianCalendar(java.util.Date date) {
        GregorianCalendar gCal = new GregorianCalendar();
        gCal.setTime(date);
        return gCal;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup aggregateGroup;
    private javax.swing.ButtonGroup aggregationGroup;
    private javax.swing.JButton btnCSVOutput;
    private javax.swing.JButton btnExcelReport1;
    private javax.swing.ButtonGroup btnPerformance;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.ButtonGroup buttonGroup8;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cmbTarget1;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodEndDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodStartDate;
    private javax.swing.ButtonGroup countGroup;
    private javax.swing.ButtonGroup customerGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblPeriod1;
    private javax.swing.JLabel lblTarget1;
    private javax.swing.JLabel lblTax1;
    private javax.swing.ButtonGroup outputGroup;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private javax.swing.ButtonGroup reportTypeGroup;
    private javax.swing.ButtonGroup taxGroup;
    private javax.swing.ButtonGroup taxGroup2;
    private javax.swing.ButtonGroup timeGroup;
    private javax.swing.ButtonGroup typeGroup;
    // End of variables declaration//GEN-END:variables

    private void writeExcelValue(JExcelApi jx, int col, int row, String value) throws SQLException {
        jx.setValue(col, row, value);
    }

    public CusContractHistoryReportFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    private class CusContractHistoryReportFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponentStaffShopRankingFocusTraversalPolicyÅB aContainer ÇÕ
         * aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(cmbTarget1)) {
                return cmbTargetPeriodStartDate;
            } else if (aComponent.equals(cmbTargetPeriodStartDate)) {
                return cmbTargetPeriodEndDate;
            } else if (aComponent.equals(cmbTargetPeriodEndDate)) {
                if (rdoTaxUnit.isSelected()) {
                    return rdoTaxUnit;
                }
                return rdoTaxBlank;
            }
            return this.getStartComponent();
        }

        /**
         * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {

            return this.getStartComponent();
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer êÊì™ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getFirstComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer aContainer - ç≈å„ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getLastComponent(Container aContainer) {
            if (rdoTaxUnit.isSelected()) {
                return rdoTaxUnit;
            }
            return rdoTaxBlank;
        }

        /**
         * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB aContainer
         * ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
         *
         * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getDefaultComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB show() Ç‹ÇΩÇÕ setVisible(true)
         * ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
         * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
         * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
         * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
         * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
         */
        public Component getInitialComponent(Window window) {
            return this.getStartComponent();
        }

        private Component getStartComponent() {
            if (cmbTarget1.getItemCount() == 1) {
                return cmbTargetPeriodStartDate;
            }
            return cmbTarget1;
        }
    }
}
