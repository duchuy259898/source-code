/*
 * CusContractHistoryReportPanel.java
 *
 * Created on 2013/04/18, 13:00
 */
package com.geobeck.sosia.pos.report;

import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.*;
import javax.swing.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.hair.report.logic.*;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.account.MstAccountSetting;
import com.geobeck.sosia.pos.report.bean.RemainingParameterBean;

import com.geobeck.sosia.pos.util.*;
import java.text.SimpleDateFormat;
import com.geobeck.sql.*;
import com.geobeck.swing.filechooser.WildcardFileFilter;
import com.geobeck.util.CheckUtil;
import com.geobeck.util.SQLUtil;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.SQLException;
import java.util.ArrayList;

import java.util.GregorianCalendar;
import org.apache.commons.lang.math.NumberUtils;
import java.util.HashMap;
import java.util.Iterator;

/**
 *
 * @author vtbphuong
 */
public class ServiceRemainingReportPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private CusContractHistoryReportFocusTraversalPolicy ftp =
            new CusContractHistoryReportFocusTraversalPolicy();
    private static String messageErrorDate = "ä˙ä‘Ç™ê≥ÇµÇ≠Ç†ÇËÇ‹ÇπÇÒ" ;

    /**
     * Creates new form SalesTransitionReportPanel
     */
    public ServiceRemainingReportPanel() {

        initComponents();
        this.setSize(958, 750);
        this.setPath("ññ±í†ï[>>ññ±écàÍóó");
        this.setTitle("ññ±écàÍóó");
        this.setKeyListener();
        init();

    }

    private void setKeyListener() {
        cmbCourseStartDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbCourseStartDate.addFocusListener(SystemInfo.getSelectText());
        cmbCourseStartDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbCourseStartDate.addFocusListener(SystemInfo.getSelectText());
        cmbDigestionEndDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbDigestionEndDate.addFocusListener(SystemInfo.getSelectText());
        cmbDigestionStartDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbDigestionStartDate.addFocusListener(SystemInfo.getSelectText());
        rdoTaxBlank.addKeyListener(SystemInfo.getMoveNextField());
        rdoTaxUnit.addKeyListener(SystemInfo.getMoveNextField());
        rdCourseList.addKeyListener(SystemInfo.getMoveNextField());
        rdCustomerList.addKeyListener(SystemInfo.getMoveNextField());
    }

    /**
     * init form
     */
    private void init() {

        Calendar cal = Calendar.getInstance();
        SystemInfo.initGroupShopComponents(cmbTarget, 3);

        //ä˙ä‘Çèâä˙ê›íËÇ∑ÇÈ    
        Calendar cdr = Calendar.getInstance();
        cdr.setTime(new Date());
        //îÑè„ç\ê¨Ç‚ÇªÇÃêÑà⁄ÉRÉìÉgÉçÅ[ÉãÇèâä˙ê›íËÇ∑ÇÈ

        cal.add(Calendar.MONTH, 1);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.add(Calendar.YEAR, -1);
        cal.add(Calendar.YEAR, 1);
        cal.add(Calendar.DAY_OF_MONTH, -1);

        //ëŒè€ä˙ä‘ÇÃê›íË
        this.cmbDigestionStartDate.setDate(new Date());
        this.cmbDigestionEndDate.setDate(new Date());
        this.cmbCourseStartDate.setDate(new Date());
        this.cmbCourseEndDate.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        taxGroup = new javax.swing.ButtonGroup();
        typeGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblTarget1 = new javax.swing.JLabel();
        cmbTarget = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        btnExcelReport = new javax.swing.JButton();
        lblPeriod1 = new javax.swing.JLabel();
        cmbDigestionStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        cmbDigestionEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lblTax1 = new javax.swing.JLabel();
        rdoTaxUnit = new javax.swing.JRadioButton();
        rdoTaxBlank = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rdCourseList = new javax.swing.JRadioButton();
        rdCustomerList = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        cmbCourseStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        cmbCourseEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel4 = new javax.swing.JLabel();
        ckDigestion = new javax.swing.JCheckBox();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        lblTarget1.setText("ëŒè€");

        //shop.addItem(this.myShop);

        btnExcelReport.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnExcelReport.setBorderPainted(false);
        btnExcelReport.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnExcelReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelReportActionPerformed(evt);
            }
        });

        lblPeriod1.setText("è¡âªä˙ä‘");
        lblPeriod1.setFocusCycleRoot(true);

        cmbDigestionStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbDigestionStartDate.setFocusCycleRoot(true);
        cmbDigestionStartDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbDigestionStartDateFocusGained(evt);
            }
        });

        cmbDigestionEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbDigestionEndDate.setFocusCycleRoot(true);
        cmbDigestionEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbDigestionEndDateFocusGained(evt);
            }
        });

        lblTax1.setText("ê≈ãÊï™");

        taxGroup.add(rdoTaxUnit);
        rdoTaxUnit.setSelected(true);
        rdoTaxUnit.setText("ê≈çû");
        rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxUnit.setContentAreaFilled(false);
        rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTaxUnitActionPerformed(evt);
            }
        });

        taxGroup.add(rdoTaxBlank);
        rdoTaxBlank.setText("ê≈î≤");
        rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxBlank.setContentAreaFilled(false);
        rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxBlank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTaxBlankActionPerformed(evt);
            }
        });

        jLabel1.setText("Å`");
        jLabel1.setFocusCycleRoot(true);

        jLabel2.setText("èoóÕí†ï[");

        typeGroup.add(rdCourseList);
        rdCourseList.setSelected(true);
        rdCourseList.setText("ÉRÅ[ÉXï ");
        rdCourseList.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdCourseList.setOpaque(false);

        typeGroup.add(rdCustomerList);
        rdCustomerList.setText("å⁄ãqï ");
        rdCustomerList.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdCustomerList.setOpaque(false);
        rdCustomerList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdCustomerListActionPerformed(evt);
            }
        });

        jLabel3.setText("å_ñÒä˙ä‘");

        cmbCourseStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbCourseStartDate.setFocusCycleRoot(true);
        cmbCourseStartDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbCourseStartDateFocusGained(evt);
            }
        });

        cmbCourseEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbCourseEndDate.setFocusCycleRoot(true);
        cmbCourseEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbCourseEndDateFocusGained(evt);
            }
        });

        jLabel4.setText("Å`");

        ckDigestion.setText("ê›íË");
        ckDigestion.setOpaque(false);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(lblPeriod1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(lblTarget1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .add(lblTax1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(cmbTarget, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(btnExcelReport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(rdoTaxUnit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rdoTaxBlank, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(rdCourseList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rdCustomerList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                                .add(cmbCourseStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(cmbCourseEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                                .add(cmbDigestionStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(cmbDigestionEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(ckDigestion)))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(lblTarget1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cmbTarget, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(btnExcelReport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdCourseList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdCustomerList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbCourseEndDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbCourseStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(cmbDigestionEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbDigestionStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ckDigestion))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rdoTaxUnit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoTaxBlank, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax1)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(323, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(272, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCourseEndDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbCourseEndDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCourseEndDateFocusGained

    private void cmbCourseStartDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbCourseStartDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCourseStartDateFocusGained

    private void rdoTaxBlankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoTaxBlankActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoTaxBlankActionPerformed

    private void rdoTaxUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoTaxUnitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoTaxUnitActionPerformed

    private void cmbDigestionEndDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbDigestionEndDateFocusGained
        cmbDigestionEndDate.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_cmbDigestionEndDateFocusGained

    private void cmbDigestionStartDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbDigestionStartDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDigestionStartDateFocusGained

    /**
     * ä˙ä‘Ç≈çiÇ¡Çƒè⁄ç◊Ç»îÑè„ÇÃEXCELÉ{É^ÉìÇâüâ∫ÅB
     *
     * @param evt
     */
    private void btnExcelReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelReportActionPerformed

        btnExcelReport.setCursor(null);
        if(!this.checkInput()){
            return;
        }
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            RemainingParameterBean paramBean = new RemainingParameterBean();
            // ê≈ãÊï™(ê≈î≤Ç´)
            if (this.rdoTaxBlank.isSelected()) {
                paramBean.setTaxType(RemainingParameterBean.TAX_TYPE_BLANK);
            } // ê≈ãÊï™(ê≈çûÇ›)
            else if (this.rdoTaxUnit.isSelected()) {
                paramBean.setTaxType(RemainingParameterBean.TAX_TYPE_UNIT);
            }
            boolean logicResult = true;

            try {
                //ÉOÉãÅ[Év
                if (cmbTarget.getSelectedItem() instanceof MstGroup) {
                    MstGroup mg = (MstGroup) cmbTarget.getSelectedItem();
                    paramBean.setTargetName(mg.getGroupName());
                    paramBean.setShopIDList(mg.getShopIDListAll());
                } //ìXï‹
                else if (cmbTarget.getSelectedItem() instanceof MstShop) {
                    MstShop ms = (MstShop) cmbTarget.getSelectedItem();
                    paramBean.setTargetName(ms.getShopName());
                    paramBean.setShopIDList(ms.getShopID().toString());
                }

                //ëŒè€Ç∆Ç»ÇÈìXï‹Ç™ë∂ç›ÇµÇ»Ç¢èÍçá
                if (paramBean.getShopIDList().equals("")) {
                    MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                paramBean.setCourseStartDate(this.cmbCourseStartDate.getDateStr());
                paramBean.setCourseEndDate(this.cmbCourseEndDate.getDateStr());
                paramBean.setCourseStartDateObj(this.cmbCourseStartDate.getDate());
                paramBean.setCourseEndDateObj(this.cmbCourseEndDate.getDate()); 
                if(ckDigestion.isSelected()){
                    paramBean.setDigestionStartDate(this.cmbDigestionStartDate.getDateStr());
                    paramBean.setDigestionEndDate(this.cmbDigestionEndDate.getDateStr());
                    paramBean.setDigestionStartDateObj(this.cmbDigestionStartDate.getDate());
                    paramBean.setDigestionEndDateObj(this.cmbDigestionEndDate.getDate());
                }else{
                    paramBean.setDigestionStartDate(this.cmbCourseStartDate.getDateStr());
                    paramBean.setDigestionEndDate(this.cmbCourseEndDate.getDateStr());
                    paramBean.setDigestionStartDateObj(this.cmbCourseStartDate.getDate());
                    paramBean.setDigestionEndDateObj(this.cmbCourseEndDate.getDate());
                }
                ConnectionWrapper con = SystemInfo.getConnection();
                if(rdCourseList.isSelected()){
                   ResultSetWrapper rs = con.executeQuery(getCourseListSQL(paramBean));
                   rs.last();
                   int count = rs.getRow();
                   rs.beforeFirst();
                   if (count > 0) {
                       // ê≈çûÇ›•ê≈ï ÇÃãÊï™
                       String tax = "";
                       if (paramBean.getTaxType() == RemainingParameterBean.TAX_TYPE_BLANK) {
                           tax = "ê≈î≤";
                       } else if (paramBean.getTaxType() == RemainingParameterBean.TAX_TYPE_UNIT) {
                           tax = "ê≈çû";
                       }

                       JExcelApi jx = new JExcelApi("ÉRÅ[ÉXï ññ±écàÍóó");
                       jx.setTemplateFile("/reports/ÉRÅ[ÉXï ññ±écàÍóó.xls");
                       // ÉwÉbÉ_
                       jx.setValue(2, 3, String.format("%1$tY/%1$tm/%1$td", paramBean.getCourseStartDateObj()) + " Å` " + String.format("%1$tY/%1$tm/%1$td", paramBean.getCourseEndDateObj()));
                       jx.setValue(2, 4, String.format("%1$tY/%1$tm/%1$td", paramBean.getDigestionStartDateObj()) + " Å` " + String.format("%1$tY/%1$tm/%1$td", paramBean.getDigestionEndDateObj()));
                       jx.setValue(2, 5, paramBean.getTargetName());
                       jx.setValue(2, 6,tax);
                       int row = 10;
                       // í«â¡çsêîÉZÉbÉg
                       jx.insertRow(row, count - 1);
                       while (rs.next()) {
                           jx.setValue(1, row, rs.getString("course_class_name"));
                           jx.setValue(2, row, rs.getString("course_name"));
                           jx.setValue(3, row, rs.getDouble("product_value")); // 1
                           jx.setValue(4, row, rs.getDouble("product_num")); // 2
                           jx.setValue(5, row, rs.getDouble("pre_product_num")); // 3
                           jx.setValue(7, row, rs.getDouble("product_value") + rs.getDouble("pre_product_value") ); // 5
                           jx.setValue(9, row, rs.getDouble("pre_digestion_num")); // 6
                           jx.setValue(10, row,rs.getDouble("pre_digestion_value")); // 7
                           jx.setValue(11, row,rs.getDouble("digestion_num")); // 8
                           jx.setValue(12, row,rs.getDouble("digestion_value")); // 9
                           jx.setValue(14, row,rs.getDouble("product_num") +  rs.getDouble("pre_product_num")   - rs.getDouble("pre_digestion_num") - rs.getDouble("digestion_num")  - rs.getDouble("invalid_num")); // 10 
                           // Å¶áJÅÅ áD-áF-áHÅ@ÇΩÇæÇµÅAóLå¯ä˙å¿Ç™êÿÇÍÇƒÇ¢ÇÈå_ñÒÇÃécè¡âªã‡äzÇÕèWåvÇµÇ»Ç¢ 
                           jx.setValue(15, row,rs.getDouble("product_value") + rs.getDouble("pre_product_value") - rs.getDouble("pre_digestion_value") - rs.getDouble("digestion_value") - rs.getDouble("invalid_value")); // 11 
                           jx.setValue(16, row,rs.getDouble("invalid_enddate_num"));// 12
                           jx.setValue(17, row,rs.getDouble("invalid_enddate_value")); // 13 

                           row += 1;
                     }
                        jx.removeRow(row);
                       jx.openWorkbook();

                   } else {
                       MessageDialog.showMessageDialog(this,
                           MessageUtil.getMessage(4001),
                           this.getTitle(),
                           JOptionPane.ERROR_MESSAGE);
                   }
                }else{
                   ResultSetWrapper rs = con.executeQuery(getCustomerListSQL(paramBean));
                   rs.last();
                   int count = rs.getRow();
                   rs.beforeFirst();
                   if (count > 0) {
                       // ê≈çûÇ›•ê≈ï ÇÃãÊï™
                       String tax = "";
                       if (paramBean.getTaxType() == RemainingParameterBean.TAX_TYPE_BLANK) {
                           tax = "ê≈î≤";
                       } else if (paramBean.getTaxType() == RemainingParameterBean.TAX_TYPE_UNIT) {
                           tax = "ê≈çû";
                       }

                       JExcelApi jx = new JExcelApi("å⁄ãqï ññ±écàÍóó");
                        jx.setTemplateFile("/reports/å⁄ãqï ññ±écàÍóó.xls");
                       // ÉwÉbÉ_
                       jx.setValue(2, 3, String.format("%1$tY/%1$tm/%1$td", paramBean.getCourseStartDateObj()) + " Å` " + String.format("%1$tY/%1$tm/%1$td", paramBean.getCourseEndDateObj()));
                       jx.setValue(2, 4, String.format("%1$tY/%1$tm/%1$td", paramBean.getDigestionStartDateObj()) + " Å` " + String.format("%1$tY/%1$tm/%1$td", paramBean.getDigestionEndDateObj()));
                       jx.setValue(2, 5, paramBean.getTargetName());
                       jx.setValue(2, 6,tax);
                       int row = 10;
                       // í«â¡çsêîÉZÉbÉg
                       jx.insertRow(row, count - 1);

                       while (rs.next()) {

                           //nhanvt start edit 20141009 Request #31223
                           //if((rs.getDouble("product_num") - rs.getDouble("pre_digestion_num") - rs.getDouble("digestion_num") )>=0 ){
                               jx.setValue(1, row, rs.getString("customer_no")); //1
                               jx.setValue(2, row, rs.getString("customer_name")); // 2
                               jx.setValue(3, row, rs.getString("course_name")); // 3
                               //IVS start add 2022/07/12 0624_èoóÕçÄñ⁄ÇÃí«â¡
							   jx.setValue( 4, row, rs.getString("staff_name")); // 4
							   jx.setValue( 5, row, rs.getDate("sales_date")); // 5
							   jx.setValue( 6, row, rs.getDate("valid_date")); // 6
							   jx.setValue( 7, row, rs.getDouble("product_value")); // 7
							   jx.setValue( 8, row, rs.getDouble("product_num")); // 8
							   jx.setValue( 9, row, rs.getDouble("pre_digestion_num")); // 9
							   jx.setValue(10, row, rs.getDouble("digestion_num")); // 10
							   jx.setValue(11, row, rs.getDouble("digestion_value")); // 11
							   jx.setValue(12, row, rs.getDouble("invalid_num")); // 12
							   jx.setValue(13, row, rs.getDouble("invalid_value")); // 13
							   jx.setValue(14, row, rs.getDouble("invalid_enddate_num"));// 14
							   jx.setValue(15, row, rs.getDouble("invalid_enddate_value")); // 15
                               //IVS end add 2022/07/12 0624_èoóÕçÄñ⁄ÇÃí«â¡
                               row += 1;
                              
                          // }
                           //nhanvt end edit 20141009 Request #31223
                     }
                       
                       jx.removeRow(row);
                       jx.openWorkbook();

                   } else {
                       MessageDialog.showMessageDialog(this,
                           MessageUtil.getMessage(4001),
                           this.getTitle(),
                           JOptionPane.ERROR_MESSAGE);
                   }
                }
               

            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1099),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            // ÉGÉâÅ[éû
            if (!logicResult) {
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            }
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnExcelReportActionPerformed

    private void rdCustomerListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdCustomerListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdCustomerListActionPerformed

    private String getCourseListSQL(RemainingParameterBean paramBean) {
        StringBuilder sql = new StringBuilder();
        double taxRate = SystemInfo.getTaxRate(paramBean.getCourseStartDateObj());
        String startCourseDate = SQLUtil.convertForSQLDateOnly(paramBean.getCourseStartDateObj());
        String endCourseDate = SQLUtil.convertForSQLDateOnly(paramBean.getCourseEndDateObj());
        String startDigestionDate = SQLUtil.convertForSQLDateOnly(paramBean.getDigestionStartDateObj());
        String endDigestionDate = SQLUtil.convertForSQLDateOnly(paramBean.getDigestionEndDateObj());
        
        sql.append(" SELECT *  \n ");
        sql.append(" FROM ( ");
        sql.append(" SELECT  mcc.course_class_name   \n ");
        sql.append("         , mc.course_name  \n  ");
        if(paramBean.getTaxType() == RemainingParameterBean.TAX_TYPE_UNIT ){
            //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
            //sql.append("         ,sum(coalesce(dc.product_value,0)) AS product_value   \n "); // á@
            sql.append("         ,sum(coalesce(dc.product_values,0)) AS product_value   \n "); // á@
            //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
            sql.append("         ,sum(coalesce(dc.product_num,0)) AS product_num    \n "); //  áA
            sql.append("         ,sum(coalesce(pre_dc.product_num,0)) AS pre_product_num   "); // áB 
            sql.append("         ,sum(coalesce(pre_dc.product_value,0)) AS pre_product_value   \n  "); 
            sql.append("         , sum(coalesce(pre_dcd.digestion_num,0)) AS pre_digestion_num   \n ");// áE
            sql.append("         , round(sum(coalesce(pre_dcd.digestion_value  ,0))) AS pre_digestion_value  \n "); // áF 
            sql.append("         , SUM(COALESCE(dcd.digestion_num,0)) AS digestion_num  \n  "); // áG 
            sql.append("         , round(SUM(COALESCE(dcd.digestion_value,0))) AS digestion_value \n "); // áH 
            sql.append("         , SUM(COALESCE(invalid_dcd.remain_num,0))  AS invalid_num  \n  ");  //  áI	
            sql.append("         , round(SUM(COALESCE(invalid_dcd.remain_value,0)))  AS invalid_value  \n  "); //   áJ
            sql.append("         , SUM(COALESCE(invalid_enddate_dc.remain_num,0))  AS invalid_enddate_num  \n  ");  // áK	
            sql.append("         , round(SUM(COALESCE(invalid_enddate_dc.remain_value,0)))  AS invalid_enddate_value  \n  "); //   áL
        }else{
              //IVS_LVTu start edit 2015/10/19 Bug #43581
//            sql.append("         ,sum(coalesce( ceil(dc.product_value / ( 1.0 + "+ taxRate+ "  )),0)) AS product_value   \n "); // á@
//            sql.append("         ,sum(coalesce(dc.product_num,0)) AS product_num    \n "); //  áA
//            sql.append("         ,sum(coalesce(pre_dc.product_num,0)) AS pre_product_num   "); // áB 
//            sql.append("         ,sum(coalesce( ceil(pre_dc.product_value/ ( 1.0 + "+ taxRate+ "  )),0)) AS pre_product_value   \n  "); 
//            sql.append("         , sum(coalesce(pre_dcd.digestion_num,0)) AS pre_digestion_num   \n ");// áE
//            sql.append("         , sum(coalesce( ceil(pre_dcd.digestion_value / ( 1.0 + "+ taxRate+ "  ) ) ,0)) AS pre_digestion_value  \n "); // áF 
//            sql.append("         , SUM(COALESCE(dcd.digestion_num,0)) AS digestion_num  \n  "); // áG 
//            sql.append("         , SUM(COALESCE(ceil(dcd.digestion_value/ ( 1.0 + "+ taxRate+ "  )),0)) AS digestion_value \n "); // áH 
//            sql.append("         , SUM(COALESCE(invalid_dcd.remain_num,0))  AS invalid_num  \n  ");  //  áI	
//            sql.append("         , SUM(COALESCE( ceil(invalid_dcd.remain_value/ ( 1.0 + "+ taxRate+ "  )),0))  AS invalid_value  \n  "); //   áJ
//            sql.append("         , SUM(COALESCE(invalid_enddate_dc.remain_num,0))  AS invalid_enddate_num  \n  ");  // áK	
//            sql.append("         , SUM(COALESCE(ceil(invalid_enddate_dc.remain_value/ ( 1.0 + "+ taxRate+ "  ) ),0))  AS invalid_enddate_value  \n  "); //   áL
            // LVTu start Edit 2019/08/26 SPOSëùê≈ëŒâû
            //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
            //sql.append("         ,sum(coalesce( ceil(dc.product_value / ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  )),0)) AS product_value   \n "); // á@
            sql.append("         ,sum(coalesce( ceil(dc.product_values / ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  )),0)) AS product_value   \n "); // á@
            //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
            sql.append("         ,sum(coalesce(dc.product_num,0)) AS product_num    \n "); //  áA
            sql.append("         ,sum(coalesce(pre_dc.product_num,0)) AS pre_product_num   "); // áB 
            sql.append("         ,sum(coalesce( ceil(pre_dc.product_value/ ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  )),0)) AS pre_product_value   \n  "); 
            sql.append("         , sum(coalesce(pre_dcd.digestion_num,0)) AS pre_digestion_num   \n ");// áE
            sql.append("         , sum(coalesce( ceil(pre_dcd.digestion_value / ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  ) ) ,0)) AS pre_digestion_value  \n "); // áF 
            sql.append("         , SUM(COALESCE(dcd.digestion_num,0)) AS digestion_num  \n  "); // áG 
            sql.append("         , SUM(COALESCE(ceil(dcd.digestion_value/ ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  )),0)) AS digestion_value \n "); // áH 
            sql.append("         , SUM(COALESCE(invalid_dcd.remain_num,0))  AS invalid_num  \n  ");  //  áI	
            sql.append("         , SUM(COALESCE( ceil(invalid_dcd.remain_value/ ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  )),0))  AS invalid_value  \n  "); //   áJ
            sql.append("         , SUM(COALESCE(invalid_enddate_dc.remain_num,0))  AS invalid_enddate_num  \n  ");  // áK	
            sql.append("         , SUM(COALESCE(ceil(invalid_enddate_dc.remain_value/ ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  ) ),0))  AS invalid_enddate_value  \n  "); //   áL
            // LVTu end Edit 2019/08/26 SPOSëùê≈ëŒâû
        }
        //sql.append(" FROM    ( SELECT  dc.*  \n ");  
        sql.append(" FROM    ( SELECT  dc.* , ds.sales_date \n ");  
        //IVS_LVTu end edit 2015/10/19 Bug #43581
        sql.append("           FROM data_contract dc  ");
        sql.append("           INNER JOIN  data_sales ds ON dc.shop_id = ds.shop_id  ");
        sql.append("	       AND dc.slip_no = ds.slip_no ");
        //Luc start add 20160223 #48753
        //sql.append("           WHERE ds.sales_date <= "+ endCourseDate + "   \n ");
        sql.append("           WHERE ds.sales_date BETWEEN " + startCourseDate + "  and "+ endCourseDate + "   \n "); 
        //Luc end add 20160223 #48753
        sql.append("           and  dc.shop_id in ( " + paramBean.getShopIDList() +"  ) \n ");
        sql.append("           and  ds.delete_date is null   and  dc.delete_date is null   AND ds.sales_date IS NOT NULL \n ");
        sql.append("          )sales  ");
        sql.append(" INNER JOIN  mst_course mc on mc.course_id = sales.product_id ");
        sql.append(" INNER JOIN mst_course_class mcc on mcc.course_class_id = mc.course_class_id  ");
        sql.append(" LEFT JOIN     ( SELECT  dc.*  \n "); 
        //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        sql.append(" , ( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end ) * dc.product_num AS product_values  \n ");
        //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        sql.append("           FROM data_contract dc  ");
        sql.append("           INNER JOIN  data_sales ds ON dc.shop_id = ds.shop_id  ");
        sql.append("	       AND dc.slip_no = ds.slip_no ");
        sql.append("           WHERE ds.sales_date between " + startCourseDate + "  and "+ endCourseDate + "   \n ");
        sql.append("           and  dc.shop_id in ( " + paramBean.getShopIDList() +"  ) \n ");
        sql.append("           and  ds.delete_date is null   and  dc.delete_date is null   AND ds.sales_date IS NOT NULL  \n ");
        sql.append("          )dc  on dc.product_id  = sales.product_id and dc.shop_id = sales.shop_id and dc.contract_no = sales.contract_no and dc.contract_detail_no = sales.contract_detail_no  ");
        sql.append(" LEFT JOIN ( 	 SELECT product_id, contract_no , contract_detail_no  , shop_id , SUM(num ) as digestion_num , SUM( unit_value *  num) as digestion_value  ");
        sql.append("                     FROM (  ");
        //IVS_LVTu start edit 04/05/2015 Bug #36490
        //sql.append("                             SELECT dc.product_id , dc.contract_no, dc.contract_detail_no   , dc.shop_id  , COALESCE(dcd.product_num ,0) as num ,  dc.product_value / dc.product_num  as unit_value      ");
        //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        //sql.append("                             SELECT dc.product_id , dc.contract_no, dc.contract_detail_no   , dc.shop_id  , COALESCE(dcd.product_num ,0) as num ,  ( case dc.product_num when 0 then 0 else dc.product_value / dc.product_num end )  as unit_value      ");
        sql.append("                             SELECT dc.product_id , dc.contract_no, dc.contract_detail_no   , dc.shop_id  , COALESCE(dcd.product_num ,0) as num ,  ( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end )  as unit_value      ");
        //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        //IVS_LVTu end edit 04/05/2015 Bug #36490
        sql.append("                            FROM  data_contract_digestion dcd ");
        sql.append("                            INNER JOIN   data_sales ds ON ds.shop_id = dcd.shop_id  ");
        sql.append("					           AND ds.slip_no = dcd.slip_no  ");
        sql.append("                             LEFT JOIN data_contract dc ON dc.shop_id = dcd.contract_shop_id AND dc.contract_no = dcd.contract_no  ");
        sql.append("                              AND dc.contract_detail_no = dcd.contract_detail_no    ");
        sql.append("                             WHERE  ds.sales_date between "+ startDigestionDate  +" and " + endDigestionDate +"\n");
        sql.append("                            and  ds.delete_date is null   AND  dc.delete_date is null    AND ds.sales_date IS NOT NULL \n ");
        sql.append("                            AND  dc.shop_id in (  "+ paramBean.getShopIDList() +" ) ) dcd GROUP BY product_id, shop_id, contract_no , contract_detail_no   \n");
        sql.append("            ) dcd on sales.product_id  = dcd.product_id and sales.shop_id = dcd.shop_id  and dcd.contract_no = sales.contract_no and dcd.contract_detail_no = sales.contract_detail_no   ");
        //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        //sql.append("LEFT JOIN  ( select dc.product_id, dc.contract_no , dc.contract_detail_no  , dc.shop_id , SUM(dc.product_value) as product_value , SUM( dc.product_num ) as product_num   from  data_contract dc ");
        sql.append("LEFT JOIN  ( select dc.product_id, dc.contract_no , dc.contract_detail_no  , dc.shop_id , SUM( dc.product_num ) as product_num  ");
        sql.append(" , SUM(( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end ) * dc.product_num) AS product_value  \n ");
        sql.append(" from  data_contract dc ");
        //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        sql.append("		 inner join  data_sales ds on ds.shop_id = dc.shop_id  ");
        sql.append("					   and ds.slip_no = dc.slip_no  ");
        sql.append("               where ds.sales_date < " + startCourseDate + " \n ");
        sql.append("                AND  ds.delete_date is null   AND  dc.delete_date is null   AND ds.sales_date IS NOT NULL  \n ");
        sql.append("               and  dc.shop_id in (" +paramBean.getShopIDList() +") GROUP BY dc.product_id , dc.shop_id , dc.contract_no , dc.contract_detail_no    \n " );
        sql.append("         )pre_dc on   pre_dc.product_id = sales.product_id and  pre_dc.shop_id  = sales.shop_id   and pre_dc.contract_no = sales.contract_no and pre_dc.contract_detail_no = sales.contract_detail_no ");
        sql.append("left join ( SELECT contract_no, contract_detail_no ,  product_id, shop_id  , SUM(num ) as digestion_num , SUM( unit_value *  num) as digestion_value ");
        sql.append("		FROM ( SELECT dc.contract_no, dc.contract_detail_no ,dc.product_id , dc.shop_id , COALESCE(dcd.product_num ,0) as num , \n   ");
        //IVS_LVTu start edit 04/05/2015 Bug #36490
        //sql.append("		 dc.product_value / dc.product_num  as unit_value   \n    ");
        //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        //sql.append("		 ( case dc.product_num when 0 then 0 else dc.product_value / dc.product_num end )  as unit_value   \n    ");
        sql.append("		 ( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end )  as unit_value   \n    ");
        //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        //IVS_LVTu end edit 04/05/2015 Bug #36490
        sql.append("		from  data_contract_digestion dcd \n  ");
        sql.append("		inner join  data_sales ds on ds.shop_id = dcd.shop_id    \n  ");
        sql.append("					   and ds.slip_no = dcd.slip_no   \n   ");
        sql.append("		left join data_contract dc on dc.shop_id = dcd.contract_shop_id and dc.contract_no = dcd.contract_no  \n   ");
        sql.append("		and dc.contract_detail_no = dcd.contract_detail_no    \n   ");
        sql.append("            where ds.sales_date < " + startDigestionDate);
        sql.append("                            AND  ds.delete_date is null   AND  dc.delete_date is null   AND ds.sales_date IS NOT NULL  \n ");
        sql.append("            and  dc.shop_id in (" +paramBean.getShopIDList() +") ) pre_dcd  GROUP BY product_id, shop_id , contract_no, contract_detail_no   \n " );
        sql.append(" )pre_dcd on   pre_dcd.product_id = sales.product_id and  pre_dcd.shop_id  = sales.shop_id  and pre_dcd.contract_no = sales.contract_no and pre_dcd.contract_detail_no = sales.contract_detail_no  ");
        	 
        sql.append("left join ( SELECT contract_no, contract_detail_no ,  product_id , shop_id , SUM(product_num - num ) as remain_num , SUM( unit_value *  (product_num - num )) as  remain_value   ");
        sql.append("		FROM ( SELECT dc.contract_no, dc.contract_detail_no ,   dc.product_id , dc.shop_id ,dc.product_num , SUM(COALESCE(dcd.product_num ,0)) as num ,  ");
        //IVS_LVTu start edit 04/05/2015 Bug #36490
        //sql.append("                 dc.product_value / dc.product_num  as unit_value      ");
        //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        //sql.append("                 ( case dc.product_num when 0 then 0 else dc.product_value / dc.product_num end )  as unit_value      ");
        sql.append("                 ( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end )  as unit_value      ");
        //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        //IVS_LVTu end edit 04/05/2015 Bug #36490
        sql.append("                from  data_contract  dc ");
        sql.append("                left join  data_contract_digestion dcd on dc.shop_id = dcd.contract_shop_id and dc.contract_no = dcd.contract_no  ");
        sql.append("                and dc.contract_detail_no = dcd.contract_detail_no    ");
        sql.append("                where dc.valid_date   <=  " + endDigestionDate+  " \n ");
        sql.append("                and  dc.shop_id in (" +paramBean.getShopIDList() +") ");
        sql.append("                              AND  dc.delete_date is null  \n ");
        sql.append("               GROUP  by product_id,  dc.shop_id  ,dc.product_num , dc.product_value  , dc.contract_no, dc.contract_detail_no   ) invalid_dcd  GROUP BY product_id  , shop_id, contract_no, contract_detail_no  \n " );
        sql.append("        ) invalid_dcd on   invalid_dcd.product_id = sales.product_id  and invalid_dcd.shop_id  = sales.shop_id  and invalid_dcd.contract_no   = sales.contract_no  and invalid_dcd.contract_detail_no   = sales.contract_detail_no    \n  ");
        sql.append("left join (  SELECT contract_no, contract_detail_no ,  product_id, shop_id  , SUM(product_num - num ) as remain_num , SUM( unit_value *  (product_num - num )) as  remain_value  \n  ");
        sql.append("		FROM ( SELECT  dc.contract_no, dc.contract_detail_no ,  dc.product_id , dc.shop_id ,SUM( COALESCE(dcd.product_num ,0)) as num , dc.product_num ,  ");
        //IVS_LVTu start edit 04/05/2015 Bug #36490
        //sql.append("		dc.product_value / dc.product_num  as unit_value     ");
        //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        //sql.append("		( case dc.product_num when 0 then 0 else dc.product_value / dc.product_num end )  as unit_value     ");
        sql.append("		( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end )  as unit_value     ");
        //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        //IVS_LVTu end edit 04/05/2015 Bug #36490
        sql.append("                from  data_contract dc ");
        sql.append("                left join data_contract_digestion dcd on dc.shop_id = dcd.contract_shop_id and dc.contract_no = dcd.contract_no  ");
        sql.append("                and dc.contract_detail_no = dcd.contract_detail_no    ");
        sql.append("                 where dc.valid_date   <=  " + endCourseDate+  " \n ");
        sql.append("                and  dc.shop_id in (" +paramBean.getShopIDList()+")" );
         sql.append("               AND  dc.delete_date is null  \n ");
        sql.append("   GROUP  by product_id,  dc.shop_id  ,dc.product_num , dc.product_value  , dc.contract_no , dc.contract_detail_no  \n   "); 
        sql.append("  ) invalid_enddate_dc GROUP BY product_id , shop_id , contract_no, contract_detail_no     \n " );
        sql.append(" )invalid_enddate_dc on   invalid_enddate_dc.product_id = sales.product_id  and  invalid_enddate_dc.shop_id  = sales.shop_id   and  invalid_enddate_dc.contract_no   = sales.contract_no   and  invalid_enddate_dc.contract_detail_no   = sales.contract_detail_no     ");
        sql.append("group by mcc.course_class_id, mc.course_id ,mcc.course_class_name,  mc.course_name ");
        sql.append(" ) contract ");
        sql.append(" order by ( product_value + pre_product_value - pre_digestion_value -  digestion_value - invalid_value ) desc     ");
        return sql.toString();
    }
    
     private String getCustomerListSQL(RemainingParameterBean paramBean) {
        StringBuilder sql = new StringBuilder();
        double taxRate = SystemInfo.getTaxRate(paramBean.getCourseStartDateObj());
        String startCourseDate = SQLUtil.convertForSQLDateOnly(paramBean.getCourseStartDateObj());
        String endCourseDate = SQLUtil.convertForSQLDateOnly(paramBean.getCourseEndDateObj());
        String startDigestionDate = SQLUtil.convertForSQLDateOnly(paramBean.getDigestionStartDateObj());
        String endDigestionDate = SQLUtil.convertForSQLDateOnly(paramBean.getDigestionEndDateObj());
        
         sql.append("SELECT * \n ");
         sql.append("FROM \n ");
         sql.append("(SELECT mcus.customer_no ,   \n "); // 1
         sql.append("  coalesce(mcus.customer_name1,'') || coalesce(mcus.customer_name2,'') as customer_name ,  \n "); // 2
         sql.append("  mc.course_name ,   \n "); //3
        //IVS start add 2022/07/12 0624_èoóÕçÄñ⁄ÇÃí«â¡
        sql.append("  coalesce(ms.staff_name1,'') || ' ' || coalesce(ms.staff_name2,'') as staff_name ,  \n ");
        //IVS end add 2022/07/12 0624_èoóÕçÄñ⁄ÇÃí«â¡
         sql.append("  sales.sales_date ,  \n ");//4
         sql.append("  sales.valid_date ,  \n ");//5
         if(paramBean.getTaxType() == RemainingParameterBean.TAX_TYPE_UNIT ){
            //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
            //sql.append(" sum(coalesce(sales.product_value,0)) AS product_value ,  \n ");//6
            sql.append(" sum(coalesce(sales.product_values,0)) AS product_value ,  \n ");//6
            //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
            sql.append("  sum(coalesce(sales.product_num,0)) AS product_num ,  \n "); //7
            sql.append("  sum(coalesce(pre_dcd.digestion_num,0)) AS pre_digestion_num ,  \n "); //8
            sql.append("  SUM(COALESCE(dcd.digestion_num,0)) AS digestion_num , \n "); // 9
            sql.append("  SUM(COALESCE(round(dcd.digestion_value),0)) AS digestion_value ,  \n "); // 10
            sql.append("  SUM(COALESCE(invalid_dcd.remain_num,0)) AS invalid_num ,  \n "); // 11 
            sql.append("  SUM(COALESCE(round(invalid_dcd.remain_value),0)) AS invalid_value ,   \n "); // 12 
            sql.append("  SUM(COALESCE(invalid_enddate_dc.remain_num,0)) AS invalid_enddate_num ,  \n "); // 13 
            sql.append("  SUM(COALESCE(round(invalid_enddate_dc.remain_value),0)) AS invalid_enddate_value  \n "); // 14
         }else{
             //IVS_LVTu start edit 2015/10/19 Bug #43581
//            sql.append("  sum(coalesce(ceil(dc.product_value / ( 1.0 + "+ taxRate+ "  )),0)) AS product_value ,  \n ");//6
//            sql.append("  sum(coalesce(dc.product_num,0)) AS product_num ,  \n "); //7
//            sql.append("  sum(coalesce(pre_dcd.digestion_num,0)) AS pre_digestion_num ,  \n "); //8
//            sql.append("  SUM(COALESCE(dcd.digestion_num,0)) AS digestion_num , \n "); // 9
//            sql.append("  SUM(COALESCE(ceil(round(dcd.digestion_value) / ( 1.0 + "+ taxRate+ "  )),0)) AS digestion_value ,  \n "); // 10
//            sql.append("  SUM(COALESCE(invalid_dcd.remain_num,0)) AS invalid_num ,  \n "); // 11 
//            sql.append("  SUM(COALESCE( ceil(round(invalid_dcd.remain_value) / ( 1.0 + "+ taxRate+ "  )),0)) AS invalid_value ,   \n "); // 12 
//            sql.append("  SUM(COALESCE(invalid_enddate_dc.remain_num,0)) AS invalid_enddate_num ,  \n "); // 13 
//            sql.append("  SUM(COALESCE( ceil(round(invalid_enddate_dc.remain_value) / ( 1.0 + "+ taxRate+ "  )),0)) AS invalid_enddate_value  \n "); // 14
            // LVTu start Edit 2019/08/26 SPOSëùê≈ëŒâû
            //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
            //sql.append("  sum(coalesce(ceil(dc.product_value / ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  )),0)) AS product_value ,  \n ");//6
            sql.append("  sum(coalesce(ceil(dc.product_values / ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  )),0)) AS product_value ,  \n ");//6
            //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
            sql.append("  sum(coalesce(dc.product_num,0)) AS product_num ,  \n "); //7
            sql.append("  sum(coalesce(pre_dcd.digestion_num,0)) AS pre_digestion_num ,  \n "); //8
            sql.append("  SUM(COALESCE(dcd.digestion_num,0)) AS digestion_num , \n "); // 9
            sql.append("  SUM(COALESCE(ceil(round(dcd.digestion_value) / ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  )),0)) AS digestion_value ,  \n "); // 10
            sql.append("  SUM(COALESCE(invalid_dcd.remain_num,0)) AS invalid_num ,  \n "); // 11 
            sql.append("  SUM(COALESCE( ceil(round(invalid_dcd.remain_value) / ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  )),0)) AS invalid_value ,   \n "); // 12 
            sql.append("  SUM(COALESCE(invalid_enddate_dc.remain_num,0)) AS invalid_enddate_num ,  \n "); // 13 
            sql.append("  SUM(COALESCE( ceil(round(invalid_enddate_dc.remain_value) / ( 1.0 + get_tax_rate(sales.tax_rate, sales.sales_date)  )),0)) AS invalid_enddate_value  \n "); // 14
            // LVTu end Edit 2019/08/26 SPOSëùê≈ëŒâû
            //IVS_LVTu end edit 2015/10/19 Bug #43581
         }
         
         sql.append("FROM \n ");
         sql.append("(SELECT dc.*, ds.customer_id , ds.sales_date  \n ");
         //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
         sql.append(" , ( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end ) * dc.product_num AS product_values  \n ");
         //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
         sql.append("FROM data_contract dc \n ");
         sql.append("INNER JOIN data_sales ds ON dc.shop_id = ds.shop_id \n ");
         sql.append("AND dc.slip_no = ds.slip_no \n ");
         //nhanvt start
         //sql.append("WHERE ds.sales_date <=  "  + endCourseDate + "   \n "); 
         sql.append("WHERE ds.sales_date BETWEEN " + startCourseDate + "  and "+ endCourseDate + "   \n "); 
         //nhanvt end
         sql.append(" AND  ds.delete_date is null   AND  dc.delete_date is null  AND ds.sales_date IS NOT NULL  \n ");
         sql.append("AND dc.shop_id IN ( " + paramBean.getShopIDList() +"  ) )sales \n ");
         sql.append("INNER JOIN mst_course mc ON mc.course_id = sales.product_id \n ");
         sql.append("INNER JOIN mst_customer mcus ON mcus.customer_id = sales.customer_id  \n ");
        //IVS start add 2022/07/12 0624_èoóÕçÄñ⁄ÇÃí«â¡
		 sql.append(" LEFT JOIN mst_staff ms  \n ");
		 sql.append("          on ms.staff_id = sales.staff_id  \n ");
        //IVS end add 2022/07/12 0624_èoóÕçÄñ⁄ÇÃí«â¡
         sql.append(" LEFT JOIN ");
         sql.append("(SELECT dc.* , ds.sales_date  \n ");
         //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
         sql.append(" , ( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end ) * dc.product_num AS product_values  \n ");
         //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
         sql.append("FROM data_contract dc \n ");
         sql.append("INNER JOIN data_sales ds ON dc.shop_id = ds.shop_id \n ");
         sql.append("AND dc.slip_no = ds.slip_no \n ");
         sql.append("WHERE ds.sales_date BETWEEN " + startCourseDate + "  and "+ endCourseDate + "   \n "); 
         sql.append(" AND  ds.delete_date is null   AND  dc.delete_date is null  \n ");
         sql.append("AND dc.shop_id IN ( " + paramBean.getShopIDList() +"  ) )dc  \n ");
         sql.append(" ON dc.contract_no = sales.contract_no AND dc.contract_detail_no = sales.contract_detail_no  AND dc.shop_id = sales.shop_id   \n ");
         sql.append("LEFT JOIN \n ");
         sql.append("( SELECT contract_no , contract_detail_no,   \n ");
         sql.append("  shop_id,  \n ");
         sql.append("  SUM(num) AS digestion_num , \n ");
         sql.append("  SUM(unit_value * num) AS digestion_value  \n ");
         sql.append("FROM \n ");
         sql.append("   (SELECT dc.contract_no , dc.contract_detail_no ,  \n ");
         sql.append("   dc.shop_id , \n ");
         sql.append("   COALESCE(dcd.product_num ,0) AS num , \n ");
         //IVS_LVTu start edit 04/05/2015 Bug #36490
         //sql.append("   dc.product_value / dc.product_num AS unit_value \n ");
         //Luc start edit 20151023 #43894
        //sql.append("   ( case dc.product_num when 0 then 0 else dc.product_value / dc.product_num end ) AS unit_value \n ");
        //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        //sql.append("   ( case dc.product_num when 0 then 0 else ceil(dc.product_value / dc.product_num) end ) AS unit_value \n "); 
        sql.append("   ( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end ) AS unit_value \n "); 
        //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
        //Luc start edit 20151023 #43894
         //IVS_LVTu end edit 04/05/2015 Bug #36490
         sql.append("   FROM data_contract_digestion dcd \n ");
         sql.append("   INNER JOIN data_sales ds ON ds.shop_id = dcd.shop_id\n ");
         //nhanvt start edit 20141015 Bug #31503
         sql.append("   AND ds.slip_no = dcd.slip_no \n ");
         sql.append("   LEFT JOIN data_contract dc ON dc.shop_id = dcd.contract_shop_id \n ");
         sql.append("   AND dc.contract_no = dcd.contract_no \n ");
         sql.append("   AND dc.contract_detail_no = dcd.contract_detail_no \n ");
         sql.append("   WHERE ds.sales_date BETWEEN " + startDigestionDate + "  and "+ endDigestionDate + "   \n ");
         sql.append("   AND  ds.delete_date is null   AND  dc.delete_date is null  \n ");
         sql.append("   AND dc.shop_id IN  ( " + paramBean.getShopIDList() +"  ) ) dcd \n ");
         sql.append("   GROUP BY contract_no, contract_detail_no ,  \n ");
         sql.append("   shop_id ) dcd ON sales.contract_no = dcd.contract_no AND sales.contract_detail_no = dcd.contract_detail_no    \n ");
         sql.append("   AND sales.shop_id = dcd.shop_id   \n ");

         sql.append("LEFT JOIN \n ");
         sql.append("   ( SELECT contract_no,  contract_detail_no , \n ");
         sql.append("    shop_id  ,  \n ");
         sql.append("    SUM(num) AS digestion_num , \n ");
         sql.append("    SUM(unit_value * num) AS digestion_value \n ");
         sql.append("   FROM \n ");
         sql.append("       (SELECT dc.contract_no , dc.contract_detail_no ,  \n ");
         sql.append("           dc.shop_id  ,   \n ");
         sql.append("           COALESCE(dcd.product_num ,0) AS num , \n ");
         //IVS_LVTu start edit 04/05/2015 Bug #36490
         //sql.append("           dc.product_value / dc.product_num AS unit_value \n ");
         //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
         //sql.append("           ( case dc.product_num when 0 then 0 else dc.product_value / dc.product_num end ) AS unit_value \n ");
         sql.append("               ( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end ) AS unit_value  \n ");
         //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
         //IVS_LVTu end edit 04/05/2015 Bug #36490
         sql.append("       FROM data_contract_digestion dcd \n ");
         sql.append("       INNER JOIN data_sales ds ON ds.shop_id = dcd.shop_id \n ");
         sql.append("       AND ds.slip_no = dcd.slip_no   \n ");
         sql.append("       LEFT JOIN data_contract dc ON dc.shop_id = dcd.contract_shop_id  \n ");
         sql.append("       AND dc.contract_no = dcd.contract_no  \n ");
         sql.append("       AND dc.contract_detail_no = dcd.contract_detail_no  \n ");
         sql.append("       WHERE ds.sales_date  < " + startDigestionDate);
          sql.append("      AND  ds.delete_date is null   AND  dc.delete_date is null  \n ");
         sql.append("       AND dc.shop_id IN   ( " + paramBean.getShopIDList() +"  )) pre_dcd  \n ");
         sql.append("       GROUP BY contract_no, contract_detail_no ,   \n ");
         sql.append("        shop_id  )pre_dcd ON pre_dcd.contract_no = sales.contract_no  AND pre_dcd.contract_detail_no = sales.contract_detail_no  \n ");
         sql.append("        AND pre_dcd.shop_id = sales.shop_id    \n ");
         sql.append(" LEFT JOIN  \n ");
         sql.append("       ( SELECT contract_no , contract_detail_no ,   \n ");
         sql.append("        shop_id ,   \n ");
         sql.append("         SUM(product_num - num) AS remain_num ,  \n ");
         sql.append("          SUM(unit_value * (product_num - num)) AS remain_value  \n ");
         sql.append("           FROM  \n ");
         sql.append("           (SELECT   \n ");
         sql.append("               dc.shop_id ,  \n ");
         sql.append("               dc.product_num ,  \n ");
         sql.append("               SUM(COALESCE(dcd.product_num ,0)) AS num ,  \n ");
         //IVS_LVTu start edit 04/05/2015 Bug #36490
         //sql.append("               dc.product_value / dc.product_num AS unit_value ,  \n ");
         //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
         //sql.append("               ( case dc.product_num when 0 then 0 else dc.product_value / dc.product_num end ) AS unit_value ,  \n ");
         sql.append("               ( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end ) AS unit_value ,  \n ");
         //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
         //IVS_LVTu end edit 04/05/2015 Bug #36490
         sql.append("               dc.contract_no , dc.contract_detail_no    \n ");
         sql.append("               FROM data_contract dc  \n ");
         sql.append("        LEFT JOIN  (  SELECT dcd.*   FROM data_contract_digestion dcd   \n ");
         sql.append("                    LEFT JOIN data_sales ds ON ds.shop_id = dcd.shop_id and ds.slip_no = dcd.slip_no    \n "); 
         //nhanvt end edit 20141015 Bug #31503
         sql.append("                    WHERE   ds.delete_date is null   AND ds.sales_date IS NOT NULL ");
         sql.append("   and ds.sales_date <= "+ endDigestionDate + "   \n ");
         sql.append(" ) dcd   \n ");
         sql.append("        ON dc.shop_id = dcd.contract_shop_id  \n "); 
         sql.append("        AND dc.contract_no = dcd.contract_no  \n ");
         sql.append("        AND dc.contract_detail_no = dcd.contract_detail_no  \n "); 
         sql.append("               WHERE  ( dc.valid_date >=  "  + endCourseDate + "  OR  dc.valid_date IS NULL  )   \n ");
         sql.append("               AND dc.shop_id IN   ( " + paramBean.getShopIDList() +"  )   \n ");
         sql.append("               AND  dc.delete_date is null  \n ");
         sql.append("               GROUP BY   \n ");
         sql.append("               dc.shop_id ,  \n ");
         sql.append("               dc.product_num ,  \n ");
         sql.append("               dc.product_value ,  \n ");
         sql.append("               dc.contract_no , dc.contract_detail_no  ) invalid_dcd  \n ");
         sql.append("       GROUP BY contract_no ,  \n ");
         sql.append("          shop_id , contract_detail_no ) invalid_dcd ON invalid_dcd.contract_no = sales.contract_no AND  invalid_dcd.contract_detail_no = sales.contract_detail_no    \n ");
         sql.append("       AND invalid_dcd.shop_id = sales.shop_id     \n ");
         sql.append("  LEFT JOIN  \n ");
         sql.append("       (SELECT contract_no, contract_detail_no ,   \n ");
         sql.append("         shop_id  ,   \n ");
         sql.append("         SUM(product_num - num) AS remain_num ,  \n ");
         sql.append("         SUM(unit_value * (product_num - num)) AS remain_value  \n ");
         sql.append("         FROM   \n ");
         sql.append("           (SELECT \n ");
         sql.append("             dc.shop_id ,  \n ");
         sql.append("             SUM(COALESCE(dcd.product_num ,0)) AS num ,  \n ");
         sql.append("              dc.product_num , \n ");
         //IVS_LVTu start edit 04/05/2015 Bug #36490
         //sql.append("              dc.product_value / dc.product_num AS unit_value ,  \n ");
         //IVS start edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
         //sql.append("              ( case dc.product_num when 0 then 0 else dc.product_value / dc.product_num end ) AS unit_value ,  \n ");
         sql.append("               ( case dc.product_num when 0 then 0 else trunc(dc.product_value / dc.product_num) end ) AS unit_value ,  \n ");
         //IVS end edit 20220626 1â~ÇÃç∑àŸÇ™î≠ê∂
         //IVS_LVTu end edit 04/05/2015 Bug #36490
         sql.append("             dc.contract_no , dc.contract_detail_no    \n ");
         sql.append("     FROM data_contract dc  \n ");
         sql.append("        LEFT JOIN  (  SELECT dcd.*   FROM data_contract_digestion dcd   \n ");
         sql.append("                    LEFT JOIN data_sales ds ON ds.shop_id = dcd.shop_id and ds.slip_no = dcd.slip_no    \n "); 
         sql.append("                    WHERE   ds.delete_date is null   AND ds.sales_date IS NOT NULL  ) dcd   \n ");
         sql.append("       ON dc.shop_id = dcd.contract_shop_id  \n "); 
         sql.append("        AND dc.contract_no = dcd.contract_no  \n ");
         sql.append("        AND dc.contract_detail_no = dcd.contract_detail_no  \n ");
         
         sql.append("       WHERE dc.valid_date <   " + endCourseDate+  "  \n ");
         sql.append("           AND dc.shop_id IN  ( " + paramBean.getShopIDList() +"  )   \n ");
         sql.append("           AND  dc.delete_date is null   \n ");
         sql.append("         GROUP BY   \n ");
         sql.append("                 dc.shop_id ,  \n ");
         sql.append("                 dc.product_num ,  \n ");
         sql.append("                 dc.product_value ,  \n ");
         sql.append("                 dc.contract_no , dc.contract_detail_no   ) invalid_enddate_dc  \n ");
         sql.append("      GROUP BY contract_no , contract_detail_no ,   \n ");
         sql.append("              shop_id  )invalid_enddate_dc ON invalid_enddate_dc.contract_no = sales.contract_no AND  invalid_enddate_dc.contract_detail_no = sales.contract_detail_no   \n ");
         sql.append("  AND invalid_enddate_dc.shop_id = sales.shop_id  \n ");
         sql.append("  GROUP BY  \n ");
         sql.append("	    mcus.customer_id ,mcus.customer_no, mcus.customer_name1 , mcus.customer_name2 ,    \n ");
        //IVS start edit 2022/07/12 0624_èoóÕçÄñ⁄ÇÃí«â¡
        //sql.append("          mc.course_id , mc.course_name , sales.valid_date ,  sales.sales_date  ) contract  \n ");
		sql.append("        mc.course_id , mc.course_name , sales.valid_date ,  sales.sales_date , ms.staff_id , ms.staff_name1 , ms.staff_name2  ) contract  \n ");
        //IVS end edit 2022/07/12 0624_èoóÕçÄñ⁄ÇÃí«â¡
         //nhanvt start edit 20141009 Request #31223
         //sql.append(" WHERE  (digestion_num + pre_digestion_num) <= product_num \n ");
         //nhanvt end edit 20141009 Request #31223
         sql.append("ORDER BY customer_no, sales_date   \n ");
        
        return sql.toString();
    }
     
     
    
    private boolean checkInput()
    {
        if (this.cmbCourseStartDate.getDate() == null ) {
            MessageDialog.showMessageDialog(this,
                   messageErrorDate,
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbCourseStartDate.requestFocusInWindow();
            return false;
        }
        if (this.cmbCourseEndDate.getDate() == null ) {
            MessageDialog.showMessageDialog(this,
                   messageErrorDate,
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbCourseEndDate.requestFocusInWindow();
            return false;
        }
        if ( ckDigestion.isSelected() && this.cmbDigestionStartDate.getDate() == null ) {
            MessageDialog.showMessageDialog(this,
                   messageErrorDate,
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbDigestionStartDate.requestFocusInWindow();
            return false;
        }
        if ( ckDigestion.isSelected() && this.cmbDigestionEndDate.getDate() == null ) {
            MessageDialog.showMessageDialog(this,
                   messageErrorDate,
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbDigestionEndDate.requestFocusInWindow();
            return false;
        }
        if(this.cmbCourseStartDate.getDate().after(this.cmbCourseEndDate.getDate())){
            MessageDialog.showMessageDialog(this,
                   messageErrorDate,
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbCourseStartDate.requestFocusInWindow();
            return false;
        }
        if(ckDigestion.isSelected() && this.cmbDigestionStartDate.getDate().after(this.cmbDigestionEndDate.getDate())){
            MessageDialog.showMessageDialog(this,
                    messageErrorDate,
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbDigestionStartDate.requestFocusInWindow();
            return false;
        }
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcelReport;
    private javax.swing.JCheckBox ckDigestion;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbCourseEndDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbCourseStartDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbDigestionEndDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbDigestionStartDate;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cmbTarget;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblPeriod1;
    private javax.swing.JLabel lblTarget1;
    private javax.swing.JLabel lblTax1;
    private javax.swing.JRadioButton rdCourseList;
    private javax.swing.JRadioButton rdCustomerList;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private javax.swing.ButtonGroup taxGroup;
    private javax.swing.ButtonGroup typeGroup;
    // End of variables declaration//GEN-END:variables

   

    public CusContractHistoryReportFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    private class CusContractHistoryReportFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponentStaffShopRankingFocusTraversalPolicyÅB aContainer ÇÕ
         * aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(cmbTarget)) {
               if(rdCourseList.isSelected()){
                   return rdCourseList;
               }
               return rdCustomerList;
            } else if (aComponent.equals(rdCourseList) || aComponent.equals(rdCustomerList) ) {
                return cmbCourseStartDate;
            } else if (aComponent.equals(cmbCourseStartDate)) {
                return cmbCourseEndDate;
            }else if (aComponent.equals(cmbCourseEndDate)) {
                return cmbDigestionStartDate;
            }else if (aComponent.equals(cmbDigestionStartDate)) {
                return cmbDigestionEndDate;
            }else if (aComponent.equals(cmbDigestionEndDate)) {
                return ckDigestion;
            }else if (aComponent.equals(ckDigestion)) {
                 if (rdoTaxUnit.isSelected()) {
                    return rdoTaxUnit;
                }
                return rdoTaxBlank;
            }
            return this.getStartComponent();
        }

        /**
         * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {

            return this.getStartComponent();
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer êÊì™ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getFirstComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer aContainer - ç≈å„ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getLastComponent(Container aContainer) {
            if (rdoTaxUnit.isSelected()) {
                return rdoTaxUnit;
            }
            return rdoTaxBlank;
        }

        /**
         * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB aContainer
         * ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
         *
         * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getDefaultComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB show() Ç‹ÇΩÇÕ setVisible(true)
         * ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
         * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
         * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
         * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
         * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
         */
        public Component getInitialComponent(Window window) {
            return this.getStartComponent();
        }

        private Component getStartComponent() {
            if (cmbTarget.getItemCount() == 1) {
               if(rdCourseList.isSelected()){
                   return rdCourseList;
               }
               return rdCustomerList;
            }
            return cmbTarget;
        }
    }
}
