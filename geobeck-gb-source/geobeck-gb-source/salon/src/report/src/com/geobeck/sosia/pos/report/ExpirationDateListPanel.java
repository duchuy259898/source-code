/*
 * CusContractHistoryReportPanel.java
 *
 * Created on 2013/04/18, 13:00
 */
package com.geobeck.sosia.pos.report;

import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.*;
import javax.swing.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.hair.report.logic.*;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.account.MstAccountSetting;
import com.geobeck.sosia.pos.report.bean.RemainingParameterBean;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;

import com.geobeck.sosia.pos.util.*;
import java.text.SimpleDateFormat;
import com.geobeck.sql.*;
import com.geobeck.swing.filechooser.WildcardFileFilter;
import com.geobeck.util.CheckUtil;
import com.geobeck.util.SQLUtil;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.SQLException;
import java.util.ArrayList;

import java.util.GregorianCalendar;
import org.apache.commons.lang.math.NumberUtils;
import java.util.HashMap;
import java.util.Iterator;

/**
 *
 * @author vtbphuong
 */
public class ExpirationDateListPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private CusContractHistoryReportFocusTraversalPolicy ftp =
            new CusContractHistoryReportFocusTraversalPolicy();
    private String messageErrorDate = "期間が正しくありません" ;  

    /**
     * Creates new form SalesTransitionReportPanel
     */
    public ExpirationDateListPanel() {

        initComponents();
        addMouseCursorChange();
        this.setSize(958, 750);
        this.setPath("役務帳票>>有効期限一覧");
        this.setTitle("有効期限一覧");
        this.setKeyListener();
        init();

    }

    private void setKeyListener() {
        cmbTargetStartDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbTargetStartDate.addFocusListener(SystemInfo.getSelectText());
        cmbTargetStartDate.addKeyListener(SystemInfo.getMoveNextField());
        cmbTargetStartDate.addFocusListener(SystemInfo.getSelectText());
        rdoTaxBlank.addKeyListener(SystemInfo.getMoveNextField());
        rdoTaxUnit.addKeyListener(SystemInfo.getMoveNextField());
        rdoValid.addKeyListener(SystemInfo.getMoveNextField());
        rdoLimit.addKeyListener(SystemInfo.getMoveNextField());
    }

    /**
     * init form
     */
    private void init() {

        Calendar cal = Calendar.getInstance();
        SystemInfo.initGroupShopComponents(cmbTarget, 3);

        //期間を初期設定する    
        Calendar cdr = Calendar.getInstance();
        cdr.setTime(new Date());
        //売上構成やその推移コントロールを初期設定する

        cal.add(Calendar.MONTH, 1);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.add(Calendar.YEAR, -1);
        cal.add(Calendar.YEAR, 1);
        cal.add(Calendar.DAY_OF_MONTH, -1);

        //対象期間の設定
        this.cmbTargetStartDate.setDate(new Date());
        this.cmbTargetEndDate.setDate(new Date());
    }
    
    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(btnExcelReport);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        taxGroup = new javax.swing.ButtonGroup();
        typeGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblTarget1 = new javax.swing.JLabel();
        cmbTarget = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        btnExcelReport = new javax.swing.JButton();
        lblTax1 = new javax.swing.JLabel();
        rdoTaxUnit = new javax.swing.JRadioButton();
        rdoTaxBlank = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbTargetStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        cmbTargetEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel4 = new javax.swing.JLabel();
        rdoValid = new javax.swing.JRadioButton();
        rdoLimit = new javax.swing.JRadioButton();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        lblTarget1.setText("対象");

        //shop.addItem(this.myShop);

        btnExcelReport.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnExcelReport.setBorderPainted(false);
        btnExcelReport.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnExcelReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelReportActionPerformed(evt);
            }
        });

        lblTax1.setText("税区分");

        taxGroup.add(rdoTaxUnit);
        rdoTaxUnit.setSelected(true);
        rdoTaxUnit.setText("税込");
        rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxUnit.setContentAreaFilled(false);
        rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTaxUnitActionPerformed(evt);
            }
        });

        taxGroup.add(rdoTaxBlank);
        rdoTaxBlank.setText("税抜");
        rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxBlank.setContentAreaFilled(false);
        rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxBlank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTaxBlankActionPerformed(evt);
            }
        });

        jLabel2.setText("出力対象");

        jLabel3.setText("対象期間");

        cmbTargetStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetStartDate.setFocusCycleRoot(true);
        cmbTargetStartDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetStartDateFocusGained(evt);
            }
        });

        cmbTargetEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetEndDate.setFocusCycleRoot(true);
        cmbTargetEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetEndDateFocusGained(evt);
            }
        });

        jLabel4.setText("〜");

        typeGroup.add(rdoValid);
        rdoValid.setSelected(true);
        rdoValid.setText("有効期限");
        rdoValid.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoValid.setContentAreaFilled(false);
        rdoValid.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoValid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoValidActionPerformed(evt);
            }
        });

        typeGroup.add(rdoLimit);
        rdoLimit.setText("保証期限");
        rdoLimit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoLimit.setContentAreaFilled(false);
        rdoLimit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoLimitActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(lblTarget1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .add(lblTax1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(cmbTarget, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(btnExcelReport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(rdoTaxUnit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rdoTaxBlank, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(cmbTargetStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(cmbTargetEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(rdoValid, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(rdoLimit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(lblTarget1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cmbTarget, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(btnExcelReport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbTargetEndDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, cmbTargetStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoValid, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoLimit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rdoTaxUnit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoTaxBlank, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTax1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(323, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(256, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbTargetEndDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetEndDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTargetEndDateFocusGained

    private void cmbTargetStartDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetStartDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTargetStartDateFocusGained

    private void rdoTaxBlankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoTaxBlankActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoTaxBlankActionPerformed

    private void rdoTaxUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoTaxUnitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoTaxUnitActionPerformed

    /**
     * 期間で絞って詳細な売上のEXCELボタンを押下。
     *
     * @param evt
     */
    private void btnExcelReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelReportActionPerformed

        btnExcelReport.setCursor(null);
        if(!this.checkInput()){
            return;
        }
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            ReportParameterBean paramBean = new ReportParameterBean();
            // 税区分(税抜き)
            if (this.rdoTaxBlank.isSelected()) {
                paramBean.setTaxType(RemainingParameterBean.TAX_TYPE_BLANK);
            } // 税区分(税込み)
            else if (this.rdoTaxUnit.isSelected()) {
                paramBean.setTaxType(RemainingParameterBean.TAX_TYPE_UNIT);
            }
            boolean logicResult = true;

            try {
                //グループ
                if (cmbTarget.getSelectedItem() instanceof MstGroup) {
                    MstGroup mg = (MstGroup) cmbTarget.getSelectedItem();
                    paramBean.setTargetName(mg.getGroupName());
                    paramBean.setShopIDList(mg.getShopIDListAll());
                } //店舗
                else if (cmbTarget.getSelectedItem() instanceof MstShop) {
                    MstShop ms = (MstShop) cmbTarget.getSelectedItem();
                    paramBean.setTargetName(ms.getShopName());
                    paramBean.setShopIDList(ms.getShopID().toString());
                }

                //対象となる店舗が存在しない場合
                if (paramBean.getShopIDList().equals("")) {
                    MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }

                paramBean.setTargetStartDate(this.cmbTargetStartDate.getDateStr());
                paramBean.setTargetEndDate(this.cmbTargetEndDate.getDateStr());
                paramBean.setTargetStartDateObj(this.cmbTargetStartDate.getDate());
                paramBean.setTargetEndDateObj(this.cmbTargetEndDate.getDate());
              
                ConnectionWrapper con = SystemInfo.getConnection();
                
                ResultSetWrapper rs = con.executeQuery(getCourseListSQL(paramBean));
                rs.last();
                int count = rs.getRow();
                rs.beforeFirst();
                if (count > 0) {
                    // 税込み･税別の区分
                    String tax = "";
                    if (paramBean.getTaxType() == RemainingParameterBean.TAX_TYPE_BLANK) {
                        tax = "税抜";
                    } else if (paramBean.getTaxType() == RemainingParameterBean.TAX_TYPE_UNIT) {
                        tax = "税込";
                    }

                    JExcelApi jx = new JExcelApi("有効期限一覧");
                    jx.setTemplateFile("/reports/有効期限一覧.xls");
                    // ヘッダ
                    jx.setValue(2, 3, paramBean.getTargetName());
                    jx.setValue(2, 4, String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetStartDateObj()) + " 〜 " + String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetEndDateObj()));
                    if(rdoValid.isSelected()){
                        jx.setValue(2, 5,"有効期限");
                        jx.setValue(1, 8,"有効期限");
                    }else{
                        jx.setValue(2, 5,"保証期限");
                        jx.setValue(1, 8,"保証期限");
                    }
                    jx.setValue(2, 6,tax);
                    int row = 9;
                    // 追加行数セット
                    jx.insertRow(row, count - 1);
                    while (rs.next()) {
                        if(rdoValid.isSelected()){
                            jx.setValue(1, row, rs.getDate("valid_date"));
                        }else{
                            jx.setValue(1, row, rs.getDate("limit_date"));
                        }
                        jx.setValue(2, row, rs.getString("customer_no"));
                        jx.setValue(3, row, rs.getString("customer_name")); 
                        jx.setValue(4, row, rs.getDate("sales_date")); 
                        jx.setValue(5, row, rs.getString("course_name")); 
                        jx.setValue(6, row, rs.getString("staff_name") ); 
                        jx.setValue(7, row, rs.getDouble("product_value")); 
                        jx.setValue(8, row,rs.getDouble("digestion_num")); 
                        jx.setValue(10, row,rs.getDouble("product_num")); 
                        jx.setValue(11, row,rs.getDouble("still_value"));
                        row += 1;
                    }
                    jx.removeRow(row);
                    jx.openWorkbook();

                } else {
                    MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1099),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            // エラー時
            if (!logicResult) {
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            }
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnExcelReportActionPerformed

    private void rdoValidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoValidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoValidActionPerformed

    private void rdoLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoLimitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoLimitActionPerformed

    private String getCourseListSQL(ReportParameterBean paramBean) {
        StringBuilder sql = new StringBuilder();
        //double taxRate = SystemInfo.getTaxRate(paramBean.getTargetStartDateObj());
        String startDate = SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
        String endDate = SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());
       
        sql.append("SELECT dc.valid_date , \n ");
        sql.append("       dc.limit_date , \n ");
        sql.append("       cus.customer_no , \n ");
        sql.append("       coalesce(cus.customer_name1, '') || coalesce(cus.customer_name2, '') AS customer_name , \n ");
        sql.append("       ds.sales_date , \n ");
        sql.append("       mc.course_name , \n ");
        sql.append("       dc.staff_id ,   \n ");
        sql.append("       coalesce(ms.staff_name1, '') || coalesce(ms.staff_name2, '') AS staff_name , \n ");
        sql.append("       dc.product_num , \n ");
        sql.append("       coalesce(sum(dcd.product_num),0) AS digestion_num , \n ");
        if(paramBean.getTaxType() == RemainingParameterBean.TAX_TYPE_UNIT ){
            sql.append("       dc.product_value , \n ");
            sql.append("       round(dc.product_value - (coalesce(sum(dcd.product_num),0) * (dc.product_value / dc.product_num)))AS still_value \n ");
        }else{
            sql.append("       ceil((dc.product_value / ( 1.0 + get_tax_rate(dc.tax_rate, ds.sales_date) ))) as product_value  , \n ");
            sql.append("       ceil( round(dc.product_value - ( coalesce(sum(dcd.product_num),0) * (dc.product_value / dc.product_num))) / ( 1.0 + get_tax_rate(dc.tax_rate, ds.sales_date) ) ) AS still_value \n ");
        }
        
        sql.append("FROM data_contract dc \n ");
        sql.append("INNER JOIN data_sales ds ON dc.slip_no = ds.slip_no \n ");
        sql.append("AND dc.shop_id = ds.shop_id \n ");
        sql.append("INNER JOIN mst_course mc ON mc.course_id = dc.product_id \n ");
        sql.append("INNER JOIN mst_customer cus ON cus.customer_id = ds.customer_id \n ");
        sql.append("INNER JOIN mst_staff ms ON ms.staff_id = dc.staff_id \n ");
        
        sql.append("LEFT JOIN data_contract_digestion dcd ON dcd.contract_shop_id = dc.shop_id \n ");
        sql.append("AND dcd.contract_no = dc.contract_no \n ");
        sql.append("AND dcd.contract_detail_no = dc.contract_detail_no \n ");
        sql.append("WHERE dc.delete_date IS NULL \n ");
        sql.append("  AND ds.delete_date IS NULL \n ");
        sql.append("  AND ds.shop_id in (" +paramBean.getShopIDList()+") \n  " );
        if(rdoValid.isSelected()){
            sql.append("  AND dc.valid_date between " + startDate + "  and "+ endDate + "   \n "); 
        }else{
            sql.append("  AND dc.limit_date between " + startDate + "  and "+ endDate + "   \n "); 
        }
        sql.append("GROUP BY dc.valid_date , \n ");
        sql.append("         dc.limit_date , \n ");
        sql.append("         cus.customer_no , \n ");
        sql.append("         cus.customer_name1 , \n ");
        sql.append("         cus.customer_name2 , \n ");
        sql.append("         ds.sales_date , \n ");
        sql.append("         mc.course_name , \n ");
        sql.append("         dc.staff_id , ms.staff_name1 , ms.staff_name2 , \n ");
        sql.append("         dc.product_value , \n ");
        sql.append("         dc.product_num, \n ");
        sql.append("         dc.tax_rate \n ");
        if(rdoValid.isSelected()){
            sql.append("ORDER BY dc.valid_date  \n ");
        }else{
             sql.append("ORDER BY dc.limit_date  \n ");
        }
        return sql.toString();
    }
     
    private boolean checkInput()
    {
        if (this.cmbTargetStartDate.getDate() == null ) {
            MessageDialog.showMessageDialog(this,
                   messageErrorDate,
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbTargetStartDate.requestFocusInWindow();
            return false;
        }
        if (this.cmbTargetEndDate.getDate() == null ) {
            MessageDialog.showMessageDialog(this,
                   messageErrorDate,
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbTargetEndDate.requestFocusInWindow();
            return false;
        }
        
        if(this.cmbTargetStartDate.getDate().after(this.cmbTargetEndDate.getDate())){
            MessageDialog.showMessageDialog(this,
                   messageErrorDate,
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbTargetStartDate.requestFocusInWindow();
            return false;
        }
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcelReport;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cmbTarget;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetEndDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetStartDate;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTarget1;
    private javax.swing.JLabel lblTax1;
    private javax.swing.JRadioButton rdoLimit;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private javax.swing.JRadioButton rdoValid;
    private javax.swing.ButtonGroup taxGroup;
    private javax.swing.ButtonGroup typeGroup;
    // End of variables declaration//GEN-END:variables

   

    public CusContractHistoryReportFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    private class CusContractHistoryReportFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponentStaffShopRankingFocusTraversalPolicy。 aContainer は
         * aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(cmbTarget)) {
               
               return cmbTargetStartDate;
            } else if (aComponent.equals(cmbTargetStartDate)) {
                return cmbTargetEndDate;
            }else if (aComponent.equals(cmbTargetEndDate)) {
               if(rdoValid.isSelected()){
                   return rdoValid;
               }return rdoLimit;
            }else if (aComponent.equals(rdoValid) || aComponent.equals(rdoLimit) ) {
               if (rdoTaxUnit.isSelected()) {
                    return rdoTaxUnit;
                }
                return rdoTaxBlank;
            }
            return this.getStartComponent();
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {

            return this.getStartComponent();
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。 このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer 先頭の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。 このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer aContainer - 最後の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer) {
            if (rdoTaxUnit.isSelected()) {
                return rdoTaxUnit;
            }
            return rdoTaxBlank;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。 aContainer
         * をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         *
         * @param aContainer デフォルトの Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。 show() または setVisible(true)
         * の呼び出しで一度ウィンドウが表示されると、 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、 または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         *
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        public Component getInitialComponent(Window window) {
            return this.getStartComponent();
        }

        private Component getStartComponent() {
            if (cmbTarget.getItemCount() == 1) {
               return cmbTargetStartDate;
            }
            return cmbTarget;
        }
    }
}
