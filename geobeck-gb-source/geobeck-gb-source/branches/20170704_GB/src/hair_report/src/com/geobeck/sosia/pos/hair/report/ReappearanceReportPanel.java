/*
 * BusinessReportPanel.java
 *
 * Created on 2006/10/19, 10:39
 */

package com.geobeck.sosia.pos.hair.report;

import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.text.*;
import org.apache.commons.lang.math.NumberUtils;

import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.report.bean.*;
import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sql.ConnectionWrapper;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author  katagiri
 */
public class ReappearanceReportPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private MstStaffs staffs = null;
        private boolean isLoading = false;
        
        private MstShopRelations listCategory = new MstShopRelations();
        private MstShopRelations listLeftCategory = new MstShopRelations();
        private MstShopRelations listRightCategory = new MstShopRelations();
        //nhanvt start add 20150121 New request #34998
        private MstShopRelations mrsRefTmp = new MstShopRelations();
        private boolean isHideCategory = false;
        //nhanvt start add 20150121 New request #34998
	
	/** Creates new form BusinessReportPanel */
	public ReappearanceReportPanel()
	{
                isLoading = true;
                
		initComponents();
		addMouseCursorChange();
		this.setSize(710, 482);
		this.setPath("ï™êÕ");
		this.setTitle("çƒóàï™êÕ");
		this.setKeyListener();
		SystemInfo.initGroupShopComponents(target, 3);
                initYearCombo(cmbTargetYear, Calendar.getInstance().get(Calendar.YEAR));
                cmbTargetMonth.setSelectedIndex(Calendar.getInstance().get(Calendar.MONTH));
                changeTargetDate();
		staff.addItem(new MstStaff());
		SystemInfo.initStaffComponent(staff);
		staff.setSelectedIndex(0);
                
                //IVS_Thanh start add 20140725 MASHU_çƒóàï™êÕ
                this.initShopCategory();
                //IVS_Thanh end add 20140725 MASHU_çƒóàï™êÕ
                
                isLoading = false;
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        countTypeGroup = new javax.swing.ButtonGroup();
        techClassTypeGroup = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblTargetPeriod = new javax.swing.JLabel();
        lblTargetPeriod1 = new javax.swing.JLabel();
        txtFixedCount = new javax.swing.JTextField();
        ((PlainDocument)txtFixedCount.getDocument()).setDocumentFilter(
            new CustomFilter(3, CustomFilter.NUMERIC));
        lblTargetPeriod3 = new javax.swing.JLabel();
        lblTargetDate = new javax.swing.JLabel();
        lblTargetPeriod4 = new javax.swing.JLabel();
        lblTargetPeriod5 = new javax.swing.JLabel();
        rdoSimpleCount = new javax.swing.JRadioButton();
        lblTargetPeriod6 = new javax.swing.JLabel();
        rdoTotalCount = new javax.swing.JRadioButton();
        cmbReappearanceSpan = new javax.swing.JComboBox();
        lblTargetPeriod7 = new javax.swing.JLabel();
        cmbTargetMonth = new javax.swing.JComboBox();
        lblTargetPeriod8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        staff = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        lblTargetPeriod9 = new javax.swing.JLabel();
        rdoTechOtherCount = new javax.swing.JRadioButton();
        rdoTechSameCount = new javax.swing.JRadioButton();
        cmbTargetYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
            cmbTargetYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));
    lblTargetPeriod10 = new javax.swing.JLabel();
    rdoNewVisitCurrent = new javax.swing.JRadioButton();
    rdoNewVisitAll = new javax.swing.JRadioButton();
    lblTargetPeriod11 = new javax.swing.JLabel();
    rdoSameShopCatVisit = new javax.swing.JRadioButton();
    rdoDiffShopCatVisit = new javax.swing.JRadioButton();
    btnOutputExcel = new javax.swing.JButton();
    targetLabel = new javax.swing.JLabel();
    target = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
    lblCategory = new javax.swing.JLabel();
    categoryLeftScrollPane = new javax.swing.JScrollPane();
    categoryLeftTable = new javax.swing.JTable();
    jPanel2 = new javax.swing.JPanel();
    selectAllButton = new javax.swing.JButton();
    selectButton = new javax.swing.JButton();
    releaseButton = new javax.swing.JButton();
    releaseAllButton = new javax.swing.JButton();
    categoryRightScrollPane = new javax.swing.JScrollPane();
    categoryRightTable = new javax.swing.JTable();

    setFocusCycleRoot(true);

    jPanel1.setOpaque(false);

    lblTargetPeriod.setText("èWåvä˙ä‘");

    lblTargetPeriod1.setText("çƒóàéZèoä˙ä‘");

    txtFixedCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    txtFixedCount.setText("3");

    lblTargetPeriod3.setText("ï]âøä˙ä‘");

    lblTargetPeriod4.setText("å≈íËâÒêî");

    lblTargetPeriod5.setText("âÒà»è„");

    countTypeGroup.add(rdoSimpleCount);
    rdoSimpleCount.setText("èÉãqêî");
    rdoSimpleCount.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoSimpleCount.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoSimpleCount.setOpaque(false);

    lblTargetPeriod6.setText("êlêîèåè");

    countTypeGroup.add(rdoTotalCount);
    rdoTotalCount.setSelected(true);
    rdoTotalCount.setText("âÑÇ◊ãqêî");
    rdoTotalCount.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoTotalCount.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoTotalCount.setOpaque(false);

    cmbReappearanceSpan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1Éñåé", "45ì˙", "2Éñåé", "3Éñåé", "4Éñåé", "5Éñåé", "6Éñåé" }));
    cmbReappearanceSpan.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cmbReappearanceSpanItemStateChanged(evt);
        }
    });

    lblTargetPeriod7.setText("îN");

    cmbTargetMonth.setMaximumRowCount(12);
    cmbTargetMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    cmbTargetMonth.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cmbTargetMonthItemStateChanged(evt);
        }
    });

    lblTargetPeriod8.setText("åé");

    jLabel5.setText("éÂíSìñé“");

    staff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    lblTargetPeriod9.setText("ãZèpï™óﬁï çƒóà");

    techClassTypeGroup.add(rdoTechOtherCount);
    rdoTechOtherCount.setSelected(true);
    rdoTechOtherCount.setText("ëºï™óﬁÇ≈ÇÃçƒóàÇ‡ëŒè€");
    rdoTechOtherCount.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoTechOtherCount.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoTechOtherCount.setOpaque(false);

    techClassTypeGroup.add(rdoTechSameCount);
    rdoTechSameCount.setText("ìØï™óﬁÇÃçƒóàÇÃÇ›ëŒè€");
    rdoTechSameCount.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoTechSameCount.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoTechSameCount.setOpaque(false);

    cmbTargetYear.setEditable(true);
    cmbTargetYear.setMaximumRowCount(12);
    cmbTargetYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    lblTargetPeriod10.setText("êVãKãÊï™");

    buttonGroup1.add(rdoNewVisitCurrent);
    rdoNewVisitCurrent.setSelected(true);
    rdoNewVisitCurrent.setText("é©ìXêVãK");
    rdoNewVisitCurrent.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoNewVisitCurrent.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoNewVisitCurrent.setOpaque(false);

    buttonGroup1.add(rdoNewVisitAll);
    rdoNewVisitAll.setText("ëSìXêVãK");
    rdoNewVisitAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoNewVisitAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoNewVisitAll.setOpaque(false);

    lblTargetPeriod11.setText("ã∆ë‘çƒóà");

    buttonGroup2.add(rdoSameShopCatVisit);
    rdoSameShopCatVisit.setSelected(true);
    rdoSameShopCatVisit.setText(" ìØã∆ë‘Ç≈ÇÃçƒóàÇÃÇ›ëŒè€");
    rdoSameShopCatVisit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoSameShopCatVisit.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoSameShopCatVisit.setOpaque(false);

    buttonGroup2.add(rdoDiffShopCatVisit);
    rdoDiffShopCatVisit.setText(" ëºã∆ë‘Ç≈ÇÃçƒóàÇ‡ëŒè€");
    rdoDiffShopCatVisit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoDiffShopCatVisit.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoDiffShopCatVisit.setOpaque(false);

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                .add(lblTargetPeriod6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(lblTargetPeriod9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                .add(lblTargetPeriod10, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(rdoTotalCount)
                    .add(23, 23, 23)
                    .add(rdoSimpleCount)
                    .add(0, 0, Short.MAX_VALUE))
                .add(jPanel1Layout.createSequentialGroup()
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(rdoNewVisitCurrent, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                            .add(rdoNewVisitAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(rdoTechOtherCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(rdoTechSameCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(lblTargetPeriod11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(41, 41, 41)
                    .add(rdoDiffShopCatVisit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 172, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(rdoSameShopCatVisit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(42, 42, 42))
                .add(jPanel1Layout.createSequentialGroup()
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(lblTargetPeriod, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(lblTargetPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel5))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, lblTargetPeriod3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(lblTargetPeriod4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(6, 6, 6)))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(cmbReappearanceSpan, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(lblTargetDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 323, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(cmbTargetYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(lblTargetPeriod7)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(cmbTargetMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(lblTargetPeriod8))
                        .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 138, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(txtFixedCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(lblTargetPeriod5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
            .add(245, 245, 245))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel5)
                .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblTargetPeriod, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(lblTargetPeriod7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(lblTargetPeriod8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbTargetMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbTargetYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblTargetPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbReappearanceSpan, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(lblTargetPeriod3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(lblTargetDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblTargetPeriod4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(txtFixedCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(lblTargetPeriod5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rdoTotalCount, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(rdoSimpleCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(lblTargetPeriod6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblTargetPeriod9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(rdoTechOtherCount)
                .add(rdoTechSameCount))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblTargetPeriod10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(rdoNewVisitCurrent)
                .add(rdoNewVisitAll))
            .add(3, 3, 3)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblTargetPeriod11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(rdoSameShopCatVisit)
                .add(rdoDiffShopCatVisit)))
    );

    btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnOutputExcel.setBorderPainted(false);
    btnOutputExcel.setContentAreaFilled(false);
    btnOutputExcel.setFocusCycleRoot(true);
    btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOutputExcelActionPerformed(evt);
        }
    });

    targetLabel.setText("ëŒè€");

    target.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            targetActionPerformed(evt);
        }
    });

    lblCategory.setText("èWåvã∆ë‘");

    categoryLeftScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

    categoryLeftTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "ã∆ë‘ñº"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    categoryLeftTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
    categoryLeftTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    categoryLeftTable.getTableHeader().setReorderingAllowed(false);
    SwingUtil.setJTableHeaderRenderer(categoryLeftTable, SystemInfo.getTableHeaderRenderer());
    categoryLeftTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
    SelectTableCellRenderer.setSelectTableCellRenderer(categoryLeftTable);
    categoryLeftScrollPane.setViewportView(categoryLeftTable);

    jPanel2.setOpaque(false);

    selectAllButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right_off.jpg"));
    selectAllButton.setBorderPainted(false);
    selectAllButton.setContentAreaFilled(false);
    selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right_on.jpg"));
    selectAllButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            selectAllButtonActionPerformed(evt);
        }
    });

    selectButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right2_off.jpg"));
    selectButton.setBorderPainted(false);
    selectButton.setContentAreaFilled(false);
    selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right2_on.jpg"));
    selectButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            selectButtonActionPerformed(evt);
        }
    });

    releaseButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left2_off.jpg"));
    releaseButton.setBorderPainted(false);
    releaseButton.setContentAreaFilled(false);
    releaseButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left2_on.jpg"));
    releaseButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            releaseButtonActionPerformed(evt);
        }
    });

    releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left_off.jpg"));
    releaseAllButton.setBorderPainted(false);
    releaseAllButton.setContentAreaFilled(false);
    releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left_on.jpg"));
    releaseAllButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            releaseAllButtonActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(releaseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel2Layout.createSequentialGroup()
            .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(releaseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
    );

    categoryRightScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

    categoryRightTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "ã∆ë‘ñº"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    categoryRightTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
    categoryRightTable.getTableHeader().setReorderingAllowed(false);
    SwingUtil.setJTableHeaderRenderer(categoryRightTable, SystemInfo.getTableHeaderRenderer());
    categoryRightTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
    SelectTableCellRenderer.setSelectTableCellRenderer(categoryRightTable);
    TableColumnModel model = categoryRightTable.getColumnModel();
    categoryRightScrollPane.setViewportView(categoryRightTable);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(lblCategory)
                        .add(targetLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(2, 2, 2)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(layout.createSequentialGroup()
                            .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(layout.createSequentialGroup()
                            .add(categoryLeftScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 254, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                            .add(categoryRightScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 254, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 551, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(16, 16, 16)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(targetLabel)
                        .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(categoryRightScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(categoryLeftScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 150, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(lblCategory))
            .add(5, 5, 5)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(59, Short.MAX_VALUE))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void targetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetActionPerformed
        if (isLoading) return;
        changeTargetDate();
        
        //IVS_Thanh start add 20140725 MASHU_çƒóàï™êÕ
        this.initShopCategory();
        //IVS_Thanh end add 20140725 MASHU_çƒóàï™êÕ
        
    }//GEN-LAST:event_targetActionPerformed

    private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputExcelActionPerformed

        if (!SystemInfo.checkAuthorityPassword(260)) return;
        
        if (inputCheck()) {

            btnOutputExcel.setCursor(null);

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));                
                this.doOutput();

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }

    }//GEN-LAST:event_btnOutputExcelActionPerformed

    private void cmbTargetMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTargetMonthItemStateChanged
         changeTargetDate();       
    }//GEN-LAST:event_cmbTargetMonthItemStateChanged

    private void cmbReappearanceSpanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbReappearanceSpanItemStateChanged
        changeTargetDate();
    }//GEN-LAST:event_cmbReappearanceSpanItemStateChanged

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        this.moveCategory(true,true);
    }//GEN-LAST:event_selectButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        this.moveCategory(true,false);
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void releaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseButtonActionPerformed
        this.moveCategory(false,true);
    }//GEN-LAST:event_releaseButtonActionPerformed

    private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseAllButtonActionPerformed
        this.moveCategory(false,false);
    }//GEN-LAST:event_releaseAllButtonActionPerformed
    
    
    /**
     * ã∆ë‘èÓïÒÇê›íËÇ∑ÇÈ
     */
    private void initShopCategory(){
        Integer selectedTarget = null;
        Integer useShopCategory = 1;
        if(target.getSelectedItem() instanceof MstShop) {
            //ìXï‹
            MstShop ms = (MstShop)target.getSelectedItem();
            selectedTarget = ms.getShopID();
            useShopCategory = ms.getUseShopCategory();
            rdoNewVisitCurrent.setEnabled(true);
            rdoNewVisitCurrent.setSelected(true);            
        }else{
            //ÉOÉãÅ[Év
            //Luc start edit 20150213 #35207
            if(SystemInfo.getSetteing().isUseShopCategory()) {
            selectedTarget = null;
            rdoNewVisitCurrent.setEnabled(false);
            rdoNewVisitCurrent.setSelected(false);
            rdoNewVisitAll.setSelected(true);
            isHideCategory = true;
            }else {
                setVisibleCategory(false);
                isHideCategory = true;
                useShopCategory = 0;
            }
             //Luc end edit 20150213 #35207
        }
        SwingUtil.clearTable(categoryLeftTable);
        SwingUtil.clearTable(categoryRightTable);
        listCategory.clear();
        listLeftCategory.clear();
        listRightCategory.clear();
        if (useShopCategory == 1) {
            setVisibleCategory(true);
            try {
                ConnectionWrapper con =  SystemInfo.getConnection();
                listCategory.loadAllByShop(con, selectedTarget);
                DefaultTableModel categoryLeftModel = (DefaultTableModel)categoryLeftTable.getModel();

                for (MstShopRelation single : listCategory) {
                    Object[]  rowData = {single.getShopClassName()};
                    if (selectedTarget == null  || single.getShopId() != 0) {
                        categoryLeftModel.addRow(rowData);
                        listLeftCategory.add(single);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(SalesReportPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            isHideCategory = true;
        }else{
           setVisibleCategory(false);
           isHideCategory = false;
        }

    }
    
    /**
     * Set Visible ã∆ë‘
     * @param useCategoryFlg 
     */
    private void setVisibleCategory(boolean useCategoryFlg){
        lblCategory.setVisible(useCategoryFlg);
        categoryLeftScrollPane.setVisible(useCategoryFlg);
        categoryRightScrollPane.setVisible(useCategoryFlg);
        selectButton.setVisible(useCategoryFlg);
        selectAllButton.setVisible(useCategoryFlg);
        releaseButton.setVisible(useCategoryFlg);
        releaseAllButton.setVisible(useCategoryFlg);
        //nhanvt start add 20150122 New request #34998
        lblTargetPeriod11.setVisible(useCategoryFlg);
        rdoDiffShopCatVisit.setVisible(useCategoryFlg);
        rdoSameShopCatVisit.setVisible(useCategoryFlg);
        //nhanvt start add 20150122 New request #34998
    }
    
    /**
     * ã∆ë‘Çà⁄ìÆ
     * @param isLeftToRight true:left to right , false:right to left
     * @param isMoveAll true:ëSÇƒëIëÅ@ÅAfalse:àÍïîï™
     */
    public void moveCategory(boolean isLeftToRight, boolean isMoveAll) {
        JTable fromTable = (isLeftToRight ? categoryLeftTable : categoryRightTable);
        JTable toTable = (isLeftToRight ? categoryRightTable : categoryLeftTable);
        
        DefaultTableModel fromModel = (isLeftToRight ? (DefaultTableModel)categoryLeftTable.getModel() : (DefaultTableModel)categoryRightTable.getModel());
        DefaultTableModel toModel = (isLeftToRight ? (DefaultTableModel)categoryRightTable.getModel() : (DefaultTableModel)categoryLeftTable.getModel());
        
        MstShopRelations fromList =  (isLeftToRight ? listLeftCategory : listRightCategory); 
        MstShopRelations toList =  (isLeftToRight ? listRightCategory : listLeftCategory); 
        
        if (isMoveAll) {
            toList.addAll(fromList);
            fromList.removeAll(fromList);
        }else{
            int[]  selectedIndex = fromTable.getSelectedRows();
            if (selectedIndex.length > 0) {
                java.util.List<MstShopRelation> tempList = new ArrayList<MstShopRelation>();
                for (int i = 0; i < selectedIndex.length; i++) {
                    toList.add(fromList.get(selectedIndex[i]));
                    tempList.add(fromList.get(selectedIndex[i]));
                }
                fromList.removeAll(tempList);
            }
        }
        toList.sort();
        SwingUtil.clearTable(toTable);
        for (MstShopRelation single : toList) {
            Object[]  rowData = {single.getShopClassName()};
            toModel.addRow(rowData);
        }
        SwingUtil.clearTable(fromTable);
         for (MstShopRelation single : fromList) {
            Object[]  rowData = {single.getShopClassName()};
            fromModel.addRow(rowData);
        }
     
    }
    
    private void changeTargetDate(){
	
	// çƒóàä˙ä‘
	int reappearanceCount = getReappearanceSpan();

	// èWåvä˙ä‘ÇãÅÇﬂÇÈ
	Calendar cal = Calendar.getInstance();
	try{
	    cal.set(Calendar.YEAR, Integer.parseInt(this.cmbTargetYear.getSelectedItem().toString()) );
	} catch(Exception e){
	    MessageDialog.showMessageDialog(this,
		MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "ëŒè€ä˙ä‘"),
		this.getTitle(),
		JOptionPane.ERROR_MESSAGE);
	    cmbTargetYear.setSelectedItem(Calendar.getInstance().get(Calendar.YEAR));
	    return;                
	}

	cal.set(Calendar.MONTH, Integer.parseInt(cmbTargetMonth.getSelectedItem().toString()) - 1);
	cal.set(Calendar.DAY_OF_MONTH, 1);

	java.util.Date targetDate = null;
	try {
	    targetDate = cal.getTime();
	} catch(Exception e){}

	if(targetDate == null){
	    MessageDialog.showMessageDialog(this,
		MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "ëŒè€ä˙ä‘"),
		this.getTitle(),
		JOptionPane.ERROR_MESSAGE);
	    cmbTargetYear.setSelectedItem(Calendar.getInstance().get(Calendar.YEAR));
	    return;
	}
        
	// ÅõÉñåéëOÇÃåéèâ
	Calendar calculationStart = Calendar.getInstance();
	calculationStart.setTime(targetDate);
	if(reappearanceCount == 45){
	    // 45ì˙çƒóàÇÕ2ÉñåéëOÇÃ15ì˙
	    calculationStart.add(Calendar.MONTH, -2);
	    calculationStart.set(Calendar.DAY_OF_MONTH, 15);
	} else {
	    // ÇªÇÍà»äOÇÕÅõÉñåéëOÇÃ1ì˙
	    calculationStart.add(Calendar.MONTH, (reappearanceCount * -1));
	    calculationStart.set(Calendar.DAY_OF_MONTH, 1);
	}

	// çƒóàëŒè€ä˙ä‘
	// äJénì˙ÇÕèWåväJénì˙Ç∆ìØÇ∂
	Calendar targetStart = Calendar.getInstance();
	targetStart.setTime(calculationStart.getTime());

	Calendar targetEnd = Calendar.getInstance();
	targetEnd.setTime(targetStart.getTime());
	if (reappearanceCount == 45) {
	    // 45ì˙çƒóàÇÃèIóπÇÕÅAóÇåéÇÃ14ì˙
	    targetEnd.add(Calendar.MONTH, 1);
	    targetEnd.set(Calendar.DAY_OF_MONTH, 14);
	} else {
	    // èIóπÇÕäJénåéÇÃåéññ
	    targetEnd.add(Calendar.MONTH, 1);
	    targetEnd.add(Calendar.DAY_OF_MONTH, -1);
	}

        // ä˙ä‘ê›íËÇí˜ì˙äÓèÄÇ…Ç∑ÇÈ
        if (reappearanceCount != 45) {
            this.resetSpan(targetStart, targetEnd);
        }
        
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
	this.lblTargetDate.setText( sdf.format(targetStart.getTime()) + " Å` " + sdf.format(targetEnd.getTime()) );
    }
    
    /**
     * çƒóàéZèoä˙ä‘ÇãÅÇﬂÇÈ
     */
    private int getReappearanceSpan(){
        String textSpan = this.cmbReappearanceSpan.getSelectedItem().toString();
        
        if("1Éñåé".equals(textSpan)){
            return 1;
        } else if("45ì˙".equals(textSpan)){
            return 45;
        } else if("2Éñåé".equals(textSpan)){
            return 2;
        } else if("3Éñåé".equals(textSpan)){
            return 3;
        } else if("4Éñåé".equals(textSpan)){
            return 4;
        } else if("5Éñåé".equals(textSpan)){
            return 5;
        } else {
            return 6;
        }
    }
    
    private void doOutput() {

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

	ReportLogic logic = new ReportLogic();
	ReportParameterBean paramBean = new ReportParameterBean();
	paramBean.setMainReportType(ReportParameterBean.MAIN_REPORT_STAFF);
        
        //IVS_Thanh  start add 2014/08/01 Mashu_çƒóàï™êÕ
                String categoryIDList = "";
        String categoryNameList = "";
                   for (int i = 0; i < listRightCategory.size(); i++) {
            categoryIDList += listRightCategory.get(i).getShopCategoryId();
            categoryNameList += listRightCategory.get(i).getShopClassName();
            if (i != listRightCategory.size() - 1) {
                            categoryIDList += ",";
                categoryNameList += "ÅA";
                    }
                }
                paramBean.setCategoryIDList(categoryIDList);
        paramBean.setCategoryNameList(categoryNameList);
                if (rdoNewVisitCurrent.isSelected()) {
                    paramBean.setNewVisitCurrent(true);
                }
                else
                {            
                    paramBean.setNewVisitCurrent(false);
                }
        paramBean.setDiffShopCatVisit(rdoDiffShopCatVisit.isSelected());
        //IVS_Thanh  end add 2014/07/28 Mashu_çƒóàï™êÕ

	//ÉOÉãÅ[Év
	if(target.getSelectedItem() instanceof MstGroup) {
	    MstGroup mg = (MstGroup)target.getSelectedItem();
	    paramBean.setTargetName(mg.getGroupName());
	    paramBean.setShopIDList(mg.getShopIDListAll());
            //IVS_Thanh  start add 2014/08/01 Mashu_çƒóàï™êÕ
            paramBean.setIsGroupSelected(true);
            //IVS_Thanh  end add 2014/08/01 Mashu_çƒóàï™êÕ
	}
	//ìXï‹
	else if(target.getSelectedItem() instanceof MstShop) {
	    MstShop ms = (MstShop)target.getSelectedItem();
	    paramBean.setTargetName(ms.getShopName());
	    paramBean.setShopIDList(ms.getShopID().toString());
            //IVS_Thanh  start add 2014/08/01 Mashu_çƒóàï™êÕ
            paramBean.setIsGroupSelected(false);
            //IVS_Thanh  end add 2014/08/01 Mashu_çƒóàï™êÕ
	}

	//ëŒè€Ç∆Ç»ÇÈìXï‹Ç™ë∂ç›ÇµÇ»Ç¢èÍçá
	if(paramBean.getShopIDList().equals("")) {
		MessageDialog.showMessageDialog(this,
			MessageUtil.getMessage(4001),
			this.getTitle(),
			JOptionPane.ERROR_MESSAGE);
		return;
	}

	// éÂíSìñé“
	if (staff.getSelectedIndex() > 0) {
	    paramBean.setStaffId(((MstStaff)staff.getSelectedItem()).getStaffID());
	    paramBean.setStaffName(((MstStaff)staff.getSelectedItem()).getFullStaffName());
	} else {
	    paramBean.setStaffId(null);
	    paramBean.setStaffName("ëSëÃ");
	}
	
	// çƒóàéZèoä˙ä‘
	int reappearanceCount = getReappearanceSpan();
	paramBean.setReappearanceCountMessage(this.cmbReappearanceSpan.getSelectedItem().toString());

	// å≈íËâÒêî
	int fixedCount = 5;
	try {
	    fixedCount = Integer.parseInt(this.txtFixedCount.getText());
	} catch(NumberFormatException e){
	}
	paramBean.setFixedCount(fixedCount);

	// êlêîèåè
	String numberCondition = "âÑÇ◊ãqêî";
	if (this.rdoSimpleCount.isSelected()) {
	    numberCondition = "èÉãqêî";
	}
	paramBean.setNumberCondition(numberCondition);

        // ãZèpï™óﬁçƒóà
        paramBean.setSameTechnicClass(this.rdoTechSameCount.isSelected());
        
	// èWåvä˙ä‘ÇãÅÇﬂÇÈ
	Calendar cal = Calendar.getInstance();
	try{
	    cal.set(Calendar.YEAR, Integer.parseInt(this.cmbTargetYear.getSelectedItem().toString()) );
	} catch(Exception e) {
	}

	cal.set(Calendar.MONTH, Integer.parseInt(cmbTargetMonth.getSelectedItem().toString()) - 1);
	cal.set(Calendar.DAY_OF_MONTH, 1);
	java.util.Date targetDate = cal.getTime();

	// ÅõÉñåéëOÇÃåéèâ
	Calendar calculationStart = Calendar.getInstance();
	calculationStart.setTime(targetDate);
	if (reappearanceCount == 45) {
	    // 45ì˙çƒóàÇÕ2ÉñåéëOÇÃ15ì˙
	    calculationStart.add(Calendar.MONTH, -2);
	    calculationStart.set(Calendar.DAY_OF_MONTH, 15);
	} else {
	    // ÇªÇÍà»äOÇÕÅõÉñåéëOÇÃ1ì˙
	    calculationStart.add(Calendar.MONTH, (reappearanceCount * -1));
	    calculationStart.set(Calendar.DAY_OF_MONTH, 1);
	}

	// ëIÇÒÇæåéÇÃåéññ
	Calendar calculationEnd = Calendar.getInstance();
	calculationEnd.set(Integer.parseInt(this.cmbTargetYear.getSelectedItem().toString()), Integer.parseInt(cmbTargetMonth.getSelectedItem().toString()), 1 );// ëIëåéÇÃóÇåéÇ…ÇµÇƒ
	calculationEnd.add(Calendar.DAY_OF_MONTH, -1); // ÇPì˙ñﬂÇ∑

	// çƒóàëŒè€ä˙ä‘
	// äJénì˙ÇÕèWåväJénì˙Ç∆ìØÇ∂
	Calendar targetStart = Calendar.getInstance();
	targetStart.setTime(calculationStart.getTime());

	Calendar targetEnd = Calendar.getInstance();
	targetEnd.setTime(calculationStart.getTime());
	if(reappearanceCount == 45){
	    // 45ì˙çƒóàÇÃèIóπÇÕÅAóÇåéÇÃ14ì˙
	    targetEnd.add(Calendar.MONTH, 1);
	    targetEnd.set(Calendar.DAY_OF_MONTH, 14);
	} else {
	    // èIóπÇÕäJénåéÇÃåéññ
	    targetEnd.add(Calendar.MONTH, 1);         // óÇåéÇ…ÇµÇƒ
	    targetEnd.add(Calendar.DAY_OF_MONTH, -1); // ÇPì˙ñﬂÇ∑
	}

        // ä˙ä‘ê›íËÇí˜ì˙äÓèÄÇ…Ç∑ÇÈ
        if (reappearanceCount != 45) {
            this.resetSpan(targetStart, targetEnd);
            this.resetSpan(calculationStart, calculationEnd);
            calculationStart.setTime(targetStart.getTime());
        }
        
	paramBean.setTargetStartDate(sdf.format(targetStart.getTime()));
	paramBean.setTargetEndDate(sdf.format(targetEnd.getTime()));
	paramBean.setTargetStartDateObj(targetStart.getTime());
	paramBean.setTargetEndDateObj(targetEnd.getTime());

	paramBean.setCalculationStartDate(sdf.format(calculationStart.getTime()));
	paramBean.setCalculationEndDate(sdf.format(calculationEnd.getTime()));
	paramBean.setCalculationStartDateObj(calculationStart.getTime());
	paramBean.setCalculationEndDateObj(calculationEnd.getTime());

	paramBean.setNumberCondition(numberCondition);

	//èoóÕèàóù
	boolean logicResult = true;
	try {
            
            logicResult = logic.outStaffReportReappearanceOnePeriod(paramBean);
            
	} catch (Exception e) {
            
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(1099),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);

            return;
	}
        
	// ÉGÉâÅ[éû
	if (!logicResult) {
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(4001),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
	}	
    }
    	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JScrollPane categoryLeftScrollPane;
    private javax.swing.JTable categoryLeftTable;
    private javax.swing.JScrollPane categoryRightScrollPane;
    private javax.swing.JTable categoryRightTable;
    private javax.swing.JComboBox cmbReappearanceSpan;
    private javax.swing.JComboBox cmbTargetMonth;
    private javax.swing.JComboBox cmbTargetYear;
    private javax.swing.ButtonGroup countTypeGroup;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblTargetDate;
    private javax.swing.JLabel lblTargetPeriod;
    private javax.swing.JLabel lblTargetPeriod1;
    private javax.swing.JLabel lblTargetPeriod10;
    private javax.swing.JLabel lblTargetPeriod11;
    private javax.swing.JLabel lblTargetPeriod3;
    private javax.swing.JLabel lblTargetPeriod4;
    private javax.swing.JLabel lblTargetPeriod5;
    private javax.swing.JLabel lblTargetPeriod6;
    private javax.swing.JLabel lblTargetPeriod7;
    private javax.swing.JLabel lblTargetPeriod8;
    private javax.swing.JLabel lblTargetPeriod9;
    private javax.swing.JRadioButton rdoDiffShopCatVisit;
    private javax.swing.JRadioButton rdoNewVisitAll;
    private javax.swing.JRadioButton rdoNewVisitCurrent;
    private javax.swing.JRadioButton rdoSameShopCatVisit;
    private javax.swing.JRadioButton rdoSimpleCount;
    private javax.swing.JRadioButton rdoTechOtherCount;
    private javax.swing.JRadioButton rdoTechSameCount;
    private javax.swing.JRadioButton rdoTotalCount;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton releaseButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JButton selectButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel staff;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel target;
    private javax.swing.JLabel targetLabel;
    private javax.swing.ButtonGroup techClassTypeGroup;
    private javax.swing.JTextField txtFixedCount;
    // End of variables declaration//GEN-END:variables
	
	private	BusinessReportFocusTraversalPolicy	ftp	=
			new BusinessReportFocusTraversalPolicy();
	
	/**
	 * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
	 */
	private void addMouseCursorChange()
	{
            SystemInfo.addMouseCursorChange(btnOutputExcel);
	}
	
	private void setKeyListener()
	{
            cmbTargetYear.addKeyListener(SystemInfo.getMoveNextField());
            cmbTargetMonth.addKeyListener(SystemInfo.getMoveNextField());
            cmbTargetMonth.addFocusListener(SystemInfo.getSelectText());
            cmbReappearanceSpan.addKeyListener(SystemInfo.getMoveNextField());
            cmbReappearanceSpan.addFocusListener(SystemInfo.getSelectText());
            txtFixedCount.addKeyListener(SystemInfo.getMoveNextField());
            txtFixedCount.addFocusListener(SystemInfo.getSelectText());
            rdoTotalCount.addKeyListener(SystemInfo.getMoveNextField());  
            rdoSimpleCount.addKeyListener(SystemInfo.getMoveNextField());
            staff.addKeyListener(SystemInfo.getMoveNextField());
	}
	
	
	/**
	 * ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
	 * @return  ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicy
	 */
	public BusinessReportFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	
	/**
	 * ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicy
	 */
	private class BusinessReportFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponBusinessReportFocusTraversalPolicyÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
                    if (aComponent.equals(target)) {
                        return staff;
                    } else if (aComponent.equals(staff)) {
                        return cmbTargetYear;
                    } else if (aComponent.equals(cmbTargetYear.getComponent(2))) {
                        return cmbTargetMonth;
                    } else if (aComponent.equals(cmbTargetMonth)) {
                        return cmbReappearanceSpan;
                    } else if (aComponent.equals(cmbReappearanceSpan)) {
                        return txtFixedCount;
                    } else if (aComponent.equals(txtFixedCount)) {
                        if (rdoTotalCount.isSelected()) {
                            return rdoTotalCount;
                        }
                        return rdoSimpleCount;
                    } else if (aComponent.equals(rdoTotalCount) || aComponent.equals(rdoSimpleCount)) {
                        if (rdoTechOtherCount.isSelected()) {
                            return rdoTechOtherCount;
                        }
                        return rdoTechSameCount;
                    }
			return this. getStartComponent();
		}

		/**
		 * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
                       return this. getStartComponent();
			
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer êÊì™ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return this. getStartComponent();
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer aContainer - ç≈å„ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return rdoTechSameCount;
		}

		/**
		 * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
		 * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return this. getStartComponent();
		}
		
		/**
		 * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * show() Ç‹ÇΩÇÕ setVisible(true) ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA
		 * èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
		 * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA
		 * Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
		 * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
		 * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
		 */
		public Component getInitialComponent(Window window)
		{
			return this. getStartComponent();
		}
                private Component getStartComponent(){
                    if(target.getItemCount() == 1)
                    {
                        return staff;
                    }
                    return target ;
                }
		
	}
        
        private void resetSpan(Calendar calStart, Calendar calEnd) {

            int cutoffDay = 0;

            if (target.getSelectedItem() instanceof MstShop) {
                MstShop ms = (MstShop)target.getSelectedItem();
                cutoffDay = ms.getCutoffDay();
            } else {
                cutoffDay = SystemInfo.getAccountSetting().getCutoffDay();
            }

            if (cutoffDay == 31) return;

            Calendar calTo = Calendar.getInstance();
            calTo.setTime(calEnd.getTime());

            if (calTo.getActualMaximum(Calendar.DATE) <= cutoffDay) {
                calTo.set(Calendar.DAY_OF_MONTH, calTo.getActualMaximum(Calendar.DATE));
            } else {
                calTo.set(Calendar.DAY_OF_MONTH, cutoffDay);
            }

            Calendar calFrom = (Calendar)calTo.clone();
            calFrom.add(Calendar.MONTH, -1);
            calFrom.add(Calendar.DAY_OF_MONTH, 1);

            calStart.setTime(calFrom.getTime());
            calEnd.setTime(calTo.getTime());
        }

        private void initYearCombo(final JComboBox cmb, int nowYear) {
            
            cmb.removeAllItems();

            int y = Calendar.getInstance().get(Calendar.YEAR);
            for (int i = 0; i < 5; i++) {
                cmb.addItem(String.valueOf(y - i));
            }
            cmb.setSelectedItem(nowYear);
            cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusGained(java.awt.event.FocusEvent evt) {
                    ((JTextField)cmb.getEditor().getEditorComponent()).selectAll();
                }
            });
        }
        
    private boolean inputCheck()
    {
        NumberUtils numUtil = new NumberUtils();
        if(!numUtil.isNumber(this.cmbTargetYear.getSelectedItem().toString())) {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ëŒè€îN"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            Calendar cdr = Calendar.getInstance();
            this.cmbTargetYear.requestFocusInWindow();
            return false;
        }

        return true;
    }
        
}
