/*
 * NotMemberListPanel.java
 *
 * Created on 2007/03/12, 9:20
 */

package com.geobeck.sosia.pos.hair.report;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.product.MstItemClass;
import com.geobeck.sosia.pos.master.product.MstItemClasses;
import com.geobeck.sosia.pos.master.product.MstPlace;
import com.geobeck.sosia.pos.master.product.MstPlaces;
import com.geobeck.sosia.pos.report.bean.PostMaxResultsBean;
import com.geobeck.sosia.pos.swing.JComboBoxLabel;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.JTableEx;
import com.geobeck.swing.SwingUtil;

public class ItemStockListPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
	private boolean isLoading = false;
	private String shopIdString = "";
	private String itemClassIdString = "";
	private List<Integer> shopIdList = new ArrayList<Integer>();
	private MstItemClasses		mics		=	new MstItemClasses();
	private MstPlaces		mpcs		=	new MstPlaces();
	private HashMap<Integer, PostMaxResultsBean> map = new HashMap<Integer, PostMaxResultsBean>();

	public ItemStockListPanel() {
		isLoading = true;

		initComponents();
		addMouseCursorChange();

		this.setPath("帳票管理");
		this.setTitle("商品在庫一覧");
		this.setSize(835, 800);

		this.init();

		isLoading = false;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		btnGrp = new javax.swing.ButtonGroup();
		jPanel1 = new javax.swing.JPanel();
		shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
		itemClass = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
		lblShop = new javax.swing.JLabel();
		showButton = new javax.swing.JButton();
		btnOutput = new javax.swing.JButton();
		detailScrollPane = new javax.swing.JScrollPane();
		jLabel1 = new javax.swing.JLabel();
		tblDetail = new JTableEx();
        jLabel2 = new javax.swing.JLabel();
        place = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        jLabel3 = new javax.swing.JLabel();
        paramAll = new javax.swing.JRadioButton();
        paramThreeMonth = new javax.swing.JRadioButton();
        paramSixMonth = new javax.swing.JRadioButton();
        paramOld = new javax.swing.JRadioButton();
		
        try
        {
            ConnectionWrapper	con	=	SystemInfo.getConnection();

            mics.load(con);

            con.close();

            mics.add(0, new MstItemClass());
        }
        catch(SQLException e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        itemClass = new JComboBox(new DefaultComboBoxModel(mics.toArray())
            {
                public void setSelectedItem(Object o)
                {
                    super.setSelectedItem(o);
                }
            });
        
        try
        {
            ConnectionWrapper	con	=	SystemInfo.getConnection();

            mpcs.load(con);

            con.close();

            mpcs.add(0, new MstPlace());
        }
        catch(SQLException e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        place = new JComboBox(new DefaultComboBoxModel(mpcs.toArray())
            {
                public void setSelectedItem(Object o)
                {
                    super.setSelectedItem(o);
                }
            });

		setFocusCycleRoot(true);

		jPanel1.setOpaque(false);

		shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		shop.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				shopActionPerformed(evt);
			}
		});

		lblShop.setText("店舗");

		showButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
		showButton.setBorderPainted(false);
		showButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
		showButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showButtonActionPerformed(evt);
			}
		});

		btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
		btnOutput.setBorderPainted(false);
		btnOutput.setFocusCycleRoot(true);
		btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
		btnOutput.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnOutputActionPerformed(evt);
			}
		});

		detailScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		detailScrollPane.setPreferredSize(new java.awt.Dimension(457, 402));

		tblDetail.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] {}));
		tblDetail.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
		tblDetail.setSelectionBackground(new java.awt.Color(204, 204, 204));
		tblDetail.setSelectionForeground(new java.awt.Color(0, 0, 0));
		tblDetail.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		tblDetail.getTableHeader().setReorderingAllowed(false);
		tblDetail.setDefaultRenderer(String.class, new SelectTableCellRenderer());
		SwingUtil.setJTableHeaderRenderer(tblDetail, SystemInfo.getTableHeaderRenderer());
		tblDetail.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
		detailScrollPane.setViewportView(tblDetail);
		
        itemClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        itemClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemClassActionPerformed(evt);
            }
        });

        jLabel1.setText("商品分類");
        
        jLabel2.setText("置場");
        place.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        
        jLabel3.setText("出力条件");

        btnGrp.add(paramAll);
        paramAll.setText("全て ");
        paramAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        paramAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
        paramAll.setOpaque(false);
        paramAll.setSelected(true);
        
        btnGrp.add(paramThreeMonth);
        paramThreeMonth.setText("3カ月以上出庫なし");
        paramThreeMonth.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        paramThreeMonth.setMargin(new java.awt.Insets(0, 0, 0, 0));
        paramThreeMonth.setOpaque(false);
        
        btnGrp.add(paramSixMonth);
        paramSixMonth.setText("6か月以上出庫なし"); 
        paramSixMonth.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        paramSixMonth.setMargin(new java.awt.Insets(0, 0, 0, 0));
        paramSixMonth.setOpaque(false);

        btnGrp.add(paramOld);
        paramOld.setText("過去に出庫なし");
        paramOld.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        paramOld.setMargin(new java.awt.Insets(0, 0, 0, 0));
        paramOld.setOpaque(false);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, detailScrollPane, 0, 1075, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jPanel1Layout.createSequentialGroup()
                                    .add(lblShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(16, 16, 16))
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .add(jLabel1)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel2)
                                .add(34, 34, 34))
                            .add(jLabel3))
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(itemClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(44, 44, 44)
                                .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(place, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(paramAll)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(paramThreeMonth)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(paramSixMonth)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(paramOld)))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(11, 11, 11)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(3, 3, 3)
                                .add(lblShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(13, 13, 13)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(itemClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(26, 26, 26)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(12, 12, 12)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(place, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(paramAll)
                    .add(paramThreeMonth)
                    .add(paramSixMonth)
                    .add(paramOld))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(detailScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 580, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
	
	private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
		if (isLoading)
			return;

		// shopIdStringを作成
		this.getShopIdString();
	}//GEN-LAST:event_shopActionPerformed

	private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
		this.showDetail();
	}//GEN-LAST:event_showButtonActionPerformed

	private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed
		btnOutput.setCursor(null);

		try {
			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			this.showDetail();
			printExcel();
		} finally {
			setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		}
	}//GEN-LAST:event_btnOutputActionPerformed
	
    private void itemClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemClassActionPerformed
        // TODO add your handling code here:
		if (isLoading)
			return;

		// shopIdStringを作成
		this.getItemClassString();
    }//GEN-LAST:event_itemClassActionPerformed
    
	// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGrp;
	private javax.swing.JButton btnOutput;
	private javax.swing.JScrollPane detailScrollPane;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JLabel lblShop;
	private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
	private javax.swing.JComboBox itemClass;
	private javax.swing.JButton showButton;
	private JTableEx tblDetail;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JComboBox place;
	private javax.swing.JRadioButton paramAll;
	private javax.swing.JRadioButton paramOld;
	private javax.swing.JRadioButton paramSixMonth;
	private javax.swing.JRadioButton paramThreeMonth;

	// End of variables declaration//GEN-END:variables

	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange() {
		SystemInfo.addMouseCursorChange(showButton);
		SystemInfo.addMouseCursorChange(btnOutput);
	}

	/**
	 * 初期化処理を行う。
	 */
	private void init() {
		// 店舗selectboxを初期化
		MstShop nullShop = new MstShop();
		nullShop.setShopID(null);
		nullShop.setShopName("");
		shop.addItem(nullShop);
		SystemInfo.initGroupShopComponents(shop, 2);
		this.getShopIdString();
	}

	/**
	 * 明細を表示する。
	 */
	private void showDetail() {
		// 先に明細をクリア
		SwingUtil.clearTable(tblDetail);

		List<String> list = this.getDetailHeaderList();
		tblDetail.setModel(new DefaultTableModel(new Object[][] {}, (String[]) list.toArray(new String[0])) {
			public Class getColumnClass(int columnIndex) {
				return String.class;
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return false;
			}
		});
		SwingUtil.setJTableHeaderRenderer(tblDetail, SystemInfo.getTableHeaderRenderer());

		// 列幅を調整
		// 商品名
		if (((MstShop) shop.getSelectedItem()).getShopID() == null) {
			//tblDetail.getColumnModel().getColumn(0).setPreferredWidth(382);
			tblDetail.getColumnModel().getColumn(0).setPreferredWidth(431);
		} else {
			//tblDetail.getColumnModel().getColumn(0).setPreferredWidth(537);
			tblDetail.getColumnModel().getColumn(0).setPreferredWidth(431);
		}
		
		// 最終入庫日
		tblDetail.getColumnModel().getColumn(1).setPreferredWidth(100);
		DefaultTableCellRenderer defaultRenderCenter = new DefaultTableCellRenderer();
		defaultRenderCenter.setHorizontalAlignment(SwingConstants.CENTER); //中寄せ
		tblDetail.getColumnModel().getColumn(1).setCellRenderer(defaultRenderCenter);
		// 最終出庫日
		ColorTableCellRenderrer cellRenderCenter = new ColorTableCellRenderrer();
		tblDetail.getColumnModel().getColumn(2).setPreferredWidth(100);
		cellRenderCenter.setHorizontalAlignment(SwingConstants.CENTER); //中寄せ
		tblDetail.getColumnModel().getColumn(2).setCellRenderer(cellRenderCenter);
		
		// 在庫数
		for (int i = 3; i < tblDetail.getColumnCount(); i++) {
			tblDetail.getColumnModel().getColumn(i).setPreferredWidth(155);
		}

		// SQL文を作成
		String sql = "";
		sql += " SELECT base_inv.inventory_division,base.item_id,base.item_name,";
		// 店舗別在庫数
		for (Integer shopId : this.shopIdList) {
			sql += " get_item_stock(" + shopId + ",base.item_id,base_inv.inventory_division,to_date(to_char(CURRENT_TIMESTAMP,'yyyy-mm-dd'),'yyyy-mm-dd')) AS stockcount" + shopId + ",";
		}
		// 最終入庫日
		sql += " (select max(store.store_date) from data_slip_store store,data_slip_store_detail stored where store.shop_id = stored.shop_id and store.slip_no = stored.slip_no";
		sql += " and store.shop_id in (" + this.shopIdString + ")";
		sql += " and stored.item_id = base.item_id and stored.item_use_division = base_inv.inventory_division";
		sql += " and store.store_date <= to_date(to_char(CURRENT_TIMESTAMP,'yyyy-mm-dd'), 'yyyy-mm-dd')";
		sql += " and store.delete_date is null and stored.delete_date is null) as max_store_date,";
		// 最終出庫日
		sql += " (select max(ship.ship_date) from data_slip_ship ship,data_slip_ship_detail shipd where ship.shop_id = shipd.shop_id and ship.slip_no = shipd.slip_no";
		sql += " and ship.shop_id in (" + this.shopIdString + ")";
		sql += " and shipd.item_id = base.item_id and shipd.item_use_division = base_inv.inventory_division";
		sql += " and ship.ship_date <= to_date(to_char(CURRENT_TIMESTAMP,'yyyy-mm-dd'), 'yyyy-mm-dd')";
		sql += " and ship.delete_date is null and shipd.delete_date is null) as max_ship_date,";
		// 最終出庫日
		sql += " (select max(ds.sales_date) from data_sales ds,data_sales_detail dsd where dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no";
		sql += " and ds.shop_id in (" + this.shopIdString + ")";
		sql += " and dsd.product_division = 2";
		sql += " and dsd.product_id = base.item_id";
		sql += " and ds.sales_date <= to_date(to_char(CURRENT_TIMESTAMP,'yyyy-mm-dd'), 'yyyy-mm-dd')";
		sql += " and ds.delete_date is null and dsd.delete_date is null) as max_sales_date";
		// from base
		sql += " from";
		sql += " (SELECT DISTINCT m_itc.item_class_id,m_itc.display_seq AS class_seq,m_it.item_id,m_it.display_seq AS item_seq,m_it.item_name";
		sql += " FROM mst_supplier_item m_si";
		sql += " LEFT JOIN mst_item m_it ON m_it.item_id = m_si.item_id";
		sql += " LEFT JOIN mst_item_class m_itc ON m_itc.item_class_id = m_it.item_class_id,";
		sql += " mst_use_product m_up";
		sql += " WHERE m_up.shop_id in (" + this.shopIdString + ")";
		sql += " AND m_up.product_division = 2";
		sql += " AND m_up.product_id = m_si.item_id";
		sql += " AND m_it.delete_date IS NULL";
		sql += " AND m_itc.delete_date IS NULL";
		sql += " AND m_si.delete_date IS NULL";
		if (!this.itemClassIdString.equals("")) {
			sql += " AND m_itc.item_class_id ='" + this.itemClassIdString + "'";
		}
		if (((MstPlace) place.getSelectedItem()).getPlaceID() != null) {
			String placeID = ((MstPlace) place.getSelectedItem()).getPlaceID().toString();
			sql += " AND m_it.place_id ='" + placeID + "'";
		}
		
		sql += ") base";
		// left join base_inv
		sql += " LEFT JOIN (SELECT 1 AS inventory_division UNION SELECT 2 AS inventory_division) AS base_inv ON TRUE";
		// where
		sql += " WHERE base_inv.inventory_division IS NOT NULL";
		
		// order by 
		sql += " ORDER BY base_inv.inventory_division,base.class_seq,base.item_class_id,base.item_seq,base.item_id";
		System.out.println("最終入庫日,最終出庫日,在庫数:" + sql);

		try {
			// 検索を行う
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				// コラム数
				int colCount = 0;
				if (((MstShop) shop.getSelectedItem()).getShopID() == null) {
					// 全店
					colCount = 4 + shopIdList.size();
				} else {
					// 個別店舗
					colCount = 4;
				}

				Object[] row = new Object[colCount];

				// 商品名
				row[0] = rs.getString("item_name");
				// 最終入庫日
				Date maxStoreDate = rs.getDate("max_store_date");
				if (maxStoreDate != null) {
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy年M月d日");
					row[1] = sdf.format(new java.util.Date(maxStoreDate.getTime()));
				}
				// 最終出庫日
				Date maxSalesDate = rs.getDate("max_sales_date");
				Date maxShipDate = rs.getDate("max_ship_date");
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy年M月d日");
				
				String maxDate = null;
				if (maxSalesDate != null && maxShipDate != null) {
					if (maxSalesDate.getTime() > maxShipDate.getTime()) {
						row[2] = sdf.format(new java.util.Date(maxSalesDate.getTime()));
						maxDate = sdf.format(new java.util.Date(maxSalesDate.getTime()));
					} else {
						row[2] = sdf.format(new java.util.Date(maxShipDate.getTime()));
						maxDate = sdf.format(new java.util.Date(maxShipDate.getTime()));
					}
				} else if (maxSalesDate != null) {
					row[2] = sdf.format(new java.util.Date(maxSalesDate.getTime()));
					maxDate = sdf.format(new java.util.Date(maxSalesDate.getTime()));
				} else if (maxShipDate != null) {
					row[2] = sdf.format(new java.util.Date(maxShipDate.getTime()));
					maxDate = sdf.format(new java.util.Date(maxShipDate.getTime()));
				}
				
				// 出力条件
				if (maxDate != null) {
					try {
						int valueInt = Integer.parseInt(new SimpleDateFormat("yyyyMMdd").format(new SimpleDateFormat("yyyy年M月d日").parse((String) maxDate).getTime()));
						Calendar sixMonthAgoCal = Calendar.getInstance();
						sixMonthAgoCal.add(Calendar.MONTH, -6);
						int sixMonthAgoInt = Integer.parseInt(new SimpleDateFormat("yyyyMMdd").format(sixMonthAgoCal.getTime()));
						Calendar threeMonthAgoCal = Calendar.getInstance();
						threeMonthAgoCal.add(Calendar.MONTH, -3);
						int threeMonthAgoInt = Integer.parseInt(new SimpleDateFormat("yyyyMMdd").format(threeMonthAgoCal.getTime()));
						
						if (paramThreeMonth.isSelected()) {
							if (valueInt > threeMonthAgoInt) {
								continue;
							}
						} else if (paramSixMonth.isSelected()) {
							if (valueInt > sixMonthAgoInt) {
								continue;
							}
						} else if (paramOld.isSelected()) {
							continue;
						}
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
				
				// 在庫数
				List<Integer> stockCountList = new ArrayList<Integer>();
				for (Integer shopId : this.shopIdList) {
					stockCountList.add(rs.getInt("stockcount" + shopId));
				}
				if (((MstShop) shop.getSelectedItem()).getShopID() == null) {
					// 全店の場合
					Integer totalStock = 0;
					for (int i = 0; i < stockCountList.size(); i++) {
						row[4 + i] = stockCountList.get(i);
						totalStock += stockCountList.get(i);
					}
					row[3] = totalStock;
				} else {
					// 個別店舗の場合
					row[3] = stockCountList.get(0);
				}

				DefaultTableModel model = (DefaultTableModel) tblDetail.getModel();
				if ((Integer)row[3] > 0) {
					model.addRow(row);
				}
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}

	/**
	 * shopIdStringを作成する。
	 */
	private void getShopIdString() {
		String shopIdString = "";
		this.shopIdList.clear();

		if (((MstShop) shop.getSelectedItem()).getShopID() == null) {
			// 全店の場合
			for (int i = 1; i < shop.getItemCount(); i++) {
				MstShop mstShop = (MstShop) shop.getItemAt(i);
				if (shopIdString.equals("")) {
					shopIdString += mstShop.getShopID();
				} else {
					shopIdString += "," + mstShop.getShopID();
				}
				this.shopIdList.add(mstShop.getShopID());
			}
		} else {
			shopIdString = ((MstShop) shop.getSelectedItem()).getShopID().toString();
			this.shopIdList.add(((MstShop) shop.getSelectedItem()).getShopID());
		}

		this.shopIdString = shopIdString;
		System.out.println("shopIdString:" + this.shopIdString);
	}
	
	/**
	 * itemClassStringを作成する。
	 */
	private void getItemClassString() {
		if (((MstItemClass) itemClass.getSelectedItem()).getItemClassID() != null) {
			this.itemClassIdString = ((MstItemClass) itemClass.getSelectedItem()).getItemClassID().toString();
		} else {
			this.itemClassIdString = "";
		}
	}

	/**
	 * EXCEL出力を行う
	 */
	private void printExcel() {
		JExcelApi jx = new JExcelApi("商品在庫一覧");
		jx.setTemplateFile("/reports/商品在庫一覧.xls");

		// ヘッダ
		if (((MstShop) shop.getSelectedItem()).getShopID() == null) {
			jx.setValue(1, 6, "対象店舗:全店");
		} else {
			jx.setValue(1, 6, "対象店舗:" + ((MstShop) shop.getSelectedItem()).getShopName());
		}
		
		if (((MstItemClass) itemClass.getSelectedItem()).getItemClassID() == null) {
			jx.setValue(1, 7, "商品分類:全部");
		} else {
			jx.setValue(1, 7, "商品分類:" + ((MstItemClass) itemClass.getSelectedItem()).getItemClassName());
		}
		
		if (((MstPlace) place.getSelectedItem()).getPlaceID() == null) {
			jx.setValue(1, 8, "置場:全部");
		} else {
			jx.setValue(1, 8, "置場:" + ((MstPlace) place.getSelectedItem()).getPlaceName());
		}
		
		if (paramThreeMonth.isSelected()) {
			jx.setValue(1, 9, "出力条件：3カ月以上出庫なし");
		} else if (paramSixMonth.isSelected()) {
			jx.setValue(1, 9, "出力条件：6カ月以上出庫なし");
		} else if (paramOld.isSelected()) {
			jx.setValue(1, 9, "出力条件：過去に出庫なし");
		} else if (paramAll.isSelected()) {
			jx.setValue(1, 9, "出力条件：全て");
		}

		
		DefaultTableModel model = (DefaultTableModel) tblDetail.getModel();
		int rowCount = model.getRowCount();
		int colCount = model.getColumnCount();

		// insertする行数
		int insertRowCount = 0;
		if (rowCount > 1) {
			insertRowCount = rowCount - 1;
		}
		// insertする
		if (insertRowCount > 0) {
			jx.insertRow(12, insertRowCount);
		}
		
		if (((MstShop) shop.getSelectedItem()).getShopID() == null) {
			
			// 全店舗の場合
			// コラムを削除
			if (this.shopIdList.size() < 33) {
				int deleteColCount = 33 - this.shopIdList.size();
				for (int i = 0; i < deleteColCount; i++) {
					jx.removeColumn(5);
				}
			}
			// 店舗名を出力
			for (int i = 1; i < shop.getItemCount(); i++) {
				jx.setValue(4 + i, 11, ((MstShop) shop.getItemAt(i)).getShopName());
			}
		} else {
			// 個別店舗の場合
			// コラムを削除
			int deleteColCount = 32;
			for (int i = 0; i < deleteColCount; i++) {
				jx.removeColumn(5);
			}
			jx.removeColumn(4);
			// 店舗名を出力
			jx.setValue(4, 11, ((MstShop) shop.getSelectedItem()).getShopName());
		}
		
		// 明細を出力
		int rowIndex = 0;
		for (Object row : model.getDataVector()) {
			for (int colIndex = 0; colIndex < colCount; colIndex++) {
				Object obj = ((Vector) row).get(colIndex);
				if (obj != null && !obj.equals("")) {
					if (colIndex == 2) {
						try {
							int valueInt = Integer.parseInt(new SimpleDateFormat("yyyyMMdd").format(new SimpleDateFormat("yyyy年M月d日").parse((String) obj).getTime()));

							Calendar sixMonthAgoCal = Calendar.getInstance();
							sixMonthAgoCal.add(Calendar.MONTH, -6);
							int sixMonthAgoInt = Integer.parseInt(new SimpleDateFormat("yyyyMMdd").format(sixMonthAgoCal.getTime()));
							Calendar threeMonthAgoCal = Calendar.getInstance();
							threeMonthAgoCal.add(Calendar.MONTH, -3);
							int threeMonthAgoInt = Integer.parseInt(new SimpleDateFormat("yyyyMMdd").format(threeMonthAgoCal.getTime()));

							if (valueInt < sixMonthAgoInt) {
								jx.setValue(colIndex + 1, 12 + rowIndex, obj, jxl.format.Colour.RED);
							} else if (valueInt < threeMonthAgoInt) {
								jx.setValue(colIndex + 1, 12 + rowIndex, obj, jxl.format.Colour.BLUE2);
							} else {
								jx.setValue(colIndex + 1, 12 + rowIndex, obj);
							}
						} catch (ParseException e) {
							e.printStackTrace();
						}
					} else {
						jx.setValue(colIndex + 1, 12 + rowIndex, obj);
					}

				}
			}

			rowIndex++;
		}
		
		jx.openWorkbook();
	}

	/**
	 * 明細テーブルのヘッダデータを取得。
	 * @return
	 */
	private List<String> getDetailHeaderList() {
		List<String> list = new ArrayList<String>();

		list.add("商品名");
		list.add("最終入庫日");
		list.add("最終出庫日");

		if (((MstShop) shop.getSelectedItem()).getShopID() == null) {
			list.add("全体");

			// 全店の場合
			for (int i = 1; i < shop.getItemCount(); i++) {
				list.add(((MstShop) shop.getItemAt(i)).getShopName());
			}
		} else {
			list.add(((MstShop) shop.getSelectedItem()).getShopName());
		}

		return list;
	}

	/**
	 * 色を付けるTableCellRenderrer。
	 * @author katsu
	 *
	 */
	class ColorTableCellRenderrer extends DefaultTableCellRenderer {
		@Override
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
			Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

			if (value == null || value.equals("")) {
				return comp;
			}

			try {
				int valueInt = Integer.parseInt(new SimpleDateFormat("yyyyMMdd").format(new SimpleDateFormat("yyyy年M月d日").parse((String) value).getTime()));

				Calendar sixMonthAgoCal = Calendar.getInstance();
				sixMonthAgoCal.add(Calendar.MONTH, -6);
				int sixMonthAgoInt = Integer.parseInt(new SimpleDateFormat("yyyyMMdd").format(sixMonthAgoCal.getTime()));
				Calendar threeMonthAgoCal = Calendar.getInstance();
				threeMonthAgoCal.add(Calendar.MONTH, -3);
				int threeMonthAgoInt = Integer.parseInt(new SimpleDateFormat("yyyyMMdd").format(threeMonthAgoCal.getTime()));

				if (valueInt < sixMonthAgoInt) {
					comp.setForeground(Color.red);
				} else if (valueInt < threeMonthAgoInt) {
					comp.setForeground(Color.blue);
				} else {
					comp.setForeground(Color.black);
				}
			} catch (ParseException e) {
				e.printStackTrace();
			}

			return comp;
		}

	}
}