/*
 * Ito3DCustomerListPanel.java
 *
 * Created on 2010/05/18, 12:00
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.util.SQLUtil;
import java.awt.*;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.*;
import javax.swing.*;
import com.geobeck.swing.*;
import javax.swing.table.DefaultTableModel;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.hair.customer.MstCustomerPanel;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.hair.mail.*;
import com.geobeck.sosia.pos.mail.*;
import java.text.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.hair.report.util.*;

/**
 *
 * @author  geobeck
 */
public class Ito3DCustomerListPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx implements SelectMailAddressDialogOpener
{
	private Integer selectedAddress = -1;
        private ArrayList<MstCustomer> resultList = new ArrayList<MstCustomer>();
        
        private Object target = null;
        private String staffName = "";
        private String targetPeriodStartDate = "";
        private String targetPeriodEndDate = "";
        private String taxName = "";
        private String categoryName = "";
        private String whereCondition = "";
        private String tableName = "";
       
        /** Creates new form StaffShopRankingPanel */
	public Ito3DCustomerListPanel()
	{
            initComponents();
            addMouseCursorChange();
            this.setSize(820,680);
            this.setPath("帳票出力");
            this.setTitle("カルテ分析");
            this.setKeyListener();

            this.initTableColumnWidth();

            //初期化処理
            this.init();
            
            // メール作成ボタン表示設定
            this.mailButton.setVisible(SystemInfo.checkAuthority(53));
            // 宛名ラベル作成ボタン表示設定
            this.sealButton.setVisible(SystemInfo.checkAuthority(55));
            // ハガキ作成ボタン表示設定
            this.postcardButton.setVisible(SystemInfo.checkAuthority(54));
            
	}
        
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
            SystemInfo.addMouseCursorChange(btnOutput);
            SystemInfo.addMouseCursorChange(mailButton);
            SystemInfo.addMouseCursorChange(sealButton);
            SystemInfo.addMouseCursorChange(postcardButton);
            SystemInfo.addMouseCursorChange(selectAllButton);
            SystemInfo.addMouseCursorChange(releaseAllButton);
            SystemInfo.addMouseCursorChange(closeButton);
	}
        
    	public void setSelectedAddress(Integer selectedAddress)
	{
            this.selectedAddress = selectedAddress;
	}
	    
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        customerGroup = new javax.swing.ButtonGroup();
        comingCycleGroup = new javax.swing.ButtonGroup();
        customerCategoryGroup = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        postcardButton = new javax.swing.JButton();
        sealButton = new javax.swing.JButton();
        mailButton = new javax.swing.JButton();
        btnOutput = new javax.swing.JButton();
        releaseAllButton = new javax.swing.JButton();
        selectAllButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        shopLabel = new javax.swing.JLabel();
        shop = new javax.swing.JLabel();
        shopLabel1 = new javax.swing.JLabel();
        staff = new javax.swing.JLabel();
        shopLabel2 = new javax.swing.JLabel();
        targetPeriod = new javax.swing.JLabel();
        shopLabel3 = new javax.swing.JLabel();
        tax = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        customersTable = new com.geobeck.swing.JTableEx();
        jScrollPane2 = new javax.swing.JScrollPane();
        totalTable = new com.geobeck.swing.JTableEx();

        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        pnlMain.setLayout(null);

        pnlMain.setFocusCycleRoot(true);
        pnlMain.setFocusTraversalPolicy(getFocusTraversalPolicy());
        pnlMain.setOpaque(false);
        postcardButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_off.jpg"));
        postcardButton.setBorderPainted(false);
        postcardButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_on.jpg"));
        postcardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postcardButtonActionPerformed(evt);
            }
        });

        pnlMain.add(postcardButton);
        postcardButton.setBounds(710, 0, 92, 25);

        sealButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_seal_off.jpg"));
        sealButton.setBorderPainted(false);
        sealButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_seal_on.jpg"));
        sealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sealButtonActionPerformed(evt);
            }
        });

        pnlMain.add(sealButton);
        sealButton.setBounds(610, 0, 92, 25);

        mailButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_mail_off.jpg"));
        mailButton.setBorderPainted(false);
        mailButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_mail_on.jpg"));
        mailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailButtonActionPerformed(evt);
            }
        });

        pnlMain.add(mailButton);
        mailButton.setBounds(510, 0, 92, 25);

        btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutput.setBorderPainted(false);
        btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputActionPerformed(evt);
            }
        });

        pnlMain.add(btnOutput);
        btnOutput.setBounds(410, 0, 92, 25);

        releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/select/release_all_off.jpg"));
        releaseAllButton.setBorderPainted(false);
        releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/release_all_on.jpg"));
        releaseAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseAllButtonActionPerformed(evt);
            }
        });

        pnlMain.add(releaseAllButton);
        releaseAllButton.setBounds(710, 125, 92, 25);

        selectAllButton.setIcon(SystemInfo.getImageIcon("/button/select/select_all_off.jpg"));
        selectAllButton.setBorderPainted(false);
        selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_all_on.jpg"));
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        pnlMain.add(selectAllButton);
        selectAllButton.setBounds(610, 125, 92, 25);

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/back_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/back_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        pnlMain.add(closeButton);
        closeButton.setBounds(0, 0, 92, 25);

        shopLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel.setText("\u5bfe\u8c61\u5e97\u8217");
        pnlMain.add(shopLabel);
        shopLabel.setBounds(10, 50, 60, 20);

        shop.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        shop.setText("\u30b8\u30aa\u30b5\u30ed\u30f3");
        pnlMain.add(shop);
        shop.setBounds(85, 50, 150, 20);

        shopLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel1.setText("\u4e3b\u62c5\u5f53\u8005");
        pnlMain.add(shopLabel1);
        shopLabel1.setBounds(10, 75, 60, 20);

        staff.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        staff.setText("\u6307\u5b9a\u306a\u3057");
        pnlMain.add(staff);
        staff.setBounds(85, 75, 150, 20);

        shopLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel2.setText("\u5bfe\u8c61\u671f\u9593");
        pnlMain.add(shopLabel2);
        shopLabel2.setBounds(10, 100, 60, 20);

        targetPeriod.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        targetPeriod.setText("2009\u5e7401\u6708 \uff5e 2009\u5e7401\u6708");
        pnlMain.add(targetPeriod);
        targetPeriod.setBounds(85, 100, 150, 20);

        shopLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel3.setText("\u7a0e\u533a\u5206");
        pnlMain.add(shopLabel3);
        shopLabel3.setBounds(10, 125, 60, 20);

        tax.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        tax.setText("\u7a0e\u8fbc");
        pnlMain.add(tax);
        tax.setBounds(85, 125, 150, 20);

        categoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        categoryLabel.setText("\u60a9\u307f\u5ba2\u30fb\u6642\u9593\u304c\u306a\u3044\u5ba2");
        categoryLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlMain.add(categoryLabel);
        categoryLabel.setBounds(310, 80, 160, 30);

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><p>顧客<br>情報</p></html>", "顧客No.", "氏名", "<html>性<br>別</html>", "前回来店日", "主担当者", "<html>指<br>名</html>", "<html>&nbsp;期間内<br>来店回数</html>", "来店周期", "売上金額", "店販金額", "平均単価", "<html>メール<br>&nbsp;有無 </html>", "<html>送信<br>対象</html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        customersTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        customersTable.getTableHeader().setReorderingAllowed(false);

        jScrollPane1.setViewportView(customersTable);

        jScrollPane2.setBorder(null);
        totalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "カルテ枚数", "平均来店周期", "売上金額", "店販金額", "客単価"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        totalTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        totalTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        totalTable.getTableHeader().setReorderingAllowed(false);

        jScrollPane2.setViewportView(totalTable);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pnlMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(352, 352, 352)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 154, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.showOpener();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void changeSelect(boolean select){
        
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
        
        for (int i = 0; i < model.getRowCount(); i++) {
            
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(13) != null){
                row.add(13, select);
            }
        }
    }
    
    private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseAllButtonActionPerformed
        this.changeSelect(false);
    }//GEN-LAST:event_releaseAllButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        this.changeSelect(true);
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void postcardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postcardButtonActionPerformed
        this.printPostcard();
    }//GEN-LAST:event_postcardButtonActionPerformed

    private void sealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sealButtonActionPerformed
        this.createSeal();
    }//GEN-LAST:event_sealButtonActionPerformed

    private void mailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailButtonActionPerformed
        this.sendMail();
    }//GEN-LAST:event_mailButtonActionPerformed

    private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed

        btnOutput.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            this.print();
            
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

    }//GEN-LAST:event_btnOutputActionPerformed

    private boolean checkDuplicateCustomer(ArrayList<MstCustomer> selectedArray, MstCustomer customer){
        for(MstCustomer mc : selectedArray){
            if(mc.getCustomerID().intValue() == customer.getCustomerID().intValue()){
                return true;
            }
        }
        return false;
    }
    
    private void printPostcard() {
	
	DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();
      
        for (int i = 0; i < model.getRowCount(); i++) {
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if (row.get(13) != null && (Boolean)row.get(13)) {
		
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if (this.checkDuplicateCustomer(selectedArray, mc)) {
                    continue;
                }
                
                // 住所がなかっても飛ばす
                if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
		    continue;
                }
                
                selectedArray.add(mc);
            }
            
        }
        
        if(selectedArray.size() == 0){
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        PrintPostcardPanel ppp = new PrintPostcardPanel(selectedArray);
	ppp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, ppp, "ハガキ作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private void createSeal(){
	
        // 宛名ラベル印刷をクリック
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();
      
        for (int i = 0; i < model.getRowCount(); i++) {
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(13) != null && (Boolean)row.get(13)){
		
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if(this.checkDuplicateCustomer(selectedArray, mc)){
                    continue;
                }
                
                // 住所がなかっても飛ばす
                if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
		    continue;
                }
                
                selectedArray.add(mc);
            }
            
        }
        
        if(selectedArray.size() == 0){
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        PrintLabelPanel plp = new PrintLabelPanel(selectedArray);
	plp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, plp, "宛名ラベル作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private void sendMail(){
	
        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();

	DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
      
        for(int i = 0; i < model.getRowCount(); i++){
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(13) != null && (Boolean)row.get(13)){
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if (this.checkDuplicateCustomer(selectedArray, mc)) continue;
		
		selectedArray.add(mc);
            }
        }

        if (selectedArray.size() == 0) {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        HairCommonMailPanel rcmp = new HairCommonMailPanel(target, selectedArray);
	rcmp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, rcmp, "メール作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    public void showData(){
        
        //--------------------------
        // ヘッダ情報
        //--------------------------
        if (target instanceof MstGroup) {
            //グループ
            shop.setText(((MstGroup)target).getGroupName());
        } else if(target instanceof MstShop) {
            //店舗
            shop.setText(((MstShop)target).getShopName());
        }

        staff.setText(this.getStaffName());
        targetPeriod.setText(this.getTargetPeriodStartDate() + " 〜 " + this.getTargetPeriodEndDate());
        tax.setText(this.getTaxName());
        categoryLabel.setText(this.getCategoryName());

        resultList.clear();
        
        if (customersTable.getCellEditor() != null) customersTable.getCellEditor().stopCellEditing();

	SwingUtil.clearTable(customersTable);
        
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<HashMap> result = this.searchKarte();
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

        BigDecimal bd = null;
        
        long totalValue = 0;
        long totalItemValue = 0;
        double totalVisitCycle = 0;
        
        for(HashMap row : result){

            bd = new BigDecimal((Double)row.get("visit_cycle"));
            
            Object[] rowData =
            {
                getUserSearchButton((Integer)row.get("customer_id")),
                row.get("customer_no"),
                row.get("customer_name"),
                row.get("sex_name"),
                sdf.format((Date)row.get("sales_date")),
                row.get("staff_name"),
                ((Boolean)row.get("designated_flag") ? "●" : ""),
                row.get("visit_num"),
                bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue() + " ヶ月",
                row.get("value"),
                row.get("item_value"),
                row.get("avg_value"),
                ((Boolean)row.get("mailaddress_enable") ? "●" : ""),
                true
            };
            
            totalValue += ((Long)row.get("value")).longValue();
            totalItemValue += ((Long)row.get("item_value")).longValue();
            totalVisitCycle += bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue();
            
            resultList.add((MstCustomer)row.get("mc"));
            model.addRow(rowData);
        }
        
        SwingUtil.clearTable(totalTable);

        DefaultTableModel totalModel = (DefaultTableModel)totalTable.getModel();

        double avgVisitCycle = 0;
        long unitPrice = 0;
        
        if (result.size() > 0) {
            bd = new BigDecimal(totalVisitCycle / result.size());
            avgVisitCycle = bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue();
            
            unitPrice = Double.valueOf(Math.floor(totalValue / result.size())).longValue();
        }
        
        totalModel.addRow(
            new Object[]
                {
                    result.size(),
                    avgVisitCycle + " ヶ月",
                    totalValue,
                    totalItemValue,
                    unitPrice
                });            
        
        if (result.size() == 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1112),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void print(){
        
        ArrayList<HashMap> result = this.searchKarte();
        
        // 出力対象データが0件の場合
        if (result.size() == 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }       
        
        JExcelApi jx = new JExcelApi("カルテ分析");
        jx.setTemplateFile("/reports/カルテ分析.xls");

        // ヘッダ
        jx.setValue(2, 3, shop.getText());
        jx.setValue(2, 4, staff.getText());
        jx.setValue(2, 5, targetPeriod.getText());
        jx.setValue(2, 6, tax.getText());
        jx.setValue(7, 4, categoryLabel.getText());
        
        int row = 12;

        // 追加行数セット
        jx.insertRow(row, result.size() - 1);

        BigDecimal bd = null;
        double totalVisitCycle = 0;
        
        // データセット
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        for (HashMap map : result){
            
            MstCustomer mc = (MstCustomer)map.get("mc");
            
            jx.setValue(1, row, map.get("customer_no"));
            jx.setValue(2, row, map.get("customer_name"));
            jx.setValue(3, row, map.get("sex_name"));
            jx.setValue(4, row, sdf.format((Date)map.get("sales_date")));
            jx.setValue(5, row, map.get("staff_name"));
            jx.setValue(6, row, ((Boolean)map.get("designated_flag")) ? "●" : "");
            jx.setValue(7, row, map.get("visit_num"));
            
            bd = new BigDecimal((Double)map.get("visit_cycle"));
            jx.setValue(8, row, bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue() + " ヶ月");
            jx.setValue(9, row, map.get("value"));
            jx.setValue(10, row, map.get("item_value"));
            jx.setValue(11, row, Long.parseLong(map.get("avg_value").toString()));
            jx.setValue(12, row, ((Boolean)map.get("mailaddress_enable")) ? "●" : "");
            
            totalVisitCycle += bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue();
            
            row++;
        }

        jx.removeRow(row);
        
        double avgVisitCycle = 0;
        if (result.size() > 0) {
            bd = new BigDecimal(totalVisitCycle / result.size());
            avgVisitCycle = bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue();
        }
        
        jx.setValue(2, 9, avgVisitCycle + " ヶ月");
        
        jx.openWorkbook();

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutput;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.ButtonGroup comingCycleGroup;
    private javax.swing.ButtonGroup customerCategoryGroup;
    private javax.swing.ButtonGroup customerGroup;
    private com.geobeck.swing.JTableEx customersTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mailButton;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JButton postcardButton;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton sealButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JLabel shopLabel1;
    private javax.swing.JLabel shopLabel2;
    private javax.swing.JLabel shopLabel3;
    private javax.swing.JLabel staff;
    private javax.swing.JLabel targetPeriod;
    private javax.swing.JLabel tax;
    private com.geobeck.swing.JTableEx totalTable;
    // End of variables declaration//GEN-END:variables
	
	private void setKeyListener()
	{
	}
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
            SwingUtil.setJTableHeaderRenderer(customersTable, SystemInfo.getTableHeaderRenderer());
            this.customersTable.setDefaultRenderer(Object.class, new TableCellRenderer());
            
            SwingUtil.setJTableHeaderRenderer(totalTable, SystemInfo.getTableHeaderRenderer());
            this.totalTable.setDefaultRenderer(Object.class, new TableCellRenderer());
            
            totalTable.setRowHeight(30);

            Calendar cal = Calendar.getInstance();
            int nowYear = cal.get(Calendar.YEAR);
            int nowMonth = cal.get(Calendar.MONTH); 
        }
        
	/**
	 * 動向分析テーブル用のTableCellRenderer
	 */
	public class TableCellRenderer extends SelectTableCellRenderer
	{
            /** Creates a new instance of TableCellRenderer */
            public TableCellRenderer()
            {
                super();
            }

            
            /**
             * テーブルセルレンダリングを返します。
             * @param table JTable
             * @param value セルに割り当てる値
             * @param isSelected セルが選択されている場合は true
             * @param hasFocus フォーカスがある場合は true
             * @param row 行
             * @param column 列
             * @return テーブルセルレンダリング
             */
            public Component getTableCellRendererComponent(
                JTable table,
                Object value, 
                boolean isSelected,
                boolean hasFocus,
                int row, int column)
            { 

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                if (table.equals(customersTable)) {

                    switch(column)
                    {
                        case 9:
                        case 10:
                        case 11:
                                super.setHorizontalAlignment(SwingConstants.RIGHT);
                                break;
                        default:
                                super.setHorizontalAlignment(SwingConstants.CENTER);
                                break;
                    }

                } else {

                    switch(column)
                    {
                        case 1:
                                super.setHorizontalAlignment(SwingConstants.CENTER);
                                break;
                        default:
                                super.setHorizontalAlignment(SwingConstants.RIGHT);
                                break;
                    }

                }
                
                return this; 
            } 

	
        }
        
        /**
         * ユーザ検索ボタンを取得する
         */
        private JButton getUserSearchButton(final Integer customerID)
        {
                JButton		searchButton	=	new JButton();
                searchButton.setBorderPainted(false);
                searchButton.setContentAreaFilled(false);
                searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
                searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
                searchButton.setSize(48, 25);
                searchButton.addActionListener(new java.awt.event.ActionListener()
                {
                        public void actionPerformed(java.awt.event.ActionEvent evt)
                        {
                            DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

                            MstCustomerPanel mcp = null;

                            try {

                                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                                mcp = new MstCustomerPanel(customerID, true, true);
                                SwingUtil.openAnchorDialog( parentFrame, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );

                            } finally {
                                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            }
                            
                            mcp = null;
                        }
                });
                return searchButton;
        }   

        /**
         * JTableの列幅を初期化する。
         */
        private void initTableColumnWidth()
        {
            //列の幅を設定する
            customersTable.getColumnModel().getColumn(0).setPreferredWidth(60);        //ボタン
            customersTable.getColumnModel().getColumn(1).setPreferredWidth(60);        //顧客番号
            customersTable.getColumnModel().getColumn(2).setPreferredWidth(100);       //氏名
            customersTable.getColumnModel().getColumn(3).setPreferredWidth(25);        //性別
            customersTable.getColumnModel().getColumn(4).setPreferredWidth(80);        //前回来店日
            customersTable.getColumnModel().getColumn(5).setPreferredWidth(80);        //担当者
            customersTable.getColumnModel().getColumn(6).setPreferredWidth(25);        //指名
            customersTable.getColumnModel().getColumn(7).setPreferredWidth(70);        //来店回数
            customersTable.getColumnModel().getColumn(8).setPreferredWidth(70);        //来店周期
            customersTable.getColumnModel().getColumn(9).setPreferredWidth(70);        //売上金額
            customersTable.getColumnModel().getColumn(10).setPreferredWidth(70);       //店販金額
            customersTable.getColumnModel().getColumn(11).setPreferredWidth(70);       //平均単価
            customersTable.getColumnModel().getColumn(12).setPreferredWidth(40);       //メールアドレス有無
            customersTable.getColumnModel().getColumn(13).setPreferredWidth(40);       // 送信対象

        }       

        private ArrayList<HashMap> searchKarte(){
            
	    ArrayList<HashMap> list = new ArrayList<HashMap>();
            
	    StringBuilder sql = new StringBuilder(1000);
            sql.append(" select * from " + getTableName());
            if (getWhereCondition().length() > 0) {
                sql.append(" where " + getWhereCondition());
            }
            
            ConnectionWrapper con = SystemInfo.getConnection();
	    
            try {
                ResultSetWrapper rs = con.executeQuery(sql.toString());
                
                while(rs.next()){

                    HashMap row = new HashMap();

                    MstCustomer mc = new MstCustomer();
                    mc.setCustomerID(rs.getInt("customer_id"));
                    mc.setCustomerNo(rs.getString("customer_no"));
                    mc.setCustomerName(new String[]{rs.getString("customer_name1"), rs.getString("customer_name2")});
                    mc.setSex(rs.getInt("sex"));
                    mc.setPCMailAddress(rs.getString("pc_mail_address"));
                    mc.setCellularMailAddress(rs.getString("cellular_mail_address"));
                    mc.setPostalCode(rs.getString("postal_code"));
                    mc.setAddress(new String[]{rs.getString("address1"), rs.getString("address2"), rs.getString("address3"), rs.getString("address4")});
                    
                    row.put("mc", mc);
                    row.put("customer_id", rs.getInt("customer_id"));
                    row.put("customer_no", rs.getString("customer_no"));
                    row.put("customer_name",   rs.getString("customer_name1") + "　" + rs.getString("customer_name2"));
                    row.put("sex_name", rs.getInt("sex") == 1 ? "男" : "女");
                    row.put("sales_date", rs.getDate("sales_date"));
                    row.put("staff_name", rs.getString("staff_name"));
                    row.put("designated_flag", rs.getBoolean("designated_flag"));
                    row.put("visit_num", rs.getLong("visit_num"));
                    row.put("visit_cycle", rs.getDouble("visit_cycle"));
                    row.put("value", rs.getLong("value"));
                    row.put("item_value", rs.getLong("item_value"));
                    row.put("avg_value", rs.getLong("avg_value"));
                    row.put("mailaddress_enable",(
                                                    (rs.getString("pc_mail_address") != null && !rs.getString("pc_mail_address").equals("")) 
                                                    ||
                                                    (rs.getString("cellular_mail_address") != null && !rs.getString("cellular_mail_address").equals(""))
                                                   )
                            );
                    list.add(row);
                }
            } catch(SQLException e) {
                e.printStackTrace();
            }
            return list;
        }

        private String getValidSQL(ReportParameterBean paramBean) {
            
            String startDate = SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
            String endDate = SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());

            StringBuilder sql = new StringBuilder(1000);

            sql.append(" select");
            sql.append("      mc.customer_id");
            sql.append("     ,mc.customer_no");
            sql.append("     ,mc.customer_name1");
            sql.append("     ,mc.customer_name2");
            sql.append("     ,mc.pc_mail_address");
            sql.append("     ,mc.cellular_mail_address");
            sql.append("     ,mc.postal_code");
            sql.append("     ,mc.address1");
            sql.append("     ,mc.address2");
            sql.append("     ,mc.address3");
            sql.append("     ,mc.address4");
            sql.append("     ,ds.sales_date");
            sql.append("     ,ds.staff_name");
            sql.append("     ,ds.designated_flag");
            sql.append("     ,ds.visit_num");
            
            // 来店周期
            sql.append("     ,ds.visit_cycle");
            
            sql.append("     ,ds.value");
            sql.append("     ,floor(ds.value / visit_num) as avg_value");
            sql.append(" from");
            sql.append("     (");
            sql.append("         select");
            sql.append("              customer_id");
            sql.append("             ,count(*) as visit_num");
            sql.append("             ,(extract(month from age(" + endDate + "::date, " + startDate + "::date)) + 1) / count(*) as visit_cycle");
            sql.append("             ,sum(discount_sales_value_in_tax) as value");
            sql.append("             ,max(a.sales_date) as sales_date");
            sql.append("             ,(");
            sql.append("                 select");
            sql.append("                     staff_id");
            sql.append("                 from");
            sql.append("                     data_sales left join mst_staff using(staff_id)");
            sql.append("                 where");
            sql.append("                         customer_id = a.customer_id");
            sql.append("                     and data_sales.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and data_sales.sales_date = max(a.sales_date)");
            sql.append("                     and data_sales.delete_date is null");
            sql.append("                 order by");
            sql.append("                      data_sales.insert_date desc");
            sql.append("                     ,data_sales.slip_no desc");
            sql.append("                 limit 1");
            sql.append("              ) as staff_id");
            sql.append("             ,(");
            sql.append("                 select");
            sql.append("                     staff_name1 || '　' || staff_name2");
            sql.append("                 from");
            sql.append("                     data_sales left join mst_staff using(staff_id)");
            sql.append("                 where");
            sql.append("                         customer_id = a.customer_id");
            sql.append("                     and data_sales.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and data_sales.sales_date = max(a.sales_date)");
            sql.append("                     and data_sales.delete_date is null");
            sql.append("                 order by");
            sql.append("                      data_sales.insert_date desc");
            sql.append("                     ,data_sales.slip_no desc");
            sql.append("                 limit 1");
            sql.append("              ) as staff_name");
            sql.append("             ,(");
            sql.append("                 select");
            sql.append("                     designated_flag");
            sql.append("                 from");
            sql.append("                     data_sales");
            sql.append("                 where");
            sql.append("                         customer_id = a.customer_id");
            sql.append("                     and shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and sales_date = max(a.sales_date)");
            sql.append("                     and delete_date is null");
            sql.append("                 order by");
            sql.append("                      insert_date desc");
            sql.append("                     ,slip_no desc");
            sql.append("                 limit 1");
            sql.append("              ) as designated_flag");
            sql.append("         from");
            sql.append("             view_data_sales_valid a");
            sql.append("         where");
            sql.append("                 shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("             and sales_date between " + startDate + " and " + endDate);
            sql.append("         group by");
            sql.append("             customer_id");
            sql.append("     ) ds");
            sql.append("     join mst_customer mc");
            sql.append("         using(customer_id)");
            
            sql.append(" where");
            sql.append("     (");
            sql.append("         false");
            
            
            MstShopSetting mss = MstShopSetting.getInstance();
            
            sql.append("     )");

            sql.append("     and mc.customer_no <> '0'");
            
            if (paramBean.getStaffId() != null) {
                sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
            }
            
            return sql.toString();
        }

        private int getMonthsBetween(Calendar fromDate, Calendar toDate) {

            int dt1 = (fromDate.get(Calendar.YEAR) * 12) + fromDate.get(Calendar.MONTH);
            int dt2 = (toDate.get(Calendar.YEAR) * 12) + toDate.get(Calendar.MONTH);

            return dt2 - dt1 + 1 ;
        }
        
        public Object getTarget() {
            return target;
        }

        public void setTarget(Object target) {
            this.target = target;
        }

        public String getStaffName() {
            return staffName;
        }

        public void setStaffName(String staffName) {
            this.staffName = staffName;
        }

        public String getTargetPeriodStartDate() {
            return targetPeriodStartDate;
        }

        public void setTargetPeriodStartDate(String targetPeriodStartDate) {
            this.targetPeriodStartDate = targetPeriodStartDate;
        }

        public String getTargetPeriodEndDate() {
            return targetPeriodEndDate;
        }

        public void setTargetPeriodEndDate(String targetPeriodEndDate) {
            this.targetPeriodEndDate = targetPeriodEndDate;
        }

        public String getTaxName() {
            return taxName;
        }

        public void setTaxName(String taxName) {
            this.taxName = taxName;
        }

        public String getWhereCondition() {
            return whereCondition;
        }

        public void setWhereCondition(String whereCondition) {
            this.whereCondition = whereCondition;
        }

        public String getCategoryName() {
            return categoryName;
        }

        public void setCategoryName(String categoryName) {
            this.categoryName = categoryName;
        }

        public String getTableName() {
            return tableName;
        }

        public void setTableName(String tableName) {
            this.tableName = tableName;
        }
}
