/*
 * TimeAnalysisSettingPanel.java
 *
 * Created on 2010/07/15, 11:45
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.basicinfo.company.TimePanelBase;
import com.geobeck.sosia.pos.master.company.MstGroup;
import com.geobeck.sosia.pos.master.company.MstTimeSetting;
import com.geobeck.sosia.pos.master.company.MstTimeSettings;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import com.geobeck.util.CheckUtil;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.sql.SQLException;
import java.util.*;
import java.util.logging.Level;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author geobeck
 */
public class TimeAnalysisSettingPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
    private int shopId = 0;

    /**
     * Creates new form DailySalesReportPanelTom
     */
    public TimeAnalysisSettingPanel(Object shop)
    {
        initComponents();

        this.setTitle("時間設定");
        this.setSize(305,620);
        
        addMouseCursorChange();

        this.initBasicShiftTable(tblBasicShift1);
        
        ftp = new LocalFocusTraversalPolicy();
        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());

        if (shop instanceof MstShop) {
            this.shopId = ((MstShop)shop).getShopID();
        }

        cblShop.addItem(shop);
    }
    
    private void addMouseCursorChange()
    {
        SystemInfo.addMouseCursorChange(btnRegist);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        btnReportType = new javax.swing.ButtonGroup();
        jLabel8 = new javax.swing.JLabel();
        cblShop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        btnRegist = new javax.swing.JButton();
        scrBasicShift1 = new javax.swing.JScrollPane();
        tblBasicShift1 = new com.geobeck.swing.JTableEx();

        setLayout(null);

        jLabel8.setText("\u5bfe\u8c61");
        add(jLabel8);
        jLabel8.setBounds(24, 25, 30, 13);

        cblShop.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(127, 157, 185), 1, true));
        cblShop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cblShopActionPerformed(evt);
            }
        });

        add(cblShop);
        cblShop.setBounds(60, 22, 120, 19);

        btnRegist.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        btnRegist.setBorderPainted(false);
        btnRegist.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        btnRegist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistActionPerformed(evt);
            }
        });

        add(btnRegist);
        btnRegist.setBounds(190, 20, 92, 25);

        scrBasicShift1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrBasicShift1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        tblBasicShift1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "パターン", "時間設定"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBasicShift1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblBasicShift1.setCellSelectionEnabled(false);
        tblBasicShift1.setSelectionBackground(new java.awt.Color(255, 210, 142));
        SwingUtil.setJTableHeaderRenderer(tblBasicShift1, SystemInfo.getTableHeaderRenderer());
        tblBasicShift1.getTableHeader().setReorderingAllowed(false);
        tblBasicShift1.getTableHeader().setResizingAllowed(false);

        scrBasicShift1.setViewportView(tblBasicShift1);

        add(scrBasicShift1);
        scrBasicShift1.setBounds(20, 60, 260, 431);

    }// </editor-fold>//GEN-END:initComponents

    private void cblShopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cblShopActionPerformed
    {//GEN-HEADEREND:event_cblShopActionPerformed
        this.showBasicShifts( this.shopId, tblBasicShift1 );
    }//GEN-LAST:event_cblShopActionPerformed

    private void btnRegistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRegistActionPerformed
    {//GEN-HEADEREND:event_btnRegistActionPerformed
        if (!verifyRegisteration(tblBasicShift1)) return;

        if ( registerBasicShift(this.shopId) )
        {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
                this.getTitle(),
                JOptionPane.INFORMATION_MESSAGE);
            
            this.close();
        }
        else
        {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "時間設定"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnRegistActionPerformed

    private boolean verifyRegisteration(com.geobeck.swing.JTableEx table)
    {
        for (int row = 0; row < table.getRowCount(); ++row)
        {
            TimePanelBase TimePanelBase;
            JComboBox cboStartHour, cboEndHour;
            boolean bStartHourValid, bEndHourValid;
            
            // この行の時間設定パネルを取得
            TimePanelBase = (TimePanelBase)table.getValueAt(row, 1);
            
            // 各コンボボックスの参照を取得（選択されているアイテムを取得する事だけではなく、後のエラーフォーカス時に利用する目的もある）
            cboStartHour = TimePanelBase.getFromHourCbo();
            cboEndHour = TimePanelBase.getToHourCbo();
            
            // 各コンボボックスの値が選択されている状態か否かを判断
            bStartHourValid = (cboStartHour.getSelectedIndex() > 0);
            bEndHourValid = (cboEndHour.getSelectedIndex() > 0);
            
            // 4コンボ共に選択されているか、4コンボ共に選択されていない状態 以外はエラー
            if ( !(bStartHourValid && bEndHourValid) && !(!bStartHourValid && !bEndHourValid) ) {
                
                String strErrItem;
                JComboBox cboErrItem;

                strErrItem = "";
                cboErrItem = null;

                if (!bStartHourValid)
                {
                    strErrItem = "時間設定開始";
                    cboErrItem = cboStartHour;
                }
                else if (!bEndHourValid)
                {
                    strErrItem = "時間設定終了";
                    cboErrItem = cboEndHour;
                }

                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED, "パターン" + String.valueOf((char)('A' + row)) + "の" + strErrItem),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);

                cboErrItem.requestFocusInWindow();

                return false;
            }
            //IVS_LVTu start add 2016/03/14 Bug #49036
            //・「時間設定」画面、時間の大小チェックがされていない。（15時〜13時とか設定できる。）
            if ((bStartHourValid && bEndHourValid) ) {
                Integer startDate = Integer.parseInt(cboStartHour.getSelectedItem().toString());
                Integer endDate = Integer.parseInt(cboEndHour.getSelectedItem().toString());
                
                if(startDate >= endDate) {
                    MessageDialog.showMessageDialog(this,
                        "時間設定が正しくありません。",
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
        }
        //IVS_LVTu end add 2016/03/14 Bug #49036
        
        return true;
    }
    
    private boolean registerBasicShift(Integer intShopID)
    {
        ConnectionWrapper con;

        con = SystemInfo.getConnection();

        try
        {
            con.begin();

            MstTimeSettings shiftsInShop = new MstTimeSettings();
            shiftsInShop.setShopId(this.shopId);

            for (int row = 0; row < tblBasicShift1.getRowCount(); ++row)
            {
                MstTimeSetting shift;
                TimePanelBase TimePanelBase;

                shift = (MstTimeSetting)tblBasicShift1.getValueAt(row, 0);
                TimePanelBase = (TimePanelBase)tblBasicShift1.getValueAt(row, 1);
                
                shift.setStartTime(TimePanelBase.getFromTime());
                shift.setEndTime(TimePanelBase.getToTime());
                
                shiftsInShop.add(shift);
            }

            shiftsInShop.regist(con);
            con.commit();
            con.close();
        }
        catch(Exception e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            
            try
            {
                if (con.isBeginTran())
                {
                    con.rollback();
                }
                
                con.close();
            }
            catch (SQLException sql_e)
            {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            
            return false;
        }
        
        // 新規のシフトID が insert により割り当てられている可能性があるので、再表示を行い 隠れシフトID を更新しておく
        showBasicShifts(intShopID, tblBasicShift1);
        
        return true;
    }

    // テーブル初期設定
    private void initBasicShiftTable(com.geobeck.swing.JTableEx table)
    {
        // 全てのコンポーネントを削除しておく
        table.removeAll();
       
        // 各インスタンスを表のセルにセット
        for (int row = 0; row < table.getRowCount(); ++row)
        {
            // シフトパターン名をセット
            MstTimeSetting shift = new MstTimeSetting();

            shift.setTimeName( String.valueOf((char)('A' + row)) );
            table.setValueAt(shift, row, 0);

            // シフト用パネルをセット
            TimePanelBase pnlShiftBase = new TimePanelBase();

            table.setValueAt(pnlShiftBase, row, 1);
            table.add(pnlShiftBase);
        }
        
        TableColumnModel colmodel;
        Dimension dimBasePanelSize;
        int nColWidthSum;
        int nHeaderHeight;
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        
        // ベースパネルのサイズを取得
        dimBasePanelSize = new TimePanelBase().getPreferredSize();
        
        colmodel = table.getColumnModel();

        // 各列の幅設定
        colmodel.getColumn(0).setPreferredWidth(58);
        colmodel.getColumn(1).setPreferredWidth(dimBasePanelSize.width);

        // 列幅の合計値を計算
        nColWidthSum = 0;
        for (int col = 0; col < table.getColumnCount(); ++col)
        {
            nColWidthSum += colmodel.getColumn(col).getPreferredWidth();
        }
        
        // ヘッダーの高さ
        nHeaderHeight = table.getTableHeader().getPreferredSize().height;
 
        // テーブル所属のスクロールペインに、計算して求めた幅と高さをセット
        table.getParent().getParent().setSize(nColWidthSum + 1, nHeaderHeight + dimBasePanelSize.height * table.getRowCount() + 1);
        
        // 縦中央にセット
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        colmodel.getColumn(0).setCellRenderer(renderer);
    }

    // コンボボックスに値ロード
    private void showBasicShifts(Integer intShopID, com.geobeck.swing.JTableEx table)
    {
        // 一旦全て 選択無し状態に
        for (int row = 0; row < table.getRowCount(); ++row)
        {
            TimePanelBase TimePanelBase;
            MstTimeSetting time;
            
            // シフトID をクリアしておく
            time = (MstTimeSetting)table.getValueAt(row, 0);
            time.setShopId(intShopID);
            time.setTimeId(null);
            time.setTimeName( String.valueOf((char)('A' + row)) );
            time.setStartTime(null);
            time.setEndTime(null);

            // パネルのコンボボックス をクリアしておく
            TimePanelBase = (TimePanelBase)table.getValueAt(row, 1);
            TimePanelBase.setFromTime(null);
            TimePanelBase.setToTime(null);
        }

        /*** MstTimeSetting の値をテーブルに反映 ***/
        try
        {
            ConnectionWrapper con = SystemInfo.getConnection();
            MstTimeSettings timesInShop = new MstTimeSettings();
            
            timesInShop.setShopId(intShopID);
            timesInShop.load(con, false);
            
            for (MstTimeSetting time : timesInShop)
            {
                String strShiftName;
                
                strShiftName = time.getTimeName();
                if (strShiftName != null  &&  strShiftName.length() > 0)
                {
                    int iShift;
                    
                    iShift = strShiftName.charAt(0) - 'A';
                    if (iShift >= 0  &&  iShift < table.getRowCount())
                    {
                        TimePanelBase TimePanelBase;
                        String strTime;

                        // シフトインスタンスをセット
                        table.setValueAt(time,iShift, 0);

                        TimePanelBase = (TimePanelBase)table.getValueAt(iShift, 1);

                        strTime = time.getStartTime();
                        if (strTime != null  &&  CheckUtil.isNumber(strTime))
                        {
                            TimePanelBase.setFromTime(strTime);
                        }

                        strTime = time.getEndTime();
                        if (strTime != null  &&  CheckUtil.isNumber(strTime))
                        {
                            TimePanelBase.setToTime(strTime);
                        }
                    }
                }
            }

            con.close();
        }
        catch(SQLException e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }
    
    
    // <editor-fold defaultstate="collapsed" desc=" Variables declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegist;
    private javax.swing.ButtonGroup btnReportType;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cblShop;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane scrBasicShift1;
    private com.geobeck.swing.JTableEx tblBasicShift1;
    // End of variables declaration//GEN-END:variables
 // </editor-fold>
    
    private LocalFocusTraversalPolicy   ftp;
    /**
     * FocusTraversalPolicyを取得する。
     * @return FocusTraversalPolicy
     */
    public LocalFocusTraversalPolicy getFocusTraversalPolicy()
    {
        return  ftp;
    }
    
    /**
     * FocusTraversalPolicy
     */
    private class LocalFocusTraversalPolicy
                    extends FocusTraversalPolicy
    {
        ArrayList<Component> controls = new ArrayList<Component>();
        
        public LocalFocusTraversalPolicy()
        {
            init(tblBasicShift1);
        }

        private void init(com.geobeck.swing.JTableEx table)
        {
            controls.add(cblShop);

            for (int row = 0; row < table.getRowCount(); ++row)
            {
                TimePanelBase TimePanelBase;
                
                // この行の時間設定シフトパネルを取得
                TimePanelBase = (TimePanelBase)table.getValueAt(row, 1);
                
                controls.add(TimePanelBase.getFromHourCbo());
                controls.add(TimePanelBase.getToHourCbo());
            }
            
            for( Component control : controls ){
                control.addKeyListener(SystemInfo.getMoveNextField());
                control.addFocusListener(SystemInfo.getSelectText());
            }
            
            // 最後に先頭を再度登録(同時にEnabledがFalseにならないところまで重複登録)
            controls.add(cblShop);
            controls.add( ((TimePanelBase)table.getValueAt(0, 1)).getFromHourCbo() );
        }
        
        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。
         */
        public Component getComponentAfter(Container aContainer,
                                           Component aComponent)
        {
            boolean find = false;
            for(Component co : controls){
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。
         */
        public Component getComponentBefore(Container aContainer,
                                            Component aComponent)
        {
            boolean find = false;
            for( int ii = controls.size(); ii>0; ii-- ){
                Component co = controls.get(ii-1);
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。
         */
        public Component getFirstComponent(Container aContainer)
        {
            return getDefaultComponent(aContainer);
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。
         */
        public Component getLastComponent(Container aContainer)
        {
            return getComponentBefore(aContainer, controls.get(0));
        }
        
        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。
         */
        public Component getDefaultComponent(Container aContainer)
        {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
        
        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
         */
        public Component getInitialComponent(Window window)
        {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
    }
    
    /**
     * ダイアログを閉じる
     */
    private void close()
    {
        if (this.isDialog()) {
            ((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
        } else {
            this.setVisible(false);
        }
    }
    
}
