/*
 * MedicalRecordAnalysisPanel.java
 *
 * Created on 2013/04/26, 10:39
 */
package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.hair.report.beans.SalesDateBean;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.text.*;
import org.apache.commons.lang.math.NumberUtils;

import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.report.bean.*;
import com.geobeck.sosia.pos.hair.report.logic.MedicalRecordAnalysisLogic;
import com.geobeck.sosia.pos.hair.report.logic.TechnicSalesReportLogic;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.util.*;

/**
 *
 * @author katagiri
 */
public class MedicalRecordAnalysisPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private MstStaffs staffs = null;
    private boolean isLoading = false;
    private MedicalRecordAnalysisLogic mral = new MedicalRecordAnalysisLogic();

    /**
     * Creates new form BusinessReportPanel
     */
    public MedicalRecordAnalysisPanel() {
        isLoading = true;

        initComponents();
        addMouseCursorChange();
        this.setSize(518, 282);
        this.setPath("ï™êÕ");
        this.setTitle("óàìXÉJÉãÉeï™êÕ");
        this.setKeyListener();
        SystemInfo.initGroupShopComponents(target, 3);
        staff.addItem(new MstStaff());
        SystemInfo.initStaffComponent(staff);
        staff.setSelectedIndex(0);
        Calendar cal = Calendar.getInstance();
        int nowYear = cal.get(Calendar.YEAR);
        initYearCombo(cmbYear, nowYear);
        changeTargetDate();
        isLoading = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        countTypeGroup = new javax.swing.ButtonGroup();
        techClassTypeGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblTargetPeriod3 = new javax.swing.JLabel();
        lblTargetDate = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        staff = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        lblTargetPeriod1 = new javax.swing.JLabel();
        cmbYear = new javax.swing.JComboBox();
        lblTargetPeriod2 = new javax.swing.JLabel();
        btnOutputExcel = new javax.swing.JButton();
        targetLabel = new javax.swing.JLabel();
        target = new com.geobeck.sosia.pos.swing.JComboBoxLabel();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        lblTargetPeriod3.setText("ï]âøä˙ä‘");

        jLabel5.setText("íSìñé“");

        staff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblTargetPeriod1.setText("èWåvîNìx");

        cmbYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cmbYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbYearStateChanged(evt);
            }
        });

        lblTargetPeriod2.setText("îN");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(lblTargetPeriod1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(lblTargetPeriod3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(18, 18, 18)
                            .add(lblTargetDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 323, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                            .add(18, 18, 18)
                            .add(cmbYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(lblTargetPeriod2)
                            .add(334, 334, 334)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 138, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(270, 270, 270))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(3, 3, 3)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblTargetPeriod1)
                    .add(cmbYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTargetPeriod2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblTargetPeriod3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTargetDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(171, Short.MAX_VALUE))
        );

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setContentAreaFilled(false);
        btnOutputExcel.setFocusCycleRoot(true);
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputExcelActionPerformed(evt);
            }
        });

        targetLabel.setText("ìXï‹");

        target.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(targetLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(58, 58, 58)
                .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(116, 116, 116))
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(16, 16, 16)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(targetLabel)
                            .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void targetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetActionPerformed
        if (isLoading) {
            return;
        }
        changeTargetDate();
    }//GEN-LAST:event_targetActionPerformed

    private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputExcelActionPerformed

        if (!SystemInfo.checkAuthorityPassword(260)) {
            return;
        }

        if (inputCheck()) {

            btnOutputExcel.setCursor(null);

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                mral.year = cmbYear.getSelectedItem().toString();
                this.doOutput();

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }

    }//GEN-LAST:event_btnOutputExcelActionPerformed

    private void cmbYearStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbYearStateChanged
        changeTargetDate();
    }//GEN-LAST:event_cmbYearStateChanged

    private void changeTargetDate() {
        // èWåvä˙ä‘ÇãÅÇﬂÇÈ
        Calendar cal = Calendar.getInstance();
        try {

            cal.set(Calendar.YEAR, Integer.parseInt(this.cmbYear.getSelectedItem().toString()));
        } catch (Exception e) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "èWåvîNìx"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbYear.setSelectedItem(Calendar.getInstance().get(Calendar.YEAR));
            return;
        }
        cal.set(Calendar.DAY_OF_MONTH, 1);

        java.util.Date targetDate = null;
        try {
            targetDate = cal.getTime();
        } catch (Exception e) {
        }

        if (targetDate == null) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "èWåvîNìx"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            cmbYear.setSelectedItem(Calendar.getInstance().get(Calendar.YEAR));
            return;
        }

        // ÅõÉñåéëOÇÃåéèâ
//	Calendar calculationStart = Calendar.getInstance();
//	calculationStart.setTime(targetDate);
        // çƒóàëŒè€ä˙ä‘
        // äJénì˙ÇÕèWåväJénì˙Ç∆ìØÇ∂
        Calendar targetStart = Calendar.getInstance();
        //targetStart.setTime(calculationStart.getTime());
        targetStart.set(Integer.parseInt(this.cmbYear.getSelectedItem().toString()), 0, 1);
        //targetStart.set(Calendar.DAY_OF_MONTH, 1);

        Calendar targetEnd = Calendar.getInstance();
        //targetEnd.setTime(targetStart.getTime());
        targetEnd.set(Integer.parseInt(this.cmbYear.getSelectedItem().toString()), 11, 31);
        //targetEnd.set(Calendar.DAY_OF_MONTH, 31);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        this.lblTargetDate.setText(sdf.format(targetStart.getTime()) + " Å` " + sdf.format(targetEnd.getTime()));
    }

    /**
     * çƒóàéZèoä˙ä‘ÇãÅÇﬂÇÈ
     */
    private void doOutput() {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

        MedicalRecordAnalysisLogic logic = new MedicalRecordAnalysisLogic();
        ReportParameterBean paramBean = new ReportParameterBean();
        paramBean.setMainReportType(ReportParameterBean.MAIN_REPORT_STAFF);

        //ÉOÉãÅ[Év
        if (target.getSelectedItem() instanceof MstGroup) {
            MstGroup mg = (MstGroup) target.getSelectedItem();
            paramBean.setTargetName(mg.getGroupName());
            paramBean.setShopIDList(mg.getShopIDListAll());
        } //ìXï‹
        else if (target.getSelectedItem() instanceof MstShop) {
            MstShop ms = (MstShop) target.getSelectedItem();
            paramBean.setTargetName(ms.getShopName());
            paramBean.setShopIDList(ms.getShopID().toString());
        }

        //ëŒè€Ç∆Ç»ÇÈìXï‹Ç™ë∂ç›ÇµÇ»Ç¢èÍçá
        if (paramBean.getShopIDList().equals("")) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // éÂíSìñé“
        if (staff.getSelectedIndex() > 0) {
            paramBean.setStaffId(((MstStaff) staff.getSelectedItem()).getStaffID());
            paramBean.setStaffName(((MstStaff) staff.getSelectedItem()).getFullStaffName());
        } else {
            paramBean.setStaffId(null);
            paramBean.setStaffName("ëSëÃ");
        }
        // èWåvä˙ä‘ÇãÅÇﬂÇÈ
        Calendar cal = Calendar.getInstance();
        try {
            cal.set(Calendar.YEAR, Integer.parseInt(this.cmbYear.getSelectedItem().toString()));
        } catch (Exception e) {
        }
        cal.set(Calendar.DAY_OF_MONTH, 1);



        // ëIÇÒÇæåéÇÃåéññ
        Calendar calculationEnd = Calendar.getInstance();
        calculationEnd.set(Integer.parseInt(this.cmbYear.getSelectedItem().toString()), 1, 1);// ëIëåéÇÃóÇåéÇ…ÇµÇƒ
        calculationEnd.add(Calendar.DAY_OF_MONTH, -1); // ÇPì˙ñﬂÇ∑



        //èoóÕèàóù
        boolean logicResult = true;
        try {
            Calendar calStart = Calendar.getInstance();
            calStart.set(Integer.parseInt(this.cmbYear.getSelectedItem().toString()), 0, 1);
            paramBean.setTargetStartDateObj(calStart.getTime());
            Calendar calEnd = (Calendar) calStart.clone();
            calEnd.set(Integer.parseInt(this.cmbYear.getSelectedItem().toString()), 11, 31);
            paramBean.setTargetEndDateObj(calEnd.getTime());
            logicResult = logic.MedicalRecordAnalysis(paramBean);


        } catch (Exception e) {

            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(1099),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);

            return;
        }

        // ÉGÉâÅ[éû
        if (!logicResult) {
            MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JComboBox cmbYear;
    private javax.swing.ButtonGroup countTypeGroup;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTargetDate;
    private javax.swing.JLabel lblTargetPeriod1;
    private javax.swing.JLabel lblTargetPeriod2;
    private javax.swing.JLabel lblTargetPeriod3;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel staff;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel target;
    private javax.swing.JLabel targetLabel;
    private javax.swing.ButtonGroup techClassTypeGroup;
    // End of variables declaration//GEN-END:variables
    private BusinessReportFocusTraversalPolicy ftp =
            new BusinessReportFocusTraversalPolicy();

    /**
     * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(btnOutputExcel);
    }

    private void setKeyListener() {
        cmbYear.addKeyListener(SystemInfo.getMoveNextField());
        staff.addKeyListener(SystemInfo.getMoveNextField());
    }

//	private void initCmbYear() {
//        this.cmbYear.removeAllItems();
//        int index = -1;
//        MstShop shopinfo;
//        
//        shopinfo = (MstShop)this.target.getSelectedItem();
//        ArrayList<SalesDateBean> beanlist = TechnicSalesReportLogic.getSalesDateBean(shopinfo.getShopID());
//        Calendar calendar = Calendar.getInstance();
//        String currentYear = new String(calendar.get(Calendar.YEAR)+"");
//        for(int i= 0; i < beanlist.size() ; i++ ) {
//            this.cmbYear.addItem(beanlist.get(i).getYear());
//            if( beanlist.get(i).getYear().equals(currentYear)){
//                index = i;
//                }
//             }
//        }
    

    private Integer getSelectedYear() {
        String year = (String) this.cmbYear.getSelectedItem();

        return Integer.valueOf(year.replaceAll("îN", ""));
    }

    /**
     * ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
     *
     * @return ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicy
     */
    public BusinessReportFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    /**
     * ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicy
     */
    private class BusinessReportFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponBusinessReportFocusTraversalPolicyÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if(aComponent.equals(target))
            {
                return staff;
            }
            else if(aComponent.equals(staff))
            {
                return cmbYear;
            }
            return this.getStartComponent();
        }
        private Component getStartComponent() 
        {
            if(target.getItemCount() == 1){
                return staff ;
            }
            else {
                return target;
            }
        }

        /**
         * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
           if(aComponent.equals(target))
            {
                return target;
            }
           else if(aComponent.equals(staff))
            {
                return this.getStartComponent();
            }
           else if(aComponent.equals(cmbYear))
            {
                return staff;
            }
            return this.getStartComponent();
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer êÊì™ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getFirstComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB aContainer
         * ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
         *
         * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getDefaultComponent(Container aContainer) {
            return this.getStartComponent();
        }

        /**
         * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB show() Ç‹ÇΩÇÕ setVisible(true)
         * ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
         * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
         * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
         * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
         * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
         */
        public Component getInitialComponent(Window window) {
            return this.getStartComponent();
        }

        @Override
        public Component getLastComponent(Container aContainer) {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    private void resetSpan(Calendar calStart, Calendar calEnd) {

        int cutoffDay = 0;

        if (target.getSelectedItem() instanceof MstShop) {
            MstShop ms = (MstShop) target.getSelectedItem();
            cutoffDay = ms.getCutoffDay();
        } else {
            cutoffDay = SystemInfo.getAccountSetting().getCutoffDay();
        }

        if (cutoffDay == 31) {
            return;
        }

        Calendar calTo = Calendar.getInstance();
        calTo.setTime(calEnd.getTime());

        if (calTo.getActualMaximum(Calendar.DATE) <= cutoffDay) {
            calTo.set(Calendar.DAY_OF_MONTH, calTo.getActualMaximum(Calendar.DATE));
        } else {
            calTo.set(Calendar.DAY_OF_MONTH, cutoffDay);
        }

        Calendar calFrom = (Calendar) calTo.clone();
        calFrom.add(Calendar.MONTH, -1);
        calFrom.add(Calendar.DAY_OF_MONTH, 1);

        calStart.setTime(calFrom.getTime());
        calEnd.setTime(calTo.getTime());
    }

    private void initYearCombo(final JComboBox cmb, int nowYear) {

        cmb.removeAllItems();

        int y = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = 0; i < 5; i++) {
            cmb.addItem(String.valueOf(y - i));
        }
        cmb.setSelectedItem(nowYear);
        cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ((JTextField) cmb.getEditor().getEditorComponent()).selectAll();
            }
        });
    }

    private boolean inputCheck() {
        NumberUtils numUtil = new NumberUtils();
        if (!numUtil.isNumber(this.cmbYear.getSelectedItem().toString())) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ëŒè€îN"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            Calendar cdr = Calendar.getInstance();
            this.cmbYear.requestFocusInWindow();
            return false;
        }

        return true;
    }
}
