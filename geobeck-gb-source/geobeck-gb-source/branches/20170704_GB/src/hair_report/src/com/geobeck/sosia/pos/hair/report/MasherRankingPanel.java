/*
 * MasheRankingPanel.java
 *
 * Created on 2008/07/20, 11:00
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ResultSetWrapper;
import java.awt.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import java.util.GregorianCalendar;
import com.geobeck.swing.*;
import javax.swing.table.DefaultTableModel;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.hair.customer.MstCustomerPanel;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.hair.mail.*;
import com.geobeck.sosia.pos.mail.*;
import java.text.*;
import com.geobeck.sosia.pos.master.company.*;
import java.math.BigDecimal;
import com.geobeck.sosia.pos.hair.report.util.*;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.util.SQLUtil;
import java.sql.SQLException;

/**
 *
 * @author  nahoang
 */
public class MasherRankingPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
        private Object target = null;
        private String staffName = "";
        private String targetPeriodStartDate = "";
        private String targetPeriodEndDate = "";
        private String taxName = "";
        private String productDivisionName = "";
        private String productDivisionLabelName = "";
        private String rankLabel = "";
        private String rankNo = "";
        private String fmType = "";
        private String fvalue = "";
        private String mvalue = "";
        private String whereCondition = "";
        private long selectedRow = 0l;
        private long limitCount = 0l;
        
        //nahoang start add
        private String technicName = "";
        private String itemName = "";
        private String categoryName = "";
        private int categoryId = 0;
        private int typeRank = 0;
        
        private ArrayList<MstCustomer> resultList = new ArrayList<MstCustomer>();
        private MstCustomerListCreator mclistCreator = null;
        
        //IVS_LVTu start add 2015/05/21 New request #36880
        private String shopName = "";
        private Integer shopId = null;
        private Integer staffId = null;
        private Integer shopCategoryId = null;
        private Integer taxType = 0; // if 

        public Integer getTaxType() {
            return taxType;
        }

        public void setTaxType(Integer taxType) {
            this.taxType = taxType;
        }
    
        public Integer getShopCategoryId() {
            return shopCategoryId;
        }

        public void setShopCategoryId(Integer shopCategoryId) {
            this.shopCategoryId = shopCategoryId;
        }

        public Integer getShopId() {
            return shopId;
        }

        public void setShopId(Integer shopId) {
            this.shopId = shopId;
        }

        public Integer getStaffId() {
            return staffId;
        }

        public void setStaffId(Integer staffId) {
            this.staffId = staffId;
        }

        public String getShopName() {
            return shopName;
        }

        public void setShopName(String shopName) {
            this.shopName = shopName;
        }
        //IVS_LVTu end add 2015/05/21 New request #36880
        
        /** Creates new form StaffShopRankingDecilePanel */
        public MasherRankingPanel(){
        
        }
	public MasherRankingPanel(String title)
	{
		initComponents();
                addMouseCursorChange();
                this.setSize(820,680);
		this.setPath("帳票出力");
		this.setTitle(title);
		this.setKeyListener();
                
                this.initTableColumnWidth();
                //初期化処理
                this.init();
		
		// メール作成ボタン表示設定
		this.mailButton.setVisible(SystemInfo.checkAuthority(53));
		// 宛名ラベル作成ボタン表示設定
		this.sealButton.setVisible(SystemInfo.checkAuthority(55));
		// ハガキ作成ボタン表示設定
		this.postcardButton.setVisible(SystemInfo.checkAuthority(54));
	}
        
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(btnOutput);
		SystemInfo.addMouseCursorChange(mailButton);
		SystemInfo.addMouseCursorChange(sealButton);
		SystemInfo.addMouseCursorChange(postcardButton);
		SystemInfo.addMouseCursorChange(selectAllButton);
		SystemInfo.addMouseCursorChange(releaseAllButton);
		SystemInfo.addMouseCursorChange(closeButton);
	}
        
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customerGroup = new javax.swing.ButtonGroup();
        comingCycleGroup = new javax.swing.ButtonGroup();
        customerCategoryGroup = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        shopLabel = new javax.swing.JLabel();
        btnOutput = new javax.swing.JButton();
        sealButton = new javax.swing.JButton();
        postcardButton = new javax.swing.JButton();
        mailButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        shopLabel2 = new javax.swing.JLabel();
        shopLabel3 = new javax.swing.JLabel();
        category = new javax.swing.JLabel();
        targetPeriod = new javax.swing.JLabel();
        tax = new javax.swing.JLabel();
        selectAllButton = new javax.swing.JButton();
        releaseAllButton = new javax.swing.JButton();
        mvalueLabel = new javax.swing.JLabel();
        fvalueLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        customersTable = new com.geobeck.swing.JTableEx();
        message = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        totalTable = new com.geobeck.swing.JTableEx();
        txtShop = new javax.swing.JLabel();
        txtStaff = new javax.swing.JLabel();
        shopLabel1 = new javax.swing.JLabel();
        shopLabel4 = new javax.swing.JLabel();

        setFocusCycleRoot(true);
        setPreferredSize(new java.awt.Dimension(886, 700));

        pnlMain.setFocusCycleRoot(true);
        pnlMain.setOpaque(false);

        shopLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel.setText("業態");

        btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutput.setBorderPainted(false);
        btnOutput.setContentAreaFilled(false);
        btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputActionPerformed(evt);
            }
        });

        sealButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_seal_off.jpg"));
        sealButton.setBorderPainted(false);
        sealButton.setContentAreaFilled(false);
        sealButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_seal_on.jpg"));
        sealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sealButtonActionPerformed(evt);
            }
        });

        postcardButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_off.jpg"));
        postcardButton.setBorderPainted(false);
        postcardButton.setContentAreaFilled(false);
        postcardButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_on.jpg"));
        postcardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postcardButtonActionPerformed(evt);
            }
        });

        mailButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_mail_off.jpg"));
        mailButton.setBorderPainted(false);
        mailButton.setContentAreaFilled(false);
        mailButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_mail_on.jpg"));
        mailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailButtonActionPerformed(evt);
            }
        });

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/back_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/back_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        shopLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel2.setText("対象期間");

        shopLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel3.setText("税区分");

        category.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        category.setText("ジオサロン");

        targetPeriod.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        targetPeriod.setText("2009/01/01 〜 2009/01/31");

        tax.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        tax.setText("税込");

        selectAllButton.setIcon(SystemInfo.getImageIcon("/button/select/select_all_off.jpg"));
        selectAllButton.setBorderPainted(false);
        selectAllButton.setContentAreaFilled(false);
        selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_all_on.jpg"));
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/select/release_all_off.jpg"));
        releaseAllButton.setBorderPainted(false);
        releaseAllButton.setContentAreaFilled(false);
        releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/release_all_on.jpg"));
        releaseAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseAllButtonActionPerformed(evt);
            }
        });

        mvalueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mvalueLabel.setText("来店回数  99回 〜 99回");

        fvalueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        fvalueLabel.setText("売上金額  9999円〜9999円");

        jLabel1.setText("■ 集計対象");

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "順位", "<html><p>顧客<br>情報</p></html>", "顧客No.", "氏名", "前回来店日", "主担当者", "指名", "来店回数", "売上金額", "売上シェア率", "平均単価", "表1", "表2", "<html>メール<br>&nbsp;有無 </html>", "<html>送信<br>対象</html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        customersTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(customersTable);
        customersTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (customersTable.getColumnModel().getColumnCount() > 0) {
            customersTable.getColumnModel().getColumn(13).setMinWidth(40);
            customersTable.getColumnModel().getColumn(13).setPreferredWidth(40);
            customersTable.getColumnModel().getColumn(13).setMaxWidth(40);
            customersTable.getColumnModel().getColumn(14).setMinWidth(40);
            customersTable.getColumnModel().getColumn(14).setPreferredWidth(40);
            customersTable.getColumnModel().getColumn(14).setMaxWidth(40);
        }

        message.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        message.setText("<html>\n※来店回数および売上金額には、クレームを含んでいます。<br>\n※売上金額は、割引を含んでいます。\n</html>\n");
        message.setFocusCycleRoot(true);

        jScrollPane2.setBorder(null);

        totalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "顧客数", "来店回数", "売上金額", "平均単価"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        totalTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        totalTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        SelectTableCellRenderer.setSelectTableCellRenderer(totalTable);
        jScrollPane2.setViewportView(totalTable);

        txtShop.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txtShop.setText("指定なし");

        txtStaff.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txtStaff.setText("指定なし");
        txtStaff.setToolTipText("");

        shopLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel1.setText("店舗");

        shopLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel4.setText("主担当者");

        org.jdesktop.layout.GroupLayout pnlMainLayout = new org.jdesktop.layout.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlMainLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(pnlMainLayout.createSequentialGroup()
                .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mailButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sealButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(postcardButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1)
            .add(pnlMainLayout.createSequentialGroup()
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(message, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 338, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(75, 75, 75)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 391, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(shopLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(txtStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(shopLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(txtShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(shopLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(tax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(15, 15, 15)
                        .add(mvalueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 258, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(shopLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(targetPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(pnlMainLayout.createSequentialGroup()
                                .add(171, 171, 171)
                                .add(fvalueLabel))))
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(category, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(15, 15, 15)
                        .add(jLabel1)))
                .add(0, 0, Short.MAX_VALUE))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlMainLayout.createSequentialGroup()
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(postcardButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mailButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(sealButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(20, 20, 20)
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(shopLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, 0)
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(shopLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, 0)
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(category, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .add(0, 0, 0)
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(shopLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(targetPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(fvalueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, 0)
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(shopLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(mvalueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(10, 10, 10)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(message, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        txtStaff.getAccessibleContext().setAccessibleName("");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(82, Short.MAX_VALUE)
                .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed

        mclistCreator = null;
        
        this.showOpener();

    }//GEN-LAST:event_closeButtonActionPerformed

    private void changeSelect(boolean select){
        
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Vector row = (Vector)model.getDataVector().get(i);
            if(row.get(14) != null){
                row.add(14, select);
            }
        }
    }
    
    private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseAllButtonActionPerformed

        this.changeSelect(false);

    }//GEN-LAST:event_releaseAllButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed

        this.changeSelect(true);

    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void postcardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postcardButtonActionPerformed
        postcardButton.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    
        
            this.printPostcard();
        
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }  
    }//GEN-LAST:event_postcardButtonActionPerformed

    private void sealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sealButtonActionPerformed
        sealButton.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    
        
            this.createSeal();
        
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }  
    }//GEN-LAST:event_sealButtonActionPerformed

    private void mailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailButtonActionPerformed
        mailButton.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        this.sendMail();
        
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }  
    }//GEN-LAST:event_mailButtonActionPerformed

    private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed
        btnOutput.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
            this.print();
        
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }    
    }//GEN-LAST:event_btnOutputActionPerformed

    private boolean checkDuplicateCustomer(ArrayList<MstCustomer> selectedArray, MstCustomer customer){
        for(MstCustomer mc : selectedArray){
            if(mc.getCustomerID().intValue() == customer.getCustomerID().intValue()){
                return true;
            }
        }
        return false;
    }

    /**
     * @return the technicName
     */
    public String getTechnicName() {
        return technicName;
    }

    /**
     * @param technicName the technicName to set
     */
    public void setTechnicName(String technicName) {
        this.technicName = technicName;
    }

    /**
     * @return the itemName
     */
    public String getItemName() {
        return itemName;
    }

    /**
     * @param itemName the itemName to set
     */
    public void setItemName(String itemName) {
        this.itemName = itemName;
    }

    /**
     * @return the categoryName
     */
    public String getCategoryName() {
        return categoryName;
    }

    /**
     * @param categoryName the categoryName to set
     */
    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    /**
     * @return the categoryId
     */
    public int getCategoryId() {
        return categoryId;
    }

    /**
     * @param categoryId the categoryId to set
     */
    public void setCategoryId(int categoryId) {
        this.categoryId = categoryId;
    }

    /**
     * @return the typeRank
     */
    public int getTypeRank() {
        return typeRank;
    }

    /**
     * @param typeRank the typeRank to set
     */
    public void setTypeRank(int typeRank) {
        this.typeRank = typeRank;
    }

    private class MstCustomerListCreator extends Thread {

        private ArrayList<Integer> list = new ArrayList<Integer>();
        
        public MstCustomerListCreator(ArrayList<Integer> list) {
            this.list = list;
        }
        
        public void run() {

            try {

                for (Integer id : list) {
                    MstCustomer mc = new MstCustomer(id);
                    mc.load(SystemInfo.getConnection());
                    resultList.add(mc);
                }

            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

        }
    }
    
    private void getCustomerList() {
        
        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            for (;;) {
                if (customersTable.getRowCount() == resultList.size()) {
                    break;
                }
            }
            
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    
    private void printPostcard() {
	
	DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();
      
        for (int i = 0; i < model.getRowCount(); i++) {
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if (row.get(14) != null && (Boolean)row.get(14)) {
		
                getCustomerList();
                
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if (this.checkDuplicateCustomer(selectedArray, mc)) {
                    continue;
                }
                
                // 住所がなかっても飛ばす
                if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
		    continue;
                }
                
                selectedArray.add(mc);
            }
        }
        
        if(selectedArray.size() == 0){
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        PrintPostcardPanel ppp = new PrintPostcardPanel(selectedArray);
	ppp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, ppp, "ハガキ作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private void createSeal(){
	
        // 宛名ラベル印刷をクリック
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();
      
        for (int i = 0; i < model.getRowCount(); i++) {
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(14) != null && (Boolean)row.get(14)){

                getCustomerList();
                
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if(this.checkDuplicateCustomer(selectedArray, mc)){
                    continue;
                }
                
                // 住所がなかっても飛ばす
                if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
		    continue;
                }
                
                selectedArray.add(mc);
            }
        }
        
        if(selectedArray.size() == 0){
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        PrintLabelPanel plp = new PrintLabelPanel(selectedArray);
	plp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, plp, "宛名ラベル作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private void sendMail(){
	
        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();

	DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
      
        for(int i = 0; i < model.getRowCount(); i++){
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(14) != null && (Boolean)row.get(14)){
                
                getCustomerList();
                
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if (this.checkDuplicateCustomer(selectedArray, mc)) continue;
		
		selectedArray.add(mc);
            }
        }

        if (selectedArray.size() == 0) {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        HairCommonMailPanel rcmp = new HairCommonMailPanel(target, selectedArray);
	rcmp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, rcmp, "メール作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private Date getStartDate(Date date){
        
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        
        return cal.getTime();
    }
    
    private Date getEndDate(Date date){
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);
        
        return cal.getTime();
    }
    
    public void showData(int typeOfRank, int categoryId){

        //IVS_LVTu start add 2015/05/25 New request #36880
        txtShop.setText(this.getShopName());
        txtStaff.setText(this.getStaffName());
        //IVS_LVTu end add 2015/05/25 New request #36880
        category.setText(this.getCategoryName());
        targetPeriod.setText(this.getTargetPeriodStartDate() + " 〜 " + this.getTargetPeriodEndDate());
        tax.setText(this.getTaxName());
        
        mvalueLabel.setText(this.fvalue);
        fvalueLabel.setText(this.mvalue);

        //--------------------------
        // 顧客情報
        //--------------------------
        resultList.clear();
        
        if( customersTable.getCellEditor() != null ) 
                customersTable.getCellEditor().stopCellEditing();
	SwingUtil.clearTable(customersTable);
        
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
        
        try {
            long customerCountTotal = 0l;
            long visitCountTotal = 0l;
            long salesValueTotal = 0l;
            
            //ランキングの開始位置
            long ranking = getLimitCount() * getSelectedRow() + 1;
            ResultSetWrapper rs = null;
            try{
                rs = SystemInfo.getConnection().executeQuery(this.getCustomerDetailRankingSQL(typeOfRank, categoryId, true));
            }catch(SQLException e)
            {
                MessageDialog.showMessageDialog(this,
                    "DB接続が失敗もしくはタイマーアウトでした。\n メニューから再度実施お願いいたします。",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                return;
            }
            
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

            while (rs.next()) {
                salesValueTotal += rs.getLong("sales_value");
            }
            rs.beforeFirst();

            BigDecimal bd = null;
            NumberFormat nf = NumberFormat.getInstance();
            nf.setMinimumFractionDigits(1);

            ArrayList<Integer> customerIDList = new ArrayList<Integer>();
            
            int i = 0;
            while (rs.next()) {
                customerIDList.add(rs.getInt("customer_id"));         
                this.setTechnicName(rs.getString("rank_name1"));
                this.setItemName(rs.getString("rank_name2"));
                String salesShareRate = "0%";
                if (salesValueTotal > 0) {
                    bd = new BigDecimal(rs.getDouble("sales_value") / salesValueTotal * 100);
                    salesShareRate = nf.format(bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue()) + "%";
                }
                Object[] rowData = { ranking <= 3 ? getRankingIcon(ranking):ranking,
                                     getUserSearchButton(rs.getInt("customer_id")),
                                     rs.getString("customer_no"),
                                     rs.getString("customer_name"),
                                     sdf.format(rs.getDate("sales_date")),
                                     rs.getString("staff_name"),
                                     ((Boolean)rs.getBoolean("designated_flag") ? "●" : ""),
                                     rs.getLong("visit_count"),
                                     rs.getLong("sales_value"),
                                     salesShareRate,
                                     rs.getLong("visit_count") > 0 ? (rs.getLong("sales_value") / rs.getLong("visit_count")) : 0,
                                     this.getTechnicName(),
                                     this.getItemName(),
                                     rs.getString("pc_mail_address").length() > 0 || rs.getString("cellular_mail_address").length() > 0 ? "●" : "",
                                     true
                                   };
                
                customerCountTotal += 1;
                visitCountTotal += rs.getLong("visit_count");
                
                model.addRow(rowData);
                ranking++;
                i++;
            }
            
            rs.close();

            SwingUtil.clearTable(totalTable);
            DefaultTableModel totalModel = (DefaultTableModel)totalTable.getModel();
            totalModel.addRow(new Object[]{customerCountTotal, visitCountTotal, salesValueTotal, visitCountTotal > 0 ? (salesValueTotal / visitCountTotal) : 0});

            mclistCreator = new MstCustomerListCreator(customerIDList);
            mclistCreator.start();
            
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    public void getRankItemByTechnicId(int customerId, MasherRankingPanel masher){
        ConnectionWrapper con = SystemInfo.getConnection();
        
        try{
            String sql = "";
            sql = " select c.item_rank_id, r.rank_name, c.technic_rank_id  from mst_customer_rank c inner join mst_rank r on c.item_rank_id = r.rank_id " +
                     "  where c.customer_id = "+ customerId +"";
            ResultSetWrapper rs = con.executeQuery(sql);
            while(rs.next()){
                masher.setItemName(rs.getString("rank_name"));
            }
        }catch(Exception e){
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }
    
    public void getTechnicByItemId(int customerId,MasherRankingPanel masher ){
        try{
            ConnectionWrapper con = SystemInfo.getConnection();
            String sql = "";
            sql = " select  r.rank_name, c.technic_rank_id  from mst_customer_rank c inner join mst_rank r on c.technic_rank_id = r.rank_id " +
                     "  where c.customer_id = "+ customerId +"";
            ResultSetWrapper rs = con.executeQuery(sql);
            while(rs.next()){
                masher.setTechnicName(rs.getString("rank_name"));
            }
        }catch(Exception e){
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }
	public String getCustomerDetailRankingSQL(int typeOfRank, int categoryId, boolean isList) throws Exception
	{
            //IVS_LVTu start add 2015/05/25 New request #36880
            ConnectionWrapper con = SystemInfo.getConnection();
            ResultSetWrapper rs = null;

            String itemSaleGroup = null;
            String itemGroupId = null;
            try {
                String sqltemp = "SELECT item_sales_group, item_group_id FROM mst_rank_advanced_setting WHERE shop_category_id = " + this.getShopCategoryId();
                rs = con.executeQuery(sqltemp.toString());
                if (rs.next()) {
                    itemSaleGroup = rs.getString("item_sales_group");
                    itemGroupId = rs.getString("item_group_id");
                }
            } catch (Exception e) {
             }

            MstRankAdvancedSetting mstRankAdS = new MstRankAdvancedSetting();
            if (typeOfRank == 1) {
                mstRankAdS.setShopCategoryId(this.getShopCategoryId());
                mstRankAdS.loadRankAdvancedSettingData();
            }
            
            String salesValueColumn = "";
            if (getTaxType() == 0) {
                //割引後税抜き金額
                salesValueColumn = "discount_detail_value_no_tax";
            } else {
                //割引後税込み金額
                salesValueColumn = "discount_detail_value_in_tax";
            }
            //IVS_LVTu end add 2015/05/25 New request #36880
	    StringBuilder sql = new StringBuilder(1000);
            
            long offset = 0;
            if (getSelectedRow() > 0) {
                offset = (getSelectedRow() * getLimitCount());
            }
            if (isList) {
                sql.append(" select wk.*,mr1.rank_name as rank_name1, mr2.rank_name as rank_name2  from wk_rank" + typeOfRank + "  wk ");
                sql.append(" left join mst_customer_rank mcr on mcr.customer_id = wk.customer_id and mcr.shop_category_id = " + categoryId);
                sql.append(" left join mst_rank mr1 on mr1.rank_id = mcr.technic_rank_id and mcr.shop_category_id = " + categoryId);
                sql.append(" left join mst_rank mr2 on mr2.rank_id = mcr.item_rank_id and mcr.shop_category_id = " + categoryId);
            }else{
                sql.append(" select * from wk_rank" + typeOfRank + " wk "); 
            }
                       
            if (getWhereCondition().length() > 0) {
                sql.append(" where " + getWhereCondition());
                //IVS_LVTu start add 2015/05/25 New request #36880
                if(this.getShopId() != null || this.getStaffId() != null) {
                    sql.append(" AND ");
                    sql.append(" wk.customer_id IN (SELECT distinct customer_id ");
                    sql.append(" from");
                    sql.append("     view_data_sales_detail_valid a");
                    sql.append("     join mst_customer b using (customer_id)");
                    sql.append(" where");
                    sql.append("      a.sales_date between " + SQLUtil.convertForSQL(this.getTargetPeriodStartDate()) + " and " + SQLUtil.convertForSQL(this.getTargetPeriodEndDate()));
                    sql.append("     and b.customer_no <> '0'");
                    if ( this.getShopId() != null ) {
                        sql.append(" and a.shop_id = " + this.getShopId());
                    }
                    if ( this.getStaffId() != null ) {
                        sql.append(" and a.staff_id = " + this.getStaffId());
                    }
                    if (typeOfRank == 1) {
                        //技術・技術クレーム
                        if (mstRankAdS.getSales_flag() != null && mstRankAdS.getSales_flag() == 1) {
                            sql.append(" and a.product_division in (1,2,3,4)");
                        } else {
                            sql.append(" and a.product_division in (1,3)");
                        }
                    } else {
                        //商品・商品返品
                        sql.append(" and a.product_division in (2,4)");
                    }
                    if(typeOfRank == 3)
                    {
                        sql.append(" AND a.customer_id not in (select customer_id from wk_rank2) ");
                    }
                    if (typeOfRank == 2) {
                        sql.append(" AND a.product_id");
                        sql.append("    IN");
                        sql.append("    ( SELECT item_id FROM mst_rank_item_detail WHERE item_group_id ");
                        sql.append("         IN (" + itemGroupId  + "))");
                    }

                    if (typeOfRank == 3) {
                        sql.append(" AND a.product_id");
                        sql.append("     IN");
                        sql.append("        (SELECT item_id FROM mst_rank_item_detail WHERE item_group_id");
                        sql.append("             IN ( " + itemSaleGroup + " ))");
                    }
                    if (this.categoryId != 0) {
                        if (typeOfRank == 1) {
                            sql.append(" and \n");
                                sql.append(" (	\n");
                                sql.append(" exists (	\n");
                                sql.append("         select 1 from \n");
                                sql.append("         data_sales_detail ds1\n");
                                sql.append("         inner join mst_technic mt on ds1.product_id = mt.technic_id and a.product_division = ds1.product_division and ds1.product_division in (1,3) \n");
                                sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
                                sql.append("         where ds1.slip_no = a.slip_no and ds1.shop_id = a.shop_id and ds1.slip_detail_no = a.slip_detail_no \n");
                                sql.append("         and mtc.shop_category_id = " + this.categoryId + "	\n");
                                sql.append("         ) 	\n");
                                if (mstRankAdS.getSales_flag() != null && mstRankAdS.getSales_flag() == 1) {
                                    sql.append(" or \n");
                                    sql.append(" exists(\n");
                                    sql.append("         select 1 from\n");
                                    sql.append("         data_sales_detail ds1\n");
                                    sql.append("         inner join mst_item mi on ds1.product_id = mi.item_id and a.product_division = ds1.product_division and ds1.product_division in (2,4) \n");
                                    sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
                                    sql.append("         where ds1.slip_no = a.slip_no and ds1.shop_id = a.shop_id and ds1.slip_detail_no = a.slip_detail_no\n");
                                    sql.append("         and mic.shop_category_id = " + this.categoryId + "\n");
                                    sql.append("         )\n");
                                }
                                sql.append(" )\n");
                        } else {
                            sql.append(" and \n");
                            sql.append(" exists(\n");
                            sql.append("         select 1 from\n");
                            sql.append("         data_sales_detail ds1\n");
                            sql.append("         inner join mst_item mi on ds1.product_id = mi.item_id and a.product_division = ds1.product_division and ds1.product_division in (2,4) \n");
                            sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
                            sql.append("         where ds1.slip_no = a.slip_no and ds1.shop_id = a.shop_id and ds1.slip_detail_no = a.slip_detail_no\n");
                            sql.append("         and mic.shop_category_id = " + this.categoryId + "\n");
                            sql.append("         )\n");
                        }
                    }
                    sql.append(" group by");
                    sql.append("     a.customer_id");
                    sql.append(" HAVING SUM(" + salesValueColumn + ")  >= coalesce( ");
                    sql.append("                                    (SELECT  ");
                     if (typeOfRank == 1) {
                        sql.append("technic_value1 ");
                     }
                     else
                     {
                         sql.append("item_value1 ");
                     }
                    sql.append("                                     FROM mst_rank_advanced_setting ");
                    sql.append("                                     WHERE shop_category_id =" + this.categoryId + "),0) ) ");
                }
                //IVS_LVTu end add 2015/05/25 New request #36880
            }
            
            sql.append("     offset " + offset);
            if (getSelectedRow() < 9) {
                sql.append(" limit " + getLimitCount());
            }

            return sql.toString();
	}
            
        private void print(){
            
            DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

            if(model.getRowCount() == 0){
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            JExcelApi jx = new JExcelApi("独自ランク分析表_");
            jx.setTemplateFile("/reports/独自ランク分析表.xls");            
            
            // ヘッダ
            jx.setValue(2, 3, category.getText());                         //????                    
            jx.setValue(2, 4, targetPeriod.getText());
            jx.setValue(2, 5, tax.getText());
            jx.setValue(5, 4, mvalueLabel.getText());
            if(mvalueLabel.getText() == null || mvalueLabel.getText() == ""){
                jx.setValue(5, 4, fvalueLabel.getText());
            }else{
                jx.setValue(5, 5, fvalueLabel.getText());
            }
            
            
            int row = 8;

            // 追加行数セット
            jx.insertRow(row, model.getRowCount() - 1);
            for (int i = row + 1; i < model.getRowCount() + row + 1; i++) {
                jx.mergeCells(4, i, 5, i);
            }
            
            // データセット
            for(int i = 0; i < model.getRowCount(); i++){

                if (model.getValueAt(i, 0) instanceof JButton) {
                    jx.setValue(1, row, i + 1);                    
                } else {
                    jx.setValue(1, row, model.getValueAt(i, 0));         
                }

                jx.setValue(2, row, model.getValueAt(i, 2));
                jx.setValue(3, row, model.getValueAt(i, 3));
                jx.setValue(4, row, model.getValueAt(i, 4));
                jx.setValue(6, row, model.getValueAt(i, 5));
                jx.setValue(7, row, model.getValueAt(i, 6));
                jx.setValue(8, row, model.getValueAt(i, 7));
                jx.setValue(9, row, model.getValueAt(i, 8));
                jx.setValue(10, row, model.getValueAt(i, 9));
                jx.setValue(11, row, model.getValueAt(i, 10));
                jx.setValue(12, row, model.getValueAt(i, 11));
                jx.setValue(13, row, model.getValueAt(i, 12));
                jx.setValue(14, row, model.getValueAt(i, 13));
                
                row++;
            }
            
            jx.removeRow(row);

            jx.openWorkbook();
            
        }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutput;
    private javax.swing.JLabel category;
    private javax.swing.JButton closeButton;
    private javax.swing.ButtonGroup comingCycleGroup;
    private javax.swing.ButtonGroup customerCategoryGroup;
    private javax.swing.ButtonGroup customerGroup;
    private com.geobeck.swing.JTableEx customersTable;
    private javax.swing.JLabel fvalueLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mailButton;
    private javax.swing.JLabel message;
    private javax.swing.JLabel mvalueLabel;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JButton postcardButton;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton sealButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JLabel shopLabel1;
    private javax.swing.JLabel shopLabel2;
    private javax.swing.JLabel shopLabel3;
    private javax.swing.JLabel shopLabel4;
    private javax.swing.JLabel targetPeriod;
    private javax.swing.JLabel tax;
    private com.geobeck.swing.JTableEx totalTable;
    private javax.swing.JLabel txtShop;
    private javax.swing.JLabel txtStaff;
    // End of variables declaration//GEN-END:variables
	
	private void setKeyListener()
	{
	}
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
            SwingUtil.setJTableHeaderRenderer(customersTable, SystemInfo.getTableHeaderRenderer());
            this.customersTable.setDefaultRenderer(Object.class, new TableCellRenderer());
            
            SwingUtil.setJTableHeaderRenderer(totalTable, SystemInfo.getTableHeaderRenderer());
            
            totalTable.setRowHeight(30);
        }
        
	/**
	 * 再来予測分析テーブル用のTableCellRenderer
	 */
	public class TableCellRenderer extends SelectTableCellRenderer
	{
            /** Creates a new instance of TableCellRenderer */
            public TableCellRenderer()
            {
                super();
            }

            
            /**
             * テーブルセルレンダリングを返します。
             * @param table JTable
             * @param value セルに割り当てる値
             * @param isSelected セルが選択されている場合は true
             * @param hasFocus フォーカスがある場合は true
             * @param row 行
             * @param column 列
             * @return テーブルセルレンダリング
             */
            public Component getTableCellRendererComponent(JTable table, Object value, 
                 boolean isSelected, boolean hasFocus, int row, int column){ 

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                switch(column)
                {
                        case 8:
                        case 9:
                        case 10:
                                super.setHorizontalAlignment(SwingConstants.RIGHT);
                                break;
                        default:
                                super.setHorizontalAlignment(SwingConstants.CENTER);
                                break;
                }
                
                return this; 
            } 

	
        }
        
        /**
         * ユーザ検索ボタンを取得する
         */
        private JButton getUserSearchButton(final Integer customerID)
        {
                JButton	searchButton = new JButton();
                searchButton.setBorderPainted(false);
                searchButton.setContentAreaFilled(false);
                searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
                searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
                searchButton.setSize(48, 25);
                searchButton.addActionListener(new java.awt.event.ActionListener()
                {
                        public void actionPerformed(java.awt.event.ActionEvent evt)
                        {
                            DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

                            MstCustomerPanel mcp = null;

                            try {

                                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                                mcp = new MstCustomerPanel(customerID, true, true);
                                SwingUtil.openAnchorDialog( parentFrame, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );

                            } finally {
                                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            }
                            
                            mcp = null;
                        }
                });
                return searchButton;
        }   

        /**
         * JTableの列幅を初期化する。
         */
        private void initTableColumnWidth()
        {
            //列の幅を設定する
            
            customersTable.getColumnModel().getColumn(0).setPreferredWidth(30);        //ランク
            customersTable.getColumnModel().getColumn(1).setPreferredWidth(48);        //顧客情報ボタン
            customersTable.getColumnModel().getColumn(2).setPreferredWidth(45);        //顧客No.
            customersTable.getColumnModel().getColumn(3).setPreferredWidth(80);        //氏名
            customersTable.getColumnModel().getColumn(4).setPreferredWidth(60);        //前回来店日
            customersTable.getColumnModel().getColumn(5).setPreferredWidth(60);        //担当者
            customersTable.getColumnModel().getColumn(6).setPreferredWidth(20);        //指名
            customersTable.getColumnModel().getColumn(7).setPreferredWidth(50);        //来店回数
            customersTable.getColumnModel().getColumn(8).setPreferredWidth(50);        //売上金額
            customersTable.getColumnModel().getColumn(9).setPreferredWidth(60);        //売上シェア率
            customersTable.getColumnModel().getColumn(10).setPreferredWidth(50);       //購買単価
            customersTable.getColumnModel().getColumn(11).setPreferredWidth(20);       //メールアドレス有無
            customersTable.getColumnModel().getColumn(12).setPreferredWidth(20);       // 送信対象
        }       

        /**
	 * ランキングアイコンを取得する
         * @param ranking ランキング
         * @return ランキングアイコン
	 */
	private JButton getRankingIcon(long ranking)
	{
		JButton		rankingIcon	=	new JButton();
		rankingIcon.setBorderPainted(false);
		rankingIcon.setContentAreaFilled(false);
                if (ranking == 1) {
                    //１位の場合
                    rankingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                    "/images/" + SystemInfo.getSkinPackage() + "/button/print/rank1.png")));
                }
                else if (ranking == 2)
                {
                    //２位の場合
                    rankingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                    "/images/" + SystemInfo.getSkinPackage() + "/button/print/rank2.png")));
                }
                else if (ranking == 3)
                {
                    //３位の場合
                    rankingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                    "/images/" + SystemInfo.getSkinPackage() + "/button/print/rank3.png")));
                }
		rankingIcon.setSize(48, 25);
		return rankingIcon;
	}
        //IVS_LVTu start add 2015/04/24 Task New request #36344
        public String getCustomerValueRankingSQL(int typeOfRank, int categoryId) throws Exception
	{
            ConnectionWrapper con = SystemInfo.getConnection();
            ResultSetWrapper rs = null;

            String itemSaleGroup = null;
            String itemGroupId = null;
            try {
                String sqltemp = "SELECT item_sales_group, item_group_id FROM mst_rank_advanced_setting WHERE shop_category_id = " + this.getShopCategoryId();
                rs = con.executeQuery(sqltemp.toString());
                if (rs.next()) {
                    itemSaleGroup = rs.getString("item_sales_group");
                    itemGroupId = rs.getString("item_group_id");
                }
            } catch (Exception e) {
             }

            MstRankAdvancedSetting mstRankAdS = new MstRankAdvancedSetting();
            if (typeOfRank == 1) {
                mstRankAdS.setShopCategoryId(this.getShopCategoryId());
                mstRankAdS.loadRankAdvancedSettingData();
            }
            
            String salesValueColumn = "";
            if (getTaxType() == 0) {
                //割引後税抜き金額
                salesValueColumn = "discount_detail_value_no_tax";
            } else {
                //割引後税込み金額
                salesValueColumn = "discount_detail_value_in_tax";
            }
            
	    StringBuilder sql = new StringBuilder(1000);
            
            long offset = 0;
            if (getSelectedRow() > 0) {
                offset = (getSelectedRow() * getLimitCount());
            }
            sql.append(" select sales_value, visit_count from wk_rank" + typeOfRank +" wk " );          
            if (getWhereCondition().length() > 0) {
                sql.append(" where " + getWhereCondition());
                
                if(this.getShopId() != null || this.getStaffId() != null) {
                
                    sql.append(" AND ");
                    sql.append(" wk.customer_id IN (SELECT distinct customer_id ");
                    sql.append(" from");
                    sql.append("     view_data_sales_detail_valid a");
                    sql.append("     join mst_customer b using (customer_id)");
                    sql.append(" where");
                    sql.append("      a.sales_date between " + SQLUtil.convertForSQL(this.getTargetPeriodStartDate()) + " and " + SQLUtil.convertForSQL(this.getTargetPeriodEndDate()));
                    sql.append("     and b.customer_no <> '0'");
                    if ( this.getShopId() != null ) {
                        sql.append(" and a.shop_id = " + this.getShopId());
                    }
                    if ( this.getStaffId() != null ) {
                        sql.append(" and a.staff_id = " + this.getStaffId());
                    }
                    if (typeOfRank == 1) {
                        //技術・技術クレーム
                        if (mstRankAdS.getSales_flag() != null && mstRankAdS.getSales_flag() == 1) {
                            sql.append(" and a.product_division in (1,2,3,4)");
                        } else {
                            sql.append(" and a.product_division in (1,3)");
                        }
                    } else {
                        //商品・商品返品
                        sql.append(" and a.product_division in (2,4)");
                    }
                    if(typeOfRank == 3)
                    {
                        sql.append(" AND a.customer_id not in (select customer_id from wk_rank2) ");
                    }
                    if (typeOfRank == 2) {
                        sql.append(" AND a.product_id");
                        sql.append("    IN");
                        sql.append("    ( SELECT item_id FROM mst_rank_item_detail WHERE item_group_id ");
                        sql.append("         IN (" + itemGroupId  + "))");
                    }

                    if (typeOfRank == 3) {
                        sql.append(" AND a.product_id");
                        sql.append("     IN");
                        sql.append("        (SELECT item_id FROM mst_rank_item_detail WHERE item_group_id");
                        sql.append("             IN ( " + itemSaleGroup + " ))");
                    }
                    if (this.categoryId != 0) {
                        if (typeOfRank == 1) {
                            sql.append(" and \n");
                                sql.append(" (	\n");
                                sql.append(" exists (	\n");
                                sql.append("         select 1 from \n");
                                sql.append("         data_sales_detail ds1\n");
                                sql.append("         inner join mst_technic mt on ds1.product_id = mt.technic_id and a.product_division = ds1.product_division and ds1.product_division in (1,3) \n");
                                sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
                                sql.append("         where ds1.slip_no = a.slip_no and ds1.shop_id = a.shop_id and ds1.slip_detail_no = a.slip_detail_no \n");
                                sql.append("         and mtc.shop_category_id = " + this.categoryId + "	\n");
                                sql.append("         ) 	\n");
                                if (mstRankAdS.getSales_flag() != null && mstRankAdS.getSales_flag() == 1) {
                                    sql.append(" or \n");
                                    sql.append(" exists(\n");
                                    sql.append("         select 1 from\n");
                                    sql.append("         data_sales_detail ds1\n");
                                    sql.append("         inner join mst_item mi on ds1.product_id = mi.item_id and a.product_division = ds1.product_division and ds1.product_division in (2,4) \n");
                                    sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
                                    sql.append("         where ds1.slip_no = a.slip_no and ds1.shop_id = a.shop_id and ds1.slip_detail_no = a.slip_detail_no\n");
                                    sql.append("         and mic.shop_category_id = " + this.categoryId + "\n");
                                    sql.append("         )\n");
                                }
                                sql.append(" )\n");
                        } else {
                            sql.append(" and \n");
                            sql.append(" exists(\n");
                            sql.append("         select 1 from\n");
                            sql.append("         data_sales_detail ds1\n");
                            sql.append("         inner join mst_item mi on ds1.product_id = mi.item_id and a.product_division = ds1.product_division and ds1.product_division in (2,4) \n");
                            sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
                            sql.append("         where ds1.slip_no = a.slip_no and ds1.shop_id = a.shop_id and ds1.slip_detail_no = a.slip_detail_no\n");
                            sql.append("         and mic.shop_category_id = " + this.categoryId + "\n");
                            sql.append("         )\n");
                        }
                    }
                    sql.append(" group by");
                    sql.append("     a.customer_id");
                    sql.append(" HAVING SUM(" + salesValueColumn + ")  >= coalesce( ");
                    sql.append("                                    (SELECT  ");
                     if (typeOfRank == 1) {
                        sql.append("technic_value1 ");
                     }
                     else
                     {
                         sql.append("item_value1 ");
                     }
                    sql.append("                                     FROM mst_rank_advanced_setting ");
                    sql.append("                                     WHERE shop_category_id =" + this.categoryId + "),0) ) ");
                    }
                }
            
            sql.append("     offset " + offset);
            if (getSelectedRow() < 9) {
                sql.append(" limit " + getLimitCount());
            }

            return sql.toString();
	}
        //IVS_LVTu end add 2015/04/24 Task New request #36344
    public long getSelectedRow() {
        return selectedRow;
    }

    public void setSelectedRow(long selectedRow) {
        this.selectedRow = selectedRow;
    }

    public Object getTarget() {
        return target;
    }

    public void setTarget(Object target) {
        this.target = target;
    }

    public String getStaffName() {
        return staffName;
    }

    public void setStaffName(String staffName) {
        this.staffName = staffName;
    }

    public String getTargetPeriodStartDate() {
        return targetPeriodStartDate;
    }

    public void setTargetPeriodStartDate(String targetPeriodStartDate) {
        this.targetPeriodStartDate = targetPeriodStartDate;
    }

    public String getTargetPeriodEndDate() {
        return targetPeriodEndDate;
    }

    public void setTargetPeriodEndDate(String targetPeriodEndDate) {
        this.targetPeriodEndDate = targetPeriodEndDate;
    }

    public String getTaxName() {
        return taxName;
    }

    public void setTaxName(String taxName) {
        this.taxName = taxName;
    }

    public String getProductDivisionName() {
        return productDivisionName;
    }

    public void setProductDivisionName(String productDivisionName) {
        this.productDivisionName = productDivisionName;
    }

    public String getProductDivisionLabelName() {
        return productDivisionLabelName;
    }

    public void setProductDivisionLabelName(String productDivisionLabelName) {
        this.productDivisionLabelName = productDivisionLabelName;
    }
    
    public long getLimitCount() {
        return limitCount;
    }

    public void setLimitCount(long limitCount) {
        this.limitCount = limitCount;
    }

    public String getWhereCondition() {
        return whereCondition;
    }

    public void setWhereCondition(String whereCondition) {
        this.whereCondition = whereCondition;
    }

    public String getFmType() {
        return fmType;
    }

    public void setFmType(String fmType) {
        this.fmType = fmType;
    }

    public String getFvalue() {
        return fvalue;
    }

    public void setFvalue(String fvalue) {
        this.fvalue = fvalue;
    }

    public String getMvalue() {
        return mvalue;
    }

    public void setMvalue(String mvalue) {
        this.mvalue = mvalue;
    }

    public String getRankLabel() {
        return rankLabel;
    }

    public void setRankLabel(String rankLabel) {
        this.rankLabel = rankLabel;
    }

    public String getRankNo() {
        return rankNo;
    }

    public void setRankNo(String rankNo) {
        this.rankNo = rankNo;
    }
   
}
