/*
 * PrintLabelPanel.java
 *
 * Created on 2006/10/23, 11:59
 */

package com.geobeck.sosia.pos.mail;

import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.awt.print.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import javax.print.attribute.*;
import javax.print.attribute.standard.*;
import java.util.*;
import java.util.logging.*;
import java.sql.*;

import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.label.*;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.hair.customer.*;
import com.geobeck.sosia.pos.hair.report.*;
import com.ibm.icu.text.Transliterator;

/**
 *
 * @author  katagiri
 */
public class PrintLabelPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx implements Printable
{
    Container container;
    Integer XCount;
    Integer YCount;
    Double XSpace;
    Double YSpace;
    Integer StartCount;
    Double TopMargin;
    Double LeftMargin;
    Double labelHeight;
    Double labelWidth;

	/** Creates new form PrintLabelPanel */
	public PrintLabelPanel(Object target, ArrayList<MstCustomer> cusArray)
        {
            this(cusArray);
            
            if (target instanceof MstShop) {
                this.shopID = ((MstShop)target).getShopID();
            }
        }
        
	public PrintLabelPanel(ArrayList<MstCustomer> cusArray)
	{
	    super();
	    initComponents();
	    addMouseCursorChange();
	    this.setSize(833, 691);
	    this.setPath("メール機能 >> 条件検索");
	    this.setTitle("宛名ラベル作成");
	    this.initComboBox();
	    this.cusArray = cusArray;
	    this.initCustomersTable();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        labelMaker = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        labelName = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rowCount = new javax.swing.JTextField();
        ((PlainDocument)rowCount.getDocument()).setDocumentFilter(
            new CustomFilter(2, CustomFilter.NUMERIC));
        jLabel6 = new javax.swing.JLabel();
        columnCount = new javax.swing.JTextField();
        ((PlainDocument)columnCount.getDocument()).setDocumentFilter(
            new CustomFilter(2, CustomFilter.NUMERIC));
        jLabel24 = new javax.swing.JLabel();
        height = new javax.swing.JTextField();
        ((PlainDocument)height.getDocument()).setDocumentFilter(
            new CustomFilter(6, CustomFilter.NUMERIC));
        jLabel23 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        width = new javax.swing.JTextField();
        ((PlainDocument)width.getDocument()).setDocumentFilter(
            new CustomFilter(6, CustomFilter.NUMERIC));
        jLabel21 = new javax.swing.JLabel();
        verticalSpacing = new javax.swing.JTextField();
        ((PlainDocument)verticalSpacing.getDocument()).setDocumentFilter(
            new CustomFilter(6, CustomFilter.NUMERIC));
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        horizontalSpacing = new javax.swing.JTextField();
        ((PlainDocument)horizontalSpacing.getDocument()).setDocumentFilter(
            new CustomFilter(6, CustomFilter.NUMERIC));
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        top = new javax.swing.JTextField();
        ((PlainDocument)top.getDocument()).setDocumentFilter(
            new CustomFilter(6, CustomFilter.NUMERIC));
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        left = new javax.swing.JTextField();
        ((PlainDocument)left.getDocument()).setDocumentFilter(
            new CustomFilter(6, CustomFilter.NUMERIC));
        jLabel16 = new javax.swing.JLabel();
        sheetSize = new javax.swing.JTextField();
        ((PlainDocument)height.getDocument()).setDocumentFilter(
            new CustomFilter(6, CustomFilter.NUMERIC));
        customersScrollPane = new javax.swing.JScrollPane();
        customersTable = new com.geobeck.swing.JTableEx();
        jLabel20 = new javax.swing.JLabel();
        targetCount = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        customerNoPrint = new javax.swing.JComboBox();
        printButton = new javax.swing.JButton();
        startLocation = new javax.swing.JComboBox();
        previewScrollPane = new javax.swing.JScrollPane();
        previewPanel = new javax.swing.JPanel();
        historyButton = new javax.swing.JButton();
        dmTitle = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/back_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/back_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jPanel1.setOpaque(false);

        jLabel1.setText("ラベル製品名");

        labelMaker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelMakerActionPerformed(evt);
            }
        });

        jLabel2.setText("製品番号");

        labelName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelNameActionPerformed(evt);
            }
        });

        jLabel3.setText("用紙サイズ");

        jLabel4.setText("行数");

        rowCount.setEditable(false);
        rowCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel6.setText("列数");

        columnCount.setEditable(false);
        columnCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel24.setText("ラベルの高さ");

        height.setEditable(false);
        height.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel23.setText("mm");

        jLabel22.setText("ラベルの幅");

        width.setEditable(false);
        width.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel21.setText("mm");

        verticalSpacing.setEditable(false);
        verticalSpacing.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel8.setText("縦方向の間隔");

        jLabel9.setText("mm");

        jLabel11.setText("mm");

        horizontalSpacing.setEditable(false);
        horizontalSpacing.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel10.setText("横方向の間隔");

        jLabel14.setText("mm");

        top.setEditable(false);
        top.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel13.setText("上余白");

        jLabel15.setText("横余白");

        left.setEditable(false);
        left.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel16.setText("mm");

        sheetSize.setEditable(false);
        sheetSize.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel24)
                    .add(jLabel22))
                .add(5, 5, 5)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, width)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, height, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                        .add(1, 1, 1)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel23)
                                .add(15, 15, 15)
                                .add(jLabel8))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel21)
                                .add(15, 15, 15)
                                .add(jLabel10))))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, sheetSize)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, labelMaker, 0, 143, Short.MAX_VALUE)))
                .add(4, 4, 4)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(horizontalSpacing)
                                    .add(verticalSpacing, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
                                .add(1, 1, 1)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel9)
                                    .add(jLabel11)))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(columnCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(4, 4, 4)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel13)
                                    .add(jLabel15))
                                .add(3, 3, 3)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(top, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(left, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(1, 1, 1)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel14)
                                    .add(jLabel16)))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(15, 15, 15)
                                .add(jLabel4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(rowCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(labelName, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(labelName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labelMaker, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jLabel6)
                    .add(columnCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4)
                    .add(rowCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(sheetSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel24)
                    .add(height, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel23)
                    .add(jLabel8)
                    .add(verticalSpacing, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9)
                    .add(jLabel13)
                    .add(top, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel14))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel22)
                    .add(width, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel21)
                    .add(jLabel10)
                    .add(horizontalSpacing, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel11)
                    .add(jLabel15)
                    .add(left, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel16))
                .add(54, 54, 54))
        );

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "<html>出力<br>対象</html> ", "顧客情報", "氏名", "住所", "家族"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.getTableHeader().setReorderingAllowed(false);
        customersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        SwingUtil.setJTableHeaderRenderer(customersTable, SystemInfo.getTableHeaderRenderer());
        customersTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        customersScrollPane.setViewportView(customersTable);

        jLabel20.setText("【対象人数】 ");

        targetCount.setFont(new java.awt.Font("MS UI Gothic", 0, 14));
        targetCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        targetCount.setText("9999 人");

        jPanel2.setOpaque(false);

        jLabel12.setText("開始位置");

        jLabel17.setText("顧客No.");

        customerNoPrint.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "出力する", "出力しない" }));
        customerNoPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNoPrintActionPerformed(evt);
            }
        });

        printButton.setIcon(SystemInfo.getImageIcon("/button/common/print_off.jpg"));
        printButton.setBorderPainted(false);
        printButton.setContentAreaFilled(false);
        printButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/print_on.jpg"));
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        startLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startLocationActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel12)
                .add(21, 21, 21)
                .add(startLocation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(25, 25, 25)
                .add(jLabel17)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(customerNoPrint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 40, Short.MAX_VALUE)
                .add(printButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel12)
                .add(startLocation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel17)
                .add(customerNoPrint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(printButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        previewScrollPane.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                previewScrollPaneFocusGained(evt);
            }
        });

        previewPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.jdesktop.layout.GroupLayout previewPanelLayout = new org.jdesktop.layout.GroupLayout(previewPanel);
        previewPanel.setLayout(previewPanelLayout);
        previewPanelLayout.setHorizontalGroup(
            previewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 435, Short.MAX_VALUE)
        );
        previewPanelLayout.setVerticalGroup(
            previewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 527, Short.MAX_VALUE)
        );

        previewScrollPane.setViewportView(previewPanel);

        historyButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_history_off.jpg"));
        historyButton.setBorderPainted(false);
        historyButton.setContentAreaFilled(false);
        historyButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_history_on.jpg"));
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        jLabel25.setText("DMタイトル");

        jLabel5.setForeground(java.awt.Color.red);
        jLabel5.setText("<html>\n※ 連名印刷時は、ラベルの用紙サイズが小さい場合、<br>\n　　印字がはみ出る可能性がありますのでご注意ください。　　\n</html>");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(jLabel25)
                                .add(15, 15, 15)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(jLabel20)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(targetCount))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(dmTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(historyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(customersScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, previewScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 439, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(jLabel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(targetCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(dmTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(8, 8, 8))
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(historyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(customersScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 576, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(previewScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed

        historyButton.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            registDmHistory();
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        
    }//GEN-LAST:event_historyButtonActionPerformed

    private void previewScrollPaneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_previewScrollPaneFocusGained
	previewScrollPane.getViewport().setViewPosition(new Point(0,0));
    }//GEN-LAST:event_previewScrollPaneFocusGained

    private void customerNoPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNoPrintActionPerformed
	this.doPreview();
    }//GEN-LAST:event_customerNoPrintActionPerformed

    private void startLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startLocationActionPerformed
	this.doPreview();
    }//GEN-LAST:event_startLocationActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
	
	PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet();
	pras.add(new Copies(1));
	pras.add(new JobName("LabelPrint",null));
	PrinterJob pj = PrinterJob.getPrinterJob();
	
	if (this.labelMaker.getSelectedIndex() == 0) {
	    MessageDialog.showMessageDialog(this, "ラベル製品名を選択してください。", this.getTitle(), JOptionPane.ERROR_MESSAGE);
	    labelMaker.requestFocus();
	    return;
	}

	if (this.labelName.getSelectedIndex() == 0) {
	    MessageDialog.showMessageDialog(this, "製品番号を選択してください。", this.getTitle(), JOptionPane.ERROR_MESSAGE);
	    labelName.requestFocus();
	    return;
	}

	if (!this.checkInput()) {
	    return;
	}

	// 出力対象顧客リスト取得
	ArrayList<MstCustomer> targetList = new ArrayList<MstCustomer>();
	for (int i = 0; i < cusArray.size(); i++) {
	    if(((JCheckBox)customersTable.getValueAt(i, 0)).isSelected()){
		targetList.add(cusArray.get(i));
	    }
	}
	
	if (targetList.size() == 0) {
	    MessageDialog.showMessageDialog(this, "出力対象の顧客を選択してください。", this.getTitle(), JOptionPane.ERROR_MESSAGE);
	    return;
	}
	
	//用紙サイズ
	MstLabel ml = (MstLabel)labelName.getSelectedItem();
	Double sheetWidth = ml.getSheet().getSheetWidth();
	Double sheetHeight = ml.getSheet().getSheetHeigth();
	
	PageFormat pf = pj.defaultPage();
	Paper p = new Paper();
	p.setSize(mm2dot(sheetWidth), mm2dot(sheetHeight));
	p.setImageableArea(0, 0, mm2dot(sheetWidth), mm2dot(sheetHeight));

//        JOptionPane.showMessageDialog(container, "X:" + p.getWidth() + "\nY:" + p.getHeight());
	
	p.setImageableArea(0, 0, p.getWidth(), p.getHeight());
	pf.setPaper(p);
	
	pj.setPrintable(this, pf);
	try {
	    if (pj.printDialog(pras)) {

		final int LABEL_COUNT = XCount * YCount;
		ArrayList<MstCustomer> printList = new ArrayList<MstCustomer>();
		boolean isFirstPage = true;
		
		for (Iterator itr = targetList.iterator(); itr.hasNext();) {
		    
		    if (isFirstPage) {
			
			// 開始位置分の空白追加
			for (int i = 1; i < StartCount.intValue(); i++) {
			    printList.add(null);
			}
			
			isFirstPage = false;
		    }

		    printList.add((MstCustomer)itr.next());
		    
		    if ( !itr.hasNext() || printList.size() >= LABEL_COUNT) {
			this.doPrint(printList);
			pj.print();
			printList.clear();
		    }
		} 
	    }
	} catch(Exception e) {
	    e.printStackTrace();
	}
    }//GEN-LAST:event_printButtonActionPerformed

	private void labelNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_labelNameActionPerformed
	{//GEN-HEADEREND:event_labelNameActionPerformed
	    this.setLabelInfo();
	    this.doPreview();
	    previewScrollPane.requestFocus();
	}//GEN-LAST:event_labelNameActionPerformed

	private void labelMakerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_labelMakerActionPerformed
	{//GEN-HEADEREND:event_labelMakerActionPerformed
	    this.setLabelName();
	}//GEN-LAST:event_labelMakerActionPerformed

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeButtonActionPerformed
	{//GEN-HEADEREND:event_closeButtonActionPerformed
            boolean isDialog = false;
            isDialog = isDialog || this.getOpener() instanceof ReappearancePredictionPanel;
            isDialog = isDialog || this.getOpener() instanceof StaffShopRankingDecilePanel;
            isDialog = isDialog || this.getOpener() instanceof KarteAnalysisPanel;
            isDialog = isDialog || this.getOpener() instanceof Ito3DCustomerListPanel;
            //nhanvt start add 20150126 GB_Mashu Task #34581
            isDialog = isDialog || this.getOpener() instanceof MasherRankingPanel;
            //nhanvt end add 20150126 GB_Mashu Task #34581
            if (isDialog) {
		((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
	    } else {
		this.showOpener();
	    }
	}//GEN-LAST:event_closeButtonActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField columnCount;
    private javax.swing.JComboBox customerNoPrint;
    private javax.swing.JScrollPane customersScrollPane;
    private com.geobeck.swing.JTableEx customersTable;
    private javax.swing.JTextField dmTitle;
    private javax.swing.JTextField height;
    private javax.swing.JButton historyButton;
    private javax.swing.JTextField horizontalSpacing;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox labelMaker;
    private javax.swing.JComboBox labelName;
    private javax.swing.JTextField left;
    private javax.swing.JPanel previewPanel;
    private javax.swing.JScrollPane previewScrollPane;
    private javax.swing.JButton printButton;
    private javax.swing.JTextField rowCount;
    private javax.swing.JTextField sheetSize;
    private javax.swing.JComboBox startLocation;
    private javax.swing.JLabel targetCount;
    private javax.swing.JTextField top;
    private javax.swing.JTextField verticalSpacing;
    private javax.swing.JTextField width;
    // End of variables declaration//GEN-END:variables
	
	private ArrayList<MstCustomer> cusArray = new ArrayList<MstCustomer>();

	private LabelManager labelManager = new LabelManager();

	private JPanel printPanel = new JPanel();

        private Transliterator tr = Transliterator.getInstance("Fullwidth-Halfwidth");

	private	Integer shopID = 0;
        
	/**
	 * 宛名ラベル印刷画面用FocusTraversalPolicy
	 */
	private PrintLabelFocusTraversalPolicy ftp = new PrintLabelFocusTraversalPolicy();

	/**
	 * 宛名ラベル印刷画面用FocusTraversalPolicyを取得する。
	 * @return 宛名ラベル印刷画面用FocusTraversalPolicy
	 */
	public PrintLabelFocusTraversalPolicy getFocusTraversalPolicy() {
	    return	ftp;
	}

	public double mm2dot(double d) {
	    return d / 25.4 * 72;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
	    SystemInfo.addMouseCursorChange(closeButton);
	    SystemInfo.addMouseCursorChange(printButton);
	    SystemInfo.addMouseCursorChange(historyButton);
	}
	
	private void initComboBox()
	{
	    try
	    {
		labelManager.init(SystemInfo.getBaseConnection());
	    }
	    catch(SQLException e)
	    {
		SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }

	    labelMaker.removeAllItems();
	    labelMaker.addItem(new MstLabelMaker());

	    for (MstLabelMaker mlm : labelManager.getLabelMakers()) {
		labelMaker.addItem(mlm);
	    }

	    this.setLabelName();
	}
	
	private void initCustomersTable()
	{
	    DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
	    if( customersTable.getCellEditor() != null ) customersTable.getCellEditor().stopCellEditing();
	    SwingUtil.clearTable(customersTable);

	    for (MstCustomer mc : cusArray) {
		model.addRow(new Object[]
		{
			getTargetFlag(true),
                        getUserSearchButton(mc),
                        mc,
                        mc.getFullAddress(),
                        mc.existsFamily() ? "　●" : ""
		});
	    }
	    
            setTargetCount();

	    // 先頭のラベル製品名と製品番号を表示する
	    if (labelMaker.getItemCount() > 1) {
		this.labelMaker.setSelectedIndex(1);
		if (labelName.getItemCount() > 1) {
		    this.labelName.setSelectedIndex(1);
		}
	    }
	}
	
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
	    //列の幅を設定する。
	    customersTable.getColumnModel().getColumn(0).setPreferredWidth(40);
	    customersTable.getColumnModel().getColumn(1).setPreferredWidth(65);
	    customersTable.getColumnModel().getColumn(3).setPreferredWidth(200);
	    customersTable.getColumnModel().getColumn(4).setPreferredWidth(35);
	}
	
	/**
	 * 対象フラグを取得する
	 */
	private JCheckBox getTargetFlag(boolean isSelected)
	{
		JCheckBox check = new JCheckBox();
		check.setSelected( isSelected );
		check.setOpaque( false );
		check.setHorizontalAlignment(SwingConstants.CENTER);
		check.addActionListener(
			new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                setTargetCount();
                                doPreview();
			    }
                        });
		return check;
	}
        
        private void setTargetCount() {
            
            int count = 0;
            
	    for (int i = 0; i < customersTable.getRowCount(); i++) {
		if(((JCheckBox)customersTable.getValueAt(i, 0)).isSelected()){
                    count++;
		}
	    }
            
	    targetCount.setText(count + " 人");
        }
        
        /**
	 * ユーザ検索ボタンを取得する
	 */
	private JButton getUserSearchButton(final MstCustomer mc)
	{
	    JButton		searchButton	=	new JButton();
	    searchButton.setBorderPainted(false);
	    searchButton.setContentAreaFilled(false);
	    searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
			    "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
	    searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
			    "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
	    searchButton.setSize(48, 25);
	    searchButton.addActionListener(new java.awt.event.ActionListener()
	    {
		public void actionPerformed(java.awt.event.ActionEvent evt)
		{
		    MstCustomerPanel mcp = null;
                    
                    try {

                        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        mcp = new MstCustomerPanel(mc.getCustomerID(), true, true);
                        SwingUtil.openAnchorDialog( (JFrame)null, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );

                    } finally {
                        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    }
                    
		    mcp = null;

		    int row = customersTable.getSelectedRow();

		    try {
			MstCustomer cus = new MstCustomer(mc.getCustomerID());
			if (cus.load(SystemInfo.getConnection())) {
                            cus.setFamilyList(mc.getFamilyList());
			    cusArray.set(row, cus);
			}
		    } catch (Exception e) {
		    }

		    DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
		    model.setValueAt(cusArray.get(row).getFullAddress(), row, 3);
		}
	    });
	    return searchButton;
	}        
	
	private void setLabelName()
	{
	    labelName.removeAllItems();
	    labelName.addItem(new MstLabel());

	    if (0 < labelMaker.getSelectedIndex()) {
		
		MstLabelMaker mlm = (MstLabelMaker)labelMaker.getSelectedItem();

		for (MstLabel ml : mlm) {
		    labelName.addItem(ml);
		}
	    }
	}
	
	private void setLabelInfo()
	{
	    sheetSize.setText("");
	    rowCount.setText("");
	    columnCount.setText("");
	    height.setText("");
	    width.setText("");
	    verticalSpacing.setText("");
	    horizontalSpacing.setText("");
	    left.setText("");
	    top.setText("");
	    startLocation.removeAllItems();
	    previewPanel.removeAll();
	    previewPanel.updateUI();
	    
	    if (0 < labelName.getSelectedIndex()) {
		
		MstLabel ml = (MstLabel)labelName.getSelectedItem();

		sheetSize.setText(ml.getSheet().getSheetName());
		rowCount.setText(ml.getRowCount().toString());
		columnCount.setText(ml.getColumnCount().toString());
		height.setText(ml.getLabelHeight().toString());
		width.setText(ml.getLabelWidth().toString());
		verticalSpacing.setText(ml.getVerticalSpacing().toString());
		horizontalSpacing.setText(ml.getHorizontalSpacing().toString());
		left.setText(ml.getLeftMargin().toString());
		top.setText(ml.getTopMargin().toString());
		
		for (int i = 1; i <= (ml.getRowCount() * ml.getColumnCount()); i++) {
		    startLocation.addItem(i);
		}
	    }
	}
	
	private boolean checkInput()
	{
	    //列数
	    try {
		XCount = Integer.parseInt(columnCount.getText());
	    } catch(NumberFormatException nfe) {
		return false;
	    }
	    //行数
	    try {
		YCount = Integer.parseInt(rowCount.getText());
	    } catch(NumberFormatException nfe) {
		return false;
	    }
	    //ラベルの高さ
	    try {
		labelHeight = mm2dot(Double.parseDouble(height.getText()));
	    } catch(NumberFormatException nfe) {
		if (height.getText().equals("")) {
		    labelHeight = 0.0;
		} else {
		    return false;
		}
	    }
	    //ラベルの幅
	    try {
		labelWidth = mm2dot(Double.parseDouble(width.getText()));
	    } catch(NumberFormatException nfe) {
		if (width.getText().equals("")) {
		    labelWidth = 0.0;
		} else {
		    return false;
		}
	    }
	    //横方向の間隔
	    try {
		XSpace = mm2dot(Double.parseDouble(horizontalSpacing.getText()));
	    } catch(NumberFormatException nfe) {
		if (horizontalSpacing.getText().equals("")) {
		    XSpace = 0.0;
		} else {
		    return false;
		}
	    }
	    //縦方向の間隔
	    try {
		YSpace = mm2dot(Double.parseDouble(verticalSpacing.getText()));
	    } catch(NumberFormatException nfe) {
		if (verticalSpacing.getText().equals("")) {
		    YSpace = 0.0;
		} else {
		    return false;
		}
	    }

	    //開始位置
	    if (startLocation.getItemCount() > 0) {
		StartCount = (Integer)startLocation.getSelectedItem();
	    } else {
		StartCount = 1;
	    }

	    //上余白
	    try {
		TopMargin = mm2dot(Double.parseDouble(top.getText()));
	    } catch(NumberFormatException nfe) {
		if (top.getText().equals("")) {
		    TopMargin = 0.0;
		} else {
		    return false;
		}
	    }
            TopMargin += 1.5d;

	    //横余白
	    try {
		LeftMargin = mm2dot(Double.parseDouble(left.getText()));
	    } catch(NumberFormatException nfe) {
		if (left.getText().equals("")) {
		    LeftMargin = 0.0;
		} else {
		    return false;
		}
	    }

	    return true;
	}

	private String getAddress(MstCustomer mc)
	{
	    String address = "";
	    
	    if (mc != null) {
		
		final String LEFT_SPACE = "    ";
                int lineLen = 36 / XCount;

		// 郵便番号
		address += LEFT_SPACE + "〒 " + mc.getFormatedPostalCode() + "\n";

		// 住所
		String tmpAddr = "";
                tmpAddr += mc.getAddress(0) == null ? "" : mc.getAddress(0);
                tmpAddr += mc.getAddress(1) == null ? "" : mc.getAddress(1);
                tmpAddr += mc.getAddress(2) == null ? "" : mc.getAddress(2);
                String addr4 = mc.getAddress(3) == null ? "" : mc.getAddress(3);
                
                address += getFormatAddress(tmpAddr, LEFT_SPACE, lineLen);

                if (addr4.length() > 0) {
                    address += getFormatAddress(addr4, LEFT_SPACE, lineLen);
                }

                if ((address.split("\n",-1)).length - 1 < 5) {
                    address += "\n";
                }

		// 顧客名
		for (int j = 0; j < (lineLen / 2); j++) address += " ";
		address += mc.getFullCustomerName() + "　様" + "\n";

                // 家族
                for (MstCustomer family : mc.getFamilyList()) {
                    for (int j = 0; j < (lineLen / 2); j++) address += " ";
                    address += family.getFullCustomerName() + "　様" + "\n";
                }

		// 顧客No.
		if (!mc.existsFamily() && customerNoPrint.getSelectedIndex() == 0) {
		    for (int j = 0; j < lineLen; j++) address += "  ";
		    address += "[" + mc.getCustomerNo().trim().replace("　", "") + "]";
		}
	    }
	    
	    return address;
	}
	
        private String getFormatAddress(String addr, final String LEFT_SPACE, int lineLen) {
            
            String result = "";

            // 半角に変換した住所を取得
            String addrHalf = tr.transliterate(addr).replace("　", " ");
            
            int addrLen = addr.length();

            if (addr.getBytes().length < (lineLen * 2)) {

                result += LEFT_SPACE + addr + "\n";

            } else if (addrHalf.getBytes().length < (lineLen * 2)) {
                
                result += LEFT_SPACE + addrHalf + "\n";

            } else {

                result += LEFT_SPACE + addr.substring(0, lineLen) + "\n";

                addr = addr.substring(lineLen);
                addrLen = addr.length();

                if (addrLen < lineLen) {
                    result += LEFT_SPACE + addr + "\n";
                } else {
                    result += LEFT_SPACE + addr.substring(0, lineLen) + "\n";
                    result += LEFT_SPACE + addr.substring(lineLen) + "\n";
                }
            }
            
            return result;
        }
        
	public void doPreview()
	{
	    if (!this.checkInput()) return;

	    previewPanel.removeAll();
	    previewPanel.setLayout(new GridLayout(YCount, XCount, XSpace.intValue(), YSpace.intValue()));

	    // 出力対象顧客リスト取得
	    ArrayList<MstCustomer> list = new ArrayList<MstCustomer>();
	    for (int i = 0; i < cusArray.size(); i++) {
		if(((JCheckBox)customersTable.getValueAt(i, 0)).isSelected()){
		    list.add(cusArray.get(i));
		    if (list.size() >= (XCount * YCount)) break;
		}
	    }

	    // 開始位置取得
	    int startPos = StartCount.intValue();

	    // 出力イメージ表示
	    for (int i = 0; i < (XCount * YCount); i++) {

		String address = "";

		if (startPos == 1 && list.size() > 0) {
		    address = getAddress((MstCustomer)list.get(0));
		    list.remove(0);
		} else {
		    startPos--;
		}

		JTextPane tp = new JTextPane();
		tp.setEditable(false);
		tp.setFocusable(false);
		tp.setAlignmentX(JTextPane.CENTER_ALIGNMENT);
		tp.setAlignmentY(JTextPane.CENTER_ALIGNMENT);
		tp.setText(address);
		tp.setBorder(BorderFactory.createLineBorder(Color.blue));
		previewPanel.add(tp);
	    }

	    previewPanel.updateUI();
	}
    
	public void doPrint(ArrayList<MstCustomer> list)
	{
	    printPanel.removeAll();
	    printPanel.setLayout(new GridLayout(YCount, XCount, XSpace.intValue(), YSpace.intValue()));

	    // 出力イメージ表示
	    for (int i = 0; i < (XCount * YCount); i++) {

		String address = "";

		if (list.size() > 0) {
		    address = getAddress((MstCustomer)list.get(0));
		    list.remove(0);
		}

		JTextPane tp = new JTextPane();
		tp.setEditable(false);
		tp.setFocusable(false);
		tp.setAlignmentX(JTextPane.CENTER_ALIGNMENT);
		tp.setAlignmentY(JTextPane.CENTER_ALIGNMENT);
		tp.setText(address);
		printPanel.add(tp);
	    }

	    printPanel.updateUI();
	}
	
	public int print(Graphics g, PageFormat pf, int pageIndex)
	{
	    if (pageIndex == 0) {

		Graphics2D g2D = (Graphics2D)g;

		g2D.translate(LeftMargin, TopMargin);

		for (int i = 0; i < YCount; i++) {

		    for (int j = 0; j < XCount; j++) {

			printPanel.getComponent(i * XCount + j).setSize(labelWidth.intValue(), labelHeight.intValue());
			printPanel.getComponent(i * XCount + j).print(g2D);
			g2D.translate(labelWidth + XSpace, 0);
		    }

		    g2D.translate((labelWidth + XSpace) * XCount * -1, labelHeight + YSpace);
		}

		return Printable.PAGE_EXISTS;

	    } else {

		return Printable.NO_SUCH_PAGE;
	    }
	}
	
	
	/**
	 * 宛名ラベル印刷画面用FocusTraversalPolicy
	 */
	private class PrintLabelFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(labelMaker))
			{
				return labelName;
			}
			else if (aComponent.equals(labelName))
			{
				return startLocation;
			}
			else if (aComponent.equals(startLocation))
			{
				return customerNoPrint;
			}
			else if (aComponent.equals(customerNoPrint))
			{
				return labelMaker;
			}
			
			return labelMaker;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(labelMaker))
			{
				return customerNoPrint;
			}
			else if (aComponent.equals(labelName))
			{
				return labelMaker;
			}
			else if (aComponent.equals(startLocation))
			{
				return labelName;
			}
			else if (aComponent.equals(customerNoPrint))
			{
				return startLocation;
			}
			
			return labelMaker;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return labelMaker;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return startLocation;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return labelMaker;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return labelMaker;
		}
	}
        
        private void registDmHistory() {

            ArrayList<MstCustomer> targetList = new ArrayList<MstCustomer>();
            for (int i = 0; i < cusArray.size(); i++) {
                if(((JCheckBox)customersTable.getValueAt(i, 0)).isSelected()){
                    targetList.add(cusArray.get(i));
                }
            }

            if (targetList.size() == 0) {
                MessageDialog.showMessageDialog(this, "登録対象の顧客を選択してください。", this.getTitle(), JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            DmHistory dh = new DmHistory(this, targetList, dmTitle.getText(), DmHistory.DM_LABEL);

            if (!dh.checkInput()) {
                dmTitle.requestFocusInWindow();
                return;
            }

            if (!dh.showRegistDialog()) {
                dmTitle.requestFocusInWindow();
                return;
            }

            if (targetList.size() > 0) {

                dh.regist();

            } else {

                MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(1112),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            }

        }
        
}
