/*
 * GraphPanel.java
 *
 * Created on 2007/08/27, 11:08
 */

package com.geobeck.sosia.pos.report.graph;

import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.util.*;

import com.geobeck.util.*;

/**
 *
 * @author  katagiri
 */
public class GraphPanel extends javax.swing.JPanel
{
	public static final int		GRAPH_TYPE_LINE		=	0;
	public static final int		GRAPH_TYPE_BAR		=	1;
	
	private	String				title				=	"";
	private	String				horisontalScale		=	"";
	private	String				verticalScale		=	"";
	private	long				min					=	0l;
	private	long				max					=	0l;
	private	long				separatorTerm		=	0l;
	private	boolean				autoSetVerticalInfo	=	true;
	private	int					horizontalDataNum	=	0;
	private	ArrayList<String>	horisontalTitle		=	null;
	private	int					graphType			=	GRAPH_TYPE_LINE;
	
	private	int					topSpace			=	0;
	private	int					leftSpace			=	0;
	private	int					bottomSpace			=	0;
	private	int					rightSpace			=	0;
	
	private ArrayList<GraphDataList>	dataList	=	null;
	private ArrayList<GraphLine>		lineList	=	null;
	
	private	int					fontHeight			=	0;
	private	int					xTerm				=	0;
	
	private	Stroke				defaultStroke		=	null;
	
	/** Creates new form GraphPanel */
	public GraphPanel()
	{
		defaultStroke	=	new BasicStroke();
		setHorisontalTitle(new ArrayList<String>());
		setDataList(new ArrayList<GraphDataList>());
		setLineList(new ArrayList<GraphLine>());
		initComponents();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	

	public String getTitle()
	{
		return title;
	}

	public void setTitle(String title)
	{
		this.title = title;
	}

	public String getHorisontalScale()
	{
		return horisontalScale;
	}

	public void setHorisontalScale(String horisontalScale)
	{
		this.horisontalScale = horisontalScale;
	}

	public String getVerticalScale()
	{
		return verticalScale;
	}

	public void setVerticalScale(String verticalScale)
	{
		this.verticalScale = verticalScale;
	}

	public long getMin()
	{
		return min;
	}

	public void setMin(long min)
	{
		this.min = min;
	}

	public long getMax()
	{
		return max;
	}

	public void setMax(long max)
	{
		this.max = max;
	}

	public long getSeparatorTerm()
	{
		return separatorTerm;
	}

	public void setSeparatorTerm(long separatorTerm)
	{
		this.separatorTerm = separatorTerm;
	}

	public boolean isAutoSetVerticalInfo()
	{
		return autoSetVerticalInfo;
	}

	public void setAutoSetVerticalInfo(boolean autoSetVerticalInfo)
	{
		this.autoSetVerticalInfo = autoSetVerticalInfo;
	}

	public int getHorizontalDataNum()
	{
		return horizontalDataNum;
	}

	public void setHorizontalDataNum(int horizontalDataNum)
	{
		this.horizontalDataNum = horizontalDataNum;
	}

	public ArrayList<String> getHorisontalTitle()
	{
		return horisontalTitle;
	}

	public void setHorisontalTitle(ArrayList<String> horisontalTitle)
	{
		this.horisontalTitle = horisontalTitle;
	}

	public void addHorisontalTitle(String ht)
	{
		horisontalTitle.add(ht);
	}

	public int getGraphType()
	{
		return graphType;
	}

	public void setGraphType(int graphType)
	{
		this.graphType = graphType;
	}

	public int getTopSpace()
	{
		return topSpace;
	}

	public void setTopSpace(int topSpace)
	{
		this.topSpace = topSpace;
	}

	public int getLeftSpace()
	{
		return leftSpace;
	}

	public void setLeftSpace(int leftSpace)
	{
		this.leftSpace = leftSpace;
	}

	public int getBottomSpace()
	{
		return bottomSpace;
	}

	public void setBottomSpace(int bottomSpace)
	{
		this.bottomSpace = bottomSpace;
	}

	public int getRightSpace()
	{
		return rightSpace;
	}

	public void setRightSpace(int rightSpace)
	{
		this.rightSpace = rightSpace;
	}
	
	public void setSpace(int top, int left, int bottom, int right)
	{
		this.setTopSpace(top);
		this.setLeftSpace(left);
		this.setBottomSpace(bottom);
		this.setRightSpace(right);
	}

	public ArrayList<GraphDataList> getDataList()
	{
		return dataList;
	}

	public void setDataList(ArrayList<GraphDataList> dataList)
	{
		this.dataList = dataList;
	}

	public ArrayList<GraphLine> getLineList()
	{
		return lineList;
	}

	public void setLineList(ArrayList<GraphLine> lineList)
	{
		this.lineList = lineList;
	}
	
	public void addData(GraphDataList data)
	{
		dataList.add(data);
	}
	
	public void addLine(GraphLine data)
	{
		lineList.add(data);
	}
	
	public void clearData()
	{
		horisontalTitle.clear();
		dataList.clear();
		lineList.clear();
	}
	
	public void paint(Graphics g)
	{
		fontHeight	=	StringUtil.getStringHeight(g.getFont());
		xTerm		=	(this.getWidth() - this.getLeftSpace() - this.getRightSpace()) /
								(this.getHorizontalDataNum() + 1);
		if(this.isAutoSetVerticalInfo())
		{
			this.setVerticalInfo();
		}
		
		this.drawBackground(g);
		this.drawLine(g);
		this.drawGraph(g);
	}
	
	public void setVerticalInfo()
	{
		Integer		maxValue	=	this.getMaxValue().intValue();
		
		int			column	=	maxValue.toString().length();
		long		base	=	1;
		
		for(int i = 1; i < column; i ++)
		{
			base	*= 10;
		}
		
		long		unit	=	1;
		
		if(maxValue.doubleValue() / base == 1d)
		{
			unit	=	new Double(Math.ceil(base / 10.0)).longValue();
			
			if(unit == 0)
			{
				unit	=	1;
			}
		}
		else if(maxValue / (5.0 * base) <= 1)
		{
			unit	=	new Double(Math.ceil(5.0 * base / 10.0)).longValue();
		}
		else
		{
			unit	=	base;
		}
		
		this.setMax(new Double(Math.ceil(maxValue * 1.2)).longValue());
		this.setSeparatorTerm(unit);
	}
	
	private Long getMaxValue()
	{
		Long	maxValue	=	this.getMin();
		
		for(GraphDataList gdl : dataList)
		{
			if(maxValue < gdl.getMaxValue())
			{
				maxValue	=	gdl.getMaxValue();
			}
		}
		
		return	maxValue;
	}
	
	private int getY(Long value)
	{
		if(this.getMax() - this.getMin() <= 0)
		{
			return	this.getHeight() - this.getBottomSpace();
		}
		
		Double	temp	=	value.doubleValue() / this.getMax() - this.getMin();
		
		temp	*=	this.getHeight() - this.getBottomSpace() - this.getTopSpace();
		
		temp	=	this.getHeight() - this.getBottomSpace() - temp;
		
		return	temp.intValue();
	}
	
	private void drawBackground(Graphics g)
	{
		g.setColor(Color.white);
		g.fillRect(0, 0, this.getWidth(), this.getHeight());
		
		g.setColor(Color.black);
		g.drawLine(leftSpace, topSpace, leftSpace, this.getHeight() - bottomSpace);
		g.drawLine(leftSpace, this.getHeight() - bottomSpace,
				this.getWidth() - rightSpace, this.getHeight() - bottomSpace);
		
		g.drawString(Long.toString(min),
				leftSpace - StringUtil.getStringWidth(g.getFont(), Long.toString(min)),
				this.getHeight() - bottomSpace + fontHeight / 2 - 1);

		for(long i = 1; i * separatorTerm < max; i ++)
		{
			int		y	=	this.getY(i * separatorTerm);
			String	valueString	=	Long.toString(min + i * separatorTerm);
			g.drawLine(leftSpace, y, leftSpace + 4, y);
			g.drawString(valueString,
					leftSpace - StringUtil.getStringWidth(g.getFont(), valueString) - 2,
					y + fontHeight / 2 - 1);
		}
		
		g.drawString(verticalScale,
				leftSpace - StringUtil.getStringWidth(g.getFont(), verticalScale),
				topSpace - fontHeight);
		
		for(int i = 0; i < horisontalTitle.size(); i ++)
		{
			int		x	=	this.getLeftSpace() + xTerm * (i + 1);
			int		y	=	this.getHeight() - bottomSpace + fontHeight + 5;
			
			x	-=	StringUtil.getStringWidth(g.getFont(), horisontalTitle.get(i)) / 2;
			
			g.drawString(horisontalTitle.get(i), x, y);
		}
		
		g.drawString(horisontalScale,
				this.getWidth() - rightSpace,
				this.getHeight() - bottomSpace);
	}
	
	private void drawLine(Graphics g)
	{
		for(GraphLine gl : this.getLineList())
		{
			g.setColor(gl.getColor());
			
			int		y	=	this.getY(gl.getValue());
			
			if(gl.isSetStroke())
			{
				Graphics2D	g2d		=	(Graphics2D)g;
				g2d.setStroke(gl.getStroke());
				Line2D		line	=	new Line2D.Double(
						this.getLeftSpace(), y, this.getWidth() - this.getRightSpace(), y);
				g2d.draw(line);
				
				g2d.setStroke(defaultStroke);
			}
			else
			{
				g.drawLine(this.getLeftSpace(), y, this.getWidth() - this.getRightSpace(), y);
			}
		}
	}
	
	private void drawGraph(Graphics g)
	{
		for(GraphDataList gdl : this.getDataList())
		{
			int		pointNum	=	(this.getHorizontalDataNum() < gdl.size() ?
									this.getHorizontalDataNum() : gdl.size());
			
			if(pointNum == 0)
			{
				continue;
			}
			
			g.setColor(gdl.getColor());
			
			int[]	xPoints		=	new int[pointNum];
			int[]	yPoints		=	new int[pointNum];
			
			for(int i = 0; i < pointNum; i ++)
			{
				int		x	=	this.getLeftSpace() + xTerm * (i + 1);
				int		y	=	this.getY(gdl.get(i));
				
				xPoints[i]	=	x;
				yPoints[i]	=	y;
				
//				gdl.drawPoint(g, x, y);
			}
			
			g.drawPolyline(xPoints, yPoints, pointNum);
			
			for(int i = 0; i < pointNum; i ++)
			{
				gdl.drawPoint(g, xPoints[i], yPoints[i]);
			}
		}
	}
}
