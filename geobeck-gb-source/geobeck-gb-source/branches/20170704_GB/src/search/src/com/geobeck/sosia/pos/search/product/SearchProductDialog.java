/*
 * SearchProductDialog.java
 *
 * Created on 2006/04/28, 11:10
 */

package com.geobeck.sosia.pos.search.product;

import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.master.*;
import com.geobeck.sosia.pos.master.product.*;
import com.geobeck.sosia.pos.search.*;
import com.geobeck.sosia.pos.swing.*;

/**
 * 商品検索画面
 * @author katagiri
 */
public class SearchProductDialog extends javax.swing.JDialog
{
	
	/**
	 * コンストラクタ
	 * @param parent 
	 * @param modal 
	 */
	public SearchProductDialog(java.awt.Frame parent, boolean modal)
	{
		super(parent, modal);
		this.init();
		initComponents();
		addMouseCursorChange();
		SwingUtil.moveCenter(this);
		this.changeProductClass();
	}
	/**
	 * コンストラクタ
	 * @param parent 
	 * @param modal 
	 */
	public SearchProductDialog(java.awt.Dialog parent, boolean modal)
	{
		super(parent, modal);
		this.init();
		initComponents();
		addMouseCursorChange();
		SwingUtil.moveCenter(this);
		this.changeProductClass();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        backPanel = new com.geobeck.swing.ImagePanel();
        selectButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        productClassLabel = new javax.swing.JLabel();
        productClassScrollPane = new javax.swing.JScrollPane();
        productClass = new JList(productClassVector);
        productScrollPane = new javax.swing.JScrollPane();
        product = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("\u5546\u54c1\u9078\u629e");
        backPanel.setImage(SystemInfo.getImageIcon("/contents_background.jpg"));
        backPanel.setRepeat(true);
        selectButton.setIcon(SystemInfo.getImageIcon("/button/select/select_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setContentAreaFilled(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                selectButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        backButton.setBorderPainted(false);
        backButton.setContentAreaFilled(false);
        backButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        backButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                backButtonActionPerformed(evt);
            }
        });

        productClassLabel.setText("\u5206\u985e");

        productClassScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        productClass.setSelectionBackground(new java.awt.Color(220, 220, 220));
        productClass.setSelectionForeground(new java.awt.Color(0, 0, 0));
        productClass.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                productClassValueChanged(evt);
            }
        });

        productClassScrollPane.setViewportView(productClass);

        productScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        product.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null}
            },
            new String []
            {
                "商品名", "売値(税込)"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        product.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        product.setSelectionBackground(new java.awt.Color(220, 220, 220));
        product.setSelectionForeground(new java.awt.Color(0, 0, 0));
        product.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        product.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(product, SystemInfo.getTableHeaderRenderer());
        product.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(product);
        product.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                productMouseClicked(evt);
            }
        });

        productScrollPane.setViewportView(product);

        org.jdesktop.layout.GroupLayout backPanelLayout = new org.jdesktop.layout.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, backPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(productClassScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(productScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE))
                    .add(backPanelLayout.createSequentialGroup()
                        .add(57, 57, 57)
                        .add(productClassLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 294, Short.MAX_VALUE)
                        .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(productClassLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(productClassScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .add(productScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void productMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_productMouseClicked
	{//GEN-HEADEREND:event_productMouseClicked
		if(evt.getClickCount() == 2)
		{
			if(0 <= product.getSelectedRow())
			{
				this.setSelectedProduct();
				this.setVisible(false);
			}
		}
	}//GEN-LAST:event_productMouseClicked

	/**
	 * 戻るボタンが押されたときの処理
	 * @param evt 
	 */
	private void backButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButtonActionPerformed
	{//GEN-HEADEREND:event_backButtonActionPerformed
		this.setVisible(false);
	}//GEN-LAST:event_backButtonActionPerformed

	/**
	 * 選択ボタンが押されたときの処理
	 * @param evt 
	 */
	private void selectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectButtonActionPerformed
	{//GEN-HEADEREND:event_selectButtonActionPerformed
		this.setSelectedProduct();
		
		this.setVisible(false);
	}//GEN-LAST:event_selectButtonActionPerformed

	/**
	 * 商品分類が変更されたときの処理
	 * @param evt 
	 */
	private void productClassValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_productClassValueChanged
	{//GEN-HEADEREND:event_productClassValueChanged
		this.changeProductClass();
	}//GEN-LAST:event_productClassValueChanged
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private com.geobeck.swing.ImagePanel backPanel;
    private javax.swing.JTable product;
    private javax.swing.JList productClass;
    private javax.swing.JLabel productClassLabel;
    private javax.swing.JScrollPane productClassScrollPane;
    private javax.swing.JScrollPane productScrollPane;
    private javax.swing.JButton selectButton;
    // End of variables declaration//GEN-END:variables
	
	private	Vector<MstProductClass>	productClassVector	=	new Vector<MstProductClass>();
	
	private ArrayList<MstProduct>	productList	=	new ArrayList<MstProduct>();
	
	private MstProduct	selectedProduct	=	null;
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(selectButton);
		SystemInfo.addMouseCursorChange(backButton);
	}
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
		this.loadProductClasses();
	}
	
	/**
	 * 選択された商品をセットする。
	 */
	private void setSelectedProduct()
	{
		int		index	=	product.getSelectedRow();
		
		if(0 <= index)
		{
			selectedProduct	=	productList.get(index);
			selectedProduct.setProductClass(
				productClassVector.get(productClass.getSelectedIndex()));
		}
	}
	
	/**
	 * 選択された商品を取得する。
	 * @return 選択された商品
	 */
	public MstProduct getSelectedProduct()
	{
		return	selectedProduct;
	}
	
	/**
	 * 商品区分マスタをデータベースから読み込む。
	 * @return true − 成功
	 */
	private boolean loadProductClasses()
	{
		//商品区分マスタデータリストをクリア
		productClassVector.clear();
		
		//コネクションを取得
		ConnectionWrapper con	=	SystemInfo.getConnection();
		
		try
		{
			//商品区分マスタからデータを取得
			ResultSetWrapper	rs	=	con.executeQuery(
					MstProductClass.getSelectAllSQL());
			
			while(rs.next())
			{
				MstProductClass	mj	=	new MstProductClass();
				//ResultSetからデータを取得
				mj.setData(rs);
				//商品区分マスタデータリストに追加
				productClassVector.add(mj);
			}
			
			rs.close();
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	true;
	}
	
	
	/**
	 * 商品区分が変更されたときの処理を行う。
	 */
	private void changeProductClass()
	{
		this.loadProducts();
		this.showProduct();
	}
	
	/**
	 * 商品マスタをデータベースから読み込む。
	 * @return true − 成功
	 */
	private boolean loadProducts()
	{
		//商品マスタデータリストをクリア
		productList.clear();
		
		//コネクションを取得
		ConnectionWrapper con	=	SystemInfo.getConnection();
		
		try
		{
			//商品マスタからデータを取得
			ResultSetWrapper	rs	=	con.executeQuery(
					MstProduct.getSelectAllSQL(this.getSelectedProductClassID()));
			
			while(rs.next())
			{
				MstProduct	mj	=	new MstProduct();
				//ResultSetからデータを取得
				mj.setData(rs);
				//商品マスタデータリストに追加
				productList.add(mj);
			}
			
			rs.close();
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	true;
	}
	
	/**
	 * 選択された商品区分のＩＤを取得する。
	 * @return 選択された商品区分のＩＤ
	 */
	private Integer getSelectedProductClassID()
	{
		if(productClass.getSelectedIndex() < 0)	return	null;
		
		MstProductClass		pc	=	(MstProductClass)productClass.getSelectedValue();
		
		if(pc == null)	return	null;
		else	return	pc.getProductClassID();
	}
	
	
	/**
	 * テーブルに商品マスタデータを表示する。
	 */
	private void showProduct()
	{
		DefaultTableModel	model	=	(DefaultTableModel)product.getModel();
		
		//全行削除
		model.setRowCount(0);
		product.removeAll();
		
		for(MstProduct mj : productList)
		{
			Object[]	rowData	=	{	//mj.getProductID(),
										mj.getProductName(),
										mj.getPrice()	};
			model.addRow(rowData);
		}
	}
	
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		product.getColumnModel().getColumn(0).setPreferredWidth(500);
		product.getColumnModel().getColumn(1).setPreferredWidth(100);
	}
}
