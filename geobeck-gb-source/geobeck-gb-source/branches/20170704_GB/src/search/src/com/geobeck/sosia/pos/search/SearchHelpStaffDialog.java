/*
 * SearchHelpStaffDialog.java
 *
 * Created on 2009/12/07, 09:53
 */

package com.geobeck.sosia.pos.search;

import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.master.company.*;

/**
 * ヘルプスタッフ検索画面
 * @author geobeck
 */
public class SearchHelpStaffDialog extends javax.swing.JDialog
{
	/**
	 * フリガナ（姓）
	 */
	private	String searchStaffKana1 = "";
	/**
	 * フリガナ（名）
	 */
	private	String searchStaffKana2 = "";
	/**
	 * スタッフ名（姓）
	 */
	private	String searchStaffName1 = "";
	/**
	 * スタッフ名（名）
	 */
	private	String searchStaffName2 = "";
	/**
	 * スタッフNo
	 */
	private	String searchStaffNo = "";

        private MstShop targetShop = null;

	/**
	 * コンストラクタ
	 * @param parent 
	 * @param modal 
	 */
	public SearchHelpStaffDialog(java.awt.Frame parent, MstShop targetShop, boolean modal)
	{       
		super(parent, modal);
		initComponents();
		addMouseCursorChange(); 

                this.targetShop = targetShop;
                
                shop.addItem(new MstShop());
                for (int i = 0; i < SystemInfo.getGroup().getShops().size(); i++) {
                    MstShop ms = SystemInfo.getGroup().getShops().get(i);
                    // 自店舗以外をセット
                    if (ms.equals(this.targetShop)) continue;
                    shop.addItem(ms);
                }
                
                this.setListener();
		SwingUtil.moveCenter(this);
		this.clear();
	}
	
	/**
	 * コンストラクタ
	 * @param parent 
	 * @param modal 
	 */
	public SearchHelpStaffDialog(java.awt.Dialog parent, boolean modal)
	{
		super(parent, modal);
		initComponents();
		addMouseCursorChange();
		this.setListener();
		SwingUtil.moveCenter(this);
		this.clear();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        backPanel = new com.geobeck.swing.ImagePanel();
        searchResultScrollPane = new javax.swing.JScrollPane();
        searchResult = new com.geobeck.swing.JTableEx();
        staffKanaLabel = new javax.swing.JLabel();
        staffNameLabel = new javax.swing.JLabel();
        selectButton = new javax.swing.JButton();
        staffName1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)staffName1.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        staffKana1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)staffKana1.getDocument()).setDocumentFilter(new CustomFilter(20));
        staffKana2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)staffKana2.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        staffName2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)staffName2.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        searchButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        staffNo1 = new com.geobeck.swing.JTextFieldEx();
        ((PlainDocument)staffNo1.getDocument()).setDocumentFilter(new CustomFilter(10));
        staffNo2 = new com.geobeck.swing.JTextFieldEx();
        ((PlainDocument)staffNo2.getDocument()).setDocumentFilter(new CustomFilter(10));
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();

        setTitle("\u30d8\u30eb\u30d7\u30b9\u30bf\u30c3\u30d5\u691c\u7d22");
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        setName("searchStaffFrame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        backPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        backPanel.setImage(SystemInfo.getImageIcon("/contents_background.jpg"));
        backPanel.setRepeat(true);
        searchResultScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        searchResultScrollPane.setFocusable(false);
        searchResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "スタッフ区分", "スタッフNo.", "氏名", "在籍店舗"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        searchResult.setFocusTraversalPolicy(getFocusTraversalPolicy());
        searchResult.setSelectionBackground(new java.awt.Color(255, 210, 142));
        searchResult.setSelectionForeground(new java.awt.Color(0, 0, 0));
        searchResult.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        searchResult.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(searchResult, SystemInfo.getTableHeaderRenderer());
        searchResult.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        searchResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchResultMouseClicked(evt);
            }
        });

        searchResultScrollPane.setViewportView(searchResult);

        staffKanaLabel.setText("\u30b9\u30bf\u30c3\u30d5No.");

        staffNameLabel.setText("\u6c0f\u3000\u540d");

        selectButton.setIcon(SystemInfo.getImageIcon("/button/select/select_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setFocusTraversalPolicy(getFocusTraversalPolicy());
        selectButton.setFocusable(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectStaff(evt);
            }
        });

        staffName1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffName1.setColumns(20);
        staffName1.setFocusTraversalPolicy(getFocusTraversalPolicy());
        staffName1.setInputKanji(true);

        staffKana1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffKana1.setColumns(20);
        staffKana1.setFocusCycleRoot(true);
        staffKana1.setFocusTraversalPolicy(getFocusTraversalPolicy());
        staffKana1.setInputKanji(true);

        staffKana2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffKana2.setColumns(20);
        staffKana2.setFocusTraversalPolicy(getFocusTraversalPolicy());
        staffKana2.setInputKanji(true);

        staffName2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffName2.setColumns(20);
        staffName2.setFocusTraversalPolicy(getFocusTraversalPolicy());
        staffName2.setInputKanji(true);

        searchButton.setIcon(SystemInfo.getImageIcon("/button/search/search_off.jpg"));
        searchButton.setBorderPainted(false);
        searchButton.setFocusTraversalPolicy(getFocusTraversalPolicy());
        searchButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_on.jpg"));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        backButton.setBorderPainted(false);
        backButton.setFocusTraversalPolicy(getFocusTraversalPolicy());
        backButton.setFocusable(false);
        backButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backPrevious(evt);
            }
        });

        jLabel1.setText("\u5728\u7c4d\u5e97\u8217");

        jLabel2.setText("\u30d5\u30ea\u30ac\u30ca");

        jLabel3.setText("\uff5e");

        staffNo1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffNo1.setColumns(15);
        staffNo1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                staffNo1FocusLost(evt);
            }
        });

        staffNo2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffNo2.setColumns(15);
        staffNo2.setFocusTraversalPolicyProvider(isFocusTraversalPolicySet());

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        org.jdesktop.layout.GroupLayout backPanelLayout = new org.jdesktop.layout.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(backPanelLayout.createSequentialGroup()
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(staffNameLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(18, 18, 18))
                    .add(backPanelLayout.createSequentialGroup()
                        .add(staffKanaLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(staffName1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(staffKana1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(staffNo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(14, 14, 14)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(backPanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 289, Short.MAX_VALUE)
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(backPanelLayout.createSequentialGroup()
                        .add(13, 13, 13)
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(staffKana2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(staffName2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(staffNo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 80, Short.MAX_VALUE)
                        .add(searchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .add(searchResultScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        );

        backPanelLayout.linkSize(new java.awt.Component[] {shop, staffKana1, staffKana2, staffName1, staffName2, staffNo1, staffNo2}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(backPanelLayout.createSequentialGroup()
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE, false)
                            .add(staffKana2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(staffKana1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(staffName2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(staffName1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(staffNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(staffNo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(staffNo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3)
                            .add(staffKanaLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(backPanelLayout.createSequentialGroup()
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(60, 60, 60)
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(searchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(searchResultScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );

        backPanelLayout.linkSize(new java.awt.Component[] {shop, staffKana1, staffKana2, staffName1, staffName2, staffNo1, staffNo2}, org.jdesktop.layout.GroupLayout.VERTICAL);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.doSearchStaff();
    }//GEN-LAST:event_formWindowOpened

    private void staffNo1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_staffNo1FocusLost
        
    }//GEN-LAST:event_staffNo1FocusLost

	private void searchResultMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_searchResultMouseClicked
	{//GEN-HEADEREND:event_searchResultMouseClicked
            if (evt.getClickCount() == 2) {
                if (0 <= searchResult.getSelectedRow()) {
                    this.setSelectedStaff();
                    this.setVisible(false);
                }
            }
	}//GEN-LAST:event_searchResultMouseClicked

	/**
	 * 検索ボタンが押されたときの処理
	 */
	private void searchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchButtonActionPerformed
	{//GEN-HEADEREND:event_searchButtonActionPerformed
            searchButton.setCursor(null);            
            this.searchStaff();
	}//GEN-LAST:event_searchButtonActionPerformed

	/**
	 * 選択ボタンが押されたときの処理
	 */
        private void selectStaff(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectStaff
		this.setSelectedStaff();
		this.setVisible(false);
        }//GEN-LAST:event_selectStaff

	/**
	 * 戻るボタンが押されたときの処理
	 */
	private void backPrevious(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backPrevious
	{//GEN-HEADEREND:event_backPrevious
		this.setVisible(false);
	}//GEN-LAST:event_backPrevious
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private com.geobeck.swing.ImagePanel backPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton searchButton;
    private com.geobeck.swing.JTableEx searchResult;
    private javax.swing.JScrollPane searchResultScrollPane;
    private javax.swing.JButton selectButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private com.geobeck.swing.JFormattedTextFieldEx staffKana1;
    private com.geobeck.swing.JFormattedTextFieldEx staffKana2;
    private javax.swing.JLabel staffKanaLabel;
    private com.geobeck.swing.JFormattedTextFieldEx staffName1;
    private com.geobeck.swing.JFormattedTextFieldEx staffName2;
    private javax.swing.JLabel staffNameLabel;
    private com.geobeck.swing.JTextFieldEx staffNo1;
    private com.geobeck.swing.JTextFieldEx staffNo2;
    // End of variables declaration//GEN-END:variables
	
	private MstStaff selectedStaff = null; 
	
	private ArrayList<MstStaff> staffs = new ArrayList<MstStaff>();
	
	private	MoveNextField mnf = new MoveNextField();
        
        
	/**
	 * スタッフ検索画面FocusTraversalPolicy
	 */
	private	MstStaffFocusTraversalPolicy	ftp	=
			new MstStaffFocusTraversalPolicy();
	
	/**
	 * スタッフ検索画面FocusTraversalPolicyを取得する。
	 * @return スタッフ検索画面FocusTraversalPolicy
	 */
	public MstStaffFocusTraversalPolicy	getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{  
		SystemInfo.addMouseCursorChange(searchButton);
		SystemInfo.addMouseCursorChange(selectButton);
		SystemInfo.addMouseCursorChange(backButton);
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
		staffKana1.addKeyListener(SystemInfo.getMoveNextField());
		staffKana1.addFocusListener(SystemInfo.getSelectText());
		staffKana2.addKeyListener(SystemInfo.getMoveNextField());
		staffKana2.addFocusListener(SystemInfo.getSelectText());
		staffName1.addKeyListener(SystemInfo.getMoveNextField());
		staffName1.addFocusListener(SystemInfo.getSelectText());
		staffName2.addKeyListener(SystemInfo.getMoveNextField());
		staffName2.addFocusListener(SystemInfo.getSelectText());
                staffNo1.addKeyListener(SystemInfo.getMoveNextField());
                staffNo1.addFocusListener(SystemInfo.getSelectText());
                staffNo2.addKeyListener(SystemInfo.getMoveNextField());
             	staffNo2.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * 入力項目をクリアする。
	 */
	private void clear()
	{
	    staffName1.setText("");
	    staffName2.setText("");
	    staffKana1.setText("");
	    staffKana2.setText("");
            
	    if (searchResult.getCellEditor() != null) {
		searchResult.getCellEditor().stopCellEditing();
	    }

	    SwingUtil.clearTable(searchResult);

	    DefaultTableModel model = (DefaultTableModel)searchResult.getModel();
	}
	
	
	/**
	 * 検索ボタンを押したときの処理を行う。
	 */
	private void searchStaff()
	{
	    if (searchResult.getCellEditor() != null) {
		searchResult.getCellEditor().stopCellEditing();
	    }

	    //スタッフマスタデータリストをクリア
	    staffs.clear();
	    
	    SwingUtil.clearTable(searchResult);
                
	    DefaultTableModel model = (DefaultTableModel)searchResult.getModel();
	    
	    //コネクションを取得
	    ConnectionWrapper con = SystemInfo.getConnection();

	    try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                
		//スタッフマスタからデータを取得
		ResultSetWrapper rs = con.executeQuery(this.getSearchSQL());

		while (rs.next()) {

		    MstStaff ms = new MstStaff();
		    //ResultSetからデータを取得
		    ms.setData(rs);
		    staffs.add(ms);
			
		    Object[] rowData = { rs.getString("staff_class_name"),
					 ms.getStaffNo(),
					 ms.getFullStaffName(),
					 rs.getString("shop_name") };
		    model.addRow(rowData);
		}

		rs.close();

	    } catch(SQLException e) {
                
		SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                
            } finally {
                
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
	    }

	}
	
	
	/**
	 * スタッフ検索用ＳＱＬ文を取得する。
	 * @return スタッフ検索用ＳＱＬ文
	 */
	private String getSearchSQL()
	{               
            StringBuilder whereSql = new StringBuilder(1000);
	    whereSql.append(" where");
	    whereSql.append("         ms.delete_date is null");
	    whereSql.append("     and ms.shop_id <> " + SQLUtil.convertForSQL(this.targetShop.getShopID()));

            if (shop.getSelectedIndex() > 0) {
                whereSql.append(" and ms.shop_id = " + SQLUtil.convertForSQL(((MstShop)shop.getSelectedItem()).getShopID()));
            }

	    if (!staffNo1.getText().equals("")) {
		whereSql.append(" and ms.staff_no >= '" + staffNo1.getText() + "'");
	    }
	    if (!staffNo2.getText().equals("")) {
		whereSql.append(" and ms.staff_no <= '" + staffNo2.getText() + "'");
	    }
	    
            if (!staffName1.getText().equals("")) {
		whereSql.append(" and ms.staff_name1 like '" + staffName1.getText() + "%'");
	    }
	    if (!staffName2.getText().equals("")) {
		whereSql.append(" and ms.staff_name2 like '" + staffName2.getText() + "%'");
	    }
	    
	    if (!staffKana1.getText().equals("")) {
		whereSql.append(" and ms.staff_kana1 like '" + staffKana1.getText() + "%'");
	    }
	    if (!staffKana2.getText().equals("")) {
		whereSql.append(" and ms.staff_kana2 like '" + staffKana2.getText() + "%'");
	    }
	    
	    StringBuilder sql = new StringBuilder(1000);
            sql.append(" select");
            sql.append("      ms.*");
            sql.append("     ,msh.shop_name");
            sql.append("     ,msc.staff_class_name");
            sql.append(" from");
            sql.append("     mst_staff ms");
            sql.append("         left join mst_shop msh");
            sql.append("                on msh.shop_id = ms.shop_id");
            sql.append("               and msh.delete_date is null");
            sql.append("         left join mst_staff_class msc");
            sql.append("                on msc.staff_class_id = ms.staff_class_id");
            sql.append("               and msc.delete_date is null");

	    sql.append(whereSql.toString());

            sql.append(" order by");
            sql.append("      ms.shop_id");
            sql.append("     ,ms.display_seq");
            sql.append("     ,lpad(ms.staff_no, 10, '0')");
            sql.append("     ,ms.staff_id");

	    return sql.toString();
        }
	
	/**
	 * 選択されたスタッフを取得する。
	 * @return 選択されたスタッフ
	 */
	public MstStaff getSelectedStaff()
	{
		return	selectedStaff;
	}
	
	/**
	 * 選択されたスタッフをセットする。
	 */
	private void setSelectedStaff()
	{
	    if (0 <= searchResult.getSelectedRow()) {
		selectedStaff = staffs.get(searchResult.getSelectedRow());
	    }
	}
	
	/**
	 * スタッフ検索画面FocusTraversalPolicy
	 */
	private class MstStaffFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * 
		 * @param focustomerCycleRoot 
		 * @param aComponent 
		 * @return 
		 */
		public Component getComponentAfter(Container focustomerCycleRoot,
										   Component aComponent)
		{
			if (aComponent.equals(staffKana1))
			{
				return staffKana2;
			}
			else if (aComponent.equals(staffKana2))
			{
				return staffName1;
			}
                        else if (aComponent.equals(staffName1))
			{
				return staffName2;
			}
			else if (aComponent.equals(staffName2))
			{
				return staffNo1;
			}
                        else if (aComponent.equals(staffNo1))
			{
                           	return staffNo2;
			}
                        
			return staffKana1;
		}

		/**
		 * 
		 * @param focustomerCycleRoot 
		 * @param aComponent 
		 * @return 
		 */
		public Component getComponentBefore(Container focustomerCycleRoot,
											Component aComponent)
		{

			if (aComponent.equals(staffNo2))
			{
				return staffNo1;
			}
 			else if (aComponent.equals(staffNo1))
			{
				return staffName2;
			}
			else if (aComponent.equals(staffName2))
			{
				return staffName1;
			}
                        else if (aComponent.equals(staffName1))
			{
				return staffKana2;
			}
			else if (aComponent.equals(staffKana2))
			{
				return staffKana1;
			}
			
			return staffKana1;
		}

		/**
		 * 
		 * @param focustomerCycleRoot 
		 * @return 
		 */
		public Component getDefaultComponent(Container focustomerCycleRoot)
		{
			return staffKana1;
		}

		/**
		 * 
		 * @param focustomerCycleRoot 
		 * @return 
		 */
		public Component getLastComponent(Container focustomerCycleRoot)
		{
			return searchResult;
		}

		/**
		 * 
		 * @param focustomerCycleRoot 
		 * @return 
		 */
		public Component getFirstComponent(Container focustomerCycleRoot)
		{
			return staffNo1;
		}
	}
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		searchResult.getColumnModel().getColumn(0).setPreferredWidth(140);
		searchResult.getColumnModel().getColumn(1).setPreferredWidth(80);
		searchResult.getColumnModel().getColumn(2).setPreferredWidth(140);
		searchResult.getColumnModel().getColumn(3).setPreferredWidth(140);
	}
	
        public void setSearchStaffNo(String searchStaffNo) {
            this.searchStaffNo = searchStaffNo;
        }

        public void setSearchStaffName1(String searchStaffName1) {
            this.searchStaffName1 = searchStaffName1;
        }

        public void setSearchStaffName2(String searchStaffName2) {
            this.searchStaffName2 = searchStaffName2;
        }

        public void setSearchStaffKana1(String searchStaffKana1) {
            this.searchStaffKana1 = searchStaffKana1;
        }

        public void setSearchStaffKana2(String searchStaffKana2) {
            this.searchStaffKana2 = searchStaffKana2;
        }

        private boolean existSearchCondition() {

            boolean result = false;

            result = result || this.searchStaffName1.length() > 0;
            result = result || this.searchStaffName2.length() > 0;
            result = result || this.searchStaffKana1.length() > 0;
            result = result || this.searchStaffKana2.length() > 0;
            result = result || this.searchStaffNo.length() > 0;

            return result;
        }

        private void setSearchCondition() {
            this.staffName1.setText(this.searchStaffName1);
            this.staffName2.setText(this.searchStaffName2);
            this.staffKana1.setText(this.searchStaffKana1);
            this.staffKana2.setText(this.searchStaffKana2);
            this.staffNo1.setText(this.searchStaffNo);
            this.staffNo2.setText(this.searchStaffNo);
        }

        public void doSearchStaff() {
            if (existSearchCondition()) {
                setSearchCondition();
                this.searchStaff();
            }
        }
        
	/**
	 * 指定したスタッフＩＤをスタッフ選択用JComboBoxで選択状態にする。
	 * @param staffCombo スタッフ選択用JComboBox
	 * @param staffID スタッフＩＤ
	 */
	private void setStaff(JComboBox staffCombo, Integer staffID) {
                
	    for (int i = 0; i < staffCombo.getItemCount(); i++) {

		 MstStaff ms  = (MstStaff)staffCombo.getItemAt(i);

		 //空白をセット
		if (ms.getStaffID() == null) {
		     
		   staffCombo.setSelectedIndex(0);
		   
		} else if ( ms.getStaffID().equals(staffID)) {
		     
		    staffCombo.setSelectedIndex(i);
		    return;
		}
	    }
	}

	private void setStaff(JComboBox staffCombo, String staffNo) {
                
	    for (int i = 0; i < staffCombo.getItemCount(); i++) {

		 MstStaff ms  = (MstStaff)staffCombo.getItemAt(i);

		 //空白をセット
		if (ms.getStaffID() == null) {
		     
		   staffCombo.setSelectedIndex(0);
		   
		} else if ( ms.getStaffNo().equals(staffNo)) {
		     
		    staffCombo.setSelectedIndex(i);
		    return;
		}
	    }
	}
}
