/*
 * MstProportionallyPanel.java
 *
 * Created on 2006/10/20, 11:01
 */

package com.geobeck.sosia.pos.hair.basicinfo.product;

import com.geobeck.sosia.pos.basicinfo.SimpleMaster;
import com.geobeck.sosia.pos.basicinfo.SimpleMasterDialog;
import com.geobeck.sosia.pos.hair.master.product.*;
import com.geobeck.sosia.pos.master.MstData;
import com.geobeck.sosia.pos.master.company.MstShopCategory;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;


/**
 *
 * @author  katagiri
 */
public class MstProportionallyPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private MstProportionallys		mps		=	new MstProportionallys();
	private Integer				selIndex	=	-1;
	private Map<Integer,MstData> hashCategory_Id_Name;
	/** Creates new form MstProportionallyPanel */
	public MstProportionallyPanel()
	{
		super();
		initComponents();
		addMouseCursorChange();
		this.setSize(600, 691);
		this.setPath("基本設定 >> 技術マスタ");
		this.setTitle("按分マスタ登録");
		this.setListener();
                this.initTableColumnWidth();
		this.init();
                
	}

        private void initIntegration() {

            integration.removeAllItems();
            integration.addItem(null);

            SimpleMaster sm = new SimpleMaster(
                    "",
                    "mst_proportionally_integration",
                    "proportionally_integration_id",
                    "proportionally_integration_name", 0);

            sm.loadData();

            for (MstData md : sm) {
                integration.addItem(md);
            }

            integration.setSelectedIndex(0);
        }
        /**
	 * fill data for combCategory from mst_shop_category。
	 */
          private void initShopCategory() {

            shopCategory.removeAllItems();
            shopCategory.addItem(null);
            hashCategory_Id_Name = new HashMap<Integer, MstData>();
            SimpleMaster sm = new SimpleMaster(
                    "",
                    "mst_shop_category",
                    "shop_category_id",
                    "shop_class_name", 0);

            sm.loadData();
            hashCategory_Id_Name.put(null, null);
            for (MstData md : sm) {
          
                shopCategory.addItem(md);
                hashCategory_Id_Name.put(md.getID(), md);
            }


            

            shopCategory.setSelectedIndex(0);
        }


	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        technicClassesScrollPane = new javax.swing.JScrollPane();
        technicClasses = new javax.swing.JTable();
        displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        proportionallyName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)proportionallyName.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        technicClassNameLabel = new javax.swing.JLabel();
        displaySeqLabel = new javax.swing.JLabel();
        proportionallyPointLabel = new javax.swing.JLabel();
        proportionallyPoint = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)proportionallyPoint.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        jPanel1 = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        integrationButton = new javax.swing.JButton();
        proportionallyPointLabel1 = new javax.swing.JLabel();
        proportionallyTechnicTime = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)proportionallyTechnicTime.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        technicClassContractedNameLabel1 = new javax.swing.JLabel();
        integration = new javax.swing.JComboBox();
        shopCategory = new javax.swing.JComboBox();
        proportionallyPointLabel2 = new javax.swing.JLabel();

        technicClassesScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        technicClasses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "按分名", "ポイント", "施術時間", "表示順", "統合分類", "業態"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        technicClasses.setSelectionBackground(new java.awt.Color(220, 220, 220));
        technicClasses.setSelectionForeground(new java.awt.Color(0, 0, 0));
        technicClasses.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        technicClasses.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(technicClasses, SystemInfo.getTableHeaderRenderer());
        technicClasses.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);

        SelectTableCellRenderer.setSelectTableCellRenderer(technicClasses);
        technicClasses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                technicClassesMouseReleased(evt);
            }
        });
        technicClasses.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                technicClassesKeyReleased(evt);
            }
        });
        technicClassesScrollPane.setViewportView(technicClasses);

        displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        proportionallyName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        proportionallyName.setDocument(new CustomPlainDocument(20));
        proportionallyName.setInputKanji(true);

        technicClassNameLabel.setText("按分名");

        displaySeqLabel.setText("挿入位置");

        proportionallyPointLabel.setText("ポイント");

        proportionallyPoint.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        proportionallyPoint.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jPanel1.setOpaque(false);

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        integrationButton.setIcon(SystemInfo.getImageIcon("/button/master/integration_reg_off.jpg"));
        integrationButton.setBorderPainted(false);
        integrationButton.setPressedIcon(SystemInfo.getImageIcon("/button/master/integration_reg_on.jpg"));
        integrationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                integrationButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 120, Short.MAX_VALUE)
                .add(integrationButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(integrationButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, 0))
        );

        proportionallyPointLabel1.setText("施術時間");

        proportionallyTechnicTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        proportionallyTechnicTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        technicClassContractedNameLabel1.setText("統合分類");

        integration.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        proportionallyPointLabel2.setText("業態");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(technicClassesScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(technicClassNameLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(proportionallyName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 177, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(technicClassContractedNameLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(integration, 0, 236, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(proportionallyPointLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(proportionallyPoint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(proportionallyPointLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(proportionallyTechnicTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(displaySeqLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(proportionallyPointLabel2)
                        .add(18, 18, 18)
                        .add(shopCategory, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 329, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(technicClassNameLabel)
                    .add(proportionallyName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(technicClassContractedNameLabel1)
                    .add(integration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(proportionallyPoint, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(proportionallyPointLabel1)
                    .add(proportionallyTechnicTime, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displaySeqLabel)
                    .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(proportionallyPointLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(shopCategory, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(proportionallyPointLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(technicClassesScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		this.delete();
		this.refresh();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		if(this.checkInput())
		{
			this.regist(false);
			this.refresh();
		}
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
		if(this.checkInput())
		{
			this.regist(true);
			this.refresh();
		}
	}//GEN-LAST:event_addButtonActionPerformed

	private void technicClassesMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_technicClassesMouseReleased
	{//GEN-HEADEREND:event_technicClassesMouseReleased
		this.changeCurrentData();
	}//GEN-LAST:event_technicClassesMouseReleased

	private void technicClassesKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_technicClassesKeyReleased
	{//GEN-HEADEREND:event_technicClassesKeyReleased
		this.changeCurrentData();
	}//GEN-LAST:event_technicClassesKeyReleased

        private void integrationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_integrationButtonActionPerformed

            SimpleMasterDialog dlg = new SimpleMasterDialog(
                    "按分統合",
                    "mst_proportionally_integration",
                    "proportionally_integration_id",
                    "proportionally_integration_name",
                    20, SystemInfo.getTableHeaderRenderer());

            dlg.setOpener(this);
            SwingUtil.openAnchorDialog( null, true, dlg, "按分統合", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );

            this.initIntegration();
            this.refresh();

        }//GEN-LAST:event_integrationButtonActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private javax.swing.JComboBox integration;
    private javax.swing.JButton integrationButton;
    private javax.swing.JPanel jPanel1;
    private com.geobeck.swing.JFormattedTextFieldEx proportionallyName;
    private com.geobeck.swing.JFormattedTextFieldEx proportionallyPoint;
    private javax.swing.JLabel proportionallyPointLabel;
    private javax.swing.JLabel proportionallyPointLabel1;
    private javax.swing.JLabel proportionallyPointLabel2;
    private com.geobeck.swing.JFormattedTextFieldEx proportionallyTechnicTime;
    private javax.swing.JButton renewButton;
    private javax.swing.JComboBox shopCategory;
    private javax.swing.JLabel technicClassContractedNameLabel1;
    private javax.swing.JLabel technicClassNameLabel;
    private javax.swing.JTable technicClasses;
    private javax.swing.JScrollPane technicClassesScrollPane;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * 按分分類マスタ登録画面用FocusTraversalPolicy
	 */
	private	MstProportionallyClassFocusTraversalPolicy	ftp	=
			new MstProportionallyClassFocusTraversalPolicy();
	
	/**
	 * 按分分類マスタ登録画面用FocusTraversalPolicyを取得する。
	 * @return 按分分類マスタ登録画面用FocusTraversalPolicy
	 */
	public MstProportionallyClassFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(addButton);
		SystemInfo.addMouseCursorChange(renewButton);
		SystemInfo.addMouseCursorChange(deleteButton);
		SystemInfo.addMouseCursorChange(integrationButton);
        }
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
		proportionallyName.addKeyListener(SystemInfo.getMoveNextField());
		proportionallyName.addFocusListener(SystemInfo.getSelectText());
		proportionallyPoint.addKeyListener(SystemInfo.getMoveNextField());
		proportionallyPoint.addFocusListener(SystemInfo.getSelectText());
		proportionallyTechnicTime.addKeyListener(SystemInfo.getMoveNextField());
		proportionallyTechnicTime.addFocusListener(SystemInfo.getSelectText());
		displaySeq.addKeyListener(SystemInfo.getMoveNextField());
		displaySeq.addFocusListener(SystemInfo.getSelectText());
		integration.addKeyListener(SystemInfo.getMoveNextField());
		integration.addFocusListener(SystemInfo.getSelectText());
                //IVS_LTThuc start add 20140710 MASHU_按分マスタ登録
                shopCategory.addKeyListener(SystemInfo.getMoveNextField());
		shopCategory.addFocusListener(SystemInfo.getSelectText());
                //IVS_LTThuc start end 20140710 MASHU_按分マスタ登録
        }
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
		try
		{
			ConnectionWrapper con = SystemInfo.getConnection();
			
			mps.load(con);
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

                this.initIntegration();
                //IVS_LTThuc start add 20140710 MASHU_按分マスタ登録
                if(SystemInfo.getCurrentShop().getShopID()==0){
                      this.initShopCategory();
                }else{
                    if(SystemInfo.getCurrentShop().getUseShopCategory()==1){
                    this.initShopCategory();
                    } else{
                    
                 TableColumn column=   technicClasses.getColumnModel().getColumn(5);
                  shopCategory.setVisible(false);
                 column.setMinWidth(0);
                 column.setMaxWidth(0);
                 column.setPreferredWidth(0);
                 shopCategory.setVisible(false);
                 proportionallyPointLabel2.setVisible(false);
                }
                }
                 //IVS_LTThuc start  20140710 MASHU_按分マスタ登録
		this.showData();
	}
	
	/**
	 * 再表示を行う。
	 */
	private void refresh()
	{
		//データベースからデータを読み込む
		try
		{
			ConnectionWrapper con = SystemInfo.getConnection();
			
			mps.load(con);
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		//テーブルに商品区分マスタデータを表示する
		this.showData();
		//入力をクリアする
		this.clear();
		
		proportionallyName.requestFocusInWindow();
	}
	
	/**
	 * 入力項目をクリアする。
	 */
	private void clear()
	{
		selIndex	=	-1;
		proportionallyName.setText("");
		proportionallyPoint.setText("");
		proportionallyTechnicTime.setText( "" );
		displaySeq.setText("");
                integration.setSelectedIndex(0);
                //IVS_LTThuc start add 20140710 MASHU_按分マスタ登録
                if(SystemInfo.getCurrentShop().getShopID()==0){
                      shopCategory.setSelectedIndex(0);
                }else{
                    if(SystemInfo.getCurrentShop().getUseShopCategory()==1){
                          shopCategory.setSelectedIndex(0);
                    }
                }
                //IVS_LTThuc start end 20140710 MASHU_按分マスタ登録
		
		if(0 < technicClasses.getRowCount())
				technicClasses.removeRowSelectionInterval(0, technicClasses.getRowCount() - 1);
		
		this.changeCurrentData();
	}
	
	
	/**
	 * データを表示する。
	 */
	private void showData()
	{
		DefaultTableModel	model	=	(DefaultTableModel)technicClasses.getModel();
		
		//全行削除
		model.setRowCount(0);
		technicClasses.removeAll();
                
                if(SystemInfo.getCurrentShop().getShopID()==0){
                    for(MstProportionally mtc : mps)
		{
			Object[] rowData = {
                            mtc.getProportionallyName(),
                            mtc.getProportionallyPoint(),
                            mtc.getProportionallyTechnicTime(),
                            mtc.getDisplaySeq(),
                            mtc.getIntegration(),
                           //IVS_LTThuc start add 20140711 MASHU_按分マスタ登録
                           hashCategory_Id_Name.get(mtc.getShoCategoryID())
                           //IVS_LTThuc start end 20140711 MASHU_按分マスタ登録
                           
			};
			model.addRow(rowData);
		}
                }else{
                    if(SystemInfo.getCurrentShop().getUseShopCategory() == 1){
                        for(MstProportionally mtc : mps)
		{
			Object[] rowData = {
                            mtc.getProportionallyName(),
                            mtc.getProportionallyPoint(),
                            mtc.getProportionallyTechnicTime(),
                            mtc.getDisplaySeq(),
                            mtc.getIntegration(),
                           //IVS_LTThuc start add 20140711 MASHU_按分マスタ登録
                           hashCategory_Id_Name.get(mtc.getShoCategoryID())
                           //IVS_LTThuc start end 20140711 MASHU_按分マスタ登録
                           
			};
			model.addRow(rowData);
		}
                    }else{
                    for(MstProportionally mtc : mps)
		  {
			Object[] rowData = {
                            mtc.getProportionallyName(),
                            mtc.getProportionallyPoint(),
                            mtc.getProportionallyTechnicTime(),
                            mtc.getDisplaySeq(),
                            mtc.getIntegration(),
                           
                           
			};
			model.addRow(rowData);
		}
                    }
                }
                
		
	}
	
	/**
	 * 選択データが変更されたときの処理を行う。
	 */
	private void changeCurrentData()
	{
		int	index	=	technicClasses.getSelectedRow();
		
		if(0 <= index && index < mps.size() && index != selIndex)
		{
			selIndex	=	index;
			//選択されているデータを表示
			this.showCurrentData();
		}
		
		renewButton.setEnabled(0 <= selIndex);
		deleteButton.setEnabled(0 <= selIndex);
	}
	
	/**
	 * 選択されたデータを入力項目に表示する。
	 */
	private void showCurrentData()
	{
		proportionallyName.setText(mps.get(selIndex).getProportionallyName());
		proportionallyPoint.setText(mps.get(selIndex).getProportionallyPoint().toString());
		proportionallyTechnicTime.setText( mps.get(selIndex).getProportionallyTechnicTime().toString());
		displaySeq.setText(mps.get(selIndex).getDisplaySeq().toString());
                integration.setSelectedIndex(0);
                integration.setSelectedItem(mps.get(selIndex).getIntegration());
               //IVS_LTThuc start add 20140710 MASHU_按分マスタ登録
                if(SystemInfo.getCurrentShop().getShopID()==0){
                      shopCategory.setSelectedIndex(0);
                      shopCategory.setSelectedItem((hashCategory_Id_Name.get(mps.get(selIndex).getShoCategoryID())));
                }else{
                    if(SystemInfo.getCurrentShop().getUseShopCategory()==1){
                          shopCategory.setSelectedIndex(0);
                shopCategory.setSelectedItem((hashCategory_Id_Name.get(mps.get(selIndex).getShoCategoryID())));
                    }
                }
                
               //IVS_LTThuc start add 20140710 MASHU_按分マスタ登録
	}
	
	
	/**
	 * 入力チェックを行う。
	 * @return 入力エラーがなければtrueを返す。
	 */
	private boolean checkInput()
	{
		//按分区分名
		if(proportionallyName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "技術区分名"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			proportionallyName.requestFocusInWindow();
			return	false;
		}
		
		//ポイント
		if( !CheckUtil.isNumeric(proportionallyPoint.getText() ) )
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ポイント"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			proportionallyPoint.requestFocusInWindow();
			return	false;
		}
		
		//施術時間
		if( !CheckUtil.isNumeric(proportionallyTechnicTime.getText() ) )
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "施術時間"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			proportionallyTechnicTime.requestFocusInWindow();
			return	false;
		}
		
		//表示順
		/*if(!CheckUtil.isNumber(displaySeq.getText()))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "表示順"),
					JOptionPane.ERROR_MESSAGE);
			displaySeq.requestFocusInWindow();
			return	false;
		}*/
		
		return	true;
	}
	
	
	/**
	 * 入力されたデータを登録する。
	 * @param isAdd true - 追加処理
	 * @return true - 成功
	 */
	private boolean regist(boolean isAdd)
	{
	    boolean result = false;
	    MstProportionally mtc = new MstProportionally();

	    if (!isAdd && 0 <= selIndex) {
		mtc.setData(mps.get(selIndex));
	    }

	    mtc.setProportionallyName(proportionallyName.getText());
	    mtc.setProportionallyPoint(Integer.parseInt(proportionallyPoint.getText()));
	    mtc.setProportionallyTechnicTime(Integer.parseInt(proportionallyTechnicTime.getText()));
	    mtc.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText())));
            mtc.setIntegration((MstData)integration.getSelectedItem());
             //IVS_LTThuc start add 20140710 MASHU_按分マスタ登録
            mtc.setShopCategory(((MstData)shopCategory.getItemAt(shopCategory.getSelectedIndex())));
             //IVS_LTThuc start end 20140710 MASHU_按分マスタ登録
	    ConnectionWrapper con = SystemInfo.getConnection();

	    try
	    {
		con.begin();

		if (mtc.regist(con, (0 < selIndex ? mps.get(selIndex).getDisplaySeq() : -1))) {
		    
		    con.commit();
		    this.refresh();
		    result = true;
		    
		} else {
		    con.rollback();
		}
	    }
	    catch(SQLException e)
	    {
		SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }

	    return result;
	}
	
	
	/**
	 * 選択されたデータを削除する。
	 * @return true - 成功
	 */
	private boolean delete()
	{
	    boolean result = false;
	    
	    MstProportionally mtc = null;

	    if (0 <= selIndex && selIndex < mps.size()) {
		mtc = mps.get(selIndex);
	    }

	    ConnectionWrapper con = SystemInfo.getConnection();
	    
	    // 按分登録されているかチェック
	    int dpCount = 0;
	    ResultSetWrapper rs;
	    try
	    {
		StringBuilder sql = new StringBuilder(1000);
		sql.append(" select");
		sql.append("     count(*) as cnt    ");
		sql.append(" from");
		sql.append("     data_proportionally");
		sql.append(" where");
		sql.append("     delete_date is null");
		sql.append(" and proportionally_id = " + SQLUtil.convertForSQL(mtc.getProportionallyID()));

		rs = con.executeQuery(sql.toString());
		if (rs.next()) {
		    dpCount = rs.getInt("cnt");
		}
		rs.close();
	    }
	    catch(SQLException e)
	    {
		SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }

	    // 按分登録されている場合
	    if (dpCount > 0) {
		// 確認メッセージ
		String msg = "この按分を使用中の技術があります。削除してもよろしいですか？";
		int ret = MessageDialog.showYesNoDialog(this, msg, this.getTitle(), JOptionPane.QUESTION_MESSAGE, JOptionPane.NO_OPTION);
		if(ret == JOptionPane.NO_OPTION) {
		    return false;
		}
	    }
	    
	    try
	    {
		con.begin();

		// 按分登録されている場合
		if (dpCount > 0) {
		    StringBuilder sql = new StringBuilder(1000);
		    sql.append(" update data_proportionally");
		    sql.append(" set");
		    sql.append("     delete_date = current_timestamp");
		    sql.append(" where ");
		    sql.append("         delete_date is null ");
		    sql.append("     and proportionally_id = " + SQLUtil.convertForSQL(mtc.getProportionallyID()));
		    con.executeUpdate(sql.toString());
		}		
		
		if (mtc.delete(con)) {

		    con.commit();
		    this.refresh();
		    result = true;

		} else {
		    con.rollback();
		}
	    }
	    catch(SQLException e)
	    {
		SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }

	    return result;
	}
	
	/**
	 * 按分分類マスタ登録画面用FocusTraversalPolicy
	 */
	private class MstProportionallyClassFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(proportionallyName))
			{
				return displaySeq;
			}
			else if (aComponent.equals(displaySeq))
			{
				return displaySeq;
			}
			
			return proportionallyName;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(proportionallyName))
			{
				return proportionallyName;
			}
			else if (aComponent.equals(displaySeq))
			{
				return proportionallyName;
			}
			
			return proportionallyName;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return proportionallyName;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return displaySeq;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return proportionallyName;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return proportionallyName;
		}
	}
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		technicClasses.getColumnModel().getColumn(0).setPreferredWidth(200);
		technicClasses.getColumnModel().getColumn(1).setPreferredWidth(100);
		technicClasses.getColumnModel().getColumn(2).setPreferredWidth(100);
		technicClasses.getColumnModel().getColumn(3).setPreferredWidth(100);
                technicClasses.getColumnModel().getColumn(4).setPreferredWidth(100);
                technicClasses.getColumnModel().getColumn(5).setPreferredWidth(140);
	}
	
	
	/**
	 * 列の表示位置を設定するTableCellRenderer
	 */
	private class TableCellAlignRenderer extends DefaultTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}

		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);
			
			switch(column)
			{
				case 1:
					super.setHorizontalAlignment(SwingConstants.RIGHT);
					break;
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}

			return this;
		}
	}
	
}
