/*
 * MstTaxPanel.java
 *
 * Created on 2006/12/20, 17:48
 */

package com.geobeck.sosia.pos.basicinfo.account;

import com.geobeck.sosia.pos.hair.data.account.Course;
import com.geobeck.sosia.pos.hair.data.account.CourseClass;
import com.geobeck.sosia.pos.hair.data.account.CourseClasses;
import com.geobeck.sosia.pos.hair.master.product.MstTechnic;
import com.geobeck.sosia.pos.hair.master.product.MstTechnicClass;
import com.geobeck.sosia.pos.hair.master.product.MstTechnicClasses;
import java.awt.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.account.*;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.products.Product;
import com.geobeck.sosia.pos.products.ProductClass;
import com.geobeck.sosia.pos.products.ProductClasses;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.util.SQLUtil;

/**
 *
 * @author  katagiri
 */
public class MstTaxPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	
	/** Creates new form MstTaxPanel */
	public MstTaxPanel()
	{
		initComponents();
		this.setListener();
                // ThuanNK start edit 2014/02/25
		this.setSize(832, 680);
                // ThuanNK end edit 2014/02/25
		this.setPath("基本設定 >> 精算マスタ");
		this.setTitle("消費税登録");
		this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        divisionGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        taxRate = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createNumberFormatter(3, 2, 0.00, 999.99));
        ((PlainDocument)taxRate.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        applyDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel3 = new javax.swing.JLabel();
        taxTableScrollPane = new javax.swing.JScrollPane();
        taxTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        itemRadio = new javax.swing.JRadioButton();
        registBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        currentTaxTxt = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createNumberFormatter(3, 2, 0.00, 999.99));
        ((PlainDocument)taxRate.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        jLabel9 = new javax.swing.JLabel();
        courseRadio = new javax.swing.JRadioButton();
        JtableproductDivision = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        techClass = new javax.swing.JTable();
        productScrollPane3 = new javax.swing.JScrollPane();
        techTbl = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemClass = new javax.swing.JTable();
        productScrollPane1 = new javax.swing.JScrollPane();
        itemTbl = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        courseClass = new javax.swing.JTable();
        productScrollPane2 = new javax.swing.JScrollPane();
        courseTbl = new javax.swing.JTable();
        updateBtn = new javax.swing.JButton();
        technicRadio = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        saveBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        allRadio = new javax.swing.JRadioButton();
        changedTaxTxt = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createNumberFormatter(3, 2, 0.00, 999.99));
        ((PlainDocument)taxRate.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));

        setFocusCycleRoot(true);

        jLabel1.setText("消費税率");

        jLabel2.setText("適用日");

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setContentAreaFilled(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setContentAreaFilled(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        taxRate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        taxRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        applyDate.setBackground(java.awt.Color.white);
        applyDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        applyDate.setForeground(java.awt.Color.white);
        applyDate.setMaximumSize(new java.awt.Dimension(65, 20));
        applyDate.setMinimumSize(new java.awt.Dimension(65, 20));
        applyDate.setPreferredSize(new java.awt.Dimension(85, 20));

        jLabel3.setText("％");

        taxTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "適用日", "消費税率"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        taxTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        taxTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        taxTable.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(taxTable, SystemInfo.getTableHeaderRenderer());
        taxTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(taxTable);
        taxTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                taxTableMouseReleased(evt);
            }
        });
        taxTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                taxTableKeyReleased(evt);
            }
        });
        taxTableScrollPane.setViewportView(taxTable);

        jPanel1.setBackground(new java.awt.Color(235, 235, 235));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setOpaque(false);

        jLabel8.setText("⇒変更後");

        divisionGroup.add(itemRadio);
        itemRadio.setText("商品");
        itemRadio.setOpaque(false);

        registBtn.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registBtn.setBorderPainted(false);
        registBtn.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        registBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registBtnActionPerformed(evt);
            }
        });

        jLabel7.setText("％");

        currentTaxTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        currentTaxTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel9.setText("％");

        divisionGroup.add(courseRadio);
        courseRadio.setText("コース");
        courseRadio.setOpaque(false);

        JtableproductDivision.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                JtableproductDivisionStateChanged(evt);
            }
        });

        jPanel2.setPreferredSize(new java.awt.Dimension(401, 313));

        techClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "技術分類"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        techClass.setSelectionBackground(new java.awt.Color(220, 220, 220));
        techClass.setSelectionForeground(new java.awt.Color(0, 0, 0));
        techClass.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        techClass.getTableHeader().setReorderingAllowed(false);
        techClass.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(techClass);
        SwingUtil.setJTableHeaderRenderer(techClass, SystemInfo.getTableHeaderRenderer());
        techClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                techClassMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(techClass);

        productScrollPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        techTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "メニュー名", "現在価格", "変更後価格"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        techTbl.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        techTbl.setSelectionBackground(new java.awt.Color(220, 220, 220));
        techTbl.setSelectionForeground(new java.awt.Color(0, 0, 0));
        techTbl.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        techTbl.getTableHeader().setReorderingAllowed(false);
        techTbl.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(techTbl);
        SwingUtil.setJTableHeaderRenderer(techTbl, SystemInfo.getTableHeaderRenderer());
        techTbl.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                techTblPropertyChange(evt);
            }
        });
        productScrollPane3.setViewportView(techTbl);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(productScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(productScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE))
                .addContainerGap())
        );

        JtableproductDivision.addTab("技術選択", jPanel2);

        itemClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "商品分類"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemClass.setSelectionBackground(new java.awt.Color(220, 220, 220));
        itemClass.setSelectionForeground(new java.awt.Color(0, 0, 0));
        itemClass.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        itemClass.getTableHeader().setReorderingAllowed(false);
        itemClass.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(itemClass);
        SwingUtil.setJTableHeaderRenderer(itemClass, SystemInfo.getTableHeaderRenderer());
        itemClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                itemClassMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(itemClass);

        productScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        itemTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "メニュー名", "現在価格", "変更後価格"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTbl.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        itemTbl.setSelectionBackground(new java.awt.Color(220, 220, 220));
        itemTbl.setSelectionForeground(new java.awt.Color(0, 0, 0));
        itemTbl.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        itemTbl.getTableHeader().setReorderingAllowed(false);
        itemTbl.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(itemTbl);
        SwingUtil.setJTableHeaderRenderer(itemTbl, SystemInfo.getTableHeaderRenderer());
        itemTbl.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                itemTblPropertyChange(evt);
            }
        });
        productScrollPane1.setViewportView(itemTbl);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(productScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, productScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE))
                .addContainerGap())
        );

        JtableproductDivision.addTab("商品選択", jPanel3);

        courseClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "コース分類"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseClass.setSelectionBackground(new java.awt.Color(220, 220, 220));
        courseClass.setSelectionForeground(new java.awt.Color(0, 0, 0));
        courseClass.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        courseClass.getTableHeader().setReorderingAllowed(false);
        courseClass.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(courseClass);
        SwingUtil.setJTableHeaderRenderer(courseClass, SystemInfo.getTableHeaderRenderer());
        courseClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                courseClassMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(courseClass);

        productScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        courseTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "メニュー名", "現在価格", "変更後価格"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseTbl.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        courseTbl.setSelectionBackground(new java.awt.Color(220, 220, 220));
        courseTbl.setSelectionForeground(new java.awt.Color(0, 0, 0));
        courseTbl.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        courseTbl.getTableHeader().setReorderingAllowed(false);
        courseTbl.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(courseTbl);
        SwingUtil.setJTableHeaderRenderer(courseTbl, SystemInfo.getTableHeaderRenderer());
        courseTbl.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                courseTblPropertyChange(evt);
            }
        });
        productScrollPane2.setViewportView(courseTbl);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(productScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, productScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE))
                .addContainerGap())
        );

        JtableproductDivision.addTab("コース契約", jPanel4);

        updateBtn.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        updateBtn.setBorderPainted(false);
        updateBtn.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        divisionGroup.add(technicRadio);
        technicRadio.setText("技術");
        technicRadio.setOpaque(false);

        jLabel5.setText("変更対象");

        saveBtn.setIcon(SystemInfo.getImageIcon("/button/account/tempAccount_off.jpg"));
        saveBtn.setBorderPainted(false);
        saveBtn.setPressedIcon(SystemInfo.getImageIcon("/button/account/tempAccount_on.jpg"));
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("＜マスタ価格一括更新設定＞");

        jLabel6.setText("現在");

        divisionGroup.add(allRadio);
        allRadio.setText("全て");
        allRadio.setOpaque(false);

        changedTaxTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        changedTaxTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel5)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(technicRadio))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(currentTaxTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel7)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(jLabel8)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(changedTaxTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel9))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(itemRadio)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(courseRadio)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(allRadio)))))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(updateBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(saveBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(registBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(JtableproductDivision)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(saveBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(updateBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(8, 8, 8)
                                .add(jLabel4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel5)
                                    .add(technicRadio)
                                    .add(itemRadio)
                                    .add(courseRadio)
                                    .add(allRadio)))
                            .add(registBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel6)
                            .add(jLabel7)
                            .add(jLabel8)
                            .add(jLabel9)
                            .add(changedTaxTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(currentTaxTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(JtableproductDivision))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(taxTableScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel1))
                        .add(29, 29, 29)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(taxRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel3))
                            .add(applyDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(applyDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(taxRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(taxTableScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void taxTableMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_taxTableMouseReleased
	{//GEN-HEADEREND:event_taxTableMouseReleased
		this.changeCurrentData();
	}//GEN-LAST:event_taxTableMouseReleased

	private void taxTableKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_taxTableKeyReleased
	{//GEN-HEADEREND:event_taxTableKeyReleased
		this.changeCurrentData();
	}//GEN-LAST:event_taxTableKeyReleased

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		this.regist(false);
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
		this.regist(true);
	}//GEN-LAST:event_addButtonActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // ThuanNK start add 2014/02/25
        // upsert data to mst_use_product_update
        try{
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
            if(this.saveProductUpdate()){
                // ThuanNK start edit 2014/03/03
                MessageDialog.showMessageDialog(this, "登録しました。",
                    "消費税登録", JOptionPane.INFORMATION_MESSAGE);
            } else {
                MessageDialog.showMessageDialog(this, "登録に失敗しました。",
                    "消費税登録", JOptionPane.ERROR_MESSAGE);
                // ThuanNK end edit 2014/03/03
            }
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        // ThuanNK end edit 2014/02/25
    }//GEN-LAST:event_saveBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // ThuanNK start add 2014/02/25
        try{
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
            if(!this.currentTaxTxt.getText().isEmpty() || !this.changedTaxTxt.getText().isEmpty()){
                int currentTax = Integer.parseInt(this.currentTaxTxt.getText());
                int changedTax = Integer.parseInt(this.changedTaxTxt.getText());

                if(this.technicRadio.isSelected()) {
                    this.updateTechnics(currentTax, changedTax);
                } else if(this.itemRadio.isSelected()) {
                    this.updateItems(currentTax, changedTax);
                } else if(this.courseRadio.isSelected()) {
                    this.updateCourses(currentTax, changedTax);
                } else {
                    this.updateTechnics(currentTax, changedTax);
                    this.updateItems(currentTax, changedTax);
                    this.updateCourses(currentTax, changedTax);
                }
            }
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        // ThuanNK end edit 2014/02/25
    }//GEN-LAST:event_updateBtnActionPerformed

    private void JtableproductDivisionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_JtableproductDivisionStateChanged
        // ThuanNK start add 2014/02/25
        if(JtableproductDivision.getSelectedIndex() == 0) {
            showTechnics();
        } else if (JtableproductDivision.getSelectedIndex() == 1) {
            showItems();
        } else if (JtableproductDivision.getSelectedIndex() == 2) {
            showCourses();
        }
        // ThuanNK end add 2014/02/25
    }//GEN-LAST:event_JtableproductDivisionStateChanged

    private void registBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registBtnActionPerformed
        // ThuanNK start add 2014/02/25
        int dialogResult1 = JOptionPane.showConfirmDialog(this, "設定された内容でマスタ価格が一括更新されますがよろしいですか？",
            "消費税登録", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (dialogResult1 == 0) {
            int dialogResult2 = JOptionPane.showConfirmDialog(this, "マスタ価格の一括更新を行うと元に戻せなくなりますが本当によろしいですか？",
            "消費税登録", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(dialogResult2 == 0) {
                if(this.saveProductAndMstProduct()){
                    this.technicUpdateList.clear();
                    this.itemUpdateList.clear();
                    this.courseUpdateList.clear();

                    this.showTechnics();
                    this.showItems();
                    this.showCourses();
                    // ThuanNK start edit 2014/03/03
                    MessageDialog.showMessageDialog(null, "登録しました。",
                        "消費税登録", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    MessageDialog.showMessageDialog(null, "登録に失敗しました。",
                        "消費税登録", JOptionPane.ERROR_MESSAGE);
                    // ThuanNK end edit 2014/03/03
                }
            }
        }
        // ThuanNK end add 2014/02/25
    }//GEN-LAST:event_registBtnActionPerformed
    // ThuanNK start add 2014/02/25
    private void courseClassMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseClassMouseReleased
        this.showCourses();
    }//GEN-LAST:event_courseClassMouseReleased

    private void itemClassMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemClassMouseReleased
        this.showItems();
    }//GEN-LAST:event_itemClassMouseReleased

    private void techClassMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_techClassMouseReleased
        this.showTechnics();
    }//GEN-LAST:event_techClassMouseReleased

    private void techTblPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_techTblPropertyChange
        if(-1 != techTbl.getSelectedRow()){
            Long priceUpdate = Long.parseLong(techTbl.getValueAt(techTbl.getSelectedRow(), 2).toString());
            
            technicUpdateList.put(technicIndexList.get(techTbl.getSelectedRow()), priceUpdate);
        }
    }//GEN-LAST:event_techTblPropertyChange

    private void itemTblPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_itemTblPropertyChange
        if(-1 != itemTbl.getSelectedRow()){
            Long priceUpdate = Long.parseLong(itemTbl.getValueAt(itemTbl.getSelectedRow(), 2).toString());
            
            itemUpdateList.put(itemIndexList.get(itemTbl.getSelectedRow()), priceUpdate);
        }
    }//GEN-LAST:event_itemTblPropertyChange

    private void courseTblPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_courseTblPropertyChange
        if(-1 != courseTbl.getSelectedRow()){
            Long priceUpdate = Long.parseLong(courseTbl.getValueAt(courseTbl.getSelectedRow(), 2).toString());
            
            courseUpdateList.put(courseIndexList.get(courseTbl.getSelectedRow()), priceUpdate);
        }
    }//GEN-LAST:event_courseTblPropertyChange
    // ThuanNK end add 2014/02/25
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane JtableproductDivision;
    private javax.swing.JButton addButton;
    private javax.swing.JRadioButton allRadio;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo applyDate;
    private com.geobeck.swing.JFormattedTextFieldEx changedTaxTxt;
    private javax.swing.JTable courseClass;
    private javax.swing.JRadioButton courseRadio;
    private javax.swing.JTable courseTbl;
    private com.geobeck.swing.JFormattedTextFieldEx currentTaxTxt;
    private javax.swing.JButton deleteButton;
    private javax.swing.ButtonGroup divisionGroup;
    private javax.swing.JTable itemClass;
    private javax.swing.JRadioButton itemRadio;
    private javax.swing.JTable itemTbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane productScrollPane1;
    private javax.swing.JScrollPane productScrollPane2;
    private javax.swing.JScrollPane productScrollPane3;
    private javax.swing.JButton registBtn;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton saveBtn;
    private com.geobeck.swing.JFormattedTextFieldEx taxRate;
    private javax.swing.JTable taxTable;
    private javax.swing.JScrollPane taxTableScrollPane;
    private javax.swing.JTable techClass;
    private javax.swing.JTable techTbl;
    private javax.swing.JRadioButton technicRadio;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
	
        // ThuanNK start add 2014/02/25
        private MstTechnicClasses technicClasses = new MstTechnicClasses();
        private	ProductClasses itemClasses = new ProductClasses();
        private CourseClasses courseClasses = new CourseClasses();
        
        private Map<Integer, Long> technicUpdateList = new HashMap<Integer, Long>();
        private Map<Integer, Long> itemUpdateList = new HashMap<Integer, Long>();
        private Map<Integer, Long> courseUpdateList = new HashMap<Integer, Long>();
        
        private ArrayList<Integer> technicIndexList = new ArrayList<Integer>();
        private ArrayList<Integer> itemIndexList = new ArrayList<Integer>();
        private ArrayList<Integer> courseIndexList = new ArrayList<Integer>();
        // ThuanNK end add 2014/02/25
        
        private MstShop shop = SystemInfo.getCurrentShop();
        
	private	ArrayList<MstTax>	taxDatas		=	new ArrayList<MstTax>();
	private MstTax				currentData		=	new MstTax();
	
	/**
	 * 消費税登録画面用FocusTraversalPolicy
	 */
	private	MstTaxFocusTraversalPolicy	ftp	=
			new MstTaxFocusTraversalPolicy();
	
	/**
	 * 消費税登録画面用FocusTraversalPolicyを取得する。
	 * @return 支払方法登録画面用FocusTraversalPolicy
	 */
	public MstTaxFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
		applyDate.addKeyListener(SystemInfo.getMoveNextField());
		applyDate.addFocusListener(SystemInfo.getSelectText());
		taxRate.addKeyListener(SystemInfo.getMoveNextField());
		taxRate.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * 初期化する。
	 */
	private void init()
	{
		this.load();
		this.showTaxDatas();
		this.changeCurrentData();
		applyDate.requestFocusInWindow();
                
                // ThuanNK start add 2014/02/25
                this.getTechnicClass();
                this.showTechnicClass();
                this.getItemClass();
                this.showItemClass();
                this.getCourseClass();
                this.showCourseClass();
                
                this.technicRadio.setSelected(true);
                this.showTechnics();
                // ThuanNK end add 2014/02/25
	}
	
	/**
	 * データを読み込む。
	 */
	private void load()
	{
		taxDatas.clear();
		
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
		
			ResultSetWrapper	rs	=	con.executeQuery(MstTax.getSelectAllSQL());
			
			while(rs.next())
			{
				MstTax	mt	=	new MstTax();
				mt.setDatas(rs);
				taxDatas.add(mt);
			}

			rs.close();
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * 税率データを表示する。
	 */
	private void showTaxDatas()
	{
		SwingUtil.clearTable(taxTable);
		
		DefaultTableModel	model	=	(DefaultTableModel)taxTable.getModel();
		
		for(MstTax mt : taxDatas)
		{
			Vector<Object>		temp	=	new Vector<Object>();
			temp.add(mt.getApplyDate());
			temp.add(mt.getTaxRatePercentage().doubleValue());
			model.addRow(temp);
		}
	}
	
	/**
	 * 選択されているデータが変わったときの処理。
	 */
	private void changeCurrentData()
	{
		if(0 <= taxTable.getSelectedRow())
		{
			currentData	=	taxDatas.get(taxTable.getSelectedRow());
		}
		else
		{
			currentData	=	new MstTax();
		}
		
		this.showCurrentData();
	}
	
	/**
	 * 選択されているデータを表示する。
	 */
	private void showCurrentData()
	{
		applyDate.setDate(currentData.getApplyDate());
		taxRate.setText(Double.toString(currentData.getTaxRatePercentage().doubleValue()));
		
		renewButton.setEnabled(currentData.getTaxID() != null);
		deleteButton.setEnabled(currentData.getTaxID() != null);
	}
	
	/**
	 * 登録処理を行う。
	 */
	private void regist(boolean isAdd)
	{
		//入力チェック
		if(!this.checkInput())
		{
			return;
		}
		
		if(isAdd)
		{
			currentData.setTaxID(null);
		}
		
		this.setInputData();
		
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			if(currentData.isExistSameDateData(con))
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(1111, "適用日"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				return;
			}
			
			con.begin();
			
			if(currentData.regist(con))
			{
				con.commit();
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
						this.getTitle(),
						JOptionPane.INFORMATION_MESSAGE);
				init();
			}
			else
			{
				con.rollback();
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "消費税率マスタ"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * 入力チェックを行う。
	 */
	private boolean checkInput()
	{
		//適用日
		if(!applyDate.isSelected())
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "適用日"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return	false;
		}
		
		//消費税率
		if(taxRate.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "消費税率"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			return	false;
		}
		
		return	true;
	}
	
	/**
	 * 入力されたデータをセットする。
	 */
	private void setInputData()
	{
		currentData.setApplyDate(applyDate.getDate());
		currentData.setTaxRate(Double.parseDouble(taxRate.getText()) / 100d);
	}
	
	/**
	 * 削除処理を行う。
	 */
	private void delete()
	{
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			con.begin();
			
			if(currentData.delete(con))
			{
				con.commit();
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.INFO_DELETE_SUCCESS),
						this.getTitle(),
						JOptionPane.INFORMATION_MESSAGE);
				init();
			}
			else
			{
				con.rollback();
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED, "消費税率マスタ"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * 列の表示位置を設定するTableCellRenderer
	 */
	private class TableCellAlignRenderer extends DefaultTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}

		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);
			
			switch(column)
			{
				case 0:
					super.setHorizontalAlignment(SwingConstants.CENTER);
					break;
				case 1:
					super.setHorizontalAlignment(SwingConstants.RIGHT);
					break;
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}

			return this;
		}
	}
	
	
	/**
	 * 消費税マスタ登録画面用FocusTraversalPolicy
	 */
	private class MstTaxFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(applyDate))
			{
				return taxRate;
			}
			else if (aComponent.equals(taxRate))
			{
				if(technicRadio.isSelected()){
                                    return technicRadio;
                                }else if(itemRadio.isSelected()){
                                    return itemRadio;
                                }else if(courseRadio.isSelected()){
                                    return courseRadio;
                                }
                                return allRadio;
			}
                        else if( aComponent.equals(technicRadio) || 
                                aComponent.equals(itemRadio)||
                                aComponent.equals(courseRadio)||
                                aComponent.equals(allRadio)){
                            return currentTaxTxt;
                        }else if(aComponent.equals(currentTaxTxt)){
                            return changedTaxTxt;
                        }
			
			return applyDate;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(applyDate))
			{
				return taxRate;
			}
			else if (aComponent.equals(taxRate))
			{
				if(technicRadio.isSelected()){
                                    return technicRadio;
                                }else if(itemRadio.isSelected()){
                                    return itemRadio;
                                }else if(courseRadio.isSelected()){
                                    return courseRadio;
                                }
                                return allRadio;
			}
                        else if( aComponent.equals(technicRadio) || 
                                aComponent.equals(itemRadio)||
                                aComponent.equals(courseRadio)||
                                aComponent.equals(allRadio)){
                            return currentTaxTxt;
                        }else if(aComponent.equals(currentTaxTxt)){
                            return changedTaxTxt;
                        }
			
			return applyDate;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return applyDate;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return taxRate;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return applyDate;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return applyDate;
		}
	}
        
        // ThuanNK start add 2014/02/25
        private void getTechnicClass(){
            try {
                ConnectionWrapper con =	SystemInfo.getConnection();
                technicClasses.loadAll(con, 1);
            }
            catch(SQLException e)
            {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }
        
        private void showTechnicClass() {
            DefaultTableModel model = (DefaultTableModel)techClass.getModel();

            //全行削除
            SwingUtil.clearTable(techClass);

            for (MstTechnicClass pc : technicClasses) {
                Object[] rowData = {pc};
                model.addRow(rowData);
            }

            if (0 < techClass.getRowCount()) {
                techClass.setRowSelectionInterval(0, 0);
            }
        }
        
        public MstTechnicClass getSelectedTechnicClass()
	{
		if(techClass.getSelectedRow() < 0)	return	null;
                
		return	(MstTechnicClass)techClass.getValueAt(techClass.getSelectedRow(), 0);
	}
        
        private void showTechnics(){
            DefaultTableModel model = (DefaultTableModel)techTbl.getModel();

            //全行削除
            SwingUtil.clearTable(techTbl);
            
            technicIndexList.clear();

            //選択されている分類を取得
            MstTechnicClass tc = this.getSelectedTechnicClass();

            if (tc == null) {
                //選択されていない場合はなにもしない
                return;
            }

            try {
                ConnectionWrapper con = SystemInfo.getConnection();
                
                tc.loadTechnic(con);
                
                if(0 == technicUpdateList.size()){
                    ResultSetWrapper rs = con.executeQuery(this.getSelectProductUpdate(1));

                    while(rs.next())
                    {
                        technicUpdateList.put(rs.getInt("product_id"), rs.getLong("price"));
                    }

                    rs.close();
                }
                
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            for (MstTechnic t : tc) {
                long priceUpdate = 0;
                if(0 < technicUpdateList.size()){
                    if(technicUpdateList.get(t.getTechnicID()) != null){
                        priceUpdate = technicUpdateList.get(t.getTechnicID());
                    }
                }
                technicIndexList.add(t.getTechnicID());
                Object[] rowData = { t, t.getPrice(), priceUpdate };
                model.addRow(rowData);
            }
        }
        
        private void updateTechnics(int currentTax, int changedTax){
            DefaultTableModel model = (DefaultTableModel)techTbl.getModel();

            //全行削除
            SwingUtil.clearTable(techTbl);
            
            //technicUpdateList.clear();
            
            for(MstTechnicClass tc : technicClasses){
                try {
                    ConnectionWrapper con = SystemInfo.getConnection();

                    tc.loadTechnic(con);

                } catch(SQLException e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
                
                for(MstTechnic t : tc){
                    long priceUpdate = (long)(t.getPrice() / (1 + (double)currentTax/100) * (1 + (double)changedTax/100));
                    technicUpdateList.put(t.getTechnicID(), priceUpdate);
                }
            }
            
            MstTechnicClass tc = this.getSelectedTechnicClass();

            if (tc == null) {
                //選択されていない場合はなにもしない
                return;
            }
            
            for (MstTechnic t : tc) {
                Object[] rowData = { t, t.getPrice(), technicUpdateList.get(t.getTechnicID()) };
                model.addRow(rowData);
            }
        }
        
        private void getItemClass(){
            try {
                ConnectionWrapper con =	SystemInfo.getConnection();
                itemClasses.setProductDivision(2);
                itemClasses.load(con, this.shop.getShopID());
            }
            catch(SQLException e)
            {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }
        
        private void showItemClass() {
            DefaultTableModel model = (DefaultTableModel)itemClass.getModel();

            //全行削除
            SwingUtil.clearTable(itemClass);

            for (ProductClass pc : itemClasses) {
                Object[] rowData = {pc};
                model.addRow(rowData);
            }

            if (0 < itemClass.getRowCount()) {
                itemClass.setRowSelectionInterval(0, 0);
            }
        }
        
        public ProductClass getSelectedItemClass()
	{
		if(itemClass.getSelectedRow() < 0)	return	null;
                
		return	(ProductClass)itemClass.getValueAt(itemClass.getSelectedRow(), 0);
	}
        
        private void showItems(){
            DefaultTableModel model = (DefaultTableModel)itemTbl.getModel();

            //全行削除
            SwingUtil.clearTable(itemTbl);
            
            itemIndexList.clear();

            //選択されている分類を取得
            ProductClass pc = this.getSelectedItemClass();

            if (pc == null) {
                //選択されていない場合はなにもしない
                return;
            }

            try {
                ConnectionWrapper con = SystemInfo.getConnection();
                // ThuanNK start edit 2014/03/03
                pc.loadProducts(con, 2, this.shop.getShopID());
                // ThuanNK end edit 2014/03/03
                if(0 == itemUpdateList.size()){
                    ResultSetWrapper rs = con.executeQuery(this.getSelectProductUpdate(2));

                    while(rs.next())
                    {
                        itemUpdateList.put(rs.getInt("product_id"), rs.getLong("price"));
                    }

                    rs.close();
                }
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            for (Product p : pc) {
                long priceUpdate = 0;
                if(0 < itemUpdateList.size()){
                    if(itemUpdateList.get(p.getProductID()) != null){
                        priceUpdate = itemUpdateList.get(p.getProductID());
                    }
                }
                itemIndexList.add(p.getProductID());
                Object[] rowData = { p, p.getPrice(), priceUpdate };
                model.addRow(rowData);
            }
        }
        
        private void updateItems(int currentTax, int changedTax){
            DefaultTableModel model = (DefaultTableModel)itemTbl.getModel();

            //全行削除
            SwingUtil.clearTable(itemTbl);
            
            //productUpdateList.clear();
            
            for(ProductClass pc : itemClasses){
                try {
                    ConnectionWrapper con = SystemInfo.getConnection();
                    // ThuanNK start edit 2014/03/03
                    pc.loadProducts(con, 2, this.shop.getShopID());
                    // ThuanNK end edit 2014/03/03
                } catch(SQLException e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
                
                for(Product p : pc){
                    long priceUpdate = (long)(p.getPrice() / (1 + (double)currentTax/100) * (1 + (double)changedTax/100));
                    itemUpdateList.put(p.getProductID(), priceUpdate);
                }
            }
            
            ProductClass pc = this.getSelectedItemClass();

            if (pc == null) {
                //選択されていない場合はなにもしない
                return;
            }
            
            for (Product p : pc) {
                Object[] rowData = { p, p.getPrice(), itemUpdateList.get(p.getProductID()) };
                model.addRow(rowData);
            }
        }
        
        private void getCourseClass(){
            try {
                ConnectionWrapper con =	SystemInfo.getConnection();
                // ThuanNK start edit 2014/03/03
                courseClasses.setProductDivision(3);
                // ThuanNK end edit 2014/03/03
                courseClasses.loadCourseClass(con);
            }
            catch(SQLException e)
            {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }
        
        private void showCourseClass() {
            DefaultTableModel model = (DefaultTableModel)courseClass.getModel();

            //全行削除
            SwingUtil.clearTable(courseClass);

            for (CourseClass cc : courseClasses) {
                Object[] rowData = {cc};
                model.addRow(rowData);
            }

            if (0 < courseClass.getRowCount()) {
                courseClass.setRowSelectionInterval(0, 0);
            }
        }
        
        public CourseClass getSelectedCourseClass()
	{
		if(courseClass.getSelectedRow() < 0)	return	null;
                
		return	(CourseClass)courseClass.getValueAt(courseClass.getSelectedRow(), 0);
	}
        
        private void showCourses(){
            DefaultTableModel model = (DefaultTableModel)courseTbl.getModel();

            //全行削除
            SwingUtil.clearTable(courseTbl);
            
            courseIndexList.clear();

            //選択されている分類を取得
            CourseClass cc = this.getSelectedCourseClass();

            if (cc == null) {
                //選択されていない場合はなにもしない
                return;
            }

            try {
                ConnectionWrapper con = SystemInfo.getConnection();
                
                cc.loadCourse(con, cc.getCourseClassId());
                
                if(0 == courseUpdateList.size()){
                    // ThuanNK start edit 2014/03/03
                    ResultSetWrapper rs = con.executeQuery(this.getSelectProductUpdate(3));
                    // ThuanNK end edit 2014/03/03
                    
                    while(rs.next())
                    {
                        courseUpdateList.put(rs.getInt("product_id"), rs.getLong("price"));
                    }

                    rs.close();
                }
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            for (Course c : cc) {
                long priceUpdate = 0;
                if(0 < courseUpdateList.size()){
                    if(courseUpdateList.get(c.getCourseId()) != null){
                        priceUpdate = courseUpdateList.get(c.getCourseId());
                    }
                }
                courseIndexList.add(c.getCourseId());
                // ThuanNK start edit 2014/03/03
                Object[] rowData = { c, c.getPrice(), priceUpdate };
                // ThuanNK end edit 2014/03/03
                model.addRow(rowData);
            }
        }
        
        private void updateCourses(int currentTax, int changedTax){
            DefaultTableModel model = (DefaultTableModel)courseTbl.getModel();

            //全行削除
            SwingUtil.clearTable(courseTbl);
            
            //courseUpdateList.clear();
            
            for(CourseClass cc : courseClasses){
                try {
                    ConnectionWrapper con = SystemInfo.getConnection();

                    cc.loadCourse(con, cc.getCourseClassId());

                } catch(SQLException e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
                
                for(Course c : cc){
                    long priceUpdate = (long)(c.getPrice() / (1 + (double)currentTax/100) * (1 + (double)changedTax/100));
                    courseUpdateList.put(c.getCourseId(), priceUpdate);
                }
            }
            
            CourseClass cc = this.getSelectedCourseClass();

            if (cc == null) {
                //選択されていない場合はなにもしない
                return;
            }
            
            for (Course c : cc) {
                Object[] rowData = { c, c.getPrice(), courseUpdateList.get(c.getCourseId()) };
                model.addRow(rowData);
            }
        }
        
        private String updateProductUpdateSQL(Integer productDivision, Integer productId, Long price){
            return "update mst_use_product_update set product_division = " + 
                    SQLUtil.convertForSQL(productDivision) + ",\n" +
                    "product_id = " + SQLUtil.convertForSQL(productId) + ",\n" +
                    "price = " + SQLUtil.convertForSQL(price) + ",\n" +
                    "update_date = " + SQLUtil.convertForSQLDateOnly(SystemInfo.getSystemDate()) + "\n" +
                    "where product_division = " + SQLUtil.convertForSQL(productDivision) + "\n" +
                    "and product_id = " + SQLUtil.convertForSQL(productId);
        }
        
        private String insertProductUpdateSQL(Integer productDivision, Integer productId, Long price){
            return "insert into mst_use_product_update(product_division, product_id, price, insert_date, update_date)" +
                    "select " + SQLUtil.convertForSQL(productDivision) + ",\n" +
                    SQLUtil.convertForSQL(productId) + ",\n" +
                    SQLUtil.convertForSQL(price) + ",\n" +
                    SQLUtil.convertForSQLDateOnly(SystemInfo.getSystemDate()) + ",\n" +
                    SQLUtil.convertForSQLDateOnly(SystemInfo.getSystemDate());
        }
        
        private boolean saveProductUpdate(){
            try {
                ConnectionWrapper con = SystemInfo.getConnection();
                try{
                    con.begin();
                    
                    if(saveProductUpdate(con)){
                        con.commit();
                        return true;
                    } else {
                        con.rollback();
                    }
                } catch (SQLException e) {
                    con.rollback();
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            return false;
        }
        
        private boolean saveProductUpdate(ConnectionWrapper con) {
            try {
                for(Map.Entry<Integer, Long> entry : technicUpdateList.entrySet()){
                    ResultSetWrapper rs = con.executeQuery(this.selectExistedProductSQL(1, entry.getKey()));
                    if(rs.isBeforeFirst()){
                        con.executeUpdate(this.updateProductUpdateSQL(1, entry.getKey(), entry.getValue()));
                    } else {
                        con.executeUpdate(this.insertProductUpdateSQL(1, entry.getKey(), entry.getValue()));
                    }
                }

                for(Map.Entry<Integer, Long> entry : itemUpdateList.entrySet()){
                    ResultSetWrapper rs = con.executeQuery(this.selectExistedProductSQL(2, entry.getKey()));
                    if(rs.isBeforeFirst()){
                        con.executeUpdate(this.updateProductUpdateSQL(2, entry.getKey(), entry.getValue()));
                    } else {
                        con.executeUpdate(this.insertProductUpdateSQL(2, entry.getKey(), entry.getValue()));
                    }
                }

                for(Map.Entry<Integer, Long> entry : courseUpdateList.entrySet()){
                    // ThuanNK start edit 2014/03/11
                    ResultSetWrapper rs = con.executeQuery(this.selectExistedProductSQL(3, entry.getKey()));
                    if(rs.isBeforeFirst()){
                        con.executeUpdate(this.updateProductUpdateSQL(3, entry.getKey(), entry.getValue()));
                    } else {
                        con.executeUpdate(this.insertProductUpdateSQL(3, entry.getKey(), entry.getValue()));
                    }
                    // ThuanNK end edit 2014/03/11
                }
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                return false;
            }
            return true;
        }
        
        private String selectExistedProductSQL(Integer productDivision, Integer productId){
            return "select 1 from mst_use_product_update" + "\n" +
                    "where product_division = " + SQLUtil.convertForSQL(productDivision) + "\n" +
                    "and product_id = " + SQLUtil.convertForSQL(productId);
        }
        
        private String updateProductSQL(Integer productDivision, Integer productId, Long price){
            return "UPDATE mst_use_product\n" +
                "SET update_date = " + SQLUtil.convertForSQLDateOnly(SystemInfo.getSystemDate()) + ", " +
                "price = " + SQLUtil.convertForSQL(price) + "\n" +
                "WHERE product_division = " + SQLUtil.convertForSQL(productDivision) + 
                "and product_id = " + SQLUtil.convertForSQL(productId);
        }
        
        private String updateMstTechnicSQL(Integer productId, Long price){
            return "UPDATE mst_technic\n" +
                "SET price = " + SQLUtil.convertForSQL(price) + ",\n" +
                "update_date = " + SQLUtil.convertForSQLDateOnly(SystemInfo.getSystemDate()) + "\n" +
                "WHERE technic_id = " + SQLUtil.convertForSQL(productId);
        }
        
        private String updateMstProductSQL(Integer productId, Long price){
            return "UPDATE mst_item\n" +
                "SET price = " + SQLUtil.convertForSQL(price) + ",\n" +
                "update_date = " + SQLUtil.convertForSQLDateOnly(SystemInfo.getSystemDate()) + "\n" +
                "WHERE item_id = " + SQLUtil.convertForSQL(productId);
        }
        
        private String updateMstCourseSQL(Integer productId, Long price){
            return "UPDATE mst_course\n" +
                "SET price = " + SQLUtil.convertForSQL(price) + ",\n" +
                "update_date = " + SQLUtil.convertForSQLDateOnly(SystemInfo.getSystemDate()) + "\n" +
                "WHERE course_id = " + SQLUtil.convertForSQL(productId);
        }
        
        private boolean saveProductAndMstProduct(){
            try {
                ConnectionWrapper con = SystemInfo.getConnection();
                
                try{
                    con.begin();
                    
                    if(this.saveMstProduct(con) && this.saveProduct(con) && this.saveProductUpdate(con)){
                        con.commit();
                        return true;
                    } else {
                        con.rollback();
                    }
                } catch (SQLException e) {
                    con.rollback();
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
                
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            return false;
        }
        
        private boolean saveProduct(ConnectionWrapper con) {
            try {
                for(Map.Entry<Integer, Long> entry : technicUpdateList.entrySet()){
                    con.executeUpdate(this.updateProductSQL(1, entry.getKey(), entry.getValue()));
                }

                for(Map.Entry<Integer, Long> entry : itemUpdateList.entrySet()){
                    con.executeUpdate(this.updateProductSQL(2, entry.getKey(), entry.getValue()));
                }

                for(Map.Entry<Integer, Long> entry : courseUpdateList.entrySet()){
                    // ThuanNK start edit 2014/03/03
                    con.executeUpdate(this.updateProductSQL(3, entry.getKey(), entry.getValue()));
                    // ThuanNK end edit 2014/03/03
                }
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                return false;
            }
            return true;
        }
        
        private boolean saveMstProduct(ConnectionWrapper con) {
            try {
                for(Map.Entry<Integer, Long> entry : technicUpdateList.entrySet()){
                    con.executeUpdate(this.updateMstTechnicSQL(entry.getKey(), entry.getValue()));
                }

                for(Map.Entry<Integer, Long> entry : itemUpdateList.entrySet()){
                    con.executeUpdate(this.updateMstProductSQL(entry.getKey(), entry.getValue()));
                }

                for(Map.Entry<Integer, Long> entry : courseUpdateList.entrySet()){
                    con.executeUpdate(this.updateMstCourseSQL(entry.getKey(), entry.getValue()));
                }
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                return false;
            }
            return true;
        }
        
        private String getSelectProductUpdate(Integer productDivision){
            return "SELECT product_division, product_id, price, insert_date, update_date\n" +
                "FROM mst_use_product_update\n" +
                "WHERE product_division = " + SQLUtil.convertForSQL(productDivision);
        }
        // ThuanNK end add 2014/02/25
}
