/*
 * WebcheckSettingPanel.java
 *
 * Created on 2010/07/06, 09:00
 */

package com.geobeck.sosia.pos.basicinfo.company;

import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.company.MstStaffAuth;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.util.SQLUtil;

/**
 *
 * @author  geobeck
 */
public class WebcheckSettingPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
    private ArrayList<MstStaffAuth> list = new ArrayList<MstStaffAuth>();
    private Integer selIndex = -1;
    private boolean isLoading = false;
	
    /** Creates new form WebcheckSettingPanel */
    public WebcheckSettingPanel()
    {
        super();
        
        isLoading = true;
        
        initComponents();

        staff.addItem(new MstStaff());
        SystemInfo.initStaffComponent(staff);
        staff.setSelectedIndex(0);

        lblMsgLicense.setText("スタッフライセンスは現在「" + SystemInfo.getSetteing().getWebcheck() + "」ライセンスまで登録可能です。");

        addMouseCursorChange();
        this.setSize(490, 500);
        this.setTitle("WEBチェック設定");
        this.setListener();
        
        isLoading = false;
        
        this.init();
    }
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        webcheckTypeGroup = new javax.swing.ButtonGroup();
        managerScrollPane = new javax.swing.JScrollPane();
        webcheckTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        shopLabel = new javax.swing.JLabel();
        staffClassNameLabel = new javax.swing.JLabel();
        displayReservationLabel = new javax.swing.JLabel();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        loginID = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)loginID.getDocument()).setDocumentFilter(
            new CustomFilter(32, CustomFilter.ALPHAMERIC));
        password = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)password.getDocument()).setDocumentFilter(
            new CustomFilter(32, CustomFilter.ALPHAMERIC));
        jLabel5 = new javax.swing.JLabel();
        staffNo = new javax.swing.JFormattedTextField();
        ((PlainDocument)staffNo.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.ALPHAMERIC));
        staff = new javax.swing.JComboBox();
        rdoStaff = new javax.swing.JRadioButton();
        rdoOwner = new javax.swing.JRadioButton();
        addButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        lblMsg1 = new javax.swing.JLabel();
        lblMsgLicense = new javax.swing.JLabel();
        lblMsg3 = new javax.swing.JLabel();
        lblMsg4 = new javax.swing.JLabel();

        setFocusCycleRoot(true);

        managerScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        webcheckTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "区分", "スタッフ名", "ログインID", "パスワード"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        webcheckTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        webcheckTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        webcheckTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        webcheckTable.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(webcheckTable, SystemInfo.getTableHeaderRenderer());
        webcheckTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(webcheckTable);
        webcheckTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                webcheckTableMouseReleased(evt);
            }
        });
        webcheckTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                webcheckTableKeyReleased(evt);
            }
        });
        managerScrollPane.setViewportView(webcheckTable);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);

        shopLabel.setText("区分");
        jPanel1.add(shopLabel);
        shopLabel.setBounds(10, 20, 60, 21);

        staffClassNameLabel.setText("ログインID");
        jPanel1.add(staffClassNameLabel);
        staffClassNameLabel.setBounds(10, 80, 60, 21);

        displayReservationLabel.setText("パスワード");
        jPanel1.add(displayReservationLabel);
        displayReservationLabel.setBounds(10, 110, 60, 21);

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });
        jPanel1.add(renewButton);
        renewButton.setBounds(270, 140, 92, 25);

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteButton);
        deleteButton.setBounds(370, 140, 92, 25);

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(closeButton);
        closeButton.setBounds(370, 10, 92, 25);

        loginID.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        loginID.setColumns(20);
        jPanel1.add(loginID);
        loginID.setBounds(100, 80, 170, 21);

        password.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        password.setColumns(64);
        jPanel1.add(password);
        password.setBounds(100, 110, 170, 21);

        jLabel5.setText("スタッフ");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 50, 60, 21);

        staffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffNo.setEnabled(false);
        staffNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                staffNoFocusLost(evt);
            }
        });
        jPanel1.add(staffNo);
        staffNo.setBounds(100, 50, 30, 21);

        staff.setMaximumRowCount(15);
        staff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staff.setEnabled(false);
        staff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffActionPerformed(evt);
            }
        });
        jPanel1.add(staff);
        staff.setBounds(140, 50, 130, 21);

        webcheckTypeGroup.add(rdoStaff);
        rdoStaff.setText("スタッフ");
        rdoStaff.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoStaff.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoStaff.setOpaque(false);
        rdoStaff.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoStaffStateChanged(evt);
            }
        });
        jPanel1.add(rdoStaff);
        rdoStaff.setBounds(170, 20, 70, 20);

        webcheckTypeGroup.add(rdoOwner);
        rdoOwner.setSelected(true);
        rdoOwner.setText("オーナー");
        rdoOwner.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoOwner.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoOwner.setOpaque(false);
        rdoOwner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoOwnerStateChanged(evt);
            }
        });
        jPanel1.add(rdoOwner);
        rdoOwner.setBounds(100, 20, 70, 20);

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton);
        addButton.setBounds(170, 140, 92, 25);

        clearButton.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg"));
        clearButton.setBorderPainted(false);
        clearButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg"));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        jPanel1.add(clearButton);
        clearButton.setBounds(70, 140, 92, 25);

        lblMsg1.setForeground(java.awt.Color.red);
        lblMsg1.setText(" 　変更する場合は、一度削除してから再登録してください。");

        lblMsgLicense.setForeground(java.awt.Color.blue);
        lblMsgLicense.setText("スタッフライセンスは現在3ライセンスまで登録可能です。");

        lblMsg3.setForeground(java.awt.Color.blue);
        lblMsg3.setText("スタッフライセンスの追加を希望される場合は、営業担当までご連絡ください。");

        lblMsg4.setForeground(java.awt.Color.red);
        lblMsg4.setText("※ログインIDは一度登録すると変更ができません。");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, managerScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, lblMsg3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, lblMsgLicense, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, lblMsg1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, lblMsg4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(managerScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblMsg4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(lblMsg1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblMsgLicense, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(lblMsg3)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        ((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed

            //削除確認
            if (MessageDialog.showYesNoDialog(
                    this,
                    "ログインID " + MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, list.get(selIndex).getLoginID()),
                    this.getTitle(),
                    JOptionPane.WARNING_MESSAGE) != JOptionPane.YES_OPTION)
            {
                return;
            }

            this.delete();

	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
            if (this.checkInput(false)) {
                this.regist();
            }
	}//GEN-LAST:event_renewButtonActionPerformed

        private void webcheckTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_webcheckTableMouseReleased
            this.changeCurrentData();
        }//GEN-LAST:event_webcheckTableMouseReleased

        private void webcheckTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_webcheckTableKeyReleased
            this.changeCurrentData();
        }//GEN-LAST:event_webcheckTableKeyReleased

        private void staffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_staffNoFocusLost

	if (!staffNo.getText().equals("")) {
            this.setStaff(staffNo.getText());
        }else{
            staff.setSelectedIndex(0);
        }

}//GEN-LAST:event_staffNoFocusLost

        private void staffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffActionPerformed

	MstStaff ms= (MstStaff)staff.getSelectedItem();

        if (ms != null) {
            if (ms.getStaffID() != null) {
		staffNo.setText(ms.getStaffNo());
	    }

	    if (staff.getSelectedIndex() == 0) {
                staffNo.setText("");
            }
        }

}//GEN-LAST:event_staffActionPerformed

        private void rdoOwnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoOwnerStateChanged
            ownerStaffChanged();
        }//GEN-LAST:event_rdoOwnerStateChanged

        private void rdoStaffStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoStaffStateChanged
            ownerStaffChanged();
        }//GEN-LAST:event_rdoStaffStateChanged

        private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
            if (this.checkInput(true)) {
                this.regist();
            }
}//GEN-LAST:event_addButtonActionPerformed

        private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed

            this.refresh();

}//GEN-LAST:event_clearButtonActionPerformed
	
        private void ownerStaffChanged() {
            if (rdoOwner.isSelected()) {
                staff.setSelectedIndex(0);
                staffNo.setEnabled(false);
                staff.setEnabled(false);
            } else {
                staffNo.setEnabled(true);
                staff.setEnabled(true);
            }
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel displayReservationLabel;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblMsg1;
    private javax.swing.JLabel lblMsg3;
    private javax.swing.JLabel lblMsg4;
    private javax.swing.JLabel lblMsgLicense;
    private com.geobeck.swing.JFormattedTextFieldEx loginID;
    private javax.swing.JScrollPane managerScrollPane;
    private com.geobeck.swing.JFormattedTextFieldEx password;
    private javax.swing.JRadioButton rdoOwner;
    private javax.swing.JRadioButton rdoStaff;
    private javax.swing.JButton renewButton;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JComboBox staff;
    private javax.swing.JLabel staffClassNameLabel;
    private javax.swing.JFormattedTextField staffNo;
    private javax.swing.JTable webcheckTable;
    private javax.swing.ButtonGroup webcheckTypeGroup;
    // End of variables declaration//GEN-END:variables
	
    /**
     * FocusTraversalPolicy
     */
    private MstStaffAuthFocusTraversalPolicy ftp = new MstStaffAuthFocusTraversalPolicy();
	
    /**
     * FocusTraversalPolicyを取得する。
     * @return FocusTraversalPolicy
     */
    public MstStaffAuthFocusTraversalPolicy getFocusTraversalPolicy()
    {
        return ftp;
    }

    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange()
    {
        SystemInfo.addMouseCursorChange(closeButton);
        SystemInfo.addMouseCursorChange(addButton);
        SystemInfo.addMouseCursorChange(renewButton);
        SystemInfo.addMouseCursorChange(deleteButton);
        SystemInfo.addMouseCursorChange(clearButton);
    }

    /**
     * コンポーネントの各リスナーをセットする。
     */
    private void setListener()
    {
        loginID.addKeyListener(SystemInfo.getMoveNextField());
        loginID.addFocusListener(SystemInfo.getSelectText());
        password.addKeyListener(SystemInfo.getMoveNextField());
        password.addFocusListener(SystemInfo.getSelectText());
    }
	
    /**
     * 初期化処理を行う。
     */
    private void init()
    {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("     *");
        sql.append(" from");
        sql.append("     mst_staff_auth");
        sql.append(" order by");
        sql.append("    case when owner_flg then 0 else 1 end");
        
        try {
            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
            
            list.clear();
            
            while (rs.next()) {
                MstStaffAuth mm = new MstStaffAuth();
                mm.setData(rs);
                list.add(mm);
            }                
            
        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        this.showData();
    }
	
    /**
     * 再表示を行う。
     */
    private void refresh()
    {
        this.init();
        
        //入力をクリアする
        this.clear();

        loginID.requestFocusInWindow();
    }
	
    /**
     * 入力項目をクリアする。
     */
    private void clear()
    {
        selIndex = -1;
        staff.setSelectedIndex(0);
        loginID.setText("");
        loginID.setEnabled(true);
        password.setText("");
        
        if (0 < webcheckTable.getRowCount()) {
            webcheckTable.removeRowSelectionInterval(0, webcheckTable.getRowCount() - 1);
        }

        this.changeCurrentData();
    }
	
    /**
     * データを表示する。
     */
    private void showData()
    {
        
        SwingUtil.clearTable(webcheckTable);
        DefaultTableModel model = (DefaultTableModel)webcheckTable.getModel();

        //全行削除
        model.setRowCount(0);
        webcheckTable.removeAll();

        for (MstStaffAuth mm : list) {
            Object[] rowData =
            {
                mm.getOwnerFlg() ? "オーナー" : "スタッフ",
                mm.getStaff(),
                mm.getLoginID(),
                mm.getPassword()
            };
            model.addRow(rowData);
        }
        
    }

    /**
     * 選択データが変更されたときの処理を行う。
     */
    private void changeCurrentData()
    {
        int index = webcheckTable.getSelectedRow();

        if (0 <= index && index < list.size() && index != selIndex) {
            selIndex = index;

            //選択されているデータを表示
            this.showCurrentData();
        }

        loginID.setEnabled(!(0 <= selIndex));
        addButton.setEnabled(!(0 <= selIndex));
        renewButton.setEnabled(0 <= selIndex);
        deleteButton.setEnabled(0 <= selIndex);
    }
	
    /**
     * 選択されたデータを入力項目に表示する。
     */
    private void showCurrentData()
    {
        if (list.get(selIndex).getOwnerFlg()) {
            rdoOwner.setSelected(true);
            setStaff("");
        } else {
            rdoStaff.setSelected(true);
            setStaff(list.get(selIndex).getStaff().getStaffID());
        }
        loginID.setText(list.get(selIndex).getLoginID());
        password.setText(list.get(selIndex).getPassword());
    }
	
	
    /**
     * 入力チェックを行う。
     * @return 入力エラーがなければtrueを返す。
     */
    private boolean checkInput(boolean isAdd)
    {
        // スタッフ
        if (rdoStaff.isSelected()) {
            if (staff.getSelectedIndex() == 0) {
                MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "スタッフ"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                staffNo.requestFocusInWindow();
                return false;
            }
        }

        // ログインID
        if (loginID.getText().equals("")) {
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ログインID"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            loginID.requestFocusInWindow();
            return false;
        }

        // パスワード
        if (password.getText().equals("")) {
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "パスワード"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            password.requestFocusInWindow();
            return false;
        }

        // オーナーの重複登録チェック
        if (rdoOwner.isSelected()) {
            try {
                if (isAdd) {
                    String sql = "select 1 from mst_staff_auth where owner_flg = true";
                    ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql);
                    if (rs.next()) {
                        MessageDialog.showMessageDialog(
                            this,
                            "オーナーは既に登録されています。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                        loginID.requestFocusInWindow();
                        return false;
                    }

                } else {

                    String sql = "select 1 from mst_staff_auth where owner_flg = true and login_id = " + SQLUtil.convertForSQL(loginID.getText());
                    ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql);
                    if (!rs.next()) {
                        MessageDialog.showMessageDialog(
                            this,
                            "このログインIDは登録されていません。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                        loginID.requestFocusInWindow();
                        return false;
                    }

                }

            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }

        // ライセンス数オーバーチェック
        if (rdoStaff.isSelected()) {
            try {

                String sql = "";
                ResultSetWrapper rs = null;

                if (isAdd) {

                    sql = "select 1 from mst_staff_auth where owner_flg = false and login_id = " + SQLUtil.convertForSQL(loginID.getText());
                    rs = SystemInfo.getConnection().executeQuery(sql);
                    if (rs.next()) {
                        MessageDialog.showMessageDialog(
                            this,
                            "このログインIDは既に登録されています。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                        loginID.requestFocusInWindow();
                        return false;
                    }

                    sql = "select count(*) as cnt from mst_staff_auth where owner_flg = false and login_id <> " + SQLUtil.convertForSQL(loginID.getText());
                    try {
                        rs = SystemInfo.getConnection().executeQuery(sql);
                        if (rs.next()) {
                            if (rs.getInt("cnt") >= SystemInfo.getSetteing().getWebcheck()) {
                                MessageDialog.showMessageDialog(
                                    this,
                                    "ライセンス数を超えています。",
                                    this.getTitle(),
                                    JOptionPane.ERROR_MESSAGE);
                                loginID.requestFocusInWindow();
                                return false;
                            }
                        }
                    } catch(SQLException e) {
                        SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                    }

                } else {

                    sql = "select 1 from mst_staff_auth where owner_flg = false and login_id = " + SQLUtil.convertForSQL(loginID.getText());
                    rs = SystemInfo.getConnection().executeQuery(sql);
                    if (!rs.next()) {
                        MessageDialog.showMessageDialog(
                            this,
                            "このログインIDは登録されていません。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                        loginID.requestFocusInWindow();
                        return false;
                    }

                }

            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }

        return	true;
    }
	
	
    /**
     * 入力されたデータを登録する。
     * @return true - 成功
     */
    private boolean regist()
    {
        boolean result = false;

        MstStaffAuth mm = new MstStaffAuth();

        mm.setLoginID(loginID.getText());
        mm.setPassword(password.getText());
        mm.setOwnerFlg(rdoOwner.isSelected());
        if (staff.getSelectedIndex() > 0) {
            mm.setStaff((MstStaff)staff.getSelectedItem());
        }

        ConnectionWrapper con = SystemInfo.getConnection();

        try {
            con.begin();

            if (mm.regist(con)) {
                con.commit();
                this.refresh();
                result = true;
            } else {
                con.rollback();
            }
        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return result;
    }


    /**
     * 選択されたデータを削除する。
     * @return true - 成功
     */
    private boolean delete()
    {
        boolean result = false;
        MstStaffAuth mm = null;

        if (0 <= selIndex && selIndex < list.size()) {
            mm = list.get(selIndex);
        }

        ConnectionWrapper con = SystemInfo.getConnection();

        try {
            con.begin();

            if (mm.delete(con)) {
                con.commit();
                this.refresh();
                result = true;
            } else {
                con.rollback();
            }

        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return	result;
    }

    /**
     * FocusTraversalPolicy
     */
    private class MstStaffAuthFocusTraversalPolicy extends FocusTraversalPolicy
    {
        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。
         * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
         */
        public Component getComponentAfter(Container aContainer, Component aComponent)
        {
            if (aComponent.equals(loginID)) {
                return password;
            }

            return loginID;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。
         * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
         */
        public Component getComponentBefore(Container aContainer, Component aComponent)
        {
            if (aComponent.equals(password)) {
                return loginID;
            }

            return loginID;
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。
         * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
         * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer)
        {
            return loginID;
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。
         * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
         * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer)
        {
            return password;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。
         * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer)
        {
            return loginID;
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
         * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
         * 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
         * または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        public Component getInitialComponent(Window window)
        {
            return loginID;
        }
    }

    /**
     * JTableの列幅を初期化する。
     */
    private void initTableColumnWidth()
    {
        //列の幅を設定する。
        webcheckTable.getColumnModel().getColumn(0).setPreferredWidth(80);
        webcheckTable.getColumnModel().getColumn(1).setPreferredWidth(130);
    }


    /**
     * 列の表示位置を設定するTableCellRenderer
     */
    private class TableCellAlignRenderer extends DefaultTableCellRenderer
    {
        /** Creates a new instance of ReservationTableCellRenderer */
        public TableCellAlignRenderer()
        {
                super();
        }

        /**
         * テーブルセルレンダリングを返します。
         * @param table JTable
         * @param value セルに割り当てる値
         * @param isSelected セルが選択されている場合は true
         * @param hasFocus フォーカスがある場合は true
         * @param row 行
         * @param column 列
         * @return テーブルセルレンダリング
         */
        public Component getTableCellRendererComponent(JTable table,
                        Object value, boolean isSelected, boolean hasFocus, int row, int column)
        {
            super.getTableCellRendererComponent(table, value,
                            isSelected, hasFocus, row, column);

            switch (column) {
                default:
                    super.setHorizontalAlignment(SwingConstants.LEFT);
                    break;
            }

            return this;
        }
    }

    private void setStaff(String staffNo)
    {
	staff.setSelectedIndex(0);

	for (int i = 1; i < staff.getItemCount(); i++) {
	    if (((MstStaff)staff.getItemAt(i)).getStaffNo().equals(staffNo)) {
		staff.setSelectedIndex(i);
		break;
	    }
	}
    }

    private void setStaff(Integer staffID)
    {
	staff.setSelectedIndex(0);

	for (int i = 1; i < staff.getItemCount(); i++) {
	    if (((MstStaff)staff.getItemAt(i)).getStaffID().equals(staffID)) {
		staff.setSelectedIndex(i);
		break;
	    }
	}
    }

}
