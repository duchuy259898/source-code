/*
 * StaffWorkTimePanel.java
 *
 * Created on 2009/12/01, 10:00
 */

package com.geobeck.sosia.pos.basicinfo.company;

import java.util.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.awt.*;
import java.util.logging.*;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;

import com.geobeck.swing.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.util.*;

import com.geobeck.sql.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.data.company.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.report.util.*;
import com.geobeck.swing.MessageDialog;
import com.geobeck.sosia.pos.search.SearchHelpStaffDialog;
import com.geobeck.sosia.pos.basicinfo.WorkTimePasswordDialog;
import com.geobeck.sosia.pos.hair.report.util.*;
import org.apache.commons.lang.math.NumberUtils;

/**
 *
 * @author  geobeck
 */
public class StaffWorkTimePanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
    private ArrayList<StaffWorkTime> swts = new ArrayList<StaffWorkTime>();
    private ArrayList<StaffWorkTime> swtsHelp = new ArrayList<StaffWorkTime>();
    private boolean isLoading = false;
    private GregorianCalendar currentDate = null;
    
    /** Creates new form StaffWorkTimePanel */
    public StaffWorkTimePanel()
    {
        initComponents();
        this.setPath("");
        this.setTitle("èoëﬁãŒìoò^");
        this.setSize(820,690);

        isLoading = true;
        SystemInfo.initGroupShopComponents(shop, 2);
        date.setDate(SystemInfo.getSystemDate());
        addMouseCursorChange();
        setKeyListener();        
        this.initTableColumnWidth();
        
//        if (SystemInfo.isGroup() || SystemInfo.getGroup().getShops().size() == 1) {
//            helpStaffButton.setEnabled(false);
//        }

        setTimeCardDate(Calendar.getInstance().getTime());
        
        isLoading = false;
        
        this.showData();
    }
    
    private void setTimeCardDate(java.util.Date dt) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(dt);
        int nowYear = cal.get(Calendar.YEAR);
        int nowMonth = cal.get(Calendar.MONTH) + 1; 
        this.txtYear.setText(String.valueOf(nowYear));
        this.cboMonth.setSelectedIndex(nowMonth - 1);        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        helpStaffButton = new javax.swing.JButton();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        ObjDateLabel = new javax.swing.JLabel();
        date = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        showButton = new javax.swing.JButton();
        workTimeScroolPane = new javax.swing.JScrollPane();
        workTime = new com.geobeck.swing.JTableEx();
        ObjDateLabel1 = new javax.swing.JLabel();
        pnlTimeCard = new javax.swing.JPanel();
        txtYear = new com.geobeck.swing.JTextFieldEx();
        ((PlainDocument)txtYear.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        jLabel2 = new javax.swing.JLabel();
        cboMonth = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        printTimeCardButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cutOffLabel = new javax.swing.JLabel();
        TimeHelpPanel = new javax.swing.JPanel();
        workTimeHelpScroolPane = new javax.swing.JScrollPane();
        workTimeHelp = new com.geobeck.swing.JTableEx();
        jLabel1 = new javax.swing.JLabel();

        setFocusCycleRoot(true);

        jPanel2.setOpaque(false);

        helpStaffButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/" + SystemInfo.getSkinPackage() + "/menu/helpstaff_off.jpg")));
        helpStaffButton.setBorderPainted(false);
        helpStaffButton.setContentAreaFilled(false);
        helpStaffButton.setFocusable(false);
        helpStaffButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/" + SystemInfo.getSkinPackage() + "/menu/helpstaff_on.jpg")));
        helpStaffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpStaffButtonActionPerformed(evt);
            }
        });

        shopLabel.setText("ìXï‹");

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        ObjDateLabel.setText("èoãŒì˙");

        date.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        date.setDate(new java.util.Date());
        date.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dateItemStateChanged(evt);
            }
        });
        date.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dateFocusGained(evt);
            }
        });

        showButton.setIcon(SystemInfo.getImageIcon("/button/common/today_off.jpg"));
        showButton.setBorderPainted(false);
        showButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/today_on.jpg"));
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(shopLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ObjDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(showButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(helpStaffButton, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(309, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helpStaffButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(ObjDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(showButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        workTime.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ÉXÉ^ÉbÉtñº", "ÉVÉtÉg", "èoãŒ", "ëﬁãŒ", "<html>ãxåe<br>äJén</html>", "<html>ãxåe<br>èIóπ</html>", "<html>ãxåe<br>âÒêî</html>", "<html>ãxåe<br>éûä‘</html>", "<html>é¿ì≠<br>éûä‘</html>", "èCê≥", "çÌèú"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workTime.setSelectionBackground(new java.awt.Color(255, 210, 142));
        workTime.setSelectionForeground(new java.awt.Color(0, 0, 0));
        workTime.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        workTime.getTableHeader().setReorderingAllowed(false);
        workTime.setDefaultRenderer(String.class, new WorkTimeTableCellRenderer());
        SwingUtil.setJTableHeaderRenderer(workTime, SystemInfo.getTableHeaderRenderer());
        workTime.setRowHeight(33);
        workTimeScroolPane.setViewportView(workTime);
        workTime.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        ObjDateLabel1.setForeground(java.awt.Color.blue);
        ObjDateLabel1.setText("<html>\nÅ¶ãxåeÇÕ1ì˙5âÒÇ‹Ç≈ìoò^Ç∑ÇÈÇ±Ç∆Ç™Ç≈Ç´Ç‹Ç∑ÅB<br>\nÅ¶Ç±ÇÃâÊñ ÇÃãxåeéûä‘ÇÕÉPÅ[É^ÉCó\ñÒÇÃãxåeéûä‘Ç∆ÇÕòAìÆÇµÇƒÇ®ÇËÇ‹ÇπÇÒÅB<br>\nÅ@ Ç†Ç≠Ç‹Ç≈É^ÉCÉÄÉJÅ[ÉhÇ∆ÇµÇƒÇÃãxåeéûä‘ÉJÉEÉìÉgÇ∆Ç»ÇËÇ‹Ç∑ÇÃÇ≈ÅA<br>\nÅ@ ÉPÅ[É^ÉCó\ñÒÇ∆ÇÕï ä«óùÇ∆Ç»ÇËÇ‹Ç∑ÇÃÇ≈Ç≤óπè≥Ç≠ÇæÇ≥Ç¢ÅB\n</html>");

        pnlTimeCard.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS UI Gothic", 1, 12))); // NOI18N
        pnlTimeCard.setOpaque(false);

        txtYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txtYear.setColumns(4);
        txtYear.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtYear.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtYearFocusLost(evt);
            }
        });

        jLabel2.setText("îN");

        cboMonth.setMaximumRowCount(12);
        cboMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        cboMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel3.setText("åé");

        printTimeCardButton.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        printTimeCardButton.setBorderPainted(false);
        printTimeCardButton.setContentAreaFilled(false);
        printTimeCardButton.setFocusCycleRoot(true);
        printTimeCardButton.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        printTimeCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printTimeCardButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("MS UI Gothic", 1, 12)); // NOI18N
        jLabel4.setText("É^ÉCÉÄÉJÅ[Éh");

        cutOffLabel.setText("20ì˙í˜Çﬂ");

        javax.swing.GroupLayout pnlTimeCardLayout = new javax.swing.GroupLayout(pnlTimeCard);
        pnlTimeCard.setLayout(pnlTimeCardLayout);
        pnlTimeCardLayout.setHorizontalGroup(
            pnlTimeCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTimeCardLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTimeCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTimeCardLayout.createSequentialGroup()
                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(cboMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(pnlTimeCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlTimeCardLayout.createSequentialGroup()
                        .addComponent(cutOffLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(pnlTimeCardLayout.createSequentialGroup()
                        .addComponent(printTimeCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        pnlTimeCardLayout.setVerticalGroup(
            pnlTimeCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTimeCardLayout.createSequentialGroup()
                .addGroup(pnlTimeCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cutOffLabel)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlTimeCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlTimeCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3))
                    .addComponent(printTimeCardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        workTimeHelp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ÉXÉ^ÉbÉtñº", "ÉVÉtÉg", "èoãŒ", "ëﬁãŒ", "<html>ãxåe<br>äJén</html>", "<html>ãxåe<br>èIóπ</html>", "<html>ãxåe<br>âÒêî</html>", "<html>ãxåe<br>éûä‘</html>", "<html>é¿ì≠<br>éûä‘</html>", "èCê≥", "çÌèú"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workTimeHelp.setSelectionBackground(new java.awt.Color(255, 210, 142));
        workTimeHelp.setSelectionForeground(new java.awt.Color(0, 0, 0));
        workTimeHelp.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        workTimeHelp.getTableHeader().setReorderingAllowed(false);
        workTimeHelp.setDefaultRenderer(String.class, new WorkTimeTableCellRenderer());
        SwingUtil.setJTableHeaderRenderer(workTimeHelp, SystemInfo.getTableHeaderRenderer());
        workTimeHelp.setRowHeight(33);
        workTimeHelpScroolPane.setViewportView(workTimeHelp);
        workTimeHelp.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel1.setFont(new java.awt.Font("MS PGothic", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 153));
        jLabel1.setText("ÉwÉãÉvÉXÉ^ÉbÉt ");

        javax.swing.GroupLayout TimeHelpPanelLayout = new javax.swing.GroupLayout(TimeHelpPanel);
        TimeHelpPanel.setLayout(TimeHelpPanelLayout);
        TimeHelpPanelLayout.setHorizontalGroup(
            TimeHelpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TimeHelpPanelLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(workTimeHelpScroolPane)
        );
        TimeHelpPanelLayout.setVerticalGroup(
            TimeHelpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TimeHelpPanelLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(workTimeHelpScroolPane, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(workTimeScroolPane, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE)
                    .addComponent(ObjDateLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addComponent(pnlTimeCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TimeHelpPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlTimeCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(workTimeScroolPane, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TimeHelpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ObjDateLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtYearFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYearFocusLost
        NumberUtils numUtil = new NumberUtils();
        if(!numUtil.isNumber(this.txtYear.getText())) {
            this.txtYear.setText(String.valueOf(Calendar.getInstance().get(Calendar.YEAR)));
        }
    }//GEN-LAST:event_txtYearFocusLost

    private void printTimeCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printTimeCardButtonActionPerformed

        printTimeCardButton.setCursor(null);

        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            printTimeCard();

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        
    }//GEN-LAST:event_printTimeCardButtonActionPerformed

    private void helpStaffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpStaffButtonActionPerformed

        //IVS_LVTu start edit 2016/09/30 New request #54109
//        SearchHelpStaffDialog shs = new SearchHelpStaffDialog(parentFrame, ((MstShop)shop.getSelectedItem()), true);
//        shs.setVisible(true);
//
//        if ( shs.getSelectedStaff() != null &&
//              !shs.getSelectedStaff().getStaffID().equals(""))
//        {
//            if (!helpStaffContains(shs.getSelectedStaff())) {
//                try {
//                    StaffWorkTime swt = new StaffWorkTime();
//                    swt.setStaff(shs.getSelectedStaff());
//                    GregorianCalendar cal = new GregorianCalendar();
//                    cal.setTime(date.getDate());
//                    swt.setWorkingDate(cal);
//                    swt.setWorkingShopId(((MstShop)shop.getSelectedItem()).getShopID());
//                    swt.regist(SystemInfo.getConnection());
//
//                    swts.add(swt);
//
//                } catch (Exception e) {
//                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
//                }
//                showData();
//            } else {
//                
//                MessageDialog.showMessageDialog(
//                    this,
//                    "Åu" + shs.getSelectedStaff().getFullStaffName() + "ÅvÇÕÅAä˘Ç…ìoò^Ç≥ÇÍÇƒÇ¢Ç‹Ç∑ÅB",
//                    "ÉwÉãÉvÉXÉ^ÉbÉtìoò^",
//                    JOptionPane.WARNING_MESSAGE);
//            }
//        }
//
//        shs.dispose();
//        shs = null;

        Calendar calen = Calendar.getInstance();
        calen.setTime(date.getDate());

        RegistShopEmployeePanel.ShowDialog(parentFrame, (MstShop)shop.getSelectedItem(), calen.getTime() );
        showData();
        //IVS_LVTu end edit 2016/09/30 New request #54109
    }//GEN-LAST:event_helpStaffButtonActionPerformed

    private boolean helpStaffContains(MstStaff ms) {
        
        boolean result = false;
        
        Iterator itr = swts.iterator();
        while (itr.hasNext()) {
            if (ms.getStaffID().equals(((StaffWorkTime)itr.next()).getStaff().getStaffID())) {
                result = true;
                break;
            }
        }
        
        return result;
    }
    
    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
        date.setDate(SystemInfo.getSystemDate());
    }//GEN-LAST:event_showButtonActionPerformed

    private void dateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateFocusGained
        date.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_dateFocusGained

    private void dateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dateItemStateChanged
        setTimeCardDate(date.getDate());
        this.showData();
    }//GEN-LAST:event_dateItemStateChanged

    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed

        int d = ((MstShop)shop.getSelectedItem()).getCutoffDay().intValue();
        cutOffLabel.setText(d == 31 ? "ññí˜Çﬂ" : d + "ì˙í˜Çﬂ");

        this.showData();
    }//GEN-LAST:event_shopActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ObjDateLabel;
    private javax.swing.JLabel ObjDateLabel1;
    private javax.swing.JPanel TimeHelpPanel;
    private javax.swing.JComboBox cboMonth;
    private javax.swing.JLabel cutOffLabel;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo date;
    private javax.swing.JButton helpStaffButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel pnlTimeCard;
    private javax.swing.JButton printTimeCardButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JButton showButton;
    private com.geobeck.swing.JTextFieldEx txtYear;
    private com.geobeck.swing.JTableEx workTime;
    private com.geobeck.swing.JTableEx workTimeHelp;
    private javax.swing.JScrollPane workTimeHelpScroolPane;
    private javax.swing.JScrollPane workTimeScroolPane;
    // End of variables declaration//GEN-END:variables

    private Map mapSheet = new HashMap();
    private Map mapRowNo = new HashMap();
    
    /**
     * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
     */
    private void addMouseCursorChange()
    {
        SystemInfo.addMouseCursorChange(showButton);
        SystemInfo.addMouseCursorChange(helpStaffButton);
        SystemInfo.addMouseCursorChange(printTimeCardButton);
    }
    
    private void setKeyListener()
    {
        date.addKeyListener(SystemInfo.getMoveNextField());
        date.addFocusListener(SystemInfo.getSelectText());
    }
    
    /**
     * èoëﬁãŒéÊìæópSQLÇéÊìæÇ∑ÇÈ
     */
    private String getSelectSQL()
    {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      a.*");
        sql.append("     ,coalesce(b.working_date, " + SQLUtil.convertForSQLDateOnly(date.getDate()) + ") as working_date");
        sql.append("     ,coalesce(b.shop_id, a.shop_id) as working_shop_id");
        sql.append("     ,b.working_start_time");
        sql.append("     ,b.working_finish_time");
        sql.append("     ,b.recess_start_time1");
        sql.append("     ,b.recess_finish_time1");
        sql.append("     ,b.recess_start_time2");
        sql.append("     ,b.recess_finish_time2");
        sql.append("     ,b.recess_start_time3");
        sql.append("     ,b.recess_finish_time3");
        sql.append("     ,b.recess_start_time4");
        sql.append("     ,b.recess_finish_time4");
        sql.append("     ,b.recess_start_time5");
        sql.append("     ,b.recess_finish_time5");
        sql.append("     ,a.shop_id as staff_shop_id");

        if (((MstShop)shop.getSelectedItem()).isShiftGearWorking()) {

            // èoëﬁãŒÉVÉtÉgòAìÆÇ†ÇË
            sql.append(" ,coalesce(");
            sql.append("     case when length(trim(nullif(d.start_time,'0000'))) > 0 then");
            sql.append("         substr(d.start_time, 1, 2) || 'ÅF' || substr(d.start_time, 3) || 'Å`' ||");
            sql.append("     case when length(trim(nullif(d.end_time,'0000'))) > 0 then");
            sql.append("         substr(d.end_time, 1, 2) || 'ÅF' || substr(d.end_time, 3)");
            sql.append("     end");
            sql.append("  end, 'ãxÇ›') as shift_time");

        } else {
            
            // èoëﬁãŒÉVÉtÉgòAìÆÇ»Çµ
            sql.append(" ,'Å|' as shift_time");
        }

        sql.append("     ,case");
        sql.append("         when coalesce(b.recess_finish_count, 0) = 5 then 3");
        sql.append("         when coalesce(b.recess_start_count, 0) = coalesce(b.recess_finish_count, 0) then 1");
        sql.append("         else 2");
        sql.append("      end as recess_type");
        sql.append(" from");
        sql.append("     mst_staff a");
        sql.append("         left join");
        sql.append("             (");
        sql.append("                 select");
        sql.append("                      *");
        sql.append("                     ,case when recess_start_time1 is null then 0 else 1 end +");
        sql.append("                      case when recess_start_time2 is null then 0 else 1 end +");
        sql.append("                      case when recess_start_time3 is null then 0 else 1 end +");
        sql.append("                      case when recess_start_time4 is null then 0 else 1 end +");
        sql.append("                      case when recess_start_time5 is null then 0 else 1 end as recess_start_count");
        sql.append("                     ,case when recess_finish_time1 is null then 0 else 1 end +");
        sql.append("                      case when recess_finish_time2 is null then 0 else 1 end +");
        sql.append("                      case when recess_finish_time3 is null then 0 else 1 end +");
        sql.append("                      case when recess_finish_time4 is null then 0 else 1 end +");
        sql.append("                      case when recess_finish_time5 is null then 0 else 1 end as recess_finish_count");
        sql.append("                 from");
        sql.append("                     data_staff_work_time");
        sql.append("             ) b");
        sql.append("                on a.staff_id = b.staff_id");
        sql.append("               and b.working_date = " + SQLUtil.convertForSQLDateOnly(date.getDate()));
        sql.append("               and b.delete_date is null");
        sql.append("         left join data_schedule c");
        sql.append("                on a.staff_id = c.staff_id");
        sql.append("               and c.schedule_date = " + SQLUtil.convertForSQLDateOnly(date.getDate()));
        sql.append("         left join mst_shift d");
        sql.append("                on a.shop_id = d.shop_id");
        sql.append("               and c.shift_id = d.shift_id");
        sql.append(" where");
        sql.append("         a.delete_date is null");
        sql.append("     and " + SQLUtil.convertForSQL(((MstShop)shop.getSelectedItem()).getShopID()) + " in (a.shop_id, b.shop_id)");

        // ëºìXï‹Ç÷ÇÃÉwÉãÉvÉXÉ^ÉbÉtÇÕèúäOÇ∑ÇÈ
        sql.append("     and a.staff_id not in");
        sql.append("         (");
        sql.append("             select");
        sql.append("                 a.staff_id");
        sql.append("             from");
        sql.append("                 mst_staff a");
        sql.append("                     join data_staff_work_time b");
        sql.append("                     using (staff_id)");
        sql.append("             where");
        sql.append("                     a.delete_date is null");
        sql.append("                 and b.delete_date is null");
        sql.append("                 and b.shop_id <> " + SQLUtil.convertForSQL(((MstShop)shop.getSelectedItem()).getShopID()));
        sql.append("                 and b.working_date = " + SQLUtil.convertForSQLDateOnly(date.getDate()));
        sql.append("         )");
        //IVS_LVTu start 2016/08/25 New request #54109
        sql.append("         and a.staff_id not in ( select staff_id from data_schedule_detail ");
	sql.append("         where schedule_date = c.schedule_date and shop_id = "+ SQLUtil.convertForSQL(((MstShop)shop.getSelectedItem()).getShopID()) +") ");
        //IVS_LVTu end 2016/08/25 New request #54109

        sql.append(" order by");
        sql.append("      case when a.shop_id = " + SQLUtil.convertForSQL(((MstShop)shop.getSelectedItem()).getShopID()) + " then 0 else 1 end");
        sql.append("     ,case when a.display_seq is null then 1 else 0 end");
        sql.append("     ,a.display_seq");
        sql.append("     ,lpad(a.staff_no, 10, '0')");
        sql.append("     ,a.staff_id");
        
        return sql.toString();

    }
    
    private void showData()
    {
        if (isLoading) return;

        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            swts.clear();
            swtsHelp.clear();
            try {
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(this.getSelectSQL());
                while (rs.next())
                {
                    StaffWorkTime swt = new StaffWorkTime();
                    swt.setData(rs);
                    swts.add(swt);
                }
                rs.close();
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            
            //IVS_LVTu start 2016/08/25 New request #54109
            // data_help
            try {
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(this.getSelectDataScheduleSQL());
                while (rs.next())
                {
                    StaffWorkTime swt = new StaffWorkTime();
                    swt.setData(rs);
                    swt.setScheduleTime(rs.getTime("start_time"), rs.getTime("end_time"));
                    swtsHelp.add(swt);
                }
                rs.close();
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            if (workTime.getCellEditor() != null) workTime.getCellEditor().stopCellEditing();
            SwingUtil.clearTable(workTime);

            DefaultTableModel model = (DefaultTableModel)workTime.getModel();
            
            if (workTimeHelp.getCellEditor() != null) workTimeHelp.getCellEditor().stopCellEditing();
            SwingUtil.clearTable(workTimeHelp);

            DefaultTableModel modelHelp = (DefaultTableModel)workTimeHelp.getModel();

            currentDate = new GregorianCalendar();
            currentDate.setTime(SystemInfo.getSystemDate());

            for (StaffWorkTime swt : swts)
            {
                model.addRow(new Object[]{
                    swt.getStaff(),
                    swt.getShiftTime(),
                    swt.getWorkingStartTime() != null ? formatTimeToJTextField(swt.getWorkingStartTime(), swt.getWorkingDate()) : getWorkStartButton(swt),
                    swt.getWorkingFinishTime() != null ? formatTimeToJTextField(swt.getWorkingFinishTime(), swt.getWorkingDate()) : getWorFinishButton(swt),
                    getRecessStartButton(swt),
                    getRecessFinishButton(swt),
                    getRecessCount(swt) + "âÒ",
                    formatTime(getRecessTotalTime(swt)),
                    formatTime(getWorkingTotalTime(swt)),
                    getUpdateButton(swt),
                    getDeleteButton(swt)
                });
            }
            
            for (StaffWorkTime swt : swtsHelp)
            {               
                TimeStaffHelpPanel tsh = new TimeStaffHelpPanel(swt, this.date.getDate());
                
                modelHelp.addRow(new Object[]{
                    swt.getStaff(),
                    tsh,
                    swt.getWorkingStartTime() != null ? formatTimeToJTextField(swt.getWorkingStartTime(), swt.getWorkingDate()) : getWorkStartButton(swt),
                    swt.getWorkingFinishTime() != null ? formatTimeToJTextField(swt.getWorkingFinishTime(), swt.getWorkingDate()) : getWorFinishButton(swt),
                    getRecessStartButton(swt),
                    getRecessFinishButton(swt),
                    getRecessCount(swt) + "âÒ",
                    formatTime(getRecessTotalTime(swt)),
                    formatTime(getWorkingTotalTime(swt)),
                    getUpdateButton(swt),
                    getDeleteButton(swt)
                });
            }
            
            if(swtsHelp.size() > 0) {
                TimeHelpPanel.setVisible(true);
            }else {
                TimeHelpPanel.setVisible(false);
            }
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        //IVS_LVTu end 2016/08/25 New request #54109
    }
    
    private String formatTime(int time) {

        int h = Double.valueOf(Math.ceil(time / 60)).intValue();
        int m = time - (h * 60);
        
        DecimalFormat df = new DecimalFormat("00");
        
        return h + "ÅF" + df.format(m);
    }
    
    /**
     * èoãŒÉ{É^ÉìéÊìæ
     */
    private JButton getWorkStartButton(final StaffWorkTime swt)
    {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/start_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/start_on.jpg")));
        button.setSize(48, 25);

        button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                try {
                    swt.setWorkingStartTime(new GregorianCalendar());
                    swt.regist(SystemInfo.getConnection());
                } catch (Exception e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
                showData();
            }
        });

        if (SystemInfo.isGroup() || swt.getShiftTime().equals("ãxÇ›") || isNotToday(swt)) button.setEnabled(false);

        return button;
    }
    
    /**
     * ëﬁãŒÉ{É^ÉìéÊìæ
     */
    private JButton getWorFinishButton(final StaffWorkTime swt)
    {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/start_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/start_on.jpg")));
        button.setSize(48, 25);
        
        boolean mode = true;
        mode = mode && swt.getWorkingStartTime() != null;
        mode = mode && !swt.getRecessType().equals(2);
        button.setEnabled(mode);
        
        button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                try {
                    swt.setWorkingFinishTime(new GregorianCalendar());
                    swt.regist(SystemInfo.getConnection());
                } catch (Exception e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
                showData();
            }
        });

        if (SystemInfo.isGroup() || swt.getShiftTime().equals("ãxÇ›") || isNotToday(swt)) button.setEnabled(false);

        return button;
    }

    /**
     * ãxåeäJénÉ{É^ÉìéÊìæ
     */
    private JButton getRecessStartButton(final StaffWorkTime swt)
    {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/start_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/start_on.jpg")));
        button.setSize(48, 25);
        
        boolean mode = true;
        mode = mode && swt.getWorkingStartTime() != null;
        mode = mode && swt.getWorkingFinishTime() == null;
        mode = mode && swt.getRecessType().equals(1);
        button.setEnabled(mode);
        
        button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                try {
                    switch (getRecessCount(swt))
                    {
                        case 0:
                            swt.setRecessStartTime1(new GregorianCalendar());
                            break;
                        case 1:
                            swt.setRecessStartTime2(new GregorianCalendar());
                            break;
                        case 2:
                            swt.setRecessStartTime3(new GregorianCalendar());
                            break;
                        case 3:
                            swt.setRecessStartTime4(new GregorianCalendar());
                            break;
                        case 4:
                            swt.setRecessStartTime5(new GregorianCalendar());
                            break;
                        default:
                            break;
                    }
                    
                    swt.regist(SystemInfo.getConnection());
                } catch (Exception e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
                showData();
            }
        });

        if (SystemInfo.isGroup() || swt.getShiftTime().equals("ãxÇ›") || isNotToday(swt)) button.setEnabled(false);

        return button;
    }

    /**
     * ãxåeèIóπÉ{É^ÉìéÊìæ
     */
    private JButton getRecessFinishButton(final StaffWorkTime swt)
    {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/start_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/start_on.jpg")));
        button.setSize(48, 25);

        boolean mode = true;
        mode = mode && swt.getWorkingStartTime() != null;
        mode = mode && swt.getWorkingFinishTime() == null;
        mode = mode && swt.getRecessType().equals(2);
        button.setEnabled(mode);

        button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                try {
                    switch (getRecessCount(swt))
                    {
                        case 0:
                            swt.setRecessFinishTime1(new GregorianCalendar());
                            break;
                        case 1:
                            swt.setRecessFinishTime2(new GregorianCalendar());
                            break;
                        case 2:
                            swt.setRecessFinishTime3(new GregorianCalendar());
                            break;
                        case 3:
                            swt.setRecessFinishTime4(new GregorianCalendar());
                            break;
                        case 4:
                            swt.setRecessFinishTime5(new GregorianCalendar());
                            break;
                        default:
                            break;
                    }
                    
                    swt.regist(SystemInfo.getConnection());
                } catch (Exception e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
                showData();
            }
        });

        if (SystemInfo.isGroup() || swt.getShiftTime().equals("ãxÇ›") || isNotToday(swt)) button.setEnabled(false);

        return button;
    }

    /**
     * èCê≥É{É^ÉìéÊìæ
     */
    private JButton getUpdateButton(final StaffWorkTime swt)
    {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/memo_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/memo_on.jpg")));
        button.setSize(48, 25);

        button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                // ÉpÉXÉèÅ[ÉhîFèÿ
                if (WorkTimePasswordDialog.isAuthPassword()) {
                    StaffWorkTimeUpdatePanel p = new StaffWorkTimeUpdatePanel((MstShop)shop.getSelectedItem(), swt);
                    SwingUtil.openAnchorDialog(null, true, p, "èoëﬁãŒèCê≥", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER);
                    p = null;
                    System.gc();
                    showData();
                }
            }
        });
        // vtbphuong start change 20140626 Request #26057
     //   if (SystemInfo.isGroup() || swt.getShiftTime().equals("ãxÇ›")) button.setEnabled(false);
           if (swt.getShiftTime().equals("ãxÇ›")) button.setEnabled(false);
        // vtbphuong end change 20140626 Request #26057

        return button;
    }

    /**
     * çÌèúÉ{É^ÉìéÊìæ
     */
    private JButton getDeleteButton(final StaffWorkTime swt)
    {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_on.jpg")));
        button.setSize(48, 25);

        button.setEnabled(!((MstShop)shop.getSelectedItem()).getShopID().equals(swt.getStaffShopId()));
        
        button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteHelpStaff(swt);
            }
        });

        //if (SystemInfo.isGroup()) button.setEnabled(false);

        return button;
    }

    private void deleteHelpStaff(StaffWorkTime swt)
    {
        int ret = MessageDialog.showYesNoDialog(
                        this,
                        MessageUtil.getMessage(102, swt.getStaff().getFullStaffName()),
                        "ÉwÉãÉvÉXÉ^ÉbÉtçÌèú",
                        JOptionPane.QUESTION_MESSAGE,
                        JOptionPane.NO_OPTION);

        if (ret == JOptionPane.YES_OPTION) {

            try {
                swt.delete(SystemInfo.getConnection());
            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            showData();
        }
    }
    /**
     * TableCellRenderer
     */
    public class WorkTimeTableCellRenderer extends SelectTableCellRenderer
    {
            /** Creates a new instance of ReservationTableCellRenderer */
            public WorkTimeTableCellRenderer()
            {
                super();
            }

            /**
             * ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉOÇï‘ÇµÇ‹Ç∑ÅB
             * @param table JTable
             * @param value ÉZÉãÇ…äÑÇËìñÇƒÇÈíl
             * @param isSelected ÉZÉãÇ™ëIëÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÇÕ true
             * @param hasFocus ÉtÉHÅ[ÉJÉXÇ™Ç†ÇÈèÍçáÇÕ true
             * @param row çs
             * @param column óÒ
             * @return ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉO
             */
            public Component getTableCellRendererComponent(JTable table,
                            Object value, boolean isSelected, boolean hasFocus, int row, int column)
            {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                //ï∂éöÇÃêÖïΩîzíuÇïœçX
                switch(column)
                {
                    case 0:
                        super.setHorizontalAlignment(SwingConstants.LEFT);
                        break;
                    default:
                        super.setHorizontalAlignment(SwingConstants.CENTER);
                        break;
                }

                return this;
            }
    }
    
    /**
     * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
     */
    private void initTableColumnWidth()
    {
        //óÒÇÃïùÇê›íËÇ∑ÇÈ
        workTime.getColumnModel().getColumn(0).setPreferredWidth(110);
        workTime.getColumnModel().getColumn(1).setPreferredWidth(110);
        workTime.getColumnModel().getColumn(2).setPreferredWidth(75);
        workTime.getColumnModel().getColumn(3).setPreferredWidth(75);
        workTime.getColumnModel().getColumn(4).setPreferredWidth(75);
        workTime.getColumnModel().getColumn(5).setPreferredWidth(75);
        workTime.getColumnModel().getColumn(6).setPreferredWidth(50);
        workTime.getColumnModel().getColumn(7).setPreferredWidth(50);
        workTime.getColumnModel().getColumn(8).setPreferredWidth(50);
        workTime.getColumnModel().getColumn(9).setPreferredWidth(50);
        workTime.getColumnModel().getColumn(10).setPreferredWidth(50);
        
        //IVS_LVTu start 2016/08/25 New request #54109
        workTimeHelp.getColumnModel().getColumn(0).setPreferredWidth(110);
        workTimeHelp.getColumnModel().getColumn(1).setPreferredWidth(110);
        workTimeHelp.getColumnModel().getColumn(1).setMinWidth(110);
        workTimeHelp.getColumnModel().getColumn(1).setMaxWidth(110);
        workTimeHelp.getColumnModel().getColumn(2).setPreferredWidth(75);
        workTimeHelp.getColumnModel().getColumn(3).setPreferredWidth(75);
        workTimeHelp.getColumnModel().getColumn(4).setPreferredWidth(75);
        workTimeHelp.getColumnModel().getColumn(5).setPreferredWidth(75);
        workTimeHelp.getColumnModel().getColumn(6).setPreferredWidth(50);
        workTimeHelp.getColumnModel().getColumn(7).setPreferredWidth(50);
        workTimeHelp.getColumnModel().getColumn(8).setPreferredWidth(50);
        workTimeHelp.getColumnModel().getColumn(9).setPreferredWidth(50);
        workTimeHelp.getColumnModel().getColumn(10).setPreferredWidth(50);
        //IVS_LVTu end 2016/08/25 New request #54109
    }
    
    /**
     * éûä‘Çï∂éöóÒÇ…ïœä∑Ç∑ÇÈÅB
     * @param time éûä‘
     * @param workDate èoãŒì˙
     * @return JTextField
     */
    private JTextField formatTimeToJTextField(GregorianCalendar time, GregorianCalendar workDate)
    {
        JTextField t = new JTextField();
        t.setEditable(false);
        t.setHorizontalAlignment(JTextField.CENTER);
        t.setOpaque(false);
        t.setBorder(null);

        String s = formatTime(time, workDate);
        
        if (s.length() > 0) {
            t.setText(s);
        }
        
        return t;
    }

    /**
     * éûä‘Çï∂éöóÒÇ…ïœä∑Ç∑ÇÈÅB
     * @param time éûä‘
     * @param workDate èoãŒì˙
     * @return éûä‘ÇÃï∂éöóÒ
     */
    private String formatTime(GregorianCalendar time, GregorianCalendar workDate)
    {
        String result = "";
        
        if (time != null) {
            int h,m = 0;
            h = time.get(Calendar.HOUR_OF_DAY);
            m = time.get(Calendar.MINUTE);

            if (workDate.get(Calendar.DAY_OF_MONTH) != time.get(Calendar.DAY_OF_MONTH)) {
                h += 24;
            }

            if (time != null) {
                result = String.format("%1$02d", h) + ":" + String.format("%1$02d", m);
            }
        }
        
        return result;
    }

    private int getRecessCount(StaffWorkTime swt)
    {
        int count = 0;
        
        if (swt.getRecessFinishTime1() != null) count++;
        if (swt.getRecessFinishTime2() != null) count++;
        if (swt.getRecessFinishTime3() != null) count++;
        if (swt.getRecessFinishTime4() != null) count++;
        if (swt.getRecessFinishTime5() != null) count++;

        return count;
    }

    private int getRecessTotalTime(StaffWorkTime swt)
    {
        int count = 0;
        
        count += getTimeDiff(swt.getRecessStartTime1(), swt.getRecessFinishTime1());
        count += getTimeDiff(swt.getRecessStartTime2(), swt.getRecessFinishTime2());
        count += getTimeDiff(swt.getRecessStartTime3(), swt.getRecessFinishTime3());
        count += getTimeDiff(swt.getRecessStartTime4(), swt.getRecessFinishTime4());
        count += getTimeDiff(swt.getRecessStartTime5(), swt.getRecessFinishTime5());
        
        return count;
    }

    private int getWorkingTotalTime(StaffWorkTime swt)
    {
        int count = 0;
        
        count += getTimeDiff(swt.getWorkingStartTime(), swt.getWorkingFinishTime());
        count -= getRecessTotalTime(swt);
        
        return count < 0 ? 0 : count;
    }

    private long getTimeDiff(GregorianCalendar startTime, GregorianCalendar finishTime)
    {
        long result = 0;
        
        if (startTime != null && finishTime != null) {
            result = finishTime.getTimeInMillis() / (1000 * 60) - startTime.getTimeInMillis() / (1000 * 60);
        }

        return result;
    }

    private boolean isNotToday(StaffWorkTime swt) {

        boolean result = false;
        
        // ìñì˙à»äO
        GregorianCalendar cal = swt.getWorkingDate();
        result = result || cal.get(Calendar.YEAR) != currentDate.get(Calendar.YEAR);
        result = result || cal.get(Calendar.MONTH) != currentDate.get(Calendar.MONTH);
        result = result || cal.get(Calendar.DAY_OF_MONTH) != currentDate.get(Calendar.DAY_OF_MONTH);

        return result;
    }
    
    private void printTimeCard() {

        mapSheet.clear();
        mapRowNo.clear();
        
        MstShop ms = ((MstShop)shop.getSelectedItem());
        
        Calendar calTo = Calendar.getInstance();
        calTo.set(Calendar.YEAR, Integer.parseInt(txtYear.getText()));
        calTo.set(Calendar.MONTH, cboMonth.getSelectedIndex());
        
        if (calTo.getActualMaximum(Calendar.DATE) <= ms.getCutoffDay()) {
            calTo.set(Calendar.DAY_OF_MONTH, calTo.getActualMaximum(Calendar.DATE));
        } else {
            calTo.set(Calendar.DAY_OF_MONTH, ms.getCutoffDay());
        }

        Calendar calFrom = (Calendar)calTo.clone();
        if (ms.getCutoffDay().equals(31)) {
            calFrom.set(Calendar.DAY_OF_MONTH, 1);
        } else {
            calFrom.add(Calendar.MONTH, -1);
            calFrom.add(Calendar.DAY_OF_MONTH, 1);
        }
        
        JExcelApi jx = new JExcelApi("É^ÉCÉÄÉJÅ[Éh");
        jx.setTemplateFile("/report/É^ÉCÉÄÉJÅ[Éh.xls");

        // ÉwÉbÉ_èoóÕ
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        jx.setValue(6, 3, ((MstShop)shop.getSelectedItem()).getShopName());
        jx.setValue(6, 4, sdf.format(calFrom.getTime()) + " Å` " + sdf.format(calTo.getTime()));

        
        // ñæç◊äJénçs
        int row = 14;

        // ì˙êîÇãÅÇﬂÇÈ
        int days = getDays(calFrom, calTo);

        // ó]ï™Ç»çsÇçÌèú
        for (int i = 0; i < (31 - days); i++) {
            jx.removeRow(row + 1);
        }

        // ì˙ïtÉZÉbÉg
        Calendar cal = (Calendar)calFrom.clone();
        for (int i = 0; i < days; i++) {
            jx.setValue(1, row + i, cal.getTime());
            jx.setValue(7, row + i, "é©ìX");
            jx.setValue(11, row + i, ms.isShiftGearWorking() ? "ãxÇ›" : "Å|");
            jx.setValue(17, row + i, "Å|");
            jx.setValue(20, row + i, "Å|");
            mapRowNo.put(sdf.format(cal.getTime()), row + i);
            cal.add(Calendar.DAY_OF_MONTH, 1);
        }

        // ÉXÉ^ÉbÉtï ÇÃÉVÅ[ÉgçÏê¨
        if (!createStaffSheet(jx, ms, calFrom, calTo)) return;

        // ÉVÉtÉgòAìÆÇ†ÇËÇÃèÍçá
        if (ms.isShiftGearWorking()) {
            setShiftData(jx, ms, calFrom, calTo);
        }
        
        // É^ÉCÉÄÉJÅ[ÉhÉZÉbÉg
        setTimeCardData(jx, ms, calFrom, calTo);
        
        jx.openWorkbook();
    }

    private boolean createStaffSheet(JExcelApi jx, MstShop ms, Calendar calFrom, Calendar calTo) {
        
        boolean result = false;
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      stf.staff_id,stf.staff_no ");
        sql.append("     ,max(coalesce(stf.staff_name1, '') || 'Å@' || coalesce(staff_name2, '')) as staff_name");
        sql.append("     ,count(wktime.working_start_time) as working_count");
        sql.append("     ,sum(case when length(trim(shift.start_time)) > 0");
        sql.append("            and (to_char(wktime.working_date, 'yyyyMMdd ') || shift.start_time)::timestamp < wktime.working_start_time");
        sql.append("         then 1");
        sql.append("         else 0");
        sql.append("      end) as late_count");
        sql.append("     ,sum(case when length(trim(shift.start_time)) > 0");
        sql.append("            and (to_char(wktime.working_date, 'yyyyMMdd ') || shift.start_time)::timestamp < wktime.working_start_time");
        sql.append("         then trunc(cast(extract(epoch from wktime.working_start_time - (to_char(wktime.working_date, 'yyyyMMdd ') || shift.start_time)::timestamp) / 3600 as numeric), 2)");
        sql.append("         else 0");
        sql.append("      end) as late_time");
        sql.append("     ,sum(case when length(trim(shift.end_time)) > 0");
        sql.append("            and wktime.working_finish_time < (to_char(wktime.working_date, 'yyyyMMdd ') || shift.end_time)::timestamp");
        sql.append("         then 1");
        sql.append("         else 0");
        sql.append("      end) as early_count");
        sql.append("     ,sum(case when length(trim(shift.end_time)) > 0");
        sql.append("            and wktime.working_finish_time < (to_char(wktime.working_date, 'yyyyMMdd ') || shift.end_time)::timestamp");
        sql.append("         then trunc(cast(extract(epoch from (to_char(wktime.working_date, 'yyyyMMdd ') || shift.end_time)::timestamp - wktime.working_finish_time) / 3600 as numeric), 2)");
        sql.append("         else 0");
        sql.append("      end) as early_time");
        sql.append(" from");
        sql.append("     mst_staff stf");
        sql.append("          left join data_staff_work_time wktime");
        sql.append("                 on stf.staff_id = wktime.staff_id");
        sql.append("                and wktime.working_date between " + SQLUtil.convertForSQL(calFrom) + " and " + SQLUtil.convertForSQL(calTo));
        sql.append("                and wktime.delete_date is null");
        sql.append("          left join data_schedule sch");
        sql.append("                 on sch.staff_id = wktime.staff_id");
        sql.append("                and sch.schedule_date = wktime.working_date");
        sql.append("          left join mst_shift shift");
        sql.append("                 on shift.shop_id = stf.shop_id");
        sql.append("                and shift.shift_id = sch.shift_id");
        sql.append(" where");
        sql.append("         stf.shop_id = " + SQLUtil.convertForSQL(ms.getShopID()));
        //IVS_LVTu start delete 2015/10/05 Bug #43147
        sql.append("     and (stf.delete_date is null or stf.staff_id in ( select ms.staff_id from mst_staff ms where ms.staff_id = wktime.staff_id))");
        //IVS_LVTu end delete 2015/10/05 Bug #43147
        sql.append(" group by");
        sql.append("     stf.staff_id,stf.staff_no ");
        sql.append(" order by");
        sql.append("      case when max(wktime.shop_id) = 1 then 0 else 1 end");
        sql.append("     ,case when max(stf.display_seq) is null then 1 else 0 end");
        sql.append("     ,max(stf.display_seq)");
        sql.append("     ,lpad(max(stf.staff_no), 10, '0')");
        sql.append("     ,stf.staff_id");
        

        try {

            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

            if (rs.last()) {

                rs.beforeFirst();
                
                int index = 1;
                
                while (rs.next())
                {
                    jx.setTargetSheet(index);
                    jx.getTargetSheet().setName(rs.getString("staff_no") + " "+ rs.getString("staff_name"));
                    jx.setValue(6, 5, rs.getString("staff_name"));
                    
                    mapSheet.put(rs.getInt("staff_id"), index);

                   jx.setValue(5, 8, rs.getInt("working_count"));
                    
                    if (ms.isShiftGearWorking()) {
                        // ÉVÉtÉgòAìÆÇ†ÇËÇÃèÍçá
                        jx.setValue(13, 8, rs.getInt("late_count"));
                        jx.setValue(13, 9, rs.getDouble("late_time"));
                        jx.setValue(21, 8, rs.getInt("early_count"));
                        jx.setValue(21, 9, rs.getDouble("early_time"));
                    }
                    
                    index++;
                    
                    if (!rs.isLast()) {
                        // ÉVÅ[ÉgÉRÉsÅ[
                        jx.copySheet(1,"dummy");
                    }
                }
                
                result = true;

            } else {
                
                MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            }

            rs.close();

        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        
        return result;
    }

    private void setShiftData(JExcelApi jx, MstShop ms, Calendar calFrom, Calendar calTo) {
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      stf.staff_id");
        sql.append("     ,to_char(sch.schedule_date, 'yyyy/MM/dd') as schedule_date");
        sql.append("     ,coalesce(");
        sql.append("       case when length(trim(nullif(shift.start_time,'0000'))) > 0 then");
        sql.append("           substr(shift.start_time, 1, 2) || 'ÅF' || substr(shift.start_time, 3) || 'Å`' ||");
        sql.append("       case when length(trim(nullif(shift.end_time,'0000'))) > 0 then");
        sql.append("           substr(shift.end_time, 1, 2) || 'ÅF' || substr(shift.end_time, 3)");
        sql.append("       end");
        sql.append("      end, 'ãxÇ›') as shift_time");
        sql.append(" from");
        sql.append("     mst_staff stf");
        sql.append("          left join data_schedule sch");
        sql.append("                 on sch.staff_id = stf.staff_id");
        sql.append("                and sch.schedule_date between " + SQLUtil.convertForSQL(calFrom) + " and " + SQLUtil.convertForSQL(calTo));
        sql.append("          left join mst_shift shift");
        sql.append("                 on shift.shop_id = stf.shop_id");
        sql.append("                and shift.shift_id = sch.shift_id");
        sql.append(" where");
        sql.append("         stf.shop_id = " + SQLUtil.convertForSQL(ms.getShopID()));
        //IVS_LVTu start delete 2015/10/05 Bug #43147
        //sql.append("     and stf.delete_date is null");
        //IVS_LVTu end delete 2015/10/05 Bug #43147
        sql.append("     and (");
        sql.append("             length(trim(nullif(shift.start_time,'0000'))) > 0");
        sql.append("          or length(trim(nullif(shift.end_time,'0000'))) > 0");
        sql.append("         )");

        try {

            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

            while (rs.next())
            {
                if (mapSheet.get(rs.getInt("staff_id")) != null ){
                jx.setTargetSheet((Integer)mapSheet.get(rs.getInt("staff_id")));
                
                int row = (Integer)mapRowNo.get(rs.getString("schedule_date"));

                jx.setValue(11, row, rs.getString("shift_time"));
            }
            }

            rs.close();

        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }
    
    private void setTimeCardData(JExcelApi jx, MstShop ms, Calendar calFrom, Calendar calTo) {
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      stf.staff_id");
        sql.append("     ,wktime.shop_id");
        sql.append("     ,(select shop_name from mst_shop where shop_id = wktime.shop_id) as shop_name");
        sql.append("     ,to_char(wktime.working_date, 'yyyy/MM/dd') as working_date");
        sql.append("     ,coalesce(");
        sql.append("       case when length(trim(nullif(shift.start_time,'0000'))) > 0 then");
        sql.append("           substr(shift.start_time, 1, 2) || 'ÅF' || substr(shift.start_time, 3) || 'Å`' ||");
        sql.append("       case when length(trim(nullif(shift.end_time,'0000'))) > 0 then");
        sql.append("           substr(shift.end_time, 1, 2) || 'ÅF' || substr(shift.end_time, 3)");
        sql.append("       end");
        sql.append("      end, 'ãxÇ›') as shift_time");
        // èoãŒéûä‘
        // vtbphuong start change 20140908 Bug #30435 
       // sql.append("     ,lpad(to_char(wktime.working_start_time, 'hh24')::numeric + ");
        sql.append("     ,lpad( CAST ( to_char(wktime.working_start_time, 'hh24')::numeric + ");
        sql.append("         case when to_char(wktime.working_date, 'yyyyMMdd') <> to_char(wktime.working_start_time, 'yyyyMMdd')");
        sql.append("             then 24");
        sql.append("             else 0 ");
       // sql.append("         end , 2, '0')");
        sql.append("         end AS VARCHAR(2))   , 2, '0')");
        sql.append("         || 'ÅF' || to_char(wktime.working_start_time, 'mi') as working_start_time");
        // ëﬁãŒéûä‘
        sql.append("     ,lpad( CAST ( to_char(wktime.working_finish_time, 'hh24')::numeric + ");
        sql.append("         case when to_char(wktime.working_date, 'yyyyMMdd') <> to_char(wktime.working_finish_time, 'yyyyMMdd')");
        sql.append("             then 24");
        sql.append("             else 0");
        sql.append("         end AS VARCHAR(2) ) , 2, '0')");
        // vtbphuong end change 20140908 Bug #30435  
        sql.append("         || 'ÅF' || to_char(wktime.working_finish_time, 'mi') as working_finish_time");
        // ãxåeâÒêî
        sql.append("     ,case when wktime.recess_finish_time1 is null then 0 else 1 end +");
        sql.append("      case when wktime.recess_finish_time2 is null then 0 else 1 end +");
        sql.append("      case when wktime.recess_finish_time3 is null then 0 else 1 end +");
        sql.append("      case when wktime.recess_finish_time4 is null then 0 else 1 end +");
        sql.append("      case when wktime.recess_finish_time5 is null then 0 else 1 end as recess_count");
        // ãxåeéûä‘
        //Luc start edit 20160307 #48984
        /*sql.append("     ,case when wktime.recess_finish_time1 is not null");
        sql.append("         then trunc(cast(extract(epoch from wktime.recess_finish_time1 - wktime.recess_start_time1) / 3600 as numeric), 2)");
        sql.append("         else 0");
        sql.append("      end +");
        sql.append("      case when wktime.recess_finish_time2 is not null");
        sql.append("         then trunc(cast(extract(epoch from wktime.recess_finish_time2 - wktime.recess_start_time2) / 3600 as numeric), 2)");
        sql.append("         else 0");
        sql.append("      end +");
        sql.append("      case when wktime.recess_finish_time3 is not null");
        sql.append("         then trunc(cast(extract(epoch from wktime.recess_finish_time3 - wktime.recess_start_time3) / 3600 as numeric), 2)");
        sql.append("         else 0");
        sql.append("      end +");
        sql.append("      case when wktime.recess_finish_time4 is not null");
        sql.append("         then trunc(cast(extract(epoch from wktime.recess_finish_time4 - wktime.recess_start_time4) / 3600 as numeric), 2)");
        sql.append("         else 0");
        sql.append("      end +");
        sql.append("      case when wktime.recess_finish_time5 is not null");
        sql.append("         then trunc(cast(extract(epoch from wktime.recess_finish_time5 - wktime.recess_start_time5) / 3600 as numeric), 2)");
        sql.append("         else 0");
        sql.append("      end as recess_time");*/
        sql.append("     ,trunc(case when wktime.recess_finish_time1 is not null");
        sql.append("         then cast(extract(epoch from wktime.recess_finish_time1 - wktime.recess_start_time1) / 3600 as numeric)");
        sql.append("         else 0");
        sql.append("      end +");
        sql.append("      case when wktime.recess_finish_time2 is not null");
        sql.append("         then cast(extract(epoch from wktime.recess_finish_time2 - wktime.recess_start_time2) / 3600 as numeric)");
        sql.append("         else 0");
        sql.append("      end +");
        sql.append("      case when wktime.recess_finish_time3 is not null");
        sql.append("         then cast(extract(epoch from wktime.recess_finish_time3 - wktime.recess_start_time3) / 3600 as numeric)");
        sql.append("         else 0");
        sql.append("      end +");
        sql.append("      case when wktime.recess_finish_time4 is not null");
        sql.append("         then cast(extract(epoch from wktime.recess_finish_time4 - wktime.recess_start_time4) / 3600 as numeric)");
        sql.append("         else 0");
        sql.append("      end +");
        sql.append("      case when wktime.recess_finish_time5 is not null");
        sql.append("         then cast(extract(epoch from wktime.recess_finish_time5 - wktime.recess_start_time5) / 3600 as numeric)");
        sql.append("         else 0");
        sql.append("      end,2) as recess_time");
         //Luc start edit 20160307 #48984
        // â“ì≠éûä‘Åié¿ì≠éûä‘ÇãÅÇﬂÇÈèÍçáÇÕÅAãxåeéûä‘ÇÉ}ÉCÉiÉXÇ∑ÇÈÅj
        sql.append("     ,trunc(cast(extract(epoch from wktime.working_finish_time - wktime.working_start_time) / 3600 as numeric), 2) as working_time");
        // écã∆éûä‘
        sql.append("     ,case when length(trim(shift.end_time)) > 0");
        sql.append("            and (to_char(wktime.working_date, 'yyyyMMdd ') || shift.end_time)::timestamp < wktime.working_finish_time");
        sql.append("         then trunc(cast(extract(epoch from wktime.working_finish_time - (to_char(wktime.working_date, 'yyyyMMdd ') || shift.end_time)::timestamp) / 3600 as numeric), 2)");
        sql.append("         else 0");
        sql.append("      end as over_time");
        sql.append(" from");
        sql.append("     mst_staff stf");
        sql.append("          left join data_staff_work_time wktime");
        sql.append("                 on stf.staff_id = wktime.staff_id");
        sql.append("                and wktime.working_date between " + SQLUtil.convertForSQL(calFrom) + " and " + SQLUtil.convertForSQL(calTo));
        sql.append("                and wktime.delete_date is null");
        sql.append("          left join data_schedule sch");
        sql.append("                 on sch.staff_id = wktime.staff_id");
        sql.append("                and sch.schedule_date = wktime.working_date");
        sql.append("          left join mst_shift shift");
        sql.append("                 on shift.shop_id = stf.shop_id");
        sql.append("                and shift.shift_id = sch.shift_id");
        sql.append(" where");
        sql.append("         stf.shop_id = " + SQLUtil.convertForSQL(ms.getShopID()));
        sql.append("     and wktime.working_date is not null");
        //IVS_LVTu start delete 2015/10/05 Bug #43147
        sql.append("     and (stf.delete_date is null or stf.staff_id in ( select ms.staff_id from mst_staff ms where ms.staff_id = wktime.staff_id ))");
        //IVS_LVTu end delete 2015/10/05 Bug #43147

        try {

            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

            while (rs.next())
            {
                jx.setTargetSheet((Integer)mapSheet.get(rs.getInt("staff_id")));
                
                int row = (Integer)mapRowNo.get(rs.getString("working_date"));

                if (!ms.getShopID().equals(rs.getInt("shop_id"))) {
                    jx.setValue(7, row, rs.getString("shop_name"));
                }
                
                String startTime = rs.getString("working_start_time");
                String finishTime = rs.getString("working_finish_time");

                if (startTime == null && finishTime == null) continue;

                if (startTime != null) jx.setValue(17, row, startTime);
                if (finishTime != null) jx.setValue(20, row, finishTime);
                
                if (ms.isShiftGearWorking()) {
                    // ÉVÉtÉgòAìÆÇ†ÇËÇÃèÍçá
                    jx.setValue(29, row, rs.getDouble("over_time"));
                }

                jx.setValue(23, row, rs.getInt("recess_count"));
                jx.setValue(26, row, rs.getDouble("recess_time"));
                jx.setValue(32, row, rs.getDouble("working_time") - rs.getDouble("recess_time"));
            }

            rs.close();

        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }

    // ì˙ïtä‘ÇÃì˙êîÇãÅÇﬂÇÈÅiäJénì˙Ç‡ä‹ÇﬁÅj
    private int getDays(Calendar start, Calendar end) {
        long lStart = start.getTime().getTime();
        long lEnd = end.getTime().getTime();
        long result = (lEnd - lStart) / (1000*60*60*24);
        return new Long(result).intValue() + 1;
    }
    
    //IVS_LVTu start 2016/08/25 New request #54109
    private String getSelectDataScheduleSQL()
    {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      a.*");
        sql.append("      ,dsd.*");
        sql.append("     ,coalesce(b.working_date, " + SQLUtil.convertForSQLDateOnly(date.getDate()) + ") as working_date");
        sql.append("     ,coalesce(b.shop_id, dsd.shop_id) as working_shop_id");
        sql.append("     ,b.working_start_time");
        sql.append("     ,b.working_finish_time");
        sql.append("     ,b.recess_start_time1");
        sql.append("     ,b.recess_finish_time1");
        sql.append("     ,b.recess_start_time2");
        sql.append("     ,b.recess_finish_time2");
        sql.append("     ,b.recess_start_time3");
        sql.append("     ,b.recess_finish_time3");
        sql.append("     ,b.recess_start_time4");
        sql.append("     ,b.recess_finish_time4");
        sql.append("     ,b.recess_start_time5");
        sql.append("     ,b.recess_finish_time5");
        sql.append("     ,a.shop_id as staff_shop_id");

        if (((MstShop)shop.getSelectedItem()).isShiftGearWorking()) {

            // èoëﬁãŒÉVÉtÉgòAìÆÇ†ÇË
            sql.append(" ,coalesce(");
            sql.append("     case when length(trim(nullif(d.start_time,'0000'))) > 0 then");
            sql.append("         substr(d.start_time, 1, 2) || 'ÅF' || substr(d.start_time, 3) || 'Å`' ||");
            sql.append("     case when length(trim(nullif(d.end_time,'0000'))) > 0 then");
            sql.append("         substr(d.end_time, 1, 2) || 'ÅF' || substr(d.end_time, 3)");
            sql.append("     end");
            sql.append("  end, 'ãxÇ›') as shift_time");

        } else {
            
            // èoëﬁãŒÉVÉtÉgòAìÆÇ»Çµ
            sql.append(" ,'Å|' as shift_time");
        }

        sql.append("     ,case");
        sql.append("         when coalesce(b.recess_finish_count, 0) = 5 then 3");
        sql.append("         when coalesce(b.recess_start_count, 0) = coalesce(b.recess_finish_count, 0) then 1");
        sql.append("         else 2");
        sql.append("      end as recess_type");
        sql.append(" from");
        sql.append("     mst_staff a");
        sql.append("         inner join data_schedule c");
        sql.append("                on a.staff_id = c.staff_id");
        sql.append("               and c.schedule_date = " + SQLUtil.convertForSQLDateOnly(date.getDate()));
        sql.append("         inner join data_schedule_detail dsd");
        sql.append("                on dsd.staff_id = c.staff_id");
        sql.append("               and dsd.schedule_date = c.schedule_date");
        sql.append("         inner join mst_shift d");
        sql.append("                on a.shop_id = d.shop_id");
        sql.append("               and c.shift_id = d.shift_id");
        sql.append("         left join");
        sql.append("             (");
        sql.append("                 select");
        sql.append("                      *");
        sql.append("                     ,case when recess_start_time1 is null then 0 else 1 end +");
        sql.append("                      case when recess_start_time2 is null then 0 else 1 end +");
        sql.append("                      case when recess_start_time3 is null then 0 else 1 end +");
        sql.append("                      case when recess_start_time4 is null then 0 else 1 end +");
        sql.append("                      case when recess_start_time5 is null then 0 else 1 end as recess_start_count");
        sql.append("                     ,case when recess_finish_time1 is null then 0 else 1 end +");
        sql.append("                      case when recess_finish_time2 is null then 0 else 1 end +");
        sql.append("                      case when recess_finish_time3 is null then 0 else 1 end +");
        sql.append("                      case when recess_finish_time4 is null then 0 else 1 end +");
        sql.append("                      case when recess_finish_time5 is null then 0 else 1 end as recess_finish_count");
        sql.append("                 from");
        sql.append("                     data_staff_work_time");
        sql.append("             ) b");
        sql.append("                on a.staff_id = b.staff_id");
        sql.append("               and b.working_date = " + SQLUtil.convertForSQLDateOnly(date.getDate()));
        sql.append("               and b.delete_date is null");
        sql.append(" where");
        sql.append("         a.delete_date is null");
        sql.append("     and a.shop_id <>" + SQLUtil.convertForSQL(((MstShop)shop.getSelectedItem()).getShopID()));
        sql.append("     and dsd.shop_id =" + SQLUtil.convertForSQL(((MstShop)shop.getSelectedItem()).getShopID()));
        sql.append("     and dsd.start_time = ( select min(detail.start_time) ");
	sql.append("     	from data_schedule_detail detail ");
	sql.append("     	where detail.staff_id = dsd.staff_id and detail.schedule_date = dsd.schedule_date  and detail.delete_date is null and detail.shop_id = " + SQLUtil.convertForSQL(((MstShop)shop.getSelectedItem()).getShopID()) + " ) ");
        sql.append(" order by");
        sql.append("      a.display_seq");
        sql.append("     ,a.staff_id");
        
        return sql.toString();

    }
    //IVS_LVTu end 2016/08/25 New request #54109

}
