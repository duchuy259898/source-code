/*
 * MstPurchasePanel.java
 *
 * Created on 2007/04/03, 20:05
 */

package com.geobeck.sosia.pos.basicinfo.commodity;

import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.master.commodity.*;
import com.geobeck.sosia.pos.master.product.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.util.*;

/**
 *
 * @author  katagiri
 */
public class MstPurchasePanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	
	/** Creates new form MstPurchasePanel */
	public MstPurchasePanel(MstSupplier supplier)
	{
		mpm	=	new MstPurchaseManager(supplier);
		initComponents();
		this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jLabel1 = new javax.swing.JLabel();
        registButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        selectAllButton = new javax.swing.JButton();
        releaseAllButton = new javax.swing.JButton();
        releaseButton = new javax.swing.JButton();
        referenceProductsScrollPane = new javax.swing.JScrollPane();
        referenceItems = new javax.swing.JTable();
        productClassScrollPane = new javax.swing.JScrollPane();
        itemClass = new javax.swing.JTable();
        referenceLabel = new javax.swing.JLabel();
        selectProductsScrollPane = new javax.swing.JScrollPane();
        selectItems = new javax.swing.JTable();
        selectLabel = new javax.swing.JLabel();
        supplierName = new javax.swing.JLabel();
        backButton2 = new javax.swing.JButton();
        costPriceButton = new javax.swing.JButton();

        jLabel1.setText("\u4ed5\u5165\u5148");

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setContentAreaFilled(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                registButtonActionPerformed(evt);
            }
        });

        selectButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setContentAreaFilled(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                selectButtonActionPerformed(evt);
            }
        });

        selectAllButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right2_off.jpg"));
        selectAllButton.setBorderPainted(false);
        selectAllButton.setContentAreaFilled(false);
        selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right2_on.jpg"));
        selectAllButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                selectAllButtonActionPerformed(evt);
            }
        });

        releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left2_off.jpg"));
        releaseAllButton.setBorderPainted(false);
        releaseAllButton.setContentAreaFilled(false);
        releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left2_on.jpg"));
        releaseAllButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                releaseAllButtonActionPerformed(evt);
            }
        });

        releaseButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left_off.jpg"));
        releaseButton.setBorderPainted(false);
        releaseButton.setContentAreaFilled(false);
        releaseButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left_on.jpg"));
        releaseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                releaseButtonActionPerformed(evt);
            }
        });

        referenceItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String []
            {
                "å^î‘", "è§ïiñº", "îÃîÑâøäi"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        referenceItems.setSelectionForeground(new java.awt.Color(0, 0, 0));
        referenceItems.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(referenceItems, SystemInfo.getTableHeaderRenderer());
        referenceItems.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(referenceItems);
        referenceProductsScrollPane.setViewportView(referenceItems);

        itemClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null},
                {null},
                {null},
                {null}
            },
            new String []
            {
                "ï™óﬁñº"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        itemClass.setSelectionForeground(new java.awt.Color(0, 0, 0));
        itemClass.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        itemClass.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(itemClass, SystemInfo.getTableHeaderRenderer());
        itemClass.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(itemClass);
        itemClass.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                itemClassKeyReleased(evt);
            }
        });
        itemClass.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                itemClassMouseReleased(evt);
            }
        });

        productClassScrollPane.setViewportView(itemClass);

        referenceLabel.setText("\u53c2\u7167\u30ea\u30b9\u30c8");

        selectItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "å^î‘", "è§ïiñº", "îÃîÑâøäi", "édì¸âøäi"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        selectItems.setSelectionForeground(new java.awt.Color(0, 0, 0));
        selectItems.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(selectItems, SystemInfo.getTableHeaderRenderer());
        selectItems.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(selectItems);
        selectProductsScrollPane.setViewportView(selectItems);

        selectLabel.setText("\u9078\u629e\u30ea\u30b9\u30c8");

        backButton2.setIcon(SystemInfo.getImageIcon("/button/common/back_off.jpg"));
        backButton2.setBorderPainted(false);
        backButton2.setContentAreaFilled(false);
        backButton2.setPressedIcon(SystemInfo.getImageIcon("/button/common/back_on.jpg"));
        backButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                backButton2ActionPerformed(evt);
            }
        });

        costPriceButton.setText("\u4ed5\u5165\u4fa1\u683c\u5165\u529b");
        costPriceButton.setEnabled(false);
        costPriceButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                costPriceButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(productClassScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(referenceLabel)
                            .add(layout.createSequentialGroup()
                                .add(referenceProductsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 298, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(releaseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                    .add(layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(supplierName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 363, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(selectLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 86, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(backButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(costPriceButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(selectProductsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 324, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(supplierName)
                            .add(jLabel1))
                        .add(19, 19, 19)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(selectLabel)
                            .add(referenceLabel)
                            .add(costPriceButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 172, Short.MAX_VALUE)
                                .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(releaseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, referenceProductsScrollPane, 0, 0, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, productClassScrollPane, 0, 0, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, selectProductsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(backButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {jLabel1, supplierName}, org.jdesktop.layout.GroupLayout.VERTICAL);

    }// </editor-fold>//GEN-END:initComponents

	private void costPriceButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_costPriceButtonActionPerformed
	{//GEN-HEADEREND:event_costPriceButtonActionPerformed
		this.inputCostPrice();
	}//GEN-LAST:event_costPriceButtonActionPerformed

	private void backButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButton2ActionPerformed
	{//GEN-HEADEREND:event_backButton2ActionPerformed
		this.showOpener();
	}//GEN-LAST:event_backButton2ActionPerformed

	private void itemClassMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_itemClassMouseReleased
	{//GEN-HEADEREND:event_itemClassMouseReleased
		this.showPurchases();
	}//GEN-LAST:event_itemClassMouseReleased

	private void itemClassKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_itemClassKeyReleased
	{//GEN-HEADEREND:event_itemClassKeyReleased
		this.showPurchases();
	}//GEN-LAST:event_itemClassKeyReleased

	private void registButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_registButtonActionPerformed
	{//GEN-HEADEREND:event_registButtonActionPerformed
		this.regist();
	}//GEN-LAST:event_registButtonActionPerformed

	private void releaseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_releaseButtonActionPerformed
	{//GEN-HEADEREND:event_releaseButtonActionPerformed
		this.movePurchase(false);
	}//GEN-LAST:event_releaseButtonActionPerformed

	private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_releaseAllButtonActionPerformed
	{//GEN-HEADEREND:event_releaseAllButtonActionPerformed
		this.moveAllPurchase(false);
	}//GEN-LAST:event_releaseAllButtonActionPerformed

	private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectAllButtonActionPerformed
	{//GEN-HEADEREND:event_selectAllButtonActionPerformed
		this.moveAllPurchase(true);
	}//GEN-LAST:event_selectAllButtonActionPerformed

	private void selectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectButtonActionPerformed
	{//GEN-HEADEREND:event_selectButtonActionPerformed
		this.movePurchase(true);
	}//GEN-LAST:event_selectButtonActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton2;
    private javax.swing.JButton costPriceButton;
    private javax.swing.JTable itemClass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane productClassScrollPane;
    private javax.swing.JTable referenceItems;
    private javax.swing.JLabel referenceLabel;
    private javax.swing.JScrollPane referenceProductsScrollPane;
    private javax.swing.JButton registButton;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton releaseButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JTable selectItems;
    private javax.swing.JLabel selectLabel;
    private javax.swing.JScrollPane selectProductsScrollPane;
    private javax.swing.JLabel supplierName;
    // End of variables declaration//GEN-END:variables
	
	private	MstPurchaseManager		mpm		=	null;
	
	private void init()
	{
		this.setSize(833, 500);
		this.setPath("äÓñ{ê›íË >> è§ïiÉ}ÉXÉ^ >> édì¸êÊìoò^");
		this.setTitle("édì¸è§ïiìoò^");
		
		supplierName.setText(mpm.getSupplier().getSupplierName());
		
		this.showItemClasses();
		this.showPurchases();
	}
	
	/**
	 * ï™óﬁÇï\é¶Ç∑ÇÈÅB
	 */
	private void showItemClasses()
	{
		SwingUtil.clearTable(itemClass);
		
		DefaultTableModel	model	=	(DefaultTableModel)itemClass.getModel();
		
		for(MstItemClass ic : mpm.getItemClasses())
		{
			Vector<Object>	temp	=	new Vector<Object>();
			temp.add(ic);
			model.addRow(temp);
		}
	}
	
	/**
	 * ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 */
	private void showPurchases()
	{
		Integer		index	=	itemClass.getSelectedRow();
		
		SwingUtil.clearTable(referenceItems);
		SwingUtil.clearTable(selectItems);
		
		if(index != null && 0 <= index)
		{
			this.showPurchases(mpm.getReference().get(index), referenceItems, true);
			this.showPurchases(mpm.getSelected().get(index), selectItems, false);
			costPriceButton.setEnabled(0 < selectItems.getRowCount());
		}
	}
	
	/**
	 * ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 * @param pc ï™óﬁ
	 * @param table ÉeÅ[ÉuÉã
	 */
	private void showPurchases(ArrayList<MstPurchase> purchases, JTable table, boolean isReference)
	{
		SwingUtil.clearTable(table);
		
		DefaultTableModel	model	=	(DefaultTableModel)table.getModel();
		
		for(MstPurchase mp : purchases)
		{
			Vector<Object>	temp	=	new Vector<Object>();
			temp.add(mp.getItemNo());
			temp.add(mp.getItemName());
			temp.add(mp.getPrice());
			if(!isReference)
			{
				temp.add(mp.getCostPrice());
			}
			model.addRow(temp);
		}
	}
	
	/**
	 * è§ïiÅEãZèpÇëIëÅiâèúÅjÇ∑ÇÈÅB
	 * @param isSelect trueÅFëIëÅAfalseÅFâèú
	 */
	public void movePurchase(boolean isSelect)
	{
		Integer		classIndex	=	itemClass.getSelectedRow();
		JTable		fromTable	=	(isSelect ? referenceItems : selectItems);
		
		for(Integer i = fromTable.getSelectedRowCount() - 1; 0 <= i; i --)
		{
			mpm.movePurchase(isSelect, classIndex, fromTable.getSelectedRows()[i]);
		}
		
		mpm.sort(isSelect, classIndex);
		
		this.showPurchases();
	}
	
	/**
	 * è§ïiÅEãZèpÇëSÇƒëIëÅiâèúÅjÇ∑ÇÈÅB
	 * @param isSelect trueÅFëIëÅAfalseÅFâèú
	 */
	public void moveAllPurchase(boolean isSelect)
	{
		Integer		classIndex	=	itemClass.getSelectedRow();
		JTable		fromTable	=	(isSelect ? referenceItems : selectItems);
		
		mpm.moveAllPurchase(isSelect, classIndex);
		
		this.showPurchases();
	}
	
	/**
	 * édì¸ã‡äzì¸óÕÉ{É^ÉìÇ™âüÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóù
	 */
	private void inputCostPrice()
	{
		Integer		index	=	itemClass.getSelectedRow();
		
		InputCostPriceDialog	icpd	=	new InputCostPriceDialog(
				parentFrame, true, mpm.getSelected().get(index));
		icpd.setVisible(true);
		this.showPurchases();
	}
	
	/**
	 * ìoò^èàóù
	 */
	private void regist()
	{
		if(mpm.regist())
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS,
				"édì¸è§ïi"),
				this.getTitle(),
				JOptionPane.INFORMATION_MESSAGE);
		}
		else
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED,
				"édì¸è§ïi"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}
}
