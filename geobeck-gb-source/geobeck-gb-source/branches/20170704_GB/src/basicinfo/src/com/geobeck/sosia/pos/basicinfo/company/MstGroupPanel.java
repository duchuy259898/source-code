/*
 * MstGroupPanel.java
 *
 * Created on 2006/10/19, 20:59
 */

package com.geobeck.sosia.pos.basicinfo.company;

import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.search.company.SearchGroupDialog;
import com.geobeck.sosia.pos.swing.company.*;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import javax.swing.tree.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.master.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.search.*;

/**
 *
 * @author  katagiri
 */
public class MstGroupPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	
	/** Creates new form MstGroupPanel */
	public MstGroupPanel()
	{
		initComponents();
		addMouseCursorChange();
		setListener();
		this.setSize(727, 506);
		this.setPath("基本設定 >> 会社マスタ");
		this.setTitle("グループ登録");
		this.refresh();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        childrenScrollPane = new javax.swing.JScrollPane();
        children = new com.geobeck.swing.JTableEx();
        groupScrollPane = new javax.swing.JScrollPane();
        groupTree = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        postalCode = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createPostalCodeFormatter());
        searchAddressButton = new javax.swing.JButton();
        address2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address2.getDocument()).setDocumentFilter(
            new CustomFilter(64));
        address1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address1.getDocument()).setDocumentFilter(
            new CustomFilter(16));
        parentGroup = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        phoneNumber = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)phoneNumber.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.PHONE_NUMBER));
        faxNumber = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)faxNumber.getDocument()).setDocumentFilter(
            new CustomFilter(20, CustomFilter.PHONE_NUMBER));
        mailAddress = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)mailAddress.getDocument()).setDocumentFilter(
            new CustomFilter(64, CustomFilter.MAIL_ADDRESS));
        address3 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address3.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        jLabel10 = new javax.swing.JLabel();
        address4 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)address4.getDocument()).setDocumentFilter(
            new CustomFilter(128));
        groupName = new com.geobeck.swing.JFormattedTextFieldEx();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        childrenScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        children.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null}
            },
            new String [] {
                "所属グループ・店舗"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        children.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(children, SystemInfo.getTableHeaderRenderer());
        children.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(children);
        childrenScrollPane.setViewportView(children);

        groupScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        groupTree.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        groupTree.setCellRenderer(new GroupTreeCellRenderer());
        groupTree.getSelectionModel().setSelectionMode(
            TreeSelectionModel.SINGLE_TREE_SELECTION);
        groupTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                groupTreeValueChanged(evt);
            }
        });

        groupScrollPane.setViewportView(groupTree);

        jPanel1.setOpaque(false);
        jLabel3.setText("\u90f5\u4fbf\u756a\u53f7");

        jLabel2.setText("\u30b0\u30eb\u30fc\u30d7\u540d");

        jLabel1.setText("\u6240\u5c5e\u30b0\u30eb\u30fc\u30d7");

        jLabel4.setText("\u90fd\u9053\u5e9c\u770c");

        jLabel8.setText("\u5e02\u533a\u753a\u6751");

        postalCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        postalCode.setFocusLostBehavior(javax.swing.JFormattedTextField.PERSIST);
        postalCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                postalCodeFocusLost(evt);
            }
        });

        searchAddressButton.setIcon(SystemInfo.getImageIcon("/button/search/search_address_off.jpg"));
        searchAddressButton.setBorderPainted(false);
        searchAddressButton.setContentAreaFilled(false);
        searchAddressButton.setFocusable(false);
        searchAddressButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_address_on.jpg"));
        searchAddressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAddressButtonActionPerformed(evt);
            }
        });

        address2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address2.setInputKanji(true);

        address1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address1.setInputKanji(true);

        parentGroup.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        parentGroup.setRenderer(new GroupComboBoxCellRenderer());

        jLabel5.setText("\u96fb\u8a71\u756a\u53f7");

        jLabel6.setText("FAX\u756a\u53f7");

        jLabel7.setText("\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9");

        jLabel9.setText("\u753a\u57df\u30fb\u756a\u5730");

        phoneNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        faxNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        faxNumber.setColumns(20);

        mailAddress.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        mailAddress.setColumns(64);

        address3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address3.setInputKanji(true);

        jLabel10.setText("\u30de\u30f3\u30b7\u30e7\u30f3\u540d\u7b49");

        address4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        address4.setColumns(128);
        address4.setInputKanji(true);

        groupName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        groupName.setInputKanji(true);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(parentGroup, 0, 314, Short.MAX_VALUE)
                            .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(groupName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(phoneNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(faxNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(mailAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 314, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, address3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 314, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(address4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 314, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(parentGroup, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(groupName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(postalCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(searchAddressButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(address1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(address2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(address3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel9))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(address4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel10))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(phoneNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(faxNumber, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mailAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setOpaque(false);
        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setContentAreaFilled(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setContentAreaFilled(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        clearButton.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg"));
        clearButton.setBorderPainted(false);
        clearButton.setContentAreaFilled(false);
        clearButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg"));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(clearButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(clearButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(groupScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 17, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(childrenScrollPane, 0, 0, Short.MAX_VALUE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(jPanel1, 0, 401, Short.MAX_VALUE)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(groupScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(childrenScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void postalCodeFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_postalCodeFocusLost
	{//GEN-HEADEREND:event_postalCodeFocusLost
		String		temp	=	postalCode.getText().replaceAll("[-_]", "");
		
		//郵便番号が入録されていない場合
		if(temp.equals("") || temp.length() != 7)
		{
			address1.setText("");
			address2.setText("");
			address3.setText("");
		}
		else
		{
			AddressUtil		au	=	new	AddressUtil();
			
			au.setPostalCode(temp);
			
			try
			{
				ConnectionWrapper	con	=	SystemInfo.getBaseConnection();
				
				//住所が取得できた場合
				if(au.getDataByPostalCode(con))
				{
					address1.setText(au.getPrefectureName());
					address2.setText(au.getCityName());
					address3.setText(au.getTownName().replaceAll("（.+", ""));
				}
				//住所が取得できなかった場合住所をクリア
				else
				{
					address1.setText("");
					address2.setText("");
					address3.setText("");
				}
			}
			catch(SQLException e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			}
		}
	}//GEN-LAST:event_postalCodeFocusLost

	private void searchAddressButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchAddressButtonActionPerformed
	{//GEN-HEADEREND:event_searchAddressButtonActionPerformed
		SearchAddressDialog		sa	=	new SearchAddressDialog(parentFrame, true);
		sa.setVisible(true);
		
		if(!sa.getSelectedPrefecture().equals(""))
		{
			postalCode.setText(sa.getSelectedPostalCode());
			address1.setText(sa.getSelectedPrefecture());
			address2.setText(sa.getSelectedCity());
			address3.setText(sa.getSelectedTown().replaceAll("（.+", ""));
		}
		
		sa = null;
	}//GEN-LAST:event_searchAddressButtonActionPerformed

	private void groupTreeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_groupTreeValueChanged
	{//GEN-HEADEREND:event_groupTreeValueChanged
		this.changeCurrentData();
	}//GEN-LAST:event_groupTreeValueChanged

	private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
	{//GEN-HEADEREND:event_clearButtonActionPerformed
		this.clear();
	}//GEN-LAST:event_clearButtonActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		if(currentData.getGroupID() != null &&
			currentData.getParentID() == null)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(7003),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			this.delete();
		}
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		if(this.checkInput(false))
		{
			this.regist(false);
		}
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
		if(this.checkInput(true))
		{
			this.regist(true);
		}
	}//GEN-LAST:event_addButtonActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private com.geobeck.swing.JFormattedTextFieldEx address1;
    private com.geobeck.swing.JFormattedTextFieldEx address2;
    private com.geobeck.swing.JFormattedTextFieldEx address3;
    private com.geobeck.swing.JFormattedTextFieldEx address4;
    private com.geobeck.swing.JTableEx children;
    private javax.swing.JScrollPane childrenScrollPane;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx faxNumber;
    private com.geobeck.swing.JFormattedTextFieldEx groupName;
    private javax.swing.JScrollPane groupScrollPane;
    private javax.swing.JTree groupTree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private com.geobeck.swing.JFormattedTextFieldEx mailAddress;
    private javax.swing.JComboBox parentGroup;
    private com.geobeck.swing.JFormattedTextFieldEx phoneNumber;
    private com.geobeck.swing.JFormattedTextFieldEx postalCode;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton searchAddressButton;
    // End of variables declaration//GEN-END:variables
	
	private MstGroup	currentData		=	new MstGroup();
	
	/**
	 * グループ情報登録画面用FocusTraversalPolicy
	 */
	private	MstGroupFocusTraversalPolicy	ftp	=
			new MstGroupFocusTraversalPolicy();
	
	/**
	 * グループ情報登録画面用FocusTraversalPolicyを取得する。
	 * @return 会社情報登録画面用FocusTraversalPolicy
	 */
	public MstGroupFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(searchAddressButton);
		SystemInfo.addMouseCursorChange(addButton);
		SystemInfo.addMouseCursorChange(renewButton);
		SystemInfo.addMouseCursorChange(deleteButton);
		SystemInfo.addMouseCursorChange(clearButton);
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
		address1.addKeyListener(SystemInfo.getMoveNextField());
		address1.addFocusListener(SystemInfo.getSelectText());
		address2.addKeyListener(SystemInfo.getMoveNextField());
		address2.addFocusListener(SystemInfo.getSelectText());
		address3.addKeyListener(SystemInfo.getMoveNextField());
		address3.addFocusListener(SystemInfo.getSelectText());
		address4.addKeyListener(SystemInfo.getMoveNextField());
		address4.addFocusListener(SystemInfo.getSelectText());
		faxNumber.addKeyListener(SystemInfo.getMoveNextField());
		faxNumber.addFocusListener(SystemInfo.getSelectText());
		mailAddress.addKeyListener(SystemInfo.getMoveNextField());
		mailAddress.addFocusListener(SystemInfo.getSelectText());
		parentGroup.addKeyListener(SystemInfo.getMoveNextField());
		parentGroup.addFocusListener(SystemInfo.getSelectText());
		phoneNumber.addKeyListener(SystemInfo.getMoveNextField());
		phoneNumber.addFocusListener(SystemInfo.getSelectText());
		postalCode.addKeyListener(SystemInfo.getMoveNextField());
		postalCode.addFocusListener(SystemInfo.getSelectText());
		groupName.addKeyListener(SystemInfo.getMoveNextField());
		groupName.addFocusListener(SystemInfo.getSelectText());
	}
	
	private void setGroup()
	{
		parentGroup.removeAllItems();
		/*parentGroup.addItem(null);*/
		parentGroup.addItem(SystemInfo.getGroup());
		SystemInfo.getGroup().addGroupDataToJComboBox(parentGroup, 1);
		
		//Tree
		DefaultTreeModel	treeModel	=	new DefaultTreeModel(
				SystemInfo.getGroup().createTreeNode(false));
		groupTree.setModel(treeModel);
		SwingUtil.expandJTree(groupTree);
	}
	
	/**
	 * 入力項目をクリアする。
	 */
	private void clear()
	{
		groupTree.setSelectionRow(-1);
		currentData	=	new MstGroup();
		parentGroup.setSelectedIndex(0);
		groupName.setText("");
		postalCode.setText("");
		address1.setText("");
		address2.setText("");
		address3.setText("");
		address4.setText("");
		phoneNumber.setText("");
		faxNumber.setText("");
		mailAddress.setText("");
		SwingUtil.clearTable(children);
	}
	
	/**
	 * 再表示を行う。
	 */
	private void refresh()
	{
		try
		{
			//グループマスタをデータベースから読み込む
			SystemInfo.getGroup().loadData(SystemInfo.getConnection());
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		//
		this.setGroup();
		//入力をクリアする
		this.clear();
	}
	
	/**
	 * 選択データが変更されたときの処理。
	 */
	private void changeCurrentData()
	{
		MstGroup	selData		=	this.getSelectedData();
		
		if(selData != null && currentData.getGroupID() != selData.getGroupID())
		{
			currentData.setData(selData);
			
			//選択されているデータを表示
			this.showCurrentData();
		}
		
		deleteButton.setEnabled(currentData.getGroupID() != null &&
				currentData.getGroupID() != 1);
		renewButton.setEnabled(currentData.getGroupID() != null);
	}
	
	/**
	 * 選択されているグループマスタデータを取得する。
	 * @return 選択されているグループマスタデータ
	 */
	private MstGroup getSelectedData()
	{
		DefaultMutableTreeNode	node	=	(DefaultMutableTreeNode)groupTree.getLastSelectedPathComponent();
		
		if(node != null)
		{
			return	(MstGroup)node.getUserObject();
		}
		else
		{
			return	new MstGroup();
		}
	}
	
	private void showCurrentData()
	{
		this.setParent(currentData.getParentID());
		groupName.setText(currentData.getGroupName());
		postalCode.setText(currentData.getPostalCode());
		address1.setText(currentData.getAddress(0));
		address2.setText(currentData.getAddress(1));
		address3.setText(currentData.getAddress(2));
		address4.setText(currentData.getAddress(3));
		phoneNumber.setText(currentData.getPhoneNumber());
		faxNumber.setText(currentData.getFaxNumber());
		mailAddress.setText(currentData.getMailAddress());
		
		SwingUtil.clearTable(children);
		DefaultTableModel	model	=	(DefaultTableModel)children.getModel();
		
		//子グループの表示
		for(MstGroup mg : currentData.getGroups())
		{
			JLabel		temp	=	new JLabel(mg.getGroupName(),
					SystemInfo.getGroupIcon(),
					JLabel.LEFT);
			Object[]	rowData	=	{	temp	};
			model.addRow(rowData);
		}
		
		//子店舗の表示
		for(MstShop ms : currentData.getShops())
		{
			JLabel		temp	=	new JLabel(ms.getShopName(),
					SystemInfo.getShopIcon(),
					JLabel.LEFT);
			Object[]	rowData	=	{	temp	};
			model.addRow(rowData);
		}
	}
	
	private void setParent(Integer groupID)
	{
		for(int i = 0; i < parentGroup.getItemCount(); i ++)
		{
			MstGroup	mg	=	(MstGroup)parentGroup.getItemAt(i);
			
			if((mg == null && groupID == null) ||
					(mg != null && mg.getGroupID() == groupID))
			{
				parentGroup.setSelectedIndex(i);
				return;
			}
		}
		
		parentGroup.setSelectedIndex(0);
	}
	
	private boolean checkInput(boolean isInsert)
	{
		if(!isInsert &&  currentData.getGroupID() != null)
		{
			if(currentData.getGroupID() == 1)
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(7001),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				//parent.requestFocusInWindow();
				return	false;
			}
		}
		
		if(!isInsert)
		{
			MstGroup	mg	=	(MstGroup)parentGroup.getSelectedItem();
			if(mg != null && currentData.getGroupID() == mg.getGroupID())
			{
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(7002),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
				//parent.requestFocusInWindow();
				return	false;
			}
		}
		
		if(!isInsert && currentData.getGroupID() != 1 && parentGroup.getSelectedIndex() < 0)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED,
							"所属グループ"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			//parent.requestFocusInWindow();
			return	false;
		}
		
		if(groupName.getText().equals(""))
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY,
							"グループ名"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			groupName.requestFocusInWindow();
			return	false;
		}
		
		return	true;
	}
	
	/**
	 * 登録処理を行う。
	 * @param isInsert true - Insert
	 */
	private void regist(boolean isInsert)
	{
		MstGroup		temp	=	new MstGroup();
		
		//行が選択されている場合、元のデータをセットする
		if(!isInsert)
		{
			temp.setGroupID(currentData.getGroupID());
		}
		
		//入力されたデータをセット
		temp.setParent((MstGroup)parentGroup.getSelectedItem());
		temp.setGroupName(groupName.getText());
		temp.setPostalCode(this.getPostalCode());
		temp.setAddress(0, address1.getText());
		temp.setAddress(1, address2.getText());
		temp.setAddress(2, address3.getText());
		temp.setAddress(3, address4.getText());
		temp.setPhoneNumber(phoneNumber.getText());
		temp.setFaxNumber(faxNumber.getText());
		temp.setMailAddress(mailAddress.getText());
		
		//データを登録
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			con.begin();
			
			if(temp.regist(con))
			{
				con.commit();
				this.refresh();
			}
			else
			{
				con.rollback();
				MessageDialog.showMessageDialog(this,
						MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED,
								"グループマスタ"),
						this.getTitle(),
						JOptionPane.ERROR_MESSAGE);
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * 入力されている郵便番号を取得する。
	 * @return 入力されている郵便番号
	 */
	private String getPostalCode()
	{
		return	postalCode.getText().replaceAll("[-_]", "");
	}
	
	/**
	 * データを削除する。
	 */
	private void delete()
	{
		boolean		result	=	true;
		
		//確認メッセージ
		if(MessageDialog.showYesNoDialog(this,
					MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, currentData.getGroupName()),
					this.getTitle(),
					JOptionPane.WARNING_MESSAGE) != 0)
		{
			return;
		}
		
		Integer		newParentID	=	null;
		
		//子グループ・店舗が存在する場合
		if(0 < currentData.getGroups().size() ||
				0 < currentData.getShops().size())
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(7000),
					this.getTitle(),
					JOptionPane.INFORMATION_MESSAGE);
			
			SearchGroupDialog	sgd	=	new SearchGroupDialog(parentFrame, true, currentData.getGroupID());
			sgd.setVisible(true);
			
			//新しい親グループが選択されなかった場合
			if(sgd.getSelectedData() == null)
			{
				return;
			}
			else
			{
				newParentID	=	sgd.getSelectedData().getGroupID();
			}
		}
		
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		if(con == null)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_CONNECT_FAILED),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
		}
		
		try
		{
			con.begin();
			
			//子グループの更新
			for(MstGroup mg : currentData.getGroups())
			{
				if(result)
				{
					mg.getParent().setGroupID(newParentID);
					if(!mg.regist(con))
					{
						//トランザクションロールバック
						con.rollback();
						result	=	false;
						MessageDialog.showMessageDialog(this,
								MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "子グループ"),
								this.getTitle(),
								JOptionPane.ERROR_MESSAGE);
					}
				}
				else
				{
					break;
				}
			}
			
			//子店舗の更新
			for(MstShop ms : currentData.getShops())
			{
				if(result)
				{
					ms.setGroupID(newParentID);
					if(!ms.regist(con))
					{
						//トランザクションロールバック
						con.rollback();
						result	=	false;
						MessageDialog.showMessageDialog(this,
								MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "子店舗"),
								this.getTitle(),
								JOptionPane.ERROR_MESSAGE);
					}
				}
				else
				{
					break;
				}
			}
			
			if(result)
			{
				//グループマスタを論理削除
				if(currentData.delete(con))
				{
					//トランザクションコミット
					con.commit();
					//再表示
					this.refresh();
				}
				else
				{
					//トランザクションロールバック
					con.rollback();
					result	=	false;
					MessageDialog.showMessageDialog(this,
							MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED, "グループ情報"),
							this.getTitle(),
							JOptionPane.ERROR_MESSAGE);
				}
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	
	/**
	 * MstShopPanel用FocusTraversalPolicy
	 */
	private class MstGroupFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(parentGroup))
			{
				return groupName;
			}
			else if (aComponent.equals(groupName))
			{
				return postalCode;
			}
			else if (aComponent.equals(postalCode))
			{
				return address1;
			}
			else if (aComponent.equals(searchAddressButton))
			{
				return address1;
			}
			else if (aComponent.equals(address1))
			{
				return address2;
			}
			else if (aComponent.equals(address2))
			{
				return address3;
			}
			else if (aComponent.equals(address3))
			{
				return address4;
			}
			else if (aComponent.equals(address4))
			{
				return phoneNumber;
			}
			else if (aComponent.equals(phoneNumber))
			{
				return faxNumber;
			}
			else if (aComponent.equals(faxNumber))
			{
				return mailAddress;
			}
			else if (aComponent.equals(mailAddress))
			{
				return parentGroup;
			}
			
			return groupName;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(parentGroup))
			{
				return parentGroup;
			}
			else if (aComponent.equals(groupName))
			{
				return parentGroup;
			}
			else if (aComponent.equals(postalCode))
			{
				return groupName;
			}
			else if (aComponent.equals(searchAddressButton))
			{
				return postalCode;
			}
			else if (aComponent.equals(address1))
			{
				return postalCode;
			}
			else if (aComponent.equals(address2))
			{
				return address1;
			}
			else if (aComponent.equals(address3))
			{
				return address2;
			}
			else if (aComponent.equals(address4))
			{
				return address3;
			}
			else if (aComponent.equals(phoneNumber))
			{
				return address4;
			}
			else if (aComponent.equals(faxNumber))
			{
				return phoneNumber;
			}
			else if (aComponent.equals(mailAddress))
			{
				return faxNumber;
			}
			
			return groupName;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return groupName;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return mailAddress;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return groupName;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return groupName;
		}
	}
}
