/*
 * SelectSameNoData.java
 *
 * Created on 2006/08/29, 15:47
 */

package com.geobeck.sosia.pos.basicinfo;

import java.awt.*;
import java.sql.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.master.customer.*;

/**
 * No.が重複する場合にデータを選択する。
 * @author katagiri
 */
public class SelectSameNoData extends javax.swing.JDialog
{
	
	/**
	 * コンストラクタ
	 * @param parent 
	 * @param modal 
	 */
	public SelectSameNoData(java.awt.Frame parent, boolean modal)
	{
	    super(parent, modal);
	    initComponents();
	    SwingUtil.moveCenter(this);
	}
	
	/**
	 * コンストラクタ
	 * @param parent 
	 * @param modal 
	 * @param objects 
	 */
	public SelectSameNoData(java.awt.Frame parent, boolean modal,ArrayList objects)
	{
	    super(parent, modal);
	    this.setTitle("顧客No.重複一覧");
	    initComponents();
	    this.setObjects(objects);
	    SwingUtil.moveCenter(this);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        imagePanel1 = new com.geobeck.swing.ImagePanel();
        namesScrollPane = new javax.swing.JScrollPane();
        names = new com.geobeck.swing.JTableEx();
        selectButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        imagePanel1.setImage(new javax.swing.ImageIcon(getClass().getResource("/images/orange/contents_background.jpg")));
        namesScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        names.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "顧客No.", "氏名", "生年月日", "電話番号", "携帯番号"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        names.setSelectionBackground(new java.awt.Color(220, 220, 220));
        names.setSelectionForeground(new java.awt.Color(0, 0, 0));
        names.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        names.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(names, SystemInfo.getTableHeaderRenderer());
        names.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        names.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                namesMouseClicked(evt);
            }
        });

        namesScrollPane.setViewportView(names);

        selectButton.setIcon(SystemInfo.getImageIcon("/button/select/select_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setContentAreaFilled(false);
        selectButton.setFocusable(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        backButton.setBorderPainted(false);
        backButton.setContentAreaFilled(false);
        backButton.setFocusable(false);
        backButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout imagePanel1Layout = new org.jdesktop.layout.GroupLayout(imagePanel1);
        imagePanel1.setLayout(imagePanel1Layout);
        imagePanel1Layout.setHorizontalGroup(
            imagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, imagePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(imagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(namesScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                    .add(imagePanel1Layout.createSequentialGroup()
                        .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        imagePanel1Layout.setVerticalGroup(
            imagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imagePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(imagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(namesScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imagePanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imagePanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void namesMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_namesMouseClicked
	{//GEN-HEADEREND:event_namesMouseClicked
	    if (evt.getClickCount() == 2) {
		if (0 <= names.getSelectedRow()) {
		    this.setSelectedObject();
		    this.setVisible(false);
		}
	    }
	}//GEN-LAST:event_namesMouseClicked

	/**
	 * 戻るボタンが押されたときの処理
	 * @param evt 
	 */
	private void backButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButtonActionPerformed
	{//GEN-HEADEREND:event_backButtonActionPerformed
	    this.setVisible(false);
	}//GEN-LAST:event_backButtonActionPerformed

	/**
	 * 選択ボタンが押されたときの処理
	 * @param evt 
	 */
	private void selectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectButtonActionPerformed
	{//GEN-HEADEREND:event_selectButtonActionPerformed
	    this.setSelectedObject();
	    this.setVisible(false);
	}//GEN-LAST:event_selectButtonActionPerformed
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private com.geobeck.swing.ImagePanel imagePanel1;
    private com.geobeck.swing.JTableEx names;
    private javax.swing.JScrollPane namesScrollPane;
    private javax.swing.JButton selectButton;
    // End of variables declaration//GEN-END:variables
	
	private Object selectedObject = null;
	private ArrayList<MstCustomer> objects = new ArrayList<MstCustomer>();
	
	/**
	 * 選択されたデータをセットする。
	 */
	private void setSelectedObject()
	{
	    if (0 <= names.getSelectedRow() && names.getSelectedRow() < objects.size()) {
		selectedObject = objects.get(names.getSelectedRow());
	    }
	}
	
	/**
	 * 選択されたデータを取得する。
	 * @return 選択されたデータ
	 */
	public Object getSelectedObject()
	{
	    return selectedObject;
	}
	
	/**
	 * 選択候補データをセットする。
	 * @param objects 選択候補データ
	 */
	public void setObjects(ArrayList objects)
	{
	    this.objects = objects;
	    this.setNames();
	}
	
	/**
	 * 選択候補データを取得する。
	 * @return 選択候補データ
	 */
	public ArrayList getObjects()
	{
	    return objects;
	}
	
	/**
	 * 選択候補データを表示する。
	 */
	private void setNames()
	{
	    SwingUtil.clearTable(names);

	    DefaultTableModel model = (DefaultTableModel)names.getModel();

	    for(MstCustomer c : objects) {
		Object[] rowData = {
					c.getCustomerNo(),
					c.getFullCustomerName(),
					c.getBirthdayString(),
					c.getPhoneNumber(),
					c.getCellularNumber()
				    };
		model.addRow(rowData);
	    }
	}
	
	/**
	 * 顧客データを顧客コードから取得する。
	 * @param no 顧客コード
	 * @return 顧客データ
	 */
	public static MstCustomer getMstCustomerByNo(Frame owner, ConnectionWrapper con, String no, Integer shopID) throws SQLException
	{
	    MstCustomer customer = null;
	    ArrayList cusArray = MstCustomer.getMstCustomerArrayByNo(con, no, shopID); 

	    if (cusArray.size() == 0) {

		customer = new MstCustomer();

	    } else if(cusArray.size() == 1) {

		customer = (MstCustomer)cusArray.get(0);

	    } else {
		SelectSameNoData smnd = new SelectSameNoData(owner, true, cusArray);
		smnd.setVisible(true);
		customer = (MstCustomer)smnd.getSelectedObject();
	    }

            if (customer == null) {
		customer = new MstCustomer();
            }
            
	    return customer;
	}
	
	
	public static MstStaff getMstStaffByNo(Frame owner, ConnectionWrapper con, String no) throws SQLException
	{
	    MstStaff staff = null;
	    ArrayList staffArray = MstStaff.getMstStaffArrayByNo(con, no); 

	    if (staffArray.size() == 0) {

		staff = new MstStaff();

	    } else if (staffArray.size() == 1) {

		staff = (MstStaff)staffArray.get(0);

	    } else {

		if (owner != null) {
		    SelectSameNoData smnd = new SelectSameNoData(owner, true, staffArray);
		    smnd.setVisible(true);
		    staff = (MstStaff)smnd.getSelectedObject();
		}
	    }

	    return staff;
	}
        
	public static MstStaff getMstStaffByID(Frame owner, ConnectionWrapper con, Integer id) throws SQLException
	{
	    MstStaff staff = null;
	    ArrayList staffArray = MstStaff.getMstStaffArrayByID(con, id); 

	    if (staffArray.size() == 0) {

		staff = new MstStaff();

	    } else if (staffArray.size() == 1) {

		staff = (MstStaff)staffArray.get(0);

	    } else {

		if (owner != null) {
		    SelectSameNoData smnd = new SelectSameNoData(owner, true, staffArray);
		    smnd.setVisible(true);
		    staff = (MstStaff)smnd.getSelectedObject();
		}
	    }

	    return staff;
	}
        
}
