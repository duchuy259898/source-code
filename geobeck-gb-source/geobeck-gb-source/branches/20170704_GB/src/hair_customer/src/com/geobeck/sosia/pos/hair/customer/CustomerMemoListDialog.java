/*
 * 顧客メモ一覧画面
 * CustomerMemoListDialog.java
 * 
 * 顧客メモ対応
 * 
 * Created on 2016/12/30
 */

package com.geobeck.sosia.pos.hair.customer;

import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.util.DateUtil;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;

/**
 * 顧客メモ一覧画面
 */
public class CustomerMemoListDialog extends javax.swing.JDialog {
    
    /**
     * 対象顧客情報
     */
    private final MstCustomer customer;
    
    /**
     * 選択情報囲み開始文字列
     */
    private static final String BLOCK_START_STRING = " (";
    
    /**
     * 選択情報囲み終了文字列
     */
    private static final String BLOCK_END_STRING = ")";
    
    /**
     * 選択情報区切り文字列
     */
    private static final String HEADER_DELIMITER = "／";
    
    /**
     * メモごとの区切り文字列
     */
    private static final String MEMO_DELIMITER = "−−−−−−−−−−−−−−−−";
    
    /**
     * メモ登録日の書式
     */
    private static final String MEMO_DATE_FORMAT = "yyyy/MM/dd";
    
    /**
     * 
     * @param parent 親フレーム
     * @param modal モーダルフラグ
     * @param customer 対象顧客情報
     */
    public CustomerMemoListDialog(java.awt.Frame parent, boolean modal, MstCustomer customer) {
        super(parent, modal);
        initComponents();
        
        this.customer = customer;
        
        customerNoLabel.setText(this.customer.getCustomerNo());
        customerNameLabel.setText(this.customer.getFullCustomerName());
        
        List<DataCustomerMemo> memoList = this.getMemoList();
        if(memoList != null) {
            memoTextArea.setText(this.createMemoListString(memoList));
            memoTextArea.setCaretPosition(0);
        }
    }
    
    /**
     * memoListからテキストエリア表示用にフォーマットされた文字列を作成する。
     * @param memoList
     * @return テキストエリア表示用文字列
     */
    private String createMemoListString(List<DataCustomerMemo> memoList) {
        StringBuilder sb = new StringBuilder();
        
        for(DataCustomerMemo memoData : memoList) {
            appendMemoHeader(memoData, sb);
            sb.append(System.lineSeparator());
            sb.append(memoData.getMemo()).append(System.lineSeparator());
            sb.append(MEMO_DELIMITER).append(System.lineSeparator());
        }
        
        if(sb.length() != 0) {
            // 最後の区切りを削除する。
            sb.delete(sb.length() - (MEMO_DELIMITER.length() + System.lineSeparator().length()), 
                      sb.length());   
        }
        
        return sb.toString();
    }
    
     /**
     * memoDataからメモデータのヘッダ部分を作成し、渡されたStringBuilderに追記する。
     * @param memoData
     * @param sb メモデータのヘッダ部分を追記するStringBuilder
     */
    private void appendMemoHeader(DataCustomerMemo memoData, StringBuilder sb) {
        sb.append(DateUtil.format(memoData.getMemoDate(), MEMO_DATE_FORMAT)).append(BLOCK_START_STRING);
        sb.append(memoData.getShop().getShopName().isEmpty() ? "　" : memoData.getShop().getShopName()).append(HEADER_DELIMITER);
        sb.append(memoData.getStaff()).append(HEADER_DELIMITER); 
        sb.append(DataCustomerMemo.getEvaluationString(memoData.getEvaluation())).append(BLOCK_END_STRING);
    }
    
    /**
     * data_customer_memoテーブルから顧客IDに紐づく未削除データを取得する。
     * @return DataCustomerMemoのリスト。エラー発生時はnull
     */
    private List<DataCustomerMemo> getMemoList() {
        List<DataCustomerMemo> memoList = null;
        try {
            // 対象顧客の未削除メモデータ取得
            DataCustomerMemo dataCustomerMemo = new DataCustomerMemo();
            dataCustomerMemo.setCustomerId(customer.getCustomerID());
            
            memoList = dataCustomerMemo.selectMemoDataWithShopDataAndStaffDataByCustomerId(SystemInfo.getConnection());
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        return memoList;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        memoTextArea = new javax.swing.JTextArea();
        closeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        customerNoLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        customerNameLabel = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(22, 0), new java.awt.Dimension(22, 0), new java.awt.Dimension(22, 32767));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("フィード一覧");
        setPreferredSize(new java.awt.Dimension(1016, 725));

        memoTextArea.setColumns(20);
        memoTextArea.setRows(5);
        jScrollPane1.setViewportView(memoTextArea);

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setToolTipText("");
        closeButton.setBorderPainted(false);
        closeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("顧客No.");
        jLabel1.setName(""); // NOI18N

        customerNoLabel.setText("101-1");
        customerNoLabel.setToolTipText("");
        customerNoLabel.setName(""); // NOI18N

        jLabel2.setText("顧客名");

        customerNameLabel.setText("山田　太郎");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerNameLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(customerNoLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 793, Short.MAX_VALUE)
                                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(customerNoLabel))
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(customerNameLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // 閉じるボタン押下
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel customerNameLabel;
    private javax.swing.JLabel customerNoLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea memoTextArea;
    // End of variables declaration//GEN-END:variables
}
