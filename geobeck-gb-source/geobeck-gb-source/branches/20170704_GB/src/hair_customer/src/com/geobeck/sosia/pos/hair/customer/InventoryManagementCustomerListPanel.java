/*
 * InventoryManagementCustomerListPanel.java
 *
 * Created on 2013/02/26, 9:20
 */
package com.geobeck.sosia.pos.hair.customer;

import com.geobeck.sosia.pos.basicinfo.SelectSameNoData;
import com.geobeck.sosia.pos.customer.*;
import com.geobeck.sosia.pos.hair.account.HairInputAccount;
import com.geobeck.sosia.pos.hair.account.HairInputAccountProductDelivery;
import com.geobeck.sosia.pos.hair.product.MstProductDeliveryHistoryPanel;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.master.customer.*;
import com.geobeck.sosia.pos.search.customer.SearchCustomerDialog;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.*;
import java.awt.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;
//import sun.util.calendar.Gregorian;

/**
 *
 * @author ivs_tttung
 */
public class InventoryManagementCustomerListPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private MstCustomerManager customer = new MstCustomerManager();
    private HairInputAccount ia = new HairInputAccount();
    private MstShop targetShop = null;

    /**
     * Creates new form InventoryManagementCustomerListPanel
     */
    public InventoryManagementCustomerListPanel() {
        initComponents();
        addMouseCursorChange();
        this.setPath("è§ïiä«óù");
        this.setTitle("å⁄ãqï ç›å…ä«óù");
        this.init();
        this.setSize(833, 691);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gearButtonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        cmbStore = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        lblStore = new javax.swing.JLabel();
        lblPeriod1 = new javax.swing.JLabel();
        cmbTargetPeriodStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lblSpe1 = new javax.swing.JLabel();
        cmbTargetPeriodEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lblView = new javax.swing.JLabel();
        rdoIncomplete = new javax.swing.JRadioButton();
        rdoCompletion = new javax.swing.JRadioButton();
        rdoAll = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        btnSearchCustomer = new javax.swing.JButton();
        jTextCustomerNo = new javax.swing.JTextField();
        alertMarkLabel = new javax.swing.JLabel();
        customerName1 = new com.geobeck.swing.JFormattedTextFieldEx();
        customerName2 = new com.geobeck.swing.JFormattedTextFieldEx();
        btnClear = new javax.swing.JButton();
        mobileMembersScrollPane = new javax.swing.JScrollPane();
        InventoryManagementCustomerMember = new com.geobeck.swing.JTableEx();
        btnView = new javax.swing.JButton();
        btnOutputExcel = new javax.swing.JButton();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        cmbStore.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblStore.setText("åüçıèåè");

        lblPeriod1.setText("ìoò^ì˙");

        lblSpe1.setText("Å`");

        cmbTargetPeriodEndDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbTargetPeriodEndDateMouseClicked(evt);
            }
        });
        cmbTargetPeriodEndDate.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                cmbTargetPeriodEndDateAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        lblView.setText("éÛìn");

        gearButtonGroup.add(rdoIncomplete);
        rdoIncomplete.setText("ñ¢äÆóπ");
        rdoIncomplete.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoIncomplete.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoIncomplete.setOpaque(false);

        gearButtonGroup.add(rdoCompletion);
        rdoCompletion.setSelected(true);
        rdoCompletion.setText("äÆóπ");
        rdoCompletion.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoCompletion.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoCompletion.setOpaque(false);
        rdoCompletion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoCompletionActionPerformed(evt);
            }
        });

        gearButtonGroup.add(rdoAll);
        rdoAll.setText("óºï˚");
        rdoAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoAll.setOpaque(false);

        jLabel2.setText("å⁄ãqNo.");

        btnSearchCustomer.setIcon(SystemInfo.getImageIcon("/button/search/search_customer_off.jpg"));
        btnSearchCustomer.setBorderPainted(false);
        btnSearchCustomer.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_customer_on.jpg"));
        btnSearchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCustomerActionPerformed(evt);
            }
        });

        jTextCustomerNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextCustomerNoFocusLost(evt);
            }
        });

        alertMarkLabel.setBackground(new java.awt.Color(255, 140, 180));
        alertMarkLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        alertMarkLabel.setPreferredSize(new java.awt.Dimension(39, 20));

        customerName1.setEditable(false);
        customerName1.setBorder(null);
        customerName1.setInputKanji(true);
        customerName1.setOpaque(false);

        customerName2.setEditable(false);
        customerName2.setBorder(null);
        customerName2.setInputKanji(true);
        customerName2.setOpaque(false);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblStore)
                            .add(lblView)
                            .add(jLabel2))
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(12, 12, 12)
                                .add(rdoCompletion)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(rdoIncomplete)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(rdoAll))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(5, 5, 5)
                                .add(btnSearchCustomer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cmbStore, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 218, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(212, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(lblPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 44, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(cmbTargetPeriodStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(lblSpe1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jTextCustomerNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(alertMarkLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(customerName1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(4, 4, 4)
                                .add(customerName2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(cmbTargetPeriodEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 24, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblStore, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbStore, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblView)
                    .add(rdoAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoIncomplete)
                    .add(rdoCompletion))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .add(11, 11, 11))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(btnSearchCustomer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, customerName2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, customerName1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, alertMarkLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jTextCustomerNo)))
                        .add(16, 16, 16)))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cmbTargetPeriodStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblSpe1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbTargetPeriodEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnClear.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg"));
        btnClear.setBorderPainted(false);
        btnClear.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg"));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        mobileMembersScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        InventoryManagementCustomerMember.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "å_ñÒì˙", "å⁄ãqNo.", "å⁄ãqñº", "è§ïiñº", "çwì¸êî", "éÛìnêî", "écêî", "écóaÇËã‡", "ìoò^", "óöó", "null"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        InventoryManagementCustomerMember.setSelectionBackground(new java.awt.Color(255, 210, 142));
        InventoryManagementCustomerMember.setSelectionForeground(new java.awt.Color(0, 0, 0));
        InventoryManagementCustomerMember.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        InventoryManagementCustomerMember.getTableHeader().setReorderingAllowed(false);
        this.initTableColumnWidth();
        SwingUtil.setJTableHeaderRenderer(InventoryManagementCustomerMember, SystemInfo.getTableHeaderRenderer());
        InventoryManagementCustomerMember.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(InventoryManagementCustomerMember);
        InventoryManagementCustomerMember.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InventoryManagementCustomerMemberMouseClicked(evt);
            }
        });
        mobileMembersScrollPane.setViewportView(InventoryManagementCustomerMember);
        InventoryManagementCustomerMember.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (InventoryManagementCustomerMember.getColumnModel().getColumnCount() > 0) {
            InventoryManagementCustomerMember.getColumnModel().getColumn(10).setMinWidth(0);
            InventoryManagementCustomerMember.getColumnModel().getColumn(10).setPreferredWidth(0);
            InventoryManagementCustomerMember.getColumnModel().getColumn(10).setMaxWidth(0);
        }

        btnView.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
        btnView.setBorderPainted(false);
        btnView.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setContentAreaFilled(false);
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputExcelActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnView, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(btnClear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(30, 30, 30)
                        .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(35, 35, 35))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(mobileMembersScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(56, 56, 56)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(btnView, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(btnClear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(453, Short.MAX_VALUE))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(149, 149, 149)
                    .add(mobileMembersScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                    .addContainerGap()))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        SwingUtil.clearTable(InventoryManagementCustomerMember);
        SwingUtil.clearTable(InventoryManagementCustomerMember);
        //count.setText("ÅiëŒè€êlêîÅF " + InventoryManagementCustomerMember.getRowCount() + "åèÅj");
    }//GEN-LAST:event_btnClearActionPerformed

    private void InventoryManagementCustomerMemberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InventoryManagementCustomerMemberMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_InventoryManagementCustomerMemberMouseClicked

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        if (jTextCustomerNo.getText() == null) {
            return;
        }
        if (cmbTargetPeriodEndDate.getDate().before(cmbTargetPeriodStartDate.getDate())) {
            return;
        }
        btnView.setCursor(null);
        this.search();
        //count.setText("ÅiëŒè€êlêîÅF " + InventoryManagementCustomerMember.getRowCount() + "åèÅj");
    }//GEN-LAST:event_btnViewActionPerformed

    private void cmbTargetPeriodEndDateAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cmbTargetPeriodEndDateAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTargetPeriodEndDateAncestorAdded

    private void cmbTargetPeriodEndDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbTargetPeriodEndDateMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTargetPeriodEndDateMouseClicked

    private void btnSearchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCustomerActionPerformed
        // TODO add your handling code here:
        SystemInfo.getLogger().log(Level.INFO, "å⁄ãqåüçı");
        SearchCustomerDialog sc = new SearchCustomerDialog(parentFrame, true);
        sc.setVisible(true);
        if (sc.getSelectedCustomer() != null
                && !sc.getSelectedCustomer().getCustomerID().equals("")) {
            ConnectionWrapper con = SystemInfo.getConnection();
            MstCustomer cus = new MstCustomer();
            cus.setCustomerID(sc.getSelectedCustomer().getCustomerID());
            try {
                cus.load(con);
            } catch (SQLException ex) {
                Logger.getLogger(InventoryManagementCustomerListPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextCustomerNo.setText(cus.getCustomerNo());
         //   jTextCustomerName.setText(cus.getCustomerName(0) + " " + cus.getCustomerName(1));
            
             // start add 20130117 VTAn Ç®âÔåv
            if (cus.getAlertMark() == null) {
                alertMarkLabel.setText("");
            } else {
                alertMarkLabel.setText("Åy" + cus.getAlertMark() + "Åz");
            }
             customerName1.setText(cus.getCustomerName(0));
             customerName2.setText(cus.getCustomerName(1));
            // end add 20130117 VTAn Ç®âÔåv
        }
        sc.dispose();
        sc = null;
    }//GEN-LAST:event_btnSearchCustomerActionPerformed

    private void jTextCustomerNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextCustomerNoFocusLost
        // TODO add your handling code here:
        this.setCustomer();
    }//GEN-LAST:event_jTextCustomerNoFocusLost

    private void rdoCompletionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoCompletionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoCompletionActionPerformed

    private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputExcelActionPerformed
        //LVTu start add 2015/07/03 New request #38962
        btnOutputExcel.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Integer flag;
            Integer customer_id = null;
            InventoryManagementCustomerList.setSosiaCode(null);
            InventoryManagementCustomerList.setAddDateFrom(null);
            InventoryManagementCustomerList.setAddDateTo(null);
            InventoryManagementCustomerList.setGearCondition(null);
            InventoryManagementCustomerList.setShopID(null);
            InventoryManagementCustomerList.setCustomerNo(jTextCustomerNo.getText());
            if (this.cmbTargetPeriodStartDate.getDateStr() != null) {
                InventoryManagementCustomerList.setAddDateFrom(this.cmbTargetPeriodStartDate.getDateStrWithFirstTime());
            }
            if (this.cmbTargetPeriodEndDate.getDateStr() != null) {
                InventoryManagementCustomerList.setAddDateTo(this.cmbTargetPeriodEndDate.getDateStrWithLastTime());
            }
            if (rdoCompletion.isSelected()) {
                // äÆóπ
                flag = 0;
            } else if (rdoIncomplete.isSelected()) {
                // ñ¢äÆóπ
                flag = 1;
            } else {
                // ëSÇƒ
                flag = 2;
            }
            try {
                if (jTextCustomerNo.getText() == null) {
                    return;
                } else {
                    customer_id = Integer.valueOf(jTextCustomerNo.getText());
                }
            } catch (Exception e) {
            }

            if (cmbStore.getSelectedItem() instanceof MstGroup) {

                //ÉOÉãÅ[Év
                MstGroup mg = (MstGroup) cmbStore.getSelectedItem();
                InventoryManagementCustomerList.setShopID(0);
                InventoryManagementCustomerList.setShopIDList(mg.getShopIDListAll());
            } else if (cmbStore.getSelectedItem() instanceof MstShop) {

                //ìXï‹
                MstShop ms = (MstShop) cmbStore.getSelectedItem();
                InventoryManagementCustomerList.setShopID(ms.getShopID());
            }
            try {
                if(InventoryManagementCustomerList.load(flag, customer_id)) {
                    JExcelApi jx = new JExcelApi("å⁄ãqï ç›å…ä«óù");
                    jx.setTemplateFile("/reports/å⁄ãqï ç›å…ä«óù.xls");
                    
                    MstShop ms = (MstShop) cmbStore.getSelectedItem();
                    SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
                    jx.setValue(2, 3, format.format(this.cmbTargetPeriodStartDate.getDate()) + " Å` " + format.format(this.cmbTargetPeriodEndDate.getDate()));
                    jx.setValue(2, 4, ms.getShopName());
                    if (rdoCompletion.isSelected()) {
                        // äÆóπ
                        jx.setValue(2, 5, "äÆóπ");
                    } else if (rdoIncomplete.isSelected()) {
                        // ñ¢äÆóπ
                        jx.setValue(2, 5, "ñ¢äÆóπ");
                    } else {
                        // ëSÇƒ
                        jx.setValue(2, 5, "ëSÇƒ");
                    }
                    
                    int row = 8;
                    jx.insertRow(row, InventoryManagementCustomerList.size());
                    for (InventoryManagementCustomerData mmd : InventoryManagementCustomerList) {
                        jx.setValue(1, row, format.format(mmd.getSales_date()));
                        jx.setValue(2, row,mmd.getCustomer_no());
                        jx.setValue(3, row,mmd.getCustomer_name());
                        jx.setValue(4, row,mmd.getProduct_name());
                        jx.setValue(5, row,mmd.getSd_product_num());
                        jx.setValue(6, row,mmd.getPp_product_num());
                        jx.setValue(7, row,mmd.getSd_product_num() - mmd.getPp_product_num());
                        jx.setValue(8, row,(mmd.getSd_product_num() - mmd.getPp_product_num()) * mmd.getProductPrice());
                        row ++;
                    }
                    jx.removeRow(row);

                    jx.openWorkbook();
                }
            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        //LVTu end add 2015/07/03 New request #38962
    }//GEN-LAST:event_btnOutputExcelActionPerformed

    private void setCustomer() {
        MstCustomer cus = ia.getSales().getCustomer();
        boolean isChangedCustomerNo = !jTextCustomerNo.getText().equals(cus.getCustomerNo());
        cus.setCustomerNo(jTextCustomerNo.getText());

        if (cus.getCustomerNo().equals("0")) {
            cus = new MstCustomer();
            this.changeCustomerNameEditable(true);
          //  jTextCustomerName.requestFocusInWindow();
        } else {
            //å⁄ãqNoÇÉZÉbÉgÇ∑ÇÈÅB
            cus.setCustomerNo(this.jTextCustomerNo.getText());
            ConnectionWrapper con = SystemInfo.getConnection();
            try {
                if (isChangedCustomerNo) {
                    cus = SelectSameNoData.getMstCustomerByNo(
                            parentFrame,
                            SystemInfo.getConnection(),
                            this.jTextCustomerNo.getText(),
                            (SystemInfo.getSetteing().isShareCustomer() ? 0 : this.getSelectedShopID()));
                } else {
                    cus = new MstCustomer(cus.getCustomerID());
                    cus.load(con);
                }
            } catch (SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            if (cus == null) {
                cus = new MstCustomer();
            }
            this.changeCustomerNameEditable(true);
        }
        jTextCustomerNo.setText(cus.getCustomerNo());
      //  jTextCustomerName.setText(cus.getCustomerName(0) + " " + cus.getCustomerName(1));
        
         // start add 20130117 VTAn Ç®âÔåv
           customerName1.setText(cus.getCustomerName(0));
           customerName2.setText(cus.getCustomerName(1));
           if (cus.getAlertMark() == null) {
               alertMarkLabel.setText("");
           } else {
               alertMarkLabel.setText("Åy" + cus.getAlertMark() + "Åz");
           }
           // end add 20130117 VTAn Ç®âÔåv
        ia.getSales().setCustomer(cus);
      //  jTextCustomerName.requestFocusInWindow();
    }

    private void changeCustomerNameEditable(boolean isEditable) {
        jTextCustomerNo.setEditable(isEditable);
      //  jTextCustomerName.setEditable(isEditable);
        jTextCustomerNo.setFocusable(isEditable);
      //  jTextCustomerName.setFocusable(isEditable);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.geobeck.swing.JTableEx InventoryManagementCustomerMember;
    private javax.swing.JLabel alertMarkLabel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JButton btnSearchCustomer;
    private javax.swing.JButton btnView;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cmbStore;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodEndDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodStartDate;
    private com.geobeck.swing.JFormattedTextFieldEx customerName1;
    private com.geobeck.swing.JFormattedTextFieldEx customerName2;
    private javax.swing.ButtonGroup gearButtonGroup;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextCustomerNo;
    private javax.swing.JLabel lblPeriod1;
    private javax.swing.JLabel lblSpe1;
    private javax.swing.JLabel lblStore;
    private javax.swing.JLabel lblView;
    private javax.swing.JScrollPane mobileMembersScrollPane;
    private javax.swing.JRadioButton rdoAll;
    private javax.swing.JRadioButton rdoCompletion;
    private javax.swing.JRadioButton rdoIncomplete;
    // End of variables declaration//GEN-END:variables

    /**
     * ëIëÇ≥ÇÍÇƒÇ¢ÇÈìXï‹ÇéÊìæÇ∑ÇÈÅB
     *
     * @return ëIëÇ≥ÇÍÇƒÇ¢ÇÈìXï‹
     */
    private MstShop getSelectedShop() {
        return targetShop;
    }

    /**
     * ëIëÇ≥ÇÍÇƒÇ¢ÇÈìXï‹ÇÃIDÇéÊìæÇ∑ÇÈÅB
     *
     * @return ëIëÇ≥ÇÍÇƒÇ¢ÇÈìXï‹ÇÃID
     */
    private Integer getSelectedShopID() {
        MstShop ms = this.getSelectedShop();

        if (ms != null) {
            return ms.getShopID();
        } else {
            return 0;
        }
    }

    /**
     * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(btnView);
        //LVTu start add 2015/07/03 New request #38962
        SystemInfo.addMouseCursorChange(btnSearchCustomer);
        SystemInfo.addMouseCursorChange(btnClear);
        SystemInfo.addMouseCursorChange(btnOutputExcel);
        //LVTu end add 2015/07/03 New request #38962
    }
    private InventoryManagementCustomerList InventoryManagementCustomerList = new InventoryManagementCustomerList();

    /**
     * èâä˙âªèàóùÇçsÇ§ÅB
     */
    private void init() {
        // vtbphuong start change 20140502 Request #22768
        //SystemInfo.initGroupShopComponents(cmbStore, 2);
         SystemInfo.initGroupShopComponents(cmbStore, 3);
        //cmbStore.setVisible(false);
        // vtbphuong end change 20140502 Request #22768
        Calendar c = Calendar.getInstance();
        Date d = c.getTime();
        d.setMonth(d.getMonth() - 2);
        this.cmbTargetPeriodStartDate.setDate(d);
        this.cmbTargetPeriodEndDate.setDate(new Date());
        SwingUtil.clearTable(InventoryManagementCustomerMember);
        SwingUtil.clearTable(InventoryManagementCustomerMember);
    }

    /**
     * åüçıèåèÇçiÇËçûÇ›ÇµIspotâÔàıåüçıÅAàÍóóï\é¶
     */
    private void showList() {
        DefaultTableModel model = (DefaultTableModel) InventoryManagementCustomerMember.getModel();
        if (InventoryManagementCustomerMember.getCellEditor() != null) {
            InventoryManagementCustomerMember.getCellEditor().stopCellEditing();
        }
        model.setRowCount(0);
        SwingUtil.clearTable(InventoryManagementCustomerMember);
        Date sale_date = null;
        String customer_no = null;
        String customer_name = null;
        String product_name = null;
        Integer sd_product_num = null;
        Integer product_value = null;
        Integer pp_product_num = null;
        Integer product_num_used = null;
        Integer customer_id = null;
         SimpleDateFormat sfm = new SimpleDateFormat("yyyy/MM/dd");
        for (InventoryManagementCustomerData mmd : InventoryManagementCustomerList) {
            Object[] rowData = {
                sfm.format(mmd.getSales_date()),
                mmd.getCustomer_no(),
                mmd.getCustomer_name(),
                mmd.getProduct_name(),
                mmd.getSd_product_num(),
                mmd.getPp_product_num(),
                mmd.getSd_product_num() - mmd.getPp_product_num(),
                (mmd.getSd_product_num() - mmd.getPp_product_num()) * mmd.getProductPrice(),
                getRegistButton(mmd),
                getHistoryButton(mmd),
                mmd.getCustomer_id()
            };
            sale_date = mmd.getSales_date();
            customer_no = mmd.getCustomer_no();
            customer_name = mmd.getCustomer_name();
            product_name = mmd.getProduct_name();
            sd_product_num = mmd.getSd_product_num();
            product_value = mmd.getProduct_value();
            pp_product_num = mmd.getPp_product_num();
            product_num_used = mmd.getProduct_num_used();
            customer_id = mmd.getCustomer_id();
            model.addRow(rowData);
        }
        InventoryManagementCustomerList.clear();
        //count.setText("ÅiëŒè€êlêîÅF " + model.getRowCount() + "åèÅj");
    }

    private jp.co.flatsoft.fscomponent.FSCalenderCombo getRegistCalenda(final ConsumerCreditRegisterMemberData mmd, Integer i) {
        jp.co.flatsoft.fscomponent.FSCalenderCombo calenda = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        return calenda;
    }

    /**
     * åüçıÉ{É^ÉìÇéÊìæÇ∑ÇÈ
     */
    private JButton getHistoryButton(final InventoryManagementCustomerData mmd) {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/images/" + SystemInfo.getSkinPackage() + "/button/common/history_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/images/" + SystemInfo.getSkinPackage() + "/button/common/history_on.jpg")));
        button.setSize(48, 25);
        //button.setText("óöó");
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHistoryPanel(mmd);//27.3
                
            }
        });

        return button;
    }

    private void showHistoryPanel(InventoryManagementCustomerData mmd) {

        String cus_id = null;
        cus_id = InventoryManagementCustomerMember.getValueAt(InventoryManagementCustomerMember.getSelectedRow(), 10).toString();
        Integer slip_no = mmd.getSlip_no();
        if (cus_id == null) {
            return;
        }
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            MstCustomer mcus = new MstCustomer();
            ConnectionWrapper con = SystemInfo.getConnection();
            mcus.setCustomerID(Integer.parseInt(cus_id));
            try {
                mcus.load(con);
            } catch (SQLException ex) {
                Logger.getLogger(InventoryManagementCustomerListPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            MstProductDeliveryHistoryPanel histo = new MstProductDeliveryHistoryPanel(mcus,slip_no, mmd.getShop_id());
            SwingUtil.openAnchorDialog(null, true, histo, "è§ïiéÛìnóöó", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);
            search();

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }

    /**
     * ìoò^É{É^ÉìÇéÊìæÇ∑ÇÈ
     */
    private JButton getRegistButton(final InventoryManagementCustomerData mmd) {
        JButton button = new JButton();

        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/images/" + SystemInfo.getSkinPackage() + "/button/common/regist_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/images/" + SystemInfo.getSkinPackage() + "/button/common/regist_on.jpg")));
        button.setSize(48, 25);
        //button.setText("ìoò^");
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showRegistrationPanel(mmd);//27.1
                
            }
        });

        return button;
    }

    private void showRegistrationPanel(InventoryManagementCustomerData mmd) {
        String cus_id = null;
        cus_id = InventoryManagementCustomerMember.getValueAt(InventoryManagementCustomerMember.getSelectedRow(), 10).toString();
        Integer slip_no = mmd.getSlip_no();
        if (cus_id == null) {
            return;
        }
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            MstCustomer mcus = new MstCustomer();
            ConnectionWrapper con = SystemInfo.getConnection();
            mcus.setCustomerID(Integer.parseInt(cus_id));
           
            try {
                mcus.load(con);
            } catch (SQLException ex) {
                Logger.getLogger(InventoryManagementCustomerListPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            HairInputAccountProductDelivery mcp = new HairInputAccountProductDelivery(mcus,slip_no, true,mmd.getShop_id());
            SwingUtil.openAnchorDialog(null, true, mcp, "è§ïiéÛìn", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);
            search();

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }

    /**
     * åüçıèàóùÇçsÇ§ÅB
     */
    private void search() {
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Integer flag;
            Integer customer_id = null;
            InventoryManagementCustomerList.setSosiaCode(null);
            InventoryManagementCustomerList.setAddDateFrom(null);
            InventoryManagementCustomerList.setAddDateTo(null);
            InventoryManagementCustomerList.setGearCondition(null);
            InventoryManagementCustomerList.setShopID(null);
            InventoryManagementCustomerList.setCustomerNo(jTextCustomerNo.getText());
            if (this.cmbTargetPeriodStartDate.getDateStr() != null) {
                InventoryManagementCustomerList.setAddDateFrom(this.cmbTargetPeriodStartDate.getDateStrWithFirstTime());
            }
            if (this.cmbTargetPeriodEndDate.getDateStr() != null) {
                InventoryManagementCustomerList.setAddDateTo(this.cmbTargetPeriodEndDate.getDateStrWithLastTime());
            }
            if (rdoCompletion.isSelected()) {
                // äÆóπ
                flag = 0;
            } else if (rdoIncomplete.isSelected()) {
                // ñ¢äÆóπ
                flag = 1;
            } else {
                // ëSÇƒ
                flag = 2;
            }
            try {
                if (jTextCustomerNo.getText() == null) {
                    return;
                } else {
                    customer_id = Integer.valueOf(jTextCustomerNo.getText());
                }
            } catch (Exception e) {
            }

            // vtbphuong start change 20140502 Request #22768
            // InventoryManagementCustomerList.setShopID(((MstShop) cmbStore.getSelectedItem()).getShopID());
            if (cmbStore.getSelectedItem() instanceof MstGroup) {

                //ÉOÉãÅ[Év
                MstGroup mg = (MstGroup) cmbStore.getSelectedItem();
                InventoryManagementCustomerList.setShopID(0);
                InventoryManagementCustomerList.setShopIDList(mg.getShopIDListAll());
            } else if (cmbStore.getSelectedItem() instanceof MstShop) {

                //ìXï‹
                MstShop ms = (MstShop) cmbStore.getSelectedItem();
                InventoryManagementCustomerList.setShopID(ms.getShopID());
            }
            // vtbphuong end change 20140502 Request #22768
            Boolean boo;
            try {
                boo = InventoryManagementCustomerList.load(flag, customer_id);
            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            this.showList();
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }

    /**
     * IspotâÔàıàÍóóâÊñ ópFocusTraversalPolicy
     */
    private class ispotMemberListFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(cmbStore)) {
                return InventoryManagementCustomerMember;
            } else if (aComponent.equals(InventoryManagementCustomerMember)) {
                return cmbStore;
            }

            return getDefaultComponent();
        }

        /**
         * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(cmbStore)) {
                return InventoryManagementCustomerMember;
            } else if (aComponent.equals(InventoryManagementCustomerMember)) {
                return cmbStore;
            }

            return getDefaultComponent();
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer êÊì™ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getFirstComponent(Container aContainer) {
            return getDefaultComponent();
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer aContainer - ç≈å„ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getLastComponent(Container aContainer) {
            return InventoryManagementCustomerMember;
        }

        /**
         * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB aContainer
         * ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
         *
         * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getDefaultComponent(Container aContainer) {
            return getDefaultComponent();
        }

        /**
         * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB show() Ç‹ÇΩÇÕ setVisible(true)
         * ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
         * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
         * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
         * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
         * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
         */
        public Component getInitialComponent(Window window) {
            return getDefaultComponent();
        }

        public Component getDefaultComponent() {
            if (1 < cmbStore.getItemCount()) {
                return cmbStore;
            } else {
                return InventoryManagementCustomerMember;
            }
        }
    }

    /**
     * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
     */
    private void initTableColumnWidth() {
        //óÒÇÃïùÇê›íËÇ∑ÇÈÅB
        InventoryManagementCustomerMember.getColumnModel().getColumn(0).setPreferredWidth(80);
        InventoryManagementCustomerMember.getColumnModel().getColumn(1).setPreferredWidth(70);
        InventoryManagementCustomerMember.getColumnModel().getColumn(2).setPreferredWidth(70);
        InventoryManagementCustomerMember.getColumnModel().getColumn(3).setPreferredWidth(110);
        InventoryManagementCustomerMember.getColumnModel().getColumn(4).setPreferredWidth(50);
        InventoryManagementCustomerMember.getColumnModel().getColumn(5).setPreferredWidth(50);
        InventoryManagementCustomerMember.getColumnModel().getColumn(6).setPreferredWidth(50);
        InventoryManagementCustomerMember.getColumnModel().getColumn(7).setPreferredWidth(60);
        InventoryManagementCustomerMember.getColumnModel().getColumn(8).setPreferredWidth(90);
        InventoryManagementCustomerMember.getColumnModel().getColumn(9).setPreferredWidth(90);
        InventoryManagementCustomerMember.getColumnModel().getColumn(10).setPreferredWidth(0);
    }

    /**
     * IspotâÔàıàÍóóÉeÅ[ÉuÉãópÇÃTableCellRenderer
     */
    public class TableCellRenderer extends SelectTableCellRenderer {

        /**
         * Creates a new instance of TableCellRenderer
         */
        public TableCellRenderer() {
            super();
        }

        /**
         * ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉOÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param table JTable
         * @param value ÉZÉãÇ…äÑÇËìñÇƒÇÈíl
         * @param isSelected ÉZÉãÇ™ëIëÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÇÕ true
         * @param hasFocus ÉtÉHÅ[ÉJÉXÇ™Ç†ÇÈèÍçáÇÕ true
         * @param row çs
         * @param column óÒ
         * @return ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉO
         */
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {

            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            super.setHorizontalAlignment(SwingConstants.CENTER);

            switch (column) {
//                        case 0:
//                        case 1:
//                        case 4:
//                                super.setHorizontalAlignment(SwingConstants.CENTER);
//                                break;
                default:
                    super.setHorizontalAlignment(SwingConstants.LEFT);
                    break;
            }

            return this;
        }
    }
}
