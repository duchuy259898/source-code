/*
 * PlacePanel.java
 *
 * Created on 2008/09/16, 9:52
 */

package com.geobeck.sosia.pos.hair.product;

import com.geobeck.sosia.pos.hair.product.logic.PlaceListLogic;
import com.geobeck.sosia.pos.master.commodity.MstSupplier;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.product.MstPlace;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.MessageDialog;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.swing.JOptionPane;

/**
 *
 * @author  s_matsumura
 */
public class PlacePanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
    private PrintInventry	ia	=	new PrintInventry();
    private InventryPeriod	ib	=	new InventryPeriod();
    
    private int invetoryType = 0;
    private int outputCond   = 0;
    private int reportType   = 0;
    /** Creates new form PlacePanel */
    public PlacePanel() {
        super();
        initComponents();
        
        ftp	= new LocalFocusTraversalPolicy();
        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        
        addMouseCursorChange();
        this.setSize(500, 207);
        this.setPath("è§ïiä«óù >> í†ï[");
        this.setTitle("íuèÍï ç›å…ï[");
        SystemInfo.initGroupShopComponents(shop, 2);
        this.setKeyListener();
        try {
            this.init();
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1099),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
        }
        
        //ï\é¶ãÊï™
        rdoInventryUnit.setSelected(false);
        rdoInventryBlank.setSelected(true);
        rdoInventryALL.setSelected(false);
        this.invetoryType = PlaceListLogic.INVENTORY_WORK;
        
        //èoóÕèåè
        rdoZaikoUnit.setSelected(true);
        rdoZaikoBlank.setSelected(false);
        rdoZaikoALL.setSelected(false);
        this.outputCond = PlaceListLogic.OUTPUT_COND_UNIT;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        shopLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblInventry = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        rdoInventryUnit = new javax.swing.JRadioButton();
        rdoInventryBlank = new javax.swing.JRadioButton();
        rdoInventryALL = new javax.swing.JRadioButton();
        suppliersNo = new javax.swing.JTextField();
        suppliers = new javax.swing.JComboBox();
        rdoZaikoUnit = new javax.swing.JRadioButton();
        rdoZaikoBlank = new javax.swing.JRadioButton();
        rdoZaikoALL = new javax.swing.JRadioButton();
        inventryPeriod = new javax.swing.JComboBox();
        placebox = new javax.swing.JComboBox();
        btnOutputPdf = new javax.swing.JButton();
        btnOutputExcel = new javax.swing.JButton();

        shopLabel.setText("\u5e97\u8217");

        jLabel2.setText("\u4ed5\u5165\u5148");

        lblInventry.setText("\u8868\u793a\u533a\u5206");

        jLabel3.setText("\u7f6e\u5834");

        jLabel4.setText("\u51fa\u529b\u6761\u4ef6");

        jLabel5.setText("\u96c6\u8a08\u671f\u9593");

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdoInventryUnit);
        rdoInventryUnit.setText("\u5e97\u8ca9\u7528");
        rdoInventryUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoInventryUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoInventryUnit.setOpaque(false);
        rdoInventryUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoInventryUnitActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdoInventryBlank);
        rdoInventryBlank.setSelected(true);
        rdoInventryBlank.setText("\u696d\u52d9\u7528");
        rdoInventryBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoInventryBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoInventryBlank.setOpaque(false);
        rdoInventryBlank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoInventryBlankActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdoInventryALL);
        rdoInventryALL.setText("\u5168\u3066");
        rdoInventryALL.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoInventryALL.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoInventryALL.setOpaque(false);
        rdoInventryALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoInventryALLActionPerformed(evt);
            }
        });

        suppliersNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        suppliersNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                suppliersNoFocusLost(evt);
            }
        });

        suppliers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        suppliers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppliersActionPerformed(evt);
            }
        });

        buttonGroup2.add(rdoZaikoUnit);
        rdoZaikoUnit.setSelected(true);
        rdoZaikoUnit.setText("\u5728\u5eab\u6709\u308a");
        rdoZaikoUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoZaikoUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoZaikoUnit.setOpaque(false);
        rdoZaikoUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoZaikoUnitActionPerformed(evt);
            }
        });

        buttonGroup2.add(rdoZaikoBlank);
        rdoZaikoBlank.setText("\u5728\u5eab\u7121\u3057");
        rdoZaikoBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoZaikoBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoZaikoBlank.setOpaque(false);
        rdoZaikoBlank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoZaikoBlankActionPerformed(evt);
            }
        });

        buttonGroup2.add(rdoZaikoALL);
        rdoZaikoALL.setText("\u5168\u3066");
        rdoZaikoALL.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoZaikoALL.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoZaikoALL.setOpaque(false);
        rdoZaikoALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoZaikoALLActionPerformed(evt);
            }
        });

        inventryPeriod.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        placebox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        btnOutputPdf.setIcon(SystemInfo.getImageIcon("/button/print/output_pdf_off.jpg"));
        btnOutputPdf.setBorderPainted(false);
        btnOutputPdf.setContentAreaFilled(false);
        btnOutputPdf.setPressedIcon(SystemInfo.getImageIcon("/button/print/output_pdf_on.jpg"));
        btnOutputPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputPdfActionPerformed(evt);
            }
        });

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setContentAreaFilled(false);
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInventry)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(shopLabel))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rdoInventryUnit)
                        .addGap(16, 16, 16)
                        .addComponent(rdoInventryBlank)
                        .addGap(19, 19, 19)
                        .addComponent(rdoInventryALL))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inventryPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rdoZaikoUnit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rdoZaikoBlank)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rdoZaikoALL))))
                            .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnOutputPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOutputExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(placebox, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(suppliersNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(suppliers, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rdoInventryBlank, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rdoInventryALL, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblInventry, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rdoInventryUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(placebox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(suppliersNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(suppliers, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoZaikoBlank, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdoZaikoUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdoZaikoALL, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inventryPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnOutputPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOutputExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void rdoZaikoALLActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoZaikoALLActionPerformed
    {//GEN-HEADEREND:event_rdoZaikoALLActionPerformed
        if( this.rdoZaikoALL.isSelected() ) {
            this.outputCond = PlaceListLogic.OUTPUT_COND_ALL;
        }
    }//GEN-LAST:event_rdoZaikoALLActionPerformed
    
    private void rdoZaikoBlankActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoZaikoBlankActionPerformed
    {//GEN-HEADEREND:event_rdoZaikoBlankActionPerformed
        if( this.rdoZaikoBlank.isSelected() ) {
            this.outputCond = PlaceListLogic.OUTPUT_COND_NONE;
        }
        
    }//GEN-LAST:event_rdoZaikoBlankActionPerformed
    
    private void rdoZaikoUnitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoZaikoUnitActionPerformed
    {//GEN-HEADEREND:event_rdoZaikoUnitActionPerformed
        if( this.rdoZaikoUnit.isSelected() ) {
            this.outputCond = PlaceListLogic.OUTPUT_COND_UNIT;
        }
    }//GEN-LAST:event_rdoZaikoUnitActionPerformed
    
    private void rdoInventryALLActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoInventryALLActionPerformed
    {//GEN-HEADEREND:event_rdoInventryALLActionPerformed
        if( this.rdoInventryALL.isSelected() ) {
            this.invetoryType = PlaceListLogic.INVENTORY_ALL;

	        initPeriod();
		}
    }//GEN-LAST:event_rdoInventryALLActionPerformed
    
    private void rdoInventryBlankActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoInventryBlankActionPerformed
    {//GEN-HEADEREND:event_rdoInventryBlankActionPerformed
        if( this.rdoInventryBlank.isSelected() ) {
            this.invetoryType = PlaceListLogic.INVENTORY_WORK;

	        initPeriod();
		}
    }//GEN-LAST:event_rdoInventryBlankActionPerformed
    
    private void rdoInventryUnitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoInventryUnitActionPerformed
    {//GEN-HEADEREND:event_rdoInventryUnitActionPerformed
        if( this.rdoInventryUnit.isSelected() ) {
            this.invetoryType = PlaceListLogic.INVENTORY_STORE;

	        initPeriod();
        }
    }//GEN-LAST:event_rdoInventryUnitActionPerformed
    
	private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutputExcelActionPerformed
	{//GEN-HEADEREND:event_btnOutputExcelActionPerformed
            this.reportType = PlaceListLogic.EXPORT_FILE_XLS;
            this.generatePlaceReport();
	}//GEN-LAST:event_btnOutputExcelActionPerformed
        
        //PDFèoóÕ
	private void btnOutputPdfActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutputPdfActionPerformed
	{//GEN-HEADEREND:event_btnOutputPdfActionPerformed
            this.reportType = PlaceListLogic.EXPORT_FILE_PDF;
            this.generatePlaceReport();
	}//GEN-LAST:event_btnOutputPdfActionPerformed
        
        /**
         * ì¸óÕÉ`ÉFÉbÉN
         */
        private int checkInput() {
            int  err = 0;
            
            if( err == 0 && this.inventryPeriod.getSelectedIndex() < 0 ) {
                //display message
                err = 12004;
            }
            return err;
        }
        
        private void generatePlaceReport() {
            int err  = this.checkInput();
            if( 0 == err ) {
                DateRange range = (DateRange)this.inventryPeriod.getSelectedItem();
                MstShop shop = (MstShop)this.shop.getSelectedItem();
                MstSupplier supplier = (MstSupplier)this.suppliers.getSelectedItem();
                MstPlace place = (MstPlace)this.placebox.getSelectedItem();
                PlaceListLogic logic = new PlaceListLogic(shop, supplier, place, range.getTo(), range.getFrom(), this.reportType);
                logic.setInventory(this.invetoryType);
                logic.setOutputCond(this.outputCond);
                
                int result = logic.viewPlaceListReport();
                
                if(result == logic.RESULT_SUCCESS ){
                    // ê¨å˜
                }else if(result == logic.RESULT_DATA_NOTHNIG ){
                    // ÉfÅ[É^Ç»Çµ
                    err = 4001;
                }else if(result == logic.RESULT_ERROR ){
                    // ó\ä˙ÇπÇ ÉGÉâÅ[
                    err = 1099;
                }
            }
            if( 0 != err ) {
                this.displayMessage(err);
            }
        }
        
        private void displayMessage(int msgid) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(msgid),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
        }
        
        //èâä˙âª
        private void init() throws SQLException {
            this.initSupplier();
            this.initPeriod();
            this.initPlace();
        }
        
        /**
         * édì¸êÊÇèâä˙âªÇ∑ÇÈÅB
         */
        private void initSupplier() throws SQLException {
            boolean icheck = false;
            suppliers.removeAllItems();
            for(MstSupplier ms : ia.getSuppliers()) {
                suppliers.addItem(ms);
                icheck = true;
            }
            
            if( icheck ) {
                suppliers.setSelectedIndex(0);
            }
        }
        
        /**
         * íuèÍÇèâä˙âªÇ∑ÇÈÅB
         */
        private void initPlace() throws SQLException {
            int icheck = 0;
            placebox.removeAllItems();
            for(MstPlace ms : ia.getPlaces()) {
                placebox.addItem(ms);
                icheck = 1;
            }
            if(icheck == 1) {
                placebox.setSelectedIndex(0);
            }
        }
        
        /**
         * íIâµä˙ä‘Çê›íËÇ∑ÇÈ
         */
        private void initPeriod() {
            try {
                ConnectionWrapper cw = SystemInfo.getConnection();
                inventryPeriod.removeAllItems();
                MstShop		ms	=	(MstShop)shop.getSelectedItem();
                ib.setcutoffday(ms.getCutoffDay());
                ib.setShop(ms.getShopID());
				
				// ìXîÃÅEã∆ñ± ãÊï™
				if (rdoInventryUnit.isSelected())
				{
					ib.setInventoryDivision(1);
				}
				else if (rdoInventryBlank.isSelected())
				{
					ib.setInventoryDivision(2);
				}
				else
				{
					ib.setInventoryDivision(null);
				}

                for(DateRange obj : ib.getInventrydate(cw, true)) {
                    inventryPeriod.addItem(obj);
                }
                
                if(inventryPeriod.getItemCount() > 0) {
                    inventryPeriod.setSelectedIndex(0);
                }
                
            } catch(SQLException e) {
                throw new RuntimeException(e);
            }
        }
        
        private void addMouseCursorChange() {
            SystemInfo.addMouseCursorChange(btnOutputPdf);
            SystemInfo.addMouseCursorChange(btnOutputExcel);
        }
        
        
    private void suppliersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppliersActionPerformed
        UIUtil.outputSupplier(suppliers, suppliersNo);
    }//GEN-LAST:event_suppliersActionPerformed
    
    private void suppliersNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_suppliersNoFocusLost
        UIUtil.selectSupplier(suppliersNo, suppliers);
    }//GEN-LAST:event_suppliersNoFocusLost
    
    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
        initPeriod();
    }//GEN-LAST:event_shopActionPerformed
    
    // <editor-fold defaultstate="collapsed" desc="Variables declaration - do not modify">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JButton btnOutputPdf;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox inventryPeriod;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblInventry;
    private javax.swing.JComboBox placebox;
    private javax.swing.JRadioButton rdoInventryALL;
    private javax.swing.JRadioButton rdoInventryBlank;
    private javax.swing.JRadioButton rdoInventryUnit;
    private javax.swing.JRadioButton rdoZaikoALL;
    private javax.swing.JRadioButton rdoZaikoBlank;
    private javax.swing.JRadioButton rdoZaikoUnit;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JComboBox suppliers;
    private javax.swing.JTextField suppliersNo;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    
    private void setKeyListener() {
    }
    
    // <editor-fold defaultstate="collapsed" desc="Focus Traversal Code">                          
    private LocalFocusTraversalPolicy   ftp;
    /**
     * FocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
     * @return FocusTraversalPolicy
     */
    public LocalFocusTraversalPolicy getFocusTraversalPolicy()
    {
        return  ftp;
    }
    
    /**
     * FocusTraversalPolicy
     */
    private class LocalFocusTraversalPolicy
                    extends FocusTraversalPolicy
    {
        ArrayList<Component> controls = new ArrayList<Component>();
        public LocalFocusTraversalPolicy()
        {
            
            controls.add(shop);
            controls.add(rdoInventryUnit);
            controls.add(rdoInventryBlank);
            controls.add(rdoInventryALL);
            controls.add(placebox);
            controls.add(suppliersNo);
            //controls.add(suppliers);
            controls.add(rdoZaikoUnit);
            controls.add(rdoZaikoBlank);
            controls.add(rdoZaikoALL);
            controls.add(inventryPeriod);
            
            for( Component control : controls ){
                control.addKeyListener(SystemInfo.getMoveNextField());
                control.addFocusListener(SystemInfo.getSelectText());
            }

            // ç≈å„Ç…êÊì™Ççƒìxìoò^(ìØéûÇ…EnabledÇ™FalseÇ…Ç»ÇÁÇ»Ç¢Ç∆Ç±ÇÎÇ‹Ç≈èdï°ìoò^)
            controls.add(shop);
            controls.add(inventryPeriod);
        };
            
        /**
         * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getComponentAfter(Container aContainer,
                                           Component aComponent)
        {
            boolean find = false;
            for(Component co : controls){
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }

        /**
         * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getComponentBefore(Container aContainer,
                                            Component aComponent)
        {
            boolean find = false;
            for( int ii = controls.size(); ii>0; ii-- ){
                Component co = controls.get(ii-1);
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getFirstComponent(Container aContainer)
        {
            return getDefaultComponent(aContainer);
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getLastComponent(Container aContainer)
        {
            return getComponentBefore(aContainer, controls.get(0));
        }
        
        /**
         * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getDefaultComponent(Container aContainer)
        {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
        
        /**
         * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         */
        public Component getInitialComponent(Window window)
        {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
    }
    // </editor-fold>
    
}
