/*
 * InventryPanel.java
 *
 * Created on 2008/09/29, 13:08
 */

package com.geobeck.sosia.pos.hair.product;

import com.geobeck.sosia.pos.basicinfo.WorkTimePasswordDialog;
import com.geobeck.sosia.pos.basicinfo.commodity.EditabeTableCellRenderer;
import com.geobeck.sosia.pos.hair.data.commodity.DataInventory;
import com.geobeck.sosia.pos.hair.data.commodity.DataInventoryDetail;
import com.geobeck.sosia.pos.hair.product.logic.PrintInventoryLogic;
import com.geobeck.sosia.pos.master.commodity.MstSupplier;
import com.geobeck.sosia.pos.master.commodity.MstSuppliers;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.product.MstItem;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.IntegerCellEditor;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import com.geobeck.util.SQLUtil;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author  syouji
 */
public class InventryPanel_TOM extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	/**
	 * FocusTraversalPolicy
	 */
	private	FocusTraversalPolicy traversalPolicy = 	new FocusTraversalPolicyImpl();

	/**
	 * FocusTraversalPolicyを取得する。
	 * @return FocusTraversalPolicy
	 */
	public FocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	traversalPolicy;
	}

	private SearchInventry	si	=	new SearchInventry();
	private InventoryRecords	ir	=	new InventoryRecords();
	private DataInventory current_di = new DataInventory();
	private java.util.Date toDateTemp = null;
	
	/** Creates new form InventryPanel */
	public InventryPanel_TOM()
	{
		
		initComponents();
		addMouseCursorChange();
		this.setSize(850, 690);
		this.setPath("商品管理 >> 棚卸");
		this.setTitle("棚卸");
		this.setKeyListener();
		
		//店舗コンボボックス初期化
		SystemInfo.initGroupShopComponents(shop, 2);
		//仕入先コンボボックス初期化
		initSupplier();
		
		//デザイン用のボタンテキストを消去
		btnTempRegist.setText("");
		btnRegist.setText("");
		btnOutputPdf.setText("");
		btnOutputExcel.setText("");
		btnShow.setText("");
		
		//既存の棚卸データ（ヘッダ）を読み込む
		loadInventoryHead();
		
		initMonthCombobox(inventoryPeriodMonth);
		
		//棚卸期間の初期表示を行う
		setInventrySpan();
		
		status.setText("");
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        inventryUnit = new javax.swing.ButtonGroup();
        taxUnit = new javax.swing.ButtonGroup();
        itemUnit = new javax.swing.ButtonGroup();
        conditionUnit = new javax.swing.ButtonGroup();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        lblTax = new javax.swing.JLabel();
        rdoTaxUnit = new javax.swing.JRadioButton();
        rdoTaxBlank = new javax.swing.JRadioButton();
        shopLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        suppliersNo = new javax.swing.JTextField();
        suppliers = new javax.swing.JComboBox();
        lblInventry = new javax.swing.JLabel();
        rdoInventrySale = new javax.swing.JRadioButton();
        rdoInventryWork = new javax.swing.JRadioButton();
        dispLabel = new javax.swing.JLabel();
        rdoClass = new javax.swing.JRadioButton();
        rdoPlace = new javax.swing.JRadioButton();
        rdoConditionAll = new javax.swing.JRadioButton();
        rdoConditionDiff = new javax.swing.JRadioButton();
        rdoConditionNoDiff = new javax.swing.JRadioButton();
        btnOutputPdf = new javax.swing.JButton();
        btnShow = new javax.swing.JButton();
        btnTempRegist = new javax.swing.JButton();
        btnRegist = new javax.swing.JButton();
        inventryScrollPane = new javax.swing.JScrollPane();
        inventryTable = new com.geobeck.swing.JTableEx();
        summaryScrollPane = new javax.swing.JScrollPane();
        summaryTable = new com.geobeck.swing.JTableEx();
        btnOutputExcel = new javax.swing.JButton();
        inventoryPeriodYear = new javax.swing.JComboBox();
        inventoryPeriodMonth = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        status = new javax.swing.JLabel();

        setBackground(new java.awt.Color(246, 246, 246));
        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        lblTax.setText("\u7a0e\u533a\u5206");

        taxUnit.add(rdoTaxUnit);
        rdoTaxUnit.setSelected(true);
        rdoTaxUnit.setText("\u7a0e\u8fbc");
        rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxUnit.setOpaque(false);

        taxUnit.add(rdoTaxBlank);
        rdoTaxBlank.setText("\u7a0e\u629c");
        rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxBlank.setOpaque(false);

        shopLabel.setText("\u5e97\u8217");

        dateLabel.setText("\u96c6\u8a08\u671f\u9593");

        jLabel3.setText("\u4ed5\u5165\u5148");

        suppliersNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        suppliersNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                suppliersNoFocusLost(evt);
            }
        });

        suppliers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        suppliers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppliersActionPerformed(evt);
            }
        });

        lblInventry.setText("\u68da\u5378\u533a\u5206");

        inventryUnit.add(rdoInventrySale);
        rdoInventrySale.setText("\u5e97\u8ca9\u7528");
        rdoInventrySale.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoInventrySale.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoInventrySale.setOpaque(false);
        rdoInventrySale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoInventrySaleActionPerformed(evt);
            }
        });

        inventryUnit.add(rdoInventryWork);
        rdoInventryWork.setSelected(true);
        rdoInventryWork.setText("\u696d\u52d9\u7528");
        rdoInventryWork.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoInventryWork.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoInventryWork.setOpaque(false);
        rdoInventryWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoInventryWorkActionPerformed(evt);
            }
        });

        dispLabel.setText("\u8868\u793a\u6761\u4ef6");

        itemUnit.add(rdoClass);
        rdoClass.setSelected(true);
        rdoClass.setText("\u5206\u985e");
        rdoClass.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoClass.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoClass.setOpaque(false);

        itemUnit.add(rdoPlace);
        rdoPlace.setText("\u7f6e\u5834");
        rdoPlace.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoPlace.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoPlace.setOpaque(false);

        conditionUnit.add(rdoConditionAll);
        rdoConditionAll.setSelected(true);
        rdoConditionAll.setText("\u5168\u3066");
        rdoConditionAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoConditionAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoConditionAll.setOpaque(false);

        conditionUnit.add(rdoConditionDiff);
        rdoConditionDiff.setText("\u904e\u4e0d\u8db3\u3042\u308a");
        rdoConditionDiff.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoConditionDiff.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoConditionDiff.setOpaque(false);

        conditionUnit.add(rdoConditionNoDiff);
        rdoConditionNoDiff.setText("\u904e\u4e0d\u8db3\u306a\u3057");
        rdoConditionNoDiff.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoConditionNoDiff.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoConditionNoDiff.setOpaque(false);

        btnOutputPdf.setIcon(SystemInfo.getImageIcon("/button/print/output_pdf_off.jpg"));
        btnOutputPdf.setText("PDF\u51fa\u529b");
        btnOutputPdf.setBorderPainted(false);
        btnOutputPdf.setContentAreaFilled(false);
        btnOutputPdf.setFocusCycleRoot(true);
        btnOutputPdf.setPressedIcon(SystemInfo.getImageIcon("/button/print/output_pdf_on.jpg"));
        btnOutputPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputPdfActionPerformed(evt);
            }
        });

        btnShow.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
        btnShow.setText("\u8868\u793a");
        btnShow.setBorderPainted(false);
        btnShow.setContentAreaFilled(false);
        btnShow.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        btnTempRegist.setIcon(SystemInfo.getImageIcon("/button/account/tempAccount_off.jpg"));
        btnTempRegist.setText("\u4e00\u6642\u4fdd\u5b58");
        btnTempRegist.setBorderPainted(false);
        btnTempRegist.setContentAreaFilled(false);
        btnTempRegist.setFocusable(false);
        btnTempRegist.setPressedIcon(SystemInfo.getImageIcon("/button/account/tempAccount_on.jpg"));
        btnTempRegist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTempRegistActionPerformed(evt);
            }
        });

        btnRegist.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        btnRegist.setText("\u767b\u9332");
        btnRegist.setBorderPainted(false);
        btnRegist.setContentAreaFilled(false);
        btnRegist.setFocusable(false);
        btnRegist.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        btnRegist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistActionPerformed(evt);
            }
        });

        inventryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "分類／置場", "商品名", "仕入価格", "期首", "入庫数", "入庫金額", "出庫数", "出庫金額", "帳簿在庫", "実在庫数", "過不足数", "在庫金額", "過不足金額"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inventryTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        inventryTable.setSelectionBackground(new java.awt.Color(255, 210, 142));
        inventryTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        SwingUtil.setJTableHeaderRenderer(inventryTable, SystemInfo.getTableHeaderRenderer());
        inventryTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(inventryTable);

        TableColumnModel model = inventryTable.getColumnModel();
        model.getColumn(9).setCellRenderer(new EditabeTableCellRenderer(Integer.class));
        model.getColumn(9).setCellEditor(new IntegerCellEditor(new JTextField()));
        model.getColumn(10).setCellRenderer(new MinusCellRedRenderer());
        model.getColumn(12).setCellRenderer(new MinusCellRedRenderer());
        inventryTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                inventryTablePropertyChange(evt);
            }
        });

        inventryScrollPane.setViewportView(inventryTable);

        summaryScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        summaryScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        summaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "期首", "入庫数", "入庫金額", "出庫数", "出庫金額", "帳簿在庫", "実在個数", "過不足数", "在庫金額", "過不足金額"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        summaryTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        summaryTable.setSelectionBackground(new java.awt.Color(255, 210, 142));
        summaryTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        SwingUtil.setJTableHeaderRenderer(summaryTable, SystemInfo.getTableHeaderRenderer());
        summaryTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initSummaryTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(summaryTable);
        summaryTable.getColumnModel().getColumn(7).setCellRenderer(new MinusCellRedRenderer());
        summaryTable.getColumnModel().getColumn(9).setCellRenderer(new MinusCellRedRenderer());
        summaryScrollPane.setViewportView(summaryTable);

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setText("EXCEL");
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setContentAreaFilled(false);
        btnOutputExcel.setFocusCycleRoot(true);
        btnOutputExcel.setPreferredSize(new java.awt.Dimension(81, 23));
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputExcelActionPerformed(evt);
            }
        });

        inventoryPeriodYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        inventoryPeriodMonth.setMaximumRowCount(12);
        inventoryPeriodMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel4.setFont(new java.awt.Font("MS UI Gothic", 0, 13));
        jLabel4.setForeground(java.awt.Color.red);
        jLabel4.setText("\u203b\u4ed5\u5165\u5148\u3067\u7d5e\u308a\u8fbc\u307f\u3092\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u300c\u4e00\u6642\u4fdd\u5b58\u300d\u306e\u307f\u53ef\u80fd\u3067\u3059\u3002");

        jLabel5.setFont(new java.awt.Font("MS UI Gothic", 0, 13));
        jLabel5.setForeground(java.awt.Color.red);
        jLabel5.setText("\u203b\u68da\u5378\u78ba\u5b9a\u51e6\u7406\u306f\u4ed5\u5165\u5148\u3092\u672a\u9078\u629e\u306b\u3066\u8868\u793a\u5f8c\u3001\u300c\u767b\u9332\u300d\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002");

        status.setFont(new java.awt.Font("MS UI Gothic", 1, 15));
        status.setForeground(java.awt.Color.blue);
        status.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        status.setText("\u3010\u672a\u767b\u9332\u3011");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(shopLabel))
                                    .addGap(23, 23, 23)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 268, Short.MAX_VALUE)
                                            .addComponent(btnTempRegist, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnRegist, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnOutputPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btnOutputExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(suppliersNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(suppliers, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblInventry)
                                        .addComponent(dateLabel)
                                        .addComponent(dispLabel)
                                        .addComponent(lblTax))
                                    .addGap(11, 11, 11)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(rdoTaxUnit)
                                            .addGap(7, 7, 7)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(rdoConditionDiff)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(rdoConditionNoDiff))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(rdoTaxBlank, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(150, 150, 150)
                                                    .addComponent(btnShow, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(rdoInventrySale)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(rdoInventryWork))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(inventoryPeriodYear, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(rdoConditionAll)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(rdoClass)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(rdoPlace)))))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(inventoryPeriodMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(26, 26, 26)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE))))
                            .addGap(50, 50, 50))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(inventryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 815, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(70, 70, 70)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(summaryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(suppliersNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(suppliers, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(shopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnOutputExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnOutputPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnRegist, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnTempRegist, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblInventry, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rdoInventrySale, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rdoInventryWork, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inventoryPeriodYear, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inventoryPeriodMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(dispLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rdoClass, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rdoPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rdoConditionAll, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rdoConditionDiff, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rdoConditionNoDiff, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblTax, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rdoTaxUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rdoTaxBlank, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addGap(79, 79, 79)
                                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(btnShow, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inventryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(summaryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void rdoInventrySaleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoInventrySaleActionPerformed
	{//GEN-HEADEREND:event_rdoInventrySaleActionPerformed
		reload(false);
	}//GEN-LAST:event_rdoInventrySaleActionPerformed

	private void rdoInventryWorkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoInventryWorkActionPerformed
	{//GEN-HEADEREND:event_rdoInventryWorkActionPerformed
		reload(false);
	}//GEN-LAST:event_rdoInventryWorkActionPerformed
	
	private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutputExcelActionPerformed
	{//GEN-HEADEREND:event_btnOutputExcelActionPerformed
		//仕入先入力チェック
		MstSupplier supplier = (MstSupplier)this.suppliers.getSelectedItem();
		if (supplier == null || supplier.getSupplierID() == null)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "仕入先"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			suppliers.requestFocusInWindow();
			return;
		}

		//データの更新チェック
		if (ir.getCurrentInventry() == null || si.isUpdate())
		{
			if (MessageDialog.showYesNoDialog(
				this
				, MessageUtil.getMessage(12000, "棚卸")
				, this.getTitle()
				, JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION)
			{
				return;
			}
			//登録
			this.regist(true);
		}
		
		//出力処理
		generateInventory(PrintInventoryLogic.EXPORT_FILE_XLS);
	}//GEN-LAST:event_btnOutputExcelActionPerformed
	
	/**
	 * PDF出力ボタン
	 */
	private void btnOutputPdfActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutputPdfActionPerformed
	{//GEN-HEADEREND:event_btnOutputPdfActionPerformed
		//仕入先入力チェック
		MstSupplier supplier = (MstSupplier)this.suppliers.getSelectedItem();
		if (supplier == null || supplier.getSupplierID() == null)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "仕入先"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			suppliers.requestFocusInWindow();
			return;
		}

		//データの更新チェック
		if (ir.getCurrentInventry() == null || si.isUpdate())
		{
			if (MessageDialog.showYesNoDialog(
				this
				, MessageUtil.getMessage(12000, "棚卸")
				, this.getTitle()
				, JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION)
			{
				return;
			}
			//登録
			this.regist(true);
		}
		
		//出力処理
		generateInventory(PrintInventoryLogic.EXPORT_FILE_PDF);
	}//GEN-LAST:event_btnOutputPdfActionPerformed
	
	/**
	 * 一時保存ボタン
	 */
    private void btnTempRegistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTempRegistActionPerformed
		if (!checkInput())
		{
			return;
		}
		
		//登録処理（確定しない）
		if (this.regist(false) > 0)
		{
			//登録しました
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(201, ""),
				this.getTitle(),
				JOptionPane.INFORMATION_MESSAGE);
			
			if (ir.getCurrentInventry() == null)
			{
				//棚卸データ（ヘッダ）を読み込む
				loadInventoryHead();
				
				//棚卸期間の初期表示を行う
				setInventrySpan();
				
			}
			else
			{
				//現在選択されている棚卸データを維持
				Integer id = ir.getCurrentInventry().getInventoryId();
				
				//棚卸データ（ヘッダ）を読み込む
				loadInventoryHead();
				
				ir.setCurrentInventry(id);
				
			}
			//データの再表示
			this.searchInventry();
                        this.showStatus();
			this.showInventry();
			this.showSummary();
			// 更新フラグを強制的に落とす
			si.setUpdate(false);
		}
		else
		{
			//登録失敗
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "棚卸"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			
		}
		
    }//GEN-LAST:event_btnTempRegistActionPerformed
	
	/**
	 * 実在庫数の入力更新
	 */
    private void inventryTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_inventryTablePropertyChange
		this.changeInventry();
    }//GEN-LAST:event_inventryTablePropertyChange
	
	/**
	 * 表示ボタンクリック
	 */
    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
		int year = ((ComboBoxItem<Integer>) inventoryPeriodYear.getSelectedItem()).getValue();
		int month = ((ComboBoxItem<Integer>) inventoryPeriodMonth.getSelectedItem()).getValue();
		DateRange dr = new DateRange();
		dr.setMonth(year, month);

		Calendar fromCal = Calendar.getInstance();
		Calendar toCal = Calendar.getInstance();
		if (ir.getExistedSpan(dr.getTo(), fromCal, toCal))
		{
			inventoryPeriodYear.setSelectedItem(new ComboBoxItem<Integer>("", toCal.get(Calendar.YEAR)));
			inventoryPeriodMonth.setSelectedItem(new ComboBoxItem<Integer>("", toCal.get(Calendar.MONTH)));
		}

		this.searchInventry();
                this.showStatus();
		this.showInventry();
		this.showSummary();

		DataInventory d = ir.getDataInventory(dr.getTo());
		if (d != null)
		{
			ir.setCurrentInventry(d.getInventoryId());
			Integer id = ir.getCurrentInventry().getInventoryId();
			//選択した棚卸は編集可能か
			boolean b = ir.isEditable(id, -1);
			btnTempRegist.setEnabled(b);
			btnRegist.setEnabled(b);
			if (d.getFixed() != null && d.getFixed() == 1)
			{
				btnTempRegist.setEnabled(false);
			}
		}
		else
		{
			ir.setCurrentInventry(null);
			btnRegist.setEnabled(true);
			btnTempRegist.setEnabled(true);
		}
                
		// 仕入先が選択されている場合は登録ボタンを非活性にする
		if (UIUtil.getSupplierID(suppliers) != null) {
		    this.btnRegist.setEnabled(false);
		}
                
    }//GEN-LAST:event_btnShowActionPerformed
	
	/**
	 * 棚卸期間(TO)のフォーカス取得時
	 */
	/**
	 * 棚卸期間(TO)のフォーカス喪失時
	 */
	/**
	 * 店舗選択の変更時
	 */
    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
		reload(true);
    }//GEN-LAST:event_shopActionPerformed
	
	/**
	 * 登録ボタン
	 */
    private void btnRegistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistActionPerformed
		if (!checkInput())
		{
			return;
		}

		// 実在庫数入力チェック
		for (InventryData id : si) {

		    if (id.getJitsuZaiko() == null) {
			String msg = "商品の実在庫数が未入力のものがあります。\n" +
			             "実在庫数が0個の場合は、「0」を入力してください。";
			
			MessageDialog.showMessageDialog(this,
				msg,
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			inventryTable.requestFocusInWindow();
			return;
		    }
		}
                
		//現在の棚卸はパスワードが必要か
		if (ir.getCurrentInventry() != null)
		{
                    Integer id = ir.getCurrentInventry().getInventoryId();
                    if (ir.isPasswordRequired(id, -1))
                    {
                        //パスワード確認
                        WorkTimePasswordDialog wpw = new WorkTimePasswordDialog(parentFrame, true);
                        wpw.setVisible(true);
                        if (!wpw.isAuth()) {
                            //パスワードNG
                            return;
                        }
                    }
		}
		
		//登録処理（確定する）
		int result = this.regist(true);
		if (result > 0)
		{
			//登録しました
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(201, ""),
				this.getTitle(),
				JOptionPane.INFORMATION_MESSAGE);
			
			if (ir.getCurrentInventry() == null)
			{
				//棚卸データ（ヘッダ）を読み込む
				loadInventoryHead();
				
				//棚卸期間の初期表示を行う
				ir.setCurrentInventry(result);
				
			}
			else
			{
				//現在選択されている棚卸データを維持
				Integer id = ir.getCurrentInventry().getInventoryId();
				
				//棚卸データ（ヘッダ）を読み込む
				loadInventoryHead();
				
				ir.setCurrentInventry(id);
				
			}
			//データの再表示
			this.searchInventry();
                        this.showStatus();
			this.showInventry();
			this.showSummary();
			// 更新フラグを強制的に落とす
			si.setUpdate(false);
		}
		else
		{
			//登録失敗
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "棚卸"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			
		}
		
		
    }//GEN-LAST:event_btnRegistActionPerformed
	
	/**
	 * 仕入先コンボ変更
	 */
    private void suppliersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppliersActionPerformed
		UIUtil.outputSupplier(suppliers, suppliersNo);
    }//GEN-LAST:event_suppliersActionPerformed
	
	/**
	 * 仕入先NO入力
	 */
    private void suppliersNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_suppliersNoFocusLost
		UIUtil.selectSupplier(suppliersNo, suppliers);
    }//GEN-LAST:event_suppliersNoFocusLost
	
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JButton btnOutputPdf;
    private javax.swing.JButton btnRegist;
    private javax.swing.JButton btnShow;
    private javax.swing.JButton btnTempRegist;
    private javax.swing.ButtonGroup conditionUnit;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dispLabel;
    private javax.swing.JComboBox inventoryPeriodMonth;
    private javax.swing.JComboBox inventoryPeriodYear;
    private javax.swing.JScrollPane inventryScrollPane;
    private com.geobeck.swing.JTableEx inventryTable;
    private javax.swing.ButtonGroup inventryUnit;
    private javax.swing.ButtonGroup itemUnit;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblInventry;
    private javax.swing.JLabel lblTax;
    private javax.swing.JRadioButton rdoClass;
    private javax.swing.JRadioButton rdoConditionAll;
    private javax.swing.JRadioButton rdoConditionDiff;
    private javax.swing.JRadioButton rdoConditionNoDiff;
    private javax.swing.JRadioButton rdoInventrySale;
    private javax.swing.JRadioButton rdoInventryWork;
    private javax.swing.JRadioButton rdoPlace;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JLabel status;
    private javax.swing.JScrollPane summaryScrollPane;
    private com.geobeck.swing.JTableEx summaryTable;
    private javax.swing.JComboBox suppliers;
    private javax.swing.JTextField suppliersNo;
    private javax.swing.ButtonGroup taxUnit;
    // End of variables declaration//GEN-END:variables
	
	
	/**
	 * 列の表示位置を設定するTableCellRenderer
	 */
	private class TableCellAlignRenderer extends DefaultTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}
		
		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTable table,
			Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
				isSelected, hasFocus, row, column);
			
			switch(column)
			{
				case 2:
				case 5:
				case 7:
				case 11:
				case 12:
					super.setHorizontalAlignment(SwingConstants.RIGHT);
					break;
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}
			
			return this;
		}
	}
	
	/**
	 * 列の表示位置を設定するTableCellRenderer
	 */
	private class SumTableCellAlignRenderer extends DefaultTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public SumTableCellAlignRenderer()
		{
			super();
		}
		
		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTable table,
			Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
				isSelected, hasFocus, row, column);
			//全部右寄せ
			super.setHorizontalAlignment(SwingConstants.RIGHT);
			
			return this;
		}
	}
	
	/**
	 * 列の幅を設定する。
	 */
	private void initTableColumnWidth()
	{
		inventryTable.getColumnModel().getColumn(0).setPreferredWidth(70);
		inventryTable.getColumnModel().getColumn(1).setPreferredWidth(85);
		inventryTable.getColumnModel().getColumn(2).setPreferredWidth(60);
		inventryTable.getColumnModel().getColumn(3).setPreferredWidth(50);
		inventryTable.getColumnModel().getColumn(4).setPreferredWidth(50);
		inventryTable.getColumnModel().getColumn(5).setPreferredWidth(60);
		inventryTable.getColumnModel().getColumn(6).setPreferredWidth(50);
		inventryTable.getColumnModel().getColumn(7).setPreferredWidth(60);
		inventryTable.getColumnModel().getColumn(8).setPreferredWidth(60);
		inventryTable.getColumnModel().getColumn(9).setPreferredWidth(60);
		inventryTable.getColumnModel().getColumn(10).setPreferredWidth(60);
		inventryTable.getColumnModel().getColumn(11).setPreferredWidth(60);
		inventryTable.getColumnModel().getColumn(12).setPreferredWidth(70);
	}
	
	/**
	 * 列の幅を設定する。
	 */
	private void initSummaryTableColumnWidth()
	{
		summaryTable.getColumnModel().getColumn(0).setPreferredWidth(50);
		summaryTable.getColumnModel().getColumn(1).setPreferredWidth(50);
		summaryTable.getColumnModel().getColumn(2).setPreferredWidth(60);
		summaryTable.getColumnModel().getColumn(3).setPreferredWidth(50);
		summaryTable.getColumnModel().getColumn(4).setPreferredWidth(60);
		summaryTable.getColumnModel().getColumn(5).setPreferredWidth(60);
		summaryTable.getColumnModel().getColumn(6).setPreferredWidth(60);
		summaryTable.getColumnModel().getColumn(7).setPreferredWidth(60);
		summaryTable.getColumnModel().getColumn(8).setPreferredWidth(60);
		summaryTable.getColumnModel().getColumn(9).setPreferredWidth(70);
	}
	
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(btnTempRegist);
		SystemInfo.addMouseCursorChange(btnRegist);
		SystemInfo.addMouseCursorChange(btnOutputPdf);
		SystemInfo.addMouseCursorChange(btnOutputExcel);
		SystemInfo.addMouseCursorChange(btnShow);
	}
	
	/**
	 * 項目移動キーの設定
	 */
	private void setKeyListener()
	{
		shop.addKeyListener(SystemInfo.getMoveNextField());
		suppliersNo.addKeyListener(SystemInfo.getMoveNextField());
		suppliersNo.addFocusListener(SystemInfo.getSelectText());
		suppliers.addKeyListener(SystemInfo.getMoveNextField());
		rdoInventrySale.addKeyListener(SystemInfo.getMoveNextField());
		rdoInventryWork.addKeyListener(SystemInfo.getMoveNextField());
//        inventryFrom.addKeyListener(SystemInfo.getMoveNextField());
//        inventryTo.addKeyListener(SystemInfo.getMoveNextField());
		inventoryPeriodYear.addKeyListener(SystemInfo.getMoveNextField());
		inventoryPeriodMonth.addKeyListener(SystemInfo.getMoveNextField());
		rdoClass.addKeyListener(SystemInfo.getMoveNextField());
		rdoPlace.addKeyListener(SystemInfo.getMoveNextField());
		rdoConditionAll.addKeyListener(SystemInfo.getMoveNextField());
		rdoConditionDiff.addKeyListener(SystemInfo.getMoveNextField());
		rdoConditionNoDiff.addKeyListener(SystemInfo.getMoveNextField());
		rdoTaxUnit.addKeyListener(SystemInfo.getMoveNextField());
		rdoTaxBlank.addKeyListener(SystemInfo.getMoveNextField());
		
	}
	
	/**
	 * 仕入先を初期化する。
	 */
	protected void initSupplier()
	{
		suppliers.removeAllItems();
		
		MstSuppliers supplierList = new MstSuppliers();
		try
		{
			supplierList.load(SystemInfo.getConnection(), true);
			for(MstSupplier ms : supplierList)
			{
				suppliers.addItem(ms);
			}
		
			suppliers.setSelectedIndex(0);
		}
		catch (RuntimeException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			throw e;
		}
		catch (Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * 棚卸のヘッダ情報を読み込む
	 */
	private void loadInventoryHead()
	{
		loadInventoryHead(SystemInfo.getConnection());
	}

	/**
	 * 棚卸のヘッダ情報を読み込む
	 */
	private void loadInventoryHead(ConnectionWrapper con)
	{
		ir.setShop((MstShop)shop.getSelectedItem());
		
		try
		{
			ir.load(con);
		}
		catch (RuntimeException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			throw e;
		}
		catch (Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 * 棚卸期間の表示（最新）
	 */
	public void setInventrySpan()
	{
		inventoryPeriodYear.removeAllItems();
		initYearCombobox(inventoryPeriodYear);
		
		Calendar fromCal = Calendar.getInstance();
		Calendar toCal = Calendar.getInstance();
		
		Calendar cal = Calendar.getInstance();
		DataInventory[] invArray = ir.getInventorys();
		if (invArray.length > 0)
		{
			Date maxDate = invArray[0].getInventoryDate();
			cal.setTime(maxDate);
		}
		
		inventoryPeriodYear.setSelectedItem(new ComboBoxItem<Integer>("", cal.get(Calendar.YEAR)));
		inventoryPeriodMonth.setSelectedItem(new ComboBoxItem<Integer>("", cal.get(Calendar.MONTH)));
	}

	public void reload(boolean resetInventorySpan)
	{
		//既存の棚卸データ（ヘッダ）を読み込む
		ir.setShop((MstShop)shop.getSelectedItem());
		if (rdoInventrySale.isSelected())
		{
			ir.setInventoryDivision(1);
		}
		else if (rdoInventryWork.isSelected())
		{
			ir.setInventoryDivision(2);
		}

		try
		{
			ir.load(SystemInfo.getConnection());
			//棚卸期間を再設定する
			if (resetInventorySpan)
			{
				setInventrySpan();
			}
		}
		catch (RuntimeException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			throw e;
		}
		catch (Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}
        
	/**
	 * 棚卸保存状態を表示する。
	 */
	private void showStatus()
	{
		try
		{
		    StringBuilder sql = new StringBuilder(1000);
		    sql.append(" select");
		    sql.append("     fixed");
		    sql.append(" from");
		    sql.append("     data_inventory");
		    sql.append(" where");
		    sql.append("         delete_date is null");
		    sql.append("     and shop_id = " + SQLUtil.convertForSQL(si.getShop().getShopID()));
		    sql.append("     and inventory_division = " + SQLUtil.convertForSQL(si.getUseDivision()));
		    sql.append("     and inventory_date = " + SQLUtil.convertForSQLDateOnly(si.getToDate()));

		    ConnectionWrapper con = SystemInfo.getConnection();
		    ResultSetWrapper rs = con.executeQuery(sql.toString());

		    status.setText("【未登録】");
		    
		    while (rs.next()) {
			if (rs.getInt("fixed") == 0) {
			    status.setText("【一時保存】");
			} else {
			    status.setText("【登録済】");
			}
		    }
		    rs.close();
		    
		} catch (Exception e) {
		}
	}

	/**
	 * 棚卸商品の検索を行う。
	 */
	public void searchInventry()
	{
		//表示条件の設定
		this.setSearchCondition();
		
		if (!si.isConditionChange())
		{
			//DB抽出条件に変更なし
			return;
		}
		
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			
			si.load(con);
		}
		catch (RuntimeException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			throw (RuntimeException) e;
		}
		catch (Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * 検索条件をセットする。
	 */
	private void setSearchCondition()
	{
		//店舗
		si.setShop((MstShop)shop.getSelectedItem());
		//仕入先
		si.setSupplierID(UIUtil.getSupplierID(suppliers));
		//棚卸区分
		if (rdoInventrySale.isSelected())
		{
			si.setUseDivision(1);
		}
		else if (rdoInventryWork.isSelected())
		{
			si.setUseDivision(2);
		}
		//棚卸期間
		DateRange dateRange = new DateRange();
		dateRange.setMonth(((ComboBoxItem<Integer>)inventoryPeriodYear.getSelectedItem()).getValue(), ((ComboBoxItem<Integer>)inventoryPeriodMonth.getSelectedItem()).getValue());
		si.setFromDate(dateRange.getFrom());
		si.setToDate(dateRange.getTo());
		
		//棚卸ID
		if (ir.getCurrentInventry() != null)
		{
			si.setInventoryID(ir.getCurrentInventry().getInventoryId());
		}
		else
		{
			si.setInventoryID(null);
		}
	}
	
	/**
	 * 棚卸検索結果を表示する。
	 */
	public void showInventry()
	{
		SwingUtil.clearTable(inventryTable);

		if (si.isEmpty())
		{
			//データなし
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1112, ""),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return;
		}

		//分類／置場でソート
		if (rdoClass.isSelected())
		{
			si.sortByClass();
		}
		if (rdoPlace.isSelected())
		{
			si.sortByPlace();
		}

		DefaultTableModel	model	=	(DefaultTableModel)inventryTable.getModel();

		for(InventryData id : si)
		{
			boolean display = true;
			Integer kisyu = id.getKisyuNum();
			Integer nyuko = id.getNyukoNum();
			Integer attach = id.getNyukoAttachNum();
			Integer syuko = id.getSyukoNum();
			Integer tyoboZaiko = kisyu + nyuko + attach - syuko;
			Integer jitsuZaiko = id.getJitsuZaiko();
			Integer kahusoku = (jitsuZaiko == null ? -tyoboZaiko : jitsuZaiko - tyoboZaiko);

			//過不足ありを表示
			if (rdoConditionDiff.isSelected())
			{
				if (kahusoku != null && kahusoku == 0)
				{
					//表示しない
					display = false;
				}
				if (id.isJitsuZaikoNull())
				{
					//実在庫が未入力なら必ず表示
					display = true;
				}
			}

			//過不足なしを表示
			if (rdoConditionNoDiff.isSelected())
			{
				if (kahusoku != null && kahusoku != 0)
				{
					//表示しない
					display = false;
				}
			}

			//仕入価格
			Long costPrice = 0l;
			if (rdoTaxUnit.isSelected())
			{
				//税込額
				costPrice = id.getCostPriceTaxIn();
			}
			if (rdoTaxBlank.isSelected())
			{
				//税抜額
				costPrice = id.getCostPriceTaxEx();
			}

			if (display)
			{
				
				ArrayList<Object>	rowData	=	new ArrayList<Object>();
				
				//分類／置場
				if (rdoClass.isSelected())
				{
					rowData.add(id.getItemClassName());
				}
				if (rdoPlace.isSelected())
				{
					rowData.add(id.getPlaceName());
				}
				//商品名
				MstItem item = new MstItem();
				item.setItemID(id.getItemID());
				item.setItemName(id.getItemName());
				rowData.add(item);
				//仕入価格
				rowData.add(costPrice);
				//期首
				rowData.add(kisyu);
				//入庫数
				rowData.add(nyuko + attach);
				//入庫金額
				rowData.add(nyuko * costPrice);
				//出庫数
				rowData.add(syuko);
				//出庫金額
				rowData.add(syuko * costPrice);
				//帳簿在庫
				rowData.add(tyoboZaiko);
				//実在庫数
				rowData.add(jitsuZaiko);
				//過不足数
				rowData.add(kahusoku);
				//在庫金額
				if (id.isJitsuZaikoNull())
				{
					rowData.add(null);
				}
				else
				{
					rowData.add(jitsuZaiko * costPrice);
				}
				//過不足金額
				if (kahusoku == null)
				{
					rowData.add(null);
				}
				else
				{
					rowData.add(kahusoku * costPrice);
				}
				
				model.addRow(rowData.toArray());
			}
		}

		//選択された棚卸が確定済みの場合は一時保存を無効とする
		this.btnTempRegist.setEnabled(true);
		if (ir.getCurrentInventry() != null)
		{
			if (ir.getCurrentInventry().getFixed() == 1)
			{
				this.btnTempRegist.setEnabled(false);
			}
		}
	}
	
	/**
	 * 棚卸合計を表示する。
	 */
	public void showSummary()
	{
		SwingUtil.clearTable(summaryTable);
		
		DefaultTableModel	model	=	(DefaultTableModel)summaryTable.getModel();
		
		Integer kisyuSum = 0;
		Integer nyukoSum = 0;
		Integer attachSum = 0;
		Integer syukoSum = 0;
		Integer tyoboZaikoSum = 0;
		Integer jitsuZaikoSum = 0;
		Integer kahusokuSum = 0;
		
		Long nyukoKinSum = 0l;
		Long syukoKinSum = 0l;
		Long zaikoKinSum = 0l;
		Long kahusokuKinSum = 0l;
		
		for(InventryData id : si)
		{
			Integer kisyu = id.getKisyuNum();
			Integer nyuko = id.getNyukoNum();
			Integer attach = id.getNyukoAttachNum();
			Integer syuko = id.getSyukoNum();
			Integer tyoboZaiko = kisyu + nyuko + attach - syuko;
			Integer jitsuZaiko = id.getJitsuZaiko();
			Integer kahusoku = (jitsuZaiko == null ? -tyoboZaiko : jitsuZaiko - tyoboZaiko);
			
			//仕入価格
			Long costPrice = 0l;
			if (rdoTaxUnit.isSelected())
			{
				//税込額
				costPrice = id.getCostPriceTaxIn();
			}
			if (rdoTaxBlank.isSelected())
			{
				//税抜額
				costPrice = id.getCostPriceTaxEx();
			}

			kisyuSum += kisyu;
			nyukoSum += nyuko;
			attachSum += attach;
			syukoSum += syuko;
			tyoboZaikoSum += tyoboZaiko;
			jitsuZaikoSum += (jitsuZaiko == null ? 0 : jitsuZaiko);
			kahusokuSum += kahusoku;
			
			nyukoKinSum += (nyuko * costPrice);
			syukoKinSum += (syuko * costPrice);
			zaikoKinSum += ((jitsuZaiko == null ? 0 : jitsuZaiko) * costPrice);
			kahusokuKinSum += (kahusoku * costPrice);
		}
		
		ArrayList<Object>	rowData	=	new ArrayList<Object>();
		
		//期首
		rowData.add(kisyuSum);
		//入庫数
		rowData.add(nyukoSum + attachSum);
		//入庫金額
		rowData.add(nyukoKinSum);
		//出庫数
		rowData.add(syukoSum);
		//出庫金額
		rowData.add(syukoKinSum);
		//帳簿在庫
		rowData.add(tyoboZaikoSum);
		//実在庫数
		rowData.add(jitsuZaikoSum);
		//過不足数
		rowData.add(kahusokuSum);
		//在庫金額
		rowData.add(zaikoKinSum);
		//過不足金額
		rowData.add(kahusokuKinSum);
		
		model.addRow(rowData.toArray());
	}
	
	/**
	 * 実在庫数変更時に呼ばれる
	 */
	private void changeInventry()
	{
		int	row		=	inventryTable.getEditingRow();
		int	col		=	inventryTable.getEditingColumn();
		
		if(row < 0 || col < 0)	return;
		
		Integer jitsuZaiko = (Integer) inventryTable.getValueAt(row, col);
		MstItem item = (MstItem) inventryTable.getValueAt(row, 1);
		
		int listIndex = si.indexOfItem(item.getItemID());
		
		InventryData id = si.get(listIndex);
		
		//実在庫数を反映
		id.setJitsuZaiko(jitsuZaiko);
		
		//過不足数を変更
		Integer kisyu = id.getKisyuNum();
		Integer nyuko = id.getNyukoNum();
		Integer attach = id.getNyukoAttachNum();
		Integer syuko = id.getSyukoNum();
		Integer tyoboZaiko = kisyu + nyuko + attach - syuko;
		Integer kahusoku = jitsuZaiko - tyoboZaiko;
		
		inventryTable.setValueAt(kahusoku, row, 10);
		
		//仕入単価を求める
		Long costPrice = 0l;
		if (rdoTaxUnit.isSelected())
		{
			//税込額
			costPrice = id.getCostPriceTaxIn();
		}
		if (rdoTaxBlank.isSelected())
		{
			//税抜額
			costPrice = id.getCostPriceTaxEx();
		}
		
		//在庫金額を変更
		inventryTable.setValueAt(costPrice * jitsuZaiko, row, 11);
		//過不足金額を変更
		inventryTable.setValueAt(costPrice * kahusoku, row, 12);
		
		//合計欄の更新
		showSummary();
	}
	
	private boolean checkInput()
	{
//		// 棚卸期間のチェック
//		if (inventryTo.getDate() == null)
//		{
//			MessageDialog.showMessageDialog(this,
//					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "棚卸期間"),
//					this.getTitle(),
//					JOptionPane.ERROR_MESSAGE);
//			inventryTo.requestFocusInWindow();
//			return false;
//		}
//
//		// 棚卸日数のチェック
//		if ((DateRange.diffDays(inventryFrom.getDate(), inventryTo.getDate()) + 1) >= 32)
//		{
//			MessageDialog.showMessageDialog(this,
//					MessageUtil.getMessage(12002),
//					this.getTitle(),
//					JOptionPane.ERROR_MESSAGE);
//			inventryTo.requestFocusInWindow();
//			return false;
//		}
		
		return true;
	}
	
	/**
	 * 登録処理を行う。
	 * @return true - 成功、false - 失敗
	 */
	public int regist(boolean fixed)
	{
		int			result	= -1;
		boolean     ret;
		Integer      fixedValue = null;
		
		try
		{
			if (si.isEmpty())
			{
				return -1;
			}
			
			if (fixed)
			{
				fixedValue = 1;
			}
			else
			{
				fixedValue = 0;
			}
			
			ConnectionWrapper	con	=	SystemInfo.getConnection();
			//トランザクション開始
			con.begin();
			
			try
			{
				DataInventory di = null;
				if (ir.getCurrentInventry() != null)
				{
					di = ir.getCurrentInventry();
					//棚卸終了日
					di.setInventoryDate(si.getToDate());
				}
				else
				{
					//新規作成
					di = new DataInventory();

					di.setShopId(si.getShop().getShopID());
					//棚卸終了日
					di.setInventoryDate(si.getToDate());

					//棚卸IDの採番
					di.setNewInventoryID(con);

					if (rdoInventrySale.isSelected())
					{
						di.setInventoryDivision(1);
					}
					else if (rdoInventryWork.isSelected())
					{
						di.setInventoryDivision(2);
					}
				}

				//確定フラグをセット
				di.setFixed(fixedValue);
				
				result = di.getInventoryId();
				//棚卸データの登録
				if (di.isExists(con))
				{
					ret = di.update(con);
				}
				else
				{
					ret = di.insert(con);
				}
				
				if (ret)
				{
					// 棚卸詳細データ全件削除（登録ボタン押下時のみ）
                                        // 一時保存の場合は仕入先で絞り込まれている可能性があるため全件削除しない
                                        if (fixed) {
                                            DataInventoryDetail.physicalDelete(con, di.getInventoryId(), si.getUseDivision());
                                        }
                                        
					//棚卸詳細データの登録
					for (InventryData id : si)
					{
						DataInventoryDetail dd = new DataInventoryDetail();
						
						dd.setInventoryID(di.getInventoryId());
						dd.setItemID(id.getItemID());
						dd.setInventoryDivision(si.getUseDivision());
						dd.setInitialStock(id.getKisyuNum());
						dd.setRealStock(id.getJitsuZaiko());
						dd.setCostPrice(id.getCostPriceTaxIn());

                                                if (fixed) {
                                                    ret = dd.insert(con);
                                                } else {
                                                    if (dd.isExists(con)) {
                                                        ret = dd.update(con);
                                                    } else {
                                                        ret = dd.insert(con);
                                                    }
                                                }
                                                
						if (!ret) {
                                                    result = -1;
                                                    break;
						}
						
						// 適正在庫更新
						con.executeUpdate(this.getProperStockUpdateSQL(id.getItemID()));
					}
					
				}
				else
				{
					result = -1;
				}
			}
			catch(Exception e)
			{
				SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
				con.rollback();
				result = -1;

				throw e;
			}
			
			if (result > 0)
			{
				con.commit();
			}
			else
			{
				con.rollback();
			}
		}
		catch (RuntimeException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			throw e;
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}

		return	result;
	}

	/**
	 * 適正在庫数を更新するＳＱＬ文を取得する。
	 * @return 適正在庫数を更新するＳＱＬ文
	 */
	private String getProperStockUpdateSQL(Integer itemID)
	{
		StringBuilder sql = new StringBuilder(1000);
		sql.append(" update mst_use_product");
		sql.append(" set");
		
		if(si.getUseDivision() == 1){
			// 店販適正在庫数
			sql.append("     sell_proper_stock = (" + getProperStockSelectSQL(itemID) + ")");
		}else{
			// 業務適正在庫数
			sql.append("     use_proper_stock = (" + getProperStockSelectSQL(itemID) + ")");
		}

		sql.append(" where");
		sql.append("         shop_id = " + SQLUtil.convertForSQL(si.getShop().getShopID()));
		sql.append("     and product_division = 2");
		sql.append("     and product_id = " + itemID);
		
		return	sql.toString();
	}

	/**
	 * 適正在庫数を取得するＳＱＬ文を取得する。
	 * @return 適正在庫数を取得するＳＱＬ文
	 */
	private String getProperStockSelectSQL(Integer itemID)
	{
		// 2ヶ月前の開始日を取得する
		Calendar c = Calendar.getInstance();
		c.setTime(si.getFromDate());
		c.add(Calendar.MONTH, -2);
		java.util.Date fromDate2 = c.getTime();
		
		StringBuilder sql = new StringBuilder(1000);
		sql.append(" select");
		sql.append("     ceil(sum(out_num) / 6 * 1.2) as out_num");
		sql.append(" from");
		sql.append(" (");
		sql.append("     SELECT");
		sql.append("         coalesce(SUM(ship_detail.out_num), 0) AS out_num");
		sql.append("     FROM");
		sql.append("         data_slip_ship_detail ship_detail");
		sql.append("             INNER JOIN data_slip_ship ship");
		sql.append("                     ON ship_detail.shop_id = ship.shop_id");
		sql.append("                    AND ship_detail.slip_no = ship.slip_no");
		sql.append("     WHERE");
		sql.append("             ship.shop_id = " + SQLUtil.convertForSQL(si.getShop().getShopID()));
		sql.append("         AND ship.ship_date BETWEEN "+ SQLUtil.convertForSQLDateOnly(fromDate2) + " AND " + SQLUtil.convertForSQLDateOnly(si.getToDate()));
		sql.append("         AND ship_detail.item_use_division = " + SQLUtil.convertForSQL(si.getUseDivision()));
		sql.append("         AND ship_detail.item_id = " + itemID);
		sql.append("         AND ship.delete_date is null");
		sql.append("         AND ship_detail.delete_date is null");

		sql.append("     union all");

		sql.append("     SELECT");
		sql.append("         coalesce(SUM(sales_detail.item_num), 0) AS out_num");
		sql.append("     FROM");
		sql.append("         data_staff_sales_detail sales_detail");
		sql.append("             INNER JOIN data_staff_sales sales");
		sql.append("                     ON sales_detail.shop_id = sales.shop_id");
		sql.append("                    AND sales_detail.slip_no = sales.slip_no");
		sql.append("     WHERE");
		sql.append("             sales.shop_id = " + SQLUtil.convertForSQL(si.getShop().getShopID()));
		sql.append("         AND sales.sales_date BETWEEN "+ SQLUtil.convertForSQLDateOnly(fromDate2) + " AND " + SQLUtil.convertForSQLDateOnly(si.getToDate()));
		sql.append("         AND item_use_division = " + SQLUtil.convertForSQL(si.getUseDivision()));
		sql.append("         AND sales_detail.item_id = " + itemID);
		sql.append("         AND sales.delete_date is null");
		sql.append("         AND sales_detail.delete_date is null");


		// 店販用の場合のみ
		if(si.getUseDivision() == 1){
			
			sql.append("     union all");
			
			sql.append("     SELECT");
			sql.append("         coalesce(SUM(sales_detail.product_num), 0) AS out_num");
			sql.append("     FROM");
			sql.append("         data_sales_detail sales_detail");
			sql.append("             INNER JOIN data_sales sales");
			sql.append("                     ON sales_detail.shop_id = sales.shop_id");
			sql.append("                    AND sales_detail.slip_no = sales.slip_no");
			sql.append("     WHERE");
			sql.append("             sales.shop_id = " + SQLUtil.convertForSQL(si.getShop().getShopID()));
			sql.append("         AND sales.sales_date BETWEEN "+ SQLUtil.convertForSQLDateOnly(fromDate2) + " AND " + SQLUtil.convertForSQLDateOnly(si.getToDate()));
			sql.append("         AND sales_detail.product_division = 2");
			sql.append("         AND sales_detail.product_id = " + itemID);
			sql.append("         AND sales.delete_date is null");
			sql.append("         AND sales_detail.delete_date is null");

		}
		
		sql.append(" ) t");

		return	sql.toString();
	}
	
	private void generateInventory(int fileType)
	{
		MstShop shop = (MstShop)this.shop.getSelectedItem();
		MstSupplier supplier = (MstSupplier)this.suppliers.getSelectedItem();

		int year = ((ComboBoxItem<Integer>) inventoryPeriodYear.getSelectedItem()).getValue();
		int month = ((ComboBoxItem<Integer>) inventoryPeriodMonth.getSelectedItem()).getValue();
		
		DateRange range = new DateRange();
		range.setMonth(year, month);

		PrintInventoryLogic logic = new PrintInventoryLogic(shop, supplier);
		logic.setDateRange(range.getTo(), range.getFrom());
		
		if( rdoInventrySale.isSelected() )
		{
			logic.setInventory(PrintInventoryLogic.INVENTORY_FOR_SELL);
		}
		else
		{
			logic.setInventory(PrintInventoryLogic.INVENTORY_FOR_OPERATION);
		}
		if( rdoTaxUnit.isSelected() )
		{
			logic.setTaxCondition(PrintInventoryLogic.INVENTORY_WITH_TAX);
		}
		else
		{
			logic.setTaxCondition(PrintInventoryLogic.INVENTORY_WITHOU_TAX);
		}
		
		int result = logic.viewInventoryReport();
		
		if(result == logic.RESULT_SUCCESS )
		{
			// 成功
		}
		else if(result == logic.RESULT_DATA_NOTHNIG )
		{
			// データなし
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(4001),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			
		}
		else if(result == logic.RESULT_ERROR )
		{
			// 予期せぬエラー
			MessageDialog.showMessageDialog( this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE );
		}
	}

	private void initMonthCombobox(JComboBox cmbbox)
	{
		cmbbox.addItem(new ComboBoxItem<Integer>("1月", Calendar.JANUARY));
		cmbbox.addItem(new ComboBoxItem<Integer>("2月", Calendar.FEBRUARY));
		cmbbox.addItem(new ComboBoxItem<Integer>("3月", Calendar.MARCH));
		cmbbox.addItem(new ComboBoxItem<Integer>("4月", Calendar.APRIL));
		cmbbox.addItem(new ComboBoxItem<Integer>("5月", Calendar.MAY));
		cmbbox.addItem(new ComboBoxItem<Integer>("6月", Calendar.JUNE));
		cmbbox.addItem(new ComboBoxItem<Integer>("7月", Calendar.JULY));
		cmbbox.addItem(new ComboBoxItem<Integer>("8月", Calendar.AUGUST));
		cmbbox.addItem(new ComboBoxItem<Integer>("9月", Calendar.SEPTEMBER));
		cmbbox.addItem(new ComboBoxItem<Integer>("10月", Calendar.OCTOBER));
		cmbbox.addItem(new ComboBoxItem<Integer>("11月", Calendar.NOVEMBER));
		cmbbox.addItem(new ComboBoxItem<Integer>("12月", Calendar.DECEMBER));
	}
	
	private void initYearCombobox(JComboBox cmbbox)
	{
		DataInventory[] invArray = ir.getInventorys();
		if (invArray.length > 0)
		{
			Calendar cal = Calendar.getInstance();
			int year = 0;
			for (DataInventory inv : invArray)
			{
				cal.setTime(inv.getInventoryDate());
				if (year != cal.get(Calendar.YEAR))
				{
					year = cal.get(Calendar.YEAR);
					cmbbox.addItem(new ComboBoxItem(year + "年", year));
				}
			}
		}

		Calendar cal = Calendar.getInstance();
		Integer nowyear = new Integer(cal.get(Calendar.YEAR));
		for (int i = 0; i < cmbbox.getItemCount(); i++)
		{
			ComboBoxItem cbi = (ComboBoxItem) cmbbox.getItemAt(i);
			if (nowyear.equals(cbi.getValue()))
			{
				return;
			}
		}

		int year = cal.get(Calendar.YEAR);
		cmbbox.addItem(new ComboBoxItem(year + "年", year));
	}
	
	/**
	 *
	 */
	private static class ComboBoxItem<T>
	{
		private String	displayString;
		private T		value;
		
		public ComboBoxItem(String displayString, T value)
		{
			this.displayString = displayString;
			this.value = value;
		}
		
		public T getValue()
		{
			return this.value;
		}
		
		public String toString()
		{
			return this.displayString;
		}
		
		public boolean equals(Object o)
		{
			if (!(o instanceof ComboBoxItem))
			{
				return false;
			}
			
			ComboBoxItem<T> v = (ComboBoxItem<T>) o;
			
			return getValue().equals(v.getValue());
		}
	}

	private class FocusTraversalPolicyImpl extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(shop))
			{
				return suppliersNo;
			}
			else if (aComponent.equals(suppliersNo))
			{
				return suppliers;
			}
			else if (aComponent.equals(suppliers))
			{
				return rdoInventrySale;
			}
			else if (aComponent.equals(rdoInventrySale))
			{
				return rdoInventryWork;
			}
			else if (aComponent.equals(rdoInventryWork))
			{
				return inventoryPeriodYear;
			}
			else if (aComponent.equals(inventoryPeriodYear))
			{
				return inventoryPeriodMonth;
			}
			else if (aComponent.equals(inventoryPeriodMonth))
			{
				return rdoClass;
			}
			else if (aComponent.equals(rdoClass))
			{
				return rdoPlace;
			}
			else if (aComponent.equals(rdoPlace))
			{
				return rdoConditionAll;
			}
			else if (aComponent.equals(rdoConditionAll))
			{
				return rdoConditionDiff;
			}
			else if (aComponent.equals(rdoConditionDiff))
			{
				return rdoConditionNoDiff;
			}
			else if (aComponent.equals(rdoConditionNoDiff))
			{
				return rdoTaxUnit;
			}
			else if (aComponent.equals(rdoTaxUnit))
			{
				return rdoTaxBlank;
			}
			else if (aComponent.equals(rdoTaxBlank))
			{
				return shop;
			}

			return shop;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(rdoTaxBlank))
			{
				return rdoTaxUnit;
			}
			else if (aComponent.equals(rdoTaxUnit))
			{
				return rdoConditionNoDiff;
			}
			else if (aComponent.equals(rdoConditionNoDiff))
			{
				return rdoConditionDiff;
			}
			else if (aComponent.equals(rdoConditionDiff))
			{
				return rdoConditionAll;
			}
			else if (aComponent.equals(rdoConditionAll))
			{
				return rdoPlace;
			}
			else if (aComponent.equals(rdoPlace))
			{
				return rdoClass;
			}
			else if (aComponent.equals(rdoClass))
			{
				return inventoryPeriodMonth;
			}
			else if (aComponent.equals(inventoryPeriodMonth))
			{
				return inventoryPeriodYear;
			}
			else if (aComponent.equals(inventoryPeriodYear))
			{
				return rdoInventryWork;
			}
			else if (aComponent.equals(rdoInventryWork))
			{
				return rdoInventrySale;
			}
			else if (aComponent.equals(rdoInventrySale))
			{
				return suppliers;
			}
			else if (aComponent.equals(suppliers))
			{
				return suppliersNo;
			}
			else if (aComponent.equals(suppliersNo))
			{
				return shop;
			}
			else if (aComponent.equals(shop))
			{
				return shop;
			}
			
			return shop;
		}
		
		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return shop;
		}
		
		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return rdoTaxBlank;
		}
		
		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return shop;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return shop;
		}
	}
}
