/*
 * RegisterCheckInVoucherPanel.java
 *
 * Created on 2008/09/17, 9:56
 */

package com.geobeck.sosia.pos.hair.product;

import com.geobeck.sosia.pos.basicinfo.WorkTimePasswordDialog;
import com.geobeck.sosia.pos.hair.data.product.DataSlipOrder;
import com.geobeck.sosia.pos.hair.data.product.DataSlipOrderDetail;
import com.geobeck.sosia.pos.hair.data.product.DataSlipStore;
import com.geobeck.sosia.pos.hair.data.product.DataSlipStoreDetail;
import com.geobeck.sosia.pos.hair.data.product.DataSlipStoreDetails;
import com.geobeck.sosia.pos.basicinfo.commodity.EditabeTableCellRenderer;
import com.geobeck.sosia.pos.basicinfo.company.WebcheckSettingPanel;
import com.geobeck.sosia.pos.master.commodity.MstSupplier;
import com.geobeck.sosia.pos.master.commodity.MstSuppliers;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.product.MstItem;
import com.geobeck.sosia.pos.master.product.MstItemClass;
import com.geobeck.sosia.pos.master.product.MstItemClasses;
import com.geobeck.sosia.pos.master.commodity.MstSupplierItems;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.util.TaxUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.CustomFilter;
import com.geobeck.swing.IntegerCellEditor;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import com.geobeck.util.CheckUtil;
import com.ibm.icu.lang.UCharacter;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.text.PlainDocument;


/**
 *
 * @author  ryu
 */
public class RegisterCheckInVoucherPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private enum SearchMode { NONE, SLIP_STORE, SLIP_ORDER };
	
	//手動だけでイベントを実行する
	private int eventFlg = 0;
	//新規フラグ 0:既存/1：新規
	private int newFlag = 1;
	
	private MstItemClasses	classes	=	new MstItemClasses();
	private MstSuppliers	mss		=	new MstSuppliers();
	
	private DataSlipStore	data			=	new DataSlipStore();
	private DataSlipOrder	dataSlipOrder	=	null;
	
	SearchSlipDialog dialog = null;
	
	/**
	 * Creates new form RegisterCheckInVoucherPanel
	 */
	public RegisterCheckInVoucherPanel()
	{
		this.setSize(850, 800);
		this.setPath("商品管理 >> 入庫伝票作成");
		this.setTitle("入庫伝票作成");
		initComponents();
		init();
		clear();
	}
	
	/*
	 *コンボボックスの内容初期化など
	 */
	private void init()
	{
		SystemInfo.initGroupShopComponents(shop, 2);
		initStaff(personInName);
		
		initItemClass();
		
		//add listener to detail info
		SelectionListener listener = new SelectionListener(tblDetailInfo);
		tblDetailInfo.getModel().addTableModelListener(listener);
		
		//編集コラム属性を設置する
		JFormattedTextField ftf = new javax.swing.JFormattedTextField();
		((PlainDocument)ftf.getDocument()).setDocumentFilter(
			new CustomFilter(20, CustomFilter.NUMERIC));
		
		// テーブルのカラムサイズを調整
		initDetailColumn();
		
		// ボタンの上にマウスカーソルが乗った時にカーソルを変更する
		addMouseCursorChange();
		// enterキーで項目を移動する
		setKeyListener();
		
		// 商品分類の先頭項目を選択状態にする
		tblProduct1.setRowSelectionInterval(0, 0);
		tblProduct2.setRowSelectionInterval(0, 0);

		// 列幅の調整
		tblProductDetail1.getColumnModel().getColumn(0).setPreferredWidth(220);
		tblProductDetail2.getColumnModel().getColumn(0).setPreferredWidth(220);
	}
	
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnSearchSlip = new javax.swing.JButton();
        btnRegist = new javax.swing.JButton();
        btnSearchOrder = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        try
        {
            ConnectionWrapper	con	=	SystemInfo.getConnection();

            mss.load(con, false);

            con.close();

            mss.add(0, new MstSupplier());
        }
        catch(SQLException e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        supplierName = new JComboBox(new DefaultComboBoxModel(mss.toArray())
            {
                public void setSelectedItem(Object o)
                {
                    super.setSelectedItem(o);
                }
            });
            jLabel4 = new javax.swing.JLabel();
            checkInDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
            jLabel5 = new javax.swing.JLabel();
            personInName = new javax.swing.JComboBox();
            jPanel4 = new javax.swing.JPanel();
            panelDetail = new javax.swing.JScrollPane();
            tblDetailInfo = new com.geobeck.swing.JTableEx();
            jLabel8 = new javax.swing.JLabel();
            panelTotal = new javax.swing.JScrollPane();
            tblTotalInfo = new javax.swing.JTable();
            jLabel6 = new javax.swing.JLabel();
            jLabel7 = new javax.swing.JLabel();
            voucherNo = new javax.swing.JTextField();
            jTabbedPane1 = new javax.swing.JTabbedPane();
            //IVS_LVTu start add 2015/09/06 New request #42897
            jTabbedPane1.setUI(new CustomTabbedPaneUI());
            //IVS_LVTu end add 2015/09/06 New request #42897
            panelForShopSale = new javax.swing.JPanel();
            jScrollPane2 = new javax.swing.JScrollPane();
            tblProductDetail1 = new javax.swing.JTable();
            jScrollPane7 = new javax.swing.JScrollPane();
            tblProduct1 = new javax.swing.JTable();
            panelForBuiness = new javax.swing.JPanel();
            jScrollPane1 = new javax.swing.JScrollPane();
            tblProductDetail2 = new javax.swing.JTable();
            jScrollPane6 = new javax.swing.JScrollPane();
            tblProduct2 = new javax.swing.JTable();
            jPanel1 = new javax.swing.JPanel();
            shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
            supplierNo = new javax.swing.JFormattedTextField();
            ((PlainDocument)supplierNo.getDocument()).setDocumentFilter(
                new CustomFilter(20, CustomFilter.ALPHAMERIC));
            personInCd = new javax.swing.JFormattedTextField();
            ((PlainDocument)personInCd.getDocument()).setDocumentFilter(
                new CustomFilter(20, CustomFilter.ALPHAMERIC));
            priceDown = new javax.swing.JFormattedTextField();
            ((PlainDocument)priceDown.getDocument()).setDocumentFilter(
                new CustomFilter(9, CustomFilter.NUMERIC));
            butGoodsImport = new javax.swing.JButton();

            setFocusCycleRoot(true);

            jLabel1.setText("店舗");

            jLabel2.setText("伝票NO");

            btnSearchSlip.setIcon(SystemInfo.getImageIcon("/button/search/search_slip_off.jpg")
            );
            btnSearchSlip.setBorderPainted(false);
            btnSearchSlip.setContentAreaFilled(false);
            btnSearchSlip.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_slip_on.jpg")
            );
            btnSearchSlip.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnSearchSlipActionPerformed(evt);
                }
            });

            btnRegist.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg")
            );
            btnRegist.setBorderPainted(false);
            btnRegist.setContentAreaFilled(false);
            btnRegist.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg")
            );
            btnRegist.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnRegistActionPerformed(evt);
                }
            });

            btnSearchOrder.setIcon(SystemInfo.getImageIcon("/button/search/search_order_off.jpg")
            );
            btnSearchOrder.setBorderPainted(false);
            btnSearchOrder.setContentAreaFilled(false);
            btnSearchOrder.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_order_on.jpg"));
            btnSearchOrder.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnSearchOrderActionPerformed(evt);
                }
            });

            btnDelete.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg")
            );
            btnDelete.setBorderPainted(false);
            btnDelete.setContentAreaFilled(false);
            btnDelete.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg")
            );
            btnDelete.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnDeleteActionPerformed(evt);
                }
            });

            btnClear.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg")
            );
            btnClear.setBorderPainted(false);
            btnClear.setContentAreaFilled(false);
            btnClear.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg")
            );
            btnClear.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnClearActionPerformed(evt);
                }
            });

            jLabel3.setText("仕入先");

            supplierName.setMaximumRowCount(15);
            supplierName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            supplierName.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    supplierNameActionPerformed(evt);
                }
            });

            jLabel4.setText("入庫日");

            checkInDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            checkInDate.setDate(new java.util.Date());

            jLabel5.setText("入庫担当者");

            personInName.setMaximumRowCount(15);
            personInName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            personInName.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    personInNameActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
            jPanel4.setLayout(jPanel4Layout);
            jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 341, Short.MAX_VALUE)
            );
            jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 138, Short.MAX_VALUE)
            );

            panelDetail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

            tblDetailInfo.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "区分", "分類", "商品名", "<html>仕入価格<br>&nbsp;&nbsp;(税込)</html>", "<html>仕入価格<br>&nbsp;&nbsp;(税抜)</html>", "発注数", "入庫数", "添付数", "入庫計", "入庫金額", "削除"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Object.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, true, true, false, false, true
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            tblDetailInfo.setSelectionBackground(new java.awt.Color(255, 210, 142));
            tblDetailInfo.setSelectionForeground(new java.awt.Color(0, 0, 0));
            tblDetailInfo.getTableHeader().setReorderingAllowed(false);
            SwingUtil.setJTableHeaderRenderer(tblDetailInfo, SystemInfo.getTableHeaderRenderer());
            tblDetailInfo.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
            SelectTableCellRenderer.setSelectTableCellRenderer(tblDetailInfo);

            TableColumnModel tblDetailInfoModel = tblDetailInfo.getColumnModel();
            tblDetailInfoModel.getColumn(6).setCellEditor(new IntegerCellEditor(new JTextField()));
            tblDetailInfoModel.getColumn(7).setCellEditor(new IntegerCellEditor(new JTextField()));
            tblDetailInfoModel.getColumn(6).setCellRenderer(new EditabeTableCellRenderer(Integer.class, "0"));
            tblDetailInfoModel.getColumn(7).setCellRenderer(new EditabeTableCellRenderer(Integer.class, "0"));
            panelDetail.setViewportView(tblDetailInfo);

            jLabel8.setFont(new java.awt.Font("MS UI Gothic", 0, 24)); // NOI18N

            panelTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            panelTotal.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
            panelTotal.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

            tblTotalInfo.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null}
                },
                new String [] {
                    "入庫数", "添付数", "入庫計", "入庫金額"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Long.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            tblTotalInfo.setColumnSelectionAllowed(true);
            tblTotalInfo.setSelectionBackground(new java.awt.Color(255, 210, 142));
            tblTotalInfo.setSelectionForeground(new java.awt.Color(0, 0, 0));
            tblTotalInfo.getTableHeader().setReorderingAllowed(false);
            SwingUtil.setJTableHeaderRenderer(tblTotalInfo, SystemInfo.getTableHeaderRenderer());
            tblTotalInfo.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
            SelectTableCellRenderer.setSelectTableCellRenderer(tblTotalInfo);
            panelTotal.setViewportView(tblTotalInfo);

            jLabel6.setText("仕入値引き");

            jLabel7.setText("円");

            voucherNo.setEditable(false);
            voucherNo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            voucherNo.setText("　　<新規>");
            voucherNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

            jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

            tblProductDetail1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "商品名", "仕入価格(税込)", "仕入価格(税抜）"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            tblProductDetail1.setSelectionBackground(new java.awt.Color(255, 210, 142));
            tblProductDetail1.setSelectionForeground(new java.awt.Color(0, 0, 0));
            tblProductDetail1.getTableHeader().setReorderingAllowed(false);
            SwingUtil.setJTableHeaderRenderer(tblProductDetail1, SystemInfo.getTableHeaderRenderer());
            tblProductDetail1.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
            SelectTableCellRenderer.setSelectTableCellRenderer(tblProductDetail1);
            tblProductDetail1.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tblProductDetail1MouseClicked(evt);
                }
            });
            jScrollPane2.setViewportView(tblProductDetail1);

            jScrollPane7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

            tblProduct1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "商品分類"
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            tblProduct1.setSelectionBackground(new java.awt.Color(255, 210, 142));
            tblProduct1.setSelectionForeground(new java.awt.Color(0, 0, 0));
            tblProduct1.getTableHeader().setReorderingAllowed(false);
            SwingUtil.setJTableHeaderRenderer(tblProduct1, SystemInfo.getTableHeaderRenderer());
            tblProduct1.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
            SelectTableCellRenderer.setSelectTableCellRenderer(tblProduct1);
            tblProduct1.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    tblProduct1MouseReleased(evt);
                }
            });
            tblProduct1.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    tblProduct1KeyReleased(evt);
                }
            });
            jScrollPane7.setViewportView(tblProduct1);

            javax.swing.GroupLayout panelForShopSaleLayout = new javax.swing.GroupLayout(panelForShopSale);
            panelForShopSale.setLayout(panelForShopSaleLayout);
            panelForShopSaleLayout.setHorizontalGroup(
                panelForShopSaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelForShopSaleLayout.createSequentialGroup()
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE))
            );
            panelForShopSaleLayout.setVerticalGroup(
                panelForShopSaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
            );

            jTabbedPane1.addTab("店販用", panelForShopSale);

            jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

            tblProductDetail2.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "商品名", "仕入価格(税込)", "仕入価格(税抜）"
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            tblProductDetail2.setSelectionBackground(new java.awt.Color(255, 210, 142));
            tblProductDetail2.setSelectionForeground(new java.awt.Color(0, 0, 0));
            tblProductDetail2.getTableHeader().setReorderingAllowed(false);
            SwingUtil.setJTableHeaderRenderer(tblProductDetail2, SystemInfo.getTableHeaderRenderer());
            tblProductDetail2.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
            SelectTableCellRenderer.setSelectTableCellRenderer(tblProductDetail2);
            tblProductDetail2.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tblProductDetail2MouseClicked(evt);
                }
            });
            jScrollPane1.setViewportView(tblProductDetail2);

            jScrollPane6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

            tblProduct2.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "商品分類"
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            tblProduct2.setSelectionBackground(new java.awt.Color(255, 210, 142));
            tblProduct2.setSelectionForeground(new java.awt.Color(0, 0, 0));
            tblProduct2.getTableHeader().setReorderingAllowed(false);
            SwingUtil.setJTableHeaderRenderer(tblProduct2, SystemInfo.getTableHeaderRenderer());
            tblProduct2.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
            SelectTableCellRenderer.setSelectTableCellRenderer(tblProduct2);
            tblProduct2.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    tblProduct2MouseReleased(evt);
                }
            });
            tblProduct2.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    tblProduct2KeyReleased(evt);
                }
            });
            jScrollPane6.setViewportView(tblProduct2);

            javax.swing.GroupLayout panelForBuinessLayout = new javax.swing.GroupLayout(panelForBuiness);
            panelForBuiness.setLayout(panelForBuinessLayout);
            panelForBuinessLayout.setHorizontalGroup(
                panelForBuinessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelForBuinessLayout.createSequentialGroup()
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE))
            );
            panelForBuinessLayout.setVerticalGroup(
                panelForBuinessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
            );

            jTabbedPane1.addTab("業務用", panelForBuiness);

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 809, Short.MAX_VALUE)
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 161, Short.MAX_VALUE)
            );

            shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            shop.setMaximumRowCount(15);
            shop.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    shopActionPerformed(evt);
                }
            });

            supplierNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            supplierNo.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusLost(java.awt.event.FocusEvent evt) {
                    supplierNoFocusLost(evt);
                }
            });

            personInCd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            personInCd.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusLost(java.awt.event.FocusEvent evt) {
                    personInCdFocusLost(evt);
                }
            });

            priceDown.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            priceDown.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            priceDown.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusLost(java.awt.event.FocusEvent evt) {
                    priceDownFocusLost(evt);
                }
            });

            butGoodsImport.setIcon(SystemInfo.getImageIcon("/button/common/goods_inport_off.jpg")
            );
            butGoodsImport.setBorderPainted(false);
            butGoodsImport.setContentAreaFilled(false);
            butGoodsImport.setPressedIcon(SystemInfo.getImageIcon("/button/common/goods_inport_on.jpg")
            );
            butGoodsImport.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    butGoodsImportActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(1263, 1263, 1263)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(2935, 2935, 2935)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(388, 388, 388)
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(panelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(priceDown, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel7))
                                .addComponent(panelDetail, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(29, 29, 29)
                                    .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(voucherNo, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnSearchSlip, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnSearchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(15, 15, 15)
                                    .addComponent(btnRegist, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(16, 16, 16)
                                    .addComponent(supplierNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(supplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(35, 35, 35)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(checkInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(35, 35, 35)
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(personInCd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(personInName, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(676, 676, 676)
                                    .addComponent(butGoodsImport, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addContainerGap(1392, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnSearchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnRegist, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(butGoodsImport, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(voucherNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(btnSearchSlip, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(supplierNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(supplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(personInCd, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(personInName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(checkInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceDown, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(panelDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addComponent(jLabel8)
                            .addGap(388, 388, 388)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(669, 669, 669)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addComponent(panelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(104, Short.MAX_VALUE))
            );

            jTabbedPane1.getAccessibleContext().setAccessibleName("");
        }// </editor-fold>//GEN-END:initComponents

	private void shopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopActionPerformed
	{//GEN-HEADEREND:event_shopActionPerformed
		//商品リストを更新する
		tblProduct1DoClick();
		tblProduct2DoClick();
		SwingUtil.clearTable(tblDetailInfo);
	}//GEN-LAST:event_shopActionPerformed
	
	private void personInNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_personInNameActionPerformed
	{//GEN-HEADEREND:event_personInNameActionPerformed
		UIUtil.outputStaff(personInName, personInCd);
	}//GEN-LAST:event_personInNameActionPerformed
	
	private void supplierNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_supplierNameActionPerformed
	{//GEN-HEADEREND:event_supplierNameActionPerformed

            supplierName.hidePopup();

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                UIUtil.outputSupplier(supplierName, supplierNo);

		//商品リストを更新する
		tblProduct1DoClick();
		tblProduct2DoClick();
		SwingUtil.clearTable(tblDetailInfo);
                
            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
                
	}//GEN-LAST:event_supplierNameActionPerformed
	
	private void btnSearchOrderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSearchOrderActionPerformed
	{//GEN-HEADEREND:event_btnSearchOrderActionPerformed
		loadOrder();
		//新規フラグを設置する
		setNewFlag(1);
	}//GEN-LAST:event_btnSearchOrderActionPerformed
	
	private void btnSearchSlipActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSearchSlipActionPerformed
	{//GEN-HEADEREND:event_btnSearchSlipActionPerformed
		loadSlip();
	}//GEN-LAST:event_btnSearchSlipActionPerformed
	
	private void tblProduct1MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblProduct1MouseReleased
	{//GEN-HEADEREND:event_tblProduct1MouseReleased
		tblProduct1DoClick();
	}//GEN-LAST:event_tblProduct1MouseReleased
	
	private void tblProduct2KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_tblProduct2KeyReleased
	{//GEN-HEADEREND:event_tblProduct2KeyReleased
		tblProduct2DoClick();
	}//GEN-LAST:event_tblProduct2KeyReleased
	
	private void tblProduct2MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblProduct2MouseReleased
	{//GEN-HEADEREND:event_tblProduct2MouseReleased
		tblProduct2DoClick();
	}//GEN-LAST:event_tblProduct2MouseReleased
	
	private void tblProduct1KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_tblProduct1KeyReleased
	{//GEN-HEADEREND:event_tblProduct1KeyReleased
		tblProduct1DoClick();
	}//GEN-LAST:event_tblProduct1KeyReleased
	
	private void btnClearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnClearActionPerformed
	{//GEN-HEADEREND:event_btnClearActionPerformed
		clear();
	}//GEN-LAST:event_btnClearActionPerformed
	
	private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteActionPerformed
	{//GEN-HEADEREND:event_btnDeleteActionPerformed
		if (MessageDialog.showYesNoDialog(this,
			MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, "入庫伝票"),
			this.getTitle(),
			JOptionPane.WARNING_MESSAGE) != JOptionPane.YES_OPTION)
		{
			return;
		}
		
		//伝票情報を削除する
		DataSlipStore dss =  new DataSlipStore();
		dss.setShopId(((MstShop)shop.getSelectedItem()).getShopID());
		//新規の場合、削除できません
		if (!CheckUtil.isNumeric(voucherNo.getText()))
		{
			clear();
			return;
		}
		dss.setSlipNo(Integer.parseInt(voucherNo.getText()));

		try
		{
			ConnectionWrapper con = SystemInfo.getConnection();
			con.begin();
			try
			{
				dss.delete(con);

				//伝票詳細情報を削除する
				DataSlipStoreDetail dssd = new DataSlipStoreDetail();
				dssd.setShopId(dss.getShopId());
				dssd.setSlipNo(dss.getSlipNo());

				dssd.delete(con);
				con.commit();

				//初期状態に戻る
				clear();

				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.INFO_DELETE_SUCCESS),
					this.getTitle(),
				JOptionPane.INFORMATION_MESSAGE);
			}
			catch (Exception ex)
			{
				con.rollback();
				throw ex;
			}
			finally
			{
				con.close();
			}
		}
		catch (RuntimeException ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			throw ex;
		}
		catch (Exception ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED, "入庫伝票"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
		}
	}//GEN-LAST:event_btnDeleteActionPerformed
	
	private void btnRegistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRegistActionPerformed
	{//GEN-HEADEREND:event_btnRegistActionPerformed
		//IVS_LVTu start add 2015/10/14 Bug #43499
                if(tblDetailInfo.isEditing())
                {
                    tblDetailInfo.getCellEditor().stopCellEditing();
                }
                //IVS_LVTu end add 2015/10/14 Bug #43499
                //伝票情報を更新する
		if (!inputCheck())
		{
			return;
		}
		
		if (MessageDialog.showYesNoDialog(this,
			MessageUtil.getMessage(MessageUtil.CONFIRM_REGIST, "入庫伝票"),
			this.getTitle(),
			JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION)
		{
			return;
		}

		try
		{
			ConnectionWrapper con = SystemInfo.getConnection();
			try
			{
				con.begin();
				
				DataSlipStore dss = new DataSlipStore();
				//新規の場合
				if (getNewFlag() == 1)
				{
					dss.setShopId(((MstShop)shop.getSelectedItem()).getShopID());
					
					//伝票NOを生成する
					dss.setNewSlipNo(con);
					
					//==================
					//詳細内容を設置する
					//==================
					//仕入先
					dss.setSupplierId(UIUtil.getSupplierID(supplierName));
					// 入庫日
					dss.setStoreDate(checkInDate.getDate());
					// 担当者
					MstStaff mstStaff = (MstStaff) personInName.getSelectedItem();
					dss.setStaffId(mstStaff.getStaffID());
					// 値引き
                                        //IVS_LVTu start edit 2015/10/20 Bug #43749
					//dss.setDiscount(Integer.parseInt(priceDown.getText()));
                                        dss.setDiscount(Integer.parseInt(priceDown.getText().trim().equals("")? "0":priceDown.getText().trim()));
                                        //IVS_LVTu end edit 2015/10/20 Bug #43749
					// 対応する発注書
					if (dataSlipOrder != null)
					{
						dss.setOrderSlipNo(dataSlipOrder.getSlipNo());
					}
					
					//挿入する
					dss.insert(con);
				}
				else
				{
					dss.setShopId(((MstShop)shop.getSelectedItem()).getShopID());
					dss.setSlipNo(Integer.parseInt(voucherNo.getText()));
					// 入庫日
					dss.setStoreDate(checkInDate.getDate());
					// 担当者
					MstStaff mstStaff = (MstStaff) personInName.getSelectedItem();
					dss.setStaffId(mstStaff.getStaffID());
					// 値引き
                                        //IVS_LVTu start edit 2015/10/20 Bug #43749
					//dss.setDiscount(Integer.parseInt(priceDown.getText()));
                                        dss.setDiscount(Integer.parseInt(priceDown.getText().trim().equals("")? "0": priceDown.getText().trim()));
                                        //IVS_LVTu end edit 2015/10/20 Bug #43749
					if (dataSlipOrder != null)
					{
						dss.setOrderSlipNo(dataSlipOrder.getSlipNo());
					}
					
					dss.update(con);
				}

				//伝票詳細情報を更新する
				DataSlipStoreDetail.physicalDelete(con, dss.getShopId(), dss.getSlipNo());
				for (int i = 0; i < tblDetailInfo.getRowCount(); i++)
				{
					DataSlipStoreDetail dssd = new DataSlipStoreDetail();
					dssd.setShopId(dss.getShopId());
					dssd.setSlipNo(dss.getSlipNo());
					
					MstItem item = (MstItem)tblDetailInfo.getValueAt(i, 2);
					dssd.setItemId(item.getItemID());
					
					// 仕入価格
					Integer costPrice = (Integer) tblDetailInfo.getValueAt(i, 3);
					if (costPrice == null)
					{
						costPrice = 0;
					}
					dssd.setCostPrice(costPrice);
					//入庫数、添付数
					Integer inNum = (Integer) tblDetailInfo.getValueAt(i, 6);
					if (inNum == null)
					{
						inNum = 0;
					}
					dssd.setInNum(inNum);
					Integer attNum = (Integer) tblDetailInfo.getValueAt(i, 7);
					if (attNum == null)
					{
						attNum = 0;
					}
					dssd.setAttachNum(attNum);
					if (inNum == 0 && attNum == 0)
					{
						continue;
					}
					
					//入庫区分　暫くのこと
					dssd.setInClass(0);
					
					// 店販業務区分
					TableRecord rec = (TableRecord) tblDetailInfo.getValueAt(i,0);
					dssd.setItemUseDivision(rec.getSelectItemUseDivision());
					
					//新規
					dssd.setNewSlipDetailNo(con);
					dssd.insert(con);
				}
				
				con.commit();
				
				// 登録した伝票を読み込み
				loadSlip(con, dss.getShopId(), dss.getSlipNo());

				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
					this.getTitle(),
					JOptionPane.INFORMATION_MESSAGE);
			}
			catch (Exception e)
			{
				con.rollback();
				throw e;
			}
			finally
			{
				con.close();
			}
		}
		catch (RuntimeException ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			throw ex;
		}
		catch (Exception ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);

			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "入庫伝票"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return;
		}
	}//GEN-LAST:event_btnRegistActionPerformed
	
	private void personInCdFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_personInCdFocusLost
	{//GEN-HEADEREND:event_personInCdFocusLost
		UIUtil.selectStaff(personInCd, personInName);
	}//GEN-LAST:event_personInCdFocusLost
	
	private void supplierNoFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_supplierNoFocusLost
	{//GEN-HEADEREND:event_supplierNoFocusLost
		UIUtil.selectSupplier(supplierNo, supplierName);

		//商品リストを更新する
		tblProduct1DoClick();
		tblProduct2DoClick();
		SwingUtil.clearTable(tblDetailInfo);
	}//GEN-LAST:event_supplierNoFocusLost
	
    private void priceDownFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_priceDownFocusLost
		//仕入値引き金額を抜く
		int totalMoney = 0;
		for (int i = 0; i < tblDetailInfo.getRowCount(); i++)
		{
			totalMoney += format(tblDetailInfo.getValueAt(i,9));
		}
                //IVS_LVTu start edit 2015/10/22 Bug #43749
                if ( priceDown.getText().matches("-?[0-9]+") ){
                    totalMoney -= format(priceDown.getText());
                }
                //IVS_LVTu end edit 2015/10/22 Bug #43749
		
		//値を設置する
		tblTotalInfo.setValueAt(totalMoney,0,3);
    }//GEN-LAST:event_priceDownFocusLost
	
	private boolean inputCheck()
	{
		if (UIUtil.getSupplierID(supplierName) == null)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "仕入先"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			supplierName.requestFocusInWindow();
			return	false;
		}

		if (checkInDate.getDate() == null)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "入庫日"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			checkInDate.requestFocusInWindow();
			return	false;
		}
		
		MstStaff mstStaff = (MstStaff) personInName.getSelectedItem();
		if (mstStaff == null || mstStaff.getStaffID() == null)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "入庫担当者"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			personInName.requestFocusInWindow();
			return	false;
		}

		if (tblDetailInfo.getRowCount() == 0)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED, "入庫する商品"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return	false;
		}

		//入庫数、添付数デフォルト値を設置する
		for (int i = 0; i < tblDetailInfo.getRowCount(); i++)
		{
			Integer inNum = (Integer) tblDetailInfo.getValueAt(i, 6);
			if (inNum == null)
			{
				tblDetailInfo.setValueAt(0, i, 6);
			}
			Integer attNum = (Integer) tblDetailInfo.getValueAt(i, 7);
			if (attNum == null)
			{
				tblDetailInfo.setValueAt(attNum,i, 7);
			}
		}

		// 入庫数
		for (int i = 0; i < tblDetailInfo.getRowCount(); i++)
		{
			Integer inNum = (Integer) tblDetailInfo.getValueAt(i, 6);
			Integer attNum = (Integer) tblDetailInfo.getValueAt(i, 7);
			if ((inNum != null && inNum < 0) || (attNum != null && attNum < 0))
			{
                            MessageDialog.showMessageDialog(this,
                                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "入庫数または添付数"),
                                    this.getTitle(),
                                    JOptionPane.ERROR_MESSAGE);
                            return false;
			}
		}

		boolean valid = false;
		for (int i = 0; i < tblDetailInfo.getRowCount(); i++)
		{
			Integer inNum = (Integer) tblDetailInfo.getValueAt(i, 6);
			Integer attNum = (Integer) tblDetailInfo.getValueAt(i, 7);
			if ((inNum != null && inNum > 0) || (attNum != null && attNum > 0))
			{
				valid = true;
				break;
			}
		}

		if (!valid)
		{
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "入庫数または添付数"),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
			return false;
		}
                
                //IVS_LVTu start add 2015/10/22 Bug #43749
                if(!priceDown.getText().matches("-?[0-9]+") && !priceDown.getText().trim().equals(""))
                {
                        MessageDialog.showMessageDialog(this,
                                        "仕入値引きは数字で入力してください。",
                                        this.getTitle(),
                                        JOptionPane.ERROR_MESSAGE);
                        priceDown.requestFocusInWindow();
                        return	false;
                }
                //IVS_LVTu end add 2015/10/22 Bug #43749

		return true;
	}
    private void tblProductDetail2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductDetail2MouseClicked
		if (evt.getClickCount() == 2 && evt.getButton() == 1)
		{
			//追加商品がリストに存在かどうか確認する
			if (!singleCheck(2, (MstItem) tblProductDetail2.getValueAt(tblProductDetail2.getSelectedRow(),0)))
			{
				return;
			}

			//イベントフラッグを設置する
			setEventFlg(0);

			Vector vec = new Vector();
			//用途を設置する
			MstItem item = (MstItem)tblProductDetail2.getValueAt(tblProductDetail2.getSelectedRow(),0);
			TableRecord rec = new TableRecord();
			rec.setItemId(item.getItemID());
			rec.setSelectItemUseDivision(2);

			vec.add(rec);
			vec.add(tblProduct2.getValueAt(tblProduct2.getSelectedRow(),0));
			vec.add(tblProductDetail2.getValueAt(tblProductDetail2.getSelectedRow(),0));
			vec.add(tblProductDetail2.getValueAt(tblProductDetail2.getSelectedRow(),1));
			vec.add(tblProductDetail2.getValueAt(tblProductDetail2.getSelectedRow(),2));
			vec.add(null);
			vec.add(null);
			vec.add(null);
			vec.add(null);
			vec.add(null);
			vec.add(getDeleteButton());

			//一行を追加する
			//int rowIndex = findInsertPoint(tblDetailInfo, 2, item);
			//((DefaultTableModel)tblDetailInfo.getModel()).insertRow(rowIndex, vec);
			((DefaultTableModel)tblDetailInfo.getModel()).addRow(vec);

                        tblDetailInfo.changeSelection(tblDetailInfo.getRowCount() - 1, 6, false, false);
                        tblDetailInfo.requestFocusInWindow();
                        
			//イベントフラッグを設置する
			setEventFlg(1);
		}
		
    }//GEN-LAST:event_tblProductDetail2MouseClicked

	private void tblProduct2DoClick()
	{
		if (tblProduct2.getSelectedRow() < 0)
		{
			SwingUtil.clearTable(tblProductDetail2);
			return;
		}

		MstItemClass mic = (MstItemClass)tblProduct2.getValueAt(tblProduct2.getSelectedRow(),0);

		Integer supplierID = UIUtil.getSupplierID(supplierName);
		if (supplierID == null)
		{
			SwingUtil.clearTable(tblProductDetail2);
			return;
		}

		MstShop mstShop = (MstShop) shop.getSelectedItem();

		MstSupplierItems mis = new MstSupplierItems(mic.getItemClassID(), 2, UIUtil.getSupplierID(supplierName));
		mis.setShopId(mstShop.getShopID());
		try
		{
			mis.load(SystemInfo.getConnection());
			//商品リストを初期化する
			SwingUtil.clearTable(tblProductDetail2);

			double taxRate = SystemInfo.getTaxRate(new Date());
			for (int i = 0; i<mis.size(); i++)
			{
				if (i == tblProductDetail2.getModel().getRowCount())
				{
					((DefaultTableModel)tblProductDetail2.getModel()).addRow(new Vector());
				}
				tblProductDetail2.setValueAt(mis.get(i),i,0) ;

				int price = mis.get(i).getCostPrice();
				tblProductDetail2.setValueAt(price,i,1) ;

				//IVS_LVTu start edit 2015/09/30 Bug #43033
                                //tblProductDetail2.setValueAt(price - (TaxUtil.getTax(price, taxRate, 1)),i,2) ;
                                tblProductDetail2.setValueAt(getTaxOffPrice(price,taxRate),i,2) ;
                                //IVS_LVTu end edit 2015/09/30 Bug #43033
			}
		}
		catch (RuntimeException ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			throw ex;
		}
		catch (Exception ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}

    private void tblProductDetail1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductDetail1MouseClicked
		if (evt.getClickCount() == 2 && evt.getButton() == 1)
		{
			//追加商品がリストに存在かどうか確認する
			if (!singleCheck(1, (MstItem) tblProductDetail1.getValueAt(tblProductDetail1.getSelectedRow(),0)))
			{
				return;
			}

			Vector vec = new Vector();

			//イベントフラッグを設置する
			setEventFlg(0);
			
			//用途を設置する
			MstItem item = (MstItem)tblProductDetail1.getValueAt(tblProductDetail1.getSelectedRow(),0);
			TableRecord rec = new TableRecord();
			rec.setItemId(item.getItemID());
			rec.setSelectItemUseDivision(1);

			vec.add(rec);
			vec.add(tblProduct1.getValueAt(tblProduct1.getSelectedRow(),0));
			vec.add(tblProductDetail1.getValueAt(tblProductDetail1.getSelectedRow(),0));
			vec.add(tblProductDetail1.getValueAt(tblProductDetail1.getSelectedRow(),1));
			vec.add(tblProductDetail1.getValueAt(tblProductDetail1.getSelectedRow(),2));
			vec.add(null);
			vec.add(null);
			vec.add(null);
			vec.add(null);
			vec.add(null);
			vec.add(getDeleteButton());

			//一行を追加する
			//int rowIndex = findInsertPoint(tblDetailInfo, 1, item);
			//((DefaultTableModel)tblDetailInfo.getModel()).insertRow(rowIndex, vec);
			((DefaultTableModel)tblDetailInfo.getModel()).addRow(vec);

                        tblDetailInfo.changeSelection(tblDetailInfo.getRowCount() - 1, 6, false, false);
                        tblDetailInfo.requestFocusInWindow();
                        
			//イベントフラッグを設置する
			setEventFlg(1);
		}
    }//GEN-LAST:event_tblProductDetail1MouseClicked
    //IVS_LVTu start add 2014/07/29 Mashu_入庫管理フォーマット取り込み
    private void butGoodsImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGoodsImportActionPerformed
        
        importData();
    }//GEN-LAST:event_butGoodsImportActionPerformed

    /**
     * method importData.
     * import file excel, get data from file, insert into database.
     */
    public void importData()
    {
        OptionFilePanel ofp = new OptionFilePanel();
        ofp.setOpener(this);
        for ( int i = 0 ;i < shop.getItemCount();i ++)
        {
            MstShop mstShop = (MstShop)shop.getItemAt(i);
            ofp.arrShopId.add(mstShop.getShopID());
        }
        SwingUtil.openAnchorDialog( null, true, ofp, "▼ファイル選択画面", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
        if (ofp.shopId == null || ofp.slipNo == null)
        {
            return;
        }
        try
        {
                ConnectionWrapper con = SystemInfo.getConnection();
                try
                {
                        loadSlip(con, ofp.shopId, ofp.slipNo);
                }
                finally
                {
                        con.close();
                }
        }
        catch (RuntimeException ex)
        {
                SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
                throw ex;
        }
        catch (Exception ex)
        {
                SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(1099),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
        }
    }
    //IVS_LVTu end add 2014/07/29 Mashu_入庫管理フォーマット取り込み
	/**
	 * FocusTraversalPolicy
	 */
	private	FocusTraversalPolicy traversalPolicy	=
		new RegisterCheckInVoucherPanelFocusTraversalPolicy();
	
	/**
	 * FocusTraversalPolicyを取得する。
	 * @return FocusTraversalPolicy
	 */
	public FocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	traversalPolicy;
	}

	private int findInsertPoint(JTable tblDetailInfo, int itemUseDivision, MstItem item)
	{
		int itemClassDispSeq = classes.lookup(item.getItemClass().getItemClassID()).getDisplaySeq();
		int itemDispSeq = item.getDisplaySeq();
		
		int cnt = tblDetailInfo.getRowCount();
		for (int i = 0; i < cnt; i++)
		{
			int rowItemUseDivision = ((TableRecord) tblDetailInfo.getValueAt(i, 0)).getSelectItemUseDivision();
			if (rowItemUseDivision > itemUseDivision)
			{
				return i;
			}
			else if (rowItemUseDivision == itemUseDivision)
			{
				MstItem rowItem = (MstItem) tblDetailInfo.getValueAt(i, 2);
				MstItemClass cls = classes.lookup(rowItem.getItemClass().getItemClassID());
				if (cls.getDisplaySeq() > itemClassDispSeq)
				{
					return i;
				}
				else if (cls.getDisplaySeq() == itemClassDispSeq)
				{
					if (rowItem.getDisplaySeq() > itemDispSeq)
					{
						return i;
					}
				}
			}
		}
		
		return cnt;
	}

	private void tblProduct1DoClick()
	{
		if (tblProduct1.getSelectedRow() < 0)
		{
			SwingUtil.clearTable(tblProductDetail1);
			return;
		}
		MstItemClass mic = (MstItemClass)tblProduct1.getValueAt(tblProduct1.getSelectedRow(),0);

		Integer supplierID = UIUtil.getSupplierID(supplierName);
		if (supplierID == null)
		{
			SwingUtil.clearTable(tblProductDetail1);
			return;
		}

		MstShop mstShop = (MstShop) shop.getSelectedItem();

		MstSupplierItems mis = new MstSupplierItems(mic.getItemClassID(), 1, supplierID);
		mis.setShopId(mstShop.getShopID());
		try
		{
			mis.load(SystemInfo.getConnection());
			//商品リストを初期化する
			SwingUtil.clearTable(tblProductDetail1);

			double taxRate = SystemInfo.getTaxRate(new Date());
			for (int i = 0; i<mis.size(); i++)
			{
				if (i == tblProductDetail1.getModel().getRowCount())
				{
					((DefaultTableModel)tblProductDetail1.getModel()).addRow(new Vector());
				}
				tblProductDetail1.setValueAt(mis.get(i),i,0) ;

				int price = mis.get(i).getCostPrice();
				tblProductDetail1.setValueAt(price,i,1) ;

				//IVS_LVTu start edit 2015/09/30 Bug #43033
                                //tblProductDetail1.setValueAt(price - (TaxUtil.getTax(price, taxRate, 1)),i,2) ;
                                tblProductDetail1.setValueAt(getTaxOffPrice(price, taxRate),i,2) ;
                                //IVS_LVTu end edit 2015/09/30 Bug #43033
			}
		}
		catch (RuntimeException ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			throw ex;
		}
		catch (Exception ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * 発注書検索ボタン押下時処理
	 */
	public void loadOrder()
	{
		SystemInfo.getLogger().log(Level.INFO, "発注書検索");
		SearchSlipDialog	ssp	=	new SearchSlipDialog(parentFrame, true, SearchSlip.SlipType.ORDER);
		ssp.setShop((MstShop) shop.getSelectedItem());
		ssp.setVisible(true);
		
		//伝票が選択された場合
		if(ssp.getSelectedSlip() != null)
		{
			SlipData sd = ssp.getSelectedSlip();
			
			DataSlipOrder data = new DataSlipOrder();
			data.setShopId(sd.getShopID());
			data.setSlipNo(sd.getSlipNo());
			
			data.load(sd.getShopID(),sd.getSlipNo());
			
			this.showOrderData(data);
			
			dataSlipOrder = data;
		}

		ssp.dispose();
	}
	
	/*
	 *検索結果を表示する
	 */
	private void showOrderData(DataSlipOrder data)
	{
		//clear
		clear();
		
		//店舗
		MstShop mstShop = new MstShop();
		mstShop.setShopID(data.getShopId());
		shop.setSelectedItem(mstShop);
		
		// 仕入先
		MstSupplier mstSupplier = new MstSupplier();
		mstSupplier.setSupplierID(data.getSupplierId());
		supplierName.setSelectedItem(mstSupplier);
		
		//入庫担当者
		personInName.setSelectedIndex(0);
		
		//伝票NO
		try
		{
			ConnectionWrapper con = SystemInfo.getConnection();
			try
			{
				//伝票詳細情報
				DataSlipOrderDetail [] dssd = data.getDetail();
				
				double taxRate = SystemInfo.getTaxRate(new Date());
				for (int i = 0; i<dssd.length; i++ )
				{
					((DefaultTableModel)tblDetailInfo.getModel()).addRow(new Vector());
					
					DataSlipOrderDetail detail = dssd[i];
					//区分
					TableRecord rec = new TableRecord();
					rec.setItemId(detail.getItemID());
					rec.setSelectItemUseDivision(detail.getItemUseDivision());
					
					tblDetailInfo.setValueAt(rec,i,0);
					
					//分類・商品名・仕入価格（税込）・仕入価格（税抜）
					MstItem item = new MstItem();
					item.setItemID(detail.getItemID());
					item.load(con);
					
					tblDetailInfo.setValueAt(item.getItemClass(),i,1);
					tblDetailInfo.setValueAt(item,i,2);
					
					tblDetailInfo.setValueAt(detail.getCostPrice(),i,3);
					
					//IVS_LVTu start edit 2015/09/30 Bug #43033
                                        //int taxValue = TaxUtil.getTax(detail.getCostPrice(), taxRate, 1);
					//tblDetailInfo.setValueAt(detail.getCostPrice() - taxValue,i,4);
                                        tblDetailInfo.setValueAt(getTaxOffPrice(detail.getCostPrice(), taxRate),i,4);
                                        //IVS_LVTu end edit 2015/09/30 Bug #43033
					
					//発注数
					tblDetailInfo.setValueAt(new Integer(detail.getOrderNum()),i,5);
					
					//入庫数・添付数
					tblDetailInfo.setValueAt(new Integer(0),i,6);
					tblDetailInfo.setValueAt(new Integer(0),i,7);
					//削除ボタン
					tblDetailInfo.setValueAt(getDeleteButton(),i,10);
				}
			}
			finally
			{
				con.close();
			}
			//再計算
			detailSearchResultInit(tblDetailInfo);
			//入力不可にする
			enableSearchCondition(SearchMode.SLIP_ORDER);
		}
		catch (RuntimeException ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			throw ex;
		}
		catch (Exception ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * 入庫伝票読み込み処理
	 */
	public void loadSlip(ConnectionWrapper con, int shopId, int slipNo) throws SQLException
	{
		data = new DataSlipStore();
		dataSlipOrder = null;
		
		data.setShopId(shopId);
		data.setSlipNo(slipNo);
		
		data.load(con);
		if (data.getOrderSlipNo() != null && data.getOrderSlipNo() > 0)
		{
			dataSlipOrder = new DataSlipOrder();
			dataSlipOrder.load(con, data.getShopId(), data.getOrderSlipNo());
		}
		this.showSlipData(con, data, dataSlipOrder);
		
		setNewFlag(0);
	}
	
	/**
	 * 伝票検索ボタン押下時処理
	 */
	public void loadSlip()
	{
		SystemInfo.getLogger().log(Level.INFO, "伝票検索");
		SearchSlipDialog	ssp	=	new SearchSlipDialog(parentFrame, true, SearchSlip.SlipType.STORE);
		ssp.setShop((MstShop) shop.getSelectedItem());
		ssp.setVisible(true);
		
		//伝票が選択された場合
		if(ssp.getSelectedSlip() != null)
		{
			SlipData sd = ssp.getSelectedSlip();
			
			try
			{
				ConnectionWrapper con = SystemInfo.getConnection();
				try
				{
					loadSlip(con, sd.getShopID(), sd.getSlipNo());
					//新規フラグを設置する
					setNewFlag(0);
				}
				finally
				{
					con.close();
				}
			}
			catch (RuntimeException ex)
			{
				SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
				ssp.dispose();
				throw ex;
			}
			catch (Exception ex)
			{
				SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(1099),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			}
		}

		ssp.dispose();
	}
	
	/*
	 *検索結果を表示する
	 */
	private void showSlipData(ConnectionWrapper con, DataSlipStore dataStore, DataSlipOrder dataOrder) throws SQLException
	{
		//clear
		clear();
		
		this.data = dataStore;
		this.dataSlipOrder = dataOrder;
		
		//伝票NO
		voucherNo.setText(data.getSlipNo()+"");
		voucherNo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
		
		//店舗
		MstShop mstShop = new MstShop();
		mstShop.setShopID(data.getShopId());
		shop.setSelectedItem(mstShop);
		
		//仕入先
		MstSupplier supplier = new MstSupplier();
		supplier.setSupplierID(data.getSupplierId());
		supplierName.setSelectedItem(supplier);
		
		//入庫日
		checkInDate.setDate(data.getStoreDate());
		
		//入庫担当者
		MstStaff staff = new MstStaff(data.getStaffId());
		staff.load(con);
		personInCd.setText(staff.getStaffNo());
                UIUtil.selectStaff(personInCd, personInName);
		
		//仕入値引き
		priceDown.setText(data.getDiscount() + "");
		//伝票詳細情報
		DataSlipStoreDetails dssd = new DataSlipStoreDetails();
		dssd.setShopId(data.getShopId());
		dssd.setSlipNo(data.getSlipNo());
		
		dssd.load(con,false);
		
		double taxRate = SystemInfo.getTaxRate(new Date());
		for (int i = 0; i<dssd.size(); i++ )
		{
			((DefaultTableModel)tblDetailInfo.getModel()).addRow(new Vector());
			
			DataSlipStoreDetail detail = dssd.get(i);
			//区分
			TableRecord rec = new TableRecord();
			rec.setItemId(detail.getItemId());
			rec.setSelectItemUseDivision(detail.getItemUseDivision());
			
			tblDetailInfo.setValueAt(rec,i,0);
			
			//分類・商品名・仕入価格（税込）・仕入価格（税抜）
			MstItem item = new MstItem();
			item.setItemID(detail.getItemId());
			item.load(SystemInfo.getConnection());
			
			tblDetailInfo.setValueAt(item.getItemClass(),i,1);
			tblDetailInfo.setValueAt(item,i,2);
			
			tblDetailInfo.setValueAt(detail.getCostPrice(),i,3);
			
			//IVS_LVTu start edit 2015/09/30 Bug #43033
                        //int taxValue = TaxUtil.getTax(detail.getCostPrice(), taxRate, 1);
			//tblDetailInfo.setValueAt(detail.getCostPrice() - taxValue,i,4);
                        tblDetailInfo.setValueAt(getTaxOffPrice(detail.getCostPrice(), taxRate),i,4);
                        //IVS_LVTu end edit 2015/09/30 Bug #43033
			
			//発注数
			if (dataOrder != null)
			{
				DataSlipOrderDetail[] orderDetailArray = dataOrder.getDetail();
				for (int j = 0; j < orderDetailArray.length; j++)
				{
					DataSlipOrderDetail od = orderDetailArray[j];
					if (detail.getItemId() == od.getItemID() && detail.getItemUseDivision() == od.getItemUseDivision())
					{
						tblDetailInfo.setValueAt(od.getOrderNum(),i,5);
						break;
					}
				}
			}
			
			//入庫数・添付数
			tblDetailInfo.setValueAt(detail.getInNum(),i,6);
			tblDetailInfo.setValueAt(detail.getAttachNum(),i,7);
			//削除ボタン
			tblDetailInfo.setValueAt(getDeleteButton(),i,10);
		}
		//再計算
		detailSearchResultInit(tblDetailInfo);
		
		//disable 仕入先・入庫日・入庫担当者
		enableSearchCondition(SearchMode.SLIP_STORE);
	}
	
   /*
	*検索結果再計算
	*/
	private void detailSearchResultInit(JTable table)
	{
		//仕入価格
		int PRICE_COLUMN = 3;
		//入庫数
		int IN_COLUMN = 6;
		//添付数
		int ATTACHMENT_COLUMN = 7;
		//入庫計
		int IN_ACCOUNT_COLUMN = 8;
		//入庫金額
		int IN_MONEY_COLUMN = 9;
		
		//初期化まだアイテム追加時、処理しない
//        if (getEventFlg() == 0) {
//            return;
//        }
		
		//合計入庫数,添付数、入庫計、まだ入庫金額を更新する
		int totalIn = 0;
		int totalAttach = 0;
		int totalAccount = 0;
		int totalMoney = 0;
		for (int i = 0; i < table.getRowCount(); i++)
		{
			//入庫計と入庫金額を更新する
			int inAccount = format(table.getValueAt(i,IN_COLUMN)) + format(table.getValueAt(i,ATTACHMENT_COLUMN));
			int inMoney = format(table.getValueAt(i,PRICE_COLUMN)) * format(table.getValueAt(i,IN_COLUMN));
			
			table.setValueAt(inAccount,i,IN_ACCOUNT_COLUMN);
			table.setValueAt(inMoney,i,IN_MONEY_COLUMN);
			
			totalIn += format(table.getValueAt(i,IN_COLUMN));
			totalAttach += format(table.getValueAt(i,ATTACHMENT_COLUMN));
			totalAccount += format(table.getValueAt(i,IN_ACCOUNT_COLUMN));
			totalMoney += format(table.getValueAt(i,IN_MONEY_COLUMN));
		}
		
		//仕入値引き金額を抜く
		totalMoney -= format(priceDown.getText());
		
		//値を設置する
		tblTotalInfo.setValueAt(totalIn,0,0);
		tblTotalInfo.setValueAt(totalAttach,0,1);
		tblTotalInfo.setValueAt(totalAccount,0,2);
		tblTotalInfo.setValueAt(totalMoney,0,3);
		
		//
		setEventFlg(1);
	}
	
	
	private void initItemClass()
	{
		try
		{
			classes.loadAll(SystemInfo.getConnection());
			for (int i = 0;i < classes.size(); i++)
			{
				MstItemClass class1 = classes.get(i);

				if (i == tblProduct1.getModel().getRowCount())
				{
					((DefaultTableModel)tblProduct1.getModel()).addRow(new Vector());
				}
				tblProduct1.setValueAt(class1,i,0) ;

				if (i == tblProduct2.getModel().getRowCount())
				{
					((DefaultTableModel)tblProduct2.getModel()).addRow(new Vector());
				}
				tblProduct2.setValueAt(class1,i,0);
			}
		}
		catch (RuntimeException ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			throw ex;
		}
		catch (Exception ex)
		{
			SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
		}
	}
	
	private boolean singleCheck(int selectItemUseDivision, MstItem item)
	{
		for (int i = 0; i < tblDetailInfo.getRowCount(); i++)
		{
			TableRecord torec = (TableRecord) tblDetailInfo.getValueAt(i,0);
			
			if (selectItemUseDivision == torec.getSelectItemUseDivision()
			&& torec.getItemId().equals(item.getItemID()))
			{
				return false;
			}
		}
		
		return true;
	}

	public int getEventFlg()
	{
		return eventFlg;
	}
	
	public void setEventFlg(int eventFlg)
	{
		this.eventFlg = eventFlg;
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRegist;
    private javax.swing.JButton btnSearchOrder;
    private javax.swing.JButton btnSearchSlip;
    private javax.swing.JButton butGoodsImport;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo checkInDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane panelDetail;
    private javax.swing.JPanel panelForBuiness;
    private javax.swing.JPanel panelForShopSale;
    private javax.swing.JScrollPane panelTotal;
    private javax.swing.JFormattedTextField personInCd;
    private javax.swing.JComboBox personInName;
    private javax.swing.JFormattedTextField priceDown;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JComboBox supplierName;
    private javax.swing.JFormattedTextField supplierNo;
    private com.geobeck.swing.JTableEx tblDetailInfo;
    private javax.swing.JTable tblProduct1;
    private javax.swing.JTable tblProduct2;
    private javax.swing.JTable tblProductDetail1;
    private javax.swing.JTable tblProductDetail2;
    private javax.swing.JTable tblTotalInfo;
    private javax.swing.JTextField voucherNo;
    // End of variables declaration//GEN-END:variables
	
	class SelectionListener implements TableModelListener
	{
		JTable table;
		
		// It is necessary to keep the table since it is not possible
		// to determine the table from the event's source
		SelectionListener(JTable table)
		{
			this.table = table;
		}
		
		
		public void tableChanged(TableModelEvent e)
		{
			int column = e.getColumn();
			int row = e.getFirstRow();
			
			reCalculate(table,row,column);
		}
		
	}
	
	
	private void reCalculate(JTable table, int row, int column)
	{
		//仕入価格
		int PRICE_COLUMN = 3;
		//入庫数
		int IN_COLUMN = 6;
		//添付数
		int ATTACHMENT_COLUMN = 7;
		//入庫計
		int IN_ACCOUNT_COLUMN = 8;
		//入庫金額
		int IN_MONEY_COLUMN = 9;
		
		//初期化まだアイテム追加時、処理しない
		if (getEventFlg() == 0)
		{
			return;
		}
		
		if (column == IN_COLUMN || column == ATTACHMENT_COLUMN)
		{
			//入庫計と入庫金額を更新する
			int inAccount = format(table.getValueAt(row,IN_COLUMN)) + format(table.getValueAt(row,ATTACHMENT_COLUMN));
			int inMoney = format(table.getValueAt(row,PRICE_COLUMN)) * format(table.getValueAt(row,IN_COLUMN));
			
			table.setValueAt(inAccount,row,IN_ACCOUNT_COLUMN);
			table.setValueAt(inMoney,row,IN_MONEY_COLUMN);
			
			//合計入庫数,添付数、入庫計、まだ入庫金額を更新する
			int totalIn = 0;
			int totalAttach = 0;
			int totalAccount = 0;
			int totalMoney = 0;
			for (int i = 0; i < table.getRowCount(); i++)
			{
				totalIn += format(table.getValueAt(i,IN_COLUMN));
				totalAttach += format(table.getValueAt(i,ATTACHMENT_COLUMN));
				totalAccount += format(table.getValueAt(i,IN_ACCOUNT_COLUMN));
				totalMoney += format(table.getValueAt(i,IN_MONEY_COLUMN));
			}
			
			//仕入値引き金額を抜く
			totalMoney -= format(priceDown.getText());
			
			//値を設置する
			tblTotalInfo.setValueAt(totalIn,0,0);
			tblTotalInfo.setValueAt(totalAttach,0,1);
			tblTotalInfo.setValueAt(totalAccount,0,2);
			tblTotalInfo.setValueAt(totalMoney,0,3);
			
		}
	}
	/*
	 * 数量の格式化
	 */
	private int format(Object obj)
	{
		if (obj == null) return 0;
		
		String str = obj + "";
		
		if (str == null || str.equals(""))
		{
			return 0;
		}
		
		return Integer.parseInt(str);
	}

	/*
	 * 伝票検索あるいは発注書検索の場合、検索条件の入力禁止です
	 */
	private void enableSearchCondition(SearchMode mode)
	{
		switch (mode)
		{
			case NONE:
				if (shop.getItemCount() > 1)
				{
					shop.setEnabled(true);
				}
				supplierNo.setEditable(true);
				supplierName.setEnabled(true);
				checkInDate.setEditable(true);
				personInCd.setEditable(true);
				personInName.setEnabled(true);
				btnRegist.setEnabled(true);
				btnDelete.setEnabled(false);
				break;
			case SLIP_STORE:
				if (shop.getItemCount() > 1)
				{
					shop.setEnabled(false);
				}
				supplierNo.setEditable(false);
				supplierName.setEnabled(false);
				checkInDate.setEditable(true);
				personInCd.setEditable(true);
				personInName.setEnabled(true);
				btnRegist.setEnabled(true);
				btnDelete.setEnabled(true);
				break;
			case SLIP_ORDER:
				if (shop.getItemCount() > 1)
				{
					shop.setEnabled(false);
				}
				supplierNo.setEditable(false);
				supplierName.setEnabled(false);
				checkInDate.setEditable(true);
				personInCd.setEditable(true);
				personInName.setEnabled(true);
				btnRegist.setEnabled(true);
				btnDelete.setEnabled(false);

				break;
		}
	}
	
	public int getNewFlag()
	{
		return newFlag;
	}
	
	public void setNewFlag(int newFlag)
	{
		this.newFlag = newFlag;
	}
	
	/*
	 *新規状態に戻る
	 */
	private void clear()
	{
		data = new DataSlipStore();
		dataSlipOrder = null;
		
		voucherNo.setText("＜新規＞");
		supplierNo.setText("");
		supplierName.setSelectedIndex(0);
		
		checkInDate.setDate(new java.util.Date());
		personInCd.setText("");
		personInName.setSelectedIndex(0);
		
		priceDown.setText("0");
		
		SwingUtil.clearTable(tblProductDetail1);
		SwingUtil.clearTable(tblProductDetail2);
		SwingUtil.clearTable(tblDetailInfo);
		
		//総計初期化
		SwingUtil.clearTable(tblTotalInfo);
		//一行を追加する
		((DefaultTableModel)tblTotalInfo.getModel()).addRow(new Vector());
		
		//新規フラグを設置する
		setNewFlag(1);
		
		//enable
		enableSearchCondition(SearchMode.NONE);
	}
	
	/**
	 * 担当者を初期化する。
	 */
	protected void initStaff( JComboBox cb )
	{
		cb.addItem(new MstStaff());
		SystemInfo.initStaffComponent(cb);
		
		cb.setSelectedIndex(0);
	}
	
	/**
	 *
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(btnSearchSlip);
		SystemInfo.addMouseCursorChange(btnSearchOrder);
		SystemInfo.addMouseCursorChange(btnRegist);
		SystemInfo.addMouseCursorChange(btnDelete);
		SystemInfo.addMouseCursorChange(btnClear);
                //IVS_LVTu start edit 2014/10/13 Mashu_入庫管理フォーマット取り込み
                SystemInfo.addMouseCursorChange(butGoodsImport);
                //IVS_LVTu end edit 2014/10/13 Mashu_入庫管理フォーマット取り込み
	}
	
	/**
	 *
	 */
	private void setKeyListener()
	{
		shop.addKeyListener(SystemInfo.getMoveNextField());
		shop.addFocusListener(SystemInfo.getSelectText());
		supplierName.addKeyListener(SystemInfo.getMoveNextField());
		supplierName.addFocusListener(SystemInfo.getSelectText());
		supplierNo.addKeyListener(SystemInfo.getMoveNextField());
		supplierNo.addFocusListener(SystemInfo.getSelectText());
		checkInDate.addKeyListener(SystemInfo.getMoveNextField());
		checkInDate.addFocusListener(SystemInfo.getSelectText());
		personInCd.addKeyListener(SystemInfo.getMoveNextField());
		personInCd.addFocusListener(SystemInfo.getSelectText());
		personInName.addKeyListener(SystemInfo.getMoveNextField());
	}
	
	/**
	 * 明細の列を初期化する。
	 */
	private void initDetailColumn()
	{
		//列の幅を設定する。
		tblDetailInfo.getColumnModel().getColumn(0).setPreferredWidth(45);		// 区分
		tblDetailInfo.getColumnModel().getColumn(1).setPreferredWidth(80);		// 分類
		tblDetailInfo.getColumnModel().getColumn(2).setPreferredWidth(210);		// 商品
		tblDetailInfo.getColumnModel().getColumn(3).setPreferredWidth(60);		// 仕入価格(税込)
		tblDetailInfo.getColumnModel().getColumn(4).setPreferredWidth(60);		// 仕入価格(税抜)
		tblDetailInfo.getColumnModel().getColumn(5).setPreferredWidth(60);		// 発注数
		tblDetailInfo.getColumnModel().getColumn(6).setPreferredWidth(65);		// 入庫数
		tblDetailInfo.getColumnModel().getColumn(7).setPreferredWidth(65);		// 添付数
		tblDetailInfo.getColumnModel().getColumn(8).setPreferredWidth(65);		// 入庫計
		tblDetailInfo.getColumnModel().getColumn(9).setPreferredWidth(60);		// 入庫金額
		tblDetailInfo.getColumnModel().getColumn(10).setPreferredWidth(50);		// 削除
	}

	/**
	 * 削除ボタンを取得する
	 */
	private JButton getDeleteButton()
	{
		JButton		delButton	=	new JButton();
		delButton.setBorderPainted(false);
		delButton.setContentAreaFilled(false);
		delButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_off.jpg")));
		delButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_on.jpg")));
		delButton.setSize(48, 25);
		delButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				deleteProduct();
			}
		});
		return delButton;
	}

	/**
	 * 明細を１行削除する。
	 */
	private void deleteProduct()
	{
		DefaultTableModel	model	=	(DefaultTableModel) tblDetailInfo.getModel();
		int					row = tblDetailInfo.getSelectedRow();		// 選択行
		int					modelRow = tblDetailInfo.convertRowIndexToModel(row);

		if( tblDetailInfo.getCellEditor() != null ) tblDetailInfo.getCellEditor().stopCellEditing();
		model.removeRow(modelRow);
	}

	/**
	 *
	 */
	private static class TableRecord
	{
		private int selectItemUseDivision;
		private Integer itemId;
		
		public void setSelectItemUseDivision(int itemUseDivision)
		{
			this.selectItemUseDivision = itemUseDivision;
		}
		
		public int getSelectItemUseDivision()
		{
			return this.selectItemUseDivision;
		}
		
		public Integer getItemId()
		{
			return this.itemId;
		}
		
		public void setItemId(Integer itemId)
		{
			this.itemId = itemId;
		}
		
		public boolean equals(Object obj)
		{
			if (obj == null)
			{
				return false;
			}
			
			if (!(obj instanceof TableRecord))
			{
				return false;
			}
			
			TableRecord r = (TableRecord) obj;
			return this.selectItemUseDivision == r.getSelectItemUseDivision() && itemId.equals(r.getItemId());
		}
		
		public String toString()
		{
			switch (selectItemUseDivision)
			{
				case 1:
					return "店販用";
				case 2:
					return "業務用";
				default:
					return "";
			}
		}
	}

	private class RegisterCheckInVoucherPanelFocusTraversalPolicy extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(shop))
			{
				return supplierNo;
			}
			else if (aComponent.equals(supplierNo))
			{
				return supplierName;
			}
			else if (aComponent.equals(supplierName))
			{
				return checkInDate;
			}
			else if (aComponent.equals(checkInDate))
			{
				return personInCd;
			}
			else if (aComponent.equals(personInCd))
			{
				return personInName;
			}
			else if (aComponent.equals(personInName))
			{
				return priceDown;
			}
			else if (aComponent.equals(priceDown))
			{
				return shop;
			}
			
			return shop;
		}
		
		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(priceDown))
			{
				return personInName;
			}
			else if (aComponent.equals(personInName))
			{
				return personInCd;
			}
			else if (aComponent.equals(personInCd))
			{
				return checkInDate;
			}
			else if (aComponent.equals(checkInDate))
			{
				return supplierName;
			}
			else if (aComponent.equals(supplierName))
			{
				return supplierNo;
			}
			else if (aComponent.equals(supplierNo))
			{
				return shop;
			}
			
			return shop;
		}
		
		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return shop;
		}
		
		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return priceDown;
		}
		
		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return shop;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return shop;
		}
	}
        //IVS_LVTu start add 2015/09/30 Bug #43033
        private Long getTaxOffPrice(Integer price, double taxRate)
	{
		Long	taxOffValue		=	0l;
		Double temptaxOffValue ;
		
                temptaxOffValue	=	(price / (1 + taxRate));
                BigDecimal a = new BigDecimal(temptaxOffValue);
                a = a.setScale(3, RoundingMode.HALF_UP);
                taxOffValue = ((Double)Math.ceil(a.doubleValue())).longValue();
            
            return taxOffValue;
	}
        //IVS_LVTu end add 2015/09/30 Bug #43033
}



