/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.geobeck.sosia.pos.hair.product;

import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.master.customer.MstDataPickupProduct;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.SwingUtil;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nakhoa
 */
public class MstProductDeliveryHistoryPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private     MstCustomer         customer            = new MstCustomer();
    private     Integer  slipNo = null;
    private     Integer  shopID = null;
    private     ArrayList<MstDataPickupProduct> listContractProducts    = new ArrayList<MstDataPickupProduct>();
    private     ArrayList<MstDataPickupProduct> listContractHistory    = new ArrayList<MstDataPickupProduct>();
    private     MstDataPickupProduct            mstContractProducts        = new MstDataPickupProduct();
    /**
     * Creates new form MstproductDeliveryHistoryPanel
     */
    public MstProductDeliveryHistoryPanel() {
        initComponents();
        this.setSize(700, 500);
        this.setPath("å⁄ãqä«óù");
        this.setTitle("è§ïiéÛìnóöó");
    }

    /**
     * Creates new form MstproductDeliveryHistoryPanel
     */
    public MstProductDeliveryHistoryPanel(MstCustomer customer) {
        this();
        this.customer = customer;
        init();
    }
    
    public MstProductDeliveryHistoryPanel(MstCustomer customer, Integer slipNo, Integer shopId) {
        this();
        this.customer = customer;
        this.slipNo = slipNo;
        this.shopID = shopId;
        init();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mobileMembersScrollPane = new javax.swing.JScrollPane();
        contractProducts = new com.geobeck.swing.JTableEx();
        mobileMembersScrollPane1 = new javax.swing.JScrollPane();
        contractHistory = new com.geobeck.swing.JTableEx();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        customerName = new javax.swing.JTextField();
        closeButton = new javax.swing.JButton();

        mobileMembersScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        contractProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "å_ñÒì˙", "è§ïiñº", "çwì¸", "éÛìn", "écêî", "écóaÇËã‡", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        contractProducts.setPreferredScrollableViewportSize(new java.awt.Dimension(550, 400));
        contractProducts.setSelectionBackground(new java.awt.Color(255, 210, 142));
        contractProducts.setSelectionForeground(new java.awt.Color(0, 0, 0));
        contractProducts.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        contractProducts.getTableHeader().setReorderingAllowed(false);
        this.initTableColumnWidthContractProducts();
        SwingUtil.setJTableHeaderRenderer(contractProducts, SystemInfo.getTableHeaderRenderer());
        contractProducts.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(contractProducts);
        contractProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contractProductsMouseClicked(evt);
            }
        });
        mobileMembersScrollPane.setViewportView(contractProducts);

        mobileMembersScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        contractHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "éÛìnì˙", "éÛìnêî", "íSìñé“", "èàóùì‡óe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        contractHistory.setSelectionBackground(new java.awt.Color(255, 210, 142));
        contractHistory.setSelectionForeground(new java.awt.Color(0, 0, 0));
        contractHistory.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        contractHistory.getTableHeader().setReorderingAllowed(false);
        this.initTableColumnWidthContractHistory();
        SwingUtil.setJTableHeaderRenderer(contractHistory, SystemInfo.getTableHeaderRenderer());
        contractHistory.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(contractHistory);
        contractHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contractHistoryMouseClicked(evt);
            }
        });
        mobileMembersScrollPane1.setViewportView(contractHistory);

        jLabel1.setText("  éÛìnóöó");

        jLabel2.setText("  å_ñÒè§ïi");

        jLabel3.setText("  å⁄ãqñº");

        customerName.setEditable(false);

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mobileMembersScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(mobileMembersScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mobileMembersScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mobileMembersScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        ((JDialog) this.getParent().getParent().getParent().getParent()).setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void contractProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contractProductsMouseClicked
        int index = contractProducts.getSelectedRow();
        if(index >= 0){
            ShowContractHistory(index);
        }
    }//GEN-LAST:event_contractProductsMouseClicked

    private void contractHistoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contractHistoryMouseClicked

    }//GEN-LAST:event_contractHistoryMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private com.geobeck.swing.JTableEx contractHistory;
    private com.geobeck.swing.JTableEx contractProducts;
    private javax.swing.JTextField customerName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane mobileMembersScrollPane;
    private javax.swing.JScrollPane mobileMembersScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void init(){
        StringBuilder cusName = new StringBuilder();
        cusName.append(this.customer.getCustomerName()[0].toString());
        cusName.append(" ");
        //IVS_LVTu start edit 2015/06/18 Bug #37653
        //cusName.append(this.customer.getCustomerName()[1].toString());
        cusName.append(this.customer.getCustomerName()[1] == null ? "" : this.customer.getCustomerName()[1].toString() );
        //IVS_LVTu end edit 2015/06/18 Bug #37653
        customerName.setText(cusName.toString());
        SwingUtil.clearTable(contractHistory);
        this.closeButton.requestFocusInWindow();
        try{
            ConnectionWrapper con = SystemInfo.getConnection();
            loadContractProducts(con);
            if(contractProducts.getRowCount()>0){
                ShowContractHistory(0);
            }
            con.close();
        }catch(Exception ex){
            SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
        }
    }
    
    private void loadContractProducts(ConnectionWrapper con){
        MstDataPickupProduct temp = new MstDataPickupProduct();
        DefaultTableModel model = (DefaultTableModel)contractProducts.getModel();
        if (contractProducts.getCellEditor() != null) {
            contractProducts.getCellEditor().stopCellEditing();
        }
        model.setRowCount(0);
        SwingUtil.clearTable(contractProducts);
        try{
           temp.setSlipNo(this.slipNo);
           //temp.setShop(SystemInfo.getCurrentShop());
            MstShop shop = new MstShop();
            shop.setShopID(shopID);
            shop.load(con);           
            temp.setShop(shop);
            listContractProducts = temp.load(con, this.customer.getCustomerID());
            if(listContractProducts != null){
                if(listContractProducts.size()>0){
                    model.setRowCount(0);
                    SwingUtil.clearTable(contractProducts);
                    for (MstDataPickupProduct dpp : listContractProducts) {
                        Object[] rowData = {
                                            getDate(dpp.getSalesDate()),
                                            dpp.getProductName(),
                                            dpp.getProductNum(),
                                            dpp.getPickupProductNum(),
                                            dpp.getProductNumUse(),
                                            dpp.getProductValue() * dpp.getProductNumUse(),
                                            getSearchButton()
                        };
                        model.addRow(rowData);
                    }
                    contractProducts.setCellSelectionEnabled(true);
                    contractProducts.changeSelection(0, 0, false, false);
                    contractProducts.requestFocus();
                }
            }
        }catch(Exception ex){
            SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
        }
    }
    
    private String getDate(java.util.Date date){
        DateFormat df = new SimpleDateFormat("yyyy/MM/dd");
        if(date != null){
            return df.format(date);
        }else{
            return "";
        }
    }
    
    private JButton getSearchButton(){
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                            "/images/" + SystemInfo.getSkinPackage() + "/button/product/return_item_off.jpg")));
         button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                            "/images/" + SystemInfo.getSkinPackage() + "/button/product/return_item_on.jpg")));
        button.setSize(48, 25);
        button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                showProductReturnDialog();
            }
        });

        return button;
    }
    
    private void showProductReturnDialog(){
        RegisterReturnedGoodsPanel hicpd = new RegisterReturnedGoodsPanel(this.customer.getCustomerID(), this.slipNo, this.shopID);
        SwingUtil.openAnchorDialog(null, true, hicpd, "Åyè§ïiï‘ïiâÊñ Åz", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);
        this.init();
        hicpd = null;
    }
     
    public void ShowContractHistory(int index){
        try{
            if(index < 0) return;
            mstContractProducts = listContractProducts.get(index);
            listContractHistory = mstContractProducts.loadDeliveryProducts(SystemInfo.getConnection());
            DefaultTableModel model = (DefaultTableModel)contractHistory.getModel();
            model.setRowCount(0);
            DateFormat df = new SimpleDateFormat("yyyy/MM/dd");
            String strStatus = "";
            String operationDate = "";
            for (MstDataPickupProduct dpp : listContractHistory) {
                operationDate = "";
                int status = dpp.getStatus();
                switch (status) {
                    case 0:
                        strStatus = "í èÌîÃîÑ";
                        break;
                    case 1:
                        strStatus = "ñ{ïîîzëóàÀóäíÜ";
                        break;
                    case 2:
                        strStatus = "ñ{ïîîzëóäÆóπ";
                        break;
                    case 91 :
                        strStatus = "ï‘ïi(èàï™Åj";
                        break;
                    case 92:
                        strStatus = "ï‘ïiÅiìXîÃópÅj";
                        break;
                    case 93:
                        strStatus = "ï‘ïiÅiã∆ñ±ópÅj";
                        break;
                    default :
                        strStatus = "í èÌîÃîÑ";
                        break;
                }
                if(dpp.getOperationDate() != null){
                    operationDate = df.format(dpp.getOperationDate());
                }
                Object[] rowData = {
                                    operationDate,
                                    dpp.getProductNum(),
                                    dpp.getStaff().toString(),
                                    strStatus
                };
                model.addRow(rowData);
            }
        }catch(Exception ex){
             SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
        }
        
    }
    
    /**
    * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
    */
    private void initTableColumnWidthContractHistory()
    {
        contractHistory.getColumnModel().getColumn(0).setPreferredWidth(100);
        contractHistory.getColumnModel().getColumn(1).setPreferredWidth(50);
        contractHistory.getColumnModel().getColumn(2).setPreferredWidth(80);
        contractHistory.getColumnModel().getColumn(3).setPreferredWidth(70);
    }
    
    /**
    * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
    */
    private void initTableColumnWidthContractProducts ()
    {
        //óÒÇÃïùÇê›íËÇ∑ÇÈÅB
        contractProducts .getColumnModel().getColumn(0).setPreferredWidth(100);
        contractProducts .getColumnModel().getColumn(1).setPreferredWidth(200);
        contractProducts .getColumnModel().getColumn(2).setPreferredWidth(40);
        contractProducts .getColumnModel().getColumn(3).setPreferredWidth(30);
        contractProducts .getColumnModel().getColumn(4).setPreferredWidth(40);
        contractProducts .getColumnModel().getColumn(5).setPreferredWidth(80);
        contractProducts .getColumnModel().getColumn(6).setPreferredWidth(50);
    }

    /*
     * å„énññ
     */
    public void dispose() {
        if (this.isDialog()) {
            ((JDialog) this.getParent().getParent().getParent().getParent()).dispose();
        }
    }
}
