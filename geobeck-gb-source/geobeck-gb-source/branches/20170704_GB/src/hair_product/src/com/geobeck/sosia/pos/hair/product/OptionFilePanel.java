/*
 * OptionFilePanel.java
 *
 * Created on 2014/07/28
 */
package com.geobeck.sosia.pos.hair.product;

import com.geobeck.sosia.pos.hair.data.product.DataSlipStore;
import com.geobeck.sosia.pos.hair.data.product.DataSlipStoreDetail;
import com.geobeck.sosia.pos.master.commodity.MstSupplier;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.product.MstItem;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import java.io.File;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import jxl.CellType;
import jxl.DateCell;
import jxl.Sheet;
import jxl.Workbook;

/**
 * 
 * @author lvtu
 */
public class OptionFilePanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    /**
     * shopId = null;
     */
    public Integer shopId = null;
    /**
     * slipNo = null;
     */
    public Integer slipNo = null;
    public List<Integer> arrShopId = new ArrayList<Integer>() ;
    private Integer supplierId = null;
    private Integer staffId = null;
    private Integer itemId = null;
    long price = 0;
    //IVS_LVTu start add 2014/08/27 Mashu_入庫管理フォーマット取り込み
    private static Pattern dateRegexPattern = Pattern.compile("^((19|20)\\d\\d)[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$");
    //IVS_LVTu end add 2014/08/27 Mashu_入庫管理フォーマット取り込み
    /**
     * called from button 納品書取込 class RegisterCheckInVoucherPanel.
     * Creates new form OptionFile
     * @author IVS_LVTu
     * @since 2014/07/29
     */
    public OptionFilePanel() {
        initComponents();
        this.setSize(420, 150);
        panelOptionFile.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelOptionFile = new javax.swing.JPanel();
        lblMessage1 = new javax.swing.JLabel();
        txtFileRefer = new javax.swing.JTextField();
        butFileRefer = new javax.swing.JButton();
        butCancel = new javax.swing.JButton();
        butInsert = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(470, 250));
        setMinimumSize(new java.awt.Dimension(0, 0));
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                formAncestorRemoved(evt);
            }
        });

        panelOptionFile.setPreferredSize(new java.awt.Dimension(350, 150));

        lblMessage1.setText("▼ファイルを指定してください");

        txtFileRefer.setText("ファイルパス");
        txtFileRefer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFileReferActionPerformed(evt);
            }
        });

        butFileRefer.setText("参照");
        butFileRefer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFileReferActionPerformed(evt);
            }
        });

        butCancel.setText("キャンセル");
        butCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCancelActionPerformed(evt);
            }
        });

        butInsert.setText("登録");
        butInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butInsertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelOptionFileLayout = new javax.swing.GroupLayout(panelOptionFile);
        panelOptionFile.setLayout(panelOptionFileLayout);
        panelOptionFileLayout.setHorizontalGroup(
            panelOptionFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOptionFileLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelOptionFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMessage1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelOptionFileLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(butInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(butCancel))
                    .addGroup(panelOptionFileLayout.createSequentialGroup()
                        .addComponent(txtFileRefer, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(butFileRefer, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        panelOptionFileLayout.setVerticalGroup(
            panelOptionFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOptionFileLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblMessage1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelOptionFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFileRefer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butFileRefer))
                .addGap(18, 18, 18)
                .addGroup(panelOptionFileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butInsert)
                    .addComponent(butCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelOptionFile, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelOptionFile, 128, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtFileReferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFileReferActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFileReferActionPerformed
    /**
     * Choose excel file to import.
     * @author IVS_LVTu
     * @since 2014/07/29
     */
    private void butFileReferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFileReferActionPerformed
        JFileChooser chooFile = new JFileChooser();
            chooFile.setDialogTitle("取り込みファイル選択");
            int choose = chooFile.showOpenDialog(null);
            if (choose == JFileChooser.APPROVE_OPTION) {               
                File file = chooFile.getSelectedFile();
                txtFileRefer.setText(file.getAbsolutePath());
            }
    }//GEN-LAST:event_butFileReferActionPerformed

    private void butCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCancelActionPerformed
        ((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
    }//GEN-LAST:event_butCancelActionPerformed

    private void butInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butInsertActionPerformed

        insertDataSlipStore();
    }//GEN-LAST:event_butInsertActionPerformed

    /**
     * insert data table data_slip_store and data_slip_store_detail.
     * @author IVS_LVTu
     * @since 2014/07/29
     */
    public void insertDataSlipStore()
    {
        try
        {
            String strFile = txtFileRefer.getText().trim();
            File inputWorkbook = new File(strFile);
            Workbook wb = Workbook.getWorkbook(inputWorkbook);
            Sheet sheet = wb.getSheet(0);
            int count = 0;
            try																											
            {       
                ConnectionWrapper con = SystemInfo.getConnection();																								
                try																								
                {																								
                    con.begin();																							
                    
                    DataSlipStore dss = new DataSlipStore();																						
                    this.shopId = Integer.parseInt(sheet.getCell(2, 2).getContents());
                    dss.setShopId(this.shopId);	
                    
                    if (isExists(1, "", con) == false)
                    {
                        throw new Exception();
                    }
                    //伝票NOを生成する																						
                    dss.setNewSlipNo(con);																						
                    //==================																						
                    //詳細内容を設置する																						
                    //==================																						
                    //仕入先																						
                    dss.setSupplierId(Integer.parseInt(sheet.getCell(2, 5).getContents()));
                    this.supplierId = dss.getSupplierId();
                    if (isExists(2, "", con) == false)
                    {
                        throw new Exception();
                    }
                    // 入庫日	
                    //IVS_LVTu start edit 2014/08/27 Mashu_入庫管理フォーマット取り込み
                    SimpleDateFormat ft = new SimpleDateFormat("yyyy/MM/dd");
                    DateCell dc = (DateCell) sheet.getCell(6, 2); 
                     String str = ft.format(dc.getDate());
                    Matcher dateMatcher = dateRegexPattern.matcher(str);
                    if (!dateMatcher.matches()) 
                    {
                        throw new Exception();
                    }
                    if (sheet.getCell(6, 2).getType() == CellType.DATE) 
                    { 
                      //DateCell dc = (DateCell) sheet.getCell(6, 2); 
                      dss.setStoreDate(dc.getDate()); 
                    } 
                    //IVS_LVTu end edit 2014/08/27 Mashu_入庫管理フォーマット取り込み
                    else
                    {
                        throw new Exception();
                    }
                    // 担当者																						
                    String staffNo = sheet.getCell(4, 2).getContents().trim();
                    this.slipNo = dss.getSlipNo();
                    if (isExists(3, staffNo, con) == false)
                    {
                        throw new Exception();
                    }              
                    dss.setStaffId(staffId);
                    // 値引き																						
                    dss.setDiscount(0);																						
                    //挿入する																						
                    dss.insert(con);																						

                    //登録の前に伝票詳細情報があれば伝票詳細情報を削除する																							
                    DataSlipStoreDetail.physicalDelete(con, dss.getShopId(), dss.getSlipNo());																							
                    
                    for (int i = 10 ; i < (sheet.getRows()); i++)																							
                    {																							
                        //EXCELの明細部に入庫数（店販用）と入庫数（業務用）は両方にも数字がある場合、																						
                        //伝票詳細情報に2行データを追加																						
                        DataSlipStoreDetail dssd = new DataSlipStoreDetail();																						
                        dssd.setShopId(dss.getShopId());																						
                        dssd.setSlipNo(dss.getSlipNo());	
                        if ( sheet.getCell(1, i).getContents().equals(""))
                        {
                            break;
                        }
                        String itemNo = sheet.getCell(1, i).getContents().trim();
                        Integer costPrice = 0;
                        if (isExists(4, itemNo, con) == false)
                        {
                            throw new Exception();
                        }
                        dssd.setItemId(itemId);
                        // 仕入価格																						
                        costPrice = sheet.getCell(6, i).getContents().trim().equals("") ? (int)this.price : Integer.parseInt(sheet.getCell(6, i).getContents());																				
                        if (costPrice < 0)
                        {
                            throw new Exception();
                        }
                        dssd.setCostPrice(costPrice);																						
                        //店販データ登録のため設定																						
                        //入庫数、添付数																						
                        Integer inNum = sheet.getCell(3, i).getContents().trim().equals("") ? 0 : Integer.parseInt(sheet.getCell(3, i).getContents());																																									
                        dssd.setInNum(inNum);																						
                        Integer attNum = 0;	
                        if (inNum < 0)
                        {
                            throw new Exception();
                        }
                        dssd.setAttachNum(attNum);
                        //入庫区分　暫くのこと																						
                        dssd.setInClass(0);																						
                        // 店販区分																						
                        dssd.setItemUseDivision(1);																						

                        //入庫数（店販用）はデータがある場合、明細登録、データない場合はスキップ																						
                        if (inNum != 0 )																						
                        {																						
                                //新規明細No																					
                                dssd.setNewSlipDetailNo(con);																					
                                //DB登録																					
                                dssd.insert(con);	
                                count ++;

                        }																						

                        //業務用データ登録のため設定																						
                        //入庫数																						
                        inNum = sheet.getCell(4, i).getContents().trim().equals("") ? 0 : Integer.parseInt(sheet.getCell(4, i).getContents());																																										
                        dssd.setInNum(inNum);	
                        if (inNum < 0)
                        {
                            throw new Exception();
                        }
                        // 業務区分																						
                        dssd.setItemUseDivision(2);																						

                        //入庫数（業務用）はデータがある場合、明細登録、ない場合はスキップ																						
                        if (inNum != 0 )																						
                        {																						
                                //新規明細No																					
                                dssd.setNewSlipDetailNo(con);																					
                                //DB登録																					
                                dssd.insert(con);																					
                                count ++;
                        }																						
                        itemId = null;
                        price = 0;
                    }																							
                    if (count == 0)
                    {
                        throw new Exception();
                    }
                    con.commit();																							

                    //ファイル参照ウィンドウを閉じる																							
                    //dssの変数はE0002に戻る																							
                }																										
                    catch (Exception e)																								
                {				
                     this.shopId = null;
                     this.slipNo = null;
                     this.supplierId = null;
                     this.staffId = null;
                    //アラートPOP画面を表示する																						
                    con.rollback();	
                    MessageDialog.showMessageDialog(this,
                                            "データの取り込みに失敗しました。\n"
                                          + "以下のエラー箇所の内容をご確認いただけますか。\n"
                                          + "\n"
                                          + "※【入庫店舗ID】登録されていないIDが記載されています。\n"
                                          + "※【入庫担当NO】登録されていないNOが記載されています。\n"
                                          //IVS_LVTu start edit 2014/08/27 Mashu_入庫管理フォーマット取り込み
                                          //+ "※【入庫日】yyyy/mm/ddもしくはyyyy年mm月dd日の形式で入力してください。\n"
                                          + "※【入庫日】yyyy/mm/ddの形式で入力してください。\n"
                                          //IVS_LVTu end edit 2014/08/27 Mashu_入庫管理フォーマット取り込み
                                          + "※【仕入先ID】登録されていないIDが記載されています。\n"
                                          + "※【商品NO】登録されていないNOが記載されています。\n"
                                          + "※【入庫数（店販用）】もしくは【入庫数（業務用）】に数量を入力してください。",
                                            "▼入庫インポートエラー",
                                            JOptionPane.OK_OPTION);
                    initPanel();
                    return;
                }																							
                finally																							
                {																							
                    con.close();																						
                }	
            }
            catch (RuntimeException ex)																								
            {																								
                    SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
                    throw ex;																							
            }	
            catch (SQLException ex)																								
            {																								
                SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
         
                return;
            }
        }
        catch (Exception ex)
        {
            this.shopId = null;
            this.slipNo = null;
            this.supplierId = null;
            this.staffId = null;
            MessageDialog.showMessageDialog(this,
                                            "参照ファイルが不正です。ファイルを再確認の上、再度取り込みください。",
                                            this.getTitle(),
                                            JOptionPane.ERROR_MESSAGE);
            initPanel();
        }
        ((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
    }
    // check exists data.
    public boolean isExists(int flag, String valueNo ,ConnectionWrapper con)
    {
        try
        {
            switch (flag)
            {
                case 1:
                    // check shopId exists.
                    for ( int i = 0;i < this.arrShopId.size();i ++)
                    {
                        if (this.shopId == this.arrShopId.get(i))
                        {
                            return true;
                        }
                    }
                    break;
                case 2:
                    // check supplierId.
                    MstSupplier ms = new MstSupplier();
                    ms.setSupplierID(supplierId);
                    if (ms.isExists(con))
                    {
                        return true;
                    }
                    break;
                case 3:
                    // check StaffId.
                    MstStaff msf = new MstStaff();
                    msf.setStaffNo(valueNo);
                    msf.setShopID(this.shopId);
                    if (msf.isExistsByStaffNoByShopID(con))
                    {
                        staffId = msf.getStaffID();
                        return true;
                    }
                    break;
                case 4:
                    // check ItemId.
                    MstItem mi = new MstItem();
                    mi.setItemNo(valueNo);
                    if (mi.isExistsByItemNo(con, supplierId))
                    {
                        price = mi.getPrice();
                        itemId = mi.getItemID();
                        return true;
                    }
                    break;
                default:
                    return false;
            }
        }
        catch(SQLException ex)
        {
            SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
        }
        return false;
    }
    /**
     * @author IVS_LVTu
     * @since 2014/07/29
     */
    public void initPanel()
    {
        ((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
        this.setSize(420, 150);
        panelOptionFile.setVisible(true);
        SwingUtil.openAnchorDialog( null, true, this, "▼ファイル選択画面", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
        
    }
    
    private void formAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_formAncestorRemoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCancel;
    private javax.swing.JButton butFileRefer;
    private javax.swing.JButton butInsert;
    private javax.swing.JLabel lblMessage1;
    private javax.swing.JPanel panelOptionFile;
    private javax.swing.JTextField txtFileRefer;
    // End of variables declaration//GEN-END:variables
}
