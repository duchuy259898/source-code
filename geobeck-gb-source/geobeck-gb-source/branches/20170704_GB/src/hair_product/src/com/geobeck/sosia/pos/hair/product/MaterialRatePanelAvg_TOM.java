/*
 * PrintInventoryPanel.java
 *
 * Created on 2008/09/10, 14:14
 */

package com.geobeck.sosia.pos.hair.product;

import com.geobeck.sosia.pos.hair.product.logic.MaterialRateAvgLogic_TOM;
import com.geobeck.sosia.pos.hair.report.logic.ReportGeneratorLogic;
import java.awt.*;
import javax.swing.*;
import java.sql.*;
import java.util.*;

import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.swing.*;
import com.geobeck.sql.*;
import com.geobeck.sosia.pos.util.*;

/**
 *
 * @author  s_matsumura
 */
public class MaterialRatePanelAvg_TOM extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private	GregorianCalendar		currentDate		=	new GregorianCalendar();	/** 日付 */
	
	private PrintInventry	ia	=	new PrintInventry();
	private InventryPeriod	ib	=	new InventryPeriod();

	private	LocalFocusTraversalPolicy	ftp;

	/** Creates new form PrintInventoryPanel */
	public MaterialRatePanelAvg_TOM ()
	{
		super();
		initComponents();
		addMouseCursorChange();
		this.setSize(500, 170);
		this.setPath("帳票");
		this.setTitle("平均材料比率(TOM)");

		this.setKeyListener();
		//this.setListener();
		this.init();

        ftp	= new LocalFocusTraversalPolicy();
        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        btnOutputPdf = new javax.swing.JButton();
        lblAnnual = new javax.swing.JLabel();
        cboAnnual = new javax.swing.JComboBox();
        btnOutputExcel = new javax.swing.JButton();

        btnOutputPdf.setIcon(SystemInfo.getImageIcon("/button/print/output_pdf_off.jpg"));
        btnOutputPdf.setBorderPainted(false);
        btnOutputPdf.setContentAreaFilled(false);
        btnOutputPdf.setPressedIcon(SystemInfo.getImageIcon("/button/print/output_pdf_on.jpg"));
        btnOutputPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputPdfActionPerformed(evt);
            }
        });

        lblAnnual.setText("年次集計");

        cboAnnual.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setContentAreaFilled(false);
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAnnual)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboAnnual, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btnOutputPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOutputExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(198, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnOutputPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnOutputExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblAnnual, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboAnnual, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(262, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputExcelActionPerformed

        btnOutputExcel.setCursor(null);

        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            generateReport(ReportGeneratorLogic.EXPORT_FILE_XLS);

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        
    }//GEN-LAST:event_btnOutputExcelActionPerformed
		
	private void btnOutputPdfActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutputPdfActionPerformed
	{//GEN-HEADEREND:event_btnOutputPdfActionPerformed

            btnOutputPdf.setCursor(null);

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                generateReport(ReportGeneratorLogic.EXPORT_FILE_PDF);		

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
            
	}//GEN-LAST:event_btnOutputPdfActionPerformed
	
	
        private void generateReport(int fileType) {
            String year = ((String)cboAnnual.getSelectedItem()).substring(0, 4);
            
            MaterialRateAvgLogic_TOM logic = new MaterialRateAvgLogic_TOM(year);
            int result = logic.viewMaterialRateReport(fileType);

            if(result == logic.RESULT_SUCCESS ){
                // 成功
            }else if(result == logic.RESULT_DATA_NOTHNIG ){
                // データなし
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                
            }else if(result == logic.RESULT_ERROR ){
                // 予期せぬエラー
                MessageDialog.showMessageDialog( this,
                        MessageUtil.getMessage(1099),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE );
            }
            
        }	
        
	//初期化
	private void init()
	{
            cboAnnual.removeAllItems();
            for(String year : getYears()){
                cboAnnual.addItem(year + "年度");
            }
	}

        private ArrayList<String> getYears() {
            ArrayList<String> years = new ArrayList();
            ConnectionWrapper con = SystemInfo.getConnection();
            try {
                ResultSetWrapper result = con.executeQuery( getYearSql() );
                
                while( result.next() ) {
                    years.add( result.getString( "year" ));
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            return years;
        }
        
        private String getYearSql(){

            StringBuilder sql = new StringBuilder(1000);

            sql.append(" select distinct");
            sql.append("     to_char(ds.ship_date, 'yyyy') as year");
            sql.append(" from");
            sql.append("     data_slip_ship ds");
            sql.append("         join data_slip_ship_detail dsd");
            sql.append("         using(shop_id, slip_no)");
            sql.append(" where");
            sql.append("         ds.delete_date is null");
            sql.append("     and dsd.delete_date is null");
            sql.append("     and dsd.out_class = 1");
            sql.append(" order by");
            sql.append("     year desc");

            return sql.toString();
        }
	
		
	/**
	 * ボタンのマウスカーソルを変更する
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(btnOutputPdf);
		SystemInfo.addMouseCursorChange(btnOutputExcel);
	}
	
	private void setKeyListener()
	{
		cboAnnual.addKeyListener(SystemInfo.getMoveNextField());
		cboAnnual.addFocusListener(SystemInfo.getSelectText());

	}
	

    private class LocalFocusTraversalPolicy
                    extends FocusTraversalPolicy
    {
        ArrayList<Component> controls = new ArrayList<Component>();
        public LocalFocusTraversalPolicy()
        {
            controls.add(cboAnnual);
            controls.add(btnOutputPdf);

            // 最後に先頭を再度登録(同時にEnabledがFalseにならないところまで重複登録)
            controls.add(cboAnnual);
        }

        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。
         */
        public Component getComponentAfter(Container aContainer,
                                           Component aComponent)
        {
			
            boolean find = false;
            for(Component co : controls){
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。
         */
        public Component getComponentBefore(Container aContainer,
                                            Component aComponent)
        {
            boolean find = false;
            for( int ii = controls.size(); ii>0; ii-- ){
                Component co = controls.get(ii-1);
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。
         */
        public Component getFirstComponent(Container aContainer)
        {
            return getDefaultComponent(aContainer);
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。
         */
        public Component getLastComponent(Container aContainer)
        {
            return getComponentBefore(aContainer, controls.get(0));
        }
        
        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。
         */
        public Component getDefaultComponent(Container aContainer)
        {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
        
        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
         */
        public Component getInitialComponent(Window window)
        {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
    }

	public LocalFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JButton btnOutputPdf;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cboAnnual;
    private javax.swing.JLabel lblAnnual;
    // End of variables declaration//GEN-END:variables
	
}
