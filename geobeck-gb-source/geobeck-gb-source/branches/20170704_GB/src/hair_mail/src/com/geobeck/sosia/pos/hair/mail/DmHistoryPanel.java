/*
 * DmHistoryPanel.java
 *
 * Created on 2006/11/06, 9:26
 */

package com.geobeck.sosia.pos.hair.mail;

import java.util.*;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.util.logging.*;

import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.mail.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.master.customer.*;
import com.geobeck.sosia.pos.hair.customer.*;
import com.geobeck.sosia.pos.hair.data.mail.*;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.hair.master.product.MstFreeHeadingClass;
import com.geobeck.sosia.pos.hair.master.product.MstFreeHeadingClasses;
    
/**
 *
 * @author  katagiri
 */
public class DmHistoryPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	public	final	int	SEND_TYPE_E_MAIL		=	0;
	public	final	int	SEND_TYPE_DIRECT_MAIL           =	1;
	public	final	int	SEND_TYPE_WILD_MAIL		=	2;
	public	final	int	SEND_TYPE_SOSIA_MAIL		=	3;
        public	final	int	SEND_TYPE_EXCEL                 =	4;
    
	public DmHistoryPanel()
	{
            super();
            initComponents();
            addMouseCursorChange();
            this.setSize(830, 680);
	    this.setPath("来店促進");
	    this.setTitle("DM作成履歴");
            
            isLoading = true;
            SystemInfo.initGroupShopComponents(target, 3);
            init();
            
            // EXCEL出力ボタン表示設定
            this.btnOutputExcel.setVisible(SystemInfo.checkAuthority(56));
            // メール作成ボタン表示設定
            this.mailButton.setVisible(SystemInfo.checkAuthority(53));
            // 宛名ラベル作成ボタン表示設定
            this.sealButton.setVisible(SystemInfo.checkAuthority(55));
            // ハガキ作成ボタン表示設定
            this.postcardButton.setVisible(SystemInfo.checkAuthority(54));
            
            isLoading = false;
            
            showData();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customersScrollPane = new javax.swing.JScrollPane();
        customersTable = new com.geobeck.swing.JTableEx();
        btnPanel = new javax.swing.JPanel();
        postcardButton = new javax.swing.JButton();
        sealButton = new javax.swing.JButton();
        mailButton = new javax.swing.JButton();
        btnOutputExcel = new javax.swing.JButton();
        selectAllButton = new javax.swing.JButton();
        releaseAllButton = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        previewPanel = new javax.swing.JPanel();
        mailTitleLabel = new javax.swing.JLabel();
        mailBodyLabel = new javax.swing.JLabel();
        mailBodyScrollPane = new javax.swing.JScrollPane();
        mailBody = new javax.swing.JTextArea();
        mailTitleScrollPane = new javax.swing.JScrollPane();
        mailTitle = new javax.swing.JTextArea();
        dmType = new javax.swing.JTabbedPane();
        mailPanel = new javax.swing.JPanel();
        mailScrollPane = new javax.swing.JScrollPane();
        mail = new com.geobeck.swing.JTableEx();
        labelPanel = new javax.swing.JPanel();
        labelScrollPane = new javax.swing.JScrollPane();
        label = new com.geobeck.swing.JTableEx();
        postCardPanel = new javax.swing.JPanel();
        postCardScrollPane = new javax.swing.JScrollPane();
        postCard = new com.geobeck.swing.JTableEx();
        targetLabel = new javax.swing.JLabel();
        target = new com.geobeck.sosia.pos.swing.JComboBoxLabel();

        setFocusCycleRoot(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(null);

        customersScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "顧客情報", "氏名", "メールアドレス", "<html>送信<br>対象</html> "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.getTableHeader().setReorderingAllowed(false);
        customersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        SwingUtil.setJTableHeaderRenderer(customersTable, SystemInfo.getTableHeaderRenderer());
        customersTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        customersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                customersTableMouseReleased(evt);
            }
        });
        customersTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customersTableKeyReleased(evt);
            }
        });
        customersScrollPane.setViewportView(customersTable);

        add(customersScrollPane);
        customersScrollPane.setBounds(470, 80, 340, 590);

        btnPanel.setOpaque(false);
        btnPanel.setLayout(null);

        postcardButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_off.jpg"));
        postcardButton.setActionCommand("ハガキ印刷");
        postcardButton.setBorderPainted(false);
        postcardButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_on.jpg"));
        postcardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postcardButtonActionPerformed(evt);
            }
        });
        btnPanel.add(postcardButton);
        postcardButton.setBounds(310, 0, 92, 25);

        sealButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_seal_off.jpg"));
        sealButton.setBorderPainted(false);
        sealButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_seal_on.jpg"));
        sealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sealButtonActionPerformed(evt);
            }
        });
        btnPanel.add(sealButton);
        sealButton.setBounds(210, 0, 92, 25);

        mailButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_mail_off.jpg"));
        mailButton.setBorderPainted(false);
        mailButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_mail_on.jpg"));
        mailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailButtonActionPerformed(evt);
            }
        });
        btnPanel.add(mailButton);
        mailButton.setBounds(110, 0, 92, 25);

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setFocusCycleRoot(true);
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputExcelActionPerformed(evt);
            }
        });
        btnPanel.add(btnOutputExcel);
        btnOutputExcel.setBounds(10, 0, 92, 25);

        selectAllButton.setIcon(SystemInfo.getImageIcon("/button/select/select_all_off.jpg"));
        selectAllButton.setBorderPainted(false);
        selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_all_on.jpg"));
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });
        btnPanel.add(selectAllButton);
        selectAllButton.setBounds(210, 30, 92, 25);

        releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/select/release_all_off.jpg"));
        releaseAllButton.setBorderPainted(false);
        releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/release_all_on.jpg"));
        releaseAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseAllButtonActionPerformed(evt);
            }
        });
        btnPanel.add(releaseAllButton);
        releaseAllButton.setBounds(310, 30, 92, 25);

        add(btnPanel);
        btnPanel.setBounds(410, 10, 410, 60);

        jLabel21.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 12));
        jLabel21.setForeground(java.awt.Color.red);
        jLabel21.setText("※各履歴は過去１年間のみ表示されます。");
        add(jLabel21);
        jLabel21.setBounds(220, 330, 228, 20);

        previewPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        previewPanel.setOpaque(false);

        mailTitleLabel.setText("タイトル");

        mailBodyLabel.setText("本文");

        mailBodyScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        mailBody.setColumns(20);
        mailBody.setEditable(false);
        mailBody.setRows(5);
        mailBodyScrollPane.setViewportView(mailBody);

        mailTitleScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        mailTitleScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        mailTitleScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        mailTitle.setColumns(20);
        mailTitle.setEditable(false);
        mailTitle.setRows(5);
        mailTitleScrollPane.setViewportView(mailTitle);

        org.jdesktop.layout.GroupLayout previewPanelLayout = new org.jdesktop.layout.GroupLayout(previewPanel);
        previewPanel.setLayout(previewPanelLayout);
        previewPanelLayout.setHorizontalGroup(
            previewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(previewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(previewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mailBodyScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                    .add(mailTitleLabel)
                    .add(mailBodyLabel)
                    .add(mailTitleScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))
                .addContainerGap())
        );
        previewPanelLayout.setVerticalGroup(
            previewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(previewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mailTitleLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mailTitleScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mailBodyLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mailBodyScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(previewPanel);
        previewPanel.setBounds(20, 360, 430, 310);

        dmType.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dmTypeStateChanged(evt);
            }
        });

        mailPanel.setOpaque(false);
        mailPanel.setLayout(null);

        mailScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        mail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "作成日", "タイトル", "<html>対象<br>人数</html>", "削除"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mail.setSelectionBackground(new java.awt.Color(255, 210, 142));
        mail.setSelectionForeground(new java.awt.Color(0, 0, 0));
        mail.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        mail.getTableHeader().setReorderingAllowed(false);
        mail.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SwingUtil.setJTableHeaderRenderer(mail, SystemInfo.getTableHeaderRenderer());
        SelectTableCellRenderer.setSelectTableCellRenderer(mail);
        mail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mailMouseReleased(evt);
            }
        });
        mail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                mailKeyReleased(evt);
            }
        });
        mailScrollPane.setViewportView(mail);

        mailPanel.add(mailScrollPane);
        mailScrollPane.setBounds(0, 10, 420, 230);

        dmType.addTab("　　メール　　", mailPanel);

        labelPanel.setOpaque(false);
        labelPanel.setLayout(null);

        labelScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        label.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "作成日", "タイトル", "<html>対象<br>人数</html>", "削除"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        label.setSelectionBackground(new java.awt.Color(255, 210, 142));
        label.setSelectionForeground(new java.awt.Color(0, 0, 0));
        label.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        label.getTableHeader().setReorderingAllowed(false);
        label.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SwingUtil.setJTableHeaderRenderer(label, SystemInfo.getTableHeaderRenderer());
        SelectTableCellRenderer.setSelectTableCellRenderer(label);
        label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelMouseReleased(evt);
            }
        });
        label.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                labelKeyReleased(evt);
            }
        });
        labelScrollPane.setViewportView(label);

        labelPanel.add(labelScrollPane);
        labelScrollPane.setBounds(0, 10, 420, 230);

        dmType.addTab(" 宛名ラベル ", labelPanel);

        postCardPanel.setOpaque(false);
        postCardPanel.setLayout(null);

        postCardScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        postCard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "作成日", "タイトル", "<html>対象<br>人数</html>", "削除"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        postCard.setSelectionBackground(new java.awt.Color(255, 210, 142));
        postCard.setSelectionForeground(new java.awt.Color(0, 0, 0));
        postCard.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        postCard.getTableHeader().setReorderingAllowed(false);
        postCard.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SwingUtil.setJTableHeaderRenderer(postCard, SystemInfo.getTableHeaderRenderer());
        SelectTableCellRenderer.setSelectTableCellRenderer(postCard);
        postCard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                postCardMouseReleased(evt);
            }
        });
        postCard.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                postCardKeyReleased(evt);
            }
        });
        postCardScrollPane.setViewportView(postCard);

        postCardPanel.add(postCardScrollPane);
        postCardScrollPane.setBounds(0, 10, 420, 230);

        dmType.addTab("　　ハガキ　　", postCardPanel);

        add(dmType);
        dmType.setBounds(20, 60, 430, 270);

        targetLabel.setText("対象店舗");
        add(targetLabel);
        targetLabel.setBounds(20, 20, 50, 20);

        target.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetActionPerformed(evt);
            }
        });
        add(target);
        target.setBounds(80, 20, 180, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

        showData();

    }//GEN-LAST:event_formComponentShown

    private void dmTypeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dmTypeStateChanged
        SwingUtil.clearTable(customersTable);
        setButtonEnabled(false);
        mailTitle.setText("");
        mailBody.setText("");
        JTable table = getCurrentTable();
        table.changeSelection(table.getSelectedRow(), table.getSelectedColumn(), true, false);
    }//GEN-LAST:event_dmTypeStateChanged

    private void postCardMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_postCardMouseReleased
        showCustomersTable(postCard);
    }//GEN-LAST:event_postCardMouseReleased

    private void postCardKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_postCardKeyReleased
        showCustomersTable(postCard);
    }//GEN-LAST:event_postCardKeyReleased

    private void labelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMouseReleased
        showCustomersTable(label);
    }//GEN-LAST:event_labelMouseReleased

    private void labelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_labelKeyReleased
        showCustomersTable(label);
    }//GEN-LAST:event_labelKeyReleased

    private void mailMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mailMouseReleased
        showCustomersTable(mail);
    }//GEN-LAST:event_mailMouseReleased

    private void mailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mailKeyReleased
        showCustomersTable(mail);
    }//GEN-LAST:event_mailKeyReleased

    private void targetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetActionPerformed

        showData();

    }//GEN-LAST:event_targetActionPerformed

    private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseAllButtonActionPerformed
        this.changeSelect(false);
    }//GEN-LAST:event_releaseAllButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        this.changeSelect(true);
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void changeSelect(boolean select){
        DefaultTableModel	model	=	(DefaultTableModel)customersTable.getModel();
        for(int i = 0; i < model.getRowCount(); i++){
            Vector row = (Vector)model.getDataVector().get(i);
            if(row.get(3) != null){
                row.add(3, select);
            }
        }
    }
    
    private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputExcelActionPerformed

        ArrayList<MstCustomer> targetList = getTargetList();
        if (targetList.size() == 0) return;
        
        StringBuilder customerIdList = new StringBuilder(1000);
        Iterator iter = targetList.iterator();
        while (iter.hasNext()) {
            customerIdList.append(",");
            customerIdList.append(((MstCustomer)iter.next()).getCustomerID());
        }

        HairMailSearchPanel p = new HairMailSearchPanel();
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select *");
        sql.append(" from (" + p.sqlBuild(SEND_TYPE_EXCEL, getShopIdList(), true, OutputExcelDialog.OUTPUT_CUSTOMER) + ") t");
        sql.append(" where");
        sql.append("     customer_id in (" + customerIdList.substring(1).toString() + ")");
        
        ArrayList<SearchResultInfo> cusArray = new ArrayList<SearchResultInfo>();
        ConnectionWrapper con = SystemInfo.getConnection();        
        
        try {
            ResultSetWrapper rs = con.executeQuery(sql.toString());

            while(rs.next()) {
                SearchResultInfo result = new SearchResultInfo();
                result.setData(rs, con);
                cusArray.add(result);
            }
            
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        JExcelApi jx = new JExcelApi("条件検索_顧客情報");
        jx.setTemplateFile("/reports/条件検索_顧客情報.xls");

        // ヘッダ
        MstFreeHeadingClasses freeHeading = new MstFreeHeadingClasses();
        freeHeading.load();
        int tmp = 0;
        for(int j = 0; j < 4; j++){
            try {
                MstFreeHeadingClass mfhc = freeHeading.get(j);
                if( mfhc.getUseFlg()){
                    jx.setValue(30 + j, 1, mfhc.getFreeHeadingClassName());
                }
            } catch(ArrayIndexOutOfBoundsException e){
                // ４つ以下のときは強制的に終了
                break;
            }
        }
        
        int row = 2;

        // 追加行数セット
        jx.insertRow(row, targetList.size() - 1);

        // データセット
        iter = cusArray.iterator();
        while (iter.hasNext()) {
            SearchResultInfo info = (SearchResultInfo)iter.next();
            jx.setValue(1, row, info.getLastShopName());
            jx.setValue(2, row, info.getCustomerNo());
            jx.setValue(3, row, info.getFullCustomerName());
            jx.setValue(4, row, info.getFullCustomerKana());
            jx.setValue(5, row, info.getSexString());
            jx.setValue(6, row, info.getBirthdayString());
            jx.setValue(7, row, info.getAge());
            jx.setValue(8, row, info.getPostalCode());
            jx.setValue(9, row, info.getAddress1());
            jx.setValue(10, row, info.getAddress2());
            jx.setValue(11, row, info.getAddress3());
            jx.setValue(12, row, info.getAddress4());
            jx.setValue(13, row, info.getPhoneNumber());
            jx.setValue(14, row, info.getCellularNumber());
            jx.setValue(15, row, info.getFaxNumber());
            jx.setValue(16, row, info.getPcMailAddress());
            jx.setValue(17, row, info.getCellularMailAddress());
            jx.setValue(18, row, info.getJobName());
            jx.setValue(19, row, info.getVisitCount());
            jx.setValue(20, row, info.getSumTotal());
            jx.setValue(21, row, info.getLastVisitDate());
            jx.setValue(22, row, info.getLastStaffName());
            jx.setValue(23, row, info.getFree());
            jx.setValue(24, row, info.getIntroducerNo());
            jx.setValue(25, row, info.getIntroducerName());
            jx.setValue(26, row, info.getIntroduceNo());
            jx.setValue(27, row, info.getIntroduceName());
            jx.setValue(28, row, info.getFirstComingMotiveName());
            jx.setValue(29, row, info.getFirstComingMotiveNote());
            jx.setValue(30, row, info.getFree1());
            jx.setValue(31, row, info.getFree2());
            jx.setValue(32, row, info.getFree3());
            jx.setValue(33, row, info.getFree4());
            jx.setValue(34, row, info.getNote());

            row++;
        }

        jx.openWorkbook();
        
    }//GEN-LAST:event_btnOutputExcelActionPerformed

    private void mailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailButtonActionPerformed

        ArrayList<MstCustomer> targetList = getTargetList();
        if (targetList.size() > 0) {
            
            boolean isSetMailInfo = false;
            
            if (dmType.getSelectedIndex() == 0) {

                int ret = MessageDialog.showYesNoDialog(
                            this,
                            "メール内容を引き継ぎますか？",
                            this.getTitle(),
                            JOptionPane.QUESTION_MESSAGE,
                            JOptionPane.NO_OPTION);

                if (ret == JOptionPane.YES_OPTION) {
                    isSetMailInfo = true;
                }
            }

            HairCommonMailPanel rcmp = null;
            
            if (isSetMailInfo) {
                Map map = new HashMap();
                for (int i = 0; i < dmArray.size(); i++) {
                    if ((Boolean)customersTable.getValueAt(i, 3)) {
                        map.put(dmArray.get(i).getCustomerID(), dmArray.get(i));
                    }
                }

                rcmp = new HairCommonMailPanel(target.getSelectedItem(), targetList, map);

            } else {

                rcmp = new HairCommonMailPanel(target.getSelectedItem(), targetList);

            }
            
            rcmp.setOpener(this);
            this.setVisible(false);
            parentFrame.changeContents(rcmp);
        }
        
    }//GEN-LAST:event_mailButtonActionPerformed

    private void sealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sealButtonActionPerformed

        ArrayList<MstCustomer> targetList = getTargetList();
        if (targetList.size() > 0) {
            PrintLabelPanel plp = new PrintLabelPanel(target.getSelectedItem(), targetList);
            plp.setOpener(this);
            this.setVisible(false);
            parentFrame.changeContents(plp);
        }

    }//GEN-LAST:event_sealButtonActionPerformed

    private void postcardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postcardButtonActionPerformed

        ArrayList<MstCustomer> targetList = getTargetList();
        if (targetList.size() > 0) {
            PrintPostcardPanel ppp = new PrintPostcardPanel(target.getSelectedItem(), targetList);
            ppp.setOpener(this);
            this.setVisible(false);
            parentFrame.changeContents(ppp);
        }

    }//GEN-LAST:event_postcardButtonActionPerformed

    private ArrayList<MstCustomer> getTargetList() {

        ArrayList<MstCustomer> list = new ArrayList<MstCustomer>();
        for (int i = 0; i < dmArray.size(); i++) {
            if ((Boolean)customersTable.getValueAt(i, 3)) {
                list.add(dmArray.get(i));
            }
        }

        if (list.size() == 0) {
            MessageDialog.showMessageDialog(this, "対象顧客を選択してください。", this.getTitle(), JOptionPane.ERROR_MESSAGE);
        }

        return list;
    }
    
	private void customersTableMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_customersTableMouseReleased
	{//GEN-HEADEREND:event_customersTableMouseReleased
	    this.changeSelectedCustomer();
	}//GEN-LAST:event_customersTableMouseReleased

	private void customersTableKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_customersTableKeyReleased
	{//GEN-HEADEREND:event_customersTableKeyReleased
	    this.changeSelectedCustomer();
	}//GEN-LAST:event_customersTableKeyReleased
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JPanel btnPanel;
    private javax.swing.JScrollPane customersScrollPane;
    private com.geobeck.swing.JTableEx customersTable;
    private javax.swing.JTabbedPane dmType;
    private javax.swing.JLabel jLabel21;
    private com.geobeck.swing.JTableEx label;
    private javax.swing.JPanel labelPanel;
    private javax.swing.JScrollPane labelScrollPane;
    private com.geobeck.swing.JTableEx mail;
    private javax.swing.JTextArea mailBody;
    private javax.swing.JLabel mailBodyLabel;
    private javax.swing.JScrollPane mailBodyScrollPane;
    private javax.swing.JButton mailButton;
    private javax.swing.JPanel mailPanel;
    private javax.swing.JScrollPane mailScrollPane;
    private javax.swing.JTextArea mailTitle;
    private javax.swing.JLabel mailTitleLabel;
    private javax.swing.JScrollPane mailTitleScrollPane;
    private com.geobeck.swing.JTableEx postCard;
    private javax.swing.JPanel postCardPanel;
    private javax.swing.JScrollPane postCardScrollPane;
    private javax.swing.JButton postcardButton;
    private javax.swing.JPanel previewPanel;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton sealButton;
    private javax.swing.JButton selectAllButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel target;
    private javax.swing.JLabel targetLabel;
    // End of variables declaration//GEN-END:variables
	
        private boolean        isLoading              = false;
        private ArrayList<DataDmHistoryDetail> dmArray = null;

	/**
	 * メール送信画面用FocusTraversalPolicy
	 */
	private	HairCommonMailFocusTraversalPolicy	ftp	=
			new HairCommonMailFocusTraversalPolicy();
	
	/**
	 * メール送信画面用FocusTraversalPolicyを取得する。
	 * @return メール送信画面用FocusTraversalPolicy
	 */
	public HairCommonMailFocusTraversalPolicy getFocusTraversalPolicy()
	{
	    return	ftp;
	}

        private void init() {

            mail.getColumnModel().getColumn(0).setPreferredWidth(100);
            mail.getColumnModel().getColumn(1).setPreferredWidth(300);
            label.getColumnModel().getColumn(0).setPreferredWidth(100);
            label.getColumnModel().getColumn(1).setPreferredWidth(300);
            postCard.getColumnModel().getColumn(0).setPreferredWidth(100);
            postCard.getColumnModel().getColumn(1).setPreferredWidth(300);
            
            setButtonEnabled(false);
        }
        
        private void showData() {
        
            if (isLoading) return;
        
            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                SwingUtil.clearTable(mail);
                SwingUtil.clearTable(label);
                SwingUtil.clearTable(postCard);
                SwingUtil.clearTable(customersTable);

                setButtonEnabled(false);

                DefaultTableModel model = null;

                // 過去データ削除
                DmHistory.deleteOld();

                for (DataDmHistory dh : DataDmHistory.getList(getShopIdList())) {

                    model = (DefaultTableModel)getCurrentTable(dh).getModel();

                    model.addRow(new Object[]
                    {
                        dh.getMakeDateStrDateOnly(),
                        dh,
                        dh.getDmCount(),
                        getDeleteButton(dh)
                    });
                }
                
            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }
        
        private String getShopIdList() {
            
            String result = "";
            
            if(target.getSelectedItem() instanceof MstGroup) {
                MstGroup mg = (MstGroup)target.getSelectedItem();
                result = mg.getShopIDListAll() + (mg.getShopIDListAll().length() > 0 ? ",0" : "0");
            } else {
                MstShop ms = (MstShop)target.getSelectedItem();
                result = ms.getShopID().toString();
            }

            return result;
        }
        
	private JButton getDeleteButton(final DataDmHistory dh)
	{
            JButton button = new JButton();
            button.setBorderPainted(false);
            button.setContentAreaFilled(false);
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                            "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_off.jpg")));
            button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                            "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_on.jpg")));
            button.setSize(48, 25);
            button.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    removeDmHistory(dh);
                }
            });
            return button;
	}
        
        private void removeDmHistory(DataDmHistory dh)
        {
            StringBuilder msg = new StringBuilder(1000);
            msg.append("　作成日 ： " + dh.getMakeDateStr() + "\n");
            msg.append("　タイトル ： 「 " + dh.getDmTitle() + " 」\n");
            msg.append("　対象人数 ： " + dh.getDmCount() + " 人\n\n");
            msg.append("この履歴を削除します。よろしいですか？\n\n");
            
            int ret = MessageDialog.showYesNoDialog(
                        this,
                        msg.toString(),
                        "履歴削除",
                        JOptionPane.QUESTION_MESSAGE,
                        JOptionPane.NO_OPTION);

            if (ret == JOptionPane.YES_OPTION) {

                JTable table = getCurrentTable(dh);
                if (table.getCellEditor() != null) table.getCellEditor().stopCellEditing();

                dh.delete();
                showData();
            }
        }
        
        /**
         * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
         */
        private void addMouseCursorChange() {
            SystemInfo.addMouseCursorChange(btnOutputExcel);
            SystemInfo.addMouseCursorChange(mailButton);
            SystemInfo.addMouseCursorChange(sealButton);
            SystemInfo.addMouseCursorChange(postcardButton);
            SystemInfo.addMouseCursorChange(selectAllButton);
            SystemInfo.addMouseCursorChange(releaseAllButton);
        }
        
	private void changeSelectedCustomer()
	{
            DataDmHistoryDetail dhd = (DataDmHistoryDetail)customersTable.getValueAt(customersTable.getSelectedRow(),1);

            if (dhd.getDmType() != DmHistory.DM_MAIL) return;

            // メールタイトル
            mailTitle.setText(dhd.getMailTitle());
            
            // メール本文
            DataMail dm = new DataMail();
            dm.setData(dhd);
            dm.setMailBody(dhd.getMailBody());
            mailBody.setText(MailUtil.decodeKey(dm, target.getSelectedItem()));

            // カーソルを先頭にセット
            mailTitle.setCaretPosition(0);
            mailBody.setCaretPosition(0);
	}
	
	/**
	 * シンプルマスタ登録画面用FocusTraversalPolicy
	 */
	private class HairCommonMailFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(mailTitle)) {
			    return mailBody;
			} else if (aComponent.equals(mailBody)) {
			    return mailTitle;
			}
			
			return mailTitle;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer, Component aComponent)
		{
		    if (aComponent.equals(mailTitle)) {
			return mailBody;
		    } else if (aComponent.equals(mailBody)) {
			return mailTitle;
		    }

		    return mailTitle;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
		    return mailTitle;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
		    return mailBody;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
		    return mailTitle;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
		    return mailTitle;
		}
	}
	
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
            //列の幅を設定する。
            customersTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            customersTable.getColumnModel().getColumn(2).setPreferredWidth(180);
            customersTable.getColumnModel().getColumn(3).setPreferredWidth(40);
	}
	
    private void showCustomersTable(JTable table)
    {
        if (table.getSelectedRow() < 0) return;

        TableColumnModel colModel = customersTable.getTableHeader().getColumnModel();
        if (table.equals(mail)) {
            colModel.getColumn(2).setHeaderValue("メールアドレス");
            colModel.getColumn(3).setHeaderValue("<html>送信<br>対象</html>");
        } else {
            colModel.getColumn(2).setHeaderValue("住所");
            colModel.getColumn(3).setHeaderValue("<html>出力<br>対象</html>");
        }

        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            mailTitle.setText("");
            mailBody.setText("");

            DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
            SwingUtil.clearTable(customersTable);

            DataDmHistory dh = (DataDmHistory)table.getValueAt(table.getSelectedRow(), 1);

            dmArray = dh.getDetailList();

            for (DataDmHistoryDetail dhd : dmArray) {
                model.addRow(new Object[]
                {
                    getUserSearchButton(dhd.getCustomerID()),
                    dhd,
                    table.equals(mail) ? dhd.getMailAddress() : dhd.getFullAddress(),
                    true
                });
            }

            setButtonEnabled(dmArray.size() > 0);

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        
    }

    /**
     * ユーザ検索ボタンを取得する
     */
    private JButton getUserSearchButton(final Integer customerID)
    {
        JButton searchButton = new JButton();
        searchButton.setBorderPainted(false);
        searchButton.setContentAreaFilled(false);
        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
        searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                        "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
        searchButton.setSize(48, 25);
        searchButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {

                MstCustomerPanel mcp = null;

                try {

                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    mcp = new MstCustomerPanel(customerID, true, false);
                    SwingUtil.openAnchorDialog(parentFrame, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );
                    if( customersTable.getCellEditor() != null ) customersTable.getCellEditor().stopCellEditing();

                } finally {
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }

                mcp = null;
            }
        });
        return searchButton;
    }        

    private void setButtonEnabled(boolean mode) {
        btnOutputExcel.setEnabled(mode);
        mailButton.setEnabled(mode);
        sealButton.setEnabled(mode);
        postcardButton.setEnabled(mode);
        selectAllButton.setEnabled(mode);
        releaseAllButton.setEnabled(mode);
    }

    private JTable getCurrentTable()
    {
        JTable result = null;
        if (dmType.getSelectedIndex() == 0) result = mail;
        if (dmType.getSelectedIndex() == 1) result = label;
        if (dmType.getSelectedIndex() == 2) result = postCard;

        return result;
    }

    private JTable getCurrentTable(DataDmHistory dh)
    {
        JTable result = null;
        if (dh.getDmType() == DmHistory.DM_MAIL) result = mail;
        if (dh.getDmType() == DmHistory.DM_LABEL) result = label;
        if (dh.getDmType() == DmHistory.DM_POSTCARD) result = postCard;

        return result;
    }

}
