/*
 * CTICustomerDialog.java
 *
 * Created on 2008/01/23, 11:06
 */

package com.geobeck.sosia.pos.cti;

import com.geobeck.sosia.pos.hair.customer.*;
import com.geobeck.sosia.pos.hair.data.account.DataSalesDetail;
import com.geobeck.sosia.pos.hair.reservation.RegistReservationDialog;
import com.geobeck.sosia.pos.hair.reservation.ReservationTimeTablePanel;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.swing.AbstractMainFrame;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import com.geobeck.util.CheckUtil;
import com.geobeck.util.DateUtil;
import com.geobeck.util.SQLUtil;
import java.awt.Color;
import java.awt.Cursor;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 * CTI
 * @author  uchiyama murakami
 */
public class CTICustomerDialog extends javax.swing.JFrame  {

    private String ctiNo = "";
    private AbstractMainFrame parentFrame = null;
    private Integer customerID = null;
    
     /**
     * コンストラクタ
     * @param parent
     * @param modal
     */
    public CTICustomerDialog(String value, AbstractMainFrame parentFrame)
    {
        this(value, parentFrame, null);
    }

    public CTICustomerDialog(String value, AbstractMainFrame parentFrame, Integer customerID)
    {
        super();
        initComponents();

        this.clear();

        this.ctiNo = value;
        this.parentFrame = parentFrame;
        this.customerID = customerID;
        
        if (customerID == null) {
            this.registCallHistory();
        }
        
        if (checkRegistPhoneNo(value)) {
            showData();
        } 

        this.setTitle("CTI");
        this.setSize(406, 662);

        //画面中央に表示
        //SwingUtil.moveCenter(this);

        this.displaySizeType = SystemInfo.getCtiDisplaySizeType();
        if (this.displaySizeType == 1) this.resizeWindow();

        this.setAlwaysOnTop(true);
        setVisible(true);
        this.setAlwaysOnTop(false);
        addMouseCursorChange();
    }        

    private void registCallHistory() {

        try {
            StringBuilder sql = new StringBuilder(1000);
            sql.append(" insert into data_call_history");
            sql.append(" (");
            sql.append("      shop_id");
            sql.append("     ,arrive_time");
            sql.append("     ,arrive_number");
            sql.append(" ) values (");
            sql.append(SQLUtil.convertForSQL(SystemInfo.getCurrentShop().getShopID()));
            sql.append(" ,current_timestamp");
            sql.append(" ," + SQLUtil.convertForSQL(this.ctiNo));
            sql.append(" )");
            SystemInfo.getConnection().executeUpdate(sql.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backPanel = new com.geobeck.swing.ImagePanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        resizeButton = new javax.swing.JButton();
        cellularNo = new com.geobeck.swing.JFormattedTextFieldEx();
        phoneNo = new com.geobeck.swing.JFormattedTextFieldEx();
        customerName = new com.geobeck.swing.JFormattedTextFieldEx();
        customerKana = new com.geobeck.swing.JFormattedTextFieldEx();
        customerNo = new com.geobeck.swing.JFormattedTextFieldEx();
        closeButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        customerInfoButton = new javax.swing.JButton();
        reserveButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        birthDate = new com.geobeck.swing.JFormattedTextFieldEx();
        salesPanel = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        noteScrollPane = new javax.swing.JScrollPane();
        note = new com.geobeck.swing.JTextAreaEx();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        visitDate = new javax.swing.JLabel();
        visitCount = new javax.swing.JLabel();
        chargedStaff = new javax.swing.JLabel();
        technicJScrollPane = new javax.swing.JScrollPane();
        technic = new com.geobeck.swing.JTextAreaEx();
        paidLast = new javax.swing.JLabel();
        paidTotal = new javax.swing.JLabel();
        memoJScrollPane = new javax.swing.JScrollPane();
        memo = new com.geobeck.swing.JTextAreaEx();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        changeButton = new javax.swing.JButton();
        nextReserveMenu = new javax.swing.JLabel();
        nextReserveDate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        backPanel.setImage(SystemInfo.getImageIcon("/cti_background.jpg"));
        backPanel.setLayout(null);

        jLabel4.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel4.setText("携帯番号");
        jLabel4.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        backPanel.add(jLabel4);
        jLabel4.setBounds(20, 175, 80, 20);

        jLabel1.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel1.setText("顧客No.");
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        backPanel.add(jLabel1);
        jLabel1.setBounds(20, 80, 80, 20);

        jLabel2.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel2.setText("氏名");
        jLabel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        backPanel.add(jLabel2);
        jLabel2.setBounds(20, 125, 80, 20);

        jLabel3.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel3.setText("電話番号");
        jLabel3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        backPanel.add(jLabel3);
        jLabel3.setBounds(20, 150, 80, 20);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);

        prevButton.setIcon(SystemInfo.getImageIcon("/button/arrow/left_off.jpg"));
        prevButton.setBorderPainted(false);
        prevButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left_on.jpg"));
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        jPanel1.add(prevButton);
        prevButton.setBounds(0, 0, 48, 25);

        nextButton.setIcon(SystemInfo.getImageIcon("/button/arrow/right_off.jpg"));
        nextButton.setBorderPainted(false);
        nextButton.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right_on.jpg"));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        jPanel1.add(nextButton);
        nextButton.setBounds(51, 0, 48, 25);

        resizeButton.setIcon(SystemInfo.getImageIcon("/button/reservation/Minimization_off.jpg"));
        resizeButton.setBorder(null);
        resizeButton.setPressedIcon(SystemInfo.getImageIcon("/button/reservation/Minimization_on.jpg"));
        resizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(resizeButton);
        resizeButton.setBounds(104, 0, 25, 25);

        backPanel.add(jPanel1);
        jPanel1.setBounds(251, 72, 140, 25);

        cellularNo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        cellularNo.setEditable(false);
        cellularNo.setText("01234567890");
        cellularNo.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        cellularNo.setOpaque(false);
        backPanel.add(cellularNo);
        cellularNo.setBounds(100, 175, 280, 20);

        phoneNo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        phoneNo.setEditable(false);
        phoneNo.setText("01234567890");
        phoneNo.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        phoneNo.setOpaque(false);
        backPanel.add(phoneNo);
        phoneNo.setBounds(100, 150, 280, 20);

        customerName.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        customerName.setEditable(false);
        customerName.setText("大阪　太郎　　様");
        customerName.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        customerName.setOpaque(false);
        backPanel.add(customerName);
        customerName.setBounds(100, 125, 280, 20);

        customerKana.setBorder(null);
        customerKana.setEditable(false);
        customerKana.setText("おおさか　たろう");
        customerKana.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 14));
        customerKana.setOpaque(false);
        backPanel.add(customerKana);
        customerKana.setBounds(100, 100, 270, 25);

        customerNo.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        customerNo.setEditable(false);
        customerNo.setText("012345678901234");
        customerNo.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        customerNo.setOpaque(false);
        backPanel.add(customerNo);
        customerNo.setBounds(100, 80, 280, 20);

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/cti_close.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setFocusable(false);
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonbackPrevious(evt);
            }
        });
        backPanel.add(closeButton);
        closeButton.setBounds(338, 7, 50, 25);

        buttonPanel.setOpaque(false);
        buttonPanel.setLayout(null);

        customerInfoButton.setIcon(SystemInfo.getImageIcon("/button/key/customer_info_off.jpg"));
        customerInfoButton.setBorder(null);
        customerInfoButton.setPressedIcon(SystemInfo.getImageIcon("/button/key/customer_info_on.jpg"));
        customerInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerInfoButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(customerInfoButton);
        customerInfoButton.setBounds(10, 0, 92, 25);

        reserveButton.setIcon(SystemInfo.getImageIcon("/button/reservation/regist_reservation_off.jpg"));
        reserveButton.setBorder(null);
        reserveButton.setPressedIcon(SystemInfo.getImageIcon("/button/reservation/regist_reservation_on.jpg"));
        reserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(reserveButton);
        reserveButton.setBounds(110, 0, 92, 25);

        backPanel.add(buttonPanel);
        buttonPanel.setBounds(10, 583, 380, 30);

        jLabel5.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel5.setText("誕生日");
        jLabel5.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        backPanel.add(jLabel5);
        jLabel5.setBounds(20, 200, 80, 20);

        birthDate.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        birthDate.setEditable(false);
        birthDate.setText("1980年12月31日　（30歳）");
        birthDate.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        birthDate.setOpaque(false);
        backPanel.add(birthDate);
        birthDate.setBounds(100, 200, 280, 20);

        salesPanel.setOpaque(false);
        salesPanel.setLayout(null);

        jLabel18.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel18.setText("＜顧客情報メモ＞");
        salesPanel.add(jLabel18);
        jLabel18.setBounds(10, 257, 153, 20);

        noteScrollPane.setBackground(new java.awt.Color(204, 204, 204));
        noteScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        note.setBackground(new java.awt.Color(255, 255, 204));
        note.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        note.setColumns(20);
        note.setEditable(false);
        note.setLineWrap(true);
        note.setRows(5);
        note.setTabSize(4);
        note.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 14));
        note.setInputKanji(true);
        noteScrollPane.setViewportView(note);

        salesPanel.add(noteScrollPane);
        noteScrollPane.setBounds(10, 277, 362, 74);

        jLabel6.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel6.setText("来店回数");
        jLabel6.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(jLabel6);
        jLabel6.setBounds(10, 57, 80, 20);

        jLabel7.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel7.setText("前回担当");
        jLabel7.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(jLabel7);
        jLabel7.setBounds(10, 82, 80, 20);

        jLabel8.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel8.setText("＜前回技術／商品＞");
        salesPanel.add(jLabel8);
        jLabel8.setBounds(10, 102, 150, 30);

        jLabel14.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel14.setText("＜前回来店メモ＞");
        salesPanel.add(jLabel14);
        jLabel14.setBounds(195, 102, 140, 30);

        jLabel15.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel15.setText("前回金額");
        jLabel15.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(jLabel15);
        jLabel15.setBounds(10, 232, 80, 20);

        jLabel16.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel16.setText(" ／ 累計金額");
        jLabel16.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(jLabel16);
        jLabel16.setBounds(180, 232, 100, 20);

        jLabel17.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel17.setText("／ 前回来店日");
        jLabel17.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(jLabel17);
        jLabel17.setBounds(150, 57, 110, 20);

        visitDate.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        visitDate.setText("2010/12/31");
        visitDate.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(visitDate);
        visitDate.setBounds(260, 57, 110, 20);

        visitCount.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        visitCount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        visitCount.setText("999 回");
        visitCount.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(visitCount);
        visitCount.setBounds(90, 57, 60, 20);

        chargedStaff.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        chargedStaff.setText("勅使河原　幸次郎");
        chargedStaff.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(chargedStaff);
        chargedStaff.setBounds(90, 82, 280, 20);

        technicJScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        technicJScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        technicJScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        technicJScrollPane.setToolTipText("");
        technicJScrollPane.setEnabled(false);
        technicJScrollPane.setOpaque(false);
        technicJScrollPane.setPreferredSize(new java.awt.Dimension(100, 100));

        technic.setBackground(new java.awt.Color(255, 255, 204));
        technic.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        technic.setColumns(4);
        technic.setLineWrap(true);
        technic.setRows(3);
        technic.setTabSize(4);
        technic.setWrapStyleWord(true);
        technic.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 14));
        technic.setInputKanji(true);
        technic.setMinimumSize(new java.awt.Dimension(100, 20));
        technic.setRequestFocusEnabled(false);
        technicJScrollPane.setViewportView(technic);

        salesPanel.add(technicJScrollPane);
        technicJScrollPane.setBounds(10, 127, 175, 100);

        paidLast.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        paidLast.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        paidLast.setText("999,999 円");
        paidLast.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(paidLast);
        paidLast.setBounds(90, 232, 90, 20);

        paidTotal.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        paidTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        paidTotal.setText("999,999 円");
        paidTotal.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(paidTotal);
        paidTotal.setBounds(280, 232, 90, 20);

        memoJScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        memoJScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        memoJScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        memoJScrollPane.setToolTipText("");
        memoJScrollPane.setEnabled(false);
        memoJScrollPane.setOpaque(false);
        memoJScrollPane.setPreferredSize(new java.awt.Dimension(100, 100));

        memo.setBackground(new java.awt.Color(255, 255, 204));
        memo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        memo.setColumns(4);
        memo.setLineWrap(true);
        memo.setRows(3);
        memo.setTabSize(4);
        memo.setWrapStyleWord(true);
        memo.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 14));
        memo.setInputKanji(true);
        memo.setMinimumSize(new java.awt.Dimension(100, 20));
        memo.setRequestFocusEnabled(false);
        memoJScrollPane.setViewportView(memo);

        salesPanel.add(memoJScrollPane);
        memoJScrollPane.setBounds(195, 127, 175, 100);

        jLabel9.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel9.setText("次回予約日");
        jLabel9.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(jLabel9);
        jLabel9.setBounds(10, 0, 90, 28);

        jLabel10.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 16));
        jLabel10.setText("予約内容");
        jLabel10.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(jLabel10);
        jLabel10.setBounds(10, 31, 90, 20);

        changeButton.setIcon(SystemInfo.getImageIcon("/button/reservation/change_reservation_off.jpg"));
        changeButton.setBorderPainted(false);
        changeButton.setEnabled(false);
        changeButton.setPressedIcon(SystemInfo.getImageIcon("/button/reservation/change_reservation_on.jpg"));
        changeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeButtonActionPerformed(evt);
            }
        });
        salesPanel.add(changeButton);
        changeButton.setBounds(278, 0, 92, 25);

        nextReserveMenu.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        nextReserveMenu.setText("cut,color,perm");
        nextReserveMenu.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(nextReserveMenu);
        nextReserveMenu.setBounds(100, 31, 270, 20);

        nextReserveDate.setFont(new java.awt.Font("HGPｺﾞｼｯｸE", 0, 18));
        nextReserveDate.setText("2010/01/25 13:00〜");
        nextReserveDate.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.lightGray));
        salesPanel.add(nextReserveDate);
        nextReserveDate.setBounds(100, 0, 270, 28);

        backPanel.add(salesPanel);
        salesPanel.setBounds(10, 223, 380, 352);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void changeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeButtonActionPerformed

        // 他店予約の場合
        if (!this.nextReserveShopID.equals(SystemInfo.getCurrentShop().getShopID())) {
            
            MessageDialog.showMessageDialog(
                this,
                "他店の予約となりますので変更はできません。",
                this.getTitle(),
                JOptionPane.WARNING_MESSAGE);
            
            return;
        }
        
        changeButton.setCursor(null);

        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
            ReservationTimeTablePanel rtt = new ReservationTimeTablePanel();
            
            rtt.setCustomer(customer);

            try {
                rtt.setDate(DateFormat.getDateInstance().parse(nextReserveDate.getText()));
            } catch (Exception e) {
            }

            rtt.load();

            rtt.setNextReservation(true);
            rtt.setAutoOpenDialog(true);
            rtt.setNextReserveShopID(this.nextReserveShopID);
            rtt.setNextReserveNo(this.nextReserveNo);
            
            /* ダイアログで開く */
            SwingUtil.openAnchorDialog( null, true, rtt, "予約表", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );

            rtt = null;

            this.showNextReserveDate();

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        
    }//GEN-LAST:event_changeButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.saveCtiDisplaySizeType();
    }//GEN-LAST:event_formWindowClosing

    private void resizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeButtonActionPerformed

        if (this.displaySizeType == 0) {
            this.displaySizeType = 1;
        } else {
            this.displaySizeType = 0;
        }

        this.resizeWindow();

    }//GEN-LAST:event_resizeButtonActionPerformed

    private void closeButtonbackPrevious(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonbackPrevious
        this.saveCtiDisplaySizeType();
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonbackPrevious
    /**
     * 顧客情報ボタンが押されたときの処理
     */
        private void customerInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerInfoButtonActionPerformed
	    //顧客情報が取得できているとき
	     if(customer.getCustomerID()!=null){              
                      MstCustomerPanel	mcp	=	new MstCustomerPanel(customer.getCustomerID());                     
 //                     this.openFrame(this, false, mcp, "顧客情報登録");
                     SwingUtil.openDialog(this, true, mcp, "顧客情報登録");
              }else{               
                      MstCustomerPanel	mcp	=	new MstCustomerPanel();
		      mcp.setTextData(phoneNo.getText(),cellularNo.getText());
                      SwingUtil.openDialog(this, true, mcp, "顧客情報登録");
                      if(mcp.getCustomer().getCustomerID() != null){
                              reSetText();
                              customer=mcp.getCustomer();
                              showData(); 
                      }
              }                          
        }//GEN-LAST:event_customerInfoButtonActionPerformed
    /**
     * 次ボタンが押されたときの処理
     */
        private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed

            nextButton.setCursor(null);

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                this.clear();

                if (-1 < current_num && current_num < max_num) {
                    customer.setData(customerList.get(++current_num));
                } else {
                    current_num = 0;
                    customer.setData(customerList.get(current_num));
                }

                this.showData();
                
            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
            
        }//GEN-LAST:event_nextButtonActionPerformed
    /**
     * 前ボタンが押されたときの処理
     */
        private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
            
            prevButton.setCursor(null);

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                this.clear();

                if (0 < current_num && current_num <= max_num) {
                    customer.setData(customerList.get(--current_num));
                } else {
                    current_num = max_num;
                    customer.setData(customerList.get(current_num));
                } 

                this.showData();
                
            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
            
        }//GEN-LAST:event_prevButtonActionPerformed
    /**
     * 予約登録ボタンが押されたときの処理
     */
        private void reserveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveButtonActionPerformed

            ReservationTimeTablePanel rrtp = new ReservationTimeTablePanel();
            rrtp.setParentFrame(this.parentFrame);

            RegistReservationDialog rrd = new RegistReservationDialog(SystemInfo.getCurrentShop(), new java.util.Date(), rrtp);
            rrd.setCtiNo(this.ctiNo);
            if( customer.getCustomerID() != null ){
                   rrd.setCustomerInfo(customer, visitRecord);
            }else{
                   rrd.LoadReservation( null );
            }

            this.saveCtiDisplaySizeType();
            this.setVisible(false);

            rrtp.registReserve(rrd);

        }//GEN-LAST:event_reserveButtonActionPerformed

    /**
     * 閉じるボタンが押されたときの処理
     */   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.geobeck.swing.ImagePanel backPanel;
    private com.geobeck.swing.JFormattedTextFieldEx birthDate;
    private javax.swing.JPanel buttonPanel;
    private com.geobeck.swing.JFormattedTextFieldEx cellularNo;
    private javax.swing.JButton changeButton;
    private javax.swing.JLabel chargedStaff;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton customerInfoButton;
    private com.geobeck.swing.JFormattedTextFieldEx customerKana;
    private com.geobeck.swing.JFormattedTextFieldEx customerName;
    private com.geobeck.swing.JFormattedTextFieldEx customerNo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private com.geobeck.swing.JTextAreaEx memo;
    private javax.swing.JScrollPane memoJScrollPane;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel nextReserveDate;
    private javax.swing.JLabel nextReserveMenu;
    private com.geobeck.swing.JTextAreaEx note;
    private javax.swing.JScrollPane noteScrollPane;
    private javax.swing.JLabel paidLast;
    private javax.swing.JLabel paidTotal;
    private com.geobeck.swing.JFormattedTextFieldEx phoneNo;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton reserveButton;
    private javax.swing.JButton resizeButton;
    private javax.swing.JPanel salesPanel;
    private com.geobeck.swing.JTextAreaEx technic;
    private javax.swing.JScrollPane technicJScrollPane;
    private javax.swing.JLabel visitCount;
    private javax.swing.JLabel visitDate;
    // End of variables declaration//GEN-END:variables

        private	ArrayList<MstCustomer>      customerList =	 new ArrayList<MstCustomer>();
        private MstCustomerManager             customer  =       new MstCustomerManager();
        
        private VisitRecord             visitRecord              =       new VisitRecord(SystemInfo.getTypeID());
        
        private String                  comment_unrecognizedNo_1        = "※非通知（その他処理ができない";
        private String                  comment_unrecognizedNo_2        = "信号）により表示できません。";   
        private String                  comment_unregistNo              = "※顧客情報に存在しません。";

        private int                     max_num                         =0;
        private int                     current_num                     =0;
        
        private Integer nextReserveShopID = null;
        private Integer nextReserveNo = null;
        
        // CTI画面のサイズフラグ（0：全体表示、1：縮小表示）
        private static int displaySizeType = 0;
        
	/**
	 *　顧客情報が登録情報、未登録情報、非通知などの情報かチェックする
	 * @return 登録情報 true
	 * @param ctiCustomerData CTIの顧客情報
	 */        
        public boolean checkRegistPhoneNo(String ctiCustomerData){		 
               
            customer.setData(new MstCustomer());
		
            //　電話番号が入力されていない場合、処理を抜ける
            if (this.customerID == null && CheckUtil.isNumber(ctiCustomerData) == false) {
                setCommentForUnrecognizedNo();  
                changeButton();

                System.out.println("電話番号データ異常:" + ctiCustomerData);
                return false;
            }
            
            try {

                System.out.println("☆顧客情報取得処理開始");
                System.out.println("ctiCustomerData:"+ctiCustomerData);
                System.out.println("isShareCustomer():"+SystemInfo.getSetteing().isShareCustomer());
                System.out.println("getShopID():"+(SystemInfo.getSetteing().isShareCustomer() ? 
									0 : SystemInfo.getCurrentShop().getShopID()));

                if (this.customerID != null) {
                    customer.setCustomerListByID(
                            this,                                                             
                            SystemInfo.getConnection(),
                            this.customerID,
                            SystemInfo.getSetteing().isShareCustomer() ? 0 : SystemInfo.getCurrentShop().getShopID()
                    );
                } else {
                    customer.setCustomerListByPhoneNo(
                            this,                                                             
                            SystemInfo.getConnection(),
                            ctiCustomerData,
                            SystemInfo.getSetteing().isShareCustomer() ? 0 : SystemInfo.getCurrentShop().getShopID()
                    );
                }

                customerList = customer.getCustomerList();
                
            } catch(SQLException e) {       

                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            
            // 番号が顧客登録にない処理
            if (customerList.size() == 0 ) {
                System.out.println("☆顧客情報登録無し");
                setCommentForUnregistNo();
                prevButton.setVisible(false);
                nextButton.setVisible(false);
                changeButton();
                setUnRegistNo( ctiCustomerData );
				
                return false;
                
            } else {

                //顧客登録されている番号の処理       
                System.out.println("☆顧客情報登録あり");
                max_num = customerList.size() - 1;
                customer.setData(customerList.get(current_num));
                               
                if ( customerList.size() == 1 ) changeButton();
                return true ;
            }  
	}
        
	private void clear()
	{
            customerNo.setText("");
            customerName.setText("");
            customerKana.setText("");
            phoneNo.setText("");
            cellularNo.setText("");
            birthDate.setText("");
            visitCount.setText("");
            visitDate.setText("");
            chargedStaff.setText("");
            technic.setText("");
            memo.setText("");
            paidLast.setText("");
            paidTotal.setText("");
            note.setText("");
            nextReserveDate.setText("");
            nextReserveMenu.setText("");
         }

        public void hoge() {
            MstCustomer mm  = new MstCustomer();
            System.out.println(mm.getNote());
        }

        /**
	 * customerのデータを表示する。
	 */
	private void showData()
	{
            if(customer == null) return;

            //顧客情報をセット
            customerNo.setText(customer.getCustomerNo());
            customerName.setText(customer.getCustomerName(0) + " " +
                                  customer.getCustomerName(1) + "    様" );		
            customerKana.setText(customer.getCustomerKana().equals("") || customer.getCustomerKana() == null ? 
                                   "" :  customer.getCustomerKana(0) + " " + customer.getCustomerKana(1));                
            phoneNo.setText((customer.getPhoneNumber() == null ? "" : customer.getPhoneNumber()));		
            cellularNo.setText((customer.getCellularNumber() == null ? "" : customer.getCellularNumber()));
                
            Integer ageTemp = DateUtil.calcAge( new com.ibm.icu.util.GregorianCalendar(), customer.getBirthday());
            String ageString = "";
            //IVS_TMTrong start edit 2015/10/19 New request #43511
            if (ageTemp > 0) {
                ageString = "（" + ageTemp.toString() + "歳）";
            }
            //IVS_TMTrong end edit 2015/10/19 New request #43511
            
            birthDate.setText(customer.getBirthdayString("yyyy年 M月 d日　" + ageString));

            note.setText(customer.getNote());
            note.setCaretPosition(0);
            
            visitCount.setText("0 回");
            
            //前回来店情報をセット
            if(customer.loadAccounts())
            {
                if( customer.getAccounts().size() != 0){		
                    visitRecord = customer.getAccounts().get(0);
                    visitCount.setText(customer.getAccounts().size() + " 回");
                    visitDate.setText(String.format("%1$tY/%1$tm/%1$td", visitRecord.getSalesDate()));
                          
                    String staffName = "";
                    if (visitRecord.getStaff().getStaffName(0) != null) {
                        staffName = visitRecord.getStaff().getStaffName(0) + " " + visitRecord.getStaff().getStaffName(1);
                    } else {
                        staffName = "担当なし";
                    }
                    staffName += (visitRecord.getDesignated() ? " （指名）" : " （フリー）");
                    chargedStaff.setText(staffName);

                    NumberFormat nf = NumberFormat.getInstance();
                    paidLast.setText(nf.format(visitRecord.getSalesTotal()) + " 円");
                    paidTotal.setText(nf.format(customer.getSalesTotal()) + " 円");
                    
                    try {

                        if (!visitRecord.loadAll(SystemInfo.getConnection())) {
                            return;
                        }
                        
                    } catch(SQLException e) {
                        SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                    }
                    
                    //前回メニュー
                    for (int i = 0; i < visitRecord.size(); i++) {
                        DataSalesDetail dsd = visitRecord.get(i);
                        
                        if (dsd.getProductDivision() == 1) {
                            
                            technic.append("(技)" + dsd.getProduct().getProductName());
                            if (i < visitRecord.size() - 1) {
                                technic.append("\n");
                            }
                            
                        } else if (dsd.getProductDivision() == 2) {

                            technic.append("(商)" + dsd.getProduct().getProductName());
                            if (i < visitRecord.size() - 1) {
                                technic.append("\n");
                            }

                        }
                        
                    }
                    technic.setCaretPosition(0);
                    
                    memo.setText(visitRecord.getVisitedMemo());
                    memo.setCaretPosition(0);
                }
             }

            // 次回予約情報
            this.showNextReserveDate();
         }
        

 	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(nextButton);
                SystemInfo.addMouseCursorChange(prevButton);
		SystemInfo.addMouseCursorChange(customerInfoButton);
		SystemInfo.addMouseCursorChange(reserveButton);
		SystemInfo.addMouseCursorChange(closeButton);
		SystemInfo.addMouseCursorChange(resizeButton);
		SystemInfo.addMouseCursorChange(changeButton);
	}
        
 	/**
	 * 認識できない番号に対するコメントをセット
	 */
        private void setCommentForUnrecognizedNo(){
               phoneNo.setText( comment_unrecognizedNo_1 );
               cellularNo.setText( comment_unrecognizedNo_2 );
               phoneNo.setForeground( Color.RED );
               cellularNo.setForeground( Color.RED );
               phoneNo.setHorizontalAlignment( JTextField.CENTER );
               cellularNo.setHorizontalAlignment( JTextField.CENTER );               
        }
 
        /**
	 * 顧客情報に登録されていない番号に対するコメントをセット
	 */       
        private void setCommentForUnregistNo() {
            customerNo.setText( comment_unregistNo );
            customerNo.setForeground( Color.RED );
        }

        private void changeButton(){
                 nextButton.setEnabled(false);
                 prevButton.setEnabled(false);                 
        }

        private void reSetText(){
               customerNo.setForeground(Color.BLACK);
               phoneNo.setForeground( Color.BLACK );
               cellularNo.setForeground( Color.BLACK );
               
               phoneNo.setHorizontalAlignment( JTextField.LEFT );
               cellularNo.setHorizontalAlignment( JTextField.LEFT );
                
        }
	private void setUnRegistNo(String ctiCustomerData){
		boolean isCellularNo = false;
                    
		    if( ctiCustomerData.charAt(0) == '0' && ctiCustomerData.charAt(2) == '0'){      
                          int checkValue = Integer.parseInt( ctiCustomerData.substring( 1, 2) );
                          for (int i =7 ; i <=9 ; i++ ){
                                 
                                if( checkValue == i){
                                        isCellularNo = true ;
                                }        
                          }
                    }
		//携帯番号にセットする
		if(isCellularNo){
		    cellularNo.setText(ctiCustomerData);
		}else{
		    phoneNo.setText(ctiCustomerData);
		}
	    
	}
/*
        public void openFrame(javax.swing.JFrame owner, boolean modal, JPanel panel, String title)
        {
                javax.swing.JFrame	frame	=	new javax.swing.JFrame();
		
		frame.setTitle(title);
		setPanelToFrame(frame, panel);
		
		frame.setVisible(true);
                
        }
        private void setPanelToFrame(JFrame frame, JPanel panel)
	{
		frame.setSize(panel.getWidth() + 4, panel.getHeight() + 32);
		
                org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(frame.getContentPane());
                frame.getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(panel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );
	}

*/
        
    private void resizeWindow() {
 
        int offset = 345;
        
        if (this.displaySizeType == 0) {

            salesPanel.setVisible(true);
            this.resizeButton.setIcon(SystemInfo.getImageIcon("/button/reservation/Minimization_off.jpg"));
            this.resizeButton.setPressedIcon(SystemInfo.getImageIcon("/button/reservation/Minimization_on.jpg"));
            
        } else {

            offset = offset * -1;
            
            salesPanel.setVisible(false);
            this.resizeButton.setIcon(SystemInfo.getImageIcon("/button/reservation/Maximization_off.jpg"));
            this.resizeButton.setPressedIcon(SystemInfo.getImageIcon("/button/reservation/Maximization_on.jpg"));
        }
        
        this.setSize(this.getWidth(), this.getHeight() + offset);
        buttonPanel.setLocation(buttonPanel.getX(), buttonPanel.getY() + offset);
        
    }

    private void saveCtiDisplaySizeType() {
        
        if (this.displaySizeType != SystemInfo.getCtiDisplaySizeType()) {

            boolean result = false;
            
            ConnectionWrapper con = SystemInfo.getBaseConnection();
            
            try {
                con.begin();

                StringBuilder sql = new StringBuilder(1000);
                sql.append(" update mst_mac");
                sql.append(" set");
                sql.append("     cti_display_size_type = " + SQLUtil.convertForSQL(this.displaySizeType));
                sql.append(" where");
                sql.append("         login_id = " + SQLUtil.convertForSQL(SystemInfo.getLoginID()));
                sql.append("     and mac_id = " + SQLUtil.convertForSQL(SystemInfo.getMacID()));

                try {
                    if(con.executeUpdate(sql.toString()) == 1) {
                        result = true;
                    }
                } catch(SQLException e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }

                if(result) {
                    con.commit();
                    SystemInfo.setCtiDisplaySizeType(this.displaySizeType);
                } else {
                    con.rollback();
                }
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }
    }
    
    private void showNextReserveDate() {

        nextReserveShopID = null;
        nextReserveNo = null;
        nextReserveDate.setText("");
        changeButton.setEnabled(false);

        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      dr.shop_id");
        sql.append("     ,dr.reservation_no");
        sql.append("     ,to_char(drd.reservation_datetime, 'yyyy/mm/dd hh24:mi') as next_reserve_date");
        sql.append("     ,array (");
        sql.append("         select");
        sql.append("             c.technic_class_contracted_name");
        sql.append("         from");
        sql.append("             data_reservation_detail a");
        sql.append("                 join mst_technic b using (technic_id)");
        sql.append("                 join mst_technic_class c using (technic_class_id)");
        sql.append("         where");
        sql.append("                 a.delete_date is null");
        sql.append("             and a.shop_id = drd.shop_id");
        sql.append("             and a.reservation_no = drd.reservation_no");
        sql.append("         order by");
        sql.append("              c.display_seq");
        sql.append("             ,c.technic_class_id");
        sql.append("      ) as technic_class_name");
        sql.append(" from");
        sql.append("     data_reservation dr");
        sql.append("         inner join data_reservation_detail drd");
        sql.append("             using(shop_id, reservation_no)");
        sql.append(" where");
        sql.append("         dr.delete_date is null");
        sql.append("     and drd.delete_date is null");
        sql.append("     and dr.customer_id = " + SQLUtil.convertForSQL(customer.getCustomerID()));
        sql.append("     and drd.reservation_datetime > current_timestamp");
        sql.append(" order by");
        sql.append("     drd.reservation_datetime");
        sql.append(" limit 1");

        try {

            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

            if (rs.next()) {
                nextReserveShopID = rs.getInt("shop_id");
                nextReserveNo = rs.getInt("reservation_no");
                nextReserveDate.setText(rs.getString("next_reserve_date") + "〜");
                nextReserveMenu.setText(rs.getString("technic_class_name").replace("{", "").replace("}", ""));
            }

            changeButton.setEnabled(nextReserveDate.getText().length() > 0);

            rs.close();

        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }
    
}