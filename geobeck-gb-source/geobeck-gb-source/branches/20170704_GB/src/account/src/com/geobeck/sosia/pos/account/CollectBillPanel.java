/*
 * CollectBillPanel.java
 *
 * Created on 2006/10/18, 19:50
 */

package com.geobeck.sosia.pos.account;

import com.geobeck.sosia.pos.data.account.DataPaymentDetail;
import com.geobeck.sosia.pos.data.account.DataSalesDetail;
import com.geobeck.sosia.pos.master.company.MstStaff;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;

import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.account.*;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.util.CheckUtil;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import jp.co.flatsoft.fscomponent.*;

/**
 *
 * @author  katagiri
 */
public class CollectBillPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	/**
	 * çsÇÃçÇÇ≥
	 */
	private final int ROW_HEIGHT = 21;
	
	private	CollectBillFocusTraversalPolicy	ftp = new CollectBillFocusTraversalPolicy();
	protected CollectBill cb = new CollectBill();
        //IVS_LVTu start add 2015/07/29 New request #41101
        protected MstShop mstShop = new MstShop();
        //IVS_PTQUANG start add 2017/05/05 New Request #61615 [gb]îÑä|âÒé˚éûÇ…ÉåÉVÅ[ÉgÇèoóÕÇµÇΩÇ¢
        protected MstReceiptSetting mstReceiptSetting = null;
        private static String MESSAGE_COMFIRM_REPORT = "Ç≤ì¸ã‡ämîFèëÇàÛç¸ÇµÇ‹Ç∑Ç©ÅH";
        //IVS_PTQUANG  end add 2017/05/05 New Request #61615 [gb]îÑä|âÒé˚éûÇ…ÉåÉVÅ[ÉgÇèoóÕÇµÇΩÇ¢

        public MstShop getMstShop() {
            return mstShop;
        }

        public void setMstShop(MstShop mstShop) {
            this.mstShop = mstShop;
        }

        public CollectBill getCb() {
            return cb;
        }

        public void setCb(CollectBill cb) {
            this.cb = cb;
        }
        //IVS_LVTu end add 2015/07/29 New request #41101
	
        private BillsList bl = new BillsList();
        private Integer customerID=null;
	
	/** Creates new form CollectBillPanel */
	public CollectBillPanel()
	{
		super();
		initComponents();
		addMouseCursorChange();
		this.setSize(604, 700);//348
		this.setListener();
		this.setPath("ê∏éZä«óù");
		this.setTitle("îÑä|ã‡âÒé˚");
               
	}
	
	public CollectBillPanel(Component opener)
	{
		this.setOpener(opener);
		initComponents();
		addMouseCursorChange();
		this.setSize(710, 700);//368
		this.setListener();
		this.setPath("ê∏éZä«óù");
		this.setTitle("îÑä|ã‡âÒé˚");
                
                
	}
        public void init1(BillsList bl  )
	{
		this.showCollectedBillData(bl);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        billValueLabel = new javax.swing.JLabel();
        slipNoLabel = new javax.swing.JLabel();
        slipNo = new com.geobeck.swing.JFormattedTextFieldEx();
        customerLabel = new javax.swing.JLabel();
        paymentDateLabel = new javax.swing.JLabel();
        registButton = new javax.swing.JButton();
        salesDateLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        paymentsScrollPane = new javax.swing.JScrollPane();
        payments = new com.geobeck.swing.JTableEx();
        paymentDate = new FSCalenderCombo(SystemInfo.getSystemDate());
        billValue = new com.geobeck.swing.JFormattedTextFieldEx();
        salesDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        totalsScrollPane = new javax.swing.JScrollPane();
        totals = new javax.swing.JTable();
        customerName = new com.geobeck.swing.JFormattedTextFieldEx();
        customerNo = new com.geobeck.swing.JFormattedTextFieldEx();
        staff = new javax.swing.JComboBox();
        backButton = new javax.swing.JButton();
        slipNoLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        collects = new javax.swing.JTable();

        billValueLabel.setText("îÑä|ã‡äz");

        slipNoLabel.setText("ì`ï[No.");

        slipNo.setEditable(false);
        slipNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        customerLabel.setText("å⁄ãq");

        paymentDateLabel.setText("âÒé˚ì˙");

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setContentAreaFilled(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        salesDateLabel.setText("îÑè„ì˙");

        jLabel1.setText("ämîFé“");

        paymentsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        payments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "éxï•ãÊï™", "éxï•ï˚ñ@", "ã‡äz"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        payments.setSelectionBackground(new java.awt.Color(220, 220, 220));
        payments.setSelectionForeground(new java.awt.Color(0, 0, 0));
        JTableHeader paymentsHeader = payments.getTableHeader();
        paymentsHeader.setReorderingAllowed(false);
        paymentsHeader.setBackground(new Color(40, 60, 80));
        payments.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(payments);
        payments.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                paymentsFocusGained(evt);
            }
        });
        payments.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                paymentsPropertyChange(evt);
            }
        });
        payments.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                paymentsKeyPressed(evt);
            }
        });
        paymentsScrollPane.setViewportView(payments);

        paymentDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        paymentDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                paymentDateFocusLost(evt);
            }
        });

        billValue.setEditable(false);
        billValue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        billValue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        salesDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        salesDate.setEditable(false);

        totalsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        totals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"åªã‡éxï•",  new Long(0)},
                {"ÉJÅ[Éhéxï•",  new Long(0)},
                {"êMîÃéxï•",  new Long(0)},
                {"Ç®íﬁÇË",  new Long(0)}
            },
            new String [] {
                "çÄñ⁄", "ã‡äz"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        totals.setSelectionBackground(new java.awt.Color(220, 220, 220));
        totals.setSelectionForeground(new java.awt.Color(0, 0, 0));
        totals.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(totals, SystemInfo.getTableHeaderRenderer());
        totals.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(totals);
        totalsScrollPane.setViewportView(totals);

        customerName.setEditable(false);
        customerName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        customerNo.setEditable(false);
        customerNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        staff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffActionPerformed(evt);
            }
        });

        backButton.setIcon(SystemInfo.getImageIcon("/button/common/back_off.jpg"));
        backButton.setBorderPainted(false);
        backButton.setContentAreaFilled(false);
        backButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/back_on.jpg"));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        slipNoLabel1.setText("éxï•óöó ");

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        collects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "âÒé˚ì˙", "ÉåÉWíSìñ", "âÒé˚ã‡äz", "îÑä|éc"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        collects.setSelectionForeground(new java.awt.Color(0, 0, 0));
        collects.getTableHeader().setReorderingAllowed(false);
        collects.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        SwingUtil.setJTableHeaderRenderer(collects, SystemInfo.getTableHeaderRenderer());
        collects.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(collects);
        jScrollPane1.setViewportView(collects);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(slipNoLabel)
                            .add(customerLabel)
                            .add(billValueLabel))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(slipNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(67, 67, 67)
                                .add(salesDateLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(salesDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(billValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(customerNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 101, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(customerName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 214, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(layout.createSequentialGroup()
                        .add(paymentDateLabel)
                        .add(18, 18, 18)
                        .add(paymentDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(48, 48, 48)
                        .add(jLabel1)
                        .add(18, 18, 18)
                        .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 275, Short.MAX_VALUE)
                        .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(paymentsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(totalsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 249, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 279, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(slipNoLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(salesDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(2, 2, 2)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(slipNoLabel)
                            .add(slipNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(salesDateLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(customerLabel)
                            .add(customerNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(customerName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(billValueLabel)
                            .add(billValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(29, 29, 29)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(paymentDateLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(paymentDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(registButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(paymentsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .add(totalsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .add(25, 25, 25)
                .add(slipNoLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void paymentsPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_paymentsPropertyChange
	{//GEN-HEADEREND:event_paymentsPropertyChange
		this.changePaymentValue();
	}//GEN-LAST:event_paymentsPropertyChange

	private void paymentDateFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_paymentDateFocusLost
	{//GEN-HEADEREND:event_paymentDateFocusLost
		this.changePaymentDate();
	}//GEN-LAST:event_paymentDateFocusLost

	private void staffActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_staffActionPerformed
	{//GEN-HEADEREND:event_staffActionPerformed
		this.changeStaff();
	}//GEN-LAST:event_staffActionPerformed

	private void registButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_registButtonActionPerformed
	{//GEN-HEADEREND:event_registButtonActionPerformed

            //IVS_TMTrong start add 2015/08/31 Bug #42352
            //if( payments.getCellEditor() != null ) payments.getCellEditor().stopCellEditing();
            if(payments.isEditing())
            {
                 payments.getCellEditor().stopCellEditing();
            }
             changePaymentValue();
            //IVS_TMTrong end add 2015/08/31 Bug #42352
            if (this.checkInput()) {
                //IVS_PTQUANG start add 2017/05/05 New Request #61615 [gb]îÑä|âÒé˚éûÇ…ÉåÉVÅ[ÉgÇèoóÕÇµÇΩÇ¢
                boolean checkData = loadMstReceiptSetting();
                boolean comfirmMessage = comfirmMessageDialog();
                if (checkData == true && comfirmMessage == true)
                {
                    try {
                        this.regist();
                        // Print Report
                        printMstReceiptSetting();
                    } catch (Exception ex) {
                        Logger.getLogger(CollectBillPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else
                {
                    this.regist();
                }
                //IVS_PTQUANG end add 2017/05/05 New Request #61615 [gb]îÑä|âÒé˚éûÇ…ÉåÉVÅ[ÉgÇèoóÕÇµÇΩÇ¢
            }
	}//GEN-LAST:event_registButtonActionPerformed

		//IVS_PTQUANG start add 2017/05/05 New Request #61615 [gb]îÑä|âÒé˚éûÇ…ÉåÉVÅ[ÉgÇèoóÕÇµÇΩÇ¢
        /**
         * 
         * @return 
         */
        private boolean loadMstReceiptSetting() {
            // check exists shop_id in mst_receipt_setting
            boolean checkExists = false;
            if (mstReceiptSetting == null) {
                mstReceiptSetting = new MstReceiptSetting();
                try {
                    ConnectionWrapper con = SystemInfo.getConnection();
                    mstReceiptSetting.setShop(mstShop);
                    checkExists = mstReceiptSetting.isExists(con);
                } catch(SQLException sqlex) {
                    Logger.getLogger(CollectBillPanel.class.getName()).log(Level.SEVERE, null, sqlex);
                }
                catch(NullPointerException nullex) {
                    Logger.getLogger(CollectBillPanel.class.getName()).log(Level.SEVERE, null, nullex);
                }
                catch(Exception ex) {
                    Logger.getLogger(CollectBillPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            return checkExists;
        }

        /**
         *
         */
        private boolean comfirmMessageDialog(){
            int flag = 0;
            int result = MessageDialog.showYesNoDialog(this,
                    MESSAGE_COMFIRM_REPORT,
                    this.getTitle(),
                    JOptionPane.QUESTION_MESSAGE,
                    JOptionPane.YES_OPTION);
            return flag == result;
        }

        /**
         *
         */
        public void printMstReceiptSetting() throws Exception {
            PrintReceipt pr = new PrintReceipt();
            if (!pr.canPrint()) {
                return;
            }
            if (!(pr.getReceiptSetting().getReceiptSize().equals(2))) {
               printReceiptGeneral(pr);
            }
        }

        /**
         * 
         * @param pr
         * @throws Exception 
         */
        private void printReceiptGeneral(PrintReceipt pr) throws Exception {
            // set value Customer
            pr.setCustomer(cb.getSales().getCustomer());
            // set value for ëÂå≥ÇÃì`ï[No
            pr.setSlipNo(cb.getSales().getSlipNo());
            // set value for ëÂå≥ÇÃîÑè„ì˙
            pr.setSalesDate(cb.getSales().getSalesDate());
            // set value for îÑä|âÒé˚ì˙
            pr.setPaymentDate(paymentDate.getDate());
            // set value for îÑä|âÒé˚ämîFé“
            pr.setStaff(((MstStaff)staff.getSelectedItem()));
            // set value for âÒé˚ëOÇÃécçÇ
            pr.setTotalAmount(cb.getTotal(0).value);
            // set value for âÒé˚ã‡äz
            pr.setOutOfValue(getPaymentDetails());
            // set value for Ç®íﬁÇË
            pr.setPrevAmount(cb.getTotal(5).getValue() > 0 ? cb.getTotal(5).getValue() : 0);
            // set value for îÑä|âÒé˚å„ÇÃécçÇ
            pr.setUseAmount(cb.getTotal(5).getValue() < 0 ? Math.abs(cb.getTotal(5).getValue()):0);
            //
            pr.setCashValue(cb.getPayment().get(0).getPaymentValue());
            //
            pr.setCardTitle(payments.getValueAt(1, 0).toString());
            pr.setCardValue(cb.getTotal(2).getValue());
            //
            pr.seteCashTitle(payments.getValueAt(2, 0).toString());
            pr.setECashValue(cb.getTotal(3).getValue());
            //
            pr.setGiftTitle(payments.getValueAt(3, 0).toString());
            pr.setGiftValue(cb.getTotal(4).getValue());
            pr.add(new ReceiptData());

        	switch (pr.getReceiptSetting().getReceiptSize()) {
            	case 0:
               		pr.setReceiptType(PrintReceipt.ReceiptType.LARGE);
                	break;
            	case 1:
                	pr.setReceiptType(PrintReceipt.ReceiptType.NORMAL);
                	break;
        	}
        	pr.print(true);
    	}

    /**
     *
     * @return 
     */
    private Long getPaymentDetails() {
        return cb.getTotal(1).getValue().longValue() + cb.getTotal(2).getValue().longValue() + cb.getTotal(3).getValue().longValue() + cb.getTotal(4).getValue().longValue();
    }
	//IVS_PTQUANG end add 2017/05/05 New Request #61615 [gb]îÑä|âÒé˚éûÇ…ÉåÉVÅ[ÉgÇèoóÕÇµÇΩÇ¢

    private void paymentsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentsKeyPressed
        if(payments.getSelectedRow() == payments.getRowCount() - 1 &&
            payments.getSelectedColumn() == 2 &&
            evt.getKeyCode() == evt.VK_ENTER)
        {
            if(registButton.isVisible())
            {
                registButton.requestFocusInWindow();
                payments.setColumnSelectionAllowed( false );
                payments.setRowSelectionAllowed( false );
            }
        }
    }//GEN-LAST:event_paymentsKeyPressed

    private void paymentsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_paymentsFocusGained
        payments.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_paymentsFocusGained

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.showOpener();
    }//GEN-LAST:event_backButtonActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private com.geobeck.swing.JFormattedTextFieldEx billValue;
    private javax.swing.JLabel billValueLabel;
    private javax.swing.JTable collects;
    private javax.swing.JLabel customerLabel;
    private com.geobeck.swing.JFormattedTextFieldEx customerName;
    private com.geobeck.swing.JFormattedTextFieldEx customerNo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    protected jp.co.flatsoft.fscomponent.FSCalenderCombo paymentDate;
    private javax.swing.JLabel paymentDateLabel;
    private com.geobeck.swing.JTableEx payments;
    private javax.swing.JScrollPane paymentsScrollPane;
    private javax.swing.JButton registButton;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo salesDate;
    private javax.swing.JLabel salesDateLabel;
    private com.geobeck.swing.JFormattedTextFieldEx slipNo;
    private javax.swing.JLabel slipNoLabel;
    private javax.swing.JLabel slipNoLabel1;
    protected javax.swing.JComboBox staff;
    private javax.swing.JTable totals;
    private javax.swing.JScrollPane totalsScrollPane;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(backButton);
		SystemInfo.addMouseCursorChange(registButton);
	}
	
	/**
	 * îÑä|âÒé˚âÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
	 * @return îÑä|âÒé˚âÊñ ópFocusTraversalPolicy
	 */
	public CollectBillFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * ÉRÉìÉ|Å[ÉlÉìÉgÇÃäeÉäÉXÉiÅ[ÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	private void setListener()
	{
		paymentDate.addKeyListener(SystemInfo.getMoveNextField());
		paymentDate.addFocusListener(SystemInfo.getSelectText());
		staff.addKeyListener(SystemInfo.getMoveNextField());
	}
	
	/**
	 * èâä˙âªèàóùÇçsÇ§ÅB
	 * @param slipNo ì`ï[No.
	 */
	public void init(Integer slipNo)
	{
		cb.init(slipNo);
		this.initStaff();
		this.initPayments();
		this.initTotal();
		this.showData();
	}
	
	/**
	 * ÉåÉWíSìñé“Çèâä˙âªÇ∑ÇÈÅB
	 */
	private void initStaff()
	{
		for(MstStaff ms : cb.getStaffs())
		{
			staff.addItem(ms);
		}
		
		staff.setSelectedIndex(0);
	}
	
	
	/**
	 * ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 */
	private void showData()
	{
		slipNo.setText(cb.getSales().getSlipNo().toString());
		salesDate.setDate(cb.getSales().getSalesDate());
		customerNo.setText(cb.getSales().getCustomer().getCustomerNo());
		customerName.setText(cb.getSales().getCustomer().getFullCustomerName());
		billValue.setText(FormatUtil.decimalFormat(cb.getBillValue()));
                
	}
        /**
	 * âÒé˚çœîÑä|ã‡ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 */
	private void showCollectedBillData(BillsList bl)
	{
            
	    SwingUtil.clearTable(collects);
	    DefaultTableModel model = (DefaultTableModel)collects.getModel();
            int customerID1=cb.getSales().getCustomer().getCustomerID();
            int slipNo1=cb.getSales().getSlipNo();
	    for(CollectedBillData cbd : bl.getCollectedBills()) {
                int customerID2=cbd.getCustomer().getCustomerID();
                int slipNo2 = cbd.getSlipNo();
		///if((customerID1==customerID2) && (slipNo1==slipNo2))
                if(customerID1==customerID2)
                {
                    Object[] rowData = { String.format("%1$tY/%1$tm/%1$td", cbd.getPaymentDate()),
					cbd.getStaff().getFullStaffName(),
					cbd.getCollectedValue(),
					cbd.getBillValue() };
                    model.addRow(rowData);
                }
	    }
	}
	
	/**
	 * éxï•ÉfÅ[É^Çèâä˙âªÇ∑ÇÈÅB
	 */
	private void initPayments()
	{
		payments.setModel(new PaymentTableModel(SystemInfo.getPaymentClasses()));
		TableColumnModel model = payments.getColumnModel();
		model.getColumn(2).setCellEditor(new LongCellEditor(new JTextField()));
		SwingUtil.setJTableHeaderRenderer(payments, SystemInfo.getTableHeaderRenderer());
		this.initPaymentCells();
		this.addNewPaymentRow(true);
	}
	
	/**
	 * éxï•ÉfÅ[É^ÇÃÉZÉãÇèâä˙âªÇ∑ÇÈÅB
	 */
	private void initPaymentCells()
	{
		SwingUtil.clearTable(payments);
		
		PaymentTableModel	model	=	(PaymentTableModel)payments.getModel();
		
		for(MstPaymentClass mpc : SystemInfo.getPaymentClasses())
		{
			JComboBox	classes	=	new JComboBox(
					new Object[]{	mpc	});
			classes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
			
			Object		methods	=	this.getPaymentMethodObject(mpc);
			
			Object[]	rowData	=	{	mpc,
										methods,
										0l	};
			model.addRow(rowData);
			
            //IVS_LVTU start edit 2017/05/09 Bug #13457 [gb]îÑä|âÒé˚âÊñ ÇÃïsîı
//			cb.getPayment().addPaymentDetail(mpc,
//					(0 == mpc.size() ? null : mpc.get(0)),
//					0l);
                    cb.getPayment().addPaymentDetail(mpc,
                            (1 == mpc.size() ? mpc.get(0) : null),
                            0l);
            //IVS_LVTU end edit 2017/05/09 Bug #13457 [gb]îÑä|âÒé˚âÊñ ÇÃïsîı
		}
	}
	
	/**
	 * éxï•ÉfÅ[É^Ç…êVãKçsÇí«â¡Ç∑ÇÈÅB
	 */
	private void addNewPaymentRow(boolean isAddData)
	{
		JComboBox	classes	=	new JComboBox();
		classes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		Object		methods	=	null;
		MstPaymentClass mpc	=	null;
		
		for(MstPaymentClass temp : SystemInfo.getPaymentClasses())
		{
			//åªã‡à»äOÇÃèÍçáÅAItemÇ…í«â¡
			if(temp.getPaymentClassID() != 1)
					classes.addItem(temp.getPaymentClassName());
			
			//1Ç¬ÇﬂÇÃÉfÅ[É^ÇÃèÍçáÅAëŒâûÇ∑ÇÈéxï•ï˚ñ@ÇÃJComboBoxÇçÏê¨
			if(classes.getItemCount() == 1)
			{
				mpc	=	temp;
				methods	=	this.getPaymentMethodObject(temp);
			}
		}
		
		//éxï•ãÊï™Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇí«â¡
		classes.addActionListener(new java.awt.event.ActionListener()
		{
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
				paymentActionPerformed(evt);
			}
		});
		
		PaymentTableModel	model	=	(PaymentTableModel)payments.getModel();
		
		model.addRow(new Object[]{	classes,
										methods,
										0l	});
		
		if(isAddData)
		{
            //IVS_LVTU start edit 2017/05/09 Bug #13457 [gb]îÑä|âÒé˚âÊñ ÇÃïsîı
//			cb.getPayment().addPaymentDetail(mpc,
//					(0 == mpc.size() ? null : mpc.get(0)),
//					0l);
                    cb.getPayment().addPaymentDetail(mpc,
                            (1 == mpc.size() ? mpc.get(0) : null),
                            0l);
            //IVS_LVTU end edit 2017/05/09 Bug #13457 [gb]îÑä|âÒé˚âÊñ ÇÃïsîı
		}
	}
	
	private class PaymentTableModel extends DefaultTableModel
	{
		MstPaymentClasses mpcs	=	null;
		
		/**
		 * ÉRÉìÉXÉgÉâÉNÉ^
		 * @param mpcs 
		 */
		public PaymentTableModel(MstPaymentClasses mpcs)
		{
			super(new String[]{"éxï•ãÊï™", "éxï•ï˚ñ@", "ã‡äz"}, 0);
			this.mpcs = mpcs;
			if(this.mpcs == null)
					this.mpcs	=	new MstPaymentClasses();
		}
		
		/**
		 * óÒÇÃÉNÉâÉXÇéÊìæ
		 * @param col óÒ
		 * @return 
		 */
		public Class getColumnClass(int col)
		{
			if(col < 0)	return	null;
			return	this.getValueAt(0, col).getClass();
		}
		
		/**
		 * ÉZÉãÇÃÉfÅ[É^Ç™ïœçXâ¬î\Ç©ÇéÊìæÇ∑ÇÈÅB
		 * @param row çs
		 * @param col óÒ
		 * @return true - ïœçXâ¬î\
		 */
		public boolean isCellEditable(int row, int col)
		{
			//éxï•ãÊï™å≈íËçsÇÃèÍçá
			if(col == 0 && row < mpcs.size())
			{
				return	false;
			}
			//åªã‡à»äOÇÃèÍçá
			if(col == 1 && this.getValueAt(row, col).getClass().getName().equals("java.lang.String"))
			{
				return	false;
			}
			
			return	true;
		}
	}
	
	
	/**
	 * éxï•ÉfÅ[É^Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
	 * @param evt 
	 */
	public void paymentActionPerformed(java.awt.event.ActionEvent evt)
	{
		int			row		=	payments.getSelectedRow();
		int			col		=	payments.getSelectedColumn();
		
		MstPaymentClass		mpc		=	null;
		MstPaymentMethod	mpm		=	null;
		
		//éxï•ãÊï™å≈íËçsÇÃèÍçá
		if(0 <= row && row < SystemInfo.getPaymentClasses().size())
		{
			mpc	=	SystemInfo.getPaymentClasses().get(row);
		}
		else
		{
			JComboBox	mpccb	=	(JComboBox)payments.getValueAt(row, 0);
			mpccb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
			int			index	=	mpccb.getSelectedIndex() + 1;
			
			if(0 < index && index <= SystemInfo.getPaymentClasses().size())
			{
				mpc	=	SystemInfo.getPaymentClasses().get(index);
			}
		}
		
		switch(col)
		{
			//éxï•ãÊï™
			case 0:
				if(mpc != null)
				{
					Object	methods	=	this.getPaymentMethodObject(mpc);
					
					payments.setValueAt(methods, row, 1);
                    //IVS_LVTU start add 2017/05/09 Bug #13457 [gb]îÑä|âÒé˚âÊñ ÇÃïsîı
                    if (mpc.size() == 1) {
                    	mpm = mpc.get(0);
                    }
                    //IVS_LVTU end add 2017/05/09 Bug #13457 [gb]îÑä|âÒé˚âÊñ ÇÃïsîı
				}
				break;
			//éxï•ï˚ñ@
			case 1:
				if(mpc != null && mpc.size() != 0)
				{
					if(mpc.size() == 1)
					{
						mpm	=	mpc.get(0);
					}
					else
					{
						JComboBox	mpccb	=	(JComboBox)payments.getValueAt(row, 1);
						mpccb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
						int			index	=	mpccb.getSelectedIndex() - 1;
						
						if(0 <= index && index < mpc.size())
						{
							mpm	=	mpc.get(index);
						}
					}
				}
				
				break;
		}
		
		Long	value	=	(Long)payments.getValueAt(row, 2);
		
		cb.getPayment().setPaymentDetail(row, mpc, mpm, value);
		
		this.setTotal();
	}
	
	/**
	 * éxï•ï˚ñ@ÇÃÉZÉãÇ…ÉZÉbÉgÇ∑ÇÈÉIÉuÉWÉFÉNÉgÇéÊìæÇ∑ÇÈÅB
	 * @param mpc éxï•ãÊï™
	 * @return éxï•ï˚ñ@ÇÃÉZÉãÇ…ÉZÉbÉgÇ∑ÇÈÉIÉuÉWÉFÉNÉg
	 */
	private Object getPaymentMethodObject(MstPaymentClass mpc)
	{
		Object	methods	=	null;
		
		if(mpc.size() == 0)
		{
			methods	=	"";
		}
		else if(mpc.size() == 1)
		{
			methods	=	mpc.get(0).getPaymentMethodName();
		}
		else
		{
			methods	=	new JComboBox();
			((JComboBox)methods).setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
			((JComboBox)methods).addItem(new MstPaymentMethod());
			for(MstPaymentMethod mpm : mpc)
			{
				((JComboBox)methods).addItem(mpm.getPaymentMethodName());
			}
			
			//éxï•ï˚ñ@Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇí«â¡
			((JComboBox)methods).addActionListener(new java.awt.event.ActionListener()
			{
				public void actionPerformed(java.awt.event.ActionEvent evt)
				{
					paymentActionPerformed(evt);
				}
			});
		}
		
		return	methods;
	}
	
	
	/**
	 * çáåvÇèâä˙âªÇ∑ÇÈÅB
	 */
	private void initTotal()
	{
		DefaultTableModel	model	=	(DefaultTableModel)totals.getModel();
		
		//ëSçsçÌèú
		model.setRowCount(0);
		totals.removeAll();
		
		for(NameValue nv : cb.getTotal())
		{
			model.addRow(new Object[]{	nv.getName(),
											0l	});
		}
		
		this.setTotal();
	}
	
	/**
	 * çáåvÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	private void setTotal()
	{
		cb.setTotal();
		
		int	row	=	0;
		
		for(NameValue nv : cb.getTotal())
		{
			totals.setValueAt(nv.value, row, 1);
			row	++;
		}
	}
	
	/**
	 * âÒé˚ì˙Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
	 */
	private void changePaymentDate()
	{
		cb.getPayment().setPaymentDate(paymentDate.getDate());
	}
	
	/**
	 * ÉXÉ^ÉbÉtÇ™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
	 */
	private void changeStaff()
	{
		cb.getPayment().setStaff((MstStaff)staff.getSelectedItem());
		payments.requestFocusInWindow();
		payments.setColumnSelectionInterval( 2, 2 );
		payments.setRowSelectionInterval( 0, 0 );
	}
	
	/**
	 * éxï•ã‡äzÇ™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
	 */
	private void changePaymentValue()
	{
		int	row		=	payments.getSelectedRow();
		int	col		=	payments.getSelectedColumn();
		
		if(row < 0 || col < 0)	return;
		
		//éxï•ã‡äzÇÃóÒÇÃèÍçá
                //IVS_TMTrong start add 2015/08/31 Bug #42352
                for( int i = 0;i<payments.getModel().getRowCount();i++) {
                //IVS_TMTrong end add 2015/08/31 Bug #42352
                    row = i;
		if(col == 2)
		{
			Long	value	=	(Long)payments.getValueAt(row, col);
                       
			if(value == null)
			{
				payments.setValueAt(0l, row, col);
				value	=	0l;
			}
			
			if(0 < value && row == payments.getRowCount() - 1)
			{
				this.addNewPaymentRow(true);
			}
                        
                       
			//if(cb.getPayment().size()>0)
                        //{
                            DataPaymentDetail	dpd	=	cb.getPayment().get(row);
			
                            if(dpd != null)	dpd.setPaymentValue(value);
                        //}
		}
                }
		this.setTotal();
	}
	
	/**
	 * ì¸óÕÉ`ÉFÉbÉNÇçsÇ§ÅB
	 * @return true - ÇnÇj
	 */
	private boolean checkInput()
	{
		if(paymentDate.getDate() == null)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY,
					"âÒé˚ì˙"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			paymentDate.requestFocusInWindow();
			return	false;
		}
		
		GregorianCalendar	today	=	new GregorianCalendar();
		today.set(today.HOUR, 0);
		today.set(today.MINUTE, 0);
		today.set(today.SECOND, 0);
		today.set(today.MILLISECOND, 0);
		
		if(paymentDate.getDate().getTime() < salesDate.getDate().getTime() ||
				today.getTimeInMillis() < paymentDate.getDate().getTime())
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG,
					"âÒé˚ì˙"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			paymentDate.requestFocusInWindow();
			return	false;
		}
		
		//ämîFé“
		if(staff.getSelectedIndex() == 0)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY,
					"ämîFé“"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			staff.requestFocusInWindow();
			return	false;
		}

		//éxï•ã‡äz
		Long	temp	=	0l;
		for(int i = 1; i < cb.getTotal().size() - 1; i ++)
		{
			temp	+=	cb.getTotal(i).getValue();
		}
		if(temp <= 0)
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY,
					"éxï•ã‡äz"),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			payments.requestFocusInWindow();
			return	false;
		}
                //IVS_TMTrong start add 2015/08/28 Bug #42352
                Long cardAndECashAmount = 0l;
                Long cardAmount = (Long)totals.getValueAt(2, 1);
                Long ECashAmount = (Long)totals.getValueAt(3, 1);
                cardAndECashAmount = cardAmount + ECashAmount;
                
                //temp	-=	cb.getTotal(1).getValue();
                //if(cb.getBillValue() < temp)
                if(cb.getBillValue() < cardAndECashAmount)
                //IVS_TMTrong end add 2015/08/28 Bug #42352
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(3100),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			payments.requestFocusInWindow();
			return	false;

                    }

            //IVS_LVTU start add 2017/05/09 Bug #13457 [gb]îÑä|âÒé˚âÊñ ÇÃïsîı
            for (DataPaymentDetail dpd : cb.getPayment()) {
                if (dpd.getPaymentValue() != null && 0 < dpd.getPaymentValue()) {
                    if (dpd.getPaymentMethod() == null
                            || dpd.getPaymentMethod().getPaymentMethodID() == null) {
                        MessageDialog.showMessageDialog(this,
                                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "éxï•ï˚ñ@"),
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                        return false;
                    }

                    if (dpd.getPaymentMethod().getPaymentClassID() == null) {
                        MessageDialog.showMessageDialog(this,
                                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "éxï•ãÊï™"),
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                }
            }
            //IVS_LVTU end add 2017/05/09 Bug #13457 [gb]îÑä|âÒé˚âÊñ ÇÃïsîı

		return	true;
	}
	
	/**
	 * ìoò^èàóùÇçsÇ§ÅB
	 */
	protected void regist()
	{
		//IVS_LVTu start edit 2015/07/29 New request #41101
                if ( this.getMstShop().getShopID() == null ) {
		cb.getPayment().setShop(SystemInfo.getCurrentShop());
                } else {
                    cb.getPayment().setShop(this.getMstShop());
                }
                //IVS_LVTu end edit 2015/07/29 New request #41101
		cb.getPayment().setPaymentDate(paymentDate.getDate());
		cb.getPayment().setStaff((MstStaff)staff.getSelectedItem());
		
		if(cb.regist())
		{
			if(this.getOpener() instanceof BillsListPanel)
			{
				BillsListPanel	blp	=	(BillsListPanel)this.getOpener();
				blp.init();
			}
			else if(this.getOpener() instanceof InputAccountPanel)
			{
				InputAccountPanel	iap	=	(InputAccountPanel)this.getOpener();
				iap.setBill();
			}
			
			this.showOpener();
		}
		else
		{
			
		}
	}
	
	
	/**
	 * îÑä|âÒé˚âÊñ ópFocusTraversalPolicy
	 */
	private class CollectBillFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(slipNo))
			{
				return paymentDate;
			}
			else if (aComponent.equals(salesDate))
			{
				return paymentDate;
			}
			else if (aComponent.equals(customerNo))
			{
				return paymentDate;
			}
			else if (aComponent.equals(customerName))
			{
				return paymentDate;
			}
			else if (aComponent.equals(billValue))
			{
				return paymentDate;
			}
			else if (aComponent.equals(paymentDate))
			{
				return staff;
			}
			else if (aComponent.equals(staff))
			{
				return payments;
			}
			
			return slipNo;
		}

		/**
		 * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(slipNo))
			{
				return slipNo;
			}
			else if (aComponent.equals(slipNo))
			{
				return slipNo;
			}
			else if (aComponent.equals(customerNo))
			{
				return slipNo;
			}
			else if (aComponent.equals(customerName))
			{
				return slipNo;
			}
			else if (aComponent.equals(billValue))
			{
				return slipNo;
			}
			else if (aComponent.equals(paymentDate))
			{
				return slipNo;
			}
			else if (aComponent.equals(staff))
			{
				return paymentDate;
			}
			
			return slipNo;
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer êÊì™ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return slipNo;
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer aContainer - ç≈å„ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return payments;
		}

		/**
		 * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
		 * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return slipNo;
		}
		
		/**
		 * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * show() Ç‹ÇΩÇÕ setVisible(true) ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA
		 * èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
		 * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA
		 * Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
		 * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
		 * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
		 */
		public Component getInitialComponent(Window window)
		{
			return slipNo;
		}
	}
}
