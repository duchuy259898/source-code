/*
 * SearchAccountPanel.java
 *
 * Created on 2006/10/18, 18:50
 */

package com.geobeck.sosia.pos.account;

import com.geobeck.sosia.pos.data.account.DataSales;
import com.geobeck.sosia.pos.master.account.MstPaymentClass;
import com.geobeck.sosia.pos.search.account.*;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;
import java.text.NumberFormat;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.hair.report.util.*;
import com.geobeck.sosia.pos.hair.customer.*;

/**
 *
 * @author  katagiri
 */
public class SearchAccountPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	/**
	 * ÉeÅ[ÉuÉãÇÃïùÇÃç≈è¨íl
	 */
	protected final int TABLE_WIDTH_MIN = 440;
	
	protected MstStaffs staffs = null;

        private boolean isLoading = false;

	/** Creates new form SearchAccountPanel */
	public SearchAccountPanel()
	{
		super();

                isLoading = true;

		initComponents();
		addMouseCursorChange();
		SystemInfo.initGroupShopComponents(shop, 2);
                this.setSize(835, 696);
		this.setPath("ê∏éZä«óù");
		this.setTitle("ì`ï[åüçı");
		this.initStaff( staff );
                this.initStaff( chargeStaff );
		this.setListener();

                this.salesDate1.setDate(this.getSelectedShop().getSystemDate().getTime());
                this.salesDate2.setDate(this.getSelectedShop().getSystemDate().getTime());

                this.initTableColumnWidth();
		this.init();

                isLoading = false;
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customerNo1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)customerNo1.getDocument()).setDocumentFilter(
            new CustomFilter(15, CustomFilter.ALPHAMERIC));
        excelButton = new javax.swing.JButton();
        paymentClassPanel = new javax.swing.JPanel();
        customerIDLabel = new javax.swing.JLabel();
        customerNo2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)customerNo2.getDocument()).setDocumentFilter(
            new CustomFilter(15, CustomFilter.ALPHAMERIC));
        salesDate2 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        selectButton = new javax.swing.JButton();
        salesDate1 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        slipNo2 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)slipNo2.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        toLabel3 = new javax.swing.JLabel();
        toLabel1 = new javax.swing.JLabel();
        paymentClassLabel = new javax.swing.JLabel();
        toLabel2 = new javax.swing.JLabel();
        staff = new javax.swing.JComboBox();
        staffLabel = new javax.swing.JLabel();
        slipNo1 = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)slipNo1.getDocument()).setDocumentFilter(
            new CustomFilter(9, CustomFilter.NUMERIC));
        accountsScrollPane = new javax.swing.JScrollPane();
        searchResult = new com.geobeck.swing.JTableEx();
        searchButton = new javax.swing.JButton();
        slipNoLabel = new javax.swing.JLabel();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        staffLabel1 = new javax.swing.JLabel();
        chargeStaff = new javax.swing.JComboBox();
        chargeStaffNo = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)customerNo1.getDocument()).setDocumentFilter(
            new CustomFilter(15, CustomFilter.ALPHAMERIC));
        accountTotalScrollPane = new javax.swing.JScrollPane();
        accountTotal = new javax.swing.JTable();
        staffNo = new javax.swing.JTextField();
        checkSalesDate = new javax.swing.JCheckBox();
        staffLabel3 = new javax.swing.JLabel();
        checkKarte1 = new javax.swing.JCheckBox();
        checkKarte2 = new javax.swing.JCheckBox();
        paymentClassLabel1 = new javax.swing.JLabel();
        staffLabel4 = new javax.swing.JLabel();
        sort = new javax.swing.JComboBox();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        customerNo1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerNo1.setColumns(15);

        excelButton.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        excelButton.setBorderPainted(false);
        excelButton.setContentAreaFilled(false);
        excelButton.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        excelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelButtonActionPerformed(evt);
            }
        });

        paymentClassPanel.setOpaque(false);
        paymentClassPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 3));

        customerIDLabel.setText("å⁄ãqNo.");

        customerNo2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerNo2.setColumns(15);

        salesDate2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        salesDate2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                salesDate2FocusGained(evt);
            }
        });

        selectButton.setIcon(SystemInfo.getImageIcon("/button/select/select_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setContentAreaFilled(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        salesDate1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        salesDate1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                salesDate1FocusGained(evt);
            }
        });

        slipNo2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        slipNo2.setColumns(9);
        slipNo2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        toLabel3.setText("Å`");

        toLabel1.setText("Å`");

        paymentClassLabel.setText(" éxï•ãÊï™");

        toLabel2.setText("Å`");

        staff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffActionPerformed(evt);
            }
        });

        staffLabel.setText("ÉåÉWíSìñé“");

        slipNo1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        slipNo1.setColumns(9);
        slipNo1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        accountsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        this.initPaymentClass();

        searchResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "çÌ", "îÑè„ì˙", "éÛïtNo.", "ì`ï[No.", "å⁄ãqèÓïÒ", "å⁄ãqNo.", "å⁄ãqñº", "éÂíSìñ", "éw", "ÉåÉWíSìñ", "<html>êøãÅ<br>ã‡äz</html>", "<html>åªã‡<br>éxï•</html>", "<html>åªã‡<br>à»äO</html>", "<html>îÑä|<br>ã‡äz</html>", "çHíˆ", "∂Ÿ√"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        searchResult.setSelectionBackground(new java.awt.Color(255, 210, 142));
        searchResult.setSelectionForeground(new java.awt.Color(0, 0, 0));
        searchResult.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        searchResult.getTableHeader().setReorderingAllowed(false);
        searchResult.setDefaultRenderer(String.class, new SearchAccountTableCellRenderer());
        SwingUtil.setJTableHeaderRenderer(searchResult, SystemInfo.getTableHeaderRenderer());
        searchResult.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        searchResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchResultMouseClicked(evt);
            }
        });
        accountsScrollPane.setViewportView(searchResult);

        searchButton.setIcon(SystemInfo.getImageIcon("/button/search/search_off.jpg"));
        searchButton.setBorderPainted(false);
        searchButton.setContentAreaFilled(false);
        searchButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_on.jpg"));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        slipNoLabel.setText(" ì`ï[No.");

        shopLabel.setText("ìXï‹");

        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        staffLabel1.setText("éÂíSìñé“");

        chargeStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        chargeStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargeStaffActionPerformed(evt);
            }
        });

        chargeStaffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        chargeStaffNo.setColumns(15);
        chargeStaffNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                chargeStaffNoFocusLost(evt);
            }
        });

        accountTotalScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        accountTotalScrollPane.setFocusable(false);

        accountTotal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, new Long(0), new Long(0), new Long(0), new Long(0)}
            },
            new String [] {
                "åèêî", "êøãÅã‡äz", "åªã‡éxï•äz", "åªã‡à»äO", "îÑä|ã‡äz"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        accountTotal.setFocusable(false);
        accountTotal.setRequestFocusEnabled(false);
        accountTotal.setRowSelectionAllowed(false);
        accountTotal.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(accountTotal, SystemInfo.getTableHeaderRenderer());
        accountTotal.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(accountTotal);
        accountTotalScrollPane.setViewportView(accountTotal);

        staffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staffNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                staffNoFocusLost(evt);
            }
        });

        checkSalesDate.setSelected(true);
        checkSalesDate.setText(" îÑè„ì˙");
        checkSalesDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkSalesDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkSalesDate.setOpaque(false);
        checkSalesDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSalesDateActionPerformed(evt);
            }
        });

        staffLabel3.setText("ÉJÉãÉeèÓïÒ");

        checkKarte1.setSelected(true);
        checkKarte1.setText("ñ¢");
        checkKarte1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkKarte1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkKarte1.setOpaque(false);

        checkKarte2.setSelected(true);
        checkKarte2.setText("çœ");
        checkKarte2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkKarte2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        checkKarte2.setOpaque(false);

        paymentClassLabel1.setText("Å¶ çÌèúì`ï[ÇÃÉåÉWíSìñé“ÅAêøãÅã‡äzÅAéxï•èÓïÒÇÕï\é¶Ç≥ÇÍÇ‹ÇπÇÒÅB");

        staffLabel4.setText("ï\é¶èá");

        sort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "îÑè„ì˙", "éÛïtNo.", "ì`ï[No." }));
        sort.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, accountsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 811, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(paymentClassLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 356, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 75, Short.MAX_VALUE)
                        .add(accountTotalScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 380, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(checkSalesDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(shopLabel)
                                    .add(layout.createSequentialGroup()
                                        .add(17, 17, 17)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, slipNoLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, paymentClassLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(paymentClassPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 191, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, shop, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                .add(salesDate1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(slipNo1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(layout.createSequentialGroup()
                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                    .add(toLabel2))
                                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                    .add(toLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                                .add(slipNo2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(salesDate2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                            .add(searchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(107, 107, 107)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(staffLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(customerIDLabel)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, staffLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, staffLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, staffLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                    .add(customerNo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(toLabel3)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(customerNo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(1, 1, 1))
                                .add(layout.createSequentialGroup()
                                    .add(chargeStaffNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(chargeStaff, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .add(layout.createSequentialGroup()
                                .add(staffNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(checkKarte1)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(checkKarte2))
                                    .add(sort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(66, 66, 66)
                                .add(excelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(shopLabel)
                        .add(customerIDLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(customerNo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(toLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(customerNo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(checkSalesDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(staffNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(staffLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(toLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .add(salesDate2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(salesDate1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(chargeStaffNo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chargeStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(staffLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(toLabel2)
                    .add(slipNoLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(slipNo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(slipNo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(checkKarte1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(checkKarte2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(staffLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(staffLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(sort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(excelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(layout.createSequentialGroup()
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(paymentClassPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(paymentClassLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(3, 3, 3)
                                    .add(searchButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 7, Short.MAX_VALUE)))
                .add(accountsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 473, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(paymentClassLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(accountTotalScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // çƒåüçı
        this.searchButtonActionPerformed(null);
    }//GEN-LAST:event_formComponentShown

    private void excelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelButtonActionPerformed
        excelButton.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            this.outputExcel();
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_excelButtonActionPerformed
    
    private void checkSalesDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSalesDateActionPerformed

        salesDate1.setEnabled(checkSalesDate.isSelected());
        salesDate2.setEnabled(checkSalesDate.isSelected());
        toLabel1.setEnabled(checkSalesDate.isSelected());
        
    }//GEN-LAST:event_checkSalesDateActionPerformed

        private void chargeStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargeStaffActionPerformed
                this.setStaffNo(chargeStaff , chargeStaffNo);
        }//GEN-LAST:event_chargeStaffActionPerformed

        private void staffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffActionPerformed
                this.setStaffNo(staff , staffNo);
        }//GEN-LAST:event_staffActionPerformed

        private void staffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_staffNoFocusLost
               this.setSelectStaff(staff,staffNo);
        }//GEN-LAST:event_staffNoFocusLost

        private void chargeStaffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chargeStaffNoFocusLost
               this.setSelectStaff(chargeStaff ,chargeStaffNo);
        }//GEN-LAST:event_chargeStaffNoFocusLost

	private void salesDate2FocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_salesDate2FocusGained
	{//GEN-HEADEREND:event_salesDate2FocusGained
		if(salesDate2.getInputContext() != null)
			salesDate2.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_salesDate2FocusGained

	private void salesDate1FocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_salesDate1FocusGained
	{//GEN-HEADEREND:event_salesDate1FocusGained
		if(salesDate1.getInputContext() != null)
			salesDate1.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_salesDate1FocusGained

	private void searchResultMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_searchResultMouseClicked
	{//GEN-HEADEREND:event_searchResultMouseClicked
            if (evt.getClickCount() == 2) {
                if (searchResult.getSelectedRowCount() > 0) {
                    
                    if (searchResult.getValueAt(searchResult.getSelectedRow(), 0).toString().equals("Åú")) {
                        MessageDialog.showMessageDialog(
                                this,
                                "çÌèúì`ï[ÇÃÇΩÇﬂï\é¶Ç≈Ç´Ç‹ÇπÇÒÅB",
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    
                    try {
                        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        this.select();
                    } finally {
                        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    }
                }
            }
	}//GEN-LAST:event_searchResultMouseClicked

	private void searchButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_searchButtonActionPerformed
	{//GEN-HEADEREND:event_searchButtonActionPerformed

                searchButton.setCursor(null);
            
                targetList.clear();
                this.searchAccount();
		
		if (0 < sa.size()) {
                    this.showAccount();
                } else {
                    SwingUtil.clearTable(searchResult);
                    accountTotal.setValueAt(0l,0,0);
                    accountTotal.setValueAt(0l,0,1);
                    accountTotal.setValueAt(0l,0,2);
                    accountTotal.setValueAt(0l,0,3);
                    accountTotal.setValueAt(0l,0,4);

                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(1112),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                }
	}//GEN-LAST:event_searchButtonActionPerformed

	private void selectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectButtonActionPerformed
	{//GEN-HEADEREND:event_selectButtonActionPerformed
            selectButton.setCursor(null);
            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                this.select();
            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
            
	}//GEN-LAST:event_selectButtonActionPerformed

        private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
            if (isLoading) return;

            this.salesDate1.setDate(this.getSelectedShop().getSystemDate().getTime());
            this.salesDate2.setDate(this.getSelectedShop().getSystemDate().getTime());

            //---------------------------------------------------------------------------------
            // initComponents() ÇÊÇËÉRÉsÅ[
            //---------------------------------------------------------------------------------
            searchResult.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                    "çÌ", "îÑè„ì˙", "éÛïtNo.", "ì`ï[No.", "å⁄ãqèÓïÒ", "å⁄ãqNo.", "å⁄ãqñº", "éÂíSìñ", "éw", "ÉåÉWíSìñ", "<html>êøãÅ<br>ã‡äz</html>", "<html>åªã‡<br>éxï•</html>", "<html>åªã‡<br>à»äO</html>", "<html>îÑä|<br>ã‡äz</html>", "çHíˆ", "∂Ÿ√"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Object.class, java.lang.Object.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, true, false, false, false, false, false, false, false, false, false, true, true
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            searchResult.setSelectionBackground(new java.awt.Color(255, 210, 142));
            searchResult.setSelectionForeground(new java.awt.Color(0, 0, 0));
            searchResult.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            searchResult.getTableHeader().setReorderingAllowed(false);
            searchResult.setDefaultRenderer(String.class, new SearchAccountTableCellRenderer());
            SwingUtil.setJTableHeaderRenderer(searchResult, SystemInfo.getTableHeaderRenderer());
            searchResult.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
            searchResult.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    searchResultMouseClicked(evt);
                }
            });
            accountsScrollPane.setViewportView(searchResult);
            //---------------------------------------------------------------------------------

            
            this.initTableColumnWidth();
            this.init();

        }//GEN-LAST:event_shopActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accountTotal;
    private javax.swing.JScrollPane accountTotalScrollPane;
    protected javax.swing.JScrollPane accountsScrollPane;
    protected javax.swing.JComboBox chargeStaff;
    protected com.geobeck.swing.JFormattedTextFieldEx chargeStaffNo;
    private javax.swing.JCheckBox checkKarte1;
    private javax.swing.JCheckBox checkKarte2;
    private javax.swing.JCheckBox checkSalesDate;
    private javax.swing.JLabel customerIDLabel;
    protected com.geobeck.swing.JFormattedTextFieldEx customerNo1;
    protected com.geobeck.swing.JFormattedTextFieldEx customerNo2;
    private javax.swing.JButton excelButton;
    private javax.swing.JLabel paymentClassLabel;
    private javax.swing.JLabel paymentClassLabel1;
    private javax.swing.JPanel paymentClassPanel;
    protected jp.co.flatsoft.fscomponent.FSCalenderCombo salesDate1;
    protected jp.co.flatsoft.fscomponent.FSCalenderCombo salesDate2;
    private javax.swing.JButton searchButton;
    protected com.geobeck.swing.JTableEx searchResult;
    private javax.swing.JButton selectButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    protected com.geobeck.swing.JFormattedTextFieldEx slipNo1;
    protected com.geobeck.swing.JFormattedTextFieldEx slipNo2;
    private javax.swing.JLabel slipNoLabel;
    protected javax.swing.JComboBox sort;
    protected javax.swing.JComboBox staff;
    private javax.swing.JLabel staffLabel;
    private javax.swing.JLabel staffLabel1;
    private javax.swing.JLabel staffLabel3;
    private javax.swing.JLabel staffLabel4;
    private javax.swing.JTextField staffNo;
    private javax.swing.JLabel toLabel1;
    private javax.swing.JLabel toLabel2;
    private javax.swing.JLabel toLabel3;
    // End of variables declaration//GEN-END:variables
	
	protected ArrayList<JCheckBox> paymentClasses	=	new ArrayList<JCheckBox>();
	
	protected SearchAccount	sa	=	new SearchAccount();
	
	protected Integer		selectedSlipNo	=	null;
	
	protected boolean		parentDialog	=	true;
  
        protected ArrayList<DataSales> targetList = new ArrayList<DataSales>();
        
        /**
	 * ñæç◊çáåv
	 */	
	protected	  AccountData	 total          =	new AccountData();
	
	/**
	 * ì`ï[åüçıâÊñ ópFocusTraversalPolicy
	 */
	protected	SearchAccountFocusTraversalPolicy	ftp	=
			new SearchAccountFocusTraversalPolicy();
	
	/**
	 * ì`ï[åüçıâÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
	 * @return ì`ï[åüçıâÊñ ópFocusTraversalPolicy
	 */
	public SearchAccountFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(searchButton);
		SystemInfo.addMouseCursorChange(selectButton);
		SystemInfo.addMouseCursorChange(excelButton);
	}
	
	/**
	 * ÉRÉìÉ|Å[ÉlÉìÉgÇÃäeÉäÉXÉiÅ[ÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	protected void setListener()
	{
		customerNo1.addKeyListener(SystemInfo.getMoveNextField());
		customerNo1.addFocusListener(SystemInfo.getSelectText());
		customerNo2.addKeyListener(SystemInfo.getMoveNextField());
		customerNo2.addFocusListener(SystemInfo.getSelectText());
		salesDate1.addKeyListener(SystemInfo.getMoveNextField());
		salesDate1.addFocusListener(SystemInfo.getSelectText());
		salesDate2.addKeyListener(SystemInfo.getMoveNextField());
		salesDate2.addFocusListener(SystemInfo.getSelectText());
		slipNo1.addKeyListener(SystemInfo.getMoveNextField());
		slipNo1.addFocusListener(SystemInfo.getSelectText());
		slipNo2.addKeyListener(SystemInfo.getMoveNextField());
		slipNo2.addFocusListener(SystemInfo.getSelectText());
		staff.addKeyListener(SystemInfo.getMoveNextField());
		staff.addFocusListener(SystemInfo.getSelectText());
                staffNo.addKeyListener(SystemInfo.getMoveNextField());
		staffNo.addFocusListener(SystemInfo.getSelectText());
                chargeStaffNo.addKeyListener(SystemInfo.getMoveNextField());
		chargeStaffNo.addFocusListener(SystemInfo.getSelectText());
		chargeStaff.addKeyListener(SystemInfo.getMoveNextField());
		chargeStaff.addFocusListener(SystemInfo.getSelectText());
 
	}
	
	/**
	 * èâä˙âªèàóùÇçsÇ§ÅB
	 */
	protected void init()
	{
		try {
                    ConnectionWrapper con = SystemInfo.getConnection();
                    sa.init(con);
		} catch(SQLException e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
                
		// ñ{ïîÇ≈ÉçÉOÉCÉìÇµÇΩèÍçáÇÕëIëÉ{É^ÉìÇîÒï\é¶Ç…Ç∑ÇÈÅB
		if (this.getSelectedShop().getShopID() == 0) {
                    selectButton.setVisible(false);
		}

                this.searchAccount();
		if( 0 < sa.size()) {
		    this.showAccount();
		}

                //à¬ï™ÇégópÇµÇ»Ç¢èÍçáÇÕçHíˆÇÃóÒÇçÌèúÇ∑ÇÈ
                if (!this.getSelectedShop().isProportionally()) {
                    searchResult.removeColumn(searchResult.getColumn("çHíˆ"));
                }
	}
	
	/**
	 * íSìñé“Çèâä˙âªÇ∑ÇÈÅB
	 */
	protected void initStaff( JComboBox cb )
	{
		cb.addItem(new MstStaff());
		SystemInfo.initStaffComponent(cb);
		
		cb.setSelectedIndex(0);
	}
	
	/**
	 * éxï•ãÊï™Çèâä˙âªÇ∑ÇÈÅB
	 */
	protected void initPaymentClass()
	{
		this.addPaymentClass("paymentClass0", "ëSÇƒ");
		
		Integer index = 1;
		
		for (MstPaymentClass mpc : sa.getPaymentClasses()) {
                    this.addPaymentClass("paymentClass" + index.toString(), mpc.getPaymentClassName());
                    index ++;
		}
	}
	
	/**
	 * éxï•ãÊï™Çí«â¡Ç∑ÇÈÅB
	 * @param caption éxï•ãÊï™ñº
	 * @param x Çòç¿ïW
	 * @param y Çôç¿ïW
	 */
	protected void addPaymentClass(String name, String caption)
	{
		JCheckBox cb = new JCheckBox(caption);
		cb.setName(name);
		cb.setOpaque(false);
		cb.addKeyListener(SystemInfo.getMoveNextField());
		cb.setFocusTraversalPolicy(this.getFocusTraversalPolicy());
		cb.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
		cb.setFocusTraversalPolicy(getFocusTraversalPolicy());
		cb.setMargin(new java.awt.Insets(0, 0, 0, 0));
		cb.setSelected(true);
		
		if(0 < paymentClasses.size())
		{
			JLabel padding = new JLabel("Å@");
			paymentClassPanel.add(padding);
		}
		paymentClassPanel.add(cb);
		paymentClasses.add(cb);
	}
	
	/**
	 * ÉtÉHÅ[ÉÄÇÃÉTÉCÉYÇ…çáÇÌÇπÇƒÉRÉìÉ|Å[ÉlÉìÉgÇÃÉTÉCÉYÇ∆à íuÇïœçXÇ∑ÇÈÅB
	 */
	protected void resizeComponets()
	{
		//ÉeÅ[ÉuÉãÇÃïùÇ∆çÇÇ≥Çê›íËÇ∑ÇÈÅB
		/*int	w	=	this.getWidth() - 32;
		int	h	=	this.getHeight() - accountsScrollPane.getY() - 45;
		if(w < TABLE_WIDTH_MIN)		w	=	TABLE_WIDTH_MIN;
		if(h < 0)		w	=	0;
		accountsScrollPane.setSize(w, h);
		searchResult.setSize(accountsScrollPane.getSize());
		
		//É{É^ÉìÇÃâEë§ÇÃÇòç¿ïWÇéÊìæÇ∑ÇÈÅB
		int	x	=	this.getWidth() - 20;
		if(x < TABLE_WIDTH_MIN + 12)		x	=	TABLE_WIDTH_MIN + 12;
		
		searchButton.setLocation(x - searchButton.getWidth(), searchButton.getY());*/
	}
	
	/**
	 * ì`ï[åüçıèàóùÇçsÇ§ÅB
	 */
	public void searchAccount()
	{
            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                
		this.setSearchCondition();
                ConnectionWrapper con = SystemInfo.getConnection();
                sa.setSortIndex(sort.getSelectedIndex());
                sa.load(con);

            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
	}
	
	/**
	 * íSìñé“ÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	private void setStaff(JComboBox cb ,String staffNo)
	{     
	    cb.setSelectedIndex(0);

	    for (int i = 1; i < cb.getItemCount(); i++) {
		if (((MstStaff)cb.getItemAt(i)).getStaffNo().equals(staffNo)) {
		    cb.setSelectedIndex(i);
		    break;
		}
	    }
	}
	/**
	 * åüçıèåèÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	public void setSearchCondition()
	{
		//ìXï‹
		sa.setShop((MstShop)shop.getSelectedItem());
		//îÑè„ì˙
                if (checkSalesDate.isSelected()) {
                    sa.setSalesDate(0, salesDate1.getDate());
                    sa.setSalesDate(1, salesDate2.getDate());
                } else {
                    sa.setSalesDate(0, null);
                    sa.setSalesDate(1, null);
                }
		//ì`ï[No.
		sa.setSlipNO(0, (slipNo1.getText().equals("") ? null : Integer.parseInt(slipNo1.getText())));
		sa.setSlipNO(1, (slipNo2.getText().equals("") ? null : Integer.parseInt(slipNo2.getText())));
		//éxï•ãÊï™
		for (int i = 0; i < paymentClasses.size(); i ++) {
                    sa.getSearchPC().set(i, paymentClasses.get(i).isSelected());
		}
		//å⁄ãqID
		sa.setCustomerNo(0, (customerNo1.getText().equals("") ? null : customerNo1.getText()));
		sa.setCustomerNo(1, (customerNo2.getText().equals("") ? null : customerNo2.getText()));
		//ÉåÉWíSìñé“
		sa.setStaff((MstStaff)staff.getSelectedItem());
		//éÂíSìñ
		sa.setChargeStaff((MstStaff)chargeStaff.getSelectedItem());
                
                // ÉJÉãÉeèÓïÒ
                sa.setKarteFlg(null);
                if (checkKarte1.isSelected() && !checkKarte2.isSelected()) {
                    sa.setKarteFlg(0);
                }
                if (!checkKarte1.isSelected() && checkKarte2.isSelected()) {
                    sa.setKarteFlg(1);
                }
	}
	
	/**
	 * åüçıåãâ Çï\é¶Ç∑ÇÈÅB
	 */
	public void showAccount()
	{
		DefaultTableModel model = (DefaultTableModel)searchResult.getModel();

		if( searchResult.getCellEditor() != null ) searchResult.getCellEditor().stopCellEditing();
		model.setRowCount(0);
		SwingUtil.clearTable(searchResult);

                AccountData total = new AccountData();
                NumberFormat nf = NumberFormat.getInstance();
                boolean isCancelCourse = false;
                for(AccountData ad : sa)
		{
                        boolean isDelete = (ad.getDeleteDate() != null);
                        isCancelCourse = isCancelCourse(ad.getSales().getSlipNo().toString(), ad.getSales().getShop().getShopID().toString());
			model.addRow(new Object[]{
                            isDelete ? "Åú" : "",
                            DateUtil.format(ad.getSales().getSalesDate(), "yyyy/MM/dd"),
                            ad.getReservationNo().equals(0) ? "" : ad.getReservationNo().toString(),
                            ad.getSales().getSlipNo().toString(),
                            getUserSearchButton(ad.getSales().getCustomer().getCustomerID()),
                            ad.getSales().getCustomer().getCustomerNo(),
                            ad.getSales().getCustomer().getFullCustomerName(),
                            ad.getChargeStaff().getFullStaffName(),
                            ad.getDesignatedFlag() ? "Åú" : "",
                            isDelete ? "" : ad.getStaff().getFullStaffName(),
                            isDelete ? "" : nf.format(ad.getTotalValue()),
                            isDelete ? "" : nf.format(ad.getPaymentValue1()),
                            isDelete ? "" : nf.format(ad.getPaymentValue2()),
                            isDelete ? "" : nf.format(ad.getBillValue()),
                            isCancelCourse==true?getProportionallyButton(ad, true):getProportionallyButton(ad, isDelete),
                            isCancelCourse==true?getMemoButton(ad, true):getMemoButton(ad, isDelete)
                            
			});
                    
                        total.addValue(ad ,ad.getPaymentTotal());

                        if (!isDelete) {
                            targetList.add(ad.getSales());
                        }
		}
                            //HorizotanAlignment right cell 
            DefaultTableCellRenderer temp = new DefaultTableCellRenderer();
            temp.setHorizontalAlignment(JLabel.LEFT);
            searchResult.getColumnModel().getColumn(2).setCellRenderer(temp);
            searchResult.getColumnModel().getColumn(3).setCellRenderer(temp);

                    //HorizotanAlignment right cell 
                showAccountTotal(total); 
	}
	 private boolean isCancelCourse(String slipNo,String shopId) {
        boolean flg = false;
        String sql = "Select * from view_data_sales_detail_valid where product_division = 8 and shop_id=" + shopId + " and slip_no=" + slipNo + "";
        ConnectionWrapper con = SystemInfo.getConnection();
        try {
            ResultSetWrapper rs = con.executeQuery(sql);
            if (rs.next()) {
                flg = true;
            }
        } catch (SQLException e) {
        }
        return flg;
        }
        /**
	 * çHíˆÉ{É^ÉìÇéÊìæÇ∑ÇÈ
	 */
	private JButton getProportionallyButton(final AccountData ad, boolean isDelete)
	{
            JButton button = new JButton();
            button.setBorderPainted(false);
            button.setContentAreaFilled(false);
            
            if (ad.getProportionallyInputCount().intValue() > 0) {
                
                button.setName("Åú");
                
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/account_change_mini_off.jpg")));
                button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/account_change_mini_on.jpg")));
            } else {

                button.setName("");
                
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/memo_add_off.jpg")));
                button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/memo_add_on.jpg")));
            }
                
            button.setSize(48, 25);

            //if (ad.getProportionallyCount() > 0) {
                button.setEnabled(!isDelete);
            //} else {
            //    button.setEnabled(false);
            //}

            //final Integer shopId = ad.getSales().getShop().getShopID();
            //final Integer slipNo = ad.getSales().getSlipNo();

            button.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    try {

                        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
                        //à¬ï™èÓïÒìoò^âÊñ ÇåƒÇ—èoÇ∑
                        RegistProportionallyPanel rpp = new RegistProportionallyPanel();
                        rpp.init(ad.getSales(), ad.getChargeStaff());
                        
                        SwingUtil.openAnchorDialog( parentFrame, true, rpp, "à¬ï™èÓïÒìoò^", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );
                        ((JDialog)rpp.getParent().getParent().getParent().getParent()).dispose();
                        rpp = null;
                        System.gc();

                        searchAccount();
                        if( 0 < sa.size()) {
                            showAccount();
                        }

                    } finally {
                        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    }
                }
            });
            return button;
	}        	

        /**
	 * ÉJÉãÉeÉ{É^ÉìÇéÊìæÇ∑ÇÈ
	 */
	private JButton getMemoButton(final AccountData ad, boolean isDelete)
	{
            JButton button = new JButton();
            button.setBorderPainted(false);
            button.setContentAreaFilled(false);
            
            if (ad.getKarteCount().intValue() > 0) {
                
                button.setName("Åú");
                
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/account_change_mini_off.jpg")));
                button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/account_change_mini_on.jpg")));
            } else {

                button.setName("");
                
                button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/memo_add_off.jpg")));
                button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/memo_add_on.jpg")));
            }
                
            button.setSize(48, 25);
            
            button.setEnabled(!isDelete);

            final Integer shopId = ad.getSales().getShop().getShopID();
            final Integer slipNo = ad.getSales().getSlipNo();

            button.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    try {

                        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
                        MstCustomerManager customer = new MstCustomerManager();
                        customer.setData(ad.getSales().getCustomer());
                        customer.loadAccounts();
                        
                        //ÉJÉãÉeèÓïÒâÊñ ÇåƒÇ—èoÇ∑
                        KarteDialog kd = null;
                        kd = new KarteDialog(shopId, slipNo, customer);
                        SwingUtil.openAnchorDialog( parentFrame, true, kd, "ÉJÉãÉeèÓïÒ", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );
                        ((JDialog)kd.getParent().getParent().getParent().getParent()).dispose();
                        kd = null;
                        System.gc();

                        searchAccount();
                        if( 0 < sa.size()) {
                            showAccount();
                        }

                    } finally {
                        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    }
                }
            });
            return button;
	}        	

	public void showAccountTotal( AccountData  total)
	{
		SwingUtil.clearTable( accountTotal );
		
		DefaultTableModel model = (DefaultTableModel)accountTotal.getModel();

                model.addRow( new Long[]{  (long)sa.size(), 
                                            total.getTotal() ,
                                            total.getPaymentValue1Total() ,
                                            total.getPaymentValue2Total() ,
                                            total.getBillTotal() });                
        }
	/**
	 * ì`ï[Ç™ëIëÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÇçsÇ§ÅB
	 */
	protected void select()
	{
            //ì`ï[Ç™ëIëÇ≥ÇÍÇƒÇ¢Ç»Ç¢èÍçáÇÕèàóùÇî≤ÇØÇÈ
            if (searchResult.getSelectedRowCount() < 1) return;

            //ëIëÇ≥ÇÍÇƒÇ¢ÇÈì`ï[No.ÇÉZÉbÉg
            this.setSelectedSlipNo(sa.get(searchResult.getSelectedRow()).getSales().getSlipNo());

            //ì`ï[åüçıÇ©ÇÁÅAì`ï[ì¸óÕÇäJÇ≠èÍçá
            if (this.isParentDialog()) {
                InputAccountPanel iap = new InputAccountPanel();
                iap.setOpener(this);
                iap.load(this.getSelectedShop(), this.getSelectedSlipNo());
                iap.showData();
                this.setVisible(false);
                parentFrame.changeContents(iap);
            } else {
                this.setVisible(false);
            }
	}
        public void setSelectStaff(JComboBox staff, JTextField staffNo){
                
	    if (!staffNo.getText().equals("")){
		this.setStaff(staff , staffNo.getText());
		this.getFocusTraversalPolicy().getComponentAfter(this,staffNo);
	    }else{
		staff.setSelectedIndex(0);
	    }                
        }
	
        public void setStaffNo(JComboBox staff, JTextField staffNo){

	    MstStaff ms= (MstStaff)staff.getSelectedItem();
	    
	    if ( ms!= null) {
		if (ms.getStaffID() != null) {
		    staffNo.setText(ms.getStaffNo());
		}
		
		if (staff.getSelectedIndex() == 0) {
		    staffNo.setText("");
		}
	    }
        }
	
	/**
	 * ì`ï[åüçıâÊñ ópFocusTraversalPolicy
	 */
	protected class SearchAccountFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(salesDate1))
			{
				return salesDate2;
			}
			else if (aComponent.equals(salesDate2))
			{
				return slipNo1;
			}
			else if (aComponent.equals(slipNo1))
			{
				return slipNo2;
			}
			else if (aComponent.equals(slipNo2))
			{
				return this.getFirstPaymentClass();
			}
			else if (aComponent.equals(customerNo1))
			{
				return customerNo2;
			}
			else if (aComponent.equals(customerNo2))
			{
				return staffNo;
			}
			else if (aComponent.equals(staffNo))
			{
				return staff;
			}
			else if (aComponent.equals(staff))
			{
				return chargeStaffNo;
			}
			else if (aComponent.equals(chargeStaffNo))
			{
				return chargeStaff;
			}
			else if (aComponent.equals(chargeStaff))
			{
				return this.getFirstPaymentClass();
			}
			else if (aComponent.equals(searchButton))
			{
				return	salesDate1;
			}
			else if (aComponent.getName() != null &&
					0 <= aComponent.getName().indexOf("paymentClass"))
			{
				return customerNo1;
			}
			
			return salesDate1;
		}

		/**
		 * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(salesDate1))
			{
				return searchButton;
			}
			else if (aComponent.equals(salesDate2))
			{
				return salesDate1;
			}
			else if (aComponent.equals(slipNo1))
			{
				return salesDate2;
			}
			else if (aComponent.equals(slipNo2))
			{
				return slipNo1;
			}
			else if (aComponent.equals(customerNo1))
			{
				return slipNo2;
			}
			else if (aComponent.equals(customerNo2))
			{
				return customerNo1;
			}
			else if (aComponent.equals(staffNo))
			{
				return customerNo2;
			}
			else if (aComponent.equals(staff))
			{
				return staffNo;
			}
			else if (aComponent.equals(chargeStaffNo))
			{
				return staff;
			}
			else if (aComponent.equals(chargeStaff))
			{
				return chargeStaffNo;
			}
			else if (aComponent.equals(searchButton))
			{
				return	this.getLastPaymentClass();
			}
			else if (aComponent.getName() != null &&
					0 <= aComponent.getName().indexOf("paymentClass"))
			{
				return this.getPreviousPaymentClass(aComponent);
			}
			
			return salesDate1;
		}
		
		/**
		 * ç≈èâÇÃéxï•ãÊï™
		 * @return ç≈èâÇÃéxï•ãÊï™
		 */
		private Component getFirstPaymentClass()
		{
			if (0 < paymentClasses.size()) {
                            return paymentClasses.get(0);
                        } else {
                            return null;
                        }
		}
		
		/**
		 * ç≈å„ÇÃéxï•ãÊï™
		 * @return ç≈å„ÇÃéxï•ãÊï™
		 */
		private Component getLastPaymentClass()
		{
			if (0 < paymentClasses.size()) {
                            return paymentClasses.get(paymentClasses.size() - 1);
                        } else {
                            return null;
                        }
		}
		
		/**
		 * éüÇÃéxï•ãÊï™ÇéÊìæÇ∑ÇÈÅBÅiñ≥ÇØÇÍÇŒÉXÉ^ÉbÉtIDÅj
		 * @param pc åªç›ÇÃéxï•ãÊï™
		 * @return éüÇÃéxï•ãÊï™
		 */
		private Component getNextPaymentClass(Component pc)
		{
			int index = Integer.parseInt(pc.getName().replaceAll("paymentClass", ""));
			
			if(0 <= index && index < paymentClasses.size() - 1)
			{
				return	paymentClasses.get(index + 1);
			}
			
			return	searchButton;
		}
		
		/**
		 * ëOÇÃéxï•ãÊï™ÇéÊìæÇ∑ÇÈÅBÅiñ≥ÇØÇÍÇŒÉXÉ^ÉbÉtIDÅj
		 * @param pc åªç›ÇÃéxï•ãÊï™
		 * @return ëOÇÃéxï•ãÊï™
		 */
		private Component getPreviousPaymentClass(Component pc)
		{
			int index = Integer.parseInt(pc.getName().replaceAll("paymentClass", ""));
			
			if(1 <= index && index < paymentClasses.size())
			{
				return	paymentClasses.get(index - 1);
			}
			
			return	staff;
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer êÊì™ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return salesDate1;
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer aContainer - ç≈å„ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return searchButton;
		}

		/**
		 * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
		 * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return salesDate1;
		}
		
		/**
		 * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * show() Ç‹ÇΩÇÕ setVisible(true) ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA
		 * èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
		 * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA
		 * Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
		 * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
		 * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
		 */
		public Component getInitialComponent(Window window)
		{
			return salesDate1;
		}
	}

	/**
	 * ëIëÇ≥ÇÍÇƒÇ¢ÇÈì`ï[No.ÇéÊìæÇ∑ÇÈÅB
	 * @return ëIëÇ≥ÇÍÇƒÇ¢ÇÈì`ï[No.
	 */
	public MstShop getSelectedShop()
	{
                if (shop.getSelectedItem() == null) {
                    return SystemInfo.getCurrentShop();
                } else {
                    return (MstShop)shop.getSelectedItem();
                }
	}

	/**
	 * ëIëÇ≥ÇÍÇƒÇ¢ÇÈì`ï[No.ÇéÊìæÇ∑ÇÈÅB
	 * @return ëIëÇ≥ÇÍÇƒÇ¢ÇÈì`ï[No.
	 */
	public Integer getSelectedSlipNo()
	{
		return selectedSlipNo;
	}

	/**
	 * ëIëÇ≥ÇÍÇƒÇ¢ÇÈì`ï[No.ÇÉZÉbÉgÇ∑ÇÈÅB
	 * @param selectedSlipNo ëIëÇ≥ÇÍÇƒÇ¢ÇÈì`ï[No.
	 */
	public void setSelectedSlipNo(Integer selectedSlipNo)
	{
		this.selectedSlipNo = selectedSlipNo;
	}

	/**
	 * ì`ï[åüçıâÊñ Ç©ÇÁì`ï[ì¸óÕâÊñ ÇäJÇ≠Ç©ÇéÊìæÇ∑ÇÈÅB
	 * @return true - ì`ï[åüçıâÊñ Ç©ÇÁì`ï[ì¸óÕâÊñ ÇäJÇ≠èÍçá
	 */
	public boolean isParentDialog()
	{
		return parentDialog;
	}

	/**
	 * ì`ï[åüçıâÊñ Ç©ÇÁì`ï[ì¸óÕâÊñ ÇäJÇ≠Ç©ÇÉZÉbÉgÇ∑ÇÈÅB
	 * @param parentDialog true - ì`ï[åüçıâÊñ Ç©ÇÁì`ï[ì¸óÕâÊñ ÇäJÇ≠èÍçá
	 */
	public void setParentDialog(boolean parentDialog)
	{
		this.parentDialog = parentDialog;
	}
        
        /**
         * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
         */
        private void initTableColumnWidth()
        {
            //óÒÇÃïùÇê›íËÇ∑ÇÈ
            searchResult.getColumnModel().getColumn(0).setPreferredWidth(15);
            searchResult.getColumnModel().getColumn(1).setPreferredWidth(65);
            searchResult.getColumnModel().getColumn(2).setPreferredWidth(45);
            searchResult.getColumnModel().getColumn(3).setPreferredWidth(45);
            searchResult.getColumnModel().getColumn(4).setPreferredWidth(50);
            searchResult.getColumnModel().getColumn(5).setPreferredWidth(60);

            searchResult.getColumnModel().getColumn(6).setPreferredWidth(60);
            searchResult.getColumnModel().getColumn(7).setPreferredWidth(60);
            searchResult.getColumnModel().getColumn(8).setPreferredWidth(15);
            searchResult.getColumnModel().getColumn(9).setPreferredWidth(60);
            
            searchResult.getColumnModel().getColumn(10).setPreferredWidth(45);
            searchResult.getColumnModel().getColumn(11).setPreferredWidth(45);
            searchResult.getColumnModel().getColumn(12).setPreferredWidth(45);
            searchResult.getColumnModel().getColumn(13).setPreferredWidth(45);
            searchResult.getColumnModel().getColumn(14).setPreferredWidth(30);
            searchResult.getColumnModel().getColumn(15).setPreferredWidth(30);
            
        }       

    private void outputExcel() {
        
        if (searchResult.getRowCount() == 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        JExcelApi jx = new JExcelApi("ì`ï[ämîF");
        jx.setTemplateFile("/report/ì`ï[ämîF.xls");

        
        //à¬ï™ÇégópÇµÇ»Ç¢èÍçáÇÕçHíˆÇÃóÒÇçÌèúÇ∑ÇÈ
        if (!this.getSelectedShop().isProportionally()) {
            jx.removeColumn(14);
        }
        
        
        // ÉwÉbÉ_èoóÕ
        jx.setValue(4, 3, ((MstShop)shop.getSelectedItem()).getShopName());
        if (checkSalesDate.isSelected()) {
            jx.setValue(4, 4, salesDate1.getDateStr("/") + " Å` " + salesDate2.getDateStr("/"));
        } else {
            jx.setValue(4, 4, "");
        }

        if (slipNo1.getText().length() > 0 || slipNo2.getText().length() > 0) {
            jx.setValue(4, 5, slipNo1.getText() + " Å` " + slipNo2.getText());
        } else {
            jx.setValue(4, 5, "");
        }

        String paymentClassesCondition = "";
        for (int i = 0; i < paymentClasses.size(); i ++) {
            if (i == 0) paymentClassesCondition += "ëSÇƒ  ";
            if (i == 1) paymentClassesCondition += "åªã‡  ";
            if (i == 2) paymentClassesCondition += "ÉJÅ[Éh  ";
            if (i == 3) paymentClassesCondition += "ìdéqÉ}ÉlÅ[  ";
            if (i == 4) paymentClassesCondition += "ã‡åîÅEÇªÇÃëº  ";
        }
        jx.setValue(4, 6, paymentClassesCondition.trim());

        if (customerNo1.getText().length() > 0 || customerNo2.getText().length() > 0) {
            jx.setValue(10, 3, customerNo1.getText() + " Å` " + customerNo2.getText());
        } else {
            jx.setValue(10, 3, "");
        }

        jx.setValue(10, 4, ((MstStaff)staff.getSelectedItem()).getFullStaffName());
        jx.setValue(10, 5, ((MstStaff)chargeStaff.getSelectedItem()).getFullStaffName());

        String karteCondition = "";
        if (checkKarte1.isSelected()) karteCondition += "ñ¢  ";
        if (checkKarte2.isSelected()) karteCondition += "çœ  ";
        jx.setValue(10, 6, karteCondition.trim());

        // ÉfÅ[É^ÉZÉbÉg
        try {

            NumberFormat nf = NumberFormat.getInstance();

            // çáåvóì
            DefaultTableModel totalModel = (DefaultTableModel)accountTotal.getModel();
            jx.setValue(9, 13, nf.parse(totalModel.getValueAt(0, 0).toString()));
            jx.setValue(10, 13, nf.parse(totalModel.getValueAt(0, 1).toString()));
            jx.setValue(11, 13, nf.parse(totalModel.getValueAt(0, 2).toString()));
            jx.setValue(12, 13, nf.parse(totalModel.getValueAt(0, 3).toString()));
            jx.setValue(13, 13, nf.parse(totalModel.getValueAt(0, 4).toString()));

            int outRow = 9;

            // í«â¡çsêîÉZÉbÉg
            jx.insertRow(outRow, searchResult.getRowCount() - 1);

            // ñæç◊óì
            DefaultTableModel model = (DefaultTableModel)searchResult.getModel();
            for (int row = 0; row < searchResult.getRowCount(); row++) {
                
                int col = 0;
                jx.setValue(col + 1, outRow, model.getValueAt(row, col));

                col = 1;
                jx.setValue(col + 1, outRow, model.getValueAt(row, col));
                
                col = 2;
                if (model.getValueAt(row, col).toString().length() > 0) {
                    jx.setValue(col + 1, outRow, nf.parse(model.getValueAt(row, col).toString()));
                }

                col = 3;
                if (model.getValueAt(row, col).toString().length() > 0) {
                    jx.setValue(col + 1, outRow, nf.parse(model.getValueAt(row, col).toString()));
                }

                col = 5;
                jx.setValue(col, outRow, model.getValueAt(row, col));
                col = 6;
                jx.setValue(col, outRow, model.getValueAt(row, col));
                col = 7;
                jx.setValue(col, outRow, model.getValueAt(row, col));
                col = 8;
                jx.setValue(col, outRow, model.getValueAt(row, col));
                col = 9;
                jx.setValue(col, outRow, model.getValueAt(row, col));

                col = 10;
                if (model.getValueAt(row, col).toString().length() > 0) {
                    jx.setValue(col, outRow, nf.parse(model.getValueAt(row, col).toString()));
                }
                col = 11;
                if (model.getValueAt(row, col).toString().length() > 0) {
                    jx.setValue(col, outRow, nf.parse(model.getValueAt(row, col).toString()));
                }
                col = 12;
                if (model.getValueAt(row, col).toString().length() > 0) {
                    jx.setValue(col, outRow, nf.parse(model.getValueAt(row, col).toString()));
                }
                col = 13;
                if (model.getValueAt(row, col).toString().length() > 0) {
                    jx.setValue(col, outRow, nf.parse(model.getValueAt(row, col).toString()));
                }
                
                col = 14;
                jx.setValue(col, outRow, ((JButton)model.getValueAt(row, col)).getName());

                col = 15;
                if (!this.getSelectedShop().isProportionally()) {
                    jx.setValue(col - 1, outRow, ((JButton)model.getValueAt(row, col)).getName());
                } else {
                    jx.setValue(col, outRow, ((JButton)model.getValueAt(row, col)).getName());
                }
                
                outRow++;
            }

            jx.removeRow(outRow);

        } catch (Exception e) {
            e.printStackTrace();
        }

        jx.openWorkbook();
        
    }
    
    /**
     * ÉeÅ[ÉuÉãópÇÃTableCellRenderer
     */
    public class SearchAccountTableCellRenderer extends SelectTableCellRenderer
    {
            /** Creates a new instance of SearchAccountTableCellRenderer */
            public SearchAccountTableCellRenderer()
            {
                    super();
            }

            /**
             * ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉOÇï‘ÇµÇ‹Ç∑ÅB
             * @param table JTable
             * @param value ÉZÉãÇ…äÑÇËìñÇƒÇÈíl
             * @param isSelected ÉZÉãÇ™ëIëÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÇÕ true
             * @param hasFocus ÉtÉHÅ[ÉJÉXÇ™Ç†ÇÈèÍçáÇÕ true
             * @param row çs
             * @param column óÒ
             * @return ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉO
             */
            public Component getTableCellRendererComponent(JTable table,
                            Object value, boolean isSelected, boolean hasFocus, int row, int column)
            {
                    super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                    //ï∂éöÇÃêFÇïœçX
                    if (column > 0) {
                        super.setForeground(this.getForegroundColor(row));
                    }
                    
                    switch(column)
                    {
                        case 0:
                        case 1:
                        case 4:
                        case 8:
                        case 14:
                        case 15:
                            super.setHorizontalAlignment(SwingConstants.CENTER);
                            break;
                        case 2:
                        case 3:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                            super.setHorizontalAlignment(SwingConstants.RIGHT);
                            break;
                        default:
                            super.setHorizontalAlignment(SwingConstants.LEFT);
                            break;
                    }

                    return this;
            }

            /**
             * ï∂éöÇê‘Ç≠Ç∑ÇÈÇ©Ç«Ç§Ç©ÇéÊìæÇ∑ÇÈÅB
             * @param row çs
             * @return true - ê‘Ç≠Ç∑ÇÈ
             */
            private Color getForegroundColor(int row)
            {
                if (searchResult.getValueAt(row, 0).toString().equals("Åú")) {
                    return Color.RED;
                }

                return Color.BLACK;
            }
    }

    /**
     * ÉÜÅ[ÉUåüçıÉ{É^ÉìÇéÊìæÇ∑ÇÈ
     */
    private JButton getUserSearchButton(final Integer customerID)
    {
            JButton		searchButton	=	new JButton();
            searchButton.setBorderPainted(false);
            searchButton.setContentAreaFilled(false);
            searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                            "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
            searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                            "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
            searchButton.setSize(48, 25);
            searchButton.addActionListener(new java.awt.event.ActionListener()
            {
                    public void actionPerformed(java.awt.event.ActionEvent evt)
                    {
                        MstCustomerPanel mcp = null;

                        try {

                            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            mcp = new MstCustomerPanel(customerID, true, true);
                            SwingUtil.openAnchorDialog( (JFrame)null, true, mcp, "å⁄ãqèÓïÒ", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );

                        } finally {
                            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        }

                        mcp = null;
                    }
            });
            return searchButton;
    }        
}
