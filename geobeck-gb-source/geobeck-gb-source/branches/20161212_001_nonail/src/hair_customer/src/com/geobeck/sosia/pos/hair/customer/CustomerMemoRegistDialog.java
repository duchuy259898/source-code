/*
 * 顧客メモ登録画面
 * CustomerMemoRegistDialog.java
 * 
 * 顧客メモ対応
 * 
 * Created on 2016/12/25
 */

package com.geobeck.sosia.pos.hair.customer;

import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.company.MstStaffs;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.swing.MessageDialog;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import javax.swing.ButtonGroup;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import jp.co.flatsoft.fscomponent.FSCalenderCombo;

/**
 * 顧客メモ登録画面
 */
public class CustomerMemoRegistDialog extends javax.swing.JDialog {
    
    /**
     * 対象顧客情報
     */
    private final MstCustomer customer;
    
    /**
     * コンボボックス空白用店舗データ
     */
    private static final MstShop EMPTY_SHOP_DATA = new MstShop();
    
    /**
     * コンボボックス空白用担当者データ
     */
    private static final MstStaff EMPTY_STAFF_DATA = new MstStaff();
    
    /**
     * 担当者マップ（キャッシュ用）
     * 店舗IDに紐づくスタッフのリストを保持する。
     */
    Map<Integer, MstStaffs> staffsMap = null;
    
    /**
     * Creates new form CustomerMemoRegistDialog
     * @param parent 親フレーム
     * @param modal モーダルフラグ
     * @param customer 対象顧客情報
     */
    public CustomerMemoRegistDialog(java.awt.Frame parent, boolean modal, MstCustomer customer) {
        super(parent, modal);
        initComponents();
        
        this.staffsMap = new HashMap<>();
        
        this.customer = customer;
        
        customerNoLabel.setText(this.customer.getCustomerNo());
        
        customerNameLabel.setText(this.customer.getFullCustomerName());
        
        // 店舗コンボボックス値設定
        this.initShopComboList(shopComboBox);
        
        // 担当者コンボボックス値設定
        this.initStaffComboList(staffComboBox, SystemInfo.getCurrentShop());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        evaluationButtonGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        registrationDateLabel = new javax.swing.JLabel();
        customerNameLabel = new javax.swing.JLabel();
        registrationDateComboBox = new FSCalenderCombo(SystemInfo.getSystemDate());
        jLabel2 = new javax.swing.JLabel();
        customerNoLabel = new javax.swing.JLabel();
        shopComboBox = new javax.swing.JComboBox();
        shopLabel = new javax.swing.JLabel();
        staffLabel = new javax.swing.JLabel();
        staffComboBox = new javax.swing.JComboBox();
        evaluationLabel = new javax.swing.JLabel();
        evaluationGoodRadioButton = new javax.swing.JRadioButton();
        evaluationBadRadioButton = new javax.swing.JRadioButton();
        closeButton = new javax.swing.JButton();
        registButton = new javax.swing.JButton();
        memoTextPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        memoTextArea = new javax.swing.JTextArea();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(22, 0), new java.awt.Dimension(22, 0), new java.awt.Dimension(22, 32767));
        evaluationBatonRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("フィード登録");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setText("顧客No.");
        jLabel1.setName(""); // NOI18N

        registrationDateLabel.setText("登録日");
        registrationDateLabel.setAutoscrolls(true);

        customerNameLabel.setText("山田　太郎");

        registrationDateComboBox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        registrationDateComboBox.setToolTipText("");

        jLabel2.setText("顧客名");

        customerNoLabel.setText("101-1");
        customerNoLabel.setToolTipText("");
        customerNoLabel.setName(""); // NOI18N

        shopLabel.setText("店舗");

        staffLabel.setText("担当者");

        evaluationLabel.setText("評価");

        evaluationButtonGroup.add(evaluationGoodRadioButton);
        evaluationGoodRadioButton.setText("良い");

        evaluationButtonGroup.add(evaluationBadRadioButton);
        evaluationBadRadioButton.setText("悪い");

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setToolTipText("");
        closeButton.setBorderPainted(false);
        closeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        memoTextArea.setColumns(20);
        memoTextArea.setRows(5);
        jScrollPane1.setViewportView(memoTextArea);

        javax.swing.GroupLayout memoTextPanelLayout = new javax.swing.GroupLayout(memoTextPanel);
        memoTextPanel.setLayout(memoTextPanelLayout);
        memoTextPanelLayout.setHorizontalGroup(
            memoTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(memoTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE))
        );
        memoTextPanelLayout.setVerticalGroup(
            memoTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
            .addGroup(memoTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE))
        );

        evaluationButtonGroup.add(evaluationBatonRadioButton);
        evaluationBatonRadioButton.setText("バトン");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(shopLabel)
                            .addComponent(staffLabel)
                            .addComponent(registrationDateLabel)
                            .addComponent(evaluationLabel))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(customerNoLabel)
                                    .addComponent(customerNameLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 441, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(registButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(registrationDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(evaluationGoodRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(evaluationBadRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(evaluationBatonRadioButton))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(shopComboBox, 0, 106, Short.MAX_VALUE)
                                        .addComponent(staffComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(memoTextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 1, 1)
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(customerNoLabel))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(customerNameLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(registrationDateLabel)
                            .addComponent(registrationDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(registButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shopLabel)
                    .addComponent(shopComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(staffLabel)
                    .addComponent(staffComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(evaluationLabel)
                    .addComponent(evaluationGoodRadioButton)
                    .addComponent(evaluationBadRadioButton)
                    .addComponent(evaluationBatonRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(memoTextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // 閉じるボタン押下
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void registButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registButtonActionPerformed
        // 登録ボタン押下
        
        // 登録日入力チェック
        if(!this.checkInputRegistrationDate(this.registrationDateComboBox)) {
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, registrationDateLabel.getText()),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        // 店舗入力チェック
        if(!this.checkInputShop(this.shopComboBox)) {
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, shopLabel.getText()),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE
            );
            return;
        } 
        
        // 担当者入力チェック
        if(!this.checkInputStaff(this.staffComboBox)) {
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, staffLabel.getText()),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        // 評価入力チェック
        if(!this.checkInputEvaluation(this.evaluationButtonGroup)) {
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED, evaluationLabel.getText()),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        // メモ入力チェック
        if(!this.checkInputMemo(this.memoTextArea)) {
            MessageDialog.showMessageDialog(
                this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "メモ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        
        try {
            // メモデータ登録
            DataCustomerMemo dataCustomerMemo = new DataCustomerMemo();
            dataCustomerMemo.setCustomerId(customer.getCustomerID());
            dataCustomerMemo.setMemoDate(registrationDateComboBox.getDate());
            dataCustomerMemo.setShopId(((MstShop)shopComboBox.getSelectedItem()).getShopID());
            dataCustomerMemo.setStaffId(((MstStaff)staffComboBox.getSelectedItem()).getStaffID());
            
            int evaluation;
            if(evaluationGoodRadioButton.isSelected()) {
                evaluation = DataCustomerMemo.EVALUATION_GOOD;
            } else if (evaluationBadRadioButton.isSelected()) {
                evaluation = DataCustomerMemo.EVALUATION_BAD;
            } else {
                evaluation = DataCustomerMemo.EVALUATION_BATON;
            }
            dataCustomerMemo.setEvaluation(evaluation);
            dataCustomerMemo.setMemo(memoTextArea.getText());
            
            if(!dataCustomerMemo.insert(SystemInfo.getConnection())) {
                MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, this.getTitle()),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE
                );
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        this.dispose();
    }//GEN-LAST:event_registButtonActionPerformed

    /**
     * 入力チェック(登録日)
     * 
     * @param registrationDateComboBox チェック対象登録日コンボボックス
     * @return チェックOKならtrue, NGならfalse
     */
    private boolean checkInputRegistrationDate(FSCalenderCombo registrationDateComboBox) {
        return registrationDateComboBox.getDate() != null;
    }
    
    /**
     * 入力チェック(店舗)
     * 
     * @param shopComboBox チェック対象店舗コンボボックス
     * @return チェックOKならtrue, NGならfalse
     */
    private boolean checkInputShop(JComboBox shopComboBox) {
        return !shopComboBox.getSelectedItem().equals(EMPTY_SHOP_DATA);
    }
    
    /**
     * 入力チェック(担当者)
     * 
     * @param staffComboBox チェック対象担当者コンボボックス
     * @return チェックOKならtrue, NGならfalse
     */
    private boolean checkInputStaff(JComboBox staffComboBox) {
        return !staffComboBox.getSelectedItem().equals(EMPTY_STAFF_DATA);
    }
    
    /**
     * 入力チェック(評価)
     * 
     * @param evaluationButtonGroup チェック対象ラジオボタングループ
     * @return チェックOKならtrue, NGならfalse
     */
    private boolean checkInputEvaluation(ButtonGroup evaluationButtonGroup) {
        return evaluationButtonGroup.getSelection() != null;
    }
    
    /**
     * 入力チェック(メモ)
     * 
     * @param memoTextArea チェック対象メモテキストエリア
     * @return チェックOKならtrue, NGならfalse
     */
    private boolean checkInputMemo(JTextArea memoTextArea) {
        return !memoTextArea.getText().isEmpty();
    }
    
    /** 
    * 店舗コンボボックス値設定
    * ログイン店舗と同一グループの店舗すべてをコンボボックスに設定する。
    * 
    * @param shopComboBox 設定対象店舗コンボボックス
    */
    private void initShopComboList(JComboBox shopComboBox) {
        // 本部ログインの場合、コンボ先頭に空白を設定。
        if (SystemInfo.getCurrentShop().getShopID() == 0) {
            shopComboBox.addItem(EMPTY_SHOP_DATA);
        }
        for (MstShop shop : SystemInfo.getGroup().getShops()) {
            shopComboBox.addItem(shop);
        }
        shopComboBox.setSelectedItem(SystemInfo.getCurrentShop());
    }
    
    /** 
    * 担当者コンボボックス値設定
    * mst_staffに存在する未削除データをコンボボックスに設定する。
    * 順序は店舗に所属するスタッフが優先される。
    * 
    * @param staffComboBox 設定対象担当者コンボボックス
    * @param shop 店舗情報
    */
    private void initStaffComboList(JComboBox staffComboBox, MstShop shop) {
        MstStaffs staffs = new MstStaffs();
        
        // Staffsの店舗に選択されている店舗（未選択の場合はログイン店舗）を設定する。
        // 設定店舗は以下に利用される。
        // １．表示順序設定
        // 　　対象スタッフが設定店舗に所属している場合表示順序を最上位にする。
        // ２．mst_staff_nondisplayテーブルによる非表示店舗・スタッフの組み合わせ判定
        Integer shopId;
        if (shop != null && shop.equals(EMPTY_SHOP_DATA)) {
            staffs.setShopIDList(shop.getShopID().toString());
            shopId = shop.getShopID();
        } else {
            staffs.setShopIDList(SystemInfo.getCurrentShop().getShopID().toString());
            shopId = SystemInfo.getCurrentShop().getShopID();
        }

        // キャッシュがあればそれを利用する。
        if(staffsMap.containsKey(shopId)) {
            staffs = staffsMap.get(shopId);
        } else {
            try {
                // スタッフデータ取得
                staffs.load(SystemInfo.getConnection(), true);
                staffsMap.put(shopId, staffs);
            } catch (SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }
        
        for (MstStaff staff : staffs) {
            staffComboBox.addItem(staff);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel customerNameLabel;
    private javax.swing.JLabel customerNoLabel;
    private javax.swing.JRadioButton evaluationBadRadioButton;
    private javax.swing.JRadioButton evaluationBatonRadioButton;
    private javax.swing.ButtonGroup evaluationButtonGroup;
    private javax.swing.JRadioButton evaluationGoodRadioButton;
    private javax.swing.JLabel evaluationLabel;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea memoTextArea;
    private javax.swing.JPanel memoTextPanel;
    private javax.swing.JButton registButton;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo registrationDateComboBox;
    private javax.swing.JLabel registrationDateLabel;
    private javax.swing.JComboBox shopComboBox;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JComboBox staffComboBox;
    private javax.swing.JLabel staffLabel;
    // End of variables declaration//GEN-END:variables
}
