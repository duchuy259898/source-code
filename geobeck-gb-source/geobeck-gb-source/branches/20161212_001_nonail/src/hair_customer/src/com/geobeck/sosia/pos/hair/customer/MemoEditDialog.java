/*
 * MemoEditDialog.java
 *
 * Created on 2008/06/05, 23:00
 */

package com.geobeck.sosia.pos.hair.customer;

import	java.awt.*;
import	java.util.logging.*;
import	javax.swing.*;
import	com.geobeck.sql.*;
import	com.geobeck.swing.*;
import	com.geobeck.sosia.pos.master.customer.*;
import	com.geobeck.sosia.pos.swing.*;
import	com.geobeck.sosia.pos.util.*;
import	com.geobeck.sosia.pos.system.*;
import java.sql.SQLException;

/**
 *
 * @author  saito
 */
public class MemoEditDialog extends AbstractImagePanelEx  {
        //コメント編集ボタン用
        private final String MEMO_EDIT_INTRODUCER		= "1";	//紹介元
        private final String MEMO_EDIT_INTRODUCE		= "2";	//紹介一覧

        /** 区分　１：紹介元　２：紹介一覧 */
        private String                          paramKbn             =       null;

        /** 顧客データ */
	private MstCustomer			paramCustomer	=	null;

        //呼出元の顧客登録画面で顧客データを新規登録する場合に画面表示する値
        String pramCustomerNo = null;                                       //顧客コード
        String paramCustomerName1 = null;                                   //顧客姓
        String paramCustomerName2 = null;                                   //顧客名
	
	/**
	 * コメント編集画面用FocusTraversalPolicy
	 */
	private	MemoEditDialogFocusTraversalPolicy	ftp	= new MemoEditDialogFocusTraversalPolicy();
	
	/** Creates new form MemoEditDialog */
	public MemoEditDialog(
                                    String kbn, MstCustomer customer,
                                    String customerNo, String customerName1, String customerName2
                                )
        {
		this.paramKbn = kbn;
		this.paramCustomer = customer;
		this.pramCustomerNo = customerNo;
		this.paramCustomerName1 = customerName1;
		this.paramCustomerName2 = customerName2;
		initComponents();
	    this.setSize(400, 220);
	    this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        sex = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        tempRegistButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        customerNo1 = new com.geobeck.swing.JFormattedTextFieldEx();
        customerName1 = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel2 = new javax.swing.JLabel();
        customerNo2 = new com.geobeck.swing.JFormattedTextFieldEx();
        customerName2 = new com.geobeck.swing.JFormattedTextFieldEx();
        jPanel3 = new javax.swing.JPanel();
        noteScrollPane = new javax.swing.JScrollPane();
        memoBody = new com.geobeck.swing.JTextAreaEx();

        setFocusTraversalPolicy(getFocusTraversalPolicy());
        setFocusTraversalPolicyProvider(true);
        jPanel1.setOpaque(false);
        tempRegistButton.setIcon(SystemInfo.getImageIcon("/button/account/tempAccount_off.jpg"));
        tempRegistButton.setBorderPainted(false);
        tempRegistButton.setContentAreaFilled(false);
        tempRegistButton.setPressedIcon(SystemInfo.getImageIcon("/button/account/tempAccount_on.jpg"));
        tempRegistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempRegistButtonActionPerformed(evt);
            }
        });

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(tempRegistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tempRegistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setOpaque(false);
        jLabel1.setText("\u9867\u5ba2");

        customerNo1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerNo1.setEditable(false);
        customerNo1.setFocusable(false);
        customerNo1.setInputKanji(true);

        customerName1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerName1.setEditable(false);
        customerName1.setFocusable(false);
        customerName1.setInputKanji(true);

        jLabel2.setText("\uff38\uff38\uff38\uff38");

        customerNo2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerNo2.setEditable(false);
        customerNo2.setFocusable(false);
        customerNo2.setInputKanji(true);

        customerName2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerName2.setEditable(false);
        customerName2.setFocusable(false);
        customerName2.setInputKanji(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addComponent(customerNo1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(customerNo2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerName2, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                    .addComponent(customerName1, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerName1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerNo1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerName2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerNo2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setOpaque(false);
        noteScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        memoBody.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        memoBody.setColumns(20);
        memoBody.setLineWrap(true);
        memoBody.setRows(5);
        memoBody.setTabSize(4);
        memoBody.setInputKanji(true);
        noteScrollPane.setViewportView(memoBody);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(noteScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * 編集したコメントをキャンセルしてダイアログを閉じる
	 */
	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
		this.closePanel();
	}//GEN-LAST:event_closeButtonActionPerformed

	/**
	 * 編集したコメントを一時保存して終了する
	 */
        private void tempRegistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempRegistButtonActionPerformed
		paramCustomer.setIntroducerNote( memoBody.getText() );
		this.closePanel();
        }//GEN-LAST:event_tempRegistButtonActionPerformed
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private com.geobeck.swing.JFormattedTextFieldEx customerName1;
    private com.geobeck.swing.JFormattedTextFieldEx customerName2;
    private com.geobeck.swing.JFormattedTextFieldEx customerNo1;
    private com.geobeck.swing.JFormattedTextFieldEx customerNo2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private com.geobeck.swing.JTextAreaEx memoBody;
    private javax.swing.JScrollPane noteScrollPane;
    private javax.swing.ButtonGroup sex;
    private javax.swing.JButton tempRegistButton;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * ダイアログを初期化する
	 */
	private void init()
	{
                //データを表示する
		showData();
	}
	
	/**
	 * データを表示する
	 */
	private void showData()
	{
            if (MEMO_EDIT_INTRODUCER.equals(paramKbn)) {
                //紹介元の場合
                if(paramCustomer.getCustomerID() != null && paramCustomer.getCustomerID() > 0){
                    //呼出元の顧客登録画面で顧客データを更新する場合
                    customerNo1.setText( paramCustomer.getCustomerNo() );
                    customerName1.setText(
                                              paramCustomer.getCustomerName( 0 )
                                            + "　"
                                            + paramCustomer.getCustomerName( 1 )
                                            );
                } else {
                    //呼出元の顧客登録画面で顧客データを新規登録する場合
                    //マスタにデータが未登録のため、顧客コード、顧客名は呼出元画面の入力値を表示
                    customerNo1.setText( pramCustomerNo );
                    customerName1.setText(
                                              paramCustomerName1
                                            + "　"
                                            + paramCustomerName2
                                            );
                }
                jLabel2.setText("紹介元");
            } else {
                //紹介一覧の場合
                jLabel2.setText("紹介一覧");
                customerNo2.setText( paramCustomer.getCustomerNo() );
                customerName2.setText(
                                          paramCustomer.getCustomerName( 0 )
                                        + "　"
                                        + paramCustomer.getCustomerName( 1 )
                                        );
            }
            //コメント
            memoBody.setText( paramCustomer.getIntroducerNote() );

            //顧客マスタから紹介元/一覧の顧客コード、顧客名を取得する
            String sIntroduderCustomerNo = null;
            String sIntroduderName = null;
            if(paramCustomer.getIntroducerID() != null && paramCustomer.getIntroducerID() > 0){
                MstCustomer introducer = new MstCustomer(paramCustomer.getIntroducerID());
                ConnectionWrapper	con	=	SystemInfo.getConnection();
                if(con == null)
                {
                    MessageDialog.showMessageDialog(this,
                                    MessageUtil.getMessage(MessageUtil.ERROR_CONNECT_FAILED),
                                    this.getTitle(),
                                    JOptionPane.ERROR_MESSAGE);
                    return;
                }
                try{
                    introducer.load(con);
                } catch(SQLException e){
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
                sIntroduderCustomerNo = introducer.getCustomerNo();
                sIntroduderName = introducer.getCustomerName( 0 )
                                        + "　"
                                        + introducer.getCustomerName( 1 );
            }
            if (MEMO_EDIT_INTRODUCER.equals(paramKbn)) {
                //紹介元の場合
                customerNo2.setText( sIntroduderCustomerNo );
                customerName2.setText(sIntroduderName);
            } else {
                //紹介一覧の場合
                customerNo1.setText( sIntroduderCustomerNo );
                customerName1.setText(sIntroduderName);
            }

        }
	
	/**
	 * SOSIA連動画面用FocusTraversalPolicyを取得する。
	 * @return SOSIA連動画面用FocusTraversalPolicy
	 */
	public MemoEditDialogFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * コメント編集画面用FocusTraversalPolicy
	 */
	private class MemoEditDialogFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(tempRegistButton))
			{
				return closeButton;
			}
			else if (aComponent.equals(closeButton))
			{
				return memoBody;
			}
			else if (aComponent.equals(memoBody))
			{
				return tempRegistButton;
			}
			return aComponent;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer, Component aComponent)
		{
			if (aComponent.equals(tempRegistButton))
			{
				return memoBody;
			}
			else if (aComponent.equals(closeButton))
			{
				return tempRegistButton;
			}
			else if (aComponent.equals(memoBody))
			{
				return closeButton;
			}
			return aComponent;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
                        return memoBody;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
                        return memoBody;
		}
		
		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
                        return memoBody;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
                        return memoBody;
		}
	}
	
	/**
	 * ダイアログを閉じる
	 */
	private void closePanel()
	{
		if(this.isDialog())
		{
			((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
		}
		else
		{
			this.setVisible(false);
		}
	}
}
