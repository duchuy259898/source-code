/*
 * RegisterReturnedGoodsPanel.java
 *
 * Created on 2013/03/05, 11:37
 */
package com.geobeck.sosia.pos.hair.product;

import com.geobeck.sosia.pos.basicinfo.commodity.EditabeTableCellRenderer;
import com.geobeck.sosia.pos.hair.data.product.DataSlipOrder;
import com.geobeck.sosia.pos.hair.data.product.DataSlipOrderDetail;
import com.geobeck.sosia.pos.hair.product.logic.ProductOrderReportLogic;
import com.geobeck.sosia.pos.master.commodity.MstSupplier;
import com.geobeck.sosia.pos.master.commodity.MstSupplierItem;
import com.geobeck.sosia.pos.master.commodity.MstSuppliers;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.company.MstStaffs;
import com.geobeck.sosia.pos.master.customer.MstDataPickupProduct;
import com.geobeck.sosia.pos.master.customer.MstDataPickupProducts;

import com.geobeck.sosia.pos.products.ProductClass;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.util.TaxUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.IntegerCellEditor;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.FocusTraversalPolicy;
import java.awt.TrayIcon;
import java.awt.Window;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author ivs
 */
public class RegisterReturnedGoodsPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    /**
     * Creates new form RegisterReturnedGoodsPanel
     */
    protected MstDataPickupProducts pickupProducts = new MstDataPickupProducts();
    protected Integer shopId = 1;
    protected Integer customerId = null;
    protected Integer slipNo = null;
    protected Integer shopID = null;

    public RegisterReturnedGoodsPanel() {
        initComponents();
        init();
        loadReturnProductList();
        setStaffs();
        addMouseCursorChange();
        this.setSize(650,500);
        this.setPath("商品管理 >> 商品返品");
        this.setTitle("商品返品");
        this.setKeyListener();
        date.setDate(SystemInfo.getSystemDate());
    }
    
      public RegisterReturnedGoodsPanel(Integer customerId, Integer slipNo , Integer shopID) {
        this.slipNo = slipNo;
        this.customerId = customerId;
        this.shopID = shopID;
        initComponents();
        init();
        loadReturnProductList();
        setStaffs();
        addMouseCursorChange();
        this.setSize(650,500);
        this.setPath("商品管理 >> 商品返品");
        this.setTitle("商品返品");
        this.setKeyListener();
        date.setDate(SystemInfo.getSystemDate());
        
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        statusGroup = new javax.swing.ButtonGroup();
        productsScrollPane = new javax.swing.JScrollPane();
        products = new com.geobeck.swing.JTableEx();
        registButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        totalReturn = new javax.swing.JTextField();
        supplierLabel = new javax.swing.JLabel();
        rdoStatus1 = new javax.swing.JRadioButton();
        rdoStatus2 = new javax.swing.JRadioButton();
        rdoStatus3 = new javax.swing.JRadioButton();
        chargeStaffNo = new javax.swing.JTextField();
        supplierLabel1 = new javax.swing.JLabel();
        chargeStaff = new javax.swing.JComboBox();
        shopLabel3 = new javax.swing.JLabel();
        date = new jp.co.flatsoft.fscomponent.FSCalenderCombo();

        setFocusCycleRoot(true);

        productsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        productsScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        products.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "契約日", "商品名", "購入数", "残数", "受渡数", "返品数", "預り金", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        products.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        products.setSelectionBackground(new java.awt.Color(255, 210, 142));
        products.setSelectionForeground(new java.awt.Color(0, 0, 0));
        products.getTableHeader().setReorderingAllowed(false);
        this.initProductsColumn();
        products.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);

        TableColumnModel productsModel = products.getColumnModel();

        SwingUtil.setJTableHeaderRenderer(products, SystemInfo.getTableHeaderRenderer());
        SelectTableCellRenderer.setSelectTableCellRenderer(products);
        TableColumnModel model = products.getColumnModel();
        model.getColumn(5).setCellEditor(new IntegerCellEditor(new JTextField()));
        products.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                productsFocusGained(evt);
            }
        });
        products.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                productsPropertyChange(evt);
            }
        });
        products.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productsKeyReleased(evt);
            }
        });
        productsScrollPane.setViewportView(products);
        products.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setFocusable(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setFocusable(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("お客様がお持ちした返品商品");

        jLabel6.setText("返品商品処理対応");

        totalReturn.setEditable(false);
        totalReturn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        totalReturn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                totalReturnFocusLost(evt);
            }
        });

        supplierLabel.setText("合計返品数");

        statusGroup.add(rdoStatus1);
        rdoStatus1.setSelected(true);
        rdoStatus1.setText("処分・・・破棄します。在庫変動はありません。");
        rdoStatus1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoStatus1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoStatus1.setOpaque(false);
        rdoStatus1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoStatus1ActionPerformed(evt);
            }
        });

        statusGroup.add(rdoStatus2);
        rdoStatus2.setText("○店販用・・・「入庫伝票」にて「店販用」として在庫を増やします。");
        rdoStatus2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoStatus2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoStatus2.setOpaque(false);
        rdoStatus2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoStatus2ActionPerformed(evt);
            }
        });

        statusGroup.add(rdoStatus3);
        rdoStatus3.setText("○業務用・・・「入庫伝票」にて「業務用」として在庫を増やします。");
        rdoStatus3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoStatus3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoStatus3.setOpaque(false);
        rdoStatus3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoStatus3ActionPerformed(evt);
            }
        });

        chargeStaffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        chargeStaffNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                chargeStaffNoFocusLost(evt);
            }
        });

        supplierLabel1.setText("対応者");

        chargeStaff.setMaximumRowCount(15);
        chargeStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        chargeStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chargeStaffActionPerformed(evt);
            }
        });

        shopLabel3.setText("日付");

        date.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        date.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dateFocusGained(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(registButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rdoStatus3)
                    .addComponent(rdoStatus2)
                    .addComponent(rdoStatus1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(supplierLabel1)
                            .addComponent(shopLabel3))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chargeStaffNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chargeStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(supplierLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(totalReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(productsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(productsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(supplierLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoStatus2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoStatus3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(supplierLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chargeStaffNo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chargeStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(shopLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void registButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_registButtonActionPerformed
	{//GEN-HEADEREND:event_registButtonActionPerformed
           setData(); 
            if (checkInput()) {

                if (pickupProducts.regist(SystemInfo.getConnection())) {
                    MessageDialog.showMessageDialog(this, "登録しました。", this.getTitle(), JOptionPane.INFORMATION_MESSAGE);
                    loadReturnProductList();
                } else {
                    MessageDialog.showMessageDialog(this, "登録に失敗しました。", this.getTitle(), JOptionPane.ERROR_MESSAGE);
                }
            }

	}//GEN-LAST:event_registButtonActionPerformed
    private void setData() {
        if(products.getCellEditor() !=null)
        {
            products.getCellEditor().stopCellEditing();
        }
        
        Integer pickupProductNum = null;
        DefaultTableModel model = (DefaultTableModel) products.getModel();
        for (int i = 0; i < pickupProducts.size(); i++) {
            try {
                pickupProductNum = Integer.parseInt(model.getValueAt(i, 5).toString());
            } catch (Exception e) {
            }
            if (rdoStatus1.isSelected()) {
                pickupProducts.get(i).setStatus(91);//処分
            } else if (rdoStatus2.isSelected()) {
                pickupProducts.get(i).setStatus(92);//店販用
            } else if (rdoStatus3.isSelected()) {
                pickupProducts.get(i).setStatus(93);//業務用
            }
            pickupProducts.get(i).setPickupProductNum(pickupProductNum * (-1));
            MstShop shop = new MstShop();
            shop.setShopID(shopId);
            pickupProducts.get(i).setShop(shop);
            pickupProducts.get(i).setStaff((MstStaff) chargeStaff.getSelectedItem());
            pickupProducts.get(i).setOperationDate(date.getDate());
            

        }
    }
    
    

    private boolean checkInput() {
        if (pickupProducts.get(0).getStaff().getStaffID() == null) {
            MessageDialog.showMessageDialog(this,
                    "対応者を選択してください。",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return false;

        }
        return true;
    }
	private void productsPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_productsPropertyChange
	{//GEN-HEADEREND:event_productsPropertyChange
           Integer col = products.getEditingColumn();
            Integer row = products.getEditingRow();
            if(col !=5 || row <0) {return;}
            int pickNum = Integer.parseInt(products.getValueAt(row, 4).toString());
            int hinNum = Integer.parseInt(products.getValueAt(row, 5).toString());
            if( hinNum <0  || hinNum >  pickNum)
            {
                products.setValueAt(0, row, 5);
            }
            totalReturn();

	}//GEN-LAST:event_productsPropertyChange

    private void setStaffs() {
        MstStaffs staffs = new MstStaffs();

        staffs.setShopIDList(shopId.toString());

        try {

            staffs.load(SystemInfo.getConnection(), true);

            for (MstStaff ms : staffs) {
                if (ms.isDisplay()) {
                    chargeStaff.addItem(ms);

                }
            }

            chargeStaff.setSelectedIndex(0);


        } catch (SQLException e) {

            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

    }

    private void totalReturn() {
        Integer col = products.getEditingColumn();
        Integer row = products.getEditingRow();
        if (col >= 0 && row >= 0) {
            DefaultTableModel model = (DefaultTableModel) products.getModel();
            Integer total = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                try {
                    total += Integer.parseInt(model.getValueAt(i, 5).toString());
                } catch (Exception e) {
                }
            }
            totalReturn.setText(total.toString());
        }
    }
	private void productsFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_productsFocusGained
	{//GEN-HEADEREND:event_productsFocusGained
	}//GEN-LAST:event_productsFocusGained

    public void loadReturnProductList() {

        ConnectionWrapper con = SystemInfo.getConnection();

        try {
            pickupProducts = new MstDataPickupProducts();
            pickupProducts.setCustomerId(this.customerId);
            pickupProducts.setSlipNo(this.slipNo);
            pickupProducts.setShopId(this.shopID);
            pickupProducts.load(con);
            SwingUtil.clearTable(products);
            DefaultTableModel model = (DefaultTableModel) products.getModel();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
            Integer total = 0;
            for (int i = 0; i < pickupProducts.size(); i++) {
                pickupProducts.get(i).getStaff().load(con);
                total += pickupProducts.get(i).getPickupProductNum();
                model.addRow(new Object[]{
                            dateFormat.format(pickupProducts.get(i).getSalesDate().getTime()).toString(),
                            pickupProducts.get(i).getProductName(),
                            pickupProducts.get(i).getProductNum(),//購入数
                            pickupProducts.get(i).getProductNumUse(),//受渡数
                            pickupProducts.get(i).getPickupProductNum(),
                            0,
                            pickupProducts.get(i).getProductValue(),
                            pickupProducts.get(i).getStaff().getStaffName(0) + " " + pickupProducts.get(i).getStaff().getStaffName(1)
                        });

            }
            totalReturn.setText(total.toString());

        } catch (Exception e) {
        }

    }
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed

        if (this.isDialog()) {
            ((JDialog) this.getParent().getParent().getParent().getParent()).setVisible(false);
        } else {
            this.setVisible(false);
        }
    }//GEN-LAST:event_closeButtonActionPerformed

    private void totalReturnFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_totalReturnFocusLost
    }//GEN-LAST:event_totalReturnFocusLost

    private void rdoStatus1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoStatus1ActionPerformed
    }//GEN-LAST:event_rdoStatus1ActionPerformed

    private void rdoStatus2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoStatus2ActionPerformed
    }//GEN-LAST:event_rdoStatus2ActionPerformed

    private void rdoStatus3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoStatus3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoStatus3ActionPerformed

    private void chargeStaffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chargeStaffNoFocusLost

        if (!chargeStaffNo.getText().equals("")) {

            chargeStaffNo.setName("1");
            this.setStaff(chargeStaff, chargeStaffNo.getText());
            chargeStaffNo.setName(null);
        } else {

            chargeStaff.setSelectedIndex(0);
        }
    }//GEN-LAST:event_chargeStaffNoFocusLost

    private void chargeStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargeStaffActionPerformed
        if (chargeStaffNo.getName() != null) {
            return;
        }

        MstStaff ms = (MstStaff) chargeStaff.getSelectedItem();

        if (chargeStaff.getSelectedIndex() == 0) {
            chargeStaffNo.setText("");
        }

        if (ms.getStaffID() != null) {
            chargeStaffNo.setText(ms.getStaffNo());
        }
    }//GEN-LAST:event_chargeStaffActionPerformed

    private void setStaff(JComboBox staffCombo, String staffNo) {

        for (int i = 0; i < staffCombo.getItemCount(); i++) {

            MstStaff ms = (MstStaff) staffCombo.getItemAt(i);

            //空白をセット
            if (ms.getStaffID() == null) {

                staffCombo.setSelectedIndex(0);

            } else if (ms.getStaffNo().equals(staffNo)) {

                staffCombo.setSelectedIndex(i);
                return;
            }
        }
    }
    private void dateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateFocusGained
        date.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_dateFocusGained

    private void productsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productsKeyReleased
        // TODO add your handling code here:
        totalReturn();
    }//GEN-LAST:event_productsKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox chargeStaff;
    private javax.swing.JTextField chargeStaffNo;
    private javax.swing.JButton closeButton;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo date;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private com.geobeck.swing.JTableEx products;
    private javax.swing.JScrollPane productsScrollPane;
    private javax.swing.JRadioButton rdoStatus1;
    private javax.swing.JRadioButton rdoStatus2;
    private javax.swing.JRadioButton rdoStatus3;
    private javax.swing.JButton registButton;
    private javax.swing.JLabel shopLabel3;
    private javax.swing.ButtonGroup statusGroup;
    private javax.swing.JLabel supplierLabel;
    private javax.swing.JLabel supplierLabel1;
    private javax.swing.JTextField totalReturn;
    // End of variables declaration//GEN-END:variables
    /**
     * FocusTraversalPolicy
     */
    private FocusTraversalPolicy traversalPolicy =
            new RegisterOrderSlipPanelFocusTraversalPolicy();

    /**
     * FocusTraversalPolicyを取得する。
     *
     * @return FocusTraversalPolicy
     */
    public FocusTraversalPolicy getFocusTraversalPolicy() {
        return traversalPolicy;
    }

    private void init() {
    }

    /**
     * 明細の列を初期化する。
     */
    private void initProductsColumn() {
        //列の幅を設定する。
//        products.getColumnModel().getColumn(0).setPreferredWidth(70);		// 分類
//        products.getColumnModel().getColumn(1).setPreferredWidth(210);		// 商品
//        products.getColumnModel().getColumn(2).setPreferredWidth(55);		// 仕入価格
//        products.getColumnModel().getColumn(3).setPreferredWidth(45);		// 店適正
//        products.getColumnModel().getColumn(4).setPreferredWidth(45);		// 業適正
//        products.getColumnModel().getColumn(5).setPreferredWidth(45);		// 店在庫
//        products.getColumnModel().getColumn(6).setPreferredWidth(45);		// 業在庫
//        products.getColumnModel().getColumn(7).setPreferredWidth(65);		// 店販用
    }

    /**
     *
     */
    private void addMouseCursorChange() {
    }

    /**
     *
     */
    private void setKeyListener() {
    }

    /**
     * 選択されている分類を取得する。
     *
     * @return 選択されている分類
     */
    public ProductClass getSelectedProductClass(JTable productClassesTable) {
        if (productClassesTable.getSelectedRow() < 0) {
            return null;
        }

        return (ProductClass) productClassesTable.getValueAt(productClassesTable.getSelectedRow(), 0);
    }

    /**
     * 担当者を初期化する。
     */
    protected void initStaff(JComboBox cb) {
        cb.addItem(new MstStaff());
        SystemInfo.initStaffComponent(cb);

        cb.setSelectedIndex(0);
    }

    /**
     * 発注書作成画面用FocusTraversalPolicy
     */
    private class RegisterOrderSlipPanelFocusTraversalPolicy extends FocusTraversalPolicy {

        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentAfter(Container aContainer, Component aComponent) {
            return totalReturn;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentBefore(Container aContainer, Component aComponent) {


            return totalReturn;
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。 このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer 先頭の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer) {
            return totalReturn;
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。 このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer aContainer - 最後の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer) {
            return totalReturn;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。 aContainer
         * をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         *
         * @param aContainer デフォルトの Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer) {
            return totalReturn;
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。 show() または setVisible(true)
         * の呼び出しで一度ウィンドウが表示されると、 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、 または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         *
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        public Component getInitialComponent(Window window) {
            return totalReturn;
        }
    }
}
