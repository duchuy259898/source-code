/*
 * BackProductPanel.java
 *
 * Created on 2008/09/16, 17:16
 */

package com.geobeck.sosia.pos.hair.product;

import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.swing.MessageDialog;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.util.Date;
import java.util.Calendar;

import com.geobeck.sosia.pos.hair.product.logic.BackProductLogic;
/**
 *
 * @author  ryu
 */
public class BackProductPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
    private final int INVALID_TIME  = 1;
    private int reportType = 0;
    
    /** Creates new form BackProductPanel */
    public BackProductPanel() {
        this.setSize(500, 170);
        this.setPath("商品管理 >> 帳票");
        this.setTitle("返品一覧表");

        initComponents();
        
        ftp	= new LocalFocusTraversalPolicy();
        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        
        SystemInfo.initGroupShopComponents(shop, 2);
        this.initCalendar();
        addMouseCursorChange();
        setKeyListener();
        
        if (SystemInfo.getAccountSetting().getReportPriceType() == 0) {
            rdoTaxBlank.setSelected(false);
            rdoTaxUnit.setSelected(true);
        } else {
            rdoTaxBlank.setSelected(true);
            rdoTaxUnit.setSelected(false);
        }
        
    }
    
    private void initCalendar() {
        Date today = new Date();
        this.calcFrom.setDate(today);
        this.calcTo.setDate(today);
    }
    
    private boolean checkInputDate() {
        boolean isDate = true;
        
        Calendar fromDate = Calendar.getInstance();
        fromDate.setTime(this.calcFrom.getDate());
        Calendar toDate = Calendar.getInstance();
        toDate.setTime(this.calcTo.getDate());
        
        if( fromDate.after(toDate)) {
            isDate = false;
        }
        return isDate;
    }
    
    private void generateReport() {
        int shopid = 0;
        BackProductLogic logic = null;
        
        if( this.checkInputDate() ) {
            MstShop ms  = (MstShop)this.shop.getSelectedItem();
            shopid = ms.getShopID();
            logic = new BackProductLogic(shopid, this.calcTo.getDate(), this.calcFrom.getDate(), this.reportType);
            logic.setShopName( ms.getShopName() );
            
            if(this.rdoTaxUnit.isSelected()) {
                logic.setTaxType(BackProductLogic.TAX_INCLUDED);
            }
            
            if( this.rdoTaxBlank.isSelected()) {
                logic.setTaxType(BackProductLogic.TAX_EXCLUDED);
            }
            
            int result = logic.viewBackProductReport();
            if(result == logic.RESULT_SUCCESS ){
                // 成功
            }else if(result == logic.RESULT_DATA_NOTHNIG ){
                // データなし
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                
            }else if(result == logic.RESULT_ERROR ){
                // 予期せぬエラー
                MessageDialog.showMessageDialog( this,
                        MessageUtil.getMessage(1099),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE );
            }
            
        } else {
            this.displayMessage(this.INVALID_TIME);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        buttonGroup1 = new javax.swing.ButtonGroup();
        btnOutputPdf = new javax.swing.JButton();
        shopLabel = new javax.swing.JLabel();
        lblTax = new javax.swing.JLabel();
        rdoTaxUnit = new javax.swing.JRadioButton();
        rdoTaxBlank = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        calcFrom = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        calcTo = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel2 = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        btnOutputExcel = new javax.swing.JButton();

        btnOutputPdf.setIcon(SystemInfo.getImageIcon("/button/print/output_pdf_off.jpg"));
        btnOutputPdf.setBorderPainted(false);
        btnOutputPdf.setContentAreaFilled(false);
        btnOutputPdf.setPressedIcon(SystemInfo.getImageIcon("/button/print/output_pdf_on.jpg"));
        btnOutputPdf.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnOutputPdfActionPerformed(evt);
            }
        });

        shopLabel.setText("\u5e97\u8217");

        lblTax.setText("\u7a0e\u533a\u5206");

        buttonGroup1.add(rdoTaxUnit);
        rdoTaxUnit.setSelected(true);
        rdoTaxUnit.setText("\u7a0e\u8fbc");
        rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxUnit.setOpaque(false);

        buttonGroup1.add(rdoTaxBlank);
        rdoTaxBlank.setText("\u7a0e\u629c");
        rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxBlank.setOpaque(false);

        jLabel1.setText("\u96c6\u8a08\u671f\u9593");

        calcFrom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        calcFrom.setDefaultDate(new java.util.Date());

        calcTo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        calcTo.setDefaultDate(new java.util.Date());

        jLabel2.setText("\uff5e");

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setContentAreaFilled(false);
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnOutputExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTax)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(shopLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(rdoTaxUnit)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rdoTaxBlank, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(calcFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(calcTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                                .addComponent(btnOutputPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnOutputExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(calcTo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(calcFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTax, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdoTaxUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdoTaxBlank, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnOutputPdf, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnOutputExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
	private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutputExcelActionPerformed
	{//GEN-HEADEREND:event_btnOutputExcelActionPerformed
            this.reportType  = BackProductLogic.EXPORT_FILE_XLS;
            this.generateReport();
	}//GEN-LAST:event_btnOutputExcelActionPerformed
        
	private void btnOutputPdfActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutputPdfActionPerformed
	{//GEN-HEADEREND:event_btnOutputPdfActionPerformed
            
            this.reportType  = BackProductLogic.EXPORT_FILE_PDF;
            this.generateReport();
            
            // <editor-fold defaultstate="collapsed" desc=" Old Code">
            // gloridel comment out start
                /*ReportLogic logic = new ReportLogic();
                ReportParameterBean paramBean = new ReportParameterBean();
                paramBean.setMainReportType(ReportParameterBean.MAIN_REPORT_BUSINESS);
                 
                // 税区分(税抜き)
                if(this.rdoTaxBlank.isSelected()) {
                        paramBean.setTaxType(ReportParameterBean.TAX_TYPE_BLANK);
                }
                // 税区分(税込み)
                else if(this.rdoTaxUnit.isSelected()) {
                        paramBean.setTaxType(ReportParameterBean.TAX_TYPE_UNIT);
                }
                 
                boolean logicResult = true;
                 */
            // gloridel comment out end
            
            //try {
            
            //店舗
                   /* if(shop.getText() instanceof MstShop) {
                                MstShop		ms	=	(MstShop)shop.getText();
                                paramBean.setTargetName(ms.getShopName());
                                paramBean.setShopIDList(ms.getShopID().toString());
                    
                        }*/
            
            // gloridel comment out start
            //対象となる店舗が存在しない場合
                   /* if(paramBean.getShopIDList().equals("")) {
                                MessageDialog.showMessageDialog(this,
                                                MessageUtil.getMessage(4001),
                                                this.getTitle(),
                                                JOptionPane.ERROR_MESSAGE);
                                return;
                        }
                    
                    
                        ConnectionWrapper cw = SystemInfo.getConnection();
                    
                        //DateRange dateRange = (DateRange) inventryPeriod.getSelectedItem();
                } catch (Exception e) {
                        SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                        MessageDialog.showMessageDialog(this,
                                        MessageUtil.getMessage(1099),
                                        this.getTitle(),
                                        JOptionPane.ERROR_MESSAGE);
                        return;
                }
                    
                // エラー時
                if(!logicResult) {
                        MessageDialog.showMessageDialog(this,
                                        MessageUtil.getMessage(4001),
                                        this.getTitle(),
                                        JOptionPane.ERROR_MESSAGE);
                } */
            // gloridel comment out end
            // </editor-fold>
	}//GEN-LAST:event_btnOutputPdfActionPerformed
        
        // <editor-fold defaultstate="collapsed" desc=" Variables declaration - do not modify  ">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JButton btnOutputPdf;
    private javax.swing.ButtonGroup buttonGroup1;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo calcFrom;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo calcTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblTax;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(btnOutputPdf);
        SystemInfo.addMouseCursorChange(btnOutputExcel);
    }
    
    private void setKeyListener() {
        shop.addKeyListener(SystemInfo.getMoveNextField());
        shop.addFocusListener(SystemInfo.getSelectText());
        calcFrom.addKeyListener(SystemInfo.getMoveNextField());
        calcFrom.addFocusListener(SystemInfo.getSelectText());
        calcTo.addKeyListener(SystemInfo.getMoveNextField());
        calcTo.addFocusListener(SystemInfo.getSelectText());
        rdoTaxUnit.addKeyListener(SystemInfo.getMoveNextField());
        rdoTaxUnit.addFocusListener(SystemInfo.getSelectText());
        rdoTaxBlank.addKeyListener(SystemInfo.getMoveNextField());
        rdoTaxBlank.addKeyListener(SystemInfo.getMoveNextField());
    }
    
    private void displayMessage(int messageid) {
        switch(messageid) {
            case INVALID_TIME:
                MessageDialog.showMessageDialog( this.getParentFrame(),
                        MessageUtil.getMessage(12005),
                        JOptionPane.ERROR_MESSAGE );
                
                break;
            default:
                break;
        }
        
    }
    
    private LocalFocusTraversalPolicy   ftp;
    /**
     * FocusTraversalPolicyを取得する。
     * @return FocusTraversalPolicy
     */
    public LocalFocusTraversalPolicy getFocusTraversalPolicy() {
        return  ftp;
    }
    
    /**
     * FocusTraversalPolicy
     */
    private class LocalFocusTraversalPolicy
            extends FocusTraversalPolicy {
        ArrayList<Component> controls = new ArrayList<Component>();
        public LocalFocusTraversalPolicy() {
            controls.add(shop);
            controls.add(calcFrom);
            controls.add(calcTo);
            controls.add(rdoTaxUnit);
            controls.add(rdoTaxBlank);
            
            // 最後に先頭を再度登録(同時にEnabledがFalseにならないところまで重複登録)
            controls.add(shop);
            controls.add(calcFrom);
        };
        
        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            boolean find = false;
            for(Component co : controls){
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }
        
        /**
         * aComponent の前にフォーカスを受け取る Component を返します。
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            boolean find = false;
            for( int ii = controls.size(); ii>0; ii-- ){
                Component co = controls.get(ii-1);
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }
        
        /**
         * トラバーサルサイクルの最初の Component を返します。
         */
        public Component getFirstComponent(Container aContainer) {
            return getDefaultComponent(aContainer);
        }
        
        /**
         * トラバーサルサイクルの最後の Component を返します。
         */
        public Component getLastComponent(Container aContainer) {
            return getComponentBefore(aContainer, controls.get(0));
        }
        
        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。
         */
        public Component getDefaultComponent(Container aContainer) {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
        
        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
         */
        public Component getInitialComponent(Window window) {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
    }
    
    
}
