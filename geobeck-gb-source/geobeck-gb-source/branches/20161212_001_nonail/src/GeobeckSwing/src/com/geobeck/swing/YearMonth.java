/*
 * YearMonth.java
 *
 * Created on 2007/08/28, 9:26
 */

package com.geobeck.swing;

import java.awt.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;

/**
 * 年月を入力するコンポーネント
 * @author  katagiri
 */
public class YearMonth extends javax.swing.JPanel
{
	/**
	 * デフォルトの最小年
	 */
	public static final int			DEFAULT_MIN_YEAR	=	2001;
	/**
	 * デフォルトの最大年
	 */
	public static final int			DEFAULT_MAX_YEAR	=	2010;
	
	/**
	 * コンストラクタ
	 */
	public YearMonth()
	{
		initComponents();
		this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        yearComboBox = new javax.swing.JComboBox();
        monthLabel = new javax.swing.JLabel();
        monthComboBox = new javax.swing.JComboBox();
        yearLabel = new javax.swing.JLabel();

        setOpaque(false);
        yearComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                yearComboBoxActionPerformed(evt);
            }
        });

        monthLabel.setText("\u6708");

        yearLabel.setText("\u5e74");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yearLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(monthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(yearComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
            .addComponent(yearLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
            .addComponent(monthComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
            .addComponent(monthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * 年が変更されたとき
	 * @param evt 
	 */
	private void yearComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_yearComboBoxActionPerformed
	{//GEN-HEADEREND:event_yearComboBoxActionPerformed
		this.initMonth();
	}//GEN-LAST:event_yearComboBoxActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox monthComboBox;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JComboBox yearComboBox;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * 最小年月
	 */
	private Calendar		minDate			=	Calendar.getInstance();
	/**
	 * 最大年月
	 */
	private Calendar		maxDate			=	Calendar.getInstance();
	/**
	 * 空白をセットするかどうか
	 */
	private boolean			insertBlank		=	true;
	
	/**
	 * 初期化処理
	 */
	private void init()
	{
		minDate.set(DEFAULT_MIN_YEAR, 0, 1);
		maxDate.set(DEFAULT_MAX_YEAR, 11, 1);
		this.initYearMonth();
	}
	
	/**
	 * 年月を初期化する
	 */
	private void initYearMonth()
	{
		this.initComoboBox(yearComboBox, minDate.get(Calendar.YEAR), maxDate.get(Calendar.YEAR));
		this.initMonth();
	}
	
	/**
	 * 月を初期化する
	 */
	private void initMonth()
	{
		Integer		temp	=	(Integer)monthComboBox.getSelectedItem();
		
		monthComboBox.removeAllItems();
		
		//年が選択されている場合
		if(this.getSelectedYear() != null)
		{
			int		min	=	1;
			int		max	=	12;
			
			if(this.getSelectedYear() == minDate.get(Calendar.YEAR))
			{
				min	=	minDate.get(Calendar.MONTH) + 1;
			}
			
			if(this.getSelectedYear() == maxDate.get(Calendar.YEAR))
			{
				max	=	maxDate.get(Calendar.MONTH) + 1;
			}
			
			this.initComoboBox(monthComboBox, min, max);
		}
		
		monthComboBox.setSelectedItem(temp);
	}
	
	/**
	 * コンボボックスを初期化する
	 * @param comboBox 初期化するコンボボックス
	 * @param min 最小値
	 * @param max 最大値
	 */
	private void initComoboBox(JComboBox comboBox, int min, int max)
	{
		comboBox.removeAllItems();
		
		if(this.isInsertBlank())
		{
			comboBox.addItem(null);
		}
		
		for(int i = min; i <= max; i ++)
		{
			comboBox.addItem(new Integer(i));
		}
	}
	
	/**
	 * 年を
	 * @return 
	 */
	public JComboBox getYear()
	{
		return	yearComboBox;
	}
	
	/**
	 * 
	 * @return 
	 */
	public JComboBox getMonth()
	{
		return	monthComboBox;
	}
	
	/**
	 * 
	 * @param year 
	 * @param month 
	 */
	public void setMinYearMonth(Integer year, Integer month)
	{
		minDate.set(year, month - 1, 1);
		this.initYearMonth();
	}
	
	/**
	 * 
	 * @param minYearMonth 
	 */
	public void setMinYearMonth(Calendar minYearMonth)
	{
		this.setMinYearMonth(minYearMonth.get(Calendar.YEAR),
				minYearMonth.get(Calendar.MONTH) + 1);
	}
	
	/**
	 * 
	 * @return 
	 */
	public Calendar getMinYearMonth()
	{
		return	minDate;
	}
	
	/**
	 * 
	 * @param year 
	 * @param month 
	 */
	public void setMaxYearMonth(Integer year, Integer month)
	{
		maxDate.set(year, month - 1, 1);
		this.initYearMonth();
	}
	
	/**
	 * 
	 * @param maxYearMonth 
	 */
	public void setMaxYearMonth(Calendar maxYearMonth)
	{
		this.setMaxYearMonth(maxYearMonth.get(Calendar.YEAR),
				maxYearMonth.get(Calendar.MONTH) + 1);
	}
	
	/**
	 * 
	 * @return 
	 */
	public Calendar getMaxYearMonth()
	{
		return	maxDate;
	}
	
	/**
	 * 
	 * @param insertBlank 
	 */
	public void setInsertBlank(boolean insertBlank)
	{
		this.insertBlank	=	insertBlank;
	}
	
	/**
	 * 
	 * @return 
	 */
	public boolean isInsertBlank()
	{
		return	insertBlank;
	}
	
	/**
	 * 
	 * @param year 
	 */
	public void setSelectedYear(Integer year)
	{
		yearComboBox.setSelectedItem(year);
	}
	
	/**
	 * 
	 * @return 
	 */
	public Integer getSelectedYear()
	{
		return	(Integer)yearComboBox.getSelectedItem();
	}
	
	/**
	 * 
	 * @param month 
	 */
	public void setSelectedMonth(Integer month)
	{
		monthComboBox.setSelectedItem(month);
	}
	
	/**
	 * 
	 * @return 
	 */
	public Integer getSelectedMonth()
	{
		return	(Integer)monthComboBox.getSelectedItem();
	}
	
	/**
	 * 
	 * @param year 
	 * @param month 
	 */
	public void setSelectedYearMonth(Integer year, Integer month)
	{
		this.setSelectedYear(year);
		this.setSelectedMonth(month);
	}
	
	/**
	 * 
	 * @param yearMonth 
	 */
	public void setSelectedYearMonth(Calendar yearMonth)
	{
		this.setSelectedYear(yearMonth.get(Calendar.YEAR));
		this.setSelectedMonth(yearMonth.get(Calendar.MONTH));
	}
	
	/**
	 * 
	 * @return 
	 */
	public boolean isSelected()
	{
		if(this.isInsertBlank())
		{
			return	(0 < yearComboBox.getSelectedIndex() &&
					0 < monthComboBox.getSelectedIndex());
		}
		else
		{
			return	(0 <= yearComboBox.getSelectedIndex() &&
					0 <= monthComboBox.getSelectedIndex());
		}
	}
	
	/**
	 * 
	 * @return 
	 */
	public Calendar getSelectedYearMonth()
	{
		if(!this.isSelected())
		{
			return	null;
		}
		
		Calendar	yearMonth	=	Calendar.getInstance();
		yearMonth.set(this.getSelectedYear(), this.getSelectedMonth() - 1, 1);
		return	yearMonth;
	}
	
	/**
	 * 
	 * @param bg 
	 */
	public void setComboBoxBackground(Color bg)
	{
		yearComboBox.setBackground(bg);
		monthComboBox.setBackground(bg);
	}
	
	/**
	 * 
	 * @return 
	 */
	public Color getComboBoxBackground()
	{
		return	yearComboBox.getBackground();
	}
	
	/**
	 * 
	 * @param border 
	 */
	public void setComboBoxBorder(Border border)
	{
		yearComboBox.setBorder(border);
		monthComboBox.setBorder(border);
	}
	
	/**
	 * 
	 * @return 
	 */
	public Border getComboBoxBorder()
	{
		return	yearComboBox.getBorder();
	}
	
	/**
	 * 
	 * @param font 
	 */
	public void setFont(Font font)
	{
		super.setFont(font);
		if(yearComboBox != null)
		{
			yearComboBox.setFont(font);
			yearLabel.setFont(font);
			monthComboBox.setFont(font);
			monthLabel.setFont(font);
		}
	}
	
	/**
	 * 
	 * @return 
	 */
	public boolean isYearEditable()
	{
		return	yearComboBox.isEditable();
	}
	
	/**
	 * 
	 * @param aFlag 
	 */
	public void setYearEditable(boolean aFlag)
	{
		yearComboBox.setEditable(aFlag);
	}
	
	/**
	 * 
	 * @return 
	 */
	public boolean isMonthEditable()
	{
		return	monthComboBox.isEditable();
	}
	
	/**
	 * 
	 * @param aFlag 
	 */
	public void setMonthEditable(boolean aFlag)
	{
		monthComboBox.setEditable(aFlag);
	}
	
	/**
	 * 
	 * @param aFlag 
	 */
	public void setEditable(boolean aFlag)
	{
		this.setYearEditable(aFlag);
		this.setMonthEditable(aFlag);
	}
	
	/**
	 * 
	 * @return 
	 */
	public boolean isYearEnabled()
	{
		return	yearComboBox.isEnabled();
	}
	
	/**
	 * 
	 * @param b 
	 */
	public void setYearEnabled(boolean b)
	{
		yearComboBox.setEnabled(b);
	}
	
	/**
	 * 
	 * @return 
	 */
	public boolean isMonthEnabled()
	{
		return	monthComboBox.isEnabled();
	}
	
	/**
	 * 
	 * @param b 
	 */
	public void setMonthEnabled(boolean b)
	{
		monthComboBox.setEnabled(b);
	}
	
	/**
	 * 
	 * @param b 
	 */
	public void setEnabled(boolean b)
	{
		this.setYearEnabled(b);
		this.setMonthEnabled(b);
	}
}
