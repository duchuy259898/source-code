/*
 * SearchAddressDialog.java
 *
 * Created on 2006/04/20, 16:05
 */

package com.geobeck.sosia.pos.search;

import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;

/**
 * 住所検索画面
 * @author katagiri
 */
public class SearchAddressDialog extends javax.swing.JDialog
{
	/**
	 * コンストラクタ
	 * @param parent 
	 * @param modal 
	 */
	public SearchAddressDialog(java.awt.Frame parent, boolean modal)
	{
		super(parent, modal);
		initComponents();
		addMouseCursorChange();
		SwingUtil.moveCenter(this);
		initPrefectures();
	}
	
	/**
	 * コンストラクタ
	 * @param parent 
	 * @param modal 
	 */
	public SearchAddressDialog(java.awt.Dialog parent, boolean modal)
	{
		super(parent, modal);
		initComponents();
		addMouseCursorChange();
		SwingUtil.moveCenter(this);
		initPrefectures();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        backPanel = new com.geobeck.swing.ImagePanel();
        prefecturesScrollPane = new javax.swing.JScrollPane();
        prefectures = new javax.swing.JList();
        consonant1 = new javax.swing.JList();
        citiesScrollPane = new javax.swing.JScrollPane();
        cities = new javax.swing.JList();
        citiesLabel = new javax.swing.JLabel();
        consonant2 = new javax.swing.JList();
        townsLabel = new javax.swing.JLabel();
        townsScrollPane = new javax.swing.JScrollPane();
        towns = new javax.swing.JList();
        selectButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        prefecturesLabel = new javax.swing.JLabel();

        setTitle("\u4f4f\u6240\u691c\u7d22");
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        backPanel.setImage(SystemInfo.getImageIcon("/contents_background.jpg"));
        backPanel.setRepeat(true);
        prefecturesScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        prefecturesScrollPane.setFocusTraversalPolicy(getFocusTraversalPolicy());
        prefectures.setSelectionBackground(new java.awt.Color(220, 220, 220));
        prefectures.setSelectionForeground(new java.awt.Color(0, 0, 0));
        prefectures.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                prefecturesValueChanged(evt);
            }
        });

        prefecturesScrollPane.setViewportView(prefectures);

        consonant1.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "\u3000\u3000", "\u30a2\u884c", "\u30ab\u884c", "\u30b5\u884c", "\u30bf\u884c", "\u30ca\u884c", "\u30cf\u884c", "\u30de\u884c", "\u30e4\u884c", "\u30e9\u884c", "\u30ef\u884c" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        consonant1.setFocusTraversalPolicy(getFocusTraversalPolicy());
        consonant1.setFocusable(false);
        consonant1.setSelectionBackground(new java.awt.Color(220, 220, 220));
        consonant1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        consonant1.setVisibleRowCount(11);
        consonant1.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                consonant1ValueChanged(evt);
            }
        });

        citiesScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        citiesScrollPane.setFocusTraversalPolicy(getFocusTraversalPolicy());
        cities.setSelectionBackground(new java.awt.Color(220, 220, 220));
        cities.setSelectionForeground(new java.awt.Color(0, 0, 0));
        cities.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                citiesValueChanged(evt);
            }
        });

        citiesScrollPane.setViewportView(cities);

        citiesLabel.setText("\u5e02\u533a\u753a\u6751");

        consonant2.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "\u3000\u3000", "\u30a2\u884c", "\u30ab\u884c", "\u30b5\u884c", "\u30bf\u884c", "\u30ca\u884c", "\u30cf\u884c", "\u30de\u884c", "\u30e4\u884c", "\u30e9\u884c", "\u30ef\u884c" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        consonant2.setFocusTraversalPolicy(getFocusTraversalPolicy());
        consonant2.setFocusable(false);
        consonant2.setSelectionBackground(new java.awt.Color(220, 220, 220));
        consonant2.setSelectionForeground(new java.awt.Color(0, 0, 0));
        consonant2.setVisibleRowCount(11);
        consonant2.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                consonant2ValueChanged(evt);
            }
        });

        townsLabel.setText("\u753a\u57df");

        townsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        townsScrollPane.setFocusTraversalPolicy(getFocusTraversalPolicy());
        towns.setSelectionBackground(new java.awt.Color(220, 220, 220));
        towns.setSelectionForeground(new java.awt.Color(0, 0, 0));
        townsScrollPane.setViewportView(towns);

        selectButton.setIcon(SystemInfo.getImageIcon("/button/select/select_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setContentAreaFilled(false);
        selectButton.setFocusTraversalPolicy(getFocusTraversalPolicy());
        selectButton.setFocusable(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                selectButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        backButton.setBorderPainted(false);
        backButton.setContentAreaFilled(false);
        backButton.setFocusTraversalPolicy(getFocusTraversalPolicy());
        backButton.setFocusable(false);
        backButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        backButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                backButtonActionPerformed(evt);
            }
        });

        prefecturesLabel.setText("\u90fd\u9053\u5e9c\u770c");

        org.jdesktop.layout.GroupLayout backPanelLayout = new org.jdesktop.layout.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, backPanelLayout.createSequentialGroup()
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(prefecturesScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(prefecturesLabel))
                        .add(25, 25, 25)
                        .add(consonant1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(citiesScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 149, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(citiesLabel))
                        .add(26, 26, 26)
                        .add(consonant2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(townsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                            .add(townsLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(backPanelLayout.createSequentialGroup()
                        .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, backPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(prefecturesLabel)
                            .add(citiesLabel)
                            .add(townsLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(townsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, citiesScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .add(prefecturesScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .add(consonant2)))
                    .add(backPanelLayout.createSequentialGroup()
                        .add(57, 57, 57)
                        .add(consonant1)))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * 選択ボタンが押されたときの処理
	 * @param evt 
	 */
	private void selectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectButtonActionPerformed
	{//GEN-HEADEREND:event_selectButtonActionPerformed
		this.setSelectedData();
		this.setVisible(false);
	}//GEN-LAST:event_selectButtonActionPerformed

	/**
	 * 戻るボタンが押されたときの処理
	 * @param evt 
	 */
	private void backButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButtonActionPerformed
	{//GEN-HEADEREND:event_backButtonActionPerformed
		this.setVisible(false);
	}//GEN-LAST:event_backButtonActionPerformed

	/**
	 * 町域の５０音リストの選択項目が変更されたときの処理
	 * @param evt 
	 */
	private void consonant2ValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_consonant2ValueChanged
	{//GEN-HEADEREND:event_consonant2ValueChanged
		this.initTowns();
	}//GEN-LAST:event_consonant2ValueChanged

	/**
	 * 市区町村の５０音リストの選択項目が変更されたときの処理
	 * @param evt 
	 */
	private void consonant1ValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_consonant1ValueChanged
	{//GEN-HEADEREND:event_consonant1ValueChanged
		this.initCites();
		//consonant2.clearSelection();
		//this.initTowns();
	}//GEN-LAST:event_consonant1ValueChanged

	/**
	 * 市区町村の選択項目が変更されたときの処理
	 * @param evt 
	 */
	private void citiesValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_citiesValueChanged
	{//GEN-HEADEREND:event_citiesValueChanged
		consonant2.clearSelection();
		this.initTowns();
	}//GEN-LAST:event_citiesValueChanged

	/**
	 * 都道府県の選択項目が変更されたときの処理
	 * @param evt 
	 */
	private void prefecturesValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_prefecturesValueChanged
	{//GEN-HEADEREND:event_prefecturesValueChanged
		consonant1.clearSelection();
		this.initCites();
		consonant2.clearSelection();
		this.initTowns();
	}//GEN-LAST:event_prefecturesValueChanged
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private com.geobeck.swing.ImagePanel backPanel;
    private javax.swing.JList cities;
    private javax.swing.JLabel citiesLabel;
    private javax.swing.JScrollPane citiesScrollPane;
    private javax.swing.JList consonant1;
    private javax.swing.JList consonant2;
    private javax.swing.JList prefectures;
    private javax.swing.JLabel prefecturesLabel;
    private javax.swing.JScrollPane prefecturesScrollPane;
    private javax.swing.JButton selectButton;
    private javax.swing.JList towns;
    private javax.swing.JLabel townsLabel;
    private javax.swing.JScrollPane townsScrollPane;
    // End of variables declaration//GEN-END:variables
	
	private Vector<String>	postalCode		=	new Vector<String>();
	private String	selectedPostalCode		=	"";
	private String	selectedPrefecture		=	"";
	private String	selectedCity			=	"";
	private String	selectedTown			=	"";
	
	/**
	 * 住所検索画面用FocusTraversalPolicy
	 */
	private	SearchAddressFocusTraversalPolicy	ftp	=
			new SearchAddressFocusTraversalPolicy();
	
	/**
	 * 住所検索画面用FocusTraversalPolicyを取得する。
	 * @return 住所検索画面用FocusTraversalPolicy
	 */
	public SearchAddressFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(selectButton);
		SystemInfo.addMouseCursorChange(backButton);
	}
	
	/**
	 * 都道府県リストを初期化する。
	 */
	private void initPrefectures()
	{
		prefectures.clearSelection();
		prefectures.removeAll();
		
		String				sql	=	"";
		
		sql	+=	"select prefecture_code as code, prefecture_name\n";
		sql	+=	"from mst_prefecture\n";
		sql	+=	"order by prefecture_code\n";
		
		this.setListItems(prefectures, sql, "prefecture_name");
		
		this.setDefaultPrefecture();
	}
	
	/**
	 * 市区町村リストを初期化する。
	 */
	private void initCites()
	{
		citiesScrollPane.getVerticalScrollBar().setValue(0);
		cities.clearSelection();
		cities.setListData(new Vector());
		
		if(prefectures.getSelectedIndex() < 0)	return;
		
		String				sql	=	"";

		sql	+=	"select		distinct code, coalesce(city_name, '　') as city_name\n";
		sql	+=	"from		mst_postal_code\n";
		sql	+=	"where		prefecture_name = '" + prefectures.getSelectedValue().toString() + "'\n";
		sql	+=	this.createConsonantRange(consonant1.getSelectedIndex(), "city_kana");
		sql	+=	"order by	code\n";
		
		this.setListItems(cities, sql, "city_name");
	}
	
	/**
	 * 町域リストを初期化する。
	 */
	private void initTowns()
	{
		townsScrollPane.getVerticalScrollBar().setValue(0);
		towns.clearSelection();
		towns.setListData(new Vector());
		postalCode.clear();
		
		if(prefectures.getSelectedIndex() < 0)	return;
		if(cities.getSelectedIndex() < 0)	return;
		
		String				sql	=	"";

		sql	+=	"select		postal_code, coalesce(town_name, ' ') as town_name\n";
		sql	+=	"from		mst_postal_code\n";
		sql	+=	"where		prefecture_name = '" + prefectures.getSelectedValue().toString() + "'\n";
		sql	+=	"		and	city_name = '" + cities.getSelectedValue().toString() + "'\n";
		sql	+=	this.createConsonantRange(consonant2.getSelectedIndex(), "town_kana");
		sql	+=	"order by	case when town_kana is null then ' ' when position('(' in town_kana) = 0 then town_kana else substring(town_kana, 1, position('(' in town_kana)) end, postal_code\n";
		
		this.setListItems(towns, sql, "town_name");
	}
	
	/**
	 * 50音の条件文を作成する。
	 * @param index 選択されている50音リストのインデックス
	 * @param colName テーブルの列名
	 * @return 50音の条件文
	 */
	private String createConsonantRange(int index, String colName)
	{
		switch(index)
		{
			//ア行
			case 1:
				return	"and 'ｱ' <= " + colName + " and " + colName + " < 'ｶ'\n";
			//カ行
			case 2:
				return	"and 'ｶ' <= " + colName + " and " + colName + " < 'ｻ'\n";
			//サ行
			case 3:
				return	"and 'ｻ' <= " + colName + " and " + colName + " < 'ﾀ'\n";
			//タ行
			case 4:
				return	"and 'ﾀ' <= " + colName + " and " + colName + " < 'ﾅ'\n";
			//ナ行
			case 5:
				return	"and 'ﾅ' <= " + colName + " and " + colName + " < 'ﾊ'\n";
			//ハ行
			case 6:
				return	"and 'ﾊ' <= " + colName + " and " + colName + " < 'ﾏ'\n";
			//マ行
			case 7:
				return	"and 'ﾏ' <= " + colName + " and " + colName + " < 'ﾔ'\n";
			//ヤ行
			case 8:
				return	"and 'ﾔ' <= " + colName + " and " + colName + " < 'ﾗ'\n";
			//ラ行
			case 9:
				return	"and 'ﾗ' <= " + colName + " and " + colName + " < 'ﾜ'\n";
			//ワ行
			case 10:
				return	"and 'ﾜ' <= " + colName + " and " + colName + " <= 'ﾝ'\n";
			default:
				return	"";
		}
	}
	
	/**
	 * リストに項目をセットする。
	 * @param list 項目をセットするリスト
	 * @param sql セットする項目を取得するＳＱＬ文
	 * @param colName 項目の列名
	 */
	private void setListItems(JList list, String sql, String colName)
	{
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getBaseConnection();

			if(con == null)	return;
			
			ResultSetWrapper	rs	=	con.executeQuery(sql);
			
			Vector<String>	temp	=	new Vector<String>();
			
			while(rs.next())
			{
				if(colName.equals("town_name"))
				{
					postalCode.add(rs.getString("postal_code"));
				}
				
				temp.add((rs.getString(colName).equals("") ? " " : rs.getString(colName)));
			}
			
			rs.close();
			
			list.setListData(temp);
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	
	private void setDefaultPrefecture()
	{
		prefectures.setSelectedIndex(
				this.getDefaultPrefectureIndex());
		prefectures.ensureIndexIsVisible(prefectures.getSelectedIndex());
	}
	
	
	private Integer getDefaultPrefectureIndex()
	{
		Integer		index		=	-1;
		
		try
		{
			ConnectionWrapper	con	=	SystemInfo.getBaseConnection();

			if(con == null)	return	index;
			
			ResultSetWrapper	rs	=	con.executeQuery(
					this.getDefaultPrefectureIndexSQL());
			
			if(rs.next())
			{
				index	=	rs.getInt("p_index");
			}
			
			rs.close();
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		return	index;
	}
	
	private String getDefaultPrefectureIndexSQL()
	{
		String		postalCode	=	"";
		
		if(SystemInfo.getCurrentShop().getShopID() == 0)
		{
			postalCode	=	SystemInfo.getGroup().getPostalCode();
		}
		else
		{
			postalCode	=	SystemInfo.getCurrentShop().getPostalCode();
		}
		
		return	"select to_number(mp.prefecture_code, '99') - 1 as p_index\n" +
				"from mst_postal_code mpc\n" +
				"inner join mst_prefecture mp\n" +
				"on mp.prefecture_code = substr(mpc.code, 1, 2)\n" +
				"where mpc.postal_code = '" + postalCode + "'\n";
	}
	

	/**
	 * 選択された住所の郵便番号を取得する。
	 * @return 選択された住所の郵便番号
	 */
	public String getSelectedPostalCode()
	{
		return selectedPostalCode;
	}

	/**
	 * 選択された住所の郵便番号をセットする。
	 * @param selectedPostalCode 選択された住所の郵便番号
	 */
	private void setSelectedPostalCode(String selectedPostalCode)
	{
		this.selectedPostalCode = selectedPostalCode;
	}

	/**
	 * 選択された都道府県を取得する。
	 * @return 選択された都道府県
	 */
	public String getSelectedPrefecture()
	{
		return selectedPrefecture;
	}

	/**
	 * 選択された都道府県をセットする。
	 * @param selectedPrefecture 選択された都道府県
	 */
	private void setSelectedPrefecture(String selectedPrefecture)
	{
		this.selectedPrefecture = selectedPrefecture;
	}

	/**
	 * 選択された市区を取得する。
	 * @return 選択された市区
	 */
	public String getSelectedCity()
	{
		return selectedCity;
	}

	/**
	 * 選択された市区をセットする。
	 * @param selectedCity 選択された市区
	 */
	private void setSelectedCity(String selectedCity)
	{
		this.selectedCity = selectedCity;
	}

	/**
	 * 選択された町を取得する。
	 * @return 選択された町
	 */
	public String getSelectedTown()
	{
		return selectedTown;
	}

	/**
	 * 選択された町をセットする。
	 * @param selectedTown 選択された町
	 */
	private void setSelectedTown(String selectedTown)
	{
		this.selectedTown = selectedTown;
	}
	
	/**
	 * 選択されているデータをセットする。
	 */
	private void setSelectedData()
	{
		if(0 <= towns.getSelectedIndex())
		{
			this.setSelectedPostalCode(postalCode.get(towns.getSelectedIndex()));
			this.setSelectedTown(towns.getSelectedValue().toString());
		}
		
		if(0 <= cities.getSelectedIndex())
		{
			this.setSelectedCity(cities.getSelectedValue().toString());
		}
		
		if(0 <= prefectures.getSelectedIndex())
		{
			this.setSelectedPrefecture(prefectures.getSelectedValue().toString());
		}
	}
	
	
	/**
	 * 住所検索画面用FocusTraversalPolicy
	 */
	private class SearchAddressFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(prefectures))
			{
				return cities;
			}
			else if (aComponent.equals(cities))
			{
				return towns;
			}
			else if (aComponent.equals(towns))
			{
				return towns;
			}
			
			return prefectures;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(prefectures))
			{
				return prefectures;
			}
			else if (aComponent.equals(cities))
			{
				return prefectures;
			}
			else if (aComponent.equals(towns))
			{
				return cities;
			}
			
			return prefectures;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return prefectures;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return towns;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return prefectures;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return prefectures;
		}
	}
}
