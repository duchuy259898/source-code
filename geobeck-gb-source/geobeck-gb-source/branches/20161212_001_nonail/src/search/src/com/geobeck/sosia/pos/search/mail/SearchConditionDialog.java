/*
 * SearchConditionDialog.java
 *
 * Created on 2012/03/17, 12:00
 */

package com.geobeck.sosia.pos.search.mail;

import com.geobeck.sosia.pos.system.SystemInfo;
import javax.swing.*;
import javax.swing.table.*;

import com.geobeck.swing.*;
import com.geobeck.sosia.pos.hair.data.mail.DataCondition;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.util.MessageUtil;

/**
 * 条件検索テンプレート画面
 * @author geobeck
 */
public class SearchConditionDialog extends javax.swing.JDialog
{
	/**
	 * コンストラクタ
	 * @param parent 
	 */
	public SearchConditionDialog(java.awt.Frame parent)
	{       
            super(parent, true);
            init();
	}
    
        // 共通初期化処理
        private void init() {
            initComponents();
            addMouseCursorChange();
            SwingUtil.moveCenter(this);
            showData();
        }
        
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backPanel = new com.geobeck.swing.ImagePanel();
        searchResultScrollPane = new javax.swing.JScrollPane();
        searchResult = new com.geobeck.swing.JTableEx();
        selectButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setTitle("条件検索テンプレート");
        setName("searchCustomerFrame"); // NOI18N

        backPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        backPanel.setImage(SystemInfo.getImageIcon("/contents_background.jpg"));
        backPanel.setRepeat(true);

        searchResultScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        searchResultScrollPane.setFocusable(false);

        searchResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "登録日", "テンプレート名", "削除"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        searchResult.setSelectionBackground(new java.awt.Color(255, 210, 142));
        searchResult.setSelectionForeground(new java.awt.Color(0, 0, 0));
        searchResult.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        searchResult.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(searchResult, SystemInfo.getTableHeaderRenderer());
        searchResult.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(searchResult);
        this.initTableColumnWidth();
        searchResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchResultMouseClicked(evt);
            }
        });
        searchResultScrollPane.setViewportView(searchResult);

        selectButton.setIcon(SystemInfo.getImageIcon("/button/select/select_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setFocusable(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCustomer(evt);
            }
        });

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setFocusable(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backPrevious(evt);
            }
        });

        org.jdesktop.layout.GroupLayout backPanelLayout = new org.jdesktop.layout.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, backPanelLayout.createSequentialGroup()
                .addContainerGap(270, Short.MAX_VALUE)
                .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(searchResultScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(searchResultScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void searchResultMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_searchResultMouseClicked
	{//GEN-HEADEREND:event_searchResultMouseClicked

            if (evt.getClickCount() == 2) {
                if (0 <= searchResult.getSelectedRow()) {
                    this.selectedCondition = (DataCondition)searchResult.getValueAt(searchResult.getSelectedRow(), 1);
                    this.setVisible(false);
                }
            }
	}//GEN-LAST:event_searchResultMouseClicked

	/**
	 * 選択ボタンが押されたときの処理
	 */
	private void selectCustomer(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectCustomer
	{//GEN-HEADEREND:event_selectCustomer

	    if (0 <= searchResult.getSelectedRow()) {
                this.selectedCondition = (DataCondition)searchResult.getValueAt(searchResult.getSelectedRow(), 1);
                this.setVisible(false);
	    } else {

                MessageDialog.showMessageDialog(
                        this,
                        MessageUtil.getMessage(1102, "テンプレート名"),
                        this.getTitle(),
                        JOptionPane.WARNING_MESSAGE);
            }

	}//GEN-LAST:event_selectCustomer

	/**
	 * 戻るボタンが押されたときの処理
	 */
	private void backPrevious(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backPrevious
	{//GEN-HEADEREND:event_backPrevious
		this.setVisible(false);
	}//GEN-LAST:event_backPrevious
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.geobeck.swing.ImagePanel backPanel;
    private javax.swing.JButton closeButton;
    private com.geobeck.swing.JTableEx searchResult;
    private javax.swing.JScrollPane searchResultScrollPane;
    private javax.swing.JButton selectButton;
    // End of variables declaration//GEN-END:variables

        private DataCondition selectedCondition = null;

	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{  
            SystemInfo.addMouseCursorChange(selectButton);
            SystemInfo.addMouseCursorChange(closeButton);
	}

        private void delete(DataCondition dc) {

	    if (searchResult.getCellEditor() != null ) searchResult.getCellEditor().stopCellEditing();
            
            int ret = MessageDialog.showYesNoDialog(
                            this,
                            "削除してもよろしいですか？",
                            getTitle(),
                            JOptionPane.QUESTION_MESSAGE,
                            JOptionPane.NO_OPTION);

            if (ret == JOptionPane.YES_OPTION) {

                if (dc.delete()) {
                    DefaultTableModel model = (DefaultTableModel)searchResult.getModel();
                    model.removeRow(searchResult.getSelectedRow());
                }

                showData();
            }
        }

	/**
	 * 削除ボタンを取得する
	 */
	private JButton getDeleteButton(final DataCondition dc) {
            JButton deleteButton = new JButton();
            deleteButton.setBorderPainted(false);
            deleteButton.setContentAreaFilled(false);
            deleteButton.setIcon( new javax.swing.ImageIcon( getClass().getResource( "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_off.jpg") ) );
            deleteButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource( "/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_on.jpg") ) );
            deleteButton.setSize(48, 25);
            deleteButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    delete(dc);
                }
            });

            return deleteButton;
	}

	private void showData()
	{
	    SwingUtil.clearTable(searchResult);

            DefaultTableModel model = (DefaultTableModel)searchResult.getModel();
            
            for (DataCondition dc : DataCondition.getList(SystemInfo.getCurrentShop())) {
                
                Object[] rowData = {
                    dc.getInsDateStrDateOnly(),
                    dc,
                    getDeleteButton(dc)
                };
                model.addRow(rowData);
            }

            selectButton.setEnabled(model.getRowCount() > 0);
	}

	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
            //列の幅を設定する。
            searchResult.getColumnModel().getColumn(0).setPreferredWidth(20);
            searchResult.getColumnModel().getColumn(1).setPreferredWidth(270);
            searchResult.getColumnModel().getColumn(2).setPreferredWidth(10);
	}

    /**
     * @return the selectedCondition
     */
    public DataCondition getSelectedCondition() {
        return selectedCondition;
    }
}
