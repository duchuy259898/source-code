/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.geobeck.sosia.pos.hair.reservation;

import com.geobeck.sosia.pos.hair.customer.MstCustomerPanel;
import com.geobeck.sosia.pos.hair.reservation.RegistReservationDialog;
import com.geobeck.sosia.pos.hair.reservation.api.ComingInfo;
import com.geobeck.sosia.pos.hair.reservation.api.CustomerCommingInfomationResultWSI;
import com.geobeck.sosia.pos.hair.reservation.api.CustomerCommingInfomationResultsWSI;
import com.geobeck.sosia.pos.hair.reservation.api.CustomerCommingInfomationWSI;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.SwingUtil;
import com.google.gson.Gson;
import connectispotapi.ConnectIspotApi;
import java.awt.Cursor;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author IVS
 */
public class BoardReservationInfoPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    // ThuanNK start add 20140317
    private ArrayList<ComingInfo> comingInfoList = new ArrayList<ComingInfo>();
    // ThuanNK end add 20140317

    /**
     * Creates new form BoardReservationInfoPanel
     */
    public BoardReservationInfoPanel() {
        super();
        initComponents();
        this.setSize(800, 600);
        this.setTitle("ÉTÉçÉìÉ{Å[Éhó\ñÒèÓïÒ");
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        mobileMembersScrollPane = new javax.swing.JScrollPane();
        reservationInfo = new com.geobeck.swing.JTableEx();

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        mobileMembersScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        reservationInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "å⁄ãq", "SBå⁄ãqNo", "å⁄ãqñº", "óàìXéûä‘", "ÉXÉeÅ[É^ÉX", "ó\ñÒåoòH", "íSìñéwñº", "íSìñé“", "óàìXéûã‡äz", "ÉÅÉjÉÖÅ[ñº", "ó\ñÒìoò^"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reservationInfo.setSelectionBackground(new java.awt.Color(255, 210, 142));
        reservationInfo.setSelectionForeground(new java.awt.Color(0, 0, 0));
        reservationInfo.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        reservationInfo.getTableHeader().setReorderingAllowed(false);
        this.initTableColumnWidth();
        SwingUtil.setJTableHeaderRenderer(reservationInfo, SystemInfo.getTableHeaderRenderer());
        reservationInfo.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(reservationInfo);
        mobileMembersScrollPane.setViewportView(reservationInfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mobileMembersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 669, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mobileMembersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        ((JDialog) this.getParent().getParent().getParent().getParent()).setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JScrollPane mobileMembersScrollPane;
    private com.geobeck.swing.JTableEx reservationInfo;
    // End of variables declaration//GEN-END:variables
    private ArrayList<MstCustomer> customers = new ArrayList<MstCustomer>();
    private ArrayList<String> comingIds = new ArrayList<String>();
    private ArrayList<String> paymentValues = new ArrayList<String>();

    /**
     * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
     */
    private void initTableColumnWidth() {
        //óÒÇÃïùÇê›íËÇ∑ÇÈÅB
        reservationInfo.getColumnModel().getColumn(0).setPreferredWidth(60);
        reservationInfo.getColumnModel().getColumn(1).setPreferredWidth(90);
        reservationInfo.getColumnModel().getColumn(2).setPreferredWidth(80);
        reservationInfo.getColumnModel().getColumn(3).setPreferredWidth(50);
        reservationInfo.getColumnModel().getColumn(4).setPreferredWidth(50);
        reservationInfo.getColumnModel().getColumn(5).setPreferredWidth(60);
        reservationInfo.getColumnModel().getColumn(10).setPreferredWidth(110);
    }
    //Start edit 20131011 lvut 

    private void showData() {

        MstStaff staff = new MstStaff();
        connectispotapi.ConnectIspotApi WS = new ConnectIspotApi();
        CustomerCommingInfomationWSI wsi = new CustomerCommingInfomationWSI();
        CustomerCommingInfomationResultsWSI results = new CustomerCommingInfomationResultsWSI();
        SimpleDateFormat dateCommFormat = new SimpleDateFormat("yyyyMMdd");
        Calendar calComm = Calendar.getInstance();
        wsi.setPosId(SystemInfo.getPosId());
        wsi.setPassword(SystemInfo.getPosPassWord());
        wsi.setPosSalonId(SystemInfo.getPossSalonId());
        wsi.setComingDate(dateCommFormat.format(calComm.getTime()));
//        wsi.setComingId("");
//        wsi.setPaymentTotalPriceFlg("");
//        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
//        Calendar cal = Calendar.getInstance();
//        wsi.setDiffDateTime("");
//        wsi.setComingIdFlg("");
//        wsi.setStart("");
//        wsi.setCount("");
        wsi.setFormat("json");
        Gson gson = new Gson();
        String jsonResult = WS.getConnectIspotApiPort().commingInfomation(gson.toJson(wsi));
        if (!jsonResult.equals("")) {
            try {
                results = gson.fromJson(jsonResult, CustomerCommingInfomationResultsWSI.class);
            } catch (Exception e) {

                System.out.println("error at http://api-test.sosia.jp/hpb/ConnectIspotApi.php?wsdl-function:commingInfomation At https://wwwtst.beauty.psa.d.hotpepper.jp/CLA/bt/common/v1/search/comingInfo/doSearch");
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                return;

            }
        }

        try {
            ConnectionWrapper con = SystemInfo.getConnection();
            SwingUtil.clearTable(reservationInfo);
            DefaultTableModel model = (DefaultTableModel) reservationInfo.getModel();
            String route = "";
            String route_id = "";
            if (!jsonResult.equals("") && results.getResults().getComing_info().size() > 0) {
                for (int i = 0; i < results.getResults().getComing_info().size(); i++) {
                    MstCustomer customer = new MstCustomer();
                    //customer.loadBySbCustomerId(con);
                    customer.setCustomerNo(results.getResults().getComing_info().get(i).getCustomer_no());

                    MstShop shop = new MstShop();
                    shop.setShopID(SystemInfo.getSetteing().isShareCustomer() ? 0 : SystemInfo.getCurrentShop().getShopID());
                    customer.setShop(shop);
                    customer.loadByCustomerNo(con);
                    customer.setSbCustomerId(results.getResults().getComing_info().get(i).getSb_customer_id());

                    customers.add(customer);
                    comingIds.add(results.getResults().getComing_info().get(i).getComing_id());
                    paymentValues.add(results.getResults().getComing_info().get(i).getPayment_price().equalsIgnoreCase("") ? "0" : results.getResults().getComing_info().get(i).getPayment_price());

                    String menuName = "";
                    if (results.getResults().getComing_info().get(i).getMenu_coupon_info().getMenu_coupon_name() != null) {
                        for (int j = 0; j < results.getResults().getComing_info().get(i).getMenu_coupon_info().getMenu_coupon_name().size(); j++) {
                            if (j < results.getResults().getComing_info().get(i).getMenu_coupon_info().getMenu_coupon_name().size() - 1) {
                                menuName += results.getResults().getComing_info().get(i).getMenu_coupon_info().getMenu_coupon_name().get(j).toString() + "ÅA";
                            } else {
                                menuName += results.getResults().getComing_info().get(i).getMenu_coupon_info().getMenu_coupon_name().get(j).toString();
                            }
                        }
                    }


                    Object[] rowData = {
                        getUserSearchButton(),
                        results.getResults().getComing_info().get(i).getSb_customer_id(),
                        results.getResults().getComing_info().get(i).getCustomer_name()
                        + "(" + results.getResults().getComing_info().get(i).getCustomer_name_kana() + ")",
                        getFomatTime(results.getResults().getComing_info().get(i).getComing_time()),
                        getStatus(Integer.parseInt(results.getResults().getComing_info().get(i).getCustomer_status())),
                        getInfo(results.getResults().getComing_info().get(i).getReserve_route_id()),
                        getType(Integer.parseInt(results.getResults().getComing_info().get(i).getReserve_type_cd())),
                        results.getResults().getComing_info().get(i).getStylist_name(),
                        results.getResults().getComing_info().get(i).getPayment_price().equalsIgnoreCase("") ? "0" : results.getResults().getComing_info().get(i).getPayment_price(),
                        menuName,
                        getReservationButton()
                    };
                    model.addRow(rowData);
                    // ThuanNK start add 20140317
                    comingInfoList.add(results.getResults().getComing_info().get(i));
                    // ThuanNK end add 20140317
                }
            }
        } catch (Exception ex) {
            SystemInfo.getLogger().log(Level.SEVERE, ex.getLocalizedMessage(), ex);
        }
    }

    private String getType(int type) {
        String result = "";
        switch (type) {
            case 1:
                result = "ÉtÉäÅ[ó\ñÒ";
                break;
            case 2:
                result = "éwñºó\ñÒ";
                break;

        }
        return result;
    }

    private String getStatus(int status) {
        String result = "";
        switch (status) {
            case 1:
                result = "óLå¯";
                break;
            case 9:
                result = "çÌèúçœÇ›";
                break;
            default:
                result = "";
                break;
        }
        return result;
    }

    private String getInfo(String info) {
        String result = "";
        if (info.equalsIgnoreCase("K000000001")) {
            result = "ìdòb(é©é–)";
        } else if (info.equalsIgnoreCase("K000000002")) {
            result = "ìdòb(Hot Pepper Beauty)";
        } else if (info.equalsIgnoreCase("K000000003")) {
            result = "Hot Pepper Beauty";
        } else if (info.equalsIgnoreCase("K000000004")) {
            result = "É|ÉìÉpÉå";
        } else if (info.equalsIgnoreCase("K000000005")) {
            result = "íºê⁄óàìX";
        } else if (info.equalsIgnoreCase("9999999999")) {
            result = "ÇªÇÃëº";
        } else {
            result = "";
        }
        return result;

    }

    private Object getFomatTime(String coming_time) {
        return coming_time.substring(0, 2) + ":" + coming_time.substring(2, 4);
    }

    /**
     * ÉÜÅ[ÉUåüçıÉ{É^ÉìÇéÊìæÇ∑ÇÈ
     */
    private JButton getUserSearchButton() {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
        button.setSize(48, 25);

        button.setEnabled(true);

        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MstCustomerPanel mcp = null;
                MstCustomer cus = new MstCustomer();
                cus = customers.get(reservationInfo.getSelectedRow());

                try {
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    mcp = new MstCustomerPanel(cus.getCustomerID(), true, true);
                    SwingUtil.openAnchorDialog((JFrame) null, true, mcp, "å⁄ãqèÓïÒìoò^", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);

                } finally {
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }

                mcp = null;
            }
        });

        return button;
    }

    private JButton getReservationButton() {
        JButton button = new JButton();
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/regist_reservation_off.jpg")));
        button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/images/" + SystemInfo.getSkinPackage() + "/button/reservation/regist_reservation_on.jpg")));
        button.setSize(48, 25);

        button.setEnabled(true);
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistReservationDialog rrd = null;
                MstCustomer cus = new MstCustomer();

                String comingId = "";
                String payment = "";
                cus = customers.get(reservationInfo.getSelectedRow());
                comingId = comingIds.get(reservationInfo.getSelectedRow());
                payment = paymentValues.get(reservationInfo.getSelectedRow());
                //test
                cus.setCustomerNo(cus.getCustomerNo());

                // ThuanNK start edit 20140317
                ComingInfo comingInfo = comingInfoList.get(reservationInfo.getSelectedRow());

                try {
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    rrd = new RegistReservationDialog(SystemInfo.getCurrentShop(), new java.util.Date(), rrd, null, cus, comingId, payment, comingInfo, true);
                    // ThuanNK end edit 20140317

                    SwingUtil.openAnchorDialog((JFrame) null, true, rrd, "ó\ñÒìoò^", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);
                } finally {
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }

                rrd = null;
            }
        });

        return button;
    }
    //End edit 20131011 lvut 
}
