/*
 * RegistContinuousDialog.java
 *
 * Created on 2015/11/27, 11:50
 */
package com.geobeck.sosia.pos.hair.reservation;

import java.awt.*;
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.basicinfo.*;
import com.geobeck.sosia.pos.basicinfo.company.DataSchedules;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.master.customer.*;
import com.geobeck.sosia.pos.search.customer.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.hair.data.reservation.*;
import com.geobeck.sosia.pos.hair.master.company.*;
import com.geobeck.sosia.pos.hair.search.product.*;
import com.geobeck.sosia.pos.hair.customer.*;
import com.geobeck.sosia.pos.hair.data.account.ConsumptionCourse;
import com.geobeck.sosia.pos.hair.data.account.Course;
import com.geobeck.sosia.pos.hair.data.product.DataProportionally;
import com.geobeck.sosia.pos.hair.master.product.MstProportionally;
import com.geobeck.sosia.pos.hair.master.product.MstTechnic;
import com.geobeck.sosia.pos.hair.master.product.MstTechnicClass;
import com.geobeck.sosia.pos.products.Product;
import java.awt.event.FocusEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;

/**
 *
 * @author lvtu
 */
public class RegistContinuousDialog extends AbstractImagePanelEx implements SearchHairProductOpener {

    private RegistReservation   rr = new RegistReservation();

    private MstBeds             beds = new MstBeds();
    /**
     * 施術台リスト
     */
    private boolean             reserved = false;
    private AbstractImagePanelEx parent;

    private final int           MINUS_X = 5;
    private final int           MINUS_Y = 278;

    // シフトマスタ
    private MstShifts           shifts = new MstShifts();
    
    MstStaffs                   staffs= null;
    
     ReservationTime[] arrReTime = new  ReservationTime[6];
     
     // only click button 空き確認 flagCheck = true
     private boolean            flagCheck = false;
     
     boolean checkBed = true;
     
     /**
     * 施術台リスト
     */
    private ArrayList<DataProportionally> proportionallys = new ArrayList<DataProportionally>();
    


    /**
     * 画面位置を設定する。
     *
     * @param point 画面位置情報
     */
    public void setPoint(Point point) {
        int posX = point.x - MINUS_X;
        int posY = point.y - MINUS_Y;

        if (this.isDialog()) {
            ((JDialog) this.getParent().getParent().getParent().getParent()).setLocation(posX, posY);
        } else {
            this.setLocation(posX, posY);
        }
    }

    /**
     * Creates new form RegistReservationDialog
     */
    public RegistContinuousDialog(MstShop shop, java.util.Date date) {
        this(shop, date, null);
    }

    public RegistContinuousDialog(MstShop shop, java.util.Date date, AbstractImagePanelEx p, GregorianCalendar clickTime) {
        this(shop, date, p);
    }

    public RegistContinuousDialog(MstShop shop, java.util.Date date, AbstractImagePanelEx p, GregorianCalendar clickTime, MstCustomer cus) {
        this(shop, date, p, clickTime);
        if (cus != null) {
            this.setCustomer(cus);
        }
    }

    public RegistContinuousDialog(MstShop shop, java.util.Date date, AbstractImagePanelEx p, GregorianCalendar clickTime, MstCustomer cus, boolean isNextReservation) {
        this(shop, date, p, clickTime);
        if (cus != null) {
            this.setCustomer(cus);
        }

        // 退店画面から開かれた場合は在店ボタンを無効にする
        if (isNextReservation) {
            this.btConfirm.setEnabled(false);
        }
    }
    

    public RegistContinuousDialog(MstShop shop, java.util.Date date, AbstractImagePanelEx p) {
        parent = p;
        initComponents();
        this.shop.addItem(shop);
        this.setPath("空き確認");

        this.initReservationsColumn();
        this.setSize(630, 650);
        this.init();
        addListenerAll();

        //IVS_LVTu start edit 2016/02/24 New request #48455
        //if (SystemInfo.isReservationOnly()) {
        if (SystemInfo.getSystemType().equals(1)) {
            btConfirm.setEnabled(false);
        }
        //IVS_LVTu end edit 2016/02/24 New request #48455

    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        charge = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        shopLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        customerNo = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)customerNo.getDocument()).setDocumentFilter(
            new CustomFilter(15, CustomFilter.ALPHAMERIC));
        jLabel3 = new javax.swing.JLabel();
        customerName1 = new com.geobeck.swing.JFormattedTextFieldEx();
        customerName2 = new com.geobeck.swing.JFormattedTextFieldEx();
        searchCustomerButton = new javax.swing.JButton();
        customerInfoButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        reservationTechnicsScrollPane = new javax.swing.JScrollPane();
        reservations = new com.geobeck.swing.JTableEx();
        registPanel = new javax.swing.JPanel();
        searchTechnicButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        reserveButton = new javax.swing.JButton();
        btConfirm = new javax.swing.JButton();
        pnlLim = new javax.swing.JPanel();
        lbReservationDate1 = new javax.swing.JLabel();
        cmbReservationDateRow1 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lbReservationDate = new javax.swing.JLabel();
        lbReservationDate2 = new javax.swing.JLabel();
        cmbReservationDateRow2 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lbReservationDate4 = new javax.swing.JLabel();
        cmbReservationDateRow4 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lbReservationDate3 = new javax.swing.JLabel();
        cmbReservationDateRow3 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lbReservationDate6 = new javax.swing.JLabel();
        cmbReservationDateRow6 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lbReservationDate5 = new javax.swing.JLabel();
        cmbReservationDateRow5 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lbReservationTime = new javax.swing.JLabel();
        chargeStaffLabel = new javax.swing.JLabel();
        cmbChargeStaff1 = new javax.swing.JComboBox();
        cmbChargeStaff2 = new javax.swing.JComboBox();
        cmbChargeStaff4 = new javax.swing.JComboBox();
        cmbChargeStaff3 = new javax.swing.JComboBox();
        cmbChargeStaff6 = new javax.swing.JComboBox();
        cmbChargeStaff5 = new javax.swing.JComboBox();
        cmbBed2 = new javax.swing.JComboBox();
        cmbBed4 = new javax.swing.JComboBox();
        cmbBed3 = new javax.swing.JComboBox();
        cmbBed6 = new javax.swing.JComboBox();
        cmbBed5 = new javax.swing.JComboBox();
        lbBed = new javax.swing.JLabel();
        cmbBed1 = new javax.swing.JComboBox();
        btDeleteRow1 = new javax.swing.JButton();
        btDeleteRow2 = new javax.swing.JButton();
        btDeleteRow3 = new javax.swing.JButton();
        btDeleteRow4 = new javax.swing.JButton();
        btDeleteRow5 = new javax.swing.JButton();
        btDeleteRow6 = new javax.swing.JButton();
        lbCheckDate = new javax.swing.JLabel();
        lbCheckNum = new javax.swing.JLabel();
        lbCheckNum1 = new javax.swing.JLabel();
        lbCheckDate1 = new javax.swing.JLabel();
        lbCheckDate2 = new javax.swing.JLabel();
        lbCheckNum2 = new javax.swing.JLabel();
        lbCheckNum3 = new javax.swing.JLabel();
        lbCheckDate3 = new javax.swing.JLabel();
        lbCheckDate4 = new javax.swing.JLabel();
        lbCheckNum4 = new javax.swing.JLabel();
        lbCheckNum5 = new javax.swing.JLabel();
        lbCheckDate5 = new javax.swing.JLabel();
        lbCheckDate6 = new javax.swing.JLabel();
        lbCheckNum6 = new javax.swing.JLabel();
        cmbReservationTime1 = new javax.swing.JComboBox();
        cmbReservationTime2 = new javax.swing.JComboBox();
        cmbReservationTime4 = new javax.swing.JComboBox();
        cmbReservationTime3 = new javax.swing.JComboBox();
        cmbReservationTime6 = new javax.swing.JComboBox();
        cmbReservationTime5 = new javax.swing.JComboBox();

        setFocusCycleRoot(true);
        setFocusTraversalPolicyProvider(true);
        setOpaque(false);

        jPanel1.setOpaque(false);

        shopLabel.setText("店舗");

        jLabel2.setText("顧客No.");

        customerNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerNo.setColumns(15);
        customerNo.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        customerNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerNoFocusLost(evt);
            }
        });

        jLabel3.setText("顧客名");

        customerName1.setEditable(false);
        customerName1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerName1.setFocusable(false);
        customerName1.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        customerName1.setInputKanji(true);

        customerName2.setEditable(false);
        customerName2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        customerName2.setFocusable(false);
        customerName2.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        customerName2.setInputKanji(true);

        searchCustomerButton.setIcon(SystemInfo.getImageIcon("/button/search/search_customer_off.jpg"));
        searchCustomerButton.setBorderPainted(false);
        searchCustomerButton.setContentAreaFilled(false);
        searchCustomerButton.setPressedIcon(SystemInfo.getImageIcon("/button/search/search_customer_on.jpg"));
        searchCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomerButtonActionPerformed(evt);
            }
        });

        customerInfoButton.setIcon(SystemInfo.getImageIcon("/button/common/customer_off.jpg"));
        customerInfoButton.setBorderPainted(false);
        customerInfoButton.setContentAreaFilled(false);
        customerInfoButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/customer_on.jpg"));
        customerInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerInfoButtonActionPerformed(evt);
            }
        });

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        reservationTechnicsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));

        reservations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "分類", "技術／コース名", "施術時間", "残数", "契約日", "有効期限", "削除"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reservations.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        reservations.setColumnSelectionAllowed(false);
        reservations.setRowSelectionAllowed(false);
        reservations.setSelectionBackground(new java.awt.Color(220, 220, 220));
        reservations.setSelectionForeground(new java.awt.Color(0, 0, 0));
        reservations.getTableHeader().setReorderingAllowed(false);
        reservations.getTableHeader().setResizingAllowed(false);
        //this.initReservationsColumn();
        reservations.setDefaultRenderer(String.class, new RegistReservationTableCellRenderer());
        SwingUtil.setJTableHeaderRenderer(reservations, SystemInfo.getTableHeaderRenderer());
        reservations.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        //SelectTableCellRenderer.setSelectTableCellRenderer(reservations);
        TableColumnModel model = reservations.getColumnModel();
        model.getColumn(2).setCellEditor(new IntegerCellEditor(new JTextField()));
        reservations.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                reservationsFocusGained(evt);
            }
        });
        reservations.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                reservationsPropertyChange(evt);
            }
        });
        reservationTechnicsScrollPane.setViewportView(reservations);

        registPanel.setOpaque(false);

        searchTechnicButton.setIcon(SystemInfo.getImageIcon("/button/master/regist_reserve_menu_off.jpg"));
        searchTechnicButton.setBorderPainted(false);
        searchTechnicButton.setContentAreaFilled(false);
        searchTechnicButton.setPressedIcon(SystemInfo.getImageIcon("/button/master/regist_reserve_menu_on.jpg"));
        searchTechnicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTechnicButtonActionPerformed(evt);
            }
        });

        clearButton.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg"));
        clearButton.setBorderPainted(false);
        clearButton.setContentAreaFilled(false);
        clearButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg"));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout registPanelLayout = new javax.swing.GroupLayout(registPanel);
        registPanel.setLayout(registPanelLayout);
        registPanelLayout.setHorizontalGroup(
            registPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registPanelLayout.createSequentialGroup()
                .addComponent(searchTechnicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        registPanelLayout.setVerticalGroup(
            registPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clearButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(searchTechnicButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reservationTechnicsScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(shopLabel))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 327, Short.MAX_VALUE)
                                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(customerName1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(customerName2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(customerInfoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(customerNo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 313, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(registPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(shopLabel)
                        .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchCustomerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(customerName1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(customerName2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(customerInfoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(registPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reservationTechnicsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        reserveButton.setIcon(SystemInfo.getImageIcon("/button/reservation/regist_reservation_off.jpg"));
        reserveButton.setBorderPainted(false);
        reserveButton.setEnabled(false);
        reserveButton.setPressedIcon(SystemInfo.getImageIcon("/button/reservation/regist_reservation_on.jpg"));
        reserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveButtonActionPerformed(evt);
            }
        });

        btConfirm.setIcon(SystemInfo.getImageIcon("/button/common/check_free_off.jpg"));
        btConfirm.setBorderPainted(false);
        btConfirm.setPressedIcon(SystemInfo.getImageIcon("/button/common/check_free_on.jpg"));
        btConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmActionPerformed(evt);
            }
        });

        pnlLim.setOpaque(false);

        lbReservationDate1.setText("予約日１");

        cmbReservationDateRow1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbReservationDateRow1.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationDateRow1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbReservationDateRow1ItemStateChanged(evt);
            }
        });

        lbReservationDate.setText("予約日付");

        lbReservationDate2.setText("予約日2");

        cmbReservationDateRow2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbReservationDateRow2.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationDateRow2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbReservationDateRow2ItemStateChanged(evt);
            }
        });

        lbReservationDate4.setText("予約日4");

        cmbReservationDateRow4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbReservationDateRow4.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationDateRow4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbReservationDateRow4ItemStateChanged(evt);
            }
        });

        lbReservationDate3.setText("予約日3");

        cmbReservationDateRow3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbReservationDateRow3.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationDateRow3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbReservationDateRow3ItemStateChanged(evt);
            }
        });

        lbReservationDate6.setText("予約日6");

        cmbReservationDateRow6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbReservationDateRow6.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationDateRow6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbReservationDateRow6ItemStateChanged(evt);
            }
        });

        lbReservationDate5.setText("予約日5");

        cmbReservationDateRow5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbReservationDateRow5.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationDateRow5.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbReservationDateRow5ItemStateChanged(evt);
            }
        });

        lbReservationTime.setText("予約時間");

        chargeStaffLabel.setText("施術担当");

        cmbChargeStaff1.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbChargeStaff1.setMaximumRowCount(20);
        cmbChargeStaff1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbChargeStaff2.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbChargeStaff2.setMaximumRowCount(20);
        cmbChargeStaff2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbChargeStaff4.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbChargeStaff4.setMaximumRowCount(20);
        cmbChargeStaff4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbChargeStaff3.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbChargeStaff3.setMaximumRowCount(20);
        cmbChargeStaff3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbChargeStaff6.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbChargeStaff6.setMaximumRowCount(20);
        cmbChargeStaff6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbChargeStaff5.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbChargeStaff5.setMaximumRowCount(20);
        cmbChargeStaff5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbBed2.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbBed2.setMaximumRowCount(20);
        cmbBed2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbBed4.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbBed4.setMaximumRowCount(20);
        cmbBed4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbBed3.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbBed3.setMaximumRowCount(20);
        cmbBed3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbBed6.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbBed6.setMaximumRowCount(20);
        cmbBed6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbBed5.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbBed5.setMaximumRowCount(20);
        cmbBed5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lbBed.setText("施術台");

        cmbBed1.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbBed1.setMaximumRowCount(20);
        cmbBed1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        btDeleteRow1.setIcon(SystemInfo.getImageIcon("/button/common/trash_small_off.jpg"));
        btDeleteRow1.setBorderPainted(false);
        btDeleteRow1.setContentAreaFilled(false);
        btDeleteRow1.setPressedIcon(SystemInfo.getImageIcon("/button/common/trash_small_on.jpg"));
        btDeleteRow1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteRow1ActionPerformed(evt);
            }
        });

        btDeleteRow2.setIcon(SystemInfo.getImageIcon("/button/common/trash_small_off.jpg"));
        btDeleteRow2.setBorderPainted(false);
        btDeleteRow2.setContentAreaFilled(false);
        btDeleteRow2.setPressedIcon(SystemInfo.getImageIcon("/button/common/trash_small_on.jpg"));
        btDeleteRow2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteRow2ActionPerformed(evt);
            }
        });

        btDeleteRow3.setIcon(SystemInfo.getImageIcon("/button/common/trash_small_off.jpg"));
        btDeleteRow3.setBorderPainted(false);
        btDeleteRow3.setContentAreaFilled(false);
        btDeleteRow3.setPressedIcon(SystemInfo.getImageIcon("/button/common/trash_small_on.jpg"));
        btDeleteRow3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteRow3ActionPerformed(evt);
            }
        });

        btDeleteRow4.setIcon(SystemInfo.getImageIcon("/button/common/trash_small_off.jpg"));
        btDeleteRow4.setBorderPainted(false);
        btDeleteRow4.setContentAreaFilled(false);
        btDeleteRow4.setPressedIcon(SystemInfo.getImageIcon("/button/common/trash_small_on.jpg"));
        btDeleteRow4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteRow4ActionPerformed(evt);
            }
        });

        btDeleteRow5.setIcon(SystemInfo.getImageIcon("/button/common/trash_small_off.jpg"));
        btDeleteRow5.setBorderPainted(false);
        btDeleteRow5.setContentAreaFilled(false);
        btDeleteRow5.setPressedIcon(SystemInfo.getImageIcon("/button/common/trash_small_on.jpg"));
        btDeleteRow5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteRow5ActionPerformed(evt);
            }
        });

        btDeleteRow6.setIcon(SystemInfo.getImageIcon("/button/common/trash_small_off.jpg"));
        btDeleteRow6.setBorderPainted(false);
        btDeleteRow6.setContentAreaFilled(false);
        btDeleteRow6.setPressedIcon(SystemInfo.getImageIcon("/button/common/trash_small_on.jpg"));
        btDeleteRow6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteRow6ActionPerformed(evt);
            }
        });

        lbCheckDate.setText("日付");

        lbCheckNum.setText("残数");

        cmbReservationTime1.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationTime1.setMaximumRowCount(20);
        cmbReservationTime1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbReservationTime2.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationTime2.setMaximumRowCount(20);
        cmbReservationTime2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbReservationTime4.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationTime4.setMaximumRowCount(20);
        cmbReservationTime4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbReservationTime3.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationTime3.setMaximumRowCount(20);
        cmbReservationTime3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbReservationTime6.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationTime6.setMaximumRowCount(20);
        cmbReservationTime6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        cmbReservationTime5.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        cmbReservationTime5.setMaximumRowCount(20);
        cmbReservationTime5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout pnlLimLayout = new javax.swing.GroupLayout(pnlLim);
        pnlLim.setLayout(pnlLimLayout);
        pnlLimLayout.setHorizontalGroup(
            pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLimLayout.createSequentialGroup()
                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnlLimLayout.createSequentialGroup()
                            .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlLimLayout.createSequentialGroup()
                                    .addComponent(lbReservationDate4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(17, 17, 17)
                                    .addComponent(cmbReservationDateRow4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlLimLayout.createSequentialGroup()
                                    .addComponent(lbReservationDate5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(17, 17, 17)
                                    .addComponent(cmbReservationDateRow5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(18, 18, 18)
                            .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbReservationTime4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbReservationTime5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbChargeStaff4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbChargeStaff5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlLimLayout.createSequentialGroup()
                                    .addComponent(cmbBed4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btDeleteRow4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lbCheckDate4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbCheckNum4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlLimLayout.createSequentialGroup()
                                    .addComponent(cmbBed5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btDeleteRow5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lbCheckDate5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbCheckNum5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlLimLayout.createSequentialGroup()
                                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlLimLayout.createSequentialGroup()
                                        .addGap(76, 76, 76)
                                        .addComponent(lbReservationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(50, 50, 50)
                                        .addComponent(lbReservationTime, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(62, 62, 62)
                                        .addComponent(chargeStaffLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlLimLayout.createSequentialGroup()
                                        .addComponent(lbReservationDate1)
                                        .addGap(17, 17, 17)
                                        .addComponent(cmbReservationDateRow1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbReservationTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbChargeStaff1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlLimLayout.createSequentialGroup()
                                        .addComponent(cmbBed1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btDeleteRow1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlLimLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(lbBed, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnlLimLayout.createSequentialGroup()
                                        .addComponent(lbCheckDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbCheckNum, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlLimLayout.createSequentialGroup()
                                        .addComponent(lbCheckDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbCheckNum1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(pnlLimLayout.createSequentialGroup()
                                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlLimLayout.createSequentialGroup()
                                        .addComponent(lbReservationDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(17, 17, 17)
                                        .addComponent(cmbReservationDateRow2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlLimLayout.createSequentialGroup()
                                        .addComponent(lbReservationDate3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(17, 17, 17)
                                        .addComponent(cmbReservationDateRow3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbReservationTime2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbReservationTime3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbChargeStaff2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbChargeStaff3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlLimLayout.createSequentialGroup()
                                        .addComponent(cmbBed2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btDeleteRow2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lbCheckDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbCheckNum2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlLimLayout.createSequentialGroup()
                                        .addComponent(cmbBed3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btDeleteRow3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lbCheckDate3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbCheckNum3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(pnlLimLayout.createSequentialGroup()
                        .addComponent(lbReservationDate6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(cmbReservationDateRow6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbReservationTime6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbChargeStaff6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbBed6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btDeleteRow6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbCheckDate6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbCheckNum6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlLimLayout.setVerticalGroup(
            pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLimLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlLimLayout.createSequentialGroup()
                        .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbBed, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbCheckDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbCheckNum, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbBed1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btDeleteRow1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbCheckDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbCheckNum1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlLimLayout.createSequentialGroup()
                        .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbReservationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbReservationTime, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chargeStaffLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbReservationDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbReservationDateRow1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbChargeStaff1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbReservationTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btDeleteRow2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cmbBed2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCheckDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbCheckNum2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lbReservationDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbReservationDateRow2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbChargeStaff2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbReservationTime2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbReservationDate3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbReservationDateRow3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbReservationTime3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cmbBed3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btDeleteRow3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCheckDate3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbCheckNum3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(cmbChargeStaff3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmbBed4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btDeleteRow4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCheckDate4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbCheckNum4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(cmbChargeStaff4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lbReservationDate4, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbReservationDateRow4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbReservationTime4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbCheckDate5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbCheckNum5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cmbBed5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btDeleteRow5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbReservationDate5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbReservationDateRow5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(cmbChargeStaff5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbReservationTime5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbBed6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btDeleteRow6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCheckDate6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbCheckNum6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlLimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lbReservationDate6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbReservationDateRow6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cmbChargeStaff6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbReservationTime6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(reserveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addComponent(pnlLim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlLim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reserveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reservationsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_reservationsPropertyChange

    }//GEN-LAST:event_reservationsPropertyChange

	private void btConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmActionPerformed
            ArrayList<ReservationTime> arrReservationTime = new  ArrayList<ReservationTime>();
            int num = 0;
            boolean flag = true;
            clearStatus();
            btConfirm.setCursor(null);
            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                //check input empty
                if(!checkInput()
                ||!checkInputEmpty(cmbReservationDateRow1, cmbReservationTime1, cmbChargeStaff1, cmbBed1)
                ||!checkInputEmpty(cmbReservationDateRow2, cmbReservationTime2, cmbChargeStaff2, cmbBed2)
                ||!checkInputEmpty(cmbReservationDateRow3, cmbReservationTime3, cmbChargeStaff3, cmbBed3)
                ||!checkInputEmpty(cmbReservationDateRow4, cmbReservationTime4, cmbChargeStaff4, cmbBed4)
                ||!checkInputEmpty(cmbReservationDateRow5, cmbReservationTime5, cmbChargeStaff5, cmbBed5)
                ||!checkInputEmpty(cmbReservationDateRow6, cmbReservationTime6, cmbChargeStaff6, cmbBed6)
                ||!checkInputEmptyBed(cmbReservationDateRow1, cmbReservationTime1, cmbChargeStaff1, cmbBed1)
                ||!checkInputEmptyBed(cmbReservationDateRow2, cmbReservationTime2, cmbChargeStaff2, cmbBed2)
                ||!checkInputEmptyBed(cmbReservationDateRow3, cmbReservationTime3, cmbChargeStaff3, cmbBed3)
                ||!checkInputEmptyBed(cmbReservationDateRow4, cmbReservationTime4, cmbChargeStaff4, cmbBed4)
                ||!checkInputEmptyBed(cmbReservationDateRow5, cmbReservationTime5, cmbChargeStaff5, cmbBed5)
                ||!checkInputEmptyBed(cmbReservationDateRow6, cmbReservationTime6, cmbChargeStaff6, cmbBed6)) {
                    return;
                }
                //予約日１
                if (cmbReservationDateRow1.getDate() != null ) {
                    //check 日付
                    if (checkInputRowDate(cmbReservationDateRow1, cmbReservationTime1, cmbChargeStaff1, arrReservationTime)) {
                        lbCheckDate1.setForeground(Color.black);
                        lbCheckDate1.setText("OK");
                    }else {
                        lbCheckDate1.setForeground(Color.red);
                        lbCheckDate1.setText("NG");
                    }
                    // check 残数
                    num ++;
                    if (!checkInputRowNumRemain(cmbReservationDateRow1, cmbReservationTime1, cmbChargeStaff1, cmbBed1, num)){
                        lbCheckNum1.setForeground(Color.red);
                        lbCheckNum1.setText("NG");
                        flag = false;
                    }else {
                        lbCheckNum1.setForeground(Color.black);
                        lbCheckNum1.setText("OK");
                    }
                }

                //予約日２
                if (cmbReservationDateRow2.getDate() != null ) {
                    //check 日付
                    if (checkInputRowDate(cmbReservationDateRow2, cmbReservationTime2, cmbChargeStaff2, arrReservationTime)) {
                        lbCheckDate2.setForeground(Color.black);
                        lbCheckDate2.setText("OK");
                    }else {
                        lbCheckDate2.setForeground(Color.red);
                        lbCheckDate2.setText("NG");
                    }
                    // check 残数
                    num ++;
                    if (!checkInputRowNumRemain(cmbReservationDateRow2, cmbReservationTime2, cmbChargeStaff2, cmbBed2, num)){
                        lbCheckNum2.setForeground(Color.red);
                        lbCheckNum2.setText("NG");
                        flag = false;
                    }else {
                        lbCheckNum2.setForeground(Color.black);
                        lbCheckNum2.setText("OK");
                    }
                }

                //予約日３
                if (cmbReservationDateRow3.getDate() != null ) {
                    //check 日付
                    if (checkInputRowDate(cmbReservationDateRow3, cmbReservationTime3, cmbChargeStaff3, arrReservationTime)) {
                        lbCheckDate3.setForeground(Color.black);
                        lbCheckDate3.setText("OK");
                    }else {
                        lbCheckDate3.setForeground(Color.red);
                        lbCheckDate3.setText("NG");
                    }
                    // check 残数
                    num ++;
                    if (!checkInputRowNumRemain(cmbReservationDateRow3, cmbReservationTime3, cmbChargeStaff3, cmbBed3, num)){
                        lbCheckNum3.setForeground(Color.red);
                        lbCheckNum3.setText("NG");
                        flag = true;
                    }else {
                        lbCheckNum3.setForeground(Color.black);
                        lbCheckNum3.setText("OK");
                    }
                }

                //予約日４
                if (cmbReservationDateRow4.getDate() != null ) {
                    //check 日付
                    if (checkInputRowDate(cmbReservationDateRow4, cmbReservationTime4, cmbChargeStaff4, arrReservationTime)) {
                        lbCheckDate4.setForeground(Color.black);
                        lbCheckDate4.setText("OK");
                    }else {
                        lbCheckDate4.setForeground(Color.red);
                        lbCheckDate4.setText("NG");
                    }
                    // check 残数
                    num ++;
                    if (!checkInputRowNumRemain(cmbReservationDateRow4, cmbReservationTime4, cmbChargeStaff4, cmbBed4, num)){
                        lbCheckNum4.setForeground(Color.red);
                        lbCheckNum4.setText("NG");
                        flag = false;
                    }else {
                        lbCheckNum4.setForeground(Color.black);
                        lbCheckNum4.setText("OK");
                    }
                }

                //予約日５
                if (cmbReservationDateRow5.getDate() != null ) {
                    //check 日付
                    if (checkInputRowDate(cmbReservationDateRow5, cmbReservationTime5, cmbChargeStaff5, arrReservationTime)) {
                        lbCheckDate5.setForeground(Color.black);
                        lbCheckDate5.setText("OK");
                    }else {
                        lbCheckDate5.setForeground(Color.red);
                        lbCheckDate5.setText("NG");
                    }
                    // check 残数
                    num ++;
                    if (!checkInputRowNumRemain(cmbReservationDateRow5, cmbReservationTime5, cmbChargeStaff5, cmbBed5, num)){
                        lbCheckNum5.setForeground(Color.red);
                        lbCheckNum5.setText("NG");
                        flag = false;
                    }else {
                        lbCheckNum5.setForeground(Color.black);
                        lbCheckNum5.setText("OK");
                    }
                }

                //予約日６
                if (cmbReservationDateRow6.getDate() != null ) {
                    //check 日付
                    if (checkInputRowDate(cmbReservationDateRow6, cmbReservationTime6, cmbChargeStaff6, arrReservationTime)) {
                        lbCheckDate6.setForeground(Color.black);
                        lbCheckDate6.setText("OK");
                    }else {
                        lbCheckDate6.setForeground(Color.red);
                        lbCheckDate6.setText("NG");
                    }
                    // check 残数
                    num ++;
                    if (!checkInputRowNumRemain(cmbReservationDateRow6, cmbReservationTime6, cmbChargeStaff6, cmbBed6, num)){
                        lbCheckNum6.setForeground(Color.red);
                        lbCheckNum6.setText("NG");
                        flag = false;
                    }else {
                        lbCheckNum6.setForeground(Color.black);
                        lbCheckNum6.setText("OK");
                    }
                }
                if ( num > 0) {
                    reserveButton.setEnabled(flag);
                    setArrReTime();
                    flagCheck = flag;
                }
            }catch(Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                checkBed = true;
            }
            
	}//GEN-LAST:event_btConfirmActionPerformed

	private void reserveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveButtonActionPerformed
            btConfirm.setCursor(null);
            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                this.registData();
            }catch(Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
	}//GEN-LAST:event_reserveButtonActionPerformed
    

    private void reservationsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_reservationsFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_reservationsFocusGained

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.closeReservationPanel();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void customerInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerInfoButtonActionPerformed

        MstCustomer customer = rr.getCustomer();
        if (customer.getCustomerID() != null) {

            MstCustomerPanel mcp = null;

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                mcp = new MstCustomerPanel(customer.getCustomerID(), false, false, true);
                SwingUtil.openAnchorDialog(this.parentFrame, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }

            rr.setCustomer(mcp.getCustomer());

            customerName1.setText(mcp.getCustomer().getCustomerName(0));
            customerName2.setText(mcp.getCustomer().getCustomerName(1));
        }
    }//GEN-LAST:event_customerInfoButtonActionPerformed

    private void searchCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerButtonActionPerformed
        SystemInfo.getLogger().log(Level.INFO, "顧客検索");
        SearchCustomerDialog sc = new SearchCustomerDialog(parentFrame, true);
        sc.setShopID((SystemInfo.getSetteing().isShareCustomer() ? 0 : ((MstShop) shop.getSelectedItem()).getShopID()));
        sc.setVisible(true);

        if (sc.getSelectedCustomer() != null
            && !sc.getSelectedCustomer().getCustomerID().equals("")) {
            customerNo.setText(sc.getSelectedCustomer().getCustomerNo());
            this.setCustomer(sc.getSelectedCustomer().getCustomerID());
            customerInfoButton.setEnabled(true);
            clearReservation(true);
        }

        sc.dispose();
        sc = null;

    }//GEN-LAST:event_searchCustomerButtonActionPerformed

    private void btDeleteRow1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteRow1ActionPerformed
        clearRowReservation(cmbReservationDateRow1, cmbReservationTime1, cmbChargeStaff1, cmbBed1, lbCheckDate1, lbCheckNum1);
    }//GEN-LAST:event_btDeleteRow1ActionPerformed

    private void btDeleteRow2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteRow2ActionPerformed
        clearRowReservation(cmbReservationDateRow2, cmbReservationTime2, cmbChargeStaff2, cmbBed2, lbCheckDate2, lbCheckNum2);
    }//GEN-LAST:event_btDeleteRow2ActionPerformed

    private void btDeleteRow3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteRow3ActionPerformed
        clearRowReservation(cmbReservationDateRow3, cmbReservationTime3, cmbChargeStaff3, cmbBed3, lbCheckDate3, lbCheckNum3);
    }//GEN-LAST:event_btDeleteRow3ActionPerformed

    private void btDeleteRow4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteRow4ActionPerformed
       clearRowReservation(cmbReservationDateRow4, cmbReservationTime4, cmbChargeStaff4, cmbBed4, lbCheckDate4, lbCheckNum4);
    }//GEN-LAST:event_btDeleteRow4ActionPerformed

    private void btDeleteRow5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteRow5ActionPerformed
        clearRowReservation(cmbReservationDateRow5, cmbReservationTime5, cmbChargeStaff5, cmbBed5, lbCheckDate5, lbCheckNum5);
    }//GEN-LAST:event_btDeleteRow5ActionPerformed

    private void btDeleteRow6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteRow6ActionPerformed
        clearRowReservation(cmbReservationDateRow6, cmbReservationTime6, cmbChargeStaff6, cmbBed6, lbCheckDate6, lbCheckNum6);
    }//GEN-LAST:event_btDeleteRow6ActionPerformed

    private void searchTechnicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTechnicButtonActionPerformed

        SearchHairProductDialog spd = new SearchHairProductDialog(parentFrame, true, this, (MstShop) shop.getSelectedItem(), rr.getCustomer(), 1);
        spd.setLocation(this.getLocationOnScreen().x - MINUS_X , this.getLocationOnScreen().y + MINUS_Y);
        spd.setVisible(true);
        spd.dispose();
        spd = null;
    }//GEN-LAST:event_searchTechnicButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearReservation();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void cmbReservationDateRow1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbReservationDateRow1ItemStateChanged
        reserveButton.setEnabled(false);
    }//GEN-LAST:event_cmbReservationDateRow1ItemStateChanged

    private void cmbReservationDateRow2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbReservationDateRow2ItemStateChanged
         reserveButton.setEnabled(false);
    }//GEN-LAST:event_cmbReservationDateRow2ItemStateChanged

    private void cmbReservationDateRow3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbReservationDateRow3ItemStateChanged
        reserveButton.setEnabled(false);
    }//GEN-LAST:event_cmbReservationDateRow3ItemStateChanged

    private void cmbReservationDateRow4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbReservationDateRow4ItemStateChanged
        reserveButton.setEnabled(false);
    }//GEN-LAST:event_cmbReservationDateRow4ItemStateChanged

    private void cmbReservationDateRow5ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbReservationDateRow5ItemStateChanged
        reserveButton.setEnabled(false);
    }//GEN-LAST:event_cmbReservationDateRow5ItemStateChanged

    private void cmbReservationDateRow6ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbReservationDateRow6ItemStateChanged
        reserveButton.setEnabled(false);
    }//GEN-LAST:event_cmbReservationDateRow6ItemStateChanged

    private void customerNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerNoFocusLost
        // TODO add your handling code here:
        if(!customerNo.getText().trim().equals(rr.getReservation().getCustomer().getCustomerNo())) {
            setCustomer();
            clearReservation(true);
        }
    }//GEN-LAST:event_customerNoFocusLost

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConfirm;
    private javax.swing.JButton btDeleteRow1;
    private javax.swing.JButton btDeleteRow2;
    private javax.swing.JButton btDeleteRow3;
    private javax.swing.JButton btDeleteRow4;
    private javax.swing.JButton btDeleteRow5;
    private javax.swing.JButton btDeleteRow6;
    private javax.swing.ButtonGroup charge;
    private javax.swing.JLabel chargeStaffLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JComboBox cmbBed1;
    private javax.swing.JComboBox cmbBed2;
    private javax.swing.JComboBox cmbBed3;
    private javax.swing.JComboBox cmbBed4;
    private javax.swing.JComboBox cmbBed5;
    private javax.swing.JComboBox cmbBed6;
    private javax.swing.JComboBox cmbChargeStaff1;
    private javax.swing.JComboBox cmbChargeStaff2;
    private javax.swing.JComboBox cmbChargeStaff3;
    private javax.swing.JComboBox cmbChargeStaff4;
    private javax.swing.JComboBox cmbChargeStaff5;
    private javax.swing.JComboBox cmbChargeStaff6;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbReservationDateRow1;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbReservationDateRow2;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbReservationDateRow3;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbReservationDateRow4;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbReservationDateRow5;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbReservationDateRow6;
    private javax.swing.JComboBox cmbReservationTime1;
    private javax.swing.JComboBox cmbReservationTime2;
    private javax.swing.JComboBox cmbReservationTime3;
    private javax.swing.JComboBox cmbReservationTime4;
    private javax.swing.JComboBox cmbReservationTime5;
    private javax.swing.JComboBox cmbReservationTime6;
    private javax.swing.JButton customerInfoButton;
    private com.geobeck.swing.JFormattedTextFieldEx customerName1;
    private com.geobeck.swing.JFormattedTextFieldEx customerName2;
    private com.geobeck.swing.JFormattedTextFieldEx customerNo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbBed;
    private javax.swing.JLabel lbCheckDate;
    private javax.swing.JLabel lbCheckDate1;
    private javax.swing.JLabel lbCheckDate2;
    private javax.swing.JLabel lbCheckDate3;
    private javax.swing.JLabel lbCheckDate4;
    private javax.swing.JLabel lbCheckDate5;
    private javax.swing.JLabel lbCheckDate6;
    private javax.swing.JLabel lbCheckNum;
    private javax.swing.JLabel lbCheckNum1;
    private javax.swing.JLabel lbCheckNum2;
    private javax.swing.JLabel lbCheckNum3;
    private javax.swing.JLabel lbCheckNum4;
    private javax.swing.JLabel lbCheckNum5;
    private javax.swing.JLabel lbCheckNum6;
    private javax.swing.JLabel lbReservationDate;
    private javax.swing.JLabel lbReservationDate1;
    private javax.swing.JLabel lbReservationDate2;
    private javax.swing.JLabel lbReservationDate3;
    private javax.swing.JLabel lbReservationDate4;
    private javax.swing.JLabel lbReservationDate5;
    private javax.swing.JLabel lbReservationDate6;
    private javax.swing.JLabel lbReservationTime;
    private javax.swing.JPanel pnlLim;
    private javax.swing.JPanel registPanel;
    private javax.swing.JScrollPane reservationTechnicsScrollPane;
    private com.geobeck.swing.JTableEx reservations;
    private javax.swing.JButton reserveButton;
    private javax.swing.JButton searchCustomerButton;
    private javax.swing.JButton searchTechnicButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    // End of variables declaration//GEN-END:variables
    /**
     * 予約登録画面用FocusTraversalPolicy
     */
    private RegistContinuousFocusTraversalPolicy ftp =
            new RegistContinuousFocusTraversalPolicy();

    /**
     * 予約登録画面用FocusTraversalPolicyを取得する。
     *
     * @return 予約登録画面用FocusTraversalPolicy
     */
    public RegistContinuousFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    public boolean isReserved() {
        return reserved;
    }

    private void setReserved(boolean reserved) {
        this.reserved = reserved;
    }

    /**
     * 明細の列を初期化する。
     */
    private void initReservationsColumn() {
        SelectTableCellRenderer cell0Render = new SelectTableCellRenderer();
        cell0Render.setHorizontalAlignment(SwingConstants.CENTER); 
        
        reservations.getColumnModel().getColumn(0).setPreferredWidth(80);	// 技術分類
        reservations.getColumnModel().getColumn(1).setPreferredWidth(110);  // 技術名
        reservations.getColumnModel().getColumn(2).setPreferredWidth(40);   // 施術時間
        reservations.getColumnModel().getColumn(3).setPreferredWidth(70);   // 開始時間
        reservations.getColumnModel().getColumn(4).setPreferredWidth(60);	// NO
        reservations.getColumnModel().getColumn(5).setPreferredWidth(80);	// 施術担当
        reservations.getColumnModel().getColumn(6).setPreferredWidth(45);
        
        reservations.getColumnModel().getColumn(4).setCellRenderer(cell0Render);
        reservations.getColumnModel().getColumn(5).setCellRenderer(cell0Render);
    }

    /**
     * 初期化処理を行う
     */
    private void init() {

        getProportionallys();
        // 施術台リストを取得する
        this.getMstBeds();

        // シフトマスタを取得する
        this.getMstShifts();

        addMouseCursorChange();
        setListener();

        rr.setShop(this.getSelectedShop());
        rr.init();
        this.setStaffs();

        customerInfoButton.setEnabled(false);


        Integer term = ((MstShop) shop.getSelectedItem()).getTerm();            // 時間単位
        Integer openHour = ((MstShop) shop.getSelectedItem()).getOpenHour();       // 開店時
        Integer openMinute = ((MstShop) shop.getSelectedItem()).getOpenMinute();     // 開店分
        Integer closeHour = ((MstShop) shop.getSelectedItem()).getCloseHour();      // 閉店時
        Integer closeMinute = ((MstShop) shop.getSelectedItem()).getCloseMinute();    // 閉店分
        
        if (openHour != null && closeHour != null && term != null) {
            //set 予約時間 null
            cmbReservationTime1.addItem((String) null);
            cmbReservationTime2.addItem((String)null);
            cmbReservationTime3.addItem((String)null);
            cmbReservationTime4.addItem((String)null);
            cmbReservationTime5.addItem((String)null);
            cmbReservationTime6.addItem((String)null);
            for (int h = openHour; h <= closeHour; h++) {
                for (int m = 0; m < 60; m += term) {
                    // 開店時間より前の場合
                    if (h == openHour && m < openMinute) {
                        continue;
                    }
                    // 閉店時間より後の場合
                    if (h == closeHour && closeMinute <= m) {
                        break;
                    }
                    // 予約時間
                    cmbReservationTime1.addItem(String.format("%1$02d", h) + ":" + String.format("%1$02d", m));
                    cmbReservationTime2.addItem(String.format("%1$02d", h) + ":" + String.format("%1$02d", m));
                    cmbReservationTime3.addItem(String.format("%1$02d", h) + ":" + String.format("%1$02d", m));
                    cmbReservationTime4.addItem(String.format("%1$02d", h) + ":" + String.format("%1$02d", m));
                    cmbReservationTime5.addItem(String.format("%1$02d", h) + ":" + String.format("%1$02d", m));
                    cmbReservationTime6.addItem(String.format("%1$02d", h) + ":" + String.format("%1$02d", m));
                }
            }
        }
         
        ((JLabel)cmbReservationTime1.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((JLabel)cmbReservationTime2.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((JLabel)cmbReservationTime3.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((JLabel)cmbReservationTime4.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((JLabel)cmbReservationTime5.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((JLabel)cmbReservationTime6.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        
        //init array
        for (int i = 0;i < 6;i ++) {
            arrReTime[i] = new ReservationTime();
        }

    }

   /**
     * 選択技術をクリアする
     */
    private void clearReservation( ) {
        if (reservations.getCellEditor() != null) {
            reservations.getCellEditor().stopCellEditing();
        }
            if( reservations.getCellEditor() != null ) reservations.getCellEditor().stopCellEditing();
        SwingUtil.clearTable(reservations);	// 技術テーブルをクリア
        rr.getReservation().initTechnics();
        rr.clear();
        clearRowReservation(cmbReservationDateRow1, cmbReservationTime1, cmbChargeStaff1, cmbBed1, lbCheckDate1, lbCheckNum1);
        clearRowReservation(cmbReservationDateRow2, cmbReservationTime2, cmbChargeStaff2, cmbBed2, lbCheckDate2, lbCheckNum2);
        clearRowReservation(cmbReservationDateRow3, cmbReservationTime3, cmbChargeStaff3, cmbBed3, lbCheckDate3, lbCheckNum3);
        clearRowReservation(cmbReservationDateRow4, cmbReservationTime4, cmbChargeStaff4, cmbBed4, lbCheckDate4, lbCheckNum4);
        clearRowReservation(cmbReservationDateRow5, cmbReservationTime5, cmbChargeStaff5, cmbBed5, lbCheckDate5, lbCheckNum5);
        clearRowReservation(cmbReservationDateRow6, cmbReservationTime6, cmbChargeStaff6, cmbBed6, lbCheckDate6, lbCheckNum6);

        this.reserveButton.setEnabled(false);
    }
    private void clearReservation(Boolean onlyDegestion ) {
        DefaultTableModel model = (DefaultTableModel) reservations.getModel();
        if (reservations.getCellEditor() != null) {
            reservations.getCellEditor().stopCellEditing();
        }
         if( reservations.getCellEditor() != null ) reservations.getCellEditor().stopCellEditing();
        if(onlyDegestion) {
            for(int i = 0;i<rr.getReservation().size();i++) {
                
                if((rr.getReservation().get(i).getCourseFlg()!=null && rr.getReservation().get(i).getCourseFlg()==2)) {
                    rr.getReservation().remove(i);
                    model.removeRow(i);
                }
            }
        }else {
            SwingUtil.clearTable(reservations);	// 技術テーブルをクリア
            rr.getReservation().initTechnics();
            rr.clear();
        }
        clearRowReservation(cmbReservationDateRow1, cmbReservationTime1, cmbChargeStaff1, cmbBed1, lbCheckDate1, lbCheckNum1);
        clearRowReservation(cmbReservationDateRow2, cmbReservationTime2, cmbChargeStaff2, cmbBed2, lbCheckDate2, lbCheckNum2);
        clearRowReservation(cmbReservationDateRow3, cmbReservationTime3, cmbChargeStaff3, cmbBed3, lbCheckDate3, lbCheckNum3);
        clearRowReservation(cmbReservationDateRow4, cmbReservationTime4, cmbChargeStaff4, cmbBed4, lbCheckDate4, lbCheckNum4);
        clearRowReservation(cmbReservationDateRow5, cmbReservationTime5, cmbChargeStaff5, cmbBed5, lbCheckDate5, lbCheckNum5);
        clearRowReservation(cmbReservationDateRow6, cmbReservationTime6, cmbChargeStaff6, cmbBed6, lbCheckDate6, lbCheckNum6);

        this.reserveButton.setEnabled(false);
    }
    private void clearStatus() {
        lbCheckDate1.setText("");
        lbCheckDate2.setText("");
        lbCheckDate3.setText("");
        lbCheckDate4.setText("");
        lbCheckDate5.setText("");
        lbCheckDate6.setText("");
        
        lbCheckNum1.setText("");
        lbCheckNum2.setText("");
        lbCheckNum3.setText("");
        lbCheckNum4.setText("");
        lbCheckNum5.setText("");
        lbCheckNum6.setText("");
        
        this.reserveButton.setEnabled(false);
    }

    private String getFormatTime(String time) {

        String s = time;

        if (s.matches("\\d+:\\d+")) {

            int h = Integer.parseInt(s.replaceAll(":.+", ""));
            int m = Integer.parseInt(s.replaceAll(".+:", ""));
            s = String.format("%1$02d", h) + ":" + String.format("%1$02d", m);

        } else {

            s = s.replace(":", "");

            if (s.length() < 5 && CheckUtil.isNumber(s)) {

                if (s.length() == 1) {
                    s = "0" + s + ":00";
                } else if (s.length() == 2) {
                    s = s + ":00";
                } else if (s.length() == 3) {
                    s = "0" + s.substring(0, 1) + ":" + s.substring(1);
                } else {
                    s = s.substring(0, 2) + ":" + s.substring(2);
                }

            } else {
                s = "";
            }
        }

        return s;
    }

    private void setStaffs() {
        MstStaffs staffs = new MstStaffs();

        staffs.setShopIDList(((MstShop) shop.getSelectedItem()).getShopID().toString());

        try {

            staffs.load(SystemInfo.getConnection(), true);

            for (MstStaff ms : staffs) {
                if (ms.isDisplay()) {
                    cmbChargeStaff1.addItem(ms);
                    cmbChargeStaff2.addItem(ms);
                    cmbChargeStaff3.addItem(ms);
                    cmbChargeStaff4.addItem(ms);
                    cmbChargeStaff5.addItem(ms);
                    cmbChargeStaff6.addItem(ms);
                }
            }

        } catch (SQLException e) {

            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

    }

    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(searchCustomerButton);

        SystemInfo.addMouseCursorChange(searchTechnicButton);
        SystemInfo.addMouseCursorChange(clearButton);
        SystemInfo.addMouseCursorChange(reserveButton);
        SystemInfo.addMouseCursorChange(btConfirm);
        SystemInfo.addMouseCursorChange(closeButton);
        SystemInfo.addMouseCursorChange(customerInfoButton);
        
        SystemInfo.addMouseCursorChange(btDeleteRow1);
        SystemInfo.addMouseCursorChange(btDeleteRow2);
        SystemInfo.addMouseCursorChange(btDeleteRow3);
        SystemInfo.addMouseCursorChange(btDeleteRow4);
        SystemInfo.addMouseCursorChange(btDeleteRow5);
        SystemInfo.addMouseCursorChange(btDeleteRow6);
    }

    /**
     * コンポーネントの各リスナーをセットする。
     */
    private void setListener() {
        customerNo.addKeyListener(SystemInfo.getMoveNextField());
        customerNo.addFocusListener(SystemInfo.getSelectText());
        customerName1.addKeyListener(SystemInfo.getMoveNextField());
        customerName1.addFocusListener(SystemInfo.getSelectText());
        customerName2.addKeyListener(SystemInfo.getMoveNextField());
        customerName2.addFocusListener(SystemInfo.getSelectText());
        cmbReservationDateRow1.addKeyListener(SystemInfo.getMoveNextField());
        cmbReservationDateRow2.addKeyListener(SystemInfo.getMoveNextField());
        cmbReservationDateRow3.addKeyListener(SystemInfo.getMoveNextField());
        cmbReservationDateRow4.addKeyListener(SystemInfo.getMoveNextField());
        cmbReservationDateRow5.addKeyListener(SystemInfo.getMoveNextField());
        cmbReservationDateRow6.addKeyListener(SystemInfo.getMoveNextField());
        
        cmbReservationTime1.addKeyListener(SystemInfo.getMoveNextField());
        cmbReservationTime2.addKeyListener(SystemInfo.getMoveNextField());
        cmbReservationTime3.addKeyListener(SystemInfo.getMoveNextField());
        cmbReservationTime4.addKeyListener(SystemInfo.getMoveNextField());
        cmbReservationTime5.addKeyListener(SystemInfo.getMoveNextField());
        cmbReservationTime6.addKeyListener(SystemInfo.getMoveNextField());
        
        cmbChargeStaff1.addKeyListener(SystemInfo.getMoveNextField());
        cmbChargeStaff2.addKeyListener(SystemInfo.getMoveNextField());
        cmbChargeStaff3.addKeyListener(SystemInfo.getMoveNextField());
        cmbChargeStaff4.addKeyListener(SystemInfo.getMoveNextField());
        cmbChargeStaff5.addKeyListener(SystemInfo.getMoveNextField());
        cmbChargeStaff6.addKeyListener(SystemInfo.getMoveNextField());
        
        cmbBed1.addKeyListener(SystemInfo.getMoveNextField());
        cmbBed2.addKeyListener(SystemInfo.getMoveNextField());
        cmbBed3.addKeyListener(SystemInfo.getMoveNextField());
        cmbBed4.addKeyListener(SystemInfo.getMoveNextField());
        cmbBed5.addKeyListener(SystemInfo.getMoveNextField());
        cmbBed6.addKeyListener(SystemInfo.getMoveNextField());
    }

    /**
     * 施術台リストを取得する
     */
    private void getMstBeds() {
        ConnectionWrapper con = SystemInfo.getConnection();
        beds.setShop((MstShop) shop.getSelectedItem());

        cmbBed1.addItem(new MstBed());
        cmbBed2.addItem(new MstBed());
        cmbBed3.addItem(new MstBed());
        cmbBed4.addItem(new MstBed());
        cmbBed5.addItem(new MstBed());
        cmbBed6.addItem(new MstBed());
        try {
            beds.load(con);
            for ( MstBed bed : beds) {
                cmbBed1.addItem(bed);
                cmbBed2.addItem(bed);
                cmbBed3.addItem(bed);
                cmbBed4.addItem(bed);
                cmbBed5.addItem(bed);
                cmbBed6.addItem(bed);
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }

  
    /**
     * シフトマスタを取得する
     */
    private void getMstShifts() {
        ConnectionWrapper con = SystemInfo.getConnection();
        MstShop ms = (MstShop) shop.getSelectedItem();
        shifts.setShopId(ms.getShopID());

        try {
            shifts.loadAll(con);
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }


    /**
     * 顧客名のEditableを変更する。
     *
     * @param isEditable
     */
    private void changeCustomerNameEditable(boolean isEditable) {
        customerName1.setEditable(isEditable);
        customerName2.setEditable(isEditable);
        customerName1.setFocusable(isEditable);
        customerName2.setFocusable(isEditable);
    }

    /**
     * 選択されている店舗を取得する。
     *
     * @return 選択されている店舗
     */
    private MstShop getSelectedShop() {

        MstShop result = null;

        if (0 <= shop.getSelectedIndex()) {
            result = (MstShop) shop.getSelectedItem();
        }

        return result;
    }

    

    public void setCustomerNo(String no) {
        this.customerNo.setText(no);
        System.out.println(this.customerNo.getText() + ":" + this.customerNo.isEditable());
        this.setCustomer();
    }

    public void setCustomer(MstCustomer cus) {
        this.changeCustomerNameEditable(false);

        customerNo.setText(cus.getCustomerNo());
        customerName1.setText(cus.getCustomerName(0));
        customerName2.setText(cus.getCustomerName(1));

        rr.setCustomer(cus);
    }


    /**
     * 顧客をセットする。
     */
    private void setCustomer() {

      

        if (!customerNo.isEditable()) {
            return;
        }

        customerInfoButton.setEnabled(false);

        MstCustomer cus = rr.getCustomer();

        cus.setCustomerNo(customerNo.getText());

        //顧客コードが0の場合、非会員
        if (cus.getCustomerNo().equals("0")) {

            cus = new MstCustomer();

            this.changeCustomerNameEditable(true);

            customerName1.requestFocusInWindow();

        } else {

            try {

                cus = SelectSameNoData.getMstCustomerByNo(
                        parentFrame,
                        SystemInfo.getConnection(),
                        this.customerNo.getText(),
                        (SystemInfo.getSetteing().isShareCustomer() ? 0 : ((MstShop) shop.getSelectedItem()).getShopID()));

                customerInfoButton.setEnabled(cus.getCustomerID() != null);

            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            this.changeCustomerNameEditable(false);

        }

        customerName1.setText(cus.getCustomerName(0));
        customerName2.setText(cus.getCustomerName(1));

        rr.setCustomer(cus);

    }

    /**
     * 顧客をセットする。
     */
    private void setCustomer(Integer customerID) {

        if (!customerNo.isEditable()) {
            return;
        }
        MstCustomer cus = rr.getCustomer();

        cus.setCustomerNo(customerNo.getText());

        //顧客コードが0の場合、非会員
        if (cus.getCustomerNo().equals("0")) {

            cus = new MstCustomer();
            this.changeCustomerNameEditable(true);
            customerName1.requestFocusInWindow();

        } else {

            try {
                cus = new MstCustomer(customerID);
                cus.load(SystemInfo.getConnection());

            } catch (SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            this.changeCustomerNameEditable(false);

        }

        customerName1.setText(cus.getCustomerName(0));
        customerName2.setText(cus.getCustomerName(1));


        rr.setCustomer(cus);


    }

    private void clearRowReservation(Component cmbDate, Component cmbTime, Component cmbStaff, Component cmbBed,Component lbCheckDate, Component lbChecknum) {
        ((jp.co.flatsoft.fscomponent.FSCalenderCombo) cmbDate).setDate((java.util.Date) null);
        ((JComboBox)cmbTime).setSelectedIndex(0);
        ((JComboBox)cmbStaff).setSelectedIndex(0);
        ((JComboBox)cmbBed).setSelectedIndex(0);
        ((JLabel)lbCheckDate).setText("");
        ((JLabel)lbChecknum).setText("");
        this.reserveButton.setEnabled(false);
    }

    public static Calendar resetCalender(Calendar calendar) {
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        return calendar;
    }

    public MstStaffs getStaffs(MstShop ms) {
         this.staffs = new MstStaffs();
        if (ms != null) {
            this.staffs.setShopIDList(ms.getShopID().toString());
        } else {
            this.staffs.setShopIDList(SystemInfo.getCurrentShop().getShopID().toString());
        }

        try {

            this.staffs.load(SystemInfo.getConnection(), true);

        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return this.staffs;
	}
    
    /**
     * 削除ボタンを取得する
     */
    private JButton getDeleteButton() {
        JButton deleteButton = new JButton();
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_off.jpg")));
        deleteButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/" + SystemInfo.getSkinPackage() + "/button/common/trash_on.jpg")));
        deleteButton.setSize(48, 25);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRow();
            }
        });

        return deleteButton;
    }

    private void deleteRow() {

        DefaultTableModel model = (DefaultTableModel) reservations.getModel();
        int row = reservations.getSelectedRow();
        if (row < 0) {
            return;
        }

        if (reservations.getCellEditor() != null) {
            reservations.getCellEditor().stopCellEditing();
        }
        rr.getReservation().remove(row);
        reservations.clearSelection();

        model.removeRow(row);

    }
    
    /**
     * 入力チェックを行う。
     *
     * @return true - ＯＫ
     */
    private boolean checkInput() {
        //

        if (rr.getReservation().getReservationNo() != null) {
            if (0 < rr.getReservation().getReservationNo() && 2 < rr.getReservation().getStatus()) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(5115),
                        this.getTitle(), JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }

        //顧客コード
        if (customerNo.getText().equals("")) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY,
                    "顧客コード"), this.getTitle(), JOptionPane.ERROR_MESSAGE);
            customerNo.requestFocusInWindow();
            return false;
        }

        //非会員
        if (customerNo.getText().equals("0") && rr.getCustomer().getCustomerID() == null) {

            rr.getCustomer().setCustomerNo("0");
            rr.getCustomer().setCustomerName(0, customerName1.getText());
            rr.getCustomer().setCustomerName(1, customerName2.getText());

        } else {

            MstCustomer mc = new MstCustomer();

            if (!customerName1.isFocusable()) {

                mc.setCustomerID(rr.getCustomer().getCustomerID());

                SystemInfo.getLogger().log(Level.INFO, "getCustomerID:" + rr.getCustomer().getCustomerID());

                try {
                    ConnectionWrapper con = SystemInfo.getConnection();

                    if (!mc.isExists(con)) {
                        MessageDialog.showMessageDialog(this,
                                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_NOT_EXIST,
                                "顧客コード" + customerNo.getText()), this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                        customerNo.requestFocusInWindow();
                        return false;
                    }
                } catch (SQLException e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                    return false;
                }
            } else {

                // 自動採番の場合
                rr.getCustomer().setCustomerNo(customerNo.getText());
                rr.getCustomer().setCustomerName(0, customerName1.getText());
                rr.getCustomer().setCustomerName(1, customerName2.getText());

            }
        }

        //予約内容
        if (rr.getReservation().size() == 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(5125),
                    this.getTitle(), JOptionPane.ERROR_MESSAGE);
            searchTechnicButton.requestFocusInWindow();
            return false;
        }

        //開始時間
        for (int i = 0; i < reservations.getRowCount(); i++) {
            if (reservations.getValueAt(i, 2).toString().length() == 0) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY,
                        "開始時間"), this.getTitle(), JOptionPane.ERROR_MESSAGE);
                reservations.requestFocusInWindow();
                return false;
            }
        }
        
        return true;
    }
    
    private boolean checkInputEmpty(Component cmbDate, Component cmbTime, Component cmbstaff, Component cmbBed) {
        if ( ((jp.co.flatsoft.fscomponent.FSCalenderCombo) cmbDate).getDate() != null
                || ((JComboBox) cmbTime).getSelectedItem() != null
                || ((MstStaff) ((JComboBox)cmbstaff).getSelectedItem()).getStaffID() != null
                ) {
            //予約日付
            if (((jp.co.flatsoft.fscomponent.FSCalenderCombo) cmbDate).getDate() == null) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY,
                        "予約日付"), this.getTitle(), JOptionPane.ERROR_MESSAGE);
                ((jp.co.flatsoft.fscomponent.FSCalenderCombo) cmbDate).requestFocusInWindow();
                return false;
            }
            
            //予約時間
            if (((JComboBox) cmbTime).getSelectedItem() == null) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY,
                        "予約時間"), this.getTitle(), JOptionPane.ERROR_MESSAGE);
                ((JComboBox) cmbTime).requestFocusInWindow();
                return false;
            }
            
            //IVS_NHTVINH start add 2016/10/05 New request #54380
            //施術担当
            if (((MstStaff) ((JComboBox)cmbstaff).getSelectedItem()).getStaffID() == null) {
                MessageDialog.showMessageDialog(this,
                            "施術担当が選択されていません。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                return false;
            }
            //IVS_NHTVINH end add 2016/10/05 New request #54380
                        
//            //消化担当
//            if (((MstStaff) ((JComboBox)cmbstaff).getSelectedItem()).getStaffID() == null && checkStaff) {
//                if(MessageDialog.showYesNoDialog(this,
//							"施術担当が選択されていませんがよろしいですか？",
//							this.getTitle(),
//							JOptionPane.QUESTION_MESSAGE) != 0)
//                {
//                    ((JComboBox)cmbstaff).requestFocusInWindow();
//                    return false;
//                }else {
//                    checkStaff = false;
//                }
//            }
            
            //施術台
//            if (((MstBed) ((JComboBox)cmbBed).getSelectedItem()).getBedID()== null && checkBed) {
//                if(MessageDialog.showYesNoDialog(this,
//							"施術台が選択されていませんが、よろしいですか？",
//							this.getTitle(),
//							JOptionPane.QUESTION_MESSAGE) != 0)
//                {
//                    ((JComboBox)cmbBed).requestFocusInWindow();
//                    return false;
//                }else {
//                    checkBed = false;
//                }
//            }
            //nhtvinh start add 20161017 New request #54380
            /**
             * check start time register and end time register outside business time 
             */
            try{
                SystemInfo.getMstUser().setShopID(((MstShop)shop.getSelectedItem()).getShopID());
                if(SystemInfo.getUserByUserApi() != null && SystemInfo.getUserByUserApi() != 0){
                    MstShop selectShop = ((MstShop)shop.getSelectedItem());
                    if(null != selectShop){
                        int shopId = selectShop.getShopID();
                        Integer startTimeShift = selectShop.getOpenHour()*100 + selectShop.getOpenMinute();
                        Integer endTimeShift = selectShop.getCloseHour()*100 + selectShop.getCloseMinute();

                        String timeStart = (String)((JComboBox)cmbTime).getSelectedItem();
                        if(null != timeStart){
                            timeStart = timeStart.replaceAll(":", "");
                            Integer timeStartRegist = Integer.parseInt(timeStart);
                            if(timeStartRegist < startTimeShift || timeStartRegist > endTimeShift){
                                MessageDialog.showMessageDialog(this,
                                "予約時間が営業時間外です",
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                                return false;
                            }
                            for (int i = 0; i < reservations.getRowCount(); i++) {
                                Integer timeReservation = (Integer)reservations.getValueAt(i, 2);
                                Integer timeEndRegist = timeStartRegist + timeReservation;
                                if((timeStartRegist%100 + timeReservation) > 60){
                                    timeEndRegist = (timeStartRegist/100 + (timeStartRegist%100 + timeReservation)/60)*100 
                                            + (timeStartRegist%100 + timeReservation)%60;
                                }
                                timeStartRegist = timeEndRegist;
                                if(timeEndRegist > endTimeShift){
                                    MessageDialog.showMessageDialog(this,
                                        "終了時間が営業時間外です",
                                        this.getTitle(),
                                        JOptionPane.ERROR_MESSAGE);
                                    return false;
                                }

                            }
                        }
                    }
                }
            }catch(Exception e){
                e.printStackTrace();
                return false;
            }
            //nhtvinh end add 20161017 New request #54380
        }
        
        return true;
    }
    //nhtvinh end add 20161017 New request #54380
    //IVS_LVTu start add 2016/10/20 New request #54379
    private boolean checkInputEmptyBed(Component cmbDate, Component cmbTime, Component cmbstaff, Component cmbBed) {
        if ( ((jp.co.flatsoft.fscomponent.FSCalenderCombo) cmbDate).getDate() != null
                || ((JComboBox) cmbTime).getSelectedItem() != null
                || ((MstStaff) ((JComboBox)cmbstaff).getSelectedItem()).getStaffID() != null
                ) {
            
            //施術台
            if (((MstBed) ((JComboBox)cmbBed).getSelectedItem()).getBedID()== null && checkBed) {
                if(MessageDialog.showYesNoDialog(this,
							"施術台が選択されていませんが、よろしいですか？",
							this.getTitle(),
							JOptionPane.QUESTION_MESSAGE) != 0)
                {
                    ((JComboBox)cmbBed).requestFocusInWindow();
                    return false;
                }else {
                    checkBed = false;
                }
            }
        }
        
        return true;
    }
    //IVS_LVTu end add 2016/10/20 New request #54379
    
    //check input row data
    private boolean checkInputRowDate(Component cmbDate, Component cmbTime, Component cmbstaff,ArrayList<ReservationTime> arrReservationTime) {
        if( reservations.getCellEditor() != null ) reservations.getCellEditor().stopCellEditing();
        Integer totalMinute = 0;
        for ( int i = 0;i < reservations.getRowCount() ;i ++) {
            totalMinute += Integer.parseInt(reservations.getValueAt(i, 2).toString());
        }
        
        try {
            java.util.Date dt = ((jp.co.flatsoft.fscomponent.FSCalenderCombo) cmbDate).getDate();
            String time = ((JComboBox) cmbTime).getSelectedItem().toString();
            int hour = Integer.parseInt(time.replaceAll(":.+", ""));
            int minute = Integer.parseInt(time.replaceAll(".+:", ""));
            
            ConnectionWrapper con = SystemInfo.getConnection();
            ResultSetWrapper rs;
            
            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select drd.reservation_datetime, drd.operation_time ");
            sql.append(" from data_reservation dr ");
            sql.append(" inner join data_reservation_detail drd on dr.shop_id = drd.shop_id and dr.reservation_no = drd.reservation_no ");
            sql.append(" where dr.delete_date is null ");
            sql.append(" and drd.delete_date is null ");
            sql.append(" and dr.shop_id = "  + SQLUtil.convertForSQL(rr.getShop().getShopID()));
            sql.append(" and dr.customer_id = " + SQLUtil.convertForSQL(rr.getCustomer().getCustomerID()));
            sql.append(" and date(drd.reservation_datetime) = " + SQLUtil.convertForSQLDateOnly(dt));
            //sql.append(" and dr.status < 3 ");
            
            rs = con.executeQuery(sql.toString());
            ArrayList<ReservationTime> arrTime = new ArrayList<ReservationTime>();
            ReservationTime dataTime = null;
//            while (rs.next()) {
//                dataTime = new ReservationTime();
//                dataTime.setReservationDatetime(rs.getGregorianCalendar("reservation_datetime"));
//                dataTime.setOperationTime(rs.getInt("operation_time"));
//                arrTime.add(dataTime);
//            }
            if(rs.next()) {
                return false;
            }
            rs.close();
            
            // check time customer
            GregorianCalendar selectedDate = new GregorianCalendar();
            selectedDate.setTime(dt);
            selectedDate.set(selectedDate.HOUR_OF_DAY, hour);
            selectedDate.set(selectedDate.MINUTE, minute);
            long temp = selectedDate.getTimeInMillis();
            selectedDate.setTime(new java.util.Date(temp));
            
//            for ( int i = 0;i < arrTime.size(); i ++) {
//                if ( selectedDate.getTimeInMillis() >= arrTime.get(i).getReservationDatetime().getTimeInMillis()
//                     && selectedDate.getTimeInMillis() < (arrTime.get(i).getReservationDatetime().getTimeInMillis() + arrTime.get(i).operationTime * 60 * 1000)) {
//                    return false;
//                } else if (selectedDate.getTimeInMillis() < arrTime.get(i).getReservationDatetime().getTimeInMillis()
//                     && arrTime.get(i).getReservationDatetime().getTimeInMillis() < (selectedDate.getTimeInMillis() + totalMinute * 60 * 1000)) {
//                    return false;
//                }
//            }
            
            if ( ((MstStaff) ((JComboBox)cmbstaff).getSelectedItem()).getStaffID() != null) {
                // check time staff
                sql.setLength(0);
                sql.append(" select drd.reservation_datetime, drd.operation_time ");
                sql.append(" from data_reservation dr ");
                sql.append(" inner join data_reservation_detail drd on dr.shop_id = drd.shop_id and dr.reservation_no = drd.reservation_no ");
                sql.append(" where dr.delete_date is null ");
                sql.append(" and drd.delete_date is null ");
                sql.append(" and dr.shop_id = "  + SQLUtil.convertForSQL(rr.getShop().getShopID()));
                sql.append(" and drd.staff_id = " + SQLUtil.convertForSQL(((MstStaff) ((JComboBox)cmbstaff).getSelectedItem()).getStaffID()));
                sql.append(" and date(drd.reservation_datetime) = " + SQLUtil.convertForSQLDateOnly(dt));
                //sql.append(" and dr.status < 3 ");

                rs = con.executeQuery(sql.toString());
                 arrTime = new ArrayList<ReservationTime>();
                while (rs.next()) {
                    dataTime = new ReservationTime();
                    dataTime.setReservationDatetime(rs.getGregorianCalendar("reservation_datetime"));
                    dataTime.setOperationTime(rs.getInt("operation_time"));
                    arrTime.add(dataTime);
                }
                rs.close();
                
                for ( int i = 0;i < arrTime.size(); i ++) {
                    if ( selectedDate.getTimeInMillis() >= arrTime.get(i).getReservationDatetime().getTimeInMillis()
                         && selectedDate.getTimeInMillis() < (arrTime.get(i).getReservationDatetime().getTimeInMillis() + arrTime.get(i).operationTime * 60 * 1000)) {
                        return false;
                    } else if (selectedDate.getTimeInMillis() < arrTime.get(i).getReservationDatetime().getTimeInMillis()
                         && arrTime.get(i).getReservationDatetime().getTimeInMillis() < (selectedDate.getTimeInMillis() + totalMinute * 60 * 1000)) {
                        return false;
                    }
                }
            }
            
            // check data screen
            for ( int i = 0;i < arrReservationTime.size() ;i ++) {
                if ( selectedDate.getTimeInMillis() >= arrReservationTime.get(i).getReservationDatetime().getTimeInMillis()
                     && selectedDate.getTimeInMillis() < (arrReservationTime.get(i).getReservationDatetime().getTimeInMillis() + arrReservationTime.get(i).operationTime * 60 * 1000)) {
                    return false;
                } else if (selectedDate.getTimeInMillis() < arrReservationTime.get(i).getReservationDatetime().getTimeInMillis()
                     && arrReservationTime.get(i).getReservationDatetime().getTimeInMillis() < (selectedDate.getTimeInMillis() + totalMinute * 60 * 1000)) {
                    return false;
                }
            }
            // add data array
            dataTime = new ReservationTime();
            dataTime.setReservationDatetime(selectedDate);
            dataTime.setOperationTime(totalMinute);
            arrReservationTime.add(dataTime);
            
        } catch (SQLException ex) {
            Logger.getLogger(RegistContinuousDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return true;
    }
    
     private boolean checkInputRowNumRemain(Component cmbDate, Component cmbTime, Component cmbstaff, Component cmbBed, Integer numRow) {
        java.util.Date dt = ((jp.co.flatsoft.fscomponent.FSCalenderCombo) cmbDate).getDate();
        GregorianCalendar selectedDate = new GregorianCalendar();
        selectedDate.setTime(dt);
        //check data reservation yet not pay
        Map< String, Integer> myMap = new HashMap<String, Integer>();
        Integer num = 0;
        Integer consumptionNum = 0;
        Integer reservationNum = 0;
        ConsumptionCourse conCourse = new ConsumptionCourse();
        for (int i = 0; i < rr.getReservation().size(); i++) {
            if (rr.getReservation().get(i).getConsumptionCourse() != null) {

                conCourse = rr.getReservation().get(i).getConsumptionCourse();
                num = 0;
                for (int j = 0; j < myMap.size(); j++) {
                    String con = new String();
                    con = conCourse.getContractShopId().toString();
                    con += "_" + conCourse.getContractNo().toString();
                    con += "_" + conCourse.getContractDetailNo();
                    if (myMap.containsKey(con)) {
                        num += (Integer) myMap.get(con);
                        myMap.remove(con);
                    }

                }
                String key = new String();
                key = conCourse.getContractShopId().toString();
                key += "_" + conCourse.getContractNo().toString();
                key += "_" + conCourse.getContractDetailNo().toString();
                myMap.put(key, num);
                reservationNum = getTotalNumReservationOfCourse(rr.getCustomer().getCustomerID(), conCourse.getCourseId(), conCourse.getContractShopId(), conCourse.getContractNo(), conCourse.getContractDetailNo(), rr.getReservation().getReservationNo());
                consumptionNum = getTotalRestNumOfCourse(rr.getCustomer().getCustomerID(), conCourse.getCourseId(), conCourse.getContractShopId(), conCourse.getContractNo(), conCourse.getContractDetailNo());
                if (reservationNum + num + numRow > consumptionNum) {
                    return false;
                }
            }
            // check 有効期限
            if (conCourse.getValidDate()!= null && selectedDate.getTime().after(conCourse.getValidDate())) {
                return false;
            }
        }
         return true;
     }
     
    private boolean checkChangeData() {
        //予約日付
        GregorianCalendar selectedDate = new GregorianCalendar();
        if (cmbReservationDateRow1.getDate() != null &&  arrReTime[0].getReservationDatetime() != null) {
            selectedDate.setTime(cmbReservationDateRow1.getDate());
            if (!arrReTime[0].getReservationDatetime().equals(selectedDate)) {
                return false;
            }
        } else {
            if ((cmbReservationDateRow1.getDate() == null &&  arrReTime[0].getReservationDatetime() != null)
                    || (cmbReservationDateRow1.getDate() != null &&  arrReTime[0].getReservationDatetime() == null)
                    ) {
                return false;
            }
        }
        
        if (cmbReservationDateRow2.getDate() != null &&  arrReTime[1].getReservationDatetime() != null) {
            selectedDate.setTime(cmbReservationDateRow2.getDate());
            if (!arrReTime[1].getReservationDatetime().equals(selectedDate)) {
                return false;
            }
        } else {
            if ((cmbReservationDateRow2.getDate() == null &&  arrReTime[1].getReservationDatetime() != null)
                    || (cmbReservationDateRow2.getDate() != null &&  arrReTime[1].getReservationDatetime() == null)
                    ) {
                return false;
            }
        }
        
        if (cmbReservationDateRow3.getDate() != null &&  arrReTime[2].getReservationDatetime() != null) {
            selectedDate.setTime(cmbReservationDateRow3.getDate());
            if (!arrReTime[2].getReservationDatetime().equals(selectedDate)) {
                return false;
            }
        } else {
            if ((cmbReservationDateRow3.getDate() == null &&  arrReTime[2].getReservationDatetime() != null)
                    || (cmbReservationDateRow3.getDate() != null &&  arrReTime[2].getReservationDatetime() == null)
                    ) {
                return false;
            }
        }
        
        if (cmbReservationDateRow4.getDate() != null &&  arrReTime[3].getReservationDatetime() != null) {
            selectedDate.setTime(cmbReservationDateRow4.getDate());
            if (!arrReTime[3].getReservationDatetime().equals(selectedDate)) {
                return false;
            }
        } else {
            if ((cmbReservationDateRow4.getDate() == null &&  arrReTime[3].getReservationDatetime() != null)
                    || (cmbReservationDateRow4.getDate() != null &&  arrReTime[3].getReservationDatetime() == null)
                    ) {
                return false;
            }
        }
        
        if (cmbReservationDateRow5.getDate() != null &&  arrReTime[4].getReservationDatetime() != null) {
            selectedDate.setTime(cmbReservationDateRow5.getDate());
            if (!arrReTime[4].getReservationDatetime().equals(selectedDate)) {
                return false;
            }
        } else {
            if ((cmbReservationDateRow5.getDate() == null &&  arrReTime[4].getReservationDatetime() != null)
                    || (cmbReservationDateRow5.getDate() != null &&  arrReTime[4].getReservationDatetime() == null)
                    ) {
                return false;
            }
        }
        
        if (cmbReservationDateRow6.getDate() != null &&  arrReTime[5].getReservationDatetime() != null) {
            selectedDate.setTime(cmbReservationDateRow6.getDate());
            if (!arrReTime[5].getReservationDatetime().equals(selectedDate)) {
                return false;
            }
        } else {
            if ((cmbReservationDateRow6.getDate() == null &&  arrReTime[5].getReservationDatetime() != null)
                    || (cmbReservationDateRow6.getDate() != null &&  arrReTime[5].getReservationDatetime() == null)
                    ) {
                return false;
            }
        }
        
        //予約時間
        if (arrReTime[0].getStrTime()!= null && cmbReservationTime1.getSelectedItem() != null) {
            if (! arrReTime[0].getStrTime().equals(cmbReservationTime1.getSelectedItem().toString())) {
                return false;
            }
        }else if ((arrReTime[0].getStrTime() != null && cmbReservationTime1.getSelectedItem() == null)
                ||(arrReTime[0].getStrTime() == null && cmbReservationTime1.getSelectedItem() != null)) {
                return false;
        }
        
        if (arrReTime[1].getStrTime()!= null && cmbReservationTime2.getSelectedItem() != null) {
            if (! arrReTime[1].getStrTime().equals(cmbReservationTime2.getSelectedItem().toString())) {
                return false;
            }
        }else if ((arrReTime[1].getStrTime() != null && cmbReservationTime2.getSelectedItem() == null)
                ||(arrReTime[1].getStrTime() == null && cmbReservationTime2.getSelectedItem() != null)) {
                return false;
        }

        if (arrReTime[2].getStrTime()!= null && cmbReservationTime3.getSelectedItem() != null) {
            if (! arrReTime[2].getStrTime().equals(cmbReservationTime3.getSelectedItem().toString())) {
                return false;
            }
        }else if ((arrReTime[2].getStrTime() != null && cmbReservationTime3.getSelectedItem() == null)
                ||(arrReTime[2].getStrTime() == null && cmbReservationTime3.getSelectedItem() != null)) {
                return false;
        }
        
        if (arrReTime[3].getStrTime()!= null && cmbReservationTime4.getSelectedItem() != null) {
            if (! arrReTime[3].getStrTime().equals(cmbReservationTime4.getSelectedItem().toString())) {
                return false;
            }
        }else if ((arrReTime[3].getStrTime() != null && cmbReservationTime4.getSelectedItem() == null)
                ||(arrReTime[3].getStrTime() == null && cmbReservationTime4.getSelectedItem() != null)) {
                return false;
        }
        
        if (arrReTime[4].getStrTime()!= null && cmbReservationTime5.getSelectedItem() != null) {
            if (! arrReTime[4].getStrTime().equals(cmbReservationTime5.getSelectedItem().toString())) {
                return false;
            }
        }else if ((arrReTime[4].getStrTime() != null && cmbReservationTime5.getSelectedItem() == null)
                ||(arrReTime[4].getStrTime() == null && cmbReservationTime5.getSelectedItem() != null)) {
                return false;
        }
        
        if (arrReTime[5].getStrTime()!= null && cmbReservationTime6.getSelectedItem() != null) {
            if (! arrReTime[5].getStrTime().equals(cmbReservationTime6.getSelectedItem().toString())) {
                return false;
            }
        }else if ((arrReTime[5].getStrTime() != null && cmbReservationTime6.getSelectedItem() == null)
                ||(arrReTime[5].getStrTime() == null && cmbReservationTime6.getSelectedItem() != null)) {
                return false;
        }
        
        
        //消化担当
        if (arrReTime[0].getStaffID() != null && ((MstStaff)cmbChargeStaff1.getSelectedItem()).getStaffID() != null) {
            if (! arrReTime[0].getStaffID().equals(((MstStaff)cmbChargeStaff1.getSelectedItem()).getStaffID())) {
                return false;
            }
        }else if ((arrReTime[0].getStaffID() != null && ((MstStaff)cmbChargeStaff1.getSelectedItem()).getStaffID() == null)
                ||(arrReTime[0].getStaffID() == null && ((MstStaff)cmbChargeStaff1.getSelectedItem()).getStaffID() != null)
                ) {
            return false;
        }
        
        if (arrReTime[1].getStaffID() != null && ((MstStaff)cmbChargeStaff2.getSelectedItem()).getStaffID() != null) {
            if (! arrReTime[1].getStaffID().equals(((MstStaff)cmbChargeStaff2.getSelectedItem()).getStaffID())) {
                return false;
            }
        }else if ((arrReTime[1].getStaffID() != null && ((MstStaff)cmbChargeStaff2.getSelectedItem()).getStaffID() == null)
                ||(arrReTime[1].getStaffID() == null && ((MstStaff)cmbChargeStaff2.getSelectedItem()).getStaffID() != null)
                ) {
            return false;
        }
        
        if (arrReTime[2].getStaffID() != null && ((MstStaff)cmbChargeStaff3.getSelectedItem()).getStaffID() != null) {
            if (! arrReTime[2].getStaffID().equals(((MstStaff)cmbChargeStaff3.getSelectedItem()).getStaffID())) {
                return false;
            }
        }else if ((arrReTime[2].getStaffID() != null && ((MstStaff)cmbChargeStaff3.getSelectedItem()).getStaffID() == null)
                ||(arrReTime[2].getStaffID() == null && ((MstStaff)cmbChargeStaff3.getSelectedItem()).getStaffID() != null)
                ) {
            return false;
        }
        
        if (arrReTime[3].getStaffID() != null && ((MstStaff)cmbChargeStaff4.getSelectedItem()).getStaffID() != null) {
            if (! arrReTime[3].getStaffID().equals(((MstStaff)cmbChargeStaff4.getSelectedItem()).getStaffID())) {
                return false;
            }
        }else if ((arrReTime[3].getStaffID() != null && ((MstStaff)cmbChargeStaff4.getSelectedItem()).getStaffID() == null)
                ||(arrReTime[3].getStaffID() == null && ((MstStaff)cmbChargeStaff4.getSelectedItem()).getStaffID() != null)
                ) {
            return false;
        }
        
        if (arrReTime[4].getStaffID() != null && ((MstStaff)cmbChargeStaff5.getSelectedItem()).getStaffID() != null) {
            if (! arrReTime[4].getStaffID().equals(((MstStaff)cmbChargeStaff5.getSelectedItem()).getStaffID())) {
                return false;
            }
        }else if ((arrReTime[4].getStaffID() != null && ((MstStaff)cmbChargeStaff5.getSelectedItem()).getStaffID() == null)
                ||(arrReTime[4].getStaffID() == null && ((MstStaff)cmbChargeStaff5.getSelectedItem()).getStaffID() != null)
                ) {
            return false;
        }
        
        if (arrReTime[5].getStaffID() != null && ((MstStaff)cmbChargeStaff6.getSelectedItem()).getStaffID() != null) {
            if (! arrReTime[5].getStaffID().equals(((MstStaff)cmbChargeStaff6.getSelectedItem()).getStaffID())) {
                return false;
            }
        }else if ((arrReTime[5].getStaffID() != null && ((MstStaff)cmbChargeStaff6.getSelectedItem()).getStaffID() == null)
                ||(arrReTime[5].getStaffID() == null && ((MstStaff)cmbChargeStaff6.getSelectedItem()).getStaffID() != null)
                ) {
            return false;
        }
        
        return true;
    }

    private String getTotalRestNumOfCourseSQL( int contractShopID, int contractNo, int contractDetailNo) {
        StringBuilder sql = new StringBuilder(1000);

        sql.append(" SELECT cast(sum(product_num) - sum(consumtionnum)AS int) AS num \n");
        sql.append("FROM \n");
        sql.append("( \n");
        sql.append("	SELECT  dc.product_num AS product_num, \n");
        sql.append("sum( coalesce (dcd.product_num,0)) AS consumtionnum  \n");
        sql.append("FROM data_contract_digestion dcd  \n");
        sql.append("RIGHT JOIN DATA_CONTRACT dc ON dc.shop_id = dcd.contract_shop_id \n");
        sql.append("AND dc.contract_no = dcd.contract_no \n");
        sql.append("   AND dc.contract_detail_no = dcd.contract_detail_no \n");
        sql.append("Where dc.shop_id = " + contractShopID + "  \n");
        sql.append("     AND dc.contract_no = " + contractNo + "   \n");
        sql.append("     AND dc.contract_detail_no = " + contractDetailNo + "   \n");
        sql.append("and dc.delete_date is null  \n");
        sql.append("and dcd.delete_date is null  \n");
        sql.append("group by dc.product_num  \n");
        sql.append(")a \n");

        return sql.toString();
    }

    private String getTotalNumReservationOfCourseSQL(Integer customerId, Integer courseId, Integer contractShopID, Integer contractNo, Integer contractDetailNo, Integer reservationNo) {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select count(*) as num from data_reservation_detail rd \n");
        sql.append(" inner join data_reservation r on r.reservation_no = rd.reservation_no and r.shop_id = rd.shop_id \n");
        sql.append(" where rd.course_flg = 2 and rd.technic_id = " + courseId + " \n");
        sql.append(" and r.customer_id =" + customerId + "\n");
        sql.append(" and rd.contract_shop_id =" + contractShopID + "\n");
        sql.append(" and rd.contract_no =" + contractNo + "\n");
        sql.append(" and rd.contract_detail_no =" + contractDetailNo + "\n");
         sql.append(" and  r.status< 3 and to_char(rd.reservation_datetime , 'YYYYMMDD' ) >= to_char(current_timestamp , 'YYYYMMDD' )   \n");
        sql.append(" and r.delete_date is null and rd.delete_date is null \n");
        
        if (reservationNo != null) {
            sql.append(" and r.reservation_no not in(" + reservationNo + ")");
        }
        return sql.toString();
    }

    public Integer getTotalRestNumOfCourse(int customerId, int courseId, int contractShopID, int contractNo, int contractDetailNo) {
        Integer result = 0;
        try {
            ConnectionWrapper con = SystemInfo.getConnection();
            ResultSetWrapper rs = con.executeQuery(getTotalRestNumOfCourseSQL( contractShopID, contractNo, contractDetailNo));
            if (rs.next()) {

                result = rs.getInt("num");
            }
        } catch (SQLException e) {
            System.out.print(e);
        }
        return result;
    }

    public Integer getTotalNumReservationOfCourse(int customerId, int courseId, int contractShopID, int contractNo, int contractDetailNo, Integer reservationNo) {
        Integer result = 0;
        try {
            ConnectionWrapper con = SystemInfo.getConnection();
            ResultSetWrapper rs = con.executeQuery(getTotalNumReservationOfCourseSQL(customerId, courseId, contractShopID, contractNo, contractDetailNo, reservationNo));
            if (rs.next()) {

                result = rs.getInt("num");
            }
        } catch (SQLException e) {
            System.out.print(e);
        }
        return result;
    }

     private void setData(Component cmbDate, Component cmbTime, Component cmbstaff, Component cmbBed) {

        if (reservations.getCellEditor() != null) {
            reservations.getCellEditor().stopCellEditing();
        }

        rr.getReservation().setShop(this.getSelectedShop());
        //予約日付
        GregorianCalendar selectedDate = new GregorianCalendar();
        selectedDate.setTime(((jp.co.flatsoft.fscomponent.FSCalenderCombo) cmbDate).getDate());
        rr.setDate(selectedDate);

        int totalOperationTime = 0;
        for (int i = 0; i < reservations.getRowCount(); i++) {
            DataReservationDetail drd = rr.getReservation().get(i);
            if (drd.getCourseFlg() == null) {
                drd.getTechnic().setOperationTime((Integer) reservations.getValueAt(i, 2));
            } else if (drd.getCourseFlg() == 2) {
                drd.getConsumptionCourse().setOperationTime((Integer) reservations.getValueAt(i, 2));
            }

            //予約時間
            GregorianCalendar cal = drd.getReservationDatetime();
            cal.setTime(((jp.co.flatsoft.fscomponent.FSCalenderCombo) cmbDate).getDate());
            String s = (((JComboBox)cmbTime).getSelectedItem()).toString();
            cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(s.replaceAll(":.+", "")));
            cal.set(Calendar.MINUTE, (Integer.parseInt(s.replaceAll(".+:", "")) + totalOperationTime ));
            drd.setReservationDatetime(cal);
            
            if (drd.getCourseFlg() == null) {
                totalOperationTime += drd.getTechnic().getOperationTime(); 
            } else if (drd.getCourseFlg() == 2) {
                totalOperationTime += drd.getConsumptionCourse().getOperationTime(); 
            }
            
            //消化担当
            if (((MstStaff) ((JComboBox)cmbstaff).getSelectedItem()).getStaffID() != null) {
                drd.setStaff(((MstStaff) ((JComboBox)cmbstaff).getSelectedItem()));
            }
            
            //施術台
            if (((MstBed) ((JComboBox)cmbBed).getSelectedItem()).getBedID() != null) {
                drd.setBed(((MstBed) ((JComboBox)cmbBed).getSelectedItem()));
            }
            
        }
        if (((MstStaff) ((JComboBox)cmbstaff).getSelectedItem()).getStaffID() != null) {
            rr.getReservation().setStaff(((MstStaff) ((JComboBox)cmbstaff).getSelectedItem()));
        }

    }
    
    /**
     * 予約処理を行う。
     */
    private void registData() {
        try {
            
            //予約処理
            ConnectionWrapper con = SystemInfo.getConnection();

            try
            {
                //IVS_NHTVINH start add 2016/08/31 New request #54380
                java.util.List<Integer> listReservationNo = new LinkedList<Integer>();
                con.begin();
                Boolean flagError = false;
                if (lbCheckNum1.getText().equals("OK")) {
                    rr.getReservation().setReservationNo(null);
                    setData(cmbReservationDateRow1, cmbReservationTime1, cmbChargeStaff1, cmbBed1);
                    rr.Registreservation(con);
                    //IVS_NHTVINH start add 2016/08/31 New request #54380
                    listReservationNo.add(rr.getReservation().getReservationNo());
                }
                if (lbCheckNum2.getText().equals("OK")) {
                    rr.getReservation().setReservationNo(null);
                    setData(cmbReservationDateRow2, cmbReservationTime2, cmbChargeStaff2, cmbBed2);
                    rr.Registreservation(con);
                    //IVS_NHTVINH start add 2016/08/31 New request #54380
                     listReservationNo.add(rr.getReservation().getReservationNo());
                }
                if (lbCheckNum3.getText().equals("OK")) {
                    rr.getReservation().setReservationNo(null);
                    setData(cmbReservationDateRow3, cmbReservationTime3, cmbChargeStaff3, cmbBed3);
                    rr.Registreservation(con);
                    //IVS_NHTVINH start add 2016/08/31 New request #54380
                    listReservationNo.add(rr.getReservation().getReservationNo());
                }
                if (lbCheckNum4.getText().equals("OK")) {
                    rr.getReservation().setReservationNo(null);
                    setData(cmbReservationDateRow4, cmbReservationTime4, cmbChargeStaff4, cmbBed4);
                    rr.Registreservation(con);
                    //IVS_NHTVINH start add 2016/08/31 New request #54380
                    listReservationNo.add(rr.getReservation().getReservationNo());
                }
                if (lbCheckNum5.getText().equals("OK")) {
                    rr.getReservation().setReservationNo(null);
                    setData(cmbReservationDateRow5, cmbReservationTime5, cmbChargeStaff5, cmbBed5);
                    rr.Registreservation(con);
                    //IVS_NHTVINH start add 2016/08/31 New request #54380
                    listReservationNo.add(rr.getReservation().getReservationNo());
                }
                if (lbCheckNum6.getText().equals("OK")) {
                    rr.getReservation().setReservationNo(null);
                    setData(cmbReservationDateRow6, cmbReservationTime6, cmbChargeStaff6, cmbBed6);
                    rr.Registreservation(con);
                    //IVS_NHTVINH start add 2016/08/31 New request #54380
                    listReservationNo.add(rr.getReservation().getReservationNo());
                }
                con.commit(); 
                //IVS_NHTVINH start add 2016/08/31 New request #54380
                SystemInfo.getMstUser().setShopID(((MstShop)shop.getSelectedItem()).getShopID());
                if(SystemInfo.getUserByUserApi() != null && SystemInfo.getUserByUserApi() != 0){
                    int shopId = rr.getReservation().getShop().getShopID();
                    for(Integer resevationNo : listReservationNo){
                        if(!rr.sendReservationAPI(SystemInfo.getLoginID(),shopId, resevationNo)){
                            flagError = true;
                        }   
                    }
                }
                MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(5001),
                this.getTitle(),
                JOptionPane.INFORMATION_MESSAGE);
                //IVS_NHTVINH end edit 2016/08/31 New request #54380
                if(flagError){
                    MessageDialog.showMessageDialog(this,
                    "媒体との連動ができませんでした。",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                }
                this.setReserved(true);
                this.closeReservationPanel();
            }
            catch(SQLException e)
            {
                    con.rollback();
                    MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "予約データ"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        }catch ( Exception e ) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

    }
    
    public void setArrReTime() {
        //予約日付
        GregorianCalendar selectedDate = new GregorianCalendar();
        if (cmbReservationDateRow1.getDate() != null) {
            selectedDate.setTime(cmbReservationDateRow1.getDate());
            arrReTime[0].setReservationDatetime(selectedDate);
        } else {
            arrReTime[0].setReservationDatetime(null);
        }
        
        if ( cmbReservationDateRow2.getDate() != null) {
            selectedDate = new GregorianCalendar();
            selectedDate.setTime(cmbReservationDateRow2.getDate());
            arrReTime[1].setReservationDatetime(selectedDate);
        }else {
            arrReTime[1].setReservationDatetime(null);
        }
        
        if (cmbReservationDateRow3.getDate() != null) {
            selectedDate = new GregorianCalendar();
            selectedDate.setTime(cmbReservationDateRow3.getDate());
            arrReTime[2].setReservationDatetime(selectedDate);
        }else {
            arrReTime[2].setReservationDatetime(null);
        }
        
        if (cmbReservationDateRow4.getDate() != null) {
            selectedDate = new GregorianCalendar();
            selectedDate.setTime(cmbReservationDateRow4.getDate());
            arrReTime[3].setReservationDatetime(selectedDate);
        }else {
            arrReTime[3].setReservationDatetime(null);
        }
        
        if (cmbReservationDateRow5.getDate() != null) {
            selectedDate = new GregorianCalendar();
            selectedDate.setTime(cmbReservationDateRow5.getDate());
            arrReTime[4].setReservationDatetime(selectedDate);
        }else {
            arrReTime[4].setReservationDatetime(null);
        }
        
        if (cmbReservationDateRow6.getDate() != null) {
            selectedDate = new GregorianCalendar();
            selectedDate.setTime(cmbReservationDateRow6.getDate());
            arrReTime[5].setReservationDatetime(selectedDate);
        }else {
            arrReTime[5].setReservationDatetime(null);
        }
        
        //予約時間
        arrReTime[0].setStrTime(cmbReservationTime1.getSelectedItem() == null ? null : cmbReservationTime1.getSelectedItem().toString());
        arrReTime[1].setStrTime(cmbReservationTime2.getSelectedItem() == null ? null : cmbReservationTime2.getSelectedItem().toString());
        arrReTime[2].setStrTime(cmbReservationTime3.getSelectedItem() == null ? null : cmbReservationTime3.getSelectedItem().toString());
        arrReTime[3].setStrTime(cmbReservationTime4.getSelectedItem() == null ? null : cmbReservationTime4.getSelectedItem().toString());
        arrReTime[4].setStrTime(cmbReservationTime5.getSelectedItem() == null ? null : cmbReservationTime5.getSelectedItem().toString());
        arrReTime[5].setStrTime(cmbReservationTime6.getSelectedItem() == null ? null : cmbReservationTime6.getSelectedItem().toString());
        
        //消化担当
        arrReTime[0].setStaffID(((MstStaff)cmbChargeStaff1.getSelectedItem()).getStaffID());
        arrReTime[1].setStaffID(((MstStaff)cmbChargeStaff2.getSelectedItem()).getStaffID());
        arrReTime[2].setStaffID(((MstStaff)cmbChargeStaff3.getSelectedItem()).getStaffID());
        arrReTime[3].setStaffID(((MstStaff)cmbChargeStaff4.getSelectedItem()).getStaffID());
        arrReTime[4].setStaffID(((MstStaff)cmbChargeStaff5.getSelectedItem()).getStaffID());
        arrReTime[5].setStaffID(((MstStaff)cmbChargeStaff6.getSelectedItem()).getStaffID());
        
    }

       /**
     * 按分リストを取得する
     */
    private void getProportionallys() {
        ConnectionWrapper con = SystemInfo.getConnection();
        proportionallys.clear();
        try {
            ResultSetWrapper rs = con.executeQuery(this.getProportionallyListSelectSQL());
            DataProportionally drp = null;
            MstProportionally proportionally = null;
            MstTechnic mt = null;
            proportionally = new MstProportionally();
            while (rs.next()) {
                drp = new DataProportionally();
                MstProportionally proportionallyTerm = null;
                proportionallyTerm = (MstProportionally)proportionally.clone();
                mt = new MstTechnic();
                drp.setDataProportionallyID(rs.getInt("data_proportionally_id"));
                proportionallyTerm.setProportionallyID(rs.getInt("proportionally_id"));
                proportionallyTerm.setProportionallyName(rs.getString("proportionally_name"));
                proportionallyTerm.setProportionallyPoint(rs.getInt("proportionally_point"));
                drp.setProportionally(proportionallyTerm);
                mt.setData(rs);
                drp.setTechnic(mt);
                drp.setRatio(rs.getInt("proportionally_ratio"));
                proportionallys.add(drp);
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }

    /**
     * 按分リスト取得SQLを取得する
     */
    private String getProportionallyListSelectSQL() {
        MstShop s = (MstShop)shop.getSelectedItem();
        return "select\n"
                + "dp.data_proportionally_id,\n"
                + "mp.proportionally_id,\n"
                + "mp.proportionally_name,\n"
                + "mp.proportionally_point,\n"
                + "mt.*,\n"
                + "dp.proportionally_ratio\n"
                + "from\n"
                + "data_proportionally as dp\n"
                + "inner join mst_proportionally mp on\n"
                + "mp.proportionally_id = dp.proportionally_id\n"
                + "inner join mst_technic as mt on\n"
                + "mt.technic_id = dp.technic_id\n"
                +" inner join mst_use_product us on  us.product_division=1 and us.product_id = mt.technic_id and shop_id ="+s.getShopID()
                + "where\n"
                + "dp.delete_date is null\n"
                + "order by\n"
                + "dp.technic_id, mp.display_seq, mp.proportionally_id\n"
                + ";\n";
    }
    
    @Override
    public void addSelectedProduct(Integer productDivision, Product product) {
        DataReservationDetail drd = new DataReservationDetail();
        MstTechnicClass mtc = new MstTechnicClass();
        MstTechnic mt = new MstTechnic();

        mtc.setTechnicClassID(product.getProductClass().getProductClassID());
        mtc.setTechnicClassName(product.getProductClass().getProductClassName());
        mtc.setShopcategoryid(product.getProductClass().getShopCategoryID());
        mt.setTechnicClass(mtc);
        mt.setTechnicID(product.getProductID());
        mt.setTechnicNo(product.getProductNo());
        mt.setTechnicName(product.getProductName());
        mt.setOperationTime(product.getOperationTime());
        drd.setTechnic(mt);

        if (0 < rr.getReservation().size()) {
            drd.setReservationDatetime(
                    (GregorianCalendar) rr.getReservation().get(
                    rr.getReservation().size() - 1).getReservationDatetime().clone());

            Integer operationTime = null;
            if (rr.getReservation().get(rr.getReservation().size() - 1).getCourseFlg() == null) {
                //技術の場合
                operationTime = rr.getReservation().get(rr.getReservation().size() - 1).getTechnic().getOperationTime();
            }else if (rr.getReservation().get(rr.getReservation().size() - 1).getCourseFlg() == 2) {
                //消化コースの場合
                operationTime = rr.getReservation().get(rr.getReservation().size() - 1).getConsumptionCourse().getOperationTime();
            }
            drd.getReservationDatetime().add(Calendar.MINUTE, operationTime);
        }

        rr.getReservation().add(drd);
        rr.getReservation().setTotalTime(rr.getReservation().getTotalTime() + drd.getTechnic().getOperationTime());


        // 按分を追加する
        for (DataProportionally dp : proportionallys) {
            if (drd.getCourseFlg() == null) {
                //技術の場合
                if (drd.getTechnic().getTechnicID().intValue() == dp.getTechnic().getTechnicID().intValue()) {
                    DataReservationProportionally drp = new DataReservationProportionally();
                    drp.setReservationDetail(drd);
                    drp.setProportionally(dp);
                    drp.setDesignated(false);
                    drd.add(drp);
                }
            } else if (drd.getCourseFlg() == 1) {
                //コース契約の場合
            } else if (drd.getCourseFlg() == 2) {
                //消化コースの場合
            }
        }

        this.addReservationRow(drd);
    }

    @Override
    public void addSelectedCourse(Integer intgr, Course course) {
       
    }

    @Override
    public void addSelectedConsumptionCourse(Integer productDivision, ConsumptionCourse consumptionCourse) {
        DataReservationDetail drd = new DataReservationDetail();
        drd.setConsumptionCourse(consumptionCourse);
        drd.setCourseFlg(2);
        drd.setContractShopId(consumptionCourse.getContractShopId());

        if (0 < rr.getReservation().size()) {
            drd.setReservationDatetime(
                    (GregorianCalendar) rr.getReservation().get(
                    rr.getReservation().size() - 1).getReservationDatetime().clone());

            Integer operationTime = null;
            if (rr.getReservation().get(rr.getReservation().size() - 1).getCourseFlg() == null) {
                operationTime = rr.getReservation().get(rr.getReservation().size() - 1).getTechnic().getOperationTime();
            }else if (rr.getReservation().get(rr.getReservation().size() - 1).getCourseFlg() == 2) {
                //消化コースの場合
                operationTime = rr.getReservation().get(rr.getReservation().size() - 1).getConsumptionCourse().getOperationTime();
            }
            drd.getReservationDatetime().add(Calendar.MINUTE, operationTime);
        }


        rr.getReservation().add(drd);
        rr.getReservation().setTotalTime(rr.getReservation().getTotalTime() + drd.getConsumptionCourse().getOperationTime());

        //予約時間、終了時間
        //setReservationTime();

        this.addReservationConsumptionCourseRow(drd);
    }
    
    /**
     * 消化コースの予約内容の行を追加する。
     *
     * @param dr 予約データ
     */
    private void addReservationConsumptionCourseRow(DataReservationDetail drd) {

        if (reservations.getCellEditor() != null) {
            reservations.getCellEditor().stopCellEditing();
        }

        DefaultTableModel model = (DefaultTableModel) reservations.getModel();

        int preIndex;

        model.addRow(
                new Object[]{
                    drd.getConsumptionCourse().getConsumptionCourseClass().getCourseClassName(),
                    drd.getConsumptionCourse().getCourseName(),
                    drd.getConsumptionCourse().getOperationTime(),
                    (drd.getConsumptionCourse().getNum() - drd.getConsumptionCourse().getConsumptionNum().intValue()),
                    drd.getConsumptionCourse().getSalesDate(),
                    drd.getConsumptionCourse().getValidDate(),
                    this.getDeleteButton()
                });

    }
    
    private void addReservationRow(DataReservationDetail drd) {

        if (reservations.getCellEditor() != null) {
            reservations.getCellEditor().stopCellEditing();
        }

        DefaultTableModel model = (DefaultTableModel) reservations.getModel();

        model.addRow(
                new Object[]{
                    drd.getTechnic().getTechnicClass().getTechnicClassName(),
                    drd.getTechnic().getTechnicName(),
                    drd.getTechnic().getOperationTime(),
                    null,
                    null,
                    null,
                    this.getDeleteButton()
                });

    }

    /**
     * 予約登録画面用FocusTraversalPolicy
     */
    private class RegistContinuousFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {

            if (aComponent.equals(customerNo)) {
                    return cmbReservationDateRow1;
            } else if (aComponent.equals(cmbReservationDateRow1)) {
                    return cmbReservationTime1;
            } else if (aComponent.equals(cmbReservationTime1)) {
                return cmbChargeStaff1;
            } else if (aComponent.equals(cmbChargeStaff1)) {
                return cmbBed1;
            } else if (aComponent.equals(cmbBed1)) {
                return cmbReservationDateRow2;
            }  else if (aComponent.equals(cmbReservationDateRow2)) {
                    return cmbReservationTime2;
            } else if (aComponent.equals(cmbReservationTime2)) {
                return cmbChargeStaff2;
            } else if (aComponent.equals(cmbChargeStaff2)) {
                return cmbBed2;
            }  else if (aComponent.equals(cmbBed2)) {
                return cmbReservationDateRow3;
            }  else if (aComponent.equals(cmbReservationDateRow3)) {
                    return cmbReservationTime3;
            } else if (aComponent.equals(cmbReservationTime3)) {
                return cmbChargeStaff3;
            } else if (aComponent.equals(cmbChargeStaff3)) {
                return cmbBed3;
            }  else if (aComponent.equals(cmbBed3)) {
                return cmbReservationDateRow4;
            }  else if (aComponent.equals(cmbReservationDateRow4)) {
                    return cmbReservationTime4;
            } else if (aComponent.equals(cmbReservationTime4)) {
                return cmbChargeStaff4;
            } else if (aComponent.equals(cmbChargeStaff4)) {
                return cmbBed4;
            }  else if (aComponent.equals(cmbBed4)) {
                return cmbReservationDateRow5;
            }  else if (aComponent.equals(cmbReservationDateRow5)) {
                    return cmbReservationTime5;
            } else if (aComponent.equals(cmbReservationTime5)) {
                return cmbChargeStaff5;
            } else if (aComponent.equals(cmbChargeStaff5)) {
                return cmbBed5;
            }  else if (aComponent.equals(cmbBed5)) {
                return cmbReservationDateRow6;
            }  else if (aComponent.equals(cmbReservationDateRow6)) {
                    return cmbReservationTime6;
            } else if (aComponent.equals(cmbReservationTime6)) {
                return cmbChargeStaff6;
            } else if (aComponent.equals(cmbChargeStaff6)) {
                return cmbBed6;
            } 
            
            return cmbBed6;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(cmbBed6)) {
                    return cmbChargeStaff6;
            } else if (aComponent.equals(cmbChargeStaff6)) {
                    return cmbReservationTime6;
            } else if (aComponent.equals(cmbReservationTime6)) {
                return cmbReservationDateRow6;
            } else if (aComponent.equals(cmbReservationDateRow6)) {
                return cmbBed5;
            } else if (aComponent.equals(cmbBed5)) {
                return cmbChargeStaff5;
            }  else if (aComponent.equals(cmbChargeStaff5)) {
                    return cmbReservationTime5;
            } else if (aComponent.equals(cmbReservationTime5)) {
                return cmbReservationDateRow5;
            } else if (aComponent.equals(cmbReservationDateRow5)) {
                return cmbBed4;
            }  else if (aComponent.equals(cmbBed4)) {
                return cmbChargeStaff4;
            }  else if (aComponent.equals(cmbChargeStaff4)) {
                    return cmbReservationTime4;
            } else if (aComponent.equals(cmbReservationTime4)) {
                return cmbReservationDateRow4;
            } else if (aComponent.equals(cmbReservationDateRow4)) {
                return cmbBed3;
            }  else if (aComponent.equals(cmbBed3)) {
                return cmbChargeStaff3;
            }  else if (aComponent.equals(cmbChargeStaff3)) {
                    return cmbReservationTime3;
            } else if (aComponent.equals(cmbReservationTime3)) {
                return cmbReservationDateRow3;
            } else if (aComponent.equals(cmbReservationDateRow3)) {
                return cmbBed2;
            }  else if (aComponent.equals(cmbBed2)) {
                return cmbChargeStaff2;
            }  else if (aComponent.equals(cmbChargeStaff2)) {
                    return cmbReservationTime2;
            } else if (aComponent.equals(cmbReservationTime2)) {
                return cmbReservationDateRow2;
            } else if (aComponent.equals(cmbReservationDateRow2)) {
                return cmbBed1;
            }  else if (aComponent.equals(cmbBed1)) {
                return cmbChargeStaff1;
            }  else if (aComponent.equals(cmbChargeStaff1)) {
                    return cmbReservationTime1;
            } else if (aComponent.equals(cmbReservationTime1)) {
                return cmbReservationDateRow1;
            } else if (aComponent.equals(cmbReservationDateRow1)) {
                return customerNo;
            } 
            
            return customerNo;
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。 このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer 先頭の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer) {
            return customerNo;
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。 このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer aContainer - 最後の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer) {
            return cmbBed6;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。 aContainer
         * をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         *
         * @param aContainer デフォルトの Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer) {
            return customerNo;
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。 show() または setVisible(true)
         * の呼び出しで一度ウィンドウが表示されると、 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、 または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         *
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */

    }

    /**
     * 予約テーブル用のTableCellRenderer
     */
    public class RegistReservationTableCellRenderer extends DefaultTableCellRenderer {

        /**
         * Creates a new instance of ReservationTableCellRenderer
         */
        public RegistReservationTableCellRenderer() {
            super();
        }

        /**
         * テーブルセルレンダリングを返します。
         *
         * @param table JTable
         * @param value セルに割り当てる値
         * @param isSelected セルが選択されている場合は true
         * @param hasFocus フォーカスがある場合は true
         * @param row 行
         * @param column 列
         * @return テーブルセルレンダリング
         */
        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value,
                    isSelected, hasFocus, row, column);

            switch (column) {
                case 2:
                case 3:
                    super.setHorizontalAlignment(SwingConstants.CENTER);
                    break;
                default:
                    super.setHorizontalAlignment(SwingConstants.LEFT);
                    break;
            }

            return this;
        }
    }

    /**
     * ダイアログを閉じる
     */
    private void closeReservationPanel() {
        if (this.isDialog()) {
            ((JDialog) this.getParent().getParent().getParent().getParent()).setVisible(false);
        } else {
            this.setVisible(false);
        }
    }

    /**
     * ダイアログ画面を開く
     *
     * @param owner 親フレーム
     * @param modal モーダル
     * @param panel ダイアログ用パネル
     * @param title ダイアログタイトル
     */
    private void openAnchorDialog(Frame owner, boolean modal, JPanel panel, String title) {
        JDialog dialog = new JDialog(owner, modal);

        dialog.setTitle(title);
        setPanelToDialog(dialog, panel);
        moveAnchor(dialog);
        closeReservationPanel();
        dialog.setVisible(true);
    }

    /**
     * ダイアログ用パネルをダイアログに設定する
     *
     * @param dialog ダイアログ
     * @param panel ダイアログパネル
     */
    private void setPanelToDialog(JDialog dialog, JPanel panel) {
        dialog.setSize(panel.getWidth() + 4, panel.getHeight() + 32);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(dialog.getContentPane());
        dialog.getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(panel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(panel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
    }

    /**
     * JDialogを親フレームと同じ画面位置へ移動する。
     *
     * @param dialog JDialog
     */
    private void moveAnchor(JDialog dialog) {
        int posX = this.getLocationOnScreen().x - MINUS_X;
        int posY = this.getLocationOnScreen().y - MINUS_Y;

        dialog.setLocation(posX, posY);
    }

    
    /**
     * Add all event in
     */
    private void addListenerAll() {
        //mouse
        //予約日付
        addMouseListener(cmbReservationDateRow1);
        addMouseListener(cmbReservationDateRow2);
        addMouseListener(cmbReservationDateRow3);
        addMouseListener(cmbReservationDateRow4);
        addMouseListener(cmbReservationDateRow5);
        addMouseListener(cmbReservationDateRow6);
        
        //予約時間
        addMouseListener(cmbReservationTime1);
        addMouseListener(cmbReservationTime2);
        addMouseListener(cmbReservationTime3);
        addMouseListener(cmbReservationTime4);
        addMouseListener(cmbReservationTime5);
        addMouseListener(cmbReservationTime6);
        
        //消化担当
        addMouseListener(cmbChargeStaff1);
        addMouseListener(cmbChargeStaff2);
        addMouseListener(cmbChargeStaff3);
        addMouseListener(cmbChargeStaff4);
        addMouseListener(cmbChargeStaff5);
        addMouseListener(cmbChargeStaff6);
        
        //key
        //予約日付
        addKeyListener(cmbReservationDateRow1);
        addKeyListener(cmbReservationDateRow2);
        addKeyListener(cmbReservationDateRow3);
        addKeyListener(cmbReservationDateRow4);
        addKeyListener(cmbReservationDateRow5);
        addKeyListener(cmbReservationDateRow6);
        
        //予約時間
        addKeyListener(cmbReservationTime1);
        addKeyListener(cmbReservationTime2);
        addKeyListener(cmbReservationTime3);
        addKeyListener(cmbReservationTime4);
        addKeyListener(cmbReservationTime5);
        addKeyListener(cmbReservationTime6);
        
        //消化担当
        addKeyListener(cmbChargeStaff1);
        addKeyListener(cmbChargeStaff2);
        addKeyListener(cmbChargeStaff3);
        addKeyListener(cmbChargeStaff4);
        addKeyListener(cmbChargeStaff5);
        addKeyListener(cmbChargeStaff6);

    }
    

    /**
     * Add mouse Focus event.
     * @param component 
     */
 private void addFocusListener(final JComponent component) {
     component.addFocusListener(new java.awt.event.FocusListener() {

         @Override
         public void focusGained(FocusEvent fe) {
             
         }

         @Override
         public void focusLost(FocusEvent fe) {
//             if (! checkChangeData() && flagCheck) {
//                 reserveButton.setEnabled(false);
//             }

         }
     });
 }
 
    private void addMouseListener(final JComponent component) {
           component.addMouseListener(new java.awt.event.MouseAdapter() {
               @Override
               public void mouseClicked(java.awt.event.MouseEvent event) {
                   reserveButton.setEnabled(false);
               }
               public void mouseEntered(MouseEvent me) {
               }

               public void mouseExited(MouseEvent me) {

             }
           });
       }
    
    private void addKeyListener (final JComponent component) {
        component.addKeyListener(new java.awt.event.KeyListener() {

            @Override
            public void keyTyped(KeyEvent ke) {
                
            }

            @Override
            public void keyPressed(KeyEvent ke) {
                reserveButton.setEnabled(false);
            }

            @Override
            public void keyReleased(KeyEvent ke) {
                
            }
        });
        
    }
    
    private class ReservationTime {
        private GregorianCalendar   reservationDatetime             = null;
        private Integer             operationTime                   = null;
        private Integer             staffID                         = null;
        private Integer             bed                             = null;
        private String              strTime                         = null;

        public String getStrTime() {
            return strTime;
        }

        public void setStrTime(String strTime) {
            this.strTime = strTime;
        }

        public Integer getBed() {
            return bed;
        }

        public void setBed(Integer bed) {
            this.bed = bed;
        }

        public Integer getStaffID() {
            return staffID;
        }

        public void setStaffID(Integer staffID) {
            this.staffID = staffID;
        }

        public GregorianCalendar getReservationDatetime() {
            return reservationDatetime;
        }

        public void setReservationDatetime(GregorianCalendar reservationDatetime) {
            this.reservationDatetime = reservationDatetime;
        }

        public Integer getOperationTime() {
            return operationTime;
        }

        public void setOperationTime(Integer operationTime) {
            this.operationTime = operationTime;
        }
        
    }

}
