/*
 * CashManagementPanel.java
 *
 * Created on 2013/04/07, 11:07
 */

package com.geobeck.sosia.pos.account;

import java.awt.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.data.account.*;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.account.MstCashClass;
import com.geobeck.sosia.pos.master.account.MstCashClasses;
import com.geobeck.sosia.pos.master.account.MstCashMenu;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.*;

/**
 *
 * @author  geobeck
 */
public class CashManagementPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private MstCashClasses mkcs = new MstCashClasses();
	private MstCashClass mkc = new MstCashClass();
	
	/**
	 * Creates new form CashManagementPanel
	 */
	public CashManagementPanel()
	{
            initComponents();
            addMouseCursorChange();
            this.setTitle("è¨å˚åªã‡ä«óù");
            this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ioGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        date = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel1 = new javax.swing.JLabel();
        in = new javax.swing.JRadioButton();
        out = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        cashValue = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        useFor = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel5 = new javax.swing.JLabel();
        staff = new javax.swing.JComboBox();
        todayButton = new javax.swing.JButton();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        shopLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        dateFrom = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        dateTo = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel15 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        evidenceNum = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        try {
            ConnectionWrapper con = SystemInfo.getConnection();
            mkcs.load(con);
            con.close();
        } catch(SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        cashClass = new javax.swing.JComboBox();
        cashMenu = new javax.swing.JComboBox();
        outputButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        inTotal = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel7 = new javax.swing.JLabel();
        outTotal = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        beforeTotal = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        balanceTotal = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel13 = new javax.swing.JLabel();
        allScrollPane = new javax.swing.JScrollPane();
        ioTable = new javax.swing.JTable();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        date.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        date.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ì˙ït");

        ioGroup.add(in);
        in.setSelected(true);
        in.setText("ì¸ã‡");
        in.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        in.setMargin(new java.awt.Insets(0, 0, 0, 0));
        in.setOpaque(false);

        ioGroup.add(out);
        out.setText("èoã‡");
        out.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        out.setMargin(new java.awt.Insets(0, 0, 0, 0));
        out.setOpaque(false);

        jLabel2.setText("ã‡äz");

        cashValue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cashValue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel3.setText("â~");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("ópìr");

        useFor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("íSìñé“");

        staff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        todayButton.setIcon(SystemInfo.getImageIcon("/button/common/today_off.jpg"));
        todayButton.setBorderPainted(false);
        todayButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/today_on.jpg"));
        todayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todayButtonActionPerformed(evt);
            }
        });

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        shopLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel.setText("ìXï‹");

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setFocusable(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        clearButton.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg"));
        clearButton.setBorderPainted(false);
        clearButton.setFocusable(false);
        clearButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg"));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("ëŒè€ä˙ä‘");

        dateFrom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        dateTo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        dateTo.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Å`");

        searchButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
        searchButton.setBorderPainted(false);
        searchButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        evidenceNum.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("èÿúﬂèëî‘çÜ");

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("è¨å˚çÄñ⁄");

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("è¨å˚è⁄ç◊");

        cashClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cashClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashClassActionPerformed(evt);
            }
        });

        cashMenu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        outputButton.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        outputButton.setBorderPainted(false);
        outputButton.setFocusCycleRoot(true);
        outputButton.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        outputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(shopLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(todayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(shop, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(299, 299, 299)
                                    .addComponent(evidenceNum, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(dateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel15)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(dateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(outputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(323, 323, 323))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(in, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(out, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cashValue, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cashMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cashClass, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(useFor, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(renewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(staff, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {shop, staff});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(outputButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shopLabel)
                            .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dateFrom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                                .addComponent(dateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(todayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(evidenceNum, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(in)
                            .addComponent(out)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(cashValue, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(cashClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(cashMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(staff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(useFor, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(renewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("MS UI Gothic", 0, 24));
        jLabel6.setText("ì¸ã‡");

        inTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        inTotal.setEditable(false);
        inTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        inTotal.setFont(new java.awt.Font("MS UI Gothic", 0, 24));

        jLabel7.setFont(new java.awt.Font("MS UI Gothic", 0, 24));
        jLabel7.setText("â~");

        outTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        outTotal.setEditable(false);
        outTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        outTotal.setFont(new java.awt.Font("MS UI Gothic", 0, 24));

        jLabel9.setFont(new java.awt.Font("MS UI Gothic", 0, 24));
        jLabel9.setText("èoã‡");

        jLabel8.setFont(new java.awt.Font("MS UI Gothic", 0, 24));
        jLabel8.setText("â~");

        jLabel10.setFont(new java.awt.Font("MS UI Gothic", 0, 24));
        jLabel10.setText("åJâzã‡");

        beforeTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        beforeTotal.setEditable(false);
        beforeTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        beforeTotal.setFont(new java.awt.Font("MS UI Gothic", 0, 24));

        jLabel11.setFont(new java.awt.Font("MS UI Gothic", 0, 24));
        jLabel11.setText("â~");

        jLabel12.setFont(new java.awt.Font("MS UI Gothic", 0, 24));
        jLabel12.setText("ç∑à¯ã‡äz");

        balanceTotal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        balanceTotal.setEditable(false);
        balanceTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        balanceTotal.setFont(new java.awt.Font("MS UI Gothic", 0, 24));

        jLabel13.setFont(new java.awt.Font("MS UI Gothic", 0, 24));
        jLabel13.setText("â~");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(beforeTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(balanceTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(beforeTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12)
                    .addComponent(balanceTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(outTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6)
                    .addComponent(inTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)))
        );

        allScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        ioTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "èÿúﬂèëî‘çÜ", "ì˙ït", "íSìñé“", "ì¸ã‡", "èoã‡", "è¨å˚çÄñ⁄", "è¨å˚è⁄ç◊", "ópìr"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ioTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        ioTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ioTable.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(ioTable, SystemInfo.getTableHeaderRenderer());
        ioTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        SelectTableCellRenderer.setSelectTableCellRenderer(ioTable);
        ioTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ioTableMouseReleased(evt);
            }
        });
        ioTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ioTableKeyReleased(evt);
            }
        });
        allScrollPane.setViewportView(ioTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(allScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void ioTableMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_ioTableMouseReleased
	{//GEN-HEADEREND:event_ioTableMouseReleased
		this.selectData(ioTable);
	}//GEN-LAST:event_ioTableMouseReleased

	private void ioTableKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_ioTableKeyReleased
	{//GEN-HEADEREND:event_ioTableKeyReleased
		this.selectData(ioTable);
	}//GEN-LAST:event_ioTableKeyReleased

	private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonActionPerformed
	{//GEN-HEADEREND:event_clearButtonActionPerformed
		this.clear();
	}//GEN-LAST:event_clearButtonActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		this.regist(false);
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
		this.regist(true);
	}//GEN-LAST:event_addButtonActionPerformed

	private void shopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopActionPerformed
	{//GEN-HEADEREND:event_shopActionPerformed
		this.showData();
	}//GEN-LAST:event_shopActionPerformed

	private void todayButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_todayButtonActionPerformed
	{//GEN-HEADEREND:event_todayButtonActionPerformed
		date.setDate(new java.util.Date());
	}//GEN-LAST:event_todayButtonActionPerformed

        private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
                this.showData();
        }//GEN-LAST:event_searchButtonActionPerformed

        private void cashClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashClassActionPerformed

            cashMenu.removeAllItems();
            if (0 < cashClass.getSelectedIndex()) {
                mkc = (MstCashClass) cashClass.getSelectedItem();

                //è¨å˚è⁄ç◊ÇÉfÅ[É^ÉxÅ[ÉXÇ©ÇÁì«Ç›çûÇﬁ
                try {
                    ConnectionWrapper con = SystemInfo.getConnection();
                    mkc.loadCashMenu(con);
                    cashMenu.addItem(null);
                    for(MstCashMenu mkd : mkc) {
                        cashMenu.addItem(mkd);
                    }
                } catch (SQLException e) {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                }
            }
            cashMenu.repaint();

        }//GEN-LAST:event_cashClassActionPerformed

        private void outputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputButtonActionPerformed

            outputButton.setCursor(null);

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                print();

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }

        }//GEN-LAST:event_outputButtonActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JScrollPane allScrollPane;
    private com.geobeck.swing.JFormattedTextFieldEx balanceTotal;
    private com.geobeck.swing.JFormattedTextFieldEx beforeTotal;
    private javax.swing.JComboBox cashClass;
    private javax.swing.JComboBox cashMenu;
    private com.geobeck.swing.JFormattedTextFieldEx cashValue;
    private javax.swing.JButton clearButton;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo date;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo dateFrom;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo dateTo;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx evidenceNum;
    private javax.swing.JRadioButton in;
    private com.geobeck.swing.JFormattedTextFieldEx inTotal;
    private javax.swing.ButtonGroup ioGroup;
    private javax.swing.JTable ioTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton out;
    private com.geobeck.swing.JFormattedTextFieldEx outTotal;
    private javax.swing.JButton outputButton;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton searchButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JComboBox staff;
    private javax.swing.JButton todayButton;
    private com.geobeck.swing.JFormattedTextFieldEx useFor;
    // End of variables declaration//GEN-END:variables
	
    private CashManagement rcio = null;
    private DataCashManagement currentData = null;
    /**
     * ÉåÉWì¸èoã‡âÊñ ópFocusTraversalPolicy
     */
    private RegisterCashIOFocusTraversalPolicy ftp =
            new RegisterCashIOFocusTraversalPolicy();

    /**
     * ì¸èoã‡âÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
     * @return ì¸èoã‡âÊñ ópFocusTraversalPolicy
     */
    public RegisterCashIOFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    /**
     * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(searchButton);
        SystemInfo.addMouseCursorChange(todayButton);
        SystemInfo.addMouseCursorChange(addButton);
        SystemInfo.addMouseCursorChange(renewButton);
        SystemInfo.addMouseCursorChange(deleteButton);
        SystemInfo.addMouseCursorChange(clearButton);
    }

    private void init() {
        rcio = new CashManagement();
        this.setSize(833, 691);
        SystemInfo.initGroupShopComponents(shop, 2);
        staff.addItem(new MstStaff());
        SystemInfo.initStaffComponent(staff);
        this.setListener();
        ioTable.getColumnModel().getColumn(7).setPreferredWidth(300);

        Calendar cal = Calendar.getInstance();
        cal.setTime(SystemInfo.getCurrentShop().getSystemDate().getTime());
        cal.set(Calendar.DAY_OF_MONTH, 1);
        dateFrom.setDate(cal.getTime());
        
        cashClass.addItem(null);
        for (MstCashClass mcs : mkcs) {
            cashClass.addItem(mcs);
        }

    }

    private void setListener() {
        shop.addKeyListener(SystemInfo.getMoveNextField());
        dateFrom.addKeyListener(SystemInfo.getMoveNextField());
        dateTo.addKeyListener(SystemInfo.getMoveNextField());
        date.addKeyListener(SystemInfo.getMoveNextField());
        in.addKeyListener(SystemInfo.getMoveNextField());
        out.addKeyListener(SystemInfo.getMoveNextField());
        cashValue.addKeyListener(SystemInfo.getMoveNextField());
        cashValue.addFocusListener(SystemInfo.getSelectText());
        staff.addKeyListener(SystemInfo.getMoveNextField());
        evidenceNum.addKeyListener(SystemInfo.getMoveNextField());
        evidenceNum.addFocusListener(SystemInfo.getSelectText());
        useFor.addKeyListener(SystemInfo.getMoveNextField());
        useFor.addFocusListener(SystemInfo.getSelectText());
    }

    private MstShop getSelectedShop() {
        if (0 <= shop.getSelectedIndex()) {
            return (MstShop) shop.getSelectedItem();
        } else {
            return null;
        }
    }

    private GregorianCalendar getSelectedDate() {
        if (date.isSelected()) {
            GregorianCalendar temp = new GregorianCalendar();
            temp.setTime(date.getDate());
            return temp;
        } else {
            return null;
        }
    }

    private GregorianCalendar getSelectedDateFrom() {
        if (dateFrom.isSelected()) {
            GregorianCalendar temp = new GregorianCalendar();
            temp.setTime(dateFrom.getDate());
            return temp;
        } else {
            return null;
        }
    }

    private GregorianCalendar getSelectedDateTo() {
        if (dateTo.isSelected()) {
            GregorianCalendar temp = new GregorianCalendar();
            temp.setTime(dateTo.getDate());
            return temp;
        } else {
            return null;
        }
    }

    private Integer getInputValue() {
        if (!cashValue.getText().equals("")) {
            return Integer.parseInt(cashValue.getText());
        }

        return 0;
    }

    private MstStaff getSelectedStaff() {
        if (0 <= staff.getSelectedIndex()) {
            return (MstStaff) staff.getSelectedItem();
        } else {
            return null;
        }
    }

    private void clear() {
        currentData = new DataCashManagement();
        in.setSelected(true);
        cashValue.setText("");
        if (0 < staff.getItemCount()) {
            staff.setSelectedIndex(0);
        }
        evidenceNum.setText("");
        useFor.setText("");

        if (cashClass.getItemCount() > 0) {
            cashClass.setSelectedIndex(0);
        }

        this.changeButtonEnabled();

        ioTable.clearSelection();
    }

    private void changeButtonEnabled() {
        boolean enabled = (currentData != null && currentData.getManagementId() != null && 0 < currentData.getManagementId());
        renewButton.setEnabled(enabled);
        deleteButton.setEnabled(enabled);
    }

    private void showData() {
        rcio.setShop(this.getSelectedShop());
        rcio.setDateFrom(this.getSelectedDateFrom());
        rcio.setDateTo(this.getSelectedDateTo());

        this.clear();
        rcio.load();

        this.showTableData(ioTable);

        beforeTotal.setText(rcio.getBeforeTotal().toString());
        inTotal.setText(rcio.getInTotal().toString());
        outTotal.setText(rcio.getOutTotal().toString());
        balanceTotal.setText(rcio.getBalanceTotal().toString());

    }

    private void showTableData(JTable table) {
        SwingUtil.clearTable(table);

        DefaultTableModel model = (DefaultTableModel) table.getModel();

        for (DataCashManagement dcm : rcio) {

            Object[] rowData =
            {
                dcm.getEvidenceNum(),
                String.format("%1$tY/%1$tm/%1$td", dcm.getManagementDate()),
                dcm.getStaff().getFullStaffName(),
                dcm.isIn() ? dcm.getValue() : null,
                dcm.isIn() ? null : dcm.getValue(),
                dcm.getCashClassName(),
                dcm.getCashMenuName(),
                dcm
            };

            model.addRow(rowData);
        }
    }
	
    private void selectData(JTable table) {
        if (0 <= table.getSelectedRow()) {
            currentData = (DataCashManagement) table.getValueAt(
                    table.getSelectedRow(), table.getColumnCount() - 1);

            this.showCurrentData();
        }

        this.changeButtonEnabled();
    }

    private void showCurrentData() {
        if (currentData.isIn()) {
            in.setSelected(true);
        } else {
            out.setSelected(true);
        }

        date.setDate(currentData.getManagementTime());
        cashValue.setText(currentData.getValue().toString());
        if (currentData.getStaff().getStaffNo() != null) {
            staff.setSelectedItem(currentData.getStaff());
        } else {
            staff.setSelectedIndex(0);
        }
        evidenceNum.setText(currentData.getEvidenceNum());
        useFor.setText(currentData.getUseFor());

        cashClass.setSelectedIndex(0);
        for (int i = 1 ; i < cashClass.getItemCount(); i++) {
            if (((MstCashClass)cashClass.getItemAt(i)).getCashClassId().equals(currentData.getCashClassId())) {
                cashClass.setSelectedIndex(i);
                break;
            }
        }
        for (int i = 1 ; i < cashMenu.getItemCount(); i++) {
            if (((MstCashMenu)cashMenu.getItemAt(i)).getCashMenuId().equals(currentData.getCashMenuId())) {
                cashMenu.setSelectedIndex(i);
                break;
            }
        }
    }

    private void regist(boolean isAdd) {
        if (!this.checkInput()) {
            return;
        }

        this.setData();

        if (isAdd) {
            currentData.setManagementId(null);
        }

        try {
            ConnectionWrapper con = SystemInfo.getConnection();

            try {
                con.begin();

                if (currentData.regist(con)) {
                    con.commit();
                    this.showData();
                } else {
                    con.rollback();
                }
            } catch (SQLException e) {
                con.rollback();
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }

    private boolean checkInput() {
        if (this.getSelectedShop() == null) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED, "ìXï‹"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (this.getSelectedDate() == null) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED, "ì˙ït"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (this.getInputValue() == 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "ã‡äz"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }
	
    private void setData() {
        if (currentData == null) {
            currentData = new DataCashManagement();
        }

        currentData.setShop(this.getSelectedShop());
        currentData.setManagementDate(this.getSelectedDate());
        currentData.setIn(in.isSelected());
        currentData.setValue(this.getInputValue());
        currentData.setStaff(this.getSelectedStaff());
        currentData.setEvidenceNum(evidenceNum.getText());
        currentData.setUseFor(useFor.getText());
        currentData.setCashClass((MstCashClass)cashClass.getSelectedItem());
        currentData.setCashMenu((MstCashMenu)cashMenu.getSelectedItem());
    }
	
    private void delete() {
        if (currentData == null) {
            return;
        }

        try {
            ConnectionWrapper con = SystemInfo.getConnection();

            try {
                con.begin();

                if (currentData.delete(con)) {
                    con.commit();
                    this.showData();
                } else {
                    con.rollback();
                }
            } catch (SQLException e) {
                con.rollback();
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }
	
	
    /**
     * CashManagementPanelópFocusTraversalPolicy
     */
    private class RegisterCashIOFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
         * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(shop)) {
                return dateFrom;
            }else if (aComponent.equals(dateFrom)) {
                return dateTo;
            }else if (aComponent.equals(dateTo)) {
                return date;
            } else if (aComponent.equals(date)) {
                return this.getSelectedIO();
            } else if (aComponent.equals(in)) {
                return cashValue;
            } else if (aComponent.equals(out)) {
                return cashValue;
            } else if (aComponent.equals(cashValue)) {
                return evidenceNum;
            } else if (aComponent.equals(evidenceNum)) {
                return cashClass;
            } else if (aComponent.equals(cashClass)) {
                return cashMenu;
            } else if (aComponent.equals(cashMenu)) {
                return staff;
            } else if (aComponent.equals(staff)) {
                return useFor;
            } else if (aComponent.equals(useFor)) {
                return this.getCurrentComponent();
            }

            return this.getCurrentComponent();
        }

        /**
         * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
         * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(shop)) {
                return useFor;
            } else if (aComponent.equals(dateFrom)) {
                if (shop.getItemCount() == 1) {
                    return useFor;
                } else {
                    return shop;
                }
            } else if (aComponent.equals(dateTo)) {
                 return dateFrom;
            } else if (aComponent.equals(date)) {
                 return dateTo;
            } else if (aComponent.equals(in)) {
                return date;
            } else if (aComponent.equals(out)) {
                return date;
            } else if (aComponent.equals(cashValue)) {
                return this.getSelectedIO();
             } else if (aComponent.equals(evidenceNum)) {
                return cashValue;
             } else if (aComponent.equals(cashClass)) {
                return evidenceNum;
             } else if (aComponent.equals(cashMenu)) {
                return cashClass;
            } else if (aComponent.equals(staff)) {
                return cashMenu;
            } else if (aComponent.equals(useFor)) {
                return staff;
            }

            return this.getCurrentComponent();
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
         * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         * @param aContainer êÊì™ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getFirstComponent(Container aContainer) {
            return this.getCurrentComponent();
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
         * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         * @param aContainer aContainer - ç≈å„ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getLastComponent(Container aContainer) {
            return useFor;
        }

        /**
         * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         * aContainer ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
         * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getDefaultComponent(Container aContainer) {
            return this.getCurrentComponent();
        }

        /**
         * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         * show() Ç‹ÇΩÇÕ setVisible(true) ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA
         * èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
         * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA
         * Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
         * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
         * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
         * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
         */
        public Component getInitialComponent(Window window) {
            return this.getCurrentComponent();
        }

        private Component getCurrentComponent() {
            if (shop.getItemCount() == 1) {
                return dateFrom;
            } else {
                return shop;
            }
        }

        private Component getSelectedIO() {
            if (in.isSelected()) {
                return in;
            } else {
                return out;
            }
        }
    }

    /**
     * EXCELèoóÕÇçsÇ§
     */
    private void print()
    {
        rcio.setShop(this.getSelectedShop());
        rcio.setDateFrom(this.getSelectedDateFrom());
        rcio.setDateTo(this.getSelectedDateTo());

        this.clear();
        rcio.load();

        if ( 0 < rcio.size() ) {

            String shopName = "";
            if (shop.getSelectedItem() instanceof MstGroup) {
                //ÉOÉãÅ[Év
                MstGroup mg = (MstGroup)shop.getSelectedItem();
                shopName = mg.getGroupName();
            } else if(shop.getSelectedItem() instanceof MstShop) {
                //ìXï‹
                MstShop ms = (MstShop)shop.getSelectedItem();
                shopName = ms.getShopName();
            }

            JExcelApi jx = new JExcelApi("è¨å˚åªã‡ä«óù");
            jx.setTemplateFile("/report/è¨å˚åªã‡ä«óù.xls");

            // ÉwÉbÉ_
            jx.setValue(2, 3, shopName);
            jx.setValue(2, 4, String.format( "%1$tY/%1$tm/%1$td", dateFrom.getDate()) + " Å` " + String.format( "%1$tY/%1$tm/%1$td", dateTo.getDate()));
            jx.setValue(2, 10, rcio.getBeforeTotal());

            int row = 7;

            // í«â¡çsêîÉZÉbÉg
            jx.insertRow(row, rcio.size() - 2);

            for (DataCashManagement dcm : rcio) {
                jx.setValue(1, row, dcm.getEvidenceNum());
                jx.setValue(2, row, String.format("%1$tY/%1$tm/%1$td", dcm.getManagementDate()));
                jx.setValue(3, row, dcm.getStaff().getFullStaffName());
                jx.setValue(4, row, dcm.isIn() ? dcm.getValue() : "");
                jx.setValue(5, row, dcm.isIn() ? "" : dcm.getValue());
                jx.setValue(6, row, dcm.getCashClassName());
                jx.setValue(7, row, dcm.getCashMenuName());
                jx.setValue(8, row, dcm.toString());

                row++;
            }

            jx.openWorkbook();
        }
        else
        {
            MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(1112),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
        }
    }

}
