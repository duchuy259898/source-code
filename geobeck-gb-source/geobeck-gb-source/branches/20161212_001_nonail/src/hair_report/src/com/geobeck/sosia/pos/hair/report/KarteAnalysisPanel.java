/*
 * ReappearancePredictionPanel.java
 *
 * Created on 2010/03/05, 12:00
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.util.SQLUtil;
import java.awt.*;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.*;
import javax.swing.*;
import com.geobeck.swing.*;
import javax.swing.table.DefaultTableModel;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.hair.customer.MstCustomerPanel;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.hair.mail.*;
import com.geobeck.sosia.pos.mail.*;
import java.text.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.hair.report.util.*;
import javax.swing.text.JTextComponent;
import javax.swing.text.PlainDocument;
import org.apache.commons.lang.math.NumberUtils;

/**
 *
 * @author  geobeck
 */
public class KarteAnalysisPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx implements SelectMailAddressDialogOpener
{
	private Integer selectedAddress = -1;
        private ArrayList<MstCustomer> resultList = new ArrayList<MstCustomer>();
        private Calendar calStart = null;
        private Calendar calEnd = null;
        
        /** Creates new form StaffShopRankingPanel */
	public KarteAnalysisPanel()
	{
            initComponents();
            addMouseCursorChange();
            this.setSize(820,680);
            this.setPath("帳票出力");
            this.setTitle("サイクル分析");
            this.setKeyListener();

            this.initTableColumnWidth();

            this.initChargeStaff();

            // 顧客共有の有無によりグループ表示を切り替える
            if (SystemInfo.getSetteing().isShareCustomer()) {
                SystemInfo.initGroupShopComponents(shop, 3);
            } else {
                SystemInfo.initGroupShopComponents(shop, 2);
            }

            //初期化処理
            this.init();
            
            this.setChkValidLabel();

            // メール作成ボタン表示設定
            this.mailButton.setVisible(SystemInfo.checkAuthority(53));
            // 宛名ラベル作成ボタン表示設定
            this.sealButton.setVisible(SystemInfo.checkAuthority(55));
            // ハガキ作成ボタン表示設定
            this.postcardButton.setVisible(SystemInfo.checkAuthority(54));
            
	}
        
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
            SystemInfo.addMouseCursorChange(btnOutput);
            SystemInfo.addMouseCursorChange(mailButton);
            SystemInfo.addMouseCursorChange(sealButton);
            SystemInfo.addMouseCursorChange(postcardButton);
            SystemInfo.addMouseCursorChange(searchButton);
            SystemInfo.addMouseCursorChange(selectAllButton);
            SystemInfo.addMouseCursorChange(releaseAllButton);
            SystemInfo.addMouseCursorChange(setPeriodButton);
	}
        
    	public void setSelectedAddress(Integer selectedAddress)
	{
            this.selectedAddress = selectedAddress;
	}
	    
	/**
	 * 主担当を取得する
	 */
	private void initChargeStaff()
	{
	    chargeStaff.removeAllItems();

	    MstStaffs staffs = new MstStaffs();

	    staffs.setShopIDList(SystemInfo.getCurrentShop().getShopID().toString());

	    try
	    {
		staffs.load(SystemInfo.getConnection(), true);
	    }
	    catch(java.sql.SQLException e)
	    {
		//SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }

	    for (MstStaff ms : staffs) {
		chargeStaff.addItem(ms);
	    }

	    chargeStaff.setSelectedIndex(0);
	}	
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        customerGroup = new javax.swing.ButtonGroup();
        comingCycleGroup = new javax.swing.ButtonGroup();
        customerCategoryGroup = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        postcardButton = new javax.swing.JButton();
        sealButton = new javax.swing.JButton();
        mailButton = new javax.swing.JButton();
        btnOutput = new javax.swing.JButton();
        releaseAllButton = new javax.swing.JButton();
        selectAllButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        chargeStaffLabel = new javax.swing.JLabel();
        chargeStaffNo = new javax.swing.JTextField();
        chargeStaff = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        rdoValid = new javax.swing.JRadioButton();
        rdoInvalid = new javax.swing.JRadioButton();
        lblTargetDate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        chkValid1 = new javax.swing.JCheckBox();
        chkValid2 = new javax.swing.JCheckBox();
        chkValid3 = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        endMonth = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        startMonth = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        setPeriodButton = new javax.swing.JButton();
        startYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
            startYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));

    endYear = new javax.swing.JComboBox();
    ((PlainDocument)((JTextComponent)
        endYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
    new CustomFilter(4, CustomFilter.NUMBER));

    jScrollPane1 = new javax.swing.JScrollPane();
    customersTable = new com.geobeck.swing.JTableEx();
    jScrollPane2 = new javax.swing.JScrollPane();
    totalTable = new com.geobeck.swing.JTableEx();

    setFocusCycleRoot(true);
    setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.setLayout(null);

    pnlMain.setFocusCycleRoot(true);
    pnlMain.setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.setOpaque(false);
    postcardButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_off.jpg"));
    postcardButton.setBorderPainted(false);
    postcardButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_on.jpg"));
    postcardButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            postcardButtonActionPerformed(evt);
        }
    });

    pnlMain.add(postcardButton);
    postcardButton.setBounds(710, 0, 92, 25);

    sealButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_seal_off.jpg"));
    sealButton.setBorderPainted(false);
    sealButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_seal_on.jpg"));
    sealButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            sealButtonActionPerformed(evt);
        }
    });

    pnlMain.add(sealButton);
    sealButton.setBounds(610, 0, 92, 25);

    mailButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_mail_off.jpg"));
    mailButton.setBorderPainted(false);
    mailButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_mail_on.jpg"));
    mailButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            mailButtonActionPerformed(evt);
        }
    });

    pnlMain.add(mailButton);
    mailButton.setBounds(510, 0, 92, 25);

    btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnOutput.setBorderPainted(false);
    btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnOutput.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOutputActionPerformed(evt);
        }
    });

    pnlMain.add(btnOutput);
    btnOutput.setBounds(410, 0, 92, 25);

    releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/select/release_all_off.jpg"));
    releaseAllButton.setBorderPainted(false);
    releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/release_all_on.jpg"));
    releaseAllButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            releaseAllButtonActionPerformed(evt);
        }
    });

    pnlMain.add(releaseAllButton);
    releaseAllButton.setBounds(710, 125, 92, 25);

    selectAllButton.setIcon(SystemInfo.getImageIcon("/button/select/select_all_off.jpg"));
    selectAllButton.setBorderPainted(false);
    selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_all_on.jpg"));
    selectAllButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            selectAllButtonActionPerformed(evt);
        }
    });

    pnlMain.add(selectAllButton);
    selectAllButton.setBounds(610, 125, 92, 25);

    searchButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
    searchButton.setBorderPainted(false);
    searchButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
    searchButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchButtonActionPerformed(evt);
        }
    });

    pnlMain.add(searchButton);
    searchButton.setBounds(410, 125, 92, 25);

    shopLabel.setText("\u5e97\u8217");
    pnlMain.add(shopLabel);
    shopLabel.setBounds(0, 10, 80, 22);

    shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    shop.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            shopActionPerformed(evt);
        }
    });

    pnlMain.add(shop);
    shop.setBounds(70, 10, 210, 22);

    chargeStaffLabel.setText("\u4e3b\u62c5\u5f53\u8005");
    pnlMain.add(chargeStaffLabel);
    chargeStaffLabel.setBounds(0, 40, 80, 25);

    chargeStaffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    chargeStaffNo.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            chargeStaffNoFocusLost(evt);
        }
    });

    pnlMain.add(chargeStaffNo);
    chargeStaffNo.setBounds(70, 40, 40, 25);

    chargeStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    chargeStaff.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            chargeStaffActionPerformed(evt);
        }
    });

    pnlMain.add(chargeStaff);
    chargeStaff.setBounds(120, 40, 160, 24);

    jLabel2.setText("\u5bfe\u8c61\u9867\u5ba2");
    pnlMain.add(jLabel2);
    jLabel2.setBounds(0, 75, 80, 20);

    customerGroup.add(rdoValid);
    rdoValid.setSelected(true);
    rdoValid.setText("\u6709\u52b9\u9867\u5ba2");
    rdoValid.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoValid.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoValid.setOpaque(false);
    rdoValid.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdoValidActionPerformed(evt);
        }
    });

    pnlMain.add(rdoValid);
    rdoValid.setBounds(70, 75, 70, 20);

    customerGroup.add(rdoInvalid);
    rdoInvalid.setText("\u5931\u5ba2\uff08\u5bfe\u8c61\u671f\u9593\u306b\u6765\u5e97\u304c\u3042\u308a\u73fe\u5728\u307e\u3067\u6765\u5e97\u306e\u306a\u3044\u9867\u5ba2\uff09");
    rdoInvalid.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoInvalid.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoInvalid.setOpaque(false);
    rdoInvalid.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdoInvalidActionPerformed(evt);
        }
    });

    pnlMain.add(rdoInvalid);
    rdoInvalid.setBounds(70, 95, 300, 20);

    lblTargetDate.setText("\u5bfe\u8c61\u671f\u9593");
    lblTargetDate.setFocusCycleRoot(true);
    lblTargetDate.setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.add(lblTargetDate);
    lblTargetDate.setBounds(0, 127, 80, 22);

    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("\uff5e");
    jLabel1.setFocusCycleRoot(true);
    jLabel1.setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.add(jLabel1);
    jLabel1.setBounds(210, 127, 20, 22);

    chkValid1.setSelected(true);
    chkValid1.setText("\u7a3c\u50cd\u5ba2\uff084\u30f6\u6708\u4ee5\u5185\uff09");
    chkValid1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    chkValid1.setMargin(new java.awt.Insets(0, 0, 0, 0));
    chkValid1.setOpaque(false);
    pnlMain.add(chkValid1);
    chkValid1.setBounds(160, 75, 130, 20);

    chkValid2.setSelected(true);
    chkValid2.setText("\u73fe\u5f79\u5ba2\uff084\uff5e6\u30f6\u6708\uff09");
    chkValid2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    chkValid2.setMargin(new java.awt.Insets(0, 0, 0, 0));
    chkValid2.setOpaque(false);
    pnlMain.add(chkValid2);
    chkValid2.setBounds(290, 75, 130, 20);

    chkValid3.setSelected(true);
    chkValid3.setText("\u96e2\u5e97\u5ba2\uff086\u30f6\u6708\u4ee5\u4e0a\uff09");
    chkValid3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    chkValid3.setMargin(new java.awt.Insets(0, 0, 0, 0));
    chkValid3.setOpaque(false);
    pnlMain.add(chkValid3);
    chkValid3.setBounds(420, 75, 130, 20);

    jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel5.setText("\u5e74");
    pnlMain.add(jLabel5);
    jLabel5.setBounds(130, 127, 20, 22);

    endMonth.setMaximumRowCount(12);
    endMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    endMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    pnlMain.add(endMonth);
    endMonth.setBounds(310, 127, 40, 22);

    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel6.setText("\u6708");
    pnlMain.add(jLabel6);
    jLabel6.setBounds(190, 127, 20, 22);

    jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel7.setText("\u5e74");
    pnlMain.add(jLabel7);
    jLabel7.setBounds(290, 127, 20, 22);

    startMonth.setMaximumRowCount(12);
    startMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    startMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    pnlMain.add(startMonth);
    startMonth.setBounds(150, 127, 40, 22);

    jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel8.setText("\u6708");
    pnlMain.add(jLabel8);
    jLabel8.setBounds(350, 127, 20, 22);

    setPeriodButton.setIcon(SystemInfo.getImageIcon("/button/common/period_set_off.jpg"));
    setPeriodButton.setBorderPainted(false);
    setPeriodButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/period_set_on.jpg"));
    setPeriodButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            setPeriodButtonActionPerformed(evt);
        }
    });

    pnlMain.add(setPeriodButton);
    setPeriodButton.setBounds(560, 72, 92, 25);

    startYear.setEditable(true);
    startYear.setMaximumRowCount(12);
    startYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    pnlMain.add(startYear);
    startYear.setBounds(70, 127, 60, 22);

    endYear.setEditable(true);
    endYear.setMaximumRowCount(12);
    endYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    pnlMain.add(endYear);
    endYear.setBounds(230, 127, 60, 22);

    customersTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "<html><p>顧客<br>情報</p></html>", "顧客No.", "氏名", "前回来店日", "主担当者", "指名", "<html>&nbsp;期間内<br>来店回数</html>", "来店周期", "売上金額", "平均単価", "<html>メール<br>&nbsp;有無 </html>", "<html>送信<br>対象</html>"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
        };
        boolean[] canEdit = new boolean [] {
            true, false, false, false, false, false, false, false, false, false, false, true
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    customersTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
    customersTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
    customersTable.getTableHeader().setReorderingAllowed(false);

    jScrollPane1.setViewportView(customersTable);

    jScrollPane2.setBorder(null);
    totalTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null}
        },
        new String [] {
            "カルテ枚数", "平均来店周期", "売上金額", "客単価"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    totalTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
    totalTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
    totalTable.getTableHeader().setReorderingAllowed(false);

    jScrollPane2.setViewportView(totalTable);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
                .add(org.jdesktop.layout.GroupLayout.LEADING, pnlMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
                .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                    .add(352, 352, 352)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 154, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    }// </editor-fold>//GEN-END:initComponents

    private void setPeriodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPeriodButtonActionPerformed

        ValidCustomerUpdatePeriodPanel p = new ValidCustomerUpdatePeriodPanel();
        SwingUtil.openAnchorDialog(null, true, p, "有効顧客　期間設定", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER);
        p = null;
        System.gc();

        this.setChkValidLabel();

    }//GEN-LAST:event_setPeriodButtonActionPerformed

    private void rdoInvalidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoInvalidActionPerformed
        customersTable.getTableHeader().getColumnModel().getColumn(6).setHeaderValue("<html>&nbsp;&nbsp;&nbsp;累計<br>来店回数</html>");
        customersTable.getTableHeader().getColumnModel().getColumn(8).setHeaderValue("<html>&nbsp;&nbsp;&nbsp;累計<br>売上金額</html>");
        this.setChkValidEnabled(false);
    }//GEN-LAST:event_rdoInvalidActionPerformed

    private void rdoValidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoValidActionPerformed
        customersTable.getTableHeader().getColumnModel().getColumn(6).setHeaderValue("<html>&nbsp;期間内<br>来店回数</html>");
        customersTable.getTableHeader().getColumnModel().getColumn(8).setHeaderValue("売上金額");
        this.setChkValidEnabled(true);
    }//GEN-LAST:event_rdoValidActionPerformed

    private void setChkValidEnabled(boolean isEnabled) {
        chkValid1.setEnabled(isEnabled);
        chkValid2.setEnabled(isEnabled);
        chkValid3.setEnabled(isEnabled);
    }
    
    private void changeSelect(boolean select){
        
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
        
        for (int i = 0; i < model.getRowCount(); i++) {
            
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(11) != null){
                row.add(11, select);
            }
        }
    }
    
    private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseAllButtonActionPerformed
        this.changeSelect(false);
    }//GEN-LAST:event_releaseAllButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed
        this.changeSelect(true);
    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void postcardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postcardButtonActionPerformed
        this.printPostcard();
    }//GEN-LAST:event_postcardButtonActionPerformed

    private void sealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sealButtonActionPerformed
        this.createSeal();
    }//GEN-LAST:event_sealButtonActionPerformed

    private void mailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailButtonActionPerformed
        this.sendMail();
    }//GEN-LAST:event_mailButtonActionPerformed

    private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed

        if (!checkInput()) return;
        
        btnOutput.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            this.print();
            
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

    }//GEN-LAST:event_btnOutputActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        if (!checkInput()) return;
        
        searchButton.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            this.search();
            
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void chargeStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargeStaffActionPerformed

	MstStaff ms= (MstStaff)chargeStaff.getSelectedItem();
        
        if (ms != null) {
            if (ms.getStaffID() != null) {
		chargeStaffNo.setText(ms.getStaffNo());
	    }

	    if (chargeStaff.getSelectedIndex() == 0) {
                chargeStaffNo.setText("");
            }
        }
    }//GEN-LAST:event_chargeStaffActionPerformed

    private void chargeStaffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chargeStaffNoFocusLost

	if (!chargeStaffNo.getText().equals("")) {
            this.setChargeStaff(chargeStaffNo.getText());
        }else{
            chargeStaff.setSelectedIndex(0);
        }
    }//GEN-LAST:event_chargeStaffNoFocusLost

    private boolean checkDuplicateCustomer(ArrayList<MstCustomer> selectedArray, MstCustomer customer){
        for(MstCustomer mc : selectedArray){
            if(mc.getCustomerID().intValue() == customer.getCustomerID().intValue()){
                return true;
            }
        }
        return false;
    }
    
    private void printPostcard() {
	
	DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();
      
        for (int i = 0; i < model.getRowCount(); i++) {
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if (row.get(11) != null && (Boolean)row.get(11)) {
		
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if (this.checkDuplicateCustomer(selectedArray, mc)) {
                    continue;
                }
                
                // 住所がなかっても飛ばす
                if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
		    continue;
                }
                
                selectedArray.add(mc);
            }
            
        }
        
        if(selectedArray.size() == 0){
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        PrintPostcardPanel ppp = new PrintPostcardPanel(selectedArray);
	ppp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, ppp, "ハガキ作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private void createSeal(){
	
        // 宛名ラベル印刷をクリック
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();
      
        for (int i = 0; i < model.getRowCount(); i++) {
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(11) != null && (Boolean)row.get(11)){
		
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if(this.checkDuplicateCustomer(selectedArray, mc)){
                    continue;
                }
                
                // 住所がなかっても飛ばす
                if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
		    continue;
                }
                
                selectedArray.add(mc);
            }
            
        }
        
        if(selectedArray.size() == 0){
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        PrintLabelPanel plp = new PrintLabelPanel(selectedArray);
	plp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, plp, "宛名ラベル作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private void sendMail(){
	
        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();

	DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
      
        for(int i = 0; i < model.getRowCount(); i++){
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(11) != null && (Boolean)row.get(11)){
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if (this.checkDuplicateCustomer(selectedArray, mc)) continue;
		
		selectedArray.add(mc);
            }
        }

        if (selectedArray.size() == 0) {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        HairCommonMailPanel rcmp = new HairCommonMailPanel(this.shop.getSelectedItem(), selectedArray);
	rcmp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, rcmp, "メール作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private Date getStartDate(Date date){
        
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        
        return cal.getTime();
    }
    
    private Date getEndDate(Date date){
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);
        
        return cal.getTime();
    }
    
    private void search(){
        
        resultList.clear();
        
        if (customersTable.getCellEditor() != null) customersTable.getCellEditor().stopCellEditing();

	SwingUtil.clearTable(customersTable);
        
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<HashMap> result = this.searchKarte();
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

        BigDecimal bd = null;
        
        long totalValue = 0;
        double totalVisitCycle = 0;
        
        for(HashMap row : result){

            bd = new BigDecimal((Double)row.get("visit_cycle"));
            
            Object[] rowData =
            {
                getUserSearchButton((Integer)row.get("customer_id")),
                row.get("customer_no"),
                row.get("customer_name"),
                sdf.format((Date)row.get("sales_date")),
                row.get("staff_name"),
                ((Boolean)row.get("designated_flag") ? "●" : ""),
                row.get("visit_num"),
                rdoValid.isSelected() ? bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue() + " ヶ月" : "-",
                row.get("value"),
                row.get("avg_value"),
                ((Boolean)row.get("mailaddress_enable") ? "●" : ""),
                true
            };
            
            totalValue += ((Long)row.get("value")).longValue();
            totalVisitCycle += bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue();
            
            resultList.add((MstCustomer)row.get("mc"));
            model.addRow(rowData);
        }
        
        SwingUtil.clearTable(totalTable);

        DefaultTableModel totalModel = (DefaultTableModel)totalTable.getModel();

        double avgVisitCycle = 0;
        long unitPrice = 0;
        
        if (result.size() > 0) {
            if (rdoValid.isSelected()) {
                bd = new BigDecimal(totalVisitCycle / result.size());
                avgVisitCycle = bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue();
            }
            
            unitPrice = Double.valueOf(Math.floor(totalValue / result.size())).longValue();
        }
        
        totalModel.addRow(
            new Object[]
                {
                    result.size(),
                    rdoValid.isSelected() ? avgVisitCycle + " ヶ月" : "-",
                    totalValue,
                    unitPrice
                });            
        
        if (result.size() == 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1112),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void print(){
        
        ReportParameterBean paramBean = new ReportParameterBean();
        
        ArrayList<HashMap> result = this.searchKarte(paramBean);
        
        // 出力対象データが0件の場合
        if (result.size() == 0) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }       
        
        JExcelApi jx = new JExcelApi("サイクル分析");
        jx.setTemplateFile("/reports/サイクル分析.xls");

        // ヘッダ
        jx.setValue(2, 3, paramBean.getTargetName());
        jx.setValue(2, 4, paramBean.getStaffName());

        String targetCustomer = "";
        if (rdoValid.isSelected()) {
            if (chkValid1.isSelected()) targetCustomer += chkValid1.getText() + "　";
            if (chkValid2.isSelected()) targetCustomer += chkValid2.getText() + "　";
            if (chkValid3.isSelected()) targetCustomer += chkValid3.getText() + "　";
        } else {
            targetCustomer = rdoInvalid.getText();
            jx.setValue(2, 6, lblTargetDate.getText() + " ： ");
            jx.setValue(6, 11, "累計\n来店回数");
            jx.setValue(8, 11, "累計\n売上金額");
        }
        jx.setValue(2, 5, targetCustomer);
        jx.setValue(2, 6, startYear.getSelectedItem().toString() + "年" + (startMonth.getSelectedIndex() + 1) + "月 〜 " + endYear.getSelectedItem().toString() + "年" + (endMonth.getSelectedIndex() + 1) + "月");
        
        int row = 12;

        // 追加行数セット
        jx.insertRow(row, result.size() - 1);

        BigDecimal bd = null;
        double totalVisitCycle = 0;
        
        // データセット
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        for (HashMap map : result){
            
            MstCustomer mc = (MstCustomer)map.get("mc");
            
            jx.setValue(1, row, map.get("customer_no"));
            jx.setValue(2, row, map.get("customer_name"));
            jx.setValue(3, row, sdf.format((Date)map.get("sales_date")));
            jx.setValue(4, row, map.get("staff_name"));
            jx.setValue(5, row, ((Boolean)map.get("designated_flag")) ? "●" : "");
            jx.setValue(6, row, map.get("visit_num"));
            
            bd = new BigDecimal((Double)map.get("visit_cycle"));
            jx.setValue(7, row, rdoValid.isSelected() ? bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue() + " ヶ月" : "-");
            jx.setValue(8, row, map.get("value"));
            jx.setValue(9, row, Long.parseLong(map.get("avg_value").toString()));
            jx.setValue(10, row, ((Boolean)map.get("mailaddress_enable")) ? "●" : "");
            
            totalVisitCycle += bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue();
            
            row++;
        }

        jx.removeRow(row);
        
        double avgVisitCycle = 0;
        if (result.size() > 0) {
            if (rdoValid.isSelected()) {
                bd = new BigDecimal(totalVisitCycle / result.size());
                avgVisitCycle = bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue();
            }
        }
        
        jx.setValue(2, 9, rdoValid.isSelected() ? avgVisitCycle + " ヶ月" : "-");
        
        jx.openWorkbook();

    }
    
    /**
     * 主担当者をセットする。
     */
    private void setChargeStaff(String staffNo)
    {     
	chargeStaff.setSelectedIndex(0);

	for (int i = 1; i < chargeStaff.getItemCount(); i++) {
	    if (((MstStaff)chargeStaff.getItemAt(i)).getStaffNo().equals(staffNo)) {
		chargeStaff.setSelectedIndex(i);
		break;
	    }
	}
    }
    
    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed

    }//GEN-LAST:event_shopActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutput;
    private javax.swing.JComboBox chargeStaff;
    private javax.swing.JLabel chargeStaffLabel;
    private javax.swing.JTextField chargeStaffNo;
    private javax.swing.JCheckBox chkValid1;
    private javax.swing.JCheckBox chkValid2;
    private javax.swing.JCheckBox chkValid3;
    private javax.swing.ButtonGroup comingCycleGroup;
    private javax.swing.ButtonGroup customerCategoryGroup;
    private javax.swing.ButtonGroup customerGroup;
    private com.geobeck.swing.JTableEx customersTable;
    private javax.swing.JComboBox endMonth;
    private javax.swing.JComboBox endYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTargetDate;
    private javax.swing.JButton mailButton;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JButton postcardButton;
    private javax.swing.JRadioButton rdoInvalid;
    private javax.swing.JRadioButton rdoValid;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton sealButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JButton setPeriodButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JComboBox startMonth;
    private javax.swing.JComboBox startYear;
    private com.geobeck.swing.JTableEx totalTable;
    // End of variables declaration//GEN-END:variables
	
	private void setKeyListener()
	{
            startYear.addKeyListener(SystemInfo.getMoveNextField());
            startYear.addFocusListener(SystemInfo.getSelectText());
            endYear.addKeyListener(SystemInfo.getMoveNextField());
            endYear.addFocusListener(SystemInfo.getSelectText());

            startMonth.addKeyListener(SystemInfo.getMoveNextField());
            endMonth.addKeyListener(SystemInfo.getMoveNextField());
	}
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
            SwingUtil.setJTableHeaderRenderer(customersTable, SystemInfo.getTableHeaderRenderer());
            this.customersTable.setDefaultRenderer(Object.class, new TableCellRenderer());
            
            SwingUtil.setJTableHeaderRenderer(totalTable, SystemInfo.getTableHeaderRenderer());
            this.totalTable.setDefaultRenderer(Object.class, new TableCellRenderer());
            
            totalTable.setRowHeight(30);

            Calendar cal = Calendar.getInstance();
            int nowYear = cal.get(Calendar.YEAR);
            int nowMonth = cal.get(Calendar.MONTH); 
            
            initYearCombo(startYear, nowYear - 1);
            if (nowMonth < 11) {
                this.startMonth.setSelectedIndex(nowMonth + 1);
            }else {
                this.startMonth.setSelectedIndex(0);
            }
            
            initYearCombo(endYear, nowYear);
            this.endMonth.setSelectedIndex(nowMonth);
        }
        
        private void setChkValidLabel() {
            
            MstShopSetting mss = MstShopSetting.getInstance();
            
            String s1 = mss.getValidCustomerPeriod1().toString();
            String s2 = mss.getValidCustomerPeriod2().toString();

            this.chkValid1.setText("稼働客（" + s1 + "ヶ月以内）");
            this.chkValid2.setText("現役客（" + s1 + "〜" + s2 + "ヶ月）");
            this.chkValid3.setText("離店客（" + s2 + "ヶ月以上）");
        }
        
	/**
	 * 動向分析テーブル用のTableCellRenderer
	 */
	public class TableCellRenderer extends SelectTableCellRenderer
	{
            /** Creates a new instance of TableCellRenderer */
            public TableCellRenderer()
            {
                super();
            }

            
            /**
             * テーブルセルレンダリングを返します。
             * @param table JTable
             * @param value セルに割り当てる値
             * @param isSelected セルが選択されている場合は true
             * @param hasFocus フォーカスがある場合は true
             * @param row 行
             * @param column 列
             * @return テーブルセルレンダリング
             */
            public Component getTableCellRendererComponent(
                JTable table,
                Object value, 
                boolean isSelected,
                boolean hasFocus,
                int row, int column)
            { 

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                if (table.equals(customersTable)) {

                    switch(column)
                    {
                        case 8:
                        case 9:
                                super.setHorizontalAlignment(SwingConstants.RIGHT);
                                break;
                        default:
                                super.setHorizontalAlignment(SwingConstants.CENTER);
                                break;
                    }

                } else {

                    switch(column)
                    {
                        case 1:
                                super.setHorizontalAlignment(SwingConstants.CENTER);
                                break;
                        default:
                                super.setHorizontalAlignment(SwingConstants.RIGHT);
                                break;
                    }

                }
                
                return this; 
            } 

	
        }
        
        /**
         * ユーザ検索ボタンを取得する
         */
        private JButton getUserSearchButton(final Integer customerID)
        {
                JButton		searchButton	=	new JButton();
                searchButton.setBorderPainted(false);
                searchButton.setContentAreaFilled(false);
                searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
                searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
                searchButton.setSize(48, 25);
                searchButton.addActionListener(new java.awt.event.ActionListener()
                {
                        public void actionPerformed(java.awt.event.ActionEvent evt)
                        {
                            DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

                            MstCustomerPanel mcp = null;

                            try {

                                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                                mcp = new MstCustomerPanel(customerID, true, true);
                                SwingUtil.openAnchorDialog( parentFrame, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );

                            } finally {
                                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            }
                            
                            mcp = null;
                        }
                });
                return searchButton;
        }   

        /**
         * JTableの列幅を初期化する。
         */
        private void initTableColumnWidth()
        {
            //列の幅を設定する
            customersTable.getColumnModel().getColumn(0).setPreferredWidth(60);        //ボタン
            customersTable.getColumnModel().getColumn(1).setPreferredWidth(60);        //顧客番号
            customersTable.getColumnModel().getColumn(2).setPreferredWidth(100);       //氏名
            customersTable.getColumnModel().getColumn(3).setPreferredWidth(80);        //前回来店日
            customersTable.getColumnModel().getColumn(4).setPreferredWidth(80);        //担当者
            customersTable.getColumnModel().getColumn(5).setPreferredWidth(35);        //指名
            customersTable.getColumnModel().getColumn(6).setPreferredWidth(70);        //来店回数
            customersTable.getColumnModel().getColumn(7).setPreferredWidth(70);        //来店周期
            customersTable.getColumnModel().getColumn(8).setPreferredWidth(70);        //売上金額
            customersTable.getColumnModel().getColumn(9).setPreferredWidth(70);        //平均単価
            customersTable.getColumnModel().getColumn(10).setPreferredWidth(40);       //メールアドレス有無
            customersTable.getColumnModel().getColumn(11).setPreferredWidth(40);       // 送信対象

        }       

        private ArrayList<HashMap> searchKarte(){
            return this.searchKarte(null);
        }
        
        private ArrayList<HashMap> searchKarte(ReportParameterBean paramBean){
            
            if (paramBean == null) {
                paramBean = new ReportParameterBean();
            }
            
            //グループ
            if(shop.getSelectedItem() instanceof MstGroup)
            {
                MstGroup mg = (MstGroup)shop.getSelectedItem();
                paramBean.setTargetName(mg.getGroupName());
                paramBean.setShopIDList(mg.getShopIDListAll());
            }
            //店舗
            else if(shop.getSelectedItem() instanceof MstShop)
            {
                MstShop ms = (MstShop)shop.getSelectedItem();
                paramBean.setTargetName(ms.getShopName());
                paramBean.setShopIDList(ms.getShopID().toString());
            }

            // 主担当
            if (chargeStaff.getSelectedIndex() > 0) {
                MstStaff ms = (MstStaff)this.chargeStaff.getSelectedItem();
                paramBean.setStaffId(ms.getStaffID());
                paramBean.setStaffName(ms.getFullStaffName());
            } else {
                paramBean.setStaffId(null);
                paramBean.setStaffName("");
            }
            
            calStart = Calendar.getInstance();
            calStart.set(Calendar.YEAR, Integer.parseInt(startYear.getSelectedItem().toString()));
            calStart.set(Calendar.MONTH, startMonth.getSelectedIndex());
            calStart.set(Calendar.DAY_OF_MONTH, 1);
            
            calEnd = Calendar.getInstance();
            calEnd.set(Calendar.YEAR, Integer.parseInt(endYear.getSelectedItem().toString()));
            calEnd.set(Calendar.MONTH, endMonth.getSelectedIndex());
            calEnd.set(Calendar.DAY_OF_MONTH, 1);
            calEnd.add(Calendar.MONTH, 1);
            calEnd.add(Calendar.DAY_OF_MONTH, -1);
            
            // 開始日
            paramBean.setTargetStartDateObj(calStart.getTime());
            // 終了日
            paramBean.setTargetEndDateObj(calEnd.getTime());
            
            String sql = null;
            if (rdoValid.isSelected()) {
                sql = getValidSQL(paramBean);
            } else {
                sql = getInValidSQL(paramBean);
            }
	    
	    ArrayList<HashMap> list = new ArrayList<HashMap>();

            ConnectionWrapper con = SystemInfo.getConnection();
	    
            try {
                ResultSetWrapper rs = con.executeQuery(sql);
                
                while(rs.next()){

                    HashMap row = new HashMap();

                    MstCustomer mc = new MstCustomer();
                    mc.setCustomerID(rs.getInt("customer_id"));
                    mc.setCustomerNo(rs.getString("customer_no"));
                    mc.setCustomerName(new String[]{rs.getString("customer_name1"), rs.getString("customer_name2")});
                    mc.setPCMailAddress(rs.getString("pc_mail_address"));
                    mc.setCellularMailAddress(rs.getString("cellular_mail_address"));
                    mc.setPostalCode(rs.getString("postal_code"));
                    mc.setAddress(new String[]{rs.getString("address1"), rs.getString("address2"), rs.getString("address3"), rs.getString("address4")});
                    
                    row.put("mc", mc);
                    row.put("customer_id", rs.getInt("customer_id"));
                    row.put("customer_no", rs.getString("customer_no"));
                    row.put("customer_name",   rs.getString("customer_name1") + "　" + rs.getString("customer_name2"));
                    row.put("sales_date", rs.getDate("sales_date"));
                    row.put("staff_name", rs.getString("staff_name"));
                    row.put("designated_flag", rs.getBoolean("designated_flag"));
                    row.put("visit_num", rs.getLong("visit_num"));
                    row.put("visit_cycle", rs.getDouble("visit_cycle"));
                    row.put("value", rs.getLong("value"));
                    row.put("avg_value", rs.getLong("avg_value"));
                    row.put("mailaddress_enable",(
                                                    (rs.getString("pc_mail_address") != null && !rs.getString("pc_mail_address").equals("")) 
                                                    ||
                                                    (rs.getString("cellular_mail_address") != null && !rs.getString("cellular_mail_address").equals(""))
                                                   )
                            );
                    list.add(row);
                }
            } catch(SQLException e) {
                e.printStackTrace();
            }
            return list;
        }

        private String getValidSQL(ReportParameterBean paramBean) {
            
            String startDate = SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
            String endDate = SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());

            StringBuilder sql = new StringBuilder(1000);

            sql.append(" select");
            sql.append("      mc.customer_id");
            sql.append("     ,mc.customer_no");
            sql.append("     ,mc.customer_name1");
            sql.append("     ,mc.customer_name2");
            sql.append("     ,mc.pc_mail_address");
            sql.append("     ,mc.cellular_mail_address");
            sql.append("     ,mc.postal_code");
            sql.append("     ,mc.address1");
            sql.append("     ,mc.address2");
            sql.append("     ,mc.address3");
            sql.append("     ,mc.address4");
            sql.append("     ,ds.sales_date");
            sql.append("     ,ds.staff_name");
            sql.append("     ,ds.designated_flag");
            sql.append("     ,ds.visit_num");
            
            // 来店周期
            sql.append("     ,ds.visit_cycle");
            
            sql.append("     ,ds.value");
            sql.append("     ,floor(ds.value / visit_num) as avg_value");
            sql.append(" from");
            sql.append("     (");
            sql.append("         select");
            sql.append("              customer_id");
            sql.append("             ,count(*) as visit_num");
            sql.append("             ," + getMonthsBetween(calStart, calEnd) + " / count(*) as visit_cycle");
            sql.append("             ,sum(discount_sales_value_in_tax) as value");
            sql.append("             ,max(a.sales_date) as sales_date");
            sql.append("             ,(");
            sql.append("                 select");
            sql.append("                     staff_id");
            sql.append("                 from");
            sql.append("                     data_sales left join mst_staff using(staff_id)");
            sql.append("                 where");
            sql.append("                         customer_id = a.customer_id");
            sql.append("                     and data_sales.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and data_sales.sales_date = max(a.sales_date)");
            sql.append("                     and data_sales.delete_date is null");
            sql.append("                 order by");
            sql.append("                      data_sales.insert_date desc");
            sql.append("                     ,data_sales.slip_no desc");
            sql.append("                 limit 1");
            sql.append("              ) as staff_id");
            sql.append("             ,(");
            sql.append("                 select");
            sql.append("                     staff_name1 || '　' || staff_name2");
            sql.append("                 from");
            sql.append("                     data_sales left join mst_staff using(staff_id)");
            sql.append("                 where");
            sql.append("                         customer_id = a.customer_id");
            sql.append("                     and data_sales.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and data_sales.sales_date = max(a.sales_date)");
            sql.append("                     and data_sales.delete_date is null");
            sql.append("                 order by");
            sql.append("                      data_sales.insert_date desc");
            sql.append("                     ,data_sales.slip_no desc");
            sql.append("                 limit 1");
            sql.append("              ) as staff_name");
            sql.append("             ,(");
            sql.append("                 select");
            sql.append("                     designated_flag");
            sql.append("                 from");
            sql.append("                     data_sales");
            sql.append("                 where");
            sql.append("                         customer_id = a.customer_id");
            sql.append("                     and shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and sales_date = max(a.sales_date)");
            sql.append("                     and delete_date is null");
            sql.append("                 order by");
            sql.append("                      insert_date desc");
            sql.append("                     ,slip_no desc");
            sql.append("                 limit 1");
            sql.append("              ) as designated_flag");
            sql.append("         from");
            sql.append("             view_data_sales_valid a");
            sql.append("         where");
            sql.append("                 shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("             and sales_date between " + startDate + " and " + endDate);
            sql.append("         group by");
            sql.append("             customer_id");
            sql.append("     ) ds");
            sql.append("     join mst_customer mc");
            sql.append("         using(customer_id)");
            
            sql.append(" where");
            sql.append("     (");
            sql.append("         false");
            
            
            MstShopSetting mss = MstShopSetting.getInstance();
            
            if (chkValid1.isSelected()) {
                sql.append("     or ds.visit_cycle <= " + mss.getValidCustomerPeriod1());
            }

            if (chkValid2.isSelected()) {
                sql.append("     or ds.visit_cycle between " + (mss.getValidCustomerPeriod1() + 0.1) + " and " + mss.getValidCustomerPeriod2());
            }

            if (chkValid3.isSelected()) {
                sql.append("     or ds.visit_cycle >= " + (mss.getValidCustomerPeriod2() + 0.1));
            }
            sql.append("     )");

            sql.append("     and mc.customer_no <> '0'");
            
            if (paramBean.getStaffId() != null) {
                sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
            }
            
            return sql.toString();
        }
        
        private String getInValidSQL(ReportParameterBean paramBean) {
            
            String startDate = SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
            String endDate = SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());

            StringBuilder sql = new StringBuilder(1000);

            sql.append(" select");
            sql.append("      mc.customer_id");
            sql.append("     ,mc.customer_no");
            sql.append("     ,mc.customer_name1");
            sql.append("     ,mc.customer_name2");
            sql.append("     ,mc.pc_mail_address");
            sql.append("     ,mc.cellular_mail_address");
            sql.append("     ,mc.postal_code");
            sql.append("     ,mc.address1");
            sql.append("     ,mc.address2");
            sql.append("     ,mc.address3");
            sql.append("     ,mc.address4");
            sql.append("     ,ds.sales_date");
            sql.append("     ,ds.staff_name");
            sql.append("     ,ds.designated_flag");
            sql.append("     ,ds.visit_num");
            
            // 来店周期
            sql.append("     ,0 as visit_cycle");
            
            sql.append("     ,ds.value");
            sql.append("     ,floor(ds.value / ds.visit_num) as avg_value");
            sql.append(" from");
            sql.append("     (");
            sql.append("         select");
            sql.append("              customer_id");
            sql.append("             ,count(*) as visit_num");
            sql.append("             ,sum(discount_sales_value_in_tax) as value");
            sql.append("             ,max(a.sales_date) as sales_date");
            sql.append("             ,(");
            sql.append("                 select");
            sql.append("                     staff_id");
            sql.append("                 from");
            sql.append("                     data_sales left join mst_staff using(staff_id)");
            sql.append("                 where");
            sql.append("                         customer_id = a.customer_id");
            sql.append("                     and data_sales.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and data_sales.sales_date = max(a.sales_date)");
            sql.append("                     and data_sales.delete_date is null");
            sql.append("                 order by");
            sql.append("                      data_sales.insert_date desc");
            sql.append("                     ,data_sales.slip_no desc");
            sql.append("                 limit 1");
            sql.append("              ) as staff_id");
            sql.append("             ,(");
            sql.append("                 select");
            sql.append("                     staff_name1 || '　' || staff_name2");
            sql.append("                 from");
            sql.append("                     data_sales left join mst_staff using(staff_id)");
            sql.append("                 where");
            sql.append("                         customer_id = a.customer_id");
            sql.append("                     and data_sales.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and data_sales.sales_date = max(a.sales_date)");
            sql.append("                     and data_sales.delete_date is null");
            sql.append("                 order by");
            sql.append("                      data_sales.insert_date desc");
            sql.append("                     ,data_sales.slip_no desc");
            sql.append("                 limit 1");
            sql.append("              ) as staff_name");
            sql.append("             ,(");
            sql.append("                 select");
            sql.append("                     designated_flag");
            sql.append("                 from");
            sql.append("                     data_sales");
            sql.append("                 where");
            sql.append("                         customer_id = a.customer_id");
            sql.append("                     and shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and sales_date = max(a.sales_date)");
            sql.append("                     and delete_date is null");
            sql.append("                 order by");
            sql.append("                      insert_date desc");
            sql.append("                     ,slip_no desc");
            sql.append("                 limit 1");
            sql.append("              ) as designated_flag");
            sql.append("         from");
            sql.append("             view_data_sales_valid a");
            sql.append("         where");
            sql.append("                 shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("             and sales_date <= " + endDate);
            sql.append("             and customer_id in");
            sql.append("                 (");
            sql.append("                     select distinct");
            sql.append("                          customer_id");
            sql.append("                     from");
            sql.append("                         data_sales");
            sql.append("                     where");
            sql.append("                             delete_date IS NULL");
            sql.append("                         and shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     group by");
            sql.append("                         customer_id");
            sql.append("                     having");
            sql.append("                         max(sales_date) between " + startDate + " and " + endDate);
            sql.append("                 )");
            sql.append("         group by");
            sql.append("             customer_id");
            sql.append("     ) ds");
            sql.append("     join mst_customer mc");
            sql.append("         using(customer_id)");

            sql.append(" where");
            sql.append("         mc.customer_no <> '0'");
            
            if (paramBean.getStaffId() != null) {
                sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
            }
            
            return sql.toString();
        }
        
        /**
         * 入力チェックを行う。
         * @return true - OK
         */
        private boolean checkInput()
        {
            boolean result = true;

            if (rdoValid.isSelected()) {
                boolean isChecked = false;
                isChecked = isChecked || chkValid1.isSelected();
                isChecked = isChecked || chkValid2.isSelected();
                isChecked = isChecked || chkValid3.isSelected();
                if (!isChecked) {
                    MessageDialog.showMessageDialog(
                        this,
                        "有効顧客のいずれかをチェックしてください。",
                        this.getTitle(),
                        JOptionPane.WARNING_MESSAGE);

                    result = false;
                }
            }

            NumberUtils numUtil = new NumberUtils();
            if(!numUtil.isNumber(this.startYear.getSelectedItem().toString())) {
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "開始年"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                this.startYear.requestFocusInWindow();
                return false;
            }
        
            if(!numUtil.isNumber(this.endYear.getSelectedItem().toString())) {
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "終了年"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                this.endYear.requestFocusInWindow();
                return false;
            }
            
            return result;
        }

        private int getMonthsBetween(Calendar fromDate, Calendar toDate) {

            int dt1 = (fromDate.get(Calendar.YEAR) * 12) + fromDate.get(Calendar.MONTH);
            int dt2 = (toDate.get(Calendar.YEAR) * 12) + toDate.get(Calendar.MONTH);

            return dt2 - dt1 + 1 ;
        }

        private void initYearCombo(final JComboBox cmb, int nowYear) {

            cmb.removeAllItems();

            int y = Calendar.getInstance().get(Calendar.YEAR);
            for (int i = 0; i < 5; i++) {
                cmb.addItem(String.valueOf(y - i));
            }
            cmb.setSelectedItem(nowYear);
            cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusGained(java.awt.event.FocusEvent evt) {
                    ((JTextField)cmb.getEditor().getEditorComponent()).selectAll();
                }
            });
        }
        
}
