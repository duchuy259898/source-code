/*
 * SalesReportPanel.java
 *
 * Created on 2006/10/19, 11:07
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.basicinfo.company.MstShopPanel;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.text.*;
import org.apache.commons.lang.math.NumberUtils;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.sosia.pos.products.Product;
import com.geobeck.sosia.pos.products.ProductClass;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author  katagiri
 */
public class SalesReportPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	private MstStaffs	staffs	=	null;
	
	/** Creates new form SalesReportPanel */
	public SalesReportPanel()
	{
		initComponents();
		addMouseCursorChange();
		this.setSize(690, 464);
		this.setPath("í†ï[èoóÕ");
		this.setTitle("îÑè„èWåv");
		this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        reportTypeGroup = new javax.swing.ButtonGroup();
        taxGroup = new javax.swing.ButtonGroup();
        dateTypeGroup = new javax.swing.ButtonGroup();
        rdoMonthShift = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        targetLabel = new javax.swing.JLabel();
        lblTax = new javax.swing.JLabel();
        rdoTaxBlank = new javax.swing.JRadioButton();
        rdoTaxUnit = new javax.swing.JRadioButton();
        lblStaff = new javax.swing.JLabel();
        staff = new javax.swing.JComboBox();
        pnlDayShift = new javax.swing.JPanel();
        lblDayWay = new javax.swing.JLabel();
        rdoDayWay = new javax.swing.JRadioButton();
        rdoMonthWay = new javax.swing.JRadioButton();
        lblMonthWay = new javax.swing.JLabel();
        cmbDayWayStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        cmbDayWayEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        cmbDayWayMonth = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbDayWayYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
            cmbDayWayYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));
    checkOutDate = new javax.swing.JCheckBox();
    pnlMonthShift = new javax.swing.JPanel();
    jLabel9 = new javax.swing.JLabel();
    cmbMonthWayStartMonth = new javax.swing.JComboBox();
    cmbMonthWayEndMonth = new javax.swing.JComboBox();
    jLabel5 = new javax.swing.JLabel();
    jLabel6 = new javax.swing.JLabel();
    jLabel7 = new javax.swing.JLabel();
    jLabel10 = new javax.swing.JLabel();
    jLabel11 = new javax.swing.JLabel();
    cmbMonthWayStartYear = new javax.swing.JComboBox();
    ((PlainDocument)((JTextComponent)
        cmbMonthWayStartYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
    new CustomFilter(4, CustomFilter.NUMBER));
    cmbMonthWayEndYear = new javax.swing.JComboBox();
    ((PlainDocument)((JTextComponent)
        cmbMonthWayEndYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
    new CustomFilter(4, CustomFilter.NUMBER));
    target = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
    jPanel2 = new javax.swing.JPanel();
    btnRight = new javax.swing.JButton();
    btnRightAll = new javax.swing.JButton();
    btnLeft = new javax.swing.JButton();
    btnLeftAll = new javax.swing.JButton();
    categoryRightScrollPane = new javax.swing.JScrollPane();
    categoryRightTable = new javax.swing.JTable();
    categoryLeftScrollPane = new javax.swing.JScrollPane();
    categoryLeftTable = new javax.swing.JTable();
    lblCategory = new javax.swing.JLabel();
    rdoDayShift = new javax.swing.JRadioButton();
    btnOutput = new javax.swing.JButton();

    setFocusCycleRoot(true);

    reportTypeGroup.add(rdoMonthShift);
    rdoMonthShift.setText("åééüêÑà⁄");
    rdoMonthShift.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoMonthShift.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoMonthShift.setOpaque(false);
    rdoMonthShift.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rdoMonthShiftStateChanged(evt);
        }
    });

    jPanel1.setOpaque(false);

    targetLabel.setText("ëŒè€");

    lblTax.setText("ê≈ãÊï™");

    taxGroup.add(rdoTaxBlank);
    rdoTaxBlank.setText("ê≈î≤");
    rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoTaxBlank.setOpaque(false);

    taxGroup.add(rdoTaxUnit);
    rdoTaxUnit.setSelected(true);
    rdoTaxUnit.setText("ê≈çû");
    rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoTaxUnit.setOpaque(false);

    lblStaff.setText("éÂíSìñé“");

    staff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    staff.setVerifyInputWhenFocusTarget(false);

    pnlDayShift.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ì˙éüêÑà⁄", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS UI Gothic", 1, 12))); // NOI18N
    pnlDayShift.setOpaque(false);

    lblDayWay.setText("ì˙êîï˚éÆ");

    dateTypeGroup.add(rdoDayWay);
    rdoDayWay.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoDayWay.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoDayWay.setOpaque(false);
    rdoDayWay.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rdoDayWayStateChanged(evt);
        }
    });
    rdoDayWay.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdoDayWayActionPerformed(evt);
        }
    });

    dateTypeGroup.add(rdoMonthWay);
    rdoMonthWay.setSelected(true);
    rdoMonthWay.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoMonthWay.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoMonthWay.setOpaque(false);
    rdoMonthWay.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rdoMonthWayStateChanged(evt);
        }
    });
    rdoMonthWay.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            rdoMonthWayActionPerformed(evt);
        }
    });

    lblMonthWay.setText("åéï˚éÆ");

    cmbDayWayStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbDayWayStartDate.setMinimumSize(new java.awt.Dimension(67, 20));
    cmbDayWayStartDate.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            cmbDayWayStartDateFocusGained(evt);
        }
    });

    cmbDayWayEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbDayWayEndDate.setMinimumSize(new java.awt.Dimension(67, 20));
    cmbDayWayEndDate.setPreferredSize(new java.awt.Dimension(87, 30));
    cmbDayWayEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            cmbDayWayEndDateFocusGained(evt);
        }
    });

    cmbDayWayMonth.setMaximumRowCount(12);
    cmbDayWayMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    cmbDayWayMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    jLabel2.setText("îN");

    jLabel3.setText("åé");

    jLabel4.setText("Å`");

    cmbDayWayYear.setEditable(true);
    cmbDayWayYear.setMaximumRowCount(12);
    cmbDayWayYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    checkOutDate.setText("âcã∆ì˙à»äOÇ‡èoóÕÇ…ä‹ÇﬂÇÈ");
    checkOutDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    checkOutDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
    checkOutDate.setOpaque(false);

    org.jdesktop.layout.GroupLayout pnlDayShiftLayout = new org.jdesktop.layout.GroupLayout(pnlDayShift);
    pnlDayShift.setLayout(pnlDayShiftLayout);
    pnlDayShiftLayout.setHorizontalGroup(
        pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(pnlDayShiftLayout.createSequentialGroup()
            .addContainerGap()
            .add(pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(lblMonthWay)
                .add(lblDayWay))
            .add(13, 13, 13)
            .add(pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(checkOutDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(pnlDayShiftLayout.createSequentialGroup()
            .add(pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(rdoMonthWay)
                .add(rdoDayWay))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(pnlDayShiftLayout.createSequentialGroup()
                    .add(cmbDayWayYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jLabel2)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(cmbDayWayMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jLabel3))
                .add(pnlDayShiftLayout.createSequentialGroup()
                    .add(cmbDayWayStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jLabel4)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(cmbDayWayEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
            .addContainerGap())
    );
    pnlDayShiftLayout.setVerticalGroup(
        pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlDayShiftLayout.createSequentialGroup()
            .add(pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(cmbDayWayStartDate, 0, 0, Short.MAX_VALUE)
                .add(pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblDayWay)
                    .add(rdoDayWay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(cmbDayWayEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(pnlDayShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblMonthWay)
                .add(rdoMonthWay)
                .add(cmbDayWayYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel2)
                .add(cmbDayWayMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jLabel3))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(checkOutDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
            .addContainerGap())
    );

    pnlMonthShift.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "åééüêÑà⁄", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS UI Gothic", 1, 12))); // NOI18N
    pnlMonthShift.setOpaque(false);

    jLabel9.setText("ëŒè€ä˙ä‘");

    cmbMonthWayStartMonth.setMaximumRowCount(12);
    cmbMonthWayStartMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    cmbMonthWayStartMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    cmbMonthWayEndMonth.setMaximumRowCount(12);
    cmbMonthWayEndMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    cmbMonthWayEndMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    jLabel5.setText("îN");

    jLabel6.setText("åé");

    jLabel7.setText("Å`");

    jLabel10.setText("îN");

    jLabel11.setText("åé");

    cmbMonthWayStartYear.setEditable(true);
    cmbMonthWayStartYear.setMaximumRowCount(12);
    cmbMonthWayStartYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    cmbMonthWayEndYear.setEditable(true);
    cmbMonthWayEndYear.setMaximumRowCount(12);
    cmbMonthWayEndYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    org.jdesktop.layout.GroupLayout pnlMonthShiftLayout = new org.jdesktop.layout.GroupLayout(pnlMonthShift);
    pnlMonthShift.setLayout(pnlMonthShiftLayout);
    pnlMonthShiftLayout.setHorizontalGroup(
        pnlMonthShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlMonthShiftLayout.createSequentialGroup()
            .addContainerGap()
            .add(jLabel9)
            .add(13, 13, 13)
            .add(cmbMonthWayStartYear, 0, 60, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel5)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(cmbMonthWayStartMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel6)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel7)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(cmbMonthWayEndYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel10)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(cmbMonthWayEndMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jLabel11)
            .addContainerGap())
    );
    pnlMonthShiftLayout.setVerticalGroup(
        pnlMonthShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(pnlMonthShiftLayout.createSequentialGroup()
            .addContainerGap()
            .add(pnlMonthShiftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel9)
                .add(jLabel11)
                .add(jLabel10)
                .add(jLabel7)
                .add(jLabel6)
                .add(jLabel5)
                .add(cmbMonthWayStartMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbMonthWayEndMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbMonthWayStartYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(cmbMonthWayEndYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    target.setMaximumSize(new java.awt.Dimension(237, 19));
    target.setMinimumSize(new java.awt.Dimension(237, 19));
    target.setPreferredSize(new java.awt.Dimension(237, 19));
    target.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            targetActionPerformed(evt);
        }
    });

    jPanel2.setOpaque(false);

    btnRight.setIcon(SystemInfo.getImageIcon("/button/arrow/right_off.jpg"));
    btnRight.setBorderPainted(false);
    btnRight.setContentAreaFilled(false);
    btnRight.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right_on.jpg"));
    btnRight.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRightActionPerformed(evt);
        }
    });

    btnRightAll.setIcon(SystemInfo.getImageIcon("/button/arrow/right2_off.jpg"));
    btnRightAll.setBorderPainted(false);
    btnRightAll.setContentAreaFilled(false);
    btnRightAll.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/right2_on.jpg"));
    btnRightAll.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRightAllActionPerformed(evt);
        }
    });

    btnLeft.setIcon(SystemInfo.getImageIcon("/button/arrow/left_off.jpg"));
    btnLeft.setBorderPainted(false);
    btnLeft.setContentAreaFilled(false);
    btnLeft.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left_on.jpg"));
    btnLeft.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnLeftActionPerformed(evt);
        }
    });

    btnLeftAll.setIcon(SystemInfo.getImageIcon("/button/arrow/left2_off.jpg"));
    btnLeftAll.setBorderPainted(false);
    btnLeftAll.setContentAreaFilled(false);
    btnLeftAll.setPressedIcon(SystemInfo.getImageIcon("/button/arrow/left2_on.jpg"));
    btnLeftAll.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnLeftAllActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel2Layout.createSequentialGroup()
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel2Layout.createSequentialGroup()
                    .add(12, 12, 12)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(btnRight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(btnRightAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(btnLeftAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(btnLeft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel2Layout.createSequentialGroup()
            .add(btnRightAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(7, 7, 7)
            .add(btnRight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(btnLeft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(btnLeftAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
    );

    categoryRightTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "ã∆ë‘ñº"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    categoryRightTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
    categoryRightTable.getTableHeader().setReorderingAllowed(false);
    SwingUtil.setJTableHeaderRenderer(categoryRightTable, SystemInfo.getTableHeaderRenderer());
    categoryRightTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
    SelectTableCellRenderer.setSelectTableCellRenderer(categoryRightTable);
    TableColumnModel model = categoryRightTable.getColumnModel();
    categoryRightScrollPane.setViewportView(categoryRightTable);
    categoryRightTable.getColumnModel().getColumn(0).setMinWidth(250);

    categoryLeftTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "ã∆ë‘ñº"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    categoryLeftTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
    categoryLeftTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    categoryLeftTable.getTableHeader().setReorderingAllowed(false);
    SwingUtil.setJTableHeaderRenderer(categoryLeftTable, SystemInfo.getTableHeaderRenderer());
    categoryLeftTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
    SelectTableCellRenderer.setSelectTableCellRenderer(categoryLeftTable);
    categoryLeftScrollPane.setViewportView(categoryLeftTable);
    categoryLeftTable.getColumnModel().getColumn(0).setMinWidth(250);

    lblCategory.setText("èWåvã∆ë‘");

    org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .add(0, 0, 0)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(pnlDayShift, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(61, 61, 61)
                    .add(rdoTaxUnit)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(rdoTaxBlank))
                .add(pnlMonthShift, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, lblStaff, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, lblTax, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, targetLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(lblCategory))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(categoryLeftScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 251, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(12, 12, 12)
                            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                            .add(categoryRightScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 251, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(targetLabel)
                .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblTax)
                .add(rdoTaxUnit)
                .add(rdoTaxBlank))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(categoryRightScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 146, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(categoryLeftScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 146, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(lblCategory))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(lblStaff)
                .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(10, 10, 10)
            .add(pnlDayShift, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(20, 20, 20)
            .add(pnlMonthShift, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    reportTypeGroup.add(rdoDayShift);
    rdoDayShift.setSelected(true);
    rdoDayShift.setText("ì˙éüêÑà⁄");
    rdoDayShift.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoDayShift.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoDayShift.setOpaque(false);
    rdoDayShift.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            rdoDayShiftStateChanged(evt);
        }
    });

    btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnOutput.setBorderPainted(false);
    btnOutput.setContentAreaFilled(false);
    btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnOutput.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOutputActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
                .add(layout.createSequentialGroup()
                    .add(rdoDayShift, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(rdoMonthShift)
                    .add(198, 198, 198)
                    .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(107, 107, 107))))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(10, 10, 10)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rdoDayShift)
                    .add(rdoMonthShift)))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    }// </editor-fold>//GEN-END:initComponents

	private void cmbDayWayEndDateFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_cmbDayWayEndDateFocusGained
	{//GEN-HEADEREND:event_cmbDayWayEndDateFocusGained
		cmbDayWayEndDate.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_cmbDayWayEndDateFocusGained

	private void cmbDayWayStartDateFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_cmbDayWayStartDateFocusGained
	{//GEN-HEADEREND:event_cmbDayWayStartDateFocusGained
		cmbDayWayStartDate.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_cmbDayWayStartDateFocusGained

	private void rdoMonthWayStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_rdoMonthWayStateChanged
	{//GEN-HEADEREND:event_rdoMonthWayStateChanged
		
	}//GEN-LAST:event_rdoMonthWayStateChanged

	private void rdoMonthWayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoMonthWayActionPerformed
	{//GEN-HEADEREND:event_rdoMonthWayActionPerformed
		this.cmbDayWayYear.setEnabled(true);
		this.cmbDayWayMonth.setEnabled(true);
		this.cmbDayWayStartDate.setEnabled(false);
		this.cmbDayWayEndDate.setEnabled(false);
	}//GEN-LAST:event_rdoMonthWayActionPerformed

	private void rdoDayWayStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_rdoDayWayStateChanged
	{//GEN-HEADEREND:event_rdoDayWayStateChanged
		
	}//GEN-LAST:event_rdoDayWayStateChanged

	private void rdoDayWayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdoDayWayActionPerformed
	{//GEN-HEADEREND:event_rdoDayWayActionPerformed
		this.cmbDayWayYear.setEnabled(false);
		this.cmbDayWayMonth.setEnabled(false);
		this.cmbDayWayStartDate.setEnabled(true);
		this.cmbDayWayEndDate.setEnabled(true);
	}//GEN-LAST:event_rdoDayWayActionPerformed

	private void rdoMonthShiftStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_rdoMonthShiftStateChanged
	{//GEN-HEADEREND:event_rdoMonthShiftStateChanged
		this.cmbMonthWayStartYear.setEnabled(this.rdoMonthShift.isSelected());
		this.cmbMonthWayStartMonth.setEnabled(this.rdoMonthShift.isSelected());
		this.cmbMonthWayEndYear.setEnabled(this.rdoMonthShift.isSelected());
		this.cmbMonthWayEndMonth.setEnabled(this.rdoMonthShift.isSelected());
	}//GEN-LAST:event_rdoMonthShiftStateChanged

	private void rdoDayShiftStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_rdoDayShiftStateChanged
	{//GEN-HEADEREND:event_rdoDayShiftStateChanged
		this.rdoDayWay.setEnabled(this.rdoDayShift.isSelected());
		this.rdoMonthWay.setEnabled(this.rdoDayShift.isSelected());
		this.cmbDayWayStartDate.setEnabled(this.rdoDayShift.isSelected());
		this.cmbDayWayEndDate.setEnabled(this.rdoDayShift.isSelected());
		this.cmbDayWayYear.setEnabled(this.rdoDayShift.isSelected());
		this.cmbDayWayMonth.setEnabled(this.rdoDayShift.isSelected());
                this.checkOutDate.setEnabled(this.rdoDayShift.isSelected());
		if(this.rdoDayShift.isSelected())
		{
			this.rdoMonthWay.setEnabled(true);
			this.rdoDayWay.setEnabled(true);
			if(this.rdoDayWay.isSelected())
			{
				this.cmbDayWayYear.setEnabled(false);
				this.cmbDayWayMonth.setEnabled(false);
				this.cmbDayWayStartDate.setEnabled(true);
				this.cmbDayWayEndDate.setEnabled(true);
			}
			else if(this.rdoMonthWay.isSelected())
			{
				this.cmbDayWayYear.setEnabled(true);
				this.cmbDayWayMonth.setEnabled(true);
				this.cmbDayWayStartDate.setEnabled(false);
				this.cmbDayWayEndDate.setEnabled(false);
			}
                        this.checkOutDate.setEnabled(true);
		}
	}//GEN-LAST:event_rdoDayShiftStateChanged

	private void btnOutputActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOutputActionPerformed
	{//GEN-HEADEREND:event_btnOutputActionPerformed

            if (rdoDayShift.isSelected()) {
                if (!SystemInfo.checkAuthorityPassword(231)) return;
            }
            if (rdoMonthShift.isSelected()) {
                if (!SystemInfo.checkAuthorityPassword(232)) return;
            }

            if (rdoDayShift.isSelected() && rdoMonthWay.isSelected()) {
                if (!inputCheckYear(cmbDayWayYear, "åéï˚éÆÇÃîN")) return;
            } else if (rdoMonthShift.isSelected()) {
                if (!inputCheckYear(cmbMonthWayStartYear, "äJénîN")) return;
                if (!inputCheckYear(cmbMonthWayEndYear, "èIóπîN")) return;
            }
            
            ReportLogic logic = new ReportLogic();
            ReportParameterBean paramBean = new ReportParameterBean();
            paramBean.setMainReportType(ReportParameterBean.MAIN_REPORT_SALES);

            if (target.getSelectedItem() instanceof MstGroup) {

                //ÉOÉãÅ[Év
                MstGroup mg = (MstGroup)target.getSelectedItem();
                paramBean.setTargetName(mg.getGroupName());
                paramBean.setShopIDList(mg.getShopIDListAll());
                //IVS_LVTu start add 2015/07/09 Bug #39505
                for (MstShop shop : mg.getShops()) {
                    if (shop.getCourseFlag() == 1) {
                        paramBean.setCourseFlag(true);
                    }
                }
                //IVS_LVTu end add 2015/07/09 Bug #39505

            } else if(target.getSelectedItem() instanceof MstShop) {

                //ìXï‹
                MstShop ms = (MstShop)target.getSelectedItem();
                paramBean.setTargetName(ms.getShopName());
                paramBean.setShopIDList(ms.getShopID().toString());
                //IVS_LVTu start add 2015/07/09 Bug #39505
                if (ms.getCourseFlag() == 1) {
                    paramBean.setCourseFlag(true);
                }
                //IVS_LVTu end add 2015/07/09 Bug #39505
            }

            //ëŒè€Ç∆Ç»ÇÈìXï‹Ç™ë∂ç›ÇµÇ»Ç¢èÍçá
            if (paramBean.getShopIDList().equals("")) {
                MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (this.rdoTaxBlank.isSelected()) {
                // ê≈ãÊï™(ê≈î≤Ç´)
                paramBean.setTaxType(ReportParameterBean.TAX_TYPE_BLANK);
            } else if(this.rdoTaxUnit.isSelected()) {
                // ê≈ãÊï™(ê≈çûÇ›)
                paramBean.setTaxType(ReportParameterBean.TAX_TYPE_UNIT);
            }

            if (this.rdoDayWay.isSelected()) {
                paramBean.setDayTargetType(ReportParameterBean.TARGET_TYPE_DAY);
            } else if(this.rdoMonthWay.isSelected()) {
                paramBean.setDayTargetType(ReportParameterBean.TARGET_TYPE_MONTH);
            }

            if (0 < staff.getSelectedIndex()) {
                MstStaff ms = (MstStaff)staff.getSelectedItem();
                paramBean.setStaffId(ms.getStaffID());
                paramBean.setStaffName(ms.getFullStaffName());
            }
            paramBean.setTargetStartDate(this.cmbDayWayStartDate.getDateStr());
            paramBean.setTargetEndDate(this.cmbDayWayEndDate.getDateStr());
            paramBean.setTargetStartDateObj(this.cmbDayWayStartDate.getDate());
            paramBean.setTargetEndDateObj(this.cmbDayWayEndDate.getDate());
            paramBean.setMonthTargetYear(this.cmbDayWayYear.getSelectedItem().toString());
            paramBean.setMonthTargetMonth((String)this.cmbDayWayMonth.getSelectedItem());
            paramBean.setTargetStartYear(this.cmbMonthWayStartYear.getSelectedItem().toString());
            paramBean.setTargetStartMonth((String)this.cmbMonthWayStartMonth.getSelectedItem());
            paramBean.setTargetEndYear(this.cmbMonthWayEndYear.getSelectedItem().toString());
            paramBean.setTargetEndMonth((String)this.cmbMonthWayEndMonth.getSelectedItem());
            
            //IVS_TTMLoan  start add 2014/07/28 Mashu_îÑè„êÑà⁄ï\
            String categoryIDList = "";
            String categoryNameList = "";
            if (listRightCategory.size() > 0) {
                for (int i = 0; i < listRightCategory.size(); i++) {
                    categoryIDList += listRightCategory.get(i).getShopCategoryId() ;
                    categoryNameList += listRightCategory.get(i).getShopClassName();
                    if (i != listRightCategory.size() - 1) {
                        categoryIDList +=   ",";
                        categoryNameList += "ÅA";
                    }
                }
            }
            paramBean.setCategoryIDList(categoryIDList);
            paramBean.setCategoryNameList(categoryNameList);
            paramBean.setUseShopCategory(useShopCategory);
           //IVS_TTMLoan  end add 2014/07/28 Mashu_îÑè„êÑà⁄ï\
            
            boolean logicResult = false;

            // ã∆ñ±ïÒçê
            try {

                if (0 < staff.getSelectedIndex()) {
                    MstStaff ms = (MstStaff)staff.getSelectedItem();
                    paramBean.setStaffId(ms.getStaffID());
                    paramBean.setStaffName(ms.getFullStaffName());
                }

                if (this.rdoDayShift.isSelected()) {

                    // ì˙éü
                    Calendar start = Calendar.getInstance();
                    Calendar end = Calendar.getInstance();

                    if (this.rdoDayWay.isSelected()) {
                        int[] startAry = this.cmbDayWayStartDate.getDate_IntArray();
                        int[] endAry = this.cmbDayWayEndDate.getDate_IntArray();
                        start.set(startAry[0], startAry[1] - 1, startAry[2]);
                        end.set(endAry[0], endAry[1] - 1, endAry[2]);

                        if (start.compareTo(end) != 0 && start.after(end)) {
                            MessageDialog.showMessageDialog(
                                this,
                                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "ëŒè€ä˙ä‘"),
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    if ( this.checkOutDate.isSelected()) {
                        paramBean.setCheckOutDate(true);
                    }

                } else if (this.rdoMonthShift.isSelected()) {

                    // åééü
                    Calendar start = Calendar.getInstance();
                    Calendar end = Calendar.getInstance();
                    start.set( Integer.parseInt((String)this.cmbMonthWayStartYear.getSelectedItem().toString()), Integer.parseInt((String)this.cmbMonthWayStartMonth.getSelectedItem()) - 1, 1);
                    end.set( Integer.parseInt((String)this.cmbMonthWayEndYear.getSelectedItem().toString()), Integer.parseInt((String)this.cmbMonthWayEndMonth.getSelectedItem()) - 1, 1);

                    if (start.compareTo(end) != 0 && start.after(end)) {
                        MessageDialog.showMessageDialog(
                            this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "ëŒè€ä˙ä‘"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                this.setDate(paramBean);

                if (this.rdoDayShift.isSelected()) {
                    paramBean.setSubReportType(ReportParameterBean.SUB_REPORT_SALES_DAY);
                } else if(this.rdoMonthShift.isSelected()) {
                    paramBean.setSubReportType(ReportParameterBean.SUB_REPORT_SALES_MONTH);
                }

                logicResult = logic.viewSalesReport(paramBean);

            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(1099),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!logicResult) {
                // ÉGÉâÅ[éû
                MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(4001),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            }
	}//GEN-LAST:event_btnOutputActionPerformed

    private void btnLeftAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftAllActionPerformed
        this.moveCategory(false,true); 
    }//GEN-LAST:event_btnLeftAllActionPerformed

    private void btnLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeftActionPerformed
        this.moveCategory(false,false);
    }//GEN-LAST:event_btnLeftActionPerformed

    private void btnRightAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightAllActionPerformed
        this.moveCategory(true,true);
    }//GEN-LAST:event_btnRightAllActionPerformed

    private void btnRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRightActionPerformed
        this.moveCategory(true,false);
    }//GEN-LAST:event_btnRightActionPerformed

    private void targetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetActionPerformed
        this.initShopCategory();
    }//GEN-LAST:event_targetActionPerformed
    
 
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLeft;
    private javax.swing.JButton btnLeftAll;
    private javax.swing.JButton btnOutput;
    private javax.swing.JButton btnRight;
    private javax.swing.JButton btnRightAll;
    private javax.swing.JScrollPane categoryLeftScrollPane;
    private javax.swing.JTable categoryLeftTable;
    private javax.swing.JScrollPane categoryRightScrollPane;
    private javax.swing.JTable categoryRightTable;
    private javax.swing.JCheckBox checkOutDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbDayWayEndDate;
    private javax.swing.JComboBox cmbDayWayMonth;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbDayWayStartDate;
    private javax.swing.JComboBox cmbDayWayYear;
    private javax.swing.JComboBox cmbMonthWayEndMonth;
    private javax.swing.JComboBox cmbMonthWayEndYear;
    private javax.swing.JComboBox cmbMonthWayStartMonth;
    private javax.swing.JComboBox cmbMonthWayStartYear;
    private javax.swing.ButtonGroup dateTypeGroup;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblDayWay;
    private javax.swing.JLabel lblMonthWay;
    private javax.swing.JLabel lblStaff;
    private javax.swing.JLabel lblTax;
    private javax.swing.JPanel pnlDayShift;
    private javax.swing.JPanel pnlMonthShift;
    private javax.swing.JRadioButton rdoDayShift;
    private javax.swing.JRadioButton rdoDayWay;
    private javax.swing.JRadioButton rdoMonthShift;
    private javax.swing.JRadioButton rdoMonthWay;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private javax.swing.ButtonGroup reportTypeGroup;
    private javax.swing.JComboBox staff;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel target;
    private javax.swing.JLabel targetLabel;
    private javax.swing.ButtonGroup taxGroup;
    // End of variables declaration//GEN-END:variables
    
    //IVS_TTMLoan start add 2014/07/25 Mashu_îÑè„êÑà⁄ï\
    private MstShopRelations listCategory = new MstShopRelations();
    private MstShopRelations listLeftCategory = new MstShopRelations();
    private MstShopRelations listRightCategory = new MstShopRelations();
    private int useShopCategory = 1;
    /**
     * ã∆ë‘èÓïÒÇê›íËÇ∑ÇÈ
     */
    private void initShopCategory(){
        Integer selectedTarget = null;
        if(target.getSelectedItem() instanceof MstShop) {
            //ìXï‹
            MstShop ms = (MstShop)target.getSelectedItem();
            selectedTarget = ms.getShopID();
            useShopCategory = ms.getUseShopCategory();
        }else{
            //ÉOÉãÅ[Év
            selectedTarget = null;
            useShopCategory = 1;
            //Luc start add 20150213 New request #35207
            if(!SystemInfo.getSetteing().isUseShopCategory()) {
                useShopCategory = 0;
            }
            //Luc end add 20150213 New request #35207
        }
        SwingUtil.clearTable(categoryLeftTable);
        SwingUtil.clearTable(categoryRightTable);
        listCategory.clear();
        listLeftCategory.clear();
        listRightCategory.clear();
        if (useShopCategory == 1) {
            setVisibleCategory(true);
            try {
                ConnectionWrapper con =  SystemInfo.getConnection();
                listCategory.loadAllByShop(con, selectedTarget);
                DefaultTableModel categoryLeftModel = (DefaultTableModel)categoryLeftTable.getModel();

                for (MstShopRelation single : listCategory) {
                    Object[]  rowData = {single.getShopClassName()};
                    if (selectedTarget == null  || single.getShopId() != 0) {
                        categoryLeftModel.addRow(rowData);
                        listLeftCategory.add(single);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(SalesReportPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
           setVisibleCategory(false);
        }
    }
    
    /**
     * Set Visible ã∆ë‘
     * @param useCategoryFlg 
     */
    private void setVisibleCategory(boolean useCategoryFlg){
        lblCategory.setVisible(useCategoryFlg);
        categoryLeftScrollPane.setVisible(useCategoryFlg);
        categoryRightScrollPane.setVisible(useCategoryFlg);
        btnRight.setVisible(useCategoryFlg);
        btnRightAll.setVisible(useCategoryFlg);
        btnLeft.setVisible(useCategoryFlg);
        btnLeftAll.setVisible(useCategoryFlg);
    }
    /**
     * ã∆ë‘Çà⁄ìÆ
     * @param isLeftToRight true:left to right , false:right to left
     * @param isMoveAll true:ëSÇƒëIëÅ@ÅAfalse:àÍïîï™
     */
    public void moveCategory(boolean isLeftToRight, boolean isMoveAll) {
        JTable fromTable = (isLeftToRight ? categoryLeftTable : categoryRightTable);
        JTable toTable = (isLeftToRight ? categoryRightTable : categoryLeftTable);
        
        DefaultTableModel fromModel = (isLeftToRight ? (DefaultTableModel)categoryLeftTable.getModel() : (DefaultTableModel)categoryRightTable.getModel());
        DefaultTableModel toModel = (isLeftToRight ? (DefaultTableModel)categoryRightTable.getModel() : (DefaultTableModel)categoryLeftTable.getModel());
        
        MstShopRelations fromList =  (isLeftToRight ? listLeftCategory : listRightCategory); 
        MstShopRelations toList =  (isLeftToRight ? listRightCategory : listLeftCategory); 
        
        if (isMoveAll) {
            toList.addAll(fromList);
            fromList.removeAll(fromList);
        }else{
            int[]  selectedIndex = fromTable.getSelectedRows();
            if (selectedIndex.length > 0) {
                List<MstShopRelation> tempList = new ArrayList<MstShopRelation>();
                for (int i = 0; i < selectedIndex.length; i++) {
                    toList.add(fromList.get(selectedIndex[i]));
                    tempList.add(fromList.get(selectedIndex[i]));
                }
                fromList.removeAll(tempList);
            }
        }
        toList.sort();
        SwingUtil.clearTable(toTable);
        for (MstShopRelation single : toList) {
            Object[]  rowData = {single.getShopClassName()};
            toModel.addRow(rowData);
        }
        SwingUtil.clearTable(fromTable);
         for (MstShopRelation single : fromList) {
            Object[]  rowData = {single.getShopClassName()};
            fromModel.addRow(rowData);
        }
     
    }
    //IVS_TTMLoan end add 2014/07/25 Mashu_îÑè„êÑà⁄ï\
    
        private List getSalesYear() {
        
            List<Integer> result = new ArrayList<Integer>();

            String shopIdList = "";
            if (target.getSelectedItem() instanceof MstGroup) {
                //ÉOÉãÅ[Év
                MstGroup mg = (MstGroup)target.getSelectedItem();
                shopIdList = mg.getShopIDListAll();

            } else if(target.getSelectedItem() instanceof MstShop) {
                //ìXï‹
                MstShop ms = (MstShop)target.getSelectedItem();
                shopIdList = ms.getShopID().toString();
            }

            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select date_part('year', sales_date) as sales_year from data_sales");
            sql.append(" where");
            sql.append("         sales_date > '1900-01-01'");
            sql.append("     and delete_date is null");
            sql.append("     and shop_id in (" + shopIdList + ")");
            sql.append(" group by");
            sql.append("     sales_year");
            sql.append(" order by");
            sql.append("     sales_year desc");

            try {
                ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());
                while (rs.next()) {
                    result.add(rs.getInt("sales_year"));
                }
            } catch (Exception ignore) {
            }

            if (result.size() == 0) {
                result.add(Calendar.getInstance().get(Calendar.YEAR));
            }

            return result;
        }

	private void init()
	{
		this.setKeyListener();
		SystemInfo.initGroupShopComponents(target, 3);
		this.initStaff();
		this.cmbDayWayStartDate.setEnabled(false);
		this.cmbDayWayEndDate.setEnabled(false);
		this.cmbMonthWayStartYear.setEnabled(this.rdoMonthShift.isSelected());
		this.cmbMonthWayStartMonth.setEnabled(this.rdoMonthShift.isSelected());
		this.cmbMonthWayEndYear.setEnabled(this.rdoMonthShift.isSelected());
		this.cmbMonthWayEndMonth.setEnabled(this.rdoMonthShift.isSelected());
		
		Calendar cdr = Calendar.getInstance();
		cdr.setTime(new Date());
		int nowYear = cdr.get(Calendar.YEAR);
		int nowMonth = cdr.get(Calendar.MONTH) + 1; 
		
		this.cmbDayWayMonth.setSelectedIndex(nowMonth - 1);
		this.cmbMonthWayStartMonth.setSelectedIndex(0);
		this.cmbMonthWayEndMonth.setSelectedIndex(nowMonth - 1);
		
		this.cmbDayWayEndDate.setDate(new Date());

                // îÑè„ÉfÅ[É^ÇÃë∂ç›Ç∑ÇÈîNèÓïÒéÊìæ
                List<Integer> yearList = getSalesYear();

                this.initYearCombo(cmbMonthWayStartYear, yearList);
                this.initYearCombo(cmbMonthWayEndYear, yearList);
                
                this.initYearCombo(cmbDayWayYear, yearList);
                //IVS_TTMLoan start add 20140725 MASHU_îÑè„êÑà⁄ï\
                this.initShopCategory();
                //IVS_TTMLoan end add 20140725 MASHU_îÑè„êÑà⁄ï\
                
		//ê≈î≤ÅAê≈çûÇÃèâä˙ê›íË
		if(SystemInfo.getAccountSetting().getReportPriceType() == 0)
		{
			rdoTaxBlank.setSelected(false);
			rdoTaxUnit.setSelected(true);
		}
		else
		{
			rdoTaxBlank.setSelected(true);
			rdoTaxUnit.setSelected(false);
		}
		
		try
		{
			ReportLogic logic = new ReportLogic();
			String	shopIDList	=	"";
			//ÉOÉãÅ[Év
			if(SystemInfo.getCurrentShop().getShopID() == 0)
			{
				shopIDList	=	SystemInfo.getGroup().getShopIDListAll();
			}
			//ìXï‹
			else
			{
				shopIDList	=	SystemInfo.getCurrentShop().getShopID().toString();
			}
			
			HashMap shopInfo = logic.getShopInfo(shopIDList);
			
			int cutoffDay = 0;
			
			if(null == shopInfo.get("cutoff_day"))
			{
				cutoffDay = cdr.get(Calendar.DATE);
			}
			else
			{
				cutoffDay = Integer.parseInt(shopInfo.get("cutoff_day").toString());
			}
			if(cutoffDay > cdr.get(Calendar.DATE))
			{
				cdr.set(cdr.get(Calendar.YEAR), cdr.get(Calendar.MONTH) - 1, cutoffDay);
			}
			else if(cutoffDay < cdr.get(Calendar.DAY_OF_MONTH))
			{
				cdr.set(cdr.get(Calendar.YEAR), cdr.get(Calendar.MONTH), cutoffDay);
			}
			else if(cutoffDay == cdr.get(Calendar.DAY_OF_MONTH))
			{
				cdr.set(cdr.get(Calendar.YEAR), cdr.get(Calendar.MONTH), cdr.get(Calendar.DATE));
			}
			
                        this.cmbDayWayStartDate.setDate(nowYear, nowMonth , 1 );
		}
		catch (Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
        private void initYearCombo(final JComboBox cmb, List<Integer> yearList) {
            
            cmb.removeAllItems();

            for (Integer year : yearList) {
                cmb.addItem(year);
            }
            cmb.setSelectedIndex(0);
            cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusGained(java.awt.event.FocusEvent evt) {
                    ((JTextField)cmb.getEditor().getEditorComponent()).selectAll();
                }
            });
        }
        
	/**
	 * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(btnOutput);
	}
	
	private void setKeyListener()
	{
		cmbDayWayEndDate.addKeyListener(SystemInfo.getMoveNextField());
		cmbDayWayEndDate.addFocusListener(SystemInfo.getSelectText());
		cmbDayWayMonth.addKeyListener(SystemInfo.getMoveNextField());
		cmbDayWayStartDate.addKeyListener(SystemInfo.getMoveNextField());
		cmbDayWayStartDate.addFocusListener(SystemInfo.getSelectText());
		cmbMonthWayEndMonth.addKeyListener(SystemInfo.getMoveNextField());
		cmbMonthWayStartMonth.addKeyListener(SystemInfo.getMoveNextField());
		rdoDayShift.addKeyListener(SystemInfo.getMoveNextField());
		rdoDayShift.addFocusListener(SystemInfo.getSelectText());
		rdoDayWay.addKeyListener(SystemInfo.getMoveNextField());
		rdoDayWay.addFocusListener(SystemInfo.getSelectText());
		rdoMonthShift.addKeyListener(SystemInfo.getMoveNextField());
		rdoMonthShift.addFocusListener(SystemInfo.getSelectText());
		rdoMonthWay.addKeyListener(SystemInfo.getMoveNextField());
		rdoMonthWay.addFocusListener(SystemInfo.getSelectText());
		rdoTaxBlank.addKeyListener(SystemInfo.getMoveNextField());
		rdoTaxBlank.addFocusListener(SystemInfo.getSelectText());
		rdoTaxUnit.addKeyListener(SystemInfo.getMoveNextField());
		rdoTaxUnit.addFocusListener(SystemInfo.getSelectText());
                cmbDayWayYear.addKeyListener(SystemInfo.getMoveNextField());
                cmbMonthWayEndYear.addKeyListener(SystemInfo.getMoveNextField());
		cmbMonthWayStartYear.addKeyListener(SystemInfo.getMoveNextField());
		staff.addKeyListener(SystemInfo.getMoveNextField());
	}
	
	/**
	 * ÉåÉWíSìñé“Çèâä˙âªÇ∑ÇÈÅB
	 */
	private void initStaff()
	{
		staff.addItem(new MstStaff());
		SystemInfo.initStaffComponent(staff);
		staff.setSelectedIndex(0);
	}
	
        private void resetSpan(ReportParameterBean paramBean, Calendar calStart, Calendar calEnd) {

            if (paramBean.getCutoffDay() == 31) return;

            Calendar calTo = Calendar.getInstance();
            calTo.setTime(calEnd.getTime());

            if (calTo.getActualMaximum(Calendar.DATE) <= paramBean.getCutoffDay()) {
                calTo.set(Calendar.DAY_OF_MONTH, calTo.getActualMaximum(Calendar.DATE));
            } else {
                calTo.set(Calendar.DAY_OF_MONTH, paramBean.getCutoffDay());
            }

            Calendar calFrom = (Calendar)calTo.clone();
            calFrom.add(Calendar.MONTH, -1);
            calFrom.add(Calendar.DAY_OF_MONTH, 1);

            calStart.setTime(calFrom.getTime());
            calEnd.setTime(calTo.getTime());
        }
        
	private void setDate(ReportParameterBean paramBean)
	{
            if (target.getSelectedItem() instanceof MstShop) {
                MstShop ms = (MstShop)target.getSelectedItem();
                paramBean.setCutoffDay(ms.getCutoffDay());
            } else {
                paramBean.setCutoffDay(SystemInfo.getAccountSetting().getCutoffDay());
            }
            
            if (rdoDayShift.isSelected()) {
                
                //---------------------
                //ì˙éüêÑà⁄
                //---------------------
                
                if (rdoDayWay.isSelected()) {
                    
                    //ì˙êîï˚éÆ
                    paramBean.setTargetStartDateObj(cmbDayWayStartDate.getDate());
                    paramBean.setTargetEndDateObj(cmbDayWayEndDate.getDate());
                    
                } else if(rdoMonthWay.isSelected()) {
                    
                    //åéï˚éÆ
                    Calendar calStart = Calendar.getInstance();
                    calStart.set(Integer.parseInt(cmbDayWayYear.getSelectedItem().toString()), cmbDayWayMonth.getSelectedIndex(), 1);
                    Calendar calEnd = (Calendar)calStart.clone();
                    calEnd.add(Calendar.MONTH, 1);
                    calEnd.add(Calendar.DAY_OF_MONTH, -1);
                    
                    this.resetSpan(paramBean, calStart, calEnd);
                    paramBean.setTargetStartDateObj(calStart.getTime());
                    paramBean.setTargetEndDateObj(calEnd.getTime());
                }
                    
            } else if(rdoMonthShift.isSelected()) {
                
                //---------------------
                //åééüêÑà⁄
                //---------------------
                Calendar calStart = Calendar.getInstance();
                calStart.set(Integer.parseInt(cmbMonthWayStartYear.getSelectedItem().toString()), cmbMonthWayStartMonth.getSelectedIndex(), 1);
                Calendar calEnd = (Calendar)calStart.clone();
                calEnd.add(Calendar.MONTH, 1);
                calEnd.add(Calendar.DAY_OF_MONTH, -1);
                this.resetSpan(paramBean, calStart, calEnd);
                paramBean.setTargetStartDateObj(calStart.getTime());

                calStart.set(Integer.parseInt(cmbMonthWayEndYear.getSelectedItem().toString()), cmbMonthWayEndMonth.getSelectedIndex(), 1);
                calEnd = (Calendar)calStart.clone();
                calEnd.add(Calendar.MONTH, 1);
                calEnd.add(Calendar.DAY_OF_MONTH, -1);
                this.resetSpan(paramBean, calStart, calEnd);
                paramBean.setTargetEndDateObj(calEnd.getTime());
            }
	}
	
	private	MoveNextField mnf = new MoveNextField();
	private	BusinessReportFocusTraversalPolicy ftp = new BusinessReportFocusTraversalPolicy();
	
	/**
	 * ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
	 * @return  ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicy
	 */
	public BusinessReportFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	
	/**
	 * ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicy
	 */
	private class BusinessReportFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(rdoDayShift) ||
					aComponent.equals(rdoMonthShift))
			{
				return this.getSelectedTaxType();
			}
			else if (aComponent.equals(rdoTaxBlank) ||
					aComponent.equals(rdoTaxUnit))
			{
				return staff;
			}
			else if (aComponent.equals(staff))
			{
				if(rdoDayShift.isSelected())
				{
					if(rdoDayWay.isSelected())
							return	cmbDayWayStartDate;
					else
							return	cmbDayWayYear;
				}

				return	cmbMonthWayStartYear;
			}
			else if (aComponent.equals(rdoDayWay) ||
					aComponent.equals(rdoMonthWay))
			{
				if(rdoDayWay.isSelected())
						return	cmbDayWayStartDate;
				else
						return	cmbDayWayYear;
			}
			else if (aComponent.equals(cmbDayWayStartDate))
			{
				return cmbDayWayEndDate;
			}
			else if (aComponent.equals(cmbDayWayEndDate))
			{
				return this.getSelectedReportType();
			}
			else if (aComponent.equals(cmbDayWayYear.getComponent(2)))
			{
				return cmbDayWayMonth;
			}
			else if (aComponent.equals(cmbDayWayMonth))
			{
				return this.getSelectedReportType();
			}
			else if (aComponent.equals(cmbMonthWayStartYear.getComponent(2)))
			{
				return cmbMonthWayStartMonth;
			}
			else if (aComponent.equals(cmbMonthWayStartMonth))
			{
				return cmbMonthWayEndYear;
			}
			else if (aComponent.equals(cmbMonthWayEndYear.getComponent(2)))
			{
				return cmbMonthWayEndMonth;
			}
			else if (aComponent.equals(cmbMonthWayEndMonth))
			{
				return this.getSelectedReportType();
			}
			
			return this.getSelectedReportType();
		}

		/**
		 * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(rdoDayShift) ||
					aComponent.equals(rdoMonthShift))
			{
				return this.getLastComponent(aContainer);
			}
			else if (aComponent.equals(rdoTaxBlank) ||
					aComponent.equals(rdoTaxUnit))
			{
				return this.getSelectedReportType();
			}
			else if (aComponent.equals(staff))
			{
				return this.getSelectedTaxType();
			}
			else if (aComponent.equals(rdoDayWay) ||
					aComponent.equals(rdoMonthWay))
			{
				return	staff;
			}
			else if (aComponent.equals(cmbDayWayStartDate))
			{
				return	rdoDayWay;
			}
			else if (aComponent.equals(cmbDayWayEndDate))
			{
				return cmbDayWayStartDate;
			}
			else if (aComponent.equals(cmbDayWayYear))
			{
				return rdoMonthWay;
			}
			else if (aComponent.equals(cmbDayWayMonth))
			{
				return cmbDayWayYear;
			}
			else if (aComponent.equals(cmbMonthWayStartYear))
			{
				return staff;
			}
			else if (aComponent.equals(cmbMonthWayStartMonth))
			{
				return cmbMonthWayStartYear;
			}
			else if (aComponent.equals(cmbMonthWayEndYear))
			{
				return cmbMonthWayStartMonth;
			}
			else if (aComponent.equals(cmbMonthWayEndMonth))
			{
				return cmbMonthWayEndYear;
			}
			
			return this.getSelectedReportType();
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer êÊì™ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return this.getSelectedReportType();
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer aContainer - ç≈å„ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getLastComponent(Container aContainer)
		{
			if(rdoDayShift.isSelected())
			{
				if(rdoDayWay.isSelected())
						return	cmbDayWayEndDate;
				else
						return	cmbDayWayMonth;
			}
			
			return	cmbMonthWayEndMonth;
		}

		/**
		 * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
		 * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return this.getSelectedReportType();
		}
		
		/**
		 * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * show() Ç‹ÇΩÇÕ setVisible(true) ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA
		 * èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
		 * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA
		 * Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
		 * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
		 * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
		 */
		public Component getInitialComponent(Window window)
		{
			return this.getSelectedReportType();
		}
		
		private Component getSelectedReportType()
		{
			if(rdoMonthShift.isSelected())
			{
				return	rdoMonthShift;
			}
			
			return	rdoDayShift;
		}
		
		private Component getSelectedTaxType()
		{
			if(rdoTaxUnit.isSelected())
			{
				return	rdoTaxUnit;
			}
			
			return	rdoTaxBlank;
		}
	}
        
    private boolean inputCheckYear(JComboBox cmb, String itemName)
    {
        NumberUtils numUtil = new NumberUtils();
        if(!numUtil.isNumber(cmb.getSelectedItem().toString())) {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, itemName),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            cmb.requestFocusInWindow();
            return false;
        }

        return true;
    }
        
}
