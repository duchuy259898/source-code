/*
 * ContractRateReportPanel.java
 *
 * Created on 2015/11/04
 */
package com.geobeck.sosia.pos.hair.report;

import java.awt.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;

import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.report.bean.*;
import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.master.customer.MstFirstComingMotive;
import com.geobeck.sosia.pos.util.*;
import java.sql.SQLException;
import java.text.SimpleDateFormat;

/**
 *
 * @author lvtu
 */
public class ContractRateReportPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    //declare variable
    
    /**
     * Creates new form ContractReportPanel
     */
    public ContractRateReportPanel() {
        initComponents();
        addMouseCursorChange();
        this.setSize(720, 500);
        this.setPath("ï™êÕí†ï[ÅÑÅÑññ±í†ï[");
        this.setTitle("å_ñÒó¶èWåv");
        this.setKeyListener();
        //LVTu start edit 2016/01/15 New request #46599
        cmbShop.addItem(SystemInfo.getGroup());
        //SystemInfo.initGroupShopComponents(cmbShop, 3);
        SystemInfo.getGroup().addGroupDataToJComboBox(cmbShop, 3);
        if (!SystemInfo.isGroup()) {
            cmbShop.setSelectedItem(SystemInfo.getCurrentShop());
        }
        //LVTu end edit 2016/01/15 New request #46599
        this.initStaff();
        this.loadFirstComingMotives();
        cmbTargetPeriodStart.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        cmbTargetPeriodEnd.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
 
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportTypeGroup = new javax.swing.ButtonGroup();
        taxGroup = new javax.swing.ButtonGroup();
        staffGroup = new javax.swing.ButtonGroup();
        newVisitGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblTargetPeriod = new javax.swing.JLabel();
        cmbTargetPeriodStart = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel1 = new javax.swing.JLabel();
        cmbTargetPeriodEnd = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        lblStaff = new javax.swing.JLabel();
        lblTax = new javax.swing.JLabel();
        btnOutputExcel = new javax.swing.JButton();
        rdoTaxUnit = new javax.swing.JRadioButton();
        rdoTaxBlank = new javax.swing.JRadioButton();
        lblOutput = new javax.swing.JLabel();
        rdoNewContract = new javax.swing.JRadioButton();
        rdoReturnRate = new javax.swing.JRadioButton();
        cmbstaff = new javax.swing.JComboBox();
        rdoContractRate = new javax.swing.JRadioButton();
        lblShop = new javax.swing.JLabel();
        cmbFirstVisit = new javax.swing.JComboBox();
        lblFirstVisit = new javax.swing.JLabel();
        cmbShop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();

        setFocusCycleRoot(true);

        jPanel1.setOpaque(false);

        lblTargetPeriod.setText("èWåvä˙ä‘");

        cmbTargetPeriodStart.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodStart.setForeground(java.awt.Color.white);
        cmbTargetPeriodStart.setMaximumSize(new java.awt.Dimension(65, 20));
        cmbTargetPeriodStart.setMinimumSize(new java.awt.Dimension(65, 20));
        cmbTargetPeriodStart.setPreferredSize(new java.awt.Dimension(85, 20));
        cmbTargetPeriodStart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodStartFocusGained(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Å`");

        cmbTargetPeriodEnd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cmbTargetPeriodEnd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbTargetPeriodEndFocusGained(evt);
            }
        });

        lblStaff.setText("íSìñé“");

        lblTax.setText("ê≈ãÊï™");

        btnOutputExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutputExcel.setBorderPainted(false);
        btnOutputExcel.setContentAreaFilled(false);
        btnOutputExcel.setFocusCycleRoot(true);
        btnOutputExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutputExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputExcelActionPerformed(evt);
            }
        });

        taxGroup.add(rdoTaxUnit);
        rdoTaxUnit.setSelected(true);
        rdoTaxUnit.setText("ê≈çû");
        rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxUnit.setOpaque(false);

        taxGroup.add(rdoTaxBlank);
        rdoTaxBlank.setText("ê≈î≤");
        rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoTaxBlank.setOpaque(false);

        lblOutput.setText("èoóÕí†ï[");

        staffGroup.add(rdoNewContract);
        rdoNewContract.setSelected(true);
        rdoNewContract.setText("êVãKå_ñÒãqÉäÉXÉg");
        rdoNewContract.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoNewContract.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoNewContract.setOpaque(false);

        staffGroup.add(rdoReturnRate);
        rdoReturnRate.setText("ÉäÉ^Å[Éìó¶èWåv");
        rdoReturnRate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoReturnRate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoReturnRate.setOpaque(false);

        cmbstaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        staffGroup.add(rdoContractRate);
        rdoContractRate.setText("ÉåÉXÉ|ÉìÉXï å_ñÒó¶");
        rdoContractRate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdoContractRate.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdoContractRate.setOpaque(false);
        rdoContractRate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoContractRateStateChanged(evt);
            }
        });

        lblShop.setText("ëŒè€ìXï‹");

        cmbFirstVisit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        lblFirstVisit.setText("èââÒóàìXìÆã@");

        cmbShop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbShopActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(lblOutput, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, lblShop, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, lblTargetPeriod, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, lblTax, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, lblStaff, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, lblFirstVisit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(rdoNewContract, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(rdoContractRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(rdoReturnRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(cmbTargetPeriodStart, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(0, 0, 0)
                                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(0, 0, 0)
                                        .add(cmbTargetPeriodEnd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(cmbShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 198, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(4, 4, 4)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(cmbFirstVisit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 198, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(rdoTaxUnit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(5, 5, 5)
                                .add(rdoTaxBlank, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmbstaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(155, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(10, 10, 10)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(rdoNewContract, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(rdoContractRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(rdoReturnRate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(5, 5, 5)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(lblShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(cmbShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(btnOutputExcel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(5, 5, 5)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblTargetPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbTargetPeriodStart, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbTargetPeriodEnd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbstaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblFirstVisit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbFirstVisit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblTax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoTaxUnit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rdoTaxBlank, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnOutputExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputExcelActionPerformed

        btnOutputExcel.setCursor(null);

        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            ReportParameterBean paramBean = new ReportParameterBean();

            // ê≈ãÊï™(ê≈î≤Ç´)
            if (this.rdoTaxBlank.isSelected()) {
                paramBean.setTaxType(ReportParameterBean.TAX_TYPE_BLANK);
            } // ê≈ãÊï™(ê≈çûÇ›)
            else if (this.rdoTaxUnit.isSelected()) {
                paramBean.setTaxType(ReportParameterBean.TAX_TYPE_UNIT);
            }

            if (this.rdoNewContract.isSelected()) {
                paramBean.setStaffType(ReportParameterBean.STAFF_TYPE_MAIN);
            } else {
                paramBean.setStaffType(ReportParameterBean.STAFF_TYPE_TECH);
            }

            boolean logicResult = true;
            try {

                //ÉOÉãÅ[Év
                if (cmbShop.getSelectedItem() instanceof MstGroup) {
                    MstGroup mg = (MstGroup) cmbShop.getSelectedItem();
                    paramBean.setTargetName(mg.getGroupName());
                    paramBean.setShopIDList(mg.getShopIDListAll());
                } //ìXï‹
                else if (cmbShop.getSelectedItem() instanceof MstShop) {
                    MstShop ms = (MstShop) cmbShop.getSelectedItem();
                    paramBean.setTargetName(ms.getShopName());
                    paramBean.setShopIDList(ms.getShopID().toString());
                }

                //ëŒè€Ç∆Ç»ÇÈìXï‹Ç™ë∂ç›ÇµÇ»Ç¢èÍçá
                if (paramBean.getShopIDList().equals("")) {
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(4001),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (0 < cmbstaff.getSelectedIndex()) {
                    MstStaff ms = (MstStaff) cmbstaff.getSelectedItem();
                    paramBean.setStaffId(ms.getStaffID());
                    paramBean.setStaffName(ms.getFullStaffName());
                }

                if (this.cmbTargetPeriodStart.getDate() == null
                        || this.cmbTargetPeriodEnd.getDate() == null) {
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "ëŒè€ä˙ä‘"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Calendar start = Calendar.getInstance();
                Calendar end = Calendar.getInstance();

                start.setTime(this.cmbTargetPeriodStart.getDate());
                end.setTime(this.cmbTargetPeriodEnd.getDate());
                if (start.compareTo(end) != 0) {
                    if (start.after(end)) {
                        MessageDialog.showMessageDialog(this,
                                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "ëŒè€ä˙ä‘"),
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                paramBean.setTargetStartDate(this.cmbTargetPeriodStart.getDateStr());
                paramBean.setTargetEndDate(this.cmbTargetPeriodEnd.getDateStr());

                Calendar cal = Calendar.getInstance();
                cal.setTime(cmbTargetPeriodStart.getDate());
                cal.set(Calendar.HOUR_OF_DAY, 0);
                cal.set(Calendar.MINUTE, 0);
                cal.set(Calendar.SECOND, 0);
                paramBean.setTargetStartDateObj(cal.getTime());

                cal.setTime(cmbTargetPeriodEnd.getDate());
                cal.set(Calendar.HOUR_OF_DAY, 23);
                cal.set(Calendar.MINUTE, 59);
                cal.set(Calendar.SECOND, 59);
                paramBean.setTargetEndDateObj(cal.getTime());
               
                if (this.rdoNewContract.isSelected()) {
                    logicResult = getNewContractCustomer(paramBean);
                } //ÉåÉXÉ|ÉìÉXï å_ñÒó¶
                else if (this.rdoContractRate.isSelected()) {
                    logicResult = getContractRateCustomer(paramBean);

                } //ÉäÉ^Å[Éìó¶èWåv
                else if (this.rdoReturnRate.isSelected()) {
                    logicResult = getContractRateReturnCustomer(paramBean);
                } 
                
                
            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(1099),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // ÉGÉâÅ[éû
            if (!logicResult) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(4001),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            }

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

    }//GEN-LAST:event_btnOutputExcelActionPerformed

    private void cmbTargetPeriodEndFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodEndFocusGained
        cmbTargetPeriodEnd.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_cmbTargetPeriodEndFocusGained

    private void cmbTargetPeriodStartFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodStartFocusGained
        cmbTargetPeriodStart.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_cmbTargetPeriodStartFocusGained

    private void cmbShopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbShopActionPerformed
        
    }//GEN-LAST:event_cmbShopActionPerformed

    private void rdoContractRateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoContractRateStateChanged
         changeRadioButton();
    }//GEN-LAST:event_rdoContractRateStateChanged

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutputExcel;
    private javax.swing.JComboBox cmbFirstVisit;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cmbShop;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodEnd;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodStart;
    private javax.swing.JComboBox cmbstaff;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblFirstVisit;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JLabel lblShop;
    private javax.swing.JLabel lblStaff;
    private javax.swing.JLabel lblTargetPeriod;
    private javax.swing.JLabel lblTax;
    private javax.swing.ButtonGroup newVisitGroup;
    private javax.swing.JRadioButton rdoContractRate;
    private javax.swing.JRadioButton rdoNewContract;
    private javax.swing.JRadioButton rdoReturnRate;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private javax.swing.ButtonGroup reportTypeGroup;
    private javax.swing.ButtonGroup staffGroup;
    private javax.swing.ButtonGroup taxGroup;
    // End of variables declaration//GEN-END:variables
    private ContractRateReportPanelFocusTraversalPolicy ftp =
            new ContractRateReportPanelFocusTraversalPolicy();

    /**
     * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(btnOutputExcel);
    }

    private void setKeyListener() {
        cmbTargetPeriodEnd.addKeyListener(SystemInfo.getMoveNextField());
        cmbTargetPeriodEnd.addFocusListener(SystemInfo.getSelectText());
        cmbTargetPeriodStart.addKeyListener(SystemInfo.getMoveNextField());
        cmbTargetPeriodStart.addFocusListener(SystemInfo.getSelectText());
        rdoTaxBlank.addKeyListener(SystemInfo.getMoveNextField());
        rdoTaxUnit.addKeyListener(SystemInfo.getMoveNextField());
        cmbstaff.addKeyListener(SystemInfo.getMoveNextField());
    }

    /**
     * ÉåÉWíSìñé“Çèâä˙âªÇ∑ÇÈÅB
     */
    private void initStaff() {
        cmbstaff.addItem(new MstStaff());
        SystemInfo.initStaffComponent(cmbstaff);
        cmbstaff.setSelectedIndex(0);
    }
    
    /**
     * ÉåÉXÉ|ÉìÉXï å_ñÒó¶ÇÃèÍçáÇÕîÒäàê´ÅBÇªÇÍà»äOÇÕäàê´âª
     */
    private void changeRadioButton() {
        if ( rdoContractRate.isSelected()) {
            cmbFirstVisit.setSelectedIndex(0);
            cmbFirstVisit.setEnabled(false);
        }else {
             cmbFirstVisit.setEnabled(true);
        }
    }
    
    /**
     * èââÒóàìXìÆã@
     *
     * @return void
     */
    private void loadFirstComingMotives() {

        cmbFirstVisit.addItem(new MstFirstComingMotive());
        ConnectionWrapper con = SystemInfo.getConnection();

        try {
            ResultSetWrapper rs = con.executeQuery(MstFirstComingMotive.getSelectAllSQL());

            while (rs.next()) {
                MstFirstComingMotive mfcm = new MstFirstComingMotive();

                mfcm.setData(rs);

                cmbFirstVisit.addItem(mfcm);
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
        cmbFirstVisit.setSelectedIndex(0);
    }
    //IVS_LVTu start edit 2016/02/17 New request #48268
    private String getNewCustomerNum(ReportParameterBean paramBean , Integer firstComingMotives) {
        StringBuilder sql = new StringBuilder();
        
        sql.append("  select count(distinct ds.customer_id) as new_customer  \n");
        sql.append("  from view_data_sales_detail_valid ds  \n");
        sql.append("  inner join mst_customer mc on ds.customer_id = mc.customer_id  \n");
        sql.append("  where mc.customer_no <>'0'   \n");
        sql.append("  and ds.shop_id  in (" + paramBean.getShopIDList() + ")\n");
        if ( paramBean.getStaffId() != null) {
            sql.append("  and ds.detail_staff_id = " + paramBean.getStaffId() +"  \n");
        }
        if (firstComingMotives != null ) {
            sql.append("  and mc.first_coming_motive_class_id = " + firstComingMotives +"  \n");
        }
        //sql.append("  and mc.before_visit_num + get_visit_count(mc.customer_id,ds.sales_date) = 1  \n");
        sql.append("  and ((mc.before_visit_num + get_visit_count(mc.customer_id,ds.sales_date) = 1 )   \n");

        sql.append("        )  \n");
        sql.append("  and ds.sales_date between  '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        
        return sql.toString();
    }
    private boolean getNewContractCustomer(ReportParameterBean paramBean) {
        Integer firstComingMotives = null;
        String firstComingMotiveName = "";
        if ( cmbFirstVisit.isEnabled() == true ) {
            if (0 < cmbFirstVisit.getSelectedIndex()) {
                firstComingMotives = ((MstFirstComingMotive)cmbFirstVisit.getSelectedItem()).getFirstComingMotiveClassId();
                firstComingMotiveName = ((MstFirstComingMotive)cmbFirstVisit.getSelectedItem()).getFirstComingMotiveName();
            }
        }
        StringBuilder sql = new StringBuilder();
          
        sql.append("  SELECT t.*,  \n");
        sql.append("  	   array_to_string(array  \n");
        sql.append("  						 (SELECT CASE WHEN (t.detail_staff_id IS NULL  \n");
        sql.append("  						AND dsd1.staff_id IS NULL)  \n");
        sql.append("  						  OR (t.detail_staff_id IS NOT NULL  \n");
        sql.append("  							  AND dsd1.staff_id = t.detail_staff_id) THEN mc.course_name ELSE '' END   \n");
        sql.append("  						  FROM data_sales ds1  \n");
        sql.append("  						  INNER JOIN data_sales_detail dsd1 ON ds1.slip_no = dsd1.slip_no  \n");
        sql.append("  						  AND ds1.shop_id = dsd1.shop_id  \n");
        sql.append("  						  INNER JOIN mst_course mc ON dsd1.product_id = mc.course_id  \n");
        sql.append("  						  inner join data_contract dc1 on dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is null  \n");
        sql.append("  						  WHERE ds1.customer_id = t.customer_id  \n");
        sql.append("  							AND ds1.shop_id = t.shop_id  \n");
        sql.append("  							AND product_division = 5  \n");
        sql.append("  							AND ds1.sales_date = t.sales_date  \n");
        sql.append("  							AND ds1.insert_date = t.insert_date   \n");
        sql.append("                                                    and ds1.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
	sql.append("                                                    and ds1.delete_date is null   \n");
	sql.append("                                                    and dsd1.delete_date is null   \n");
        sql.append("   ), ', ') AS course_name,  \n");
        sql.append("    (SELECT coalesce(sum(CASE WHEN (t.detail_staff_id IS NULL  \n");
        sql.append("  			 AND detail_staff_id IS NULL)  \n");
        sql.append("  			OR (t.detail_staff_id IS NOT NULL  \n");
        sql.append("  			 AND detail_staff_id = t.detail_staff_id) THEN  \n");
        if ( paramBean.getTaxType() == paramBean.TAX_TYPE_UNIT) {
            sql.append("  			discount_detail_value_in_tax  \n");
        }else {
            sql.append("  			discount_detail_value_no_tax  \n");
        }
        sql.append("  			ELSE 0 END),0)   \n");
        sql.append("     FROM data_sales ds1  \n");
        sql.append("     INNER JOIN view_data_sales_detail_valid dsd1 ON ds1.shop_id = dsd1.shop_id  \n");
        sql.append("     AND ds1.slip_no = dsd1.slip_no  \n");
        sql.append("     and dsd1.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("     inner join data_sales_detail dsd2 on dsd2.shop_id = ds1.shop_id and dsd2.slip_no = ds1.slip_no and dsd1.slip_detail_no = dsd2.slip_detail_no \n");
        sql.append("     WHERE ds1.customer_id =t.customer_id  \n");
        sql.append("  	 AND ds1.shop_id = t.shop_id  \n");
        sql.append("  	 AND dsd1.product_division = 5  \n");
        sql.append("  	 AND ds1.sales_date = t.sales_date  \n");
        sql.append("  	 AND ds1.insert_date = t.insert_date   \n");
        sql.append("  	 and not exists (select 1 from  data_contract dc1 where dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is not null  \n");
	sql.append("  	 and dc1.product_id = dsd1.product_id and dsd2.contract_detail_no = dc1.contract_detail_no )  \n");
        sql.append("   ) AS price_value  \n");
        sql.append("  FROM  \n");
        sql.append("    (SELECT vds.shop_id,  \n");
        sql.append("  		  shop.shop_name,  \n");
        sql.append("  		  vds.customer_id,  \n");
        sql.append("  		  mc.customer_no,  \n");
        sql.append("  		  mc.customer_name1,  \n");
        sql.append("  		  mc.customer_name2,  \n");
        sql.append("  		  vds.detail_staff_id,  \n");
        sql.append("  		  staff.staff_name1,  \n");
        sql.append("  		  staff.staff_name2,  \n");
        sql.append("  		  vds.sales_date,  \n");
        sql.append("  	 (SELECT min(ds.insert_date)  \n");
        sql.append("  	  FROM data_sales ds  \n");
        sql.append("  	  INNER JOIN data_sales_detail dsd ON ds.slip_no = dsd.slip_no  \n");
        sql.append("  	  AND ds.shop_id = dsd.shop_id  \n");
        sql.append("  	  inner join data_contract dc1 on dc1.shop_id = ds.shop_id and dc1.slip_no = ds.slip_no and dc1.delete_date is null \n");
        sql.append("  	  WHERE ds.customer_id = vds.customer_id  \n");
        sql.append("  		AND ds.shop_id = vds.shop_id  \n");
        sql.append("            and ds.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
	sql.append("            and ds.delete_date is null   \n");
	sql.append("            and dsd.delete_date is null   \n");
        //Luc start add 20160112 #46345
        sql.append("            and dsd.product_value <>0  \n");
	//Luc end  add 20160112 #46345
        sql.append("  		AND dsd.product_division = 5 ) AS insert_date   \n");
        sql.append("     FROM view_data_sales_detail_valid vds  \n");
        sql.append("     INNER JOIN mst_shop shop ON shop.shop_id = vds.shop_id  \n");
        sql.append("     INNER JOIN mst_customer mc ON mc.customer_id = vds.customer_id  \n");
        sql.append("     LEFT JOIN mst_staff staff ON staff.staff_id = vds.detail_staff_id  \n");
        sql.append("     inner join data_contract dc on dc.shop_id = vds.shop_id and dc.slip_no = vds.slip_no and dc.delete_date is null \n");
        sql.append("     WHERE vds.product_division = 5  \n");
        sql.append("  	 AND shop.shop_id IN (" + paramBean.getShopIDList() + ")\n");
        if ( paramBean.getStaffId() != null) {
            sql.append("  AND staff.staff_id = " + paramBean.getStaffId() +"  \n");
        }
        if (firstComingMotives != null ) {
            sql.append("  AND mc.first_coming_motive_class_id = " + firstComingMotives +"  \n");
        }
        sql.append("  	 AND vds.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("  	 AND NOT EXISTS  \n");
        sql.append("  	   (SELECT 1  \n");
        sql.append("  		FROM view_data_sales_detail_valid vds1  \n");
        sql.append("  		inner join data_contract dc1 on dc1.shop_id = vds1.shop_id and dc1.slip_no = vds1.slip_no and dc1.delete_date is null \n");
        sql.append("  		WHERE vds1.product_division = 5  \n");
        sql.append("  		  AND vds1.customer_id  = vds.customer_id  \n");
        //sql.append("  		  AND vds1.shop_id IN (" + paramBean.getShopIDList() + ")\n");
        //sql.append("  		  AND vds1.sales_date < '" + paramBean.getTargetStartDate() + "' )  \n");
        sql.append("    AND vds1.sales_date < vds.sales_date )\n");
        sql.append("  	 AND vds.sales_date =  \n");
        sql.append("  	   (SELECT min(sales_date)  \n");
        sql.append("  		FROM view_data_sales_detail_valid vds2  \n");
        sql.append("  		inner join data_contract dc1 on dc1.shop_id = vds2.shop_id and dc1.slip_no = vds2.slip_no and dc1.delete_date is null \n");
        sql.append("  		WHERE vds2.product_division = 5  \n");
        sql.append("  		  AND vds2.shop_id IN (" + paramBean.getShopIDList() + ")\n");
        sql.append("  		  AND vds2.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        //Luc start add 20160112 #46345
        sql.append("  		  And vds2.product_value <> 0 ");
        //Luc end add 20160112 #46345
        sql.append("  		  AND vds2.customer_id = mc.customer_id)  \n");
        sql.append("  	 AND mc.customer_no <> '0'   \n");
        sql.append("  	 AND EXISTS  \n");
        sql.append("  	   (SELECT 1  \n");
        sql.append("  		FROM data_sales ds1  \n");
        sql.append("  		inner join data_contract dc1 on dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is null \n");
        sql.append("  		WHERE ds1.slip_no = vds.slip_no  \n");
        sql.append("  		  AND ds1.shop_id = vds.shop_id  \n");
        sql.append("              and ds1.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
	sql.append("              and ds1.delete_date is null   \n");
        sql.append("  		  AND ds1.insert_date =  \n");
        sql.append("  			(SELECT min(ds.insert_date)  \n");
        sql.append("  			 FROM data_sales ds  \n");
        sql.append("  			 INNER JOIN data_sales_detail dsd ON ds.slip_no = dsd.slip_no  \n");
        sql.append("  			 AND ds.shop_id = dsd.shop_id  \n");
        sql.append("  			 inner join data_contract dc1 on dc1.shop_id = ds.shop_id and dc1.slip_no = ds.slip_no and dc1.delete_date is null \n");
        sql.append("  			 WHERE ds.customer_id = vds.customer_id  \n");
        sql.append("  			   AND ds.shop_id = vds.shop_id  \n");
        sql.append("  			   AND dsd.product_division = 5  \n");
        sql.append("  			   And  dsd.product_value <> 0  \n");
        sql.append("  			   AND ds.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "')) \n");
        
        sql.append("     GROUP BY vds.shop_id,  \n");
        sql.append("  			vds.customer_id,  \n");
        sql.append("  			shop.shop_name,  \n");
        sql.append("  			vds.customer_id,  \n");
        sql.append("  			mc.customer_no,  \n");
        sql.append("  			mc.customer_name1,  \n");
        sql.append("  			vds.sales_date,  \n");
        sql.append("  			mc.customer_name2,  \n");
        sql.append("  			vds.detail_staff_id,  \n");
        sql.append("  			staff.staff_name1,  \n");
        sql.append("  			staff.staff_name2)t  \n");
        //Luc start add 20160111 #46345
        sql.append("  	where ");
        sql.append("    (SELECT coalesce(sum(CASE WHEN (t.detail_staff_id IS NULL  \n");
        sql.append("  			 AND detail_staff_id IS NULL)  \n");
        sql.append("  			OR (t.detail_staff_id IS NOT NULL  \n");
        sql.append("  			 AND detail_staff_id = t.detail_staff_id) THEN  \n");
        if ( paramBean.getTaxType() == paramBean.TAX_TYPE_UNIT) {
            sql.append("  			discount_detail_value_in_tax  \n");
        }else {
            sql.append("  			discount_detail_value_no_tax  \n");
        }
        sql.append("  			ELSE 0 END),0)   \n");
        sql.append("     FROM data_sales ds1  \n");
        sql.append("     INNER JOIN view_data_sales_detail_valid dsd1 ON ds1.shop_id = dsd1.shop_id  \n");
        sql.append("     AND ds1.slip_no = dsd1.slip_no  \n");
        sql.append("     and dsd1.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("     inner join data_sales_detail dsd2 on dsd2.shop_id = ds1.shop_id and dsd2.slip_no = ds1.slip_no and dsd1.slip_detail_no = dsd2.slip_detail_no \n");
        sql.append("     WHERE ds1.customer_id =t.customer_id  \n");
        sql.append("  	 AND ds1.shop_id = t.shop_id  \n");
        sql.append("  	 AND dsd1.product_division = 5  \n");
        sql.append("  	 AND ds1.sales_date = t.sales_date  \n");
        sql.append("  	 AND ds1.insert_date = t.insert_date   \n");
        sql.append("  	 and not exists (select 1 from  data_contract dc1 where dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is not null  \n");
	sql.append("  	 and dc1.product_id = dsd1.product_id and dsd2.contract_detail_no = dc1.contract_detail_no )  \n");
        sql.append("   ) <> 0 \n");
        //Luc end add 20160111  #46345
        sql.append("  ORDER BY t.sales_date  \n");
                
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        ConnectionWrapper cw = SystemInfo.getConnection();
        ResultSetWrapper rs = new ResultSetWrapper();
        
        try {
            //êVãKóàìXãqêîÅiêlÅj
            Integer newCustomerNum = 0;
            rs = cw.executeQuery(getNewCustomerNum(paramBean, firstComingMotives));
            if (rs.next()) {
                newCustomerNum = rs.getInt("new_customer");
            }
            rs.close();
            
            rs = cw.executeQuery(sql.toString());
            if (!rs.next()) {
                return false;
            }

            JExcelApi jx = new JExcelApi("êVãKå_ñÒãqÉäÉXÉg");
            jx.setTemplateFile("/reports/êVãKå_ñÒãqÉäÉXÉg.xls");
            jx.setValue(2, 3, paramBean.getTargetName());
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " Å` " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getStaffName());
            jx.setValue(2, 6, firstComingMotiveName);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 7, "ê≈î≤");
            }else {
                jx.setValue(2, 7, "ê≈çû");
            }
            //êVãKóàìXãqêîÅiêlÅj
            jx.setValue(1, 10, newCustomerNum);

            if (newCustomerNum <= 0) {
                //êVãKãqå_ñÒó¶Åi%Åj
                //å_ñÒêlêîÅÄêVãKóàìXêîÇ™1/0ÇÃÇÊÇ§Ç»èÍçáÇÕ100%Ç∆Ç∑ÇÈ
                jx.setValue(5, 10, 1);
            }

            int row = 13;
            rs.last();
            int num = 0;
            num = rs.getRow();

            //å_ñÒãqêîÅiêlÅj
            HashMap<Integer, String> customerMap = new HashMap<Integer, String>();
            rs.beforeFirst();
            while (rs.next()) {
                if (!customerMap.containsKey(rs.getInt("customer_id"))) {
                    customerMap.put(rs.getInt("customer_id"), rs.getString("customer_no"));
                }
            }
            jx.setValue(3, 10, customerMap.size());
            // if å_ñÒãqêîÅiêlÅj= 0 then å_ñÒãqíPâøÅiâ~Åj
            if ( num <= 0 ) {
                jx.setValue(7, 10, num);
            }

            if(num > 2) {
                jx.insertRow(row, num - 2);
            }

            rs.beforeFirst();
             while (rs.next()) {
                 //mergecell
                 jx.mergeCells(6, row, 9, row);
                // add data
                String staffFullName = "";
                String courseName    = "";
                String[] arrCourse ;
                courseName = rs.getString("course_name");
                arrCourse = courseName.split(", ");
                courseName = "";
                for (int i = 0;i < arrCourse.length;i ++ ) {
                    //arrCourse[i] == "" then i ++
                    if ( arrCourse[i].equals("")) {
                        continue;
                    }
                    courseName += arrCourse[i];
                    // set , 
                    if ( (i + 1) < arrCourse.length ) {
                        courseName +=", ";
                    }
                }
                staffFullName =  rs.getString("staff_name1")!= null ? rs.getString("staff_name1") + " ": "";
                staffFullName +=  rs.getString("staff_name2")!= null ? rs.getString("staff_name2"): "";

                jx.setValue(1, row, rs.getString("shop_name"));
                jx.setValue(2, row, format.format(rs.getDate("sales_date")));
                jx.setValue(3, row, rs.getString("customer_no"));
                jx.setValue(4, row, rs.getString("customer_name1") + " " + rs.getString("customer_name2") );
                jx.setValue(5, row, staffFullName);
                jx.setValue(6, row, courseName);
                jx.setValue(10, row, rs.getLong("price_value"));

                row ++ ;
             }
            if(num < 2) {
                jx.removeRow(row);
            }
            jx.openWorkbook();
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1099),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    
    private boolean getContractRateCustomer(ReportParameterBean paramBean) {

        StringBuilder sql = new StringBuilder();
        
        sql.append("  select * from (  \n");
        sql.append("  select cm.first_coming_motive_class_id,cm.first_coming_motive_name,  \n");
        sql.append("  coalesce((select count(distinct ds1.customer_id) from view_data_sales_detail_valid ds1  \n");
        sql.append("  inner join mst_customer mc1 on ds1.customer_id = mc1.customer_id  \n");
        sql.append("  where mc1.customer_no <>'0'   \n");
        sql.append("  and ds1.shop_id in (" + paramBean.getShopIDList() + ")\n");
        //sql.append("  and mc1.before_visit_num + get_visit_count(mc1.customer_id,ds1.sales_date) = 1  \n");
        sql.append("  and ((mc1.before_visit_num + get_visit_count(mc1.customer_id,ds1.sales_date) = 1 )   \n");
        sql.append("      )  \n");
        sql.append("  and ds1.sales_date between  '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("  and mc1.first_coming_motive_class_id = cm.first_coming_motive_class_id  \n");
        if ( paramBean.getStaffId() != null) {
            sql.append("  and ds1.detail_staff_id = " + paramBean.getStaffId() +"  \n");
        }
        sql.append("  ),0) as new_customer,  \n");
        sql.append("  coalesce((select count(distinct ds1.customer_id) from view_data_sales_detail_valid ds1  \n");
        sql.append("  inner join mst_customer mc1 on ds1.customer_id = mc1.customer_id  \n");
        sql.append("  inner join data_contract dc1 on dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is null  \n");
        sql.append("  where mc1.customer_no <>'0'   \n");
        sql.append("  and ds1.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append("  and ds1.product_division = 5  \n");
        sql.append("  and ds1.sales_date between  '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("  and mc1.first_coming_motive_class_id = cm.first_coming_motive_class_id  \n");
        if ( paramBean.getStaffId() != null) {
            sql.append("  and ds1.detail_staff_id = " + paramBean.getStaffId() +"  \n");
        }
        sql.append("  and NOT EXISTS  \n");
        sql.append("  (SELECT 1  \n");
        sql.append("  FROM view_data_sales_detail_valid vds1  \n");
        sql.append("  inner join data_contract dc1 on dc1.shop_id = vds1.shop_id and dc1.slip_no = vds1.slip_no and dc1.delete_date is null  \n");
        sql.append("  WHERE vds1.product_division = 5  \n");
        sql.append("    and vds1.customer_id = mc1.customer_id  \n");
        //sql.append("    AND vds1.shop_id in (" + paramBean.getShopIDList() + ")\n");
        //sql.append("    AND vds1.sales_date < '" + paramBean.getTargetStartDate() + "' )  \n");
        sql.append("    AND vds1.sales_date < ds1.sales_date )\n");
        sql.append("  ),0) as contracted_customer,  \n");
        sql.append("  coalesce((select sum  \n");
        if ( paramBean.getTaxType() == paramBean.TAX_TYPE_UNIT) {
            sql.append("  (discount_detail_value_in_tax)  \n");
        }else {
            sql.append("  (discount_detail_value_no_tax)  \n");
        }
        sql.append("  from view_data_sales_detail_valid ds1  \n");
        sql.append("  inner join mst_customer mc1 on ds1.customer_id = mc1.customer_id  \n");
        sql.append("  inner join data_sales_detail dsd2 on dsd2.shop_id = ds1.shop_id and dsd2.slip_no = ds1.slip_no and ds1.slip_detail_no = dsd2.slip_detail_no \n");
        sql.append("  where mc1.customer_no <>'0'   \n");
        sql.append("  and ds1.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append("  and ds1.product_division = 5  \n");
        sql.append("  and not exists (select 1 from  data_contract dc1 where dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is not null\n");
	sql.append("  and dc1.product_id = ds1.product_id and dsd2.contract_detail_no = dc1.contract_detail_no	)\n");
        sql.append("  and ds1.sales_date between  '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("  and mc1.first_coming_motive_class_id = cm.first_coming_motive_class_id  \n");
        //sql.append("  and mc1.before_visit_num + get_visit_count(mc1.customer_id,ds1.sales_date) = 1 \n");
        //sql.append("  and ((mc1.before_visit_num + get_visit_count(mc1.customer_id,ds1.sales_date) = 1 )   \n");

        //sql.append("        )  \n");
        if ( paramBean.getStaffId() != null) {
            sql.append("  and ds1.detail_staff_id = " + paramBean.getStaffId() +"  \n");
        }
        sql.append("  and NOT EXISTS  \n");
        sql.append("  (SELECT 1  \n");
        sql.append("  FROM view_data_sales_detail_valid vds1  \n");
        sql.append("  inner join data_contract dc1 on dc1.shop_id = vds1.shop_id and dc1.slip_no = vds1.slip_no and dc1.delete_date is null  \n");
        sql.append("  WHERE vds1.product_division = 5  \n");
        sql.append("    and vds1.customer_id = mc1.customer_id   \n");
        //sql.append("    AND vds1.shop_id IN (" + paramBean.getShopIDList() + ")\n");
        //sql.append("    AND vds1.sales_date < '" + paramBean.getTargetStartDate() + "' )  \n");
        sql.append("    AND vds1.sales_date < ds1.sales_date)\n");
        sql.append("  ),0) as contracted_value  \n");
        sql.append("   from   \n");
        sql.append("  mst_first_coming_motive cm   \n");
        sql.append("  where cm.delete_date is null  \n");
        
        //Luc start add 20160111 #46345 
        sql.append(" And coalesce((select sum  \n");
        if ( paramBean.getTaxType() == paramBean.TAX_TYPE_UNIT) {
            sql.append("  (discount_detail_value_in_tax)  \n");
        }else {
            sql.append("  (discount_detail_value_no_tax)  \n");
        }
        sql.append("  from view_data_sales_detail_valid ds1  \n");
        sql.append("  inner join mst_customer mc1 on ds1.customer_id = mc1.customer_id  \n");
        sql.append("  inner join data_sales_detail dsd2 on dsd2.shop_id = ds1.shop_id and dsd2.slip_no = ds1.slip_no and ds1.slip_detail_no = dsd2.slip_detail_no \n");
        sql.append("  where mc1.customer_no <>'0'   \n");
        sql.append("  and ds1.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append("  and ds1.product_division = 5  \n");
        sql.append("  and not exists (select 1 from  data_contract dc1 where dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is not null\n");
	sql.append("  and dc1.product_id = ds1.product_id and dsd2.contract_detail_no = dc1.contract_detail_no	)\n");
        sql.append("  and ds1.sales_date between  '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("  and mc1.first_coming_motive_class_id = cm.first_coming_motive_class_id  \n");
        //sql.append("  and mc1.before_visit_num + get_visit_count(mc1.customer_id,ds1.sales_date) = 1 \n");
        //sql.append("  and ((mc1.before_visit_num + get_visit_count(mc1.customer_id,ds1.sales_date) = 1 )   \n");
        //sql.append("        )  \n");
        if ( paramBean.getStaffId() != null) {
            sql.append("  and ds1.detail_staff_id = " + paramBean.getStaffId() +"  \n");
        }
        sql.append("  and NOT EXISTS  \n");
        sql.append("  (SELECT 1  \n");
        sql.append("  FROM view_data_sales_detail_valid vds1  \n");
        sql.append("  inner join data_contract dc1 on dc1.shop_id = vds1.shop_id and dc1.slip_no = vds1.slip_no and dc1.delete_date is null  \n");
        sql.append("  WHERE vds1.product_division = 5  \n");
        sql.append("    and vds1.customer_id = mc1.customer_id   \n");
        //sql.append("    AND vds1.shop_id IN (" + paramBean.getShopIDList() + ")\n");
        //sql.append("    AND vds1.sales_date < '" + paramBean.getTargetStartDate() + "' )  \n");
        sql.append("    AND vds1.sales_date < ds1.sales_date )\n");
        sql.append("  ),0) <> 0  \n");
        //Luc end add 20160111 #46345 
        
        sql.append("  group by cm.first_coming_motive_class_id,cm.first_coming_motive_name  \n");
        sql.append("  order by cm.first_coming_motive_class_id   \n");
        sql.append("  ) t  \n");
        sql.append("  where t.new_customer > 0 or contracted_customer > 0  \n");

        ConnectionWrapper cw = SystemInfo.getConnection();
        ResultSetWrapper rs = new ResultSetWrapper();
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        
        try {
            
            rs = cw.executeQuery(sql.toString());
            if (!rs.next()) {
                return false;
            }

            JExcelApi jx = new JExcelApi("ÉåÉXÉ|ÉìÉXï å_ñÒó¶");
            jx.setTemplateFile("/reports/ÉåÉXÉ|ÉìÉXï å_ñÒó¶.xls");
            jx.setValue(2, 3, paramBean.getTargetName());
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " Å` " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getStaffName());
            
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 6, "ê≈î≤");
            }else {
                jx.setValue(2, 6, "ê≈çû");
            }

            int row = 9;
            rs.last();
            int num = 0;
            num = rs.getRow();

            if(num > 2) {
                jx.insertRow(row, num - 2);
            }

            rs.beforeFirst();
             while (rs.next()) {
                 //mergecell
                 jx.mergeCells(1, row, 2, row);
                 jx.mergeCells(3, row, 4, row);
                 jx.mergeCells(5, row, 6, row);
                 jx.mergeCells(7, row, 8, row);
                 jx.mergeCells(9, row, 10, row);
                 jx.mergeCells(11, row, 12, row);
               
                int numCustomer = rs.getInt("contracted_customer");
                jx.setValue(1, row, rs.getString("first_coming_motive_name"));
                jx.setValue(3, row, rs.getInt("new_customer"));
                jx.setValue(5, row, rs.getInt("contracted_customer"));
                if ( numCustomer > 0) {
                    jx.setValue(9, row, rs.getLong("contracted_value")/numCustomer);
                }else {
                    jx.setValue(9, row, rs.getLong("contracted_value"));
                }
                jx.setValue(11, row,rs.getLong("contracted_value"));
                
                if ( rs.getInt("new_customer") == 0) {
                    jx.setValue(7, row, 1);
                }

                row ++ ;
             }
            if(num < 2) {
                jx.removeRow(row);
            }
            jx.openWorkbook();
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1099),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    //IVS_LVTu end edit 2016/02/17 New request #48268
    
    //ÉäÉ^Å[Éìó¶èWåv
    private boolean getContractRateReturnCustomer(ReportParameterBean paramBean) {
        Integer firstComingMotives = null;
        String firstComingMotiveName = "";
        if ( cmbFirstVisit.isEnabled() == true ) {
            if (0 < cmbFirstVisit.getSelectedIndex()) {
                firstComingMotives = ((MstFirstComingMotive)cmbFirstVisit.getSelectedItem()).getFirstComingMotiveClassId();
                firstComingMotiveName = ((MstFirstComingMotive)cmbFirstVisit.getSelectedItem()).getFirstComingMotiveName();
            }
        }
        StringBuilder sql = new StringBuilder();
               
        sql.append("	SELECT t.*,  \n");
        sql.append("		   array_to_string(array  \n");
        sql.append("		(SELECT CASE WHEN (t.detail_staff_id IS NULL  \n");
        sql.append("		AND dsd1.staff_id IS NULL)  \n");
        sql.append("            OR (t.detail_staff_id IS NOT NULL  \n");
        sql.append("		AND dsd1.staff_id = t.detail_staff_id) THEN mc.course_name ELSE '' END  \n");
        sql.append("		FROM data_sales ds1  \n");
        sql.append("		INNER JOIN data_sales_detail dsd1 ON ds1.slip_no = dsd1.slip_no  \n");
        sql.append("		AND ds1.shop_id = dsd1.shop_id  \n");
        sql.append("		INNER JOIN mst_course mc ON dsd1.product_id = mc.course_id  \n");
        sql.append("		inner join data_contract dc1 on dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is null \n");
        sql.append("		WHERE ds1.customer_id = t.customer_id  \n");
        sql.append("			AND ds1.shop_id = t.shop_id  \n");
        sql.append("			AND product_division = 5  \n");
        sql.append("			AND ds1.sales_date = t.sales_date  \n");
        sql.append("			and ds1.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
	sql.append("                    and ds1.delete_date is null   \n");
	sql.append("			and dsd1.delete_date is null   \n");
        sql.append("			AND ds1.insert_date = t.insert_date), ', ') AS course_name,  \n");
        sql.append("	  (SELECT coalesce(sum(CASE WHEN (t.detail_staff_id IS NULL  \n");
        sql.append("			AND detail_staff_id IS NULL)  \n");
        sql.append("			 OR (t.detail_staff_id IS NOT NULL  \n");
        sql.append("			 AND detail_staff_id = t.detail_staff_id) THEN \n");
        if ( paramBean.getTaxType() == paramBean.TAX_TYPE_UNIT) {
            sql.append("		discount_detail_value_in_tax   \n");   
        }else {
            sql.append("		discount_detail_value_no_tax   \n");   
        }
        sql.append("		ELSE 0 END),0)  \n");
        sql.append("	   FROM data_sales ds1  \n");
        sql.append("	   INNER JOIN view_data_sales_detail_valid dsd1 ON ds1.shop_id = dsd1.shop_id  \n");
        sql.append("	   AND ds1.slip_no = dsd1.slip_no  \n");
        sql.append("	   and dsd1.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("	   inner join data_sales_detail dsd2 on dsd2.shop_id = ds1.shop_id and dsd2.slip_no = ds1.slip_no and dsd1.slip_detail_no = dsd2.slip_detail_no \n");
        sql.append("	   WHERE ds1.customer_id =t.customer_id  \n");
        sql.append("		 AND ds1.shop_id = t.shop_id  \n");
        sql.append("		 AND dsd1.product_division = 5  \n");
        sql.append("		 AND ds1.sales_date = t.sales_date  \n");
        sql.append("		 and ds1.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
	sql.append("             and ds1.delete_date is null   \n");
        sql.append("             and not exists (select 1 from  data_contract dc1 where dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is not null  \n");
	sql.append("             and dc1.product_id = dsd1.product_id and dsd2.contract_detail_no = dc1.contract_detail_no )  \n");
        sql.append("		 AND ds1.insert_date = t.insert_date) AS price_value  \n");
        sql.append("	FROM  \n");
        sql.append("	  (SELECT s.shop_id,  \n");
        sql.append("			  s.shop_name,  \n");
        sql.append("			  ds.sales_date,  \n");
        sql.append("			  mc.customer_id,  \n");
        sql.append("			  mc.customer_no,  \n");
        sql.append("			  mc.customer_name1, mc.customer_name2,  \n");
        sql.append("			ds.detail_staff_id,  \n");
        sql.append("			 st.staff_no,  \n");
        sql.append("			st.staff_name1, st.staff_name2,  \n");
        sql.append("		 (SELECT min(ds1.insert_date)  \n");
        sql.append("		  FROM data_sales ds1  \n");
        sql.append("		  INNER JOIN data_sales_detail dsd1 ON ds1.slip_no = dsd1.slip_no  \n");
        sql.append("		  AND ds1.shop_id = dsd1.shop_id  \n");
        sql.append("		  inner join data_contract dc1 on dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is null \n");
        sql.append("		  WHERE ds1.customer_id = mc.customer_id  \n");
        sql.append("			and ds1.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
	sql.append("                    and ds1.delete_date is null   \n");
	sql.append("			and dsd1.delete_date is null   \n");
        sql.append("			AND ds1.shop_id = s.shop_id  \n");
        //Luc start add 20160112 #46345
        sql.append("			and dsd1.product_value <> 0   \n");
        //Luc end add 20160112 #46345
        sql.append("			AND dsd1.product_division = 5) AS insert_date  \n");
        sql.append("	   FROM view_data_sales_detail_valid ds  \n");
        sql.append("	   INNER JOIN mst_customer mc ON ds.customer_id = mc.customer_id  \n");
        sql.append("	   INNER JOIN mst_shop s ON ds.shop_id = s.shop_id  \n");
        sql.append("	   LEFT JOIN mst_staff st ON ds.detail_staff_id = st.staff_id  \n");
        sql.append("	   inner join data_contract dc1 on dc1.shop_id = ds.shop_id and dc1.slip_no = ds.slip_no and dc1.delete_date is null \n");
        sql.append("	   WHERE ds.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("		 AND ds.shop_id IN (" + paramBean.getShopIDList() + ")\n");
        if ( paramBean.getStaffId() != null) {
            sql.append("  AND st.staff_id = " + paramBean.getStaffId() +"  \n");
        }
        if (firstComingMotives != null ) {
            sql.append("  AND mc.first_coming_motive_class_id = " + firstComingMotives +"  \n");
        }
        sql.append("		 AND mc.customer_no <> '0'  \n");
        sql.append("		 AND product_division = 5  \n"); 
        //-- dk mua truoc do kh?ng ph?i l? course
        sql.append("	AND exists   \n");
        sql.append("		   (SELECT 1  \n");
        sql.append("			FROM view_data_sales_detail_valid vds1  \n");
        sql.append("			WHERE vds1.shop_id IN (" + paramBean.getShopIDList() + ")\n");
        sql.append("			  AND vds1.product_division <> 5  \n");
        sql.append("			  and vds1.customer_id = ds.customer_id  \n");
        //Luc start edit 20160120 
        //sql.append("			  AND vds1.sales_date < '" + paramBean.getTargetStartDate() + "' )  \n"); 
        sql.append("			  AND vds1.sales_date <= ds.sales_date  \n");
	sql.append("			  		  and vds1.slip_no <> ds.slip_no)  \n");
        //Luc start edit 20160120 
        
        sql.append("	AND not exists    \n"); 
	sql.append("	   (SELECT 1   \n"); 
	sql.append("		FROM view_data_sales_detail_valid vds1   \n"); 
	sql.append("		inner join data_contract dc1 on dc1.shop_id = vds1.shop_id and dc1.slip_no = vds1.slip_no and dc1.delete_date is null \n"); 
	sql.append("			WHERE vds1.shop_id IN (" + paramBean.getShopIDList() + ")\n");
        sql.append("			  AND vds1.product_division = 5  \n");
        sql.append("			  and vds1.customer_id = ds.customer_id  \n");
        sql.append("			  AND vds1.sales_date < '" + paramBean.getTargetStartDate() + "' )  \n");
        //--Dieu kien lan dau tien mua course
        sql.append("	AND sales_date =  \n");
        sql.append("		   (SELECT min(sales_date)  \n");
        sql.append("			FROM view_data_sales_detail_valid ds1  \n");
        sql.append("			inner join data_contract dc1 on dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is null \n");
        sql.append("			WHERE ds1.customer_id = ds.customer_id  \n");
        sql.append("			  AND ds1.shop_id = ds.shop_id  \n");
        sql.append("			  AND ds1.product_division = 5  \n");
        //Luc start add 20160112 #46345
        sql.append("			 and ds1.product_value <> 0 \n");
        //Luc start end 20160112 #46345
        sql.append("			  AND ds1.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "' )  \n"); //-- dk check neu c?ng ng?y mua th? check ng?y insert_date
        sql.append("	AND EXISTS  \n");
        sql.append("		   (SELECT 1  \n");
        sql.append("			FROM data_sales ds1  \n");
        sql.append("			inner join data_contract dc1 on dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is null \n");
        sql.append("			INNER JOIN data_sales_detail dsd1 ON ds1.slip_no = dsd1.slip_no  \n");
        sql.append("			AND ds1.shop_id = dsd1.shop_id  \n");
        sql.append("			AND customer_id = ds.customer_id  \n");
        sql.append("			AND ds1.insert_date =  \n");
        sql.append("			  (SELECT min(ds2.insert_date)  \n");
        sql.append("			   FROM data_sales ds2  \n");
        sql.append("			   INNER JOIN data_sales_detail dsd2 ON ds2.slip_no = dsd2.slip_no  \n");
        sql.append("			   AND ds2.shop_id = dsd2.shop_id  \n");
        sql.append("			   WHERE ds2.customer_id = ds.customer_id  \n");
        sql.append("				 AND ds2.shop_id = ds.shop_id  \n");
        sql.append("				 AND dsd2.product_division = 5  \n");
        //Luc start add 20160112 #46345
        sql.append("				 and dsd2.product_value <> 0  \n");
        //Luc start end 20160112 #46345
        sql.append("				 AND ds2.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'))  \n");
        sql.append("	   GROUP BY s.shop_id,  \n");
        sql.append("				s.shop_name,  \n");
        sql.append("				ds.sales_date,  \n");
        sql.append("				mc.customer_id,  \n");
        sql.append("				mc.customer_no,  \n");
        sql.append("				mc.customer_name1,  \n");
        sql.append("				mc.customer_name2,  \n");
        sql.append("				ds.detail_staff_id,  \n");
        sql.append("				st.staff_no,  \n");
        sql.append("				st.staff_name1,  \n");
        sql.append("				st.staff_name2)t  \n");
        
        //Luc start add 20160111 #46345
        sql.append("	 where (SELECT coalesce(sum(CASE WHEN (t.detail_staff_id IS NULL  \n");
        sql.append("			AND detail_staff_id IS NULL)  \n");
        sql.append("			 OR (t.detail_staff_id IS NOT NULL  \n");
        sql.append("			 AND detail_staff_id = t.detail_staff_id) THEN \n");
        if ( paramBean.getTaxType() == paramBean.TAX_TYPE_UNIT) {
            sql.append("		discount_detail_value_in_tax   \n");   
        }else {
            sql.append("		discount_detail_value_no_tax   \n");   
        }
        sql.append("		ELSE 0 END),0)  \n");
        sql.append("	   FROM data_sales ds1  \n");
        sql.append("	   INNER JOIN view_data_sales_detail_valid dsd1 ON ds1.shop_id = dsd1.shop_id  \n");
        sql.append("	   AND ds1.slip_no = dsd1.slip_no  \n");
        sql.append("	   and dsd1.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("	   inner join data_sales_detail dsd2 on dsd2.shop_id = ds1.shop_id and dsd2.slip_no = ds1.slip_no and dsd1.slip_detail_no = dsd2.slip_detail_no \n");
        sql.append("	   WHERE ds1.customer_id =t.customer_id  \n");
        sql.append("		 AND ds1.shop_id = t.shop_id  \n");
        sql.append("		 AND dsd1.product_division = 5  \n");
        sql.append("		 AND ds1.sales_date = t.sales_date  \n");
        sql.append("		 and ds1.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
	sql.append("             and ds1.delete_date is null   \n");
        sql.append("             and not exists (select 1 from  data_contract dc1 where dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is not null  \n");
	sql.append("             and dc1.product_id = dsd1.product_id and dsd2.contract_detail_no = dc1.contract_detail_no )  \n");
        sql.append("		 AND ds1.insert_date = t.insert_date) <> 0  \n");
        //Luc end add 20160111 #46345
        
        sql.append("	ORDER BY t.sales_date  \n");
                
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        ConnectionWrapper cw = SystemInfo.getConnection();
        ResultSetWrapper rs = new ResultSetWrapper();
        
        try {
            //êVãKóàìXãqêîÅiêlÅj
            Integer newCustomerNum = 0;
            rs = cw.executeQuery(getNewCustomerNumNoCourse(paramBean, firstComingMotives));
            if (rs.next()) {
                newCustomerNum = rs.getInt("new_no_course");
            }
            rs.close();
            
            rs = cw.executeQuery(sql.toString());
            if (!rs.next()) {
                return false;
            }

            JExcelApi jx = new JExcelApi("ÉäÉ^Å[Éìó¶èWåv");
            jx.setTemplateFile("/reports/ÉäÉ^Å[Éìó¶èWåv.xls");
            jx.setValue(2, 3, paramBean.getTargetName());
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " Å` " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getStaffName());
            jx.setValue(2, 6, firstComingMotiveName);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 7, "ê≈î≤");
            }else {
                jx.setValue(2, 7, "ê≈çû");
            }
            //êVãKóàìXãqêîÅiêlÅj
            jx.setValue(1, 10, newCustomerNum);

            if (newCustomerNum <= 0) {
                //êVãKãqå_ñÒó¶Åi%Åj
                //å_ñÒêlêîÅÄêVãKóàìXêîÇ™1/0ÇÃÇÊÇ§Ç»èÍçáÇÕ100%Ç∆Ç∑ÇÈ
                jx.setValue(5, 10, 1);
            }

            int row = 13;
            rs.last();
            int num = 0;
            num = rs.getRow();

            //å_ñÒãqêîÅiêlÅj
            HashMap<Integer, String> customerMap = new HashMap<Integer, String>();
            rs.beforeFirst();
            while (rs.next()) {
                if (!customerMap.containsKey(rs.getInt("customer_id"))) {
                    customerMap.put(rs.getInt("customer_id"), rs.getString("customer_no"));
                }
            }
            jx.setValue(3, 10, customerMap.size());
            // if å_ñÒãqêîÅiêlÅj= 0 then å_ñÒãqíPâøÅiâ~Åj
            if ( num <= 0 ) {
                jx.setValue(7, 10, num);
            }

            if(num > 2) {
                jx.insertRow(row, num - 2);
            }

            rs.beforeFirst();
             while (rs.next()) {
                 //mergecell
                 jx.mergeCells(6, row, 9, row);
                // add data
                String staffFullName = "";
                String courseName    = "";
                String[] arrCourse ;
                courseName = rs.getString("course_name");
                arrCourse = courseName.split(", ");
                courseName = "";
                for (int i = 0;i < arrCourse.length;i ++ ) {
                    //arrCourse[i] == "" then i ++
                    if ( arrCourse[i].equals("")) {
                        continue;
                    }
                    courseName += arrCourse[i];
                    // set , 
                    if ( (i + 1) < arrCourse.length ) {
                        courseName +=", ";
                    }
                }
                staffFullName =  rs.getString("staff_name1")!= null ? rs.getString("staff_name1") + " ": "";
                staffFullName +=  rs.getString("staff_name2")!= null ? rs.getString("staff_name2"): "";

                jx.setValue(1, row, rs.getString("shop_name"));
                jx.setValue(2, row, format.format(rs.getDate("sales_date")));
                jx.setValue(3, row, rs.getString("customer_no"));
                jx.setValue(4, row, rs.getString("customer_name1") + " " + rs.getString("customer_name2") );
                jx.setValue(5, row, staffFullName);
                jx.setValue(6, row, courseName);
                jx.setValue(10, row, rs.getLong("price_value"));

                row ++ ;
             }
            if(num < 2) {
                jx.removeRow(row);
            }
            jx.openWorkbook();
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(1099),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    //èââÒóàìXãqêîÅiêlÅj
    private String getNewCustomerNumNoCourse(ReportParameterBean paramBean , Integer firstComingMotives) {
        StringBuilder sql = new StringBuilder();
        
        sql.append("  SELECT count(DISTINCT ds.customer_id) AS new_no_course  \n");
        sql.append("  FROM view_data_sales_detail_valid ds  \n");
        sql.append("  INNER JOIN mst_customer mc ON ds.customer_id = mc.customer_id  \n");
        sql.append("  WHERE ds.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("    AND ds.shop_id IN (" + paramBean.getShopIDList() + ")\n");
        if ( paramBean.getStaffId() != null) {
            sql.append("  and ds.detail_staff_id = " + paramBean.getStaffId() +"  \n");
        }
        if (firstComingMotives != null ) {
            sql.append("  and mc.first_coming_motive_class_id = " + firstComingMotives +"  \n");
        }
        sql.append("    AND mc.before_visit_num + get_visit_count(mc.customer_id,ds.sales_date) = 1  \n");
        sql.append("    AND mc.customer_no <> '0'  \n");
        sql.append("    AND ds.sales_date IS NOT NULL  \n");
        sql.append("    AND NOT EXISTS  \n");
        sql.append("      (SELECT 1  \n");
        sql.append("       FROM view_data_sales_detail_valid ds1  \n");
        sql.append("       inner join data_contract dc1 on dc1.shop_id = ds1.shop_id and dc1.slip_no = ds1.slip_no and dc1.delete_date is null \n");
        sql.append("       WHERE ds1.slip_no = ds.slip_no  \n");
        sql.append("         AND ds1.shop_id = ds.shop_id  \n");
        sql.append("         AND ds1.product_division = 5)  \n");
               
        return sql.toString();
    }

    /**
     * ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
     *
     * @return ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicy
     */
    public ContractRateReportPanelFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    /**
     * ã∆ñ±ïÒçêâÊñ ópFocusTraversalPolicy
     */
    private class ContractRateReportPanelFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponBusinessReportFocusTraversalPolicyÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(rdoNewContract)) {
                    return rdoContractRate;
            }else if (aComponent.equals(rdoContractRate)) {
                return rdoReturnRate;
            }else if (aComponent.equals(rdoReturnRate)) {
                return cmbShop;
            } else if (aComponent.equals(cmbShop)) {
                return cmbTargetPeriodStart;
            } else if (aComponent.equals(cmbTargetPeriodStart)) {
                return cmbTargetPeriodEnd;
            } else if (aComponent.equals(cmbTargetPeriodEnd)) {
                return cmbstaff;
            } else if (aComponent.equals(cmbstaff)) {
                return cmbFirstVisit;
            } else if (aComponent.equals(cmbFirstVisit)) {
                return rdoTaxUnit;
            }else if (aComponent.equals(rdoTaxUnit)) {
                return rdoTaxBlank;
            }
            return rdoNewContract;
        }

        /**
         * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB aContainer ÇÕ aComponent
         * ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
         *
         * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
         * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(rdoNewContract)) {
                    return rdoContractRate;
            }else if (aComponent.equals(rdoContractRate)) {
                return rdoReturnRate;
            }else if (aComponent.equals(rdoReturnRate)) {
                return cmbShop;
            } else if (aComponent.equals(cmbShop)) {
                return cmbTargetPeriodStart;
            } else if (aComponent.equals(cmbTargetPeriodStart)) {
                return cmbTargetPeriodEnd;
            } else if (aComponent.equals(cmbTargetPeriodEnd)) {
                return cmbstaff;
            } else if (aComponent.equals(cmbstaff)) {
                return cmbFirstVisit;
            } else if (aComponent.equals(cmbFirstVisit)) {
                return rdoTaxUnit;
            }else if (aComponent.equals(rdoTaxUnit)) {
                return rdoTaxBlank;
            }
            return rdoNewContract;
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer êÊì™ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getFirstComponent(Container aContainer) {
            return rdoNewContract;
        }

        /**
         * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ
         * Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
         *
         * @param aContainer aContainer - ç≈å„ÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getLastComponent(Container aContainer) {
            return rdoTaxBlank;
        }

        /**
         * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB aContainer
         * ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
         *
         * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component
         * Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
         * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component
         * Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
         */
        public Component getDefaultComponent(Container aContainer) {
            return rdoNewContract;
        }

        /**
         * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB show() Ç‹ÇΩÇÕ setVisible(true)
         * ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
         * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
         * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
         * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
         *
         * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
         * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
         */
    }
}
