/*
 * DailySalesReportPanelTom.java
 *
 * Created on 2008/09/16, 11:53
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.hair.report.logic.ReportGeneratorLogic;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.hair.account.HairInputAccount;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.swing.*;
import com.geobeck.sql.*;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.awt.Cursor;

import javax.swing.*;
import java.util.*;
import java.text.SimpleDateFormat;

import com.geobeck.sosia.pos.hair.report.logic.DailySalesReportLogic;
import com.geobeck.sosia.pos.hair.report.logic.IndividualReportLogic;
import com.geobeck.sosia.pos.hair.report.logic.ShopRankingReportLogic;

/**
 *
 * @author  trino
 */
public class DailySalesReportPanelTom extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
    
    private int shopId;
    private boolean isLoading;
    
    private final int ERROR_NOEXIT  = 1;
    private final int ERROR_NOCLOSE = 2;
    private final int ERROR_NOSTAFF = 3;
    private final int ERROR_INVALID_TIME = 4;
    
    /**
     * Creates new form DailySalesReportPanelTom
     */
    public DailySalesReportPanelTom()
    {
        initComponents();
        addMouseCursorChange();

        ftp	= new LocalFocusTraversalPolicy();
        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        
        isLoading = true;
        this.setTitle("日計売上");
        this.setPath("帳票出力");
        this.setSize(600,450);
        SystemInfo.initGroupShopComponents(cmbshop, 2);
        this.initialize();
        isLoading = false;
   
    } 
    
    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange()
    {
        SystemInfo.addMouseCursorChange(btnPDF);
        SystemInfo.addMouseCursorChange(btnExcel);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        btnReportType = new javax.swing.ButtonGroup();
        radioDaily = new javax.swing.JRadioButton();
        radioPersonal = new javax.swing.JRadioButton();
        radioWork = new javax.swing.JRadioButton();
        btnPDF = new javax.swing.JButton();
        btnExcel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmbOutputDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        jLabel2 = new javax.swing.JLabel();
        cmbStaffName = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        scrollPaneMemo = new javax.swing.JScrollPane();
        txtMemo = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        txtWeather = new com.geobeck.swing.JFormattedTextFieldEx();
        txtStaffNo = new com.geobeck.swing.JFormattedTextFieldEx();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtStaffNoOutput = new com.geobeck.swing.JFormattedTextFieldEx();
        cmbStaffNameOutput = new javax.swing.JComboBox();
        txtExitTime = new JFormattedTextField(
            FormatterCreator.createMaskFormatter("##:##",null,null));
        txtCloseTime = new JFormattedTextField( FormatterCreator.createMaskFormatter("##:##",null,null));
        jLabel8 = new javax.swing.JLabel();
        cmbshop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();

        btnReportType.add(radioDaily);
        radioDaily.setSelected(true);
        radioDaily.setText("\u696d\u52d9\u65e5\u5831");
        radioDaily.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        radioDaily.setContentAreaFilled(false);
        radioDaily.setMargin(new java.awt.Insets(0, 0, 0, 0));
        radioDaily.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioDailyStateChanged(evt);
            }
        });
        radioDaily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioDailyActionPerformed(evt);
            }
        });

        btnReportType.add(radioPersonal);
        radioPersonal.setText("\u500b\u4eba\u5225\u96c6\u8a08\u8868");
        radioPersonal.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        radioPersonal.setContentAreaFilled(false);
        radioPersonal.setMargin(new java.awt.Insets(0, 0, 0, 0));
        radioPersonal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioPersonalActionPerformed(evt);
            }
        });

        btnReportType.add(radioWork);
        radioWork.setText("\u696d\u52d9\u5831\u544a\u66f8");
        radioWork.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        radioWork.setContentAreaFilled(false);
        radioWork.setMargin(new java.awt.Insets(0, 0, 0, 0));
        radioWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioWorkActionPerformed(evt);
            }
        });

        btnPDF.setIcon(SystemInfo.getImageIcon("/button/print/output_pdf_off.jpg"));
        btnPDF.setBorderPainted(false);
        btnPDF.setContentAreaFilled(false);
        btnPDF.setPressedIcon(SystemInfo.getImageIcon("/button/print/output_pdf_on.jpg"));
        btnPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPDFActionPerformed(evt);
            }
        });

        btnExcel.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnExcel.setBorderPainted(false);
        btnExcel.setContentAreaFilled(false);
        btnExcel.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        jLabel1.setText("\u65e5\u4ed8");

        cmbOutputDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cmbOutputDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbOutputDateItemStateChanged(evt);
            }
        });

        jLabel2.setText("\u62c5\u5f53\u8005");

        cmbStaffName.setMaximumRowCount(12);
        cmbStaffName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cmbStaffName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStaffNameActionPerformed(evt);
            }
        });

        jLabel3.setText("\u5929\u6c17");

        jLabel4.setText("(\u671d\u793c\u30fb\u7d42\u793c\u30fb\u610f\u898b\u30fb\u5831\u544a)");

        txtMemo.setColumns(20);
        txtMemo.setRows(5);
        txtMemo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        scrollPaneMemo.setViewportView(txtMemo);

        jLabel5.setText("\u6765\u5ba2\u9000\u5e97\u6642\u9593");

        txtWeather.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtWeather.setColumns(14);

        txtStaffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtStaffNo.setColumns(4);
        txtStaffNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStaffNoFocusLost(evt);
            }
        });

        jLabel6.setText("\u55b6\u696d\u7d42\u4e86\u6642\u9593");

        jLabel7.setText("\u6700\u7d42\u78ba\u8a8d\u8005");

        txtStaffNoOutput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtStaffNoOutput.setColumns(4);
        txtStaffNoOutput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStaffNoOutputFocusLost(evt);
            }
        });

        cmbStaffNameOutput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cmbStaffNameOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStaffNameOutputActionPerformed(evt);
            }
        });

        txtExitTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtExitTime.setColumns(10);
        txtExitTime.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtCloseTime.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtCloseTime.setColumns(4);
        txtCloseTime.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel8.setText("\u5e97\u8217\u540d");

        cmbshop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        cmbshop.setMaximumRowCount(12);
        cmbshop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbshopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtWeather, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtStaffNo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbStaffName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cmbshop, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                .addComponent(cmbOutputDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))))
                    .addComponent(jLabel7)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtExitTime, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCloseTime, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtStaffNoOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addComponent(cmbStaffNameOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(384, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneMemo, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addGap(279, 279, 279))
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel4)
                .addContainerGap(484, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addContainerGap(592, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radioDaily)
                .addGap(31, 31, 31)
                .addComponent(radioPersonal)
                .addGap(22, 22, 22)
                .addComponent(radioWork)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                .addComponent(btnPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioDaily, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioPersonal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioWork, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPDF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbshop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbOutputDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStaffNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbStaffName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtWeather, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addGap(10, 10, 10)
                .addComponent(scrollPaneMemo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtExitTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCloseTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStaffNoOutput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbStaffNameOutput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(78, 78, 78))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnExcel, btnPDF});

    }// </editor-fold>//GEN-END:initComponents

	private void btnPDFActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPDFActionPerformed
	{//GEN-HEADEREND:event_btnPDFActionPerformed

            btnPDF.setCursor(null);

            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                this.performButtonPress(ReportGeneratorLogic.EXPORT_FILE_PDF);

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }

	}//GEN-LAST:event_btnPDFActionPerformed

    private void cmbshopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbshopActionPerformed
    {//GEN-HEADEREND:event_cmbshopActionPerformed
        this.getSelectedShopId();
	    
        if( !isLoading )
        {
            this.getDateData();
            this.getInCharge();
        }
    }//GEN-LAST:event_cmbshopActionPerformed

    private void txtStaffNoFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtStaffNoFocusLost
    {//GEN-HEADEREND:event_txtStaffNoFocusLost
        this.getInCharge();
    }//GEN-LAST:event_txtStaffNoFocusLost

    private void txtStaffNoOutputFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtStaffNoOutputFocusLost
    {//GEN-HEADEREND:event_txtStaffNoOutputFocusLost
           this.getInCharge();
    }//GEN-LAST:event_txtStaffNoOutputFocusLost

    //日付が変える
    private void cmbOutputDateItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_cmbOutputDateItemStateChanged
    {//GEN-HEADEREND:event_cmbOutputDateItemStateChanged
       this.getDateData();
       this.getInCharge();
    }//GEN-LAST:event_cmbOutputDateItemStateChanged

    //担当者のエベント
    private void cmbStaffNameOutputActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbStaffNameOutputActionPerformed
    {//GEN-HEADEREND:event_cmbStaffNameOutputActionPerformed
        if( this.radioDaily.isSelected() )
        {
            MstStaff ms = (MstStaff)this.cmbStaffNameOutput.getSelectedItem();

            if (ms != null) {
                if (ms.getStaffID() != null) {
                    txtStaffNoOutput.setText(ms.getStaffNo());
                } else {
                    txtStaffNoOutput.setText("");
                }
            }
        }
    }//GEN-LAST:event_cmbStaffNameOutputActionPerformed

    //最終確認者のエベント
    private void cmbStaffNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbStaffNameActionPerformed
    {//GEN-HEADEREND:event_cmbStaffNameActionPerformed

        if( this.radioPersonal.isSelected() )
        {
            MstStaff ms = (MstStaff)cmbStaffName.getSelectedItem();

            if (ms != null) {
                if (ms.getStaffID() != null) {
                    txtStaffNo.setText(ms.getStaffNo());
                } else {
                    txtStaffNo.setText("");
                }
            }
        }

    }//GEN-LAST:event_cmbStaffNameActionPerformed

    public JButton getBtnExcel()
    {
        return btnExcel;
    }

    // Excel出力
    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnExcelActionPerformed
    {//GEN-HEADEREND:event_btnExcelActionPerformed

        btnExcel.setCursor(null);
        
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            performButtonPress(ReportGeneratorLogic.EXPORT_FILE_XLS);  

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        
    }//GEN-LAST:event_btnExcelActionPerformed

	private void performButtonPress(int nExportType)
	{
		int nRet;

		nRet = ReportGeneratorLogic.RESULT_SUCCESS;

		if( this.radioDaily.isSelected())
		{
			nRet = getInputParametersDaily(nExportType);
		}
		else if( this.radioPersonal.isSelected() )
		{
			nRet = getInputParametersPersonal(nExportType);
		}
		else if( this.radioWork.isSelected())
		{
			nRet = getInputParametersShopRanking(nExportType);
		}

		switch (nRet)
		{
			case ReportGeneratorLogic.RESULT_DATA_NOTHNIG:
				// データなし
				MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(4001),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
				
				break;
				
			case ReportGeneratorLogic.RESULT_ERROR:
				// 予期せぬエラー
				MessageDialog.showMessageDialog( this,
					MessageUtil.getMessage(1099),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE );
				
				break;
		}
	}

    //店舗名を取得する
    private void getSelectedShopId()
    {
        MstShop shop = new MstShop();    
        if( 0 <= this.cmbshop.getSelectedIndex())
        {
            shop = (MstShop)this.cmbshop.getSelectedItem();
            if( shop != null ){
                this.shopId = shop.getShopID();
                //System.out.println("getSelectedShopId -> " + this.shopId);
            }          
        }  
    }

    private MstShop getSelectedShop()
    {
	    if(0 <= cmbshop.getSelectedIndex())
		    return	(MstShop)cmbshop.getSelectedItem();
	    else
		    return	null;
    }
	
    //業務日報のパラメータを取得
    private int getInputParametersDaily(int nExportType)
    {
          boolean getCheck = true;
          int err = 0;

          
          DailySalesReportLogic report = new DailySalesReportLogic();
          int hour = 0;
          int min  = 0;
          
          Calendar calendar = Calendar.getInstance();
          
          //Shop ID
          report.setShopId(this.shopId);
	  
	  //Shop
	  report.setShop(this.getSelectedShop());
	  
          //日付
          report.setOutputDate(this.cmbOutputDate.getDate());
          // 天気
          report.setWeather(this.txtWeather.getText());
          //メモ
          report.setMemo(this.txtMemo.getText());
          
          // 最終確認者  
          if( this.txtStaffNoOutput.getText().isEmpty() )
          {
              //System.out.println(" staff Id is empty ");
              getCheck = false;
              err = ERROR_NOSTAFF;
          }
          else
          {        
                MstStaff ms = (MstStaff)cmbStaffNameOutput.getSelectedItem();
                report.setStaffId(ms.getStaffID());
          }
          
          //退店時間       
          if(getCheck )
          {
              if( ! this.txtExitTime.getText().equals("  :  ") )
              {
                  hour = Integer.parseInt(this.txtExitTime.getText().replaceAll(":.+", ""));
                  min  = Integer.parseInt(this.txtExitTime.getText().replaceAll(".+:", ""));
              
                  //System.out.println(hour + " :: " + min );
              
                  if( (24 >= hour && hour >= 0 ) && (60 >= min && min >= 0 ))
                  {        
                        calendar.setTime(this.cmbOutputDate.getDate());
                        calendar.set(calendar.HOUR_OF_DAY,hour);
                        calendar.set(Calendar.MINUTE, min);
                        report.setExitTime(calendar.getTime());
                  }
                  else
                  {
                        getCheck = false;
                        err = ERROR_INVALID_TIME;
                  }
             }
             else
             {
                   getCheck = false;
                   err = ERROR_NOEXIT;
             } 
          }
         
          
          //閉店時間
          if(getCheck )
          {
              if(  ! this.txtCloseTime.getText().equals("  :  ") )
              {
                   hour = Integer.parseInt(this.txtCloseTime.getText().replaceAll(":.+", ""));
                   min  = Integer.parseInt(this.txtCloseTime.getText().replaceAll(".+:", ""));
               
                   if((24 >= hour && hour >= 0 ) && (60 >= min && min >= 0 ))
                   {
                       calendar.setTime(this.cmbOutputDate.getDate());
                       calendar.set(Calendar.HOUR_OF_DAY, hour);
                       calendar.set(Calendar.MINUTE, min);
                       report.setCloseTime(calendar.getTime());
                   }
                   else
                   {
                       getCheck = false;
                       err = ERROR_INVALID_TIME;
                   }
              }
              else
              {
                   //System.out.println(" close is empty ");
                   getCheck = false;
                   err = ERROR_NOCLOSE;
              }
          }

          if( getCheck )
          {
              return report.viewDailySalesReport(nExportType);
          }
          else
          {
              this.displayErrorMessage(err);
			  return ReportGeneratorLogic.RESULT_SUCCESS;
          }
    }
    
    //個人別集計表のパラメータを取得
    private int getInputParametersPersonal(int nExportType)
    {
        IndividualReportLogic rpt = new IndividualReportLogic();

		rpt.setShopId(this.shopId);
		rpt.setShop(this.getSelectedShop());

                rpt.setOutputDate(this.cmbOutputDate.getDate());


//		rpt.setStaffId(Integer.parseInt(this.txtStaffNo.getText()));

//		if (this.txtStaffNo.getText())
		int index = this.cmbStaffName.getSelectedIndex() ;
		rpt.setStaff((index == 0) ? null : (MstStaff)this.cmbStaffName.getSelectedItem());
		rpt.setStaffList(cmbStaffName);
//		MstStaff ms = (MstStaff)this.cmbStaffName.getSelectedItem();

//		rpt.setStaffName(ms.getFullStaffName());
		return rpt.viewIndividualReport(nExportType);
    }

    //業務報告書
    private int getInputParametersShopRanking( int exportFileType )
	{
		ShopRankingReportLogic rpt;

		rpt = new ShopRankingReportLogic(this.cmbOutputDate.getDate());

        return rpt.generateReport( exportFileType );
    }
    //画面初期化
    private void initialize()
    {
         //店舗ID
         this.getSelectedShopId();
	 
	 //店舗
	 this.getSelectedShop();

         //業務日報
         this.radioDaily.setSelected(true);
         //日付
         this.cmbOutputDate.setDate(new Date());
         //担当者
         this.txtStaffNo.setEnabled(false);
         this.cmbStaffName.setEnabled(false);
           //最終確認者
         initCmbInCharge();
         getDateData();
         getInCharge();
    }
    
    //担当者または確認者の情報を指定
    private void getInCharge()
    {
        int itemCnt = 0;
        //業務日報の場合
        if( this.radioDaily.isSelected() )
        {
            if (!txtStaffNoOutput.getText().equals("")) {
                this.setStaffOutput(txtStaffNoOutput.getText());
            } else {
                cmbStaffNameOutput.setSelectedIndex(-1);
            }

/*
            itemCnt = this.cmbStaffNameOutput.getItemCount();
            for(int i=1; i < itemCnt ; i++)
            {
                MstStaff ms = (MstStaff)this.cmbStaffNameOutput.getItemAt(i);
                if(ms.getStaffID().toString().equals(this.txtStaffNoOutput.getText())){
                    this.cmbStaffNameOutput.setSelectedIndex(i);
                    break;
                }
                    
            }
*/
        }
        
        //個人別集計表の場合
        else if( this.radioPersonal.isSelected())
        {
            if (!txtStaffNo.getText().equals("")) {
                this.setStaff(txtStaffNo.getText());
            } else {
                cmbStaffName.setSelectedIndex(-1);
            }

/*            
            itemCnt = this.cmbStaffName.getItemCount();
            for(int i= 1; i < itemCnt ; i++ )
            {
                MstStaff ms = (MstStaff)this.cmbStaffName.getItemAt(i);
                if(ms.getStaffID().toString().equals(this.txtStaffNo.getText())){
                    this.cmbStaffName.setSelectedIndex(i);
                    break;
                }
            }
*/            
            
        }
    }
    
    private void setStaff(String staffNo)
    {
        cmbStaffName.setSelectedIndex(-1);

        for (int i = 1; i < cmbStaffName.getItemCount(); i++) {
            if (((MstStaff)cmbStaffName.getItemAt(i)).getStaffNo().equals(staffNo)) {
                cmbStaffName.setSelectedIndex(i);
                break;
            }
        }
    }

    private void setStaffOutput(String staffNo)
    {
        cmbStaffNameOutput.setSelectedIndex(-1);

        for (int i = 1; i < cmbStaffNameOutput.getItemCount(); i++) {
            if (((MstStaff)cmbStaffNameOutput.getItemAt(i)).getStaffNo().equals(staffNo)) {
                cmbStaffNameOutput.setSelectedIndex(i);
                break;
            }
        }
    }
    
    //画面の情報DBから取得
    private void getDateData()
    {
         SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
         SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
         
         String strdate = dateFormat.format(this.cmbOutputDate.getDate()) + " " + "00:00:00";
         
         String sql = "select a.*, b.staff_no from data_bizreport_log a join mst_staff b using(staff_id)" + "\n" +
                      "where a.output_date = '" + dateFormat.format(this.cmbOutputDate.getDate()) +"' AND a.shop_id = " + this.shopId +
                      "AND a.delete_date is null";
                
         ConnectionWrapper dbConnection = SystemInfo.getConnection();
         
         try
         {
             ResultSetWrapper rs = dbConnection.executeQuery(sql);
             if( rs.next())
             {
				 /*
                 if( this.radioPersonal.isSelected() )
                 {
                     this.txtStaffNo.setText(rs.getString("staff_id"));
                 }
                 else */if( this.radioDaily.isSelected() )
                 {
                     this.txtWeather.setText(rs.getString("weather"));
                     this.txtMemo.setText(rs.getString("memo"));
                     this.txtStaffNoOutput.setText(rs.getString("staff_no"));
                     this.txtExitTime.setText(String.format("%1$tH:%1$tM", rs.getTimestamp("exit_time")));
                     this.txtCloseTime.setText(String.format("%1$tH:%1$tM", rs.getTimestamp("close_time")));
                 }
             }
             else
             {
                 this.txtWeather.setText("");
                 this.txtMemo.setText("");
                 this.txtStaffNo.setText("");
                 this.txtStaffNoOutput.setText("");
                 this.txtExitTime.setText("");
                 this.txtCloseTime.setText("");
                 if( this.radioPersonal.isSelected() ){
                     this.cmbStaffName.setSelectedIndex(-1);
                 }
                 else if( this.radioDaily.isSelected() ) {
                    this.cmbStaffNameOutput.setSelectedIndex(-1);
                 }
             }
         }
         catch(Exception e)
         {
             System.out.println(e.getCause().toString());
         }
    }
    
    //業務日報　    →　最終確認者
    //個人別集計表　→　担当者
    private void initCmbInCharge()
    {
        //初期化
        this.cmbStaffName.removeAllItems();
        this.cmbStaffNameOutput.removeAllItems();
        
        HairInputAccount hacct = new HairInputAccount();
        for(MstStaff ms : hacct.getStaffs()) 
        {
            if( this.radioDaily.isSelected())
            {
                this.cmbStaffNameOutput.addItem(ms);
            }    
            else if( this.radioPersonal.isSelected())
            {
                this.cmbStaffName.addItem(ms);
            }
        }
    }
    
    //業務報告書
    private void radioWorkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radioWorkActionPerformed
    {//GEN-HEADEREND:event_radioWorkActionPerformed

        if(this.radioWork.isSelected())
        {
            this.cmbOutputDate.setEnabled(this.radioWork.isSelected());
            this.txtStaffNo.setEnabled(!this.radioWork.isSelected());
            this.cmbStaffName.setEnabled(!this.radioWork.isSelected());
            this.txtWeather.setEnabled(!this.radioWork.isSelected());
            this.txtMemo.setEnabled(!this.radioWork.isSelected());
            this.txtExitTime.setEnabled(!this.radioWork.isSelected());
            this.txtCloseTime.setEnabled(!this.radioWork.isSelected());
            this.txtStaffNoOutput.setEnabled(!this.radioWork.isSelected());
            this.cmbStaffNameOutput.setEnabled(!this.radioWork.isSelected());

            btnPDF.setEnabled(false);
        }
    }//GEN-LAST:event_radioWorkActionPerformed

    private void radioDailyStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_radioDailyStateChanged
    {//GEN-HEADEREND:event_radioDailyStateChanged
        if(this.radioDaily.isSelected())
        {
            this.cmbOutputDate.setEnabled(this.radioDaily.isSelected());
            this.txtStaffNo.setEnabled(!this.radioDaily.isSelected());
            this.cmbStaffName.setEnabled(!this.radioDaily.isSelected());
            this.txtWeather.setEnabled(this.radioDaily.isSelected());
            this.txtMemo.setEnabled(this.radioDaily.isSelected());
            this.txtExitTime.setEnabled(this.radioDaily.isSelected());
            this.txtCloseTime.setEnabled(this.radioDaily.isSelected());
            this.txtStaffNoOutput.setEnabled(this.radioDaily.isSelected());
            this.cmbStaffNameOutput.setEnabled(this.radioDaily.isSelected());
           
            btnPDF.setEnabled(true);
        }
    }//GEN-LAST:event_radioDailyStateChanged

    //個人別集計表
    private void radioPersonalActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radioPersonalActionPerformed
    {//GEN-HEADEREND:event_radioPersonalActionPerformed
        if( this.radioPersonal.isSelected())
        {
            this.cmbOutputDate.setEnabled(this.radioPersonal.isSelected());
            this.txtStaffNo.setEnabled(this.radioPersonal.isSelected());
            this.cmbStaffName.setEnabled(this.radioPersonal.isSelected());
            this.txtWeather.setEnabled(!this.radioPersonal.isSelected());
            this.scrollPaneMemo.setEnabled(!this.radioPersonal.isSelected());
            this.txtMemo.setEnabled(!this.radioPersonal.isSelected());
            this.txtExitTime.setEnabled(!this.radioPersonal.isSelected());
            this.txtCloseTime.setEnabled(!this.radioPersonal.isSelected());
            this.txtStaffNoOutput.setEnabled(!this.radioPersonal.isSelected());
            this.cmbStaffNameOutput.setEnabled(!this.radioPersonal.isSelected());

            this.initCmbInCharge();
            this.getDateData();
            this.getInCharge();      
           
            btnPDF.setEnabled(true);
        }
    }//GEN-LAST:event_radioPersonalActionPerformed

    // 業務日報
    private void radioDailyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radioDailyActionPerformed
    {//GEN-HEADEREND:event_radioDailyActionPerformed
       if(this.radioDaily.isSelected())
       {
           this.cmbOutputDate.setEnabled(this.radioDaily.isSelected());
           this.txtStaffNo.setEnabled(!this.radioDaily.isSelected());
           this.cmbStaffName.setEnabled(!this.radioDaily.isSelected());
           this.txtWeather.setEnabled(this.radioDaily.isSelected());
           this.txtMemo.setEnabled(this.radioDaily.isSelected());
           this.txtExitTime.setEnabled(this.radioDaily.isSelected());
           this.txtCloseTime.setEnabled(this.radioDaily.isSelected());
           this.txtStaffNoOutput.setEnabled(this.radioDaily.isSelected());
           this.cmbStaffNameOutput.setEnabled(this.radioDaily.isSelected());
           
           this.initCmbInCharge();
           this.getDateData();
           this.getInCharge();
       }
    }//GEN-LAST:event_radioDailyActionPerformed
    
    private void displayErrorMessage(int msgType)
    {
        switch(msgType)
        {
            case ERROR_NOEXIT:
                    MessageDialog.showMessageDialog( this.getParentFrame(),
                    "来客退店時間を入力してください。",
                    JOptionPane.ERROR_MESSAGE );
            break;
            case ERROR_NOCLOSE:
                  MessageDialog.showMessageDialog( this.getParentFrame(),
                    "営業終了時間を入力してください。",
                    JOptionPane.ERROR_MESSAGE );
            break;
            case ERROR_NOSTAFF:
                if(this.radioDaily.isSelected())
                {
                    MessageDialog.showMessageDialog( this.getParentFrame(),
                    "最終確認者を選んでしてください。",
                    JOptionPane.ERROR_MESSAGE );
                }
                else if( this.radioPersonal.isSelected())
                {
                    MessageDialog.showMessageDialog( this.getParentFrame(),
                    "担当者を選んでしてください。",
                    JOptionPane.ERROR_MESSAGE );
                }
             break;
            case ERROR_INVALID_TIME:
                  MessageDialog.showMessageDialog( this.getParentFrame(),
                    "Invalid Time !!",
                    JOptionPane.ERROR_MESSAGE );
             break;
                    
        }
    }
    // <editor-fold defaultstate="collapsed" desc=" Variables declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnPDF;
    private javax.swing.ButtonGroup btnReportType;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbOutputDate;
    private javax.swing.JComboBox cmbStaffName;
    private javax.swing.JComboBox cmbStaffNameOutput;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cmbshop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JRadioButton radioDaily;
    private javax.swing.JRadioButton radioPersonal;
    private javax.swing.JRadioButton radioWork;
    private javax.swing.JScrollPane scrollPaneMemo;
    private javax.swing.JFormattedTextField txtCloseTime;
    private javax.swing.JFormattedTextField txtExitTime;
    private javax.swing.JTextArea txtMemo;
    private com.geobeck.swing.JFormattedTextFieldEx txtStaffNo;
    private com.geobeck.swing.JFormattedTextFieldEx txtStaffNoOutput;
    private com.geobeck.swing.JFormattedTextFieldEx txtWeather;
    // End of variables declaration//GEN-END:variables
 // </editor-fold>
    
    private LocalFocusTraversalPolicy   ftp;
    /**
     * FocusTraversalPolicyを取得する。
     * @return FocusTraversalPolicy
     */
    public LocalFocusTraversalPolicy getFocusTraversalPolicy()
    {
        return  ftp;
    }
    
    /**
     * FocusTraversalPolicy
     */
    private class LocalFocusTraversalPolicy
                    extends FocusTraversalPolicy
    {
        ArrayList<Component> controls = new ArrayList<Component>();
        public LocalFocusTraversalPolicy()
        {
            controls.add(cmbshop);
            controls.add(cmbOutputDate);
            controls.add(txtStaffNo);

            controls.add(txtWeather);
            controls.add(txtMemo);
            controls.add(txtExitTime);
            controls.add(txtCloseTime);
            controls.add(txtStaffNoOutput);
            
            for( Component control : controls ){
                control.addKeyListener(SystemInfo.getMoveNextField());
                control.addFocusListener(SystemInfo.getSelectText());
            }
            
            // 最後に先頭を再度登録(同時にEnabledがFalseにならないところまで重複登録)
            controls.add(cmbshop);
            controls.add(cmbOutputDate);
        };
            
        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。
         */
        public Component getComponentAfter(Container aContainer,
                                           Component aComponent)
        {
            boolean find = false;
            for(Component co : controls){
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。
         */
        public Component getComponentBefore(Container aContainer,
                                            Component aComponent)
        {
            boolean find = false;
            for( int ii = controls.size(); ii>0; ii-- ){
                Component co = controls.get(ii-1);
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。
         */
        public Component getFirstComponent(Container aContainer)
        {
            return getDefaultComponent(aContainer);
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。
         */
        public Component getLastComponent(Container aContainer)
        {
            return getComponentBefore(aContainer, controls.get(0));
        }
        
        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。
         */
        public Component getDefaultComponent(Container aContainer)
        {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
        
        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
         */
        public Component getInitialComponent(Window window)
        {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
    }
    
    
}
