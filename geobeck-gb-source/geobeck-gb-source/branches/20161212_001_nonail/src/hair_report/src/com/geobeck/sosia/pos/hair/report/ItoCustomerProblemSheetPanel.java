/*
 * ReappearancePredictionPanel.java
 *
 * Created on 2010/03/05, 12:00
 */
package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.hair.report.util.JPOIApiSaleTransittion;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.ibm.icu.text.SimpleDateFormat;
import java.awt.*;
import java.util.*;
import javax.swing.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.mail.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.util.SQLUtil;
import java.math.BigDecimal;
import java.sql.SQLException;
import javax.swing.text.JTextComponent;
import javax.swing.text.PlainDocument;
import org.apache.commons.lang.math.NumberUtils;

/**
 * k
 *
 * @author geobeck
 */
public class ItoCustomerProblemSheetPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx implements SelectMailAddressDialogOpener {

    private Integer selectedAddress = -1;
    private ArrayList<MstCustomer> resultList = new ArrayList<MstCustomer>();
    private ReportParameterBean paramBean = null;
    private Calendar calStart = null;
    private Calendar calEnd = null;
    private Calendar calPrevStart = null;
    private Calendar calPrevEnd = null;
    private Calendar calBeforePrevStart = null;
    private Calendar calBeforePrevEnd = null;
    private MstShopSetting mss = MstShopSetting.getInstance();

    /**
     * Creates new form StaffShopRankingPanel
     */
    public ItoCustomerProblemSheetPanel() {
        initComponents();
        addMouseCursorChange();
        this.setSize(820, 680);
        this.setPath("帳票出力");
        this.setTitle("売上構成分析");
        this.setKeyListener();

        this.initChargeStaff();

        // 顧客共有の有無によりグループ表示を切り替える
        if (SystemInfo.getSetteing().isShareCustomer()) {
            SystemInfo.initGroupShopComponents(shop, 3);
        } else {
            SystemInfo.initGroupShopComponents(shop, 2);
        }

        //初期化処理
        this.init();

    }

    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(btnOutput);
        SystemInfo.addMouseCursorChange(btnMenuSetting);
    }

    public void setSelectedAddress(Integer selectedAddress) {
        this.selectedAddress = selectedAddress;
    }

    /**
     * 主担当を取得する
     */
    private void initChargeStaff() {
        chargeStaff.removeAllItems();

        MstStaffs staffs = new MstStaffs();

        staffs.setShopIDList(SystemInfo.getCurrentShop().getShopID().toString());

        try {
            staffs.load(SystemInfo.getConnection(), true);
        } catch (java.sql.SQLException e) {
            //SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        for (MstStaff ms : staffs) {
            chargeStaff.addItem(ms);
        }

        chargeStaff.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioGroup = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        btnOutput = new javax.swing.JButton();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        chargeStaffLabel = new javax.swing.JLabel();
        chargeStaffNo = new javax.swing.JTextField();
        chargeStaff = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        lblTargetDate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        endMonth = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        startMonth = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        staffCount1 = new com.geobeck.swing.JTextFieldEx();
        ((PlainDocument)staffCount1.getDocument()).setDocumentFilter(new CustomFilter(4, CustomFilter.NUMBER));
        jLabel9 = new javax.swing.JLabel();
        lblTargetDate1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        prevStaffCount1 = new com.geobeck.swing.JTextFieldEx();
        ((PlainDocument)prevStaffCount1.getDocument()).setDocumentFilter(new CustomFilter(4, CustomFilter.NUMBER));
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lblPrevPeriod = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        staffCount2 = new com.geobeck.swing.JTextFieldEx();
        ((PlainDocument)staffCount2.getDocument()).setDocumentFilter(new CustomFilter(4, CustomFilter.NUMBER));
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        prevStaffCount2 = new com.geobeck.swing.JTextFieldEx();
        ((PlainDocument)prevStaffCount2.getDocument()).setDocumentFilter(new CustomFilter(4, CustomFilter.NUMBER));
        jLabel13 = new javax.swing.JLabel();
        btnMenuSetting = new javax.swing.JButton();
        endYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
            endYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));
    startYear = new javax.swing.JComboBox();
    ((PlainDocument)((JTextComponent)
        startYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
    new CustomFilter(4, CustomFilter.NUMBER));
    lblTargetDate2 = new javax.swing.JLabel();
    optLast = new javax.swing.JRadioButton();
    optPrevYear = new javax.swing.JRadioButton();

    setFocusCycleRoot(true);

    pnlMain.setFocusCycleRoot(true);
    pnlMain.setOpaque(false);
    pnlMain.setLayout(null);

    btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnOutput.setBorderPainted(false);
    btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnOutput.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOutputActionPerformed(evt);
        }
    });
    pnlMain.add(btnOutput);
    btnOutput.setBounds(410, 10, 92, 25);

    shopLabel.setText("店舗");
    pnlMain.add(shopLabel);
    shopLabel.setBounds(0, 10, 50, 22);

    shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    shop.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            shopActionPerformed(evt);
        }
    });
    pnlMain.add(shop);
    shop.setBounds(70, 10, 210, 22);

    chargeStaffLabel.setText("主担当者");
    pnlMain.add(chargeStaffLabel);
    chargeStaffLabel.setBounds(0, 40, 50, 25);

    chargeStaffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    chargeStaffNo.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            chargeStaffNoFocusLost(evt);
        }
    });
    pnlMain.add(chargeStaffNo);
    chargeStaffNo.setBounds(70, 40, 40, 25);

    chargeStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    chargeStaff.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            chargeStaffActionPerformed(evt);
        }
    });
    pnlMain.add(chargeStaff);
    chargeStaff.setBounds(120, 40, 160, 24);

    jLabel2.setText("スタイリスト数");
    pnlMain.add(jLabel2);
    jLabel2.setBounds(60, 190, 70, 20);

    lblTargetDate.setText("比較対象");
    lblTargetDate.setFocusCycleRoot(true);
    pnlMain.add(lblTargetDate);
    lblTargetDate.setBounds(0, 155, 50, 22);

    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("〜");
    jLabel1.setFocusCycleRoot(true);
    pnlMain.add(jLabel1);
    jLabel1.setBounds(200, 120, 20, 22);

    jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel5.setText("年");
    pnlMain.add(jLabel5);
    jLabel5.setBounds(120, 120, 20, 22);

    endMonth.setMaximumRowCount(12);
    endMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    endMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    endMonth.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            endMonthActionPerformed(evt);
        }
    });
    pnlMain.add(endMonth);
    endMonth.setBounds(300, 120, 40, 22);

    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel6.setText("月");
    pnlMain.add(jLabel6);
    jLabel6.setBounds(180, 120, 20, 22);

    jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel7.setText("年");
    pnlMain.add(jLabel7);
    jLabel7.setBounds(280, 120, 20, 22);

    startMonth.setMaximumRowCount(12);
    startMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    startMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    startMonth.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            startMonthActionPerformed(evt);
        }
    });
    pnlMain.add(startMonth);
    startMonth.setBounds(140, 120, 40, 22);

    jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel8.setText("月");
    pnlMain.add(jLabel8);
    jLabel8.setBounds(340, 120, 20, 22);

    staffCount1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    staffCount1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    staffCount1.setText("0");
    staffCount1.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            staffCount1FocusLost(evt);
        }
    });
    pnlMain.add(staffCount1);
    staffCount1.setBounds(130, 190, 40, 22);

    jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel9.setText("人");
    pnlMain.add(jLabel9);
    jLabel9.setBounds(170, 190, 20, 22);

    lblTargetDate1.setText("比較期間");
    lblTargetDate1.setFocusCycleRoot(true);
    pnlMain.add(lblTargetDate1);
    lblTargetDate1.setBounds(0, 290, 50, 22);

    jLabel3.setText("スタイリスト数");
    pnlMain.add(jLabel3);
    jLabel3.setBounds(60, 320, 70, 20);

    prevStaffCount1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    prevStaffCount1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    prevStaffCount1.setText("0");
    prevStaffCount1.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            prevStaffCount1FocusLost(evt);
        }
    });
    pnlMain.add(prevStaffCount1);
    prevStaffCount1.setBounds(130, 320, 40, 22);

    jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel10.setText("人");
    pnlMain.add(jLabel10);
    jLabel10.setBounds(170, 320, 20, 22);

    jLabel14.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
    jLabel14.setForeground(java.awt.Color.gray);
    jLabel14.setText("━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    pnlMain.add(jLabel14);
    jLabel14.setBounds(0, 90, 490, 13);

    jLabel15.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
    jLabel15.setForeground(java.awt.Color.gray);
    jLabel15.setText("━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    pnlMain.add(jLabel15);
    jLabel15.setBounds(0, 260, 490, 13);

    lblPrevPeriod.setText("2008年04月 〜 2009年03月");
    pnlMain.add(lblPrevPeriod);
    lblPrevPeriod.setBounds(70, 290, 210, 20);

    jLabel16.setFont(new java.awt.Font("MS UI Gothic", 1, 12)); // NOI18N
    jLabel16.setForeground(java.awt.Color.gray);
    jLabel16.setText("━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
    pnlMain.add(jLabel16);
    jLabel16.setBounds(0, 400, 490, 13);

    jLabel4.setText("アシスタント数");
    pnlMain.add(jLabel4);
    jLabel4.setBounds(60, 220, 70, 20);

    staffCount2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    staffCount2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    staffCount2.setText("0");
    staffCount2.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            staffCount2FocusLost(evt);
        }
    });
    pnlMain.add(staffCount2);
    staffCount2.setBounds(130, 220, 40, 22);

    jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel11.setText("人");
    pnlMain.add(jLabel11);
    jLabel11.setBounds(170, 220, 20, 22);

    jLabel12.setText("アシスタント数");
    pnlMain.add(jLabel12);
    jLabel12.setBounds(60, 350, 70, 20);

    prevStaffCount2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    prevStaffCount2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    prevStaffCount2.setText("0");
    prevStaffCount2.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            prevStaffCount2FocusLost(evt);
        }
    });
    pnlMain.add(prevStaffCount2);
    prevStaffCount2.setBounds(130, 350, 40, 22);

    jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel13.setText("人");
    pnlMain.add(jLabel13);
    jLabel13.setBounds(170, 350, 20, 22);

    btnMenuSetting.setIcon(SystemInfo.getImageIcon("/button/common/menu_setting_off.jpg"));
    btnMenuSetting.setBorderPainted(false);
    btnMenuSetting.setPressedIcon(SystemInfo.getImageIcon("/button/common/menu_setting_on.jpg"));
    btnMenuSetting.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnMenuSettingActionPerformed(evt);
        }
    });
    pnlMain.add(btnMenuSetting);
    btnMenuSetting.setBounds(410, 100, 92, 25);

    endYear.setEditable(true);
    endYear.setMaximumRowCount(12);
    endYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    endYear.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            endYearActionPerformed(evt);
        }
    });
    pnlMain.add(endYear);
    endYear.setBounds(220, 120, 60, 22);

    startYear.setEditable(true);
    startYear.setMaximumRowCount(12);
    startYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    startYear.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            startYearActionPerformed(evt);
        }
    });
    pnlMain.add(startYear);
    startYear.setBounds(60, 120, 60, 22);

    lblTargetDate2.setText("対象期間");
    lblTargetDate2.setFocusCycleRoot(true);
    pnlMain.add(lblTargetDate2);
    lblTargetDate2.setBounds(0, 120, 50, 22);

    radioGroup.add(optLast);
    optLast.setText("直近対比");
    optLast.setOpaque(false);
    optLast.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            optLastActionPerformed(evt);
        }
    });
    pnlMain.add(optLast);
    optLast.setBounds(140, 155, 80, 21);

    radioGroup.add(optPrevYear);
    optPrevYear.setSelected(true);
    optPrevYear.setText("前年対比");
    optPrevYear.setOpaque(false);
    optPrevYear.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            optPrevYearActionPerformed(evt);
        }
    });
    pnlMain.add(optPrevYear);
    optPrevYear.setBounds(60, 155, 80, 21);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 606, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(44, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 443, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(39, Short.MAX_VALUE))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void endYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endYearActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_endYearActionPerformed

    private void startYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startYearActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_startYearActionPerformed

    private void btnMenuSettingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuSettingActionPerformed

        ItoMenuSettingPanel p = new ItoMenuSettingPanel();
        SwingUtil.openAnchorDialog(null, true, p, "メニュー設定", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER);
        p = null;
        System.gc();

    }//GEN-LAST:event_btnMenuSettingActionPerformed

    private void prevStaffCount2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_prevStaffCount2FocusLost
        this.checkStaffCount(prevStaffCount2);
    }//GEN-LAST:event_prevStaffCount2FocusLost

    private void staffCount2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_staffCount2FocusLost
        this.checkStaffCount(staffCount2);
    }//GEN-LAST:event_staffCount2FocusLost

    private void endMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endMonthActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_endMonthActionPerformed

    private void startMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMonthActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_startMonthActionPerformed

    private void prevStaffCount1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_prevStaffCount1FocusLost
        this.checkStaffCount(prevStaffCount1);
    }//GEN-LAST:event_prevStaffCount1FocusLost

    private void staffCount1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_staffCount1FocusLost
        this.checkStaffCount(staffCount1);
    }//GEN-LAST:event_staffCount1FocusLost

    private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed

        if (inputCheck()) {

            btnOutput.setCursor(null);
            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                this.NewTemplateExcel();

//                this.registStaffCount();

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }

    }//GEN-LAST:event_btnOutputActionPerformed

    private void chargeStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargeStaffActionPerformed

        MstStaff ms = (MstStaff) chargeStaff.getSelectedItem();

        if (ms != null) {
            if (ms.getStaffID() != null) {
                chargeStaffNo.setText(ms.getStaffNo());
            }

            if (chargeStaff.getSelectedIndex() == 0) {
                chargeStaffNo.setText("");
            }
        }
    }//GEN-LAST:event_chargeStaffActionPerformed

    private void chargeStaffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chargeStaffNoFocusLost

        if (!chargeStaffNo.getText().equals("")) {
            this.setChargeStaff(chargeStaffNo.getText());
        } else {
            chargeStaff.setSelectedIndex(0);
        }
    }//GEN-LAST:event_chargeStaffNoFocusLost

    private boolean checkDuplicateCustomer(ArrayList<MstCustomer> selectedArray, MstCustomer customer) {
        for (MstCustomer mc : selectedArray) {
            if (mc.getCustomerID().intValue() == customer.getCustomerID().intValue()) {
                return true;
            }
        }
        return false;
    }

    private Date getStartDate(Date date) {

        if (date == null) {
            return null;
        }

        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);

        return cal.getTime();
    }

    private Date getEndDate(Date date) {
        if (date == null) {
            return null;
        }

        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);

        return cal.getTime();
    }

    private void NewTemplateExcel() {




        print();

    }

    private void print() {
        paramBean = new ReportParameterBean();
        // vtbphuong start delete 20140630 Request #26276
//        // start add 20130708 IVS [gbソース]分析帳票の表示制限について 
//        StringBuilder message = new StringBuilder();
//        message.append("本帳票について一部数字の調整が必要なものがありましたので見直しを行っております。\n");
//        message.append("見直しが終わりましたら改めてご報告させていただきます。");
//        if (!SystemInfo.getLoginID().equals("mstest") || !SystemInfo.getDatabase().contains("pos_hair_dev")) {
//            MessageDialog.showMessageDialog(
//                    this,
//                    message.toString(),
//                    this.getTitle(),
//                    JOptionPane.INFORMATION_MESSAGE);
//            return;
//        }
//        // end add 20130708 IVS [gbソース]分析帳票の表示制限について
         // vtbphuong end delete 20140630 Request #26276
        //グループ
        if (shop.getSelectedItem() instanceof MstGroup) {
            MstGroup mg = (MstGroup) shop.getSelectedItem();
            paramBean.setTargetName(mg.getGroupName());
            paramBean.setShopIDList(mg.getShopIDListAll());
        } //店舗
        else if (shop.getSelectedItem() instanceof MstShop) {
            MstShop ms = (MstShop) shop.getSelectedItem();
            paramBean.setTargetName(ms.getShopName());
            paramBean.setShopIDList(ms.getShopID().toString());
        }

        // 主担当
        if (chargeStaff.getSelectedIndex() > 0) {
            MstStaff ms = (MstStaff) this.chargeStaff.getSelectedItem();
            paramBean.setStaffId(ms.getStaffID());
            paramBean.setStaffName(ms.getFullStaffName());
        } else {
            paramBean.setStaffId(null);
            paramBean.setStaffName("");
        }
        //JExcelApi jx = outputNewTemplate();
        JPOIApiSaleTransittion jx = outputNewTemplate();
        //JExcelApi jx = outputOldTemplate();       

        jx.setFormularActive();


        jx.openWorkbook();

    }

    /**
     * 主担当者をセットする。
     */
    private void setChargeStaff(String staffNo) {
        chargeStaff.setSelectedIndex(0);

        for (int i = 1; i < chargeStaff.getItemCount(); i++) {
            if (((MstStaff) chargeStaff.getItemAt(i)).getStaffNo().equals(staffNo)) {
                chargeStaff.setSelectedIndex(i);
                break;
            }
        }
    }

    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
    }//GEN-LAST:event_shopActionPerformed

    private void optPrevYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optPrevYearActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_optPrevYearActionPerformed

    private void optLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optLastActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_optLastActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMenuSetting;
    private javax.swing.JButton btnOutput;
    private javax.swing.JComboBox chargeStaff;
    private javax.swing.JLabel chargeStaffLabel;
    private javax.swing.JTextField chargeStaffNo;
    private javax.swing.JComboBox endMonth;
    private javax.swing.JComboBox endYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblPrevPeriod;
    private javax.swing.JLabel lblTargetDate;
    private javax.swing.JLabel lblTargetDate1;
    private javax.swing.JLabel lblTargetDate2;
    private javax.swing.JRadioButton optLast;
    private javax.swing.JRadioButton optPrevYear;
    private javax.swing.JPanel pnlMain;
    private com.geobeck.swing.JTextFieldEx prevStaffCount1;
    private com.geobeck.swing.JTextFieldEx prevStaffCount2;
    private javax.swing.ButtonGroup radioGroup;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private com.geobeck.swing.JTextFieldEx staffCount1;
    private com.geobeck.swing.JTextFieldEx staffCount2;
    private javax.swing.JComboBox startMonth;
    private javax.swing.JComboBox startYear;
    // End of variables declaration//GEN-END:variables

    private void setKeyListener() {
        startYear.addKeyListener(SystemInfo.getMoveNextField());
        startYear.addFocusListener(SystemInfo.getSelectText());
        endYear.addKeyListener(SystemInfo.getMoveNextField());
        endYear.addFocusListener(SystemInfo.getSelectText());

        startMonth.addKeyListener(SystemInfo.getMoveNextField());
        endMonth.addKeyListener(SystemInfo.getMoveNextField());

        staffCount1.addKeyListener(SystemInfo.getMoveNextField());
        staffCount1.addFocusListener(SystemInfo.getSelectText());
        staffCount2.addKeyListener(SystemInfo.getMoveNextField());
        staffCount2.addFocusListener(SystemInfo.getSelectText());

        prevStaffCount1.addKeyListener(SystemInfo.getMoveNextField());
        prevStaffCount1.addFocusListener(SystemInfo.getSelectText());
        prevStaffCount2.addKeyListener(SystemInfo.getMoveNextField());
        prevStaffCount2.addFocusListener(SystemInfo.getSelectText());
    }

    /**
     * 初期化処理を行う。
     */
    private void init() {
        Calendar cal = Calendar.getInstance();
        int nowYear = cal.get(Calendar.YEAR);
        int nowMonth = cal.get(Calendar.MONTH);

        initYearCombo(endYear, nowYear);
        this.endMonth.setSelectedIndex(nowMonth);

        initYearCombo(startYear, nowYear - 1);
        if (nowMonth < 11) {
            this.startMonth.setSelectedIndex(nowMonth + 1);
        } else {
            this.startMonth.setSelectedIndex(0);
            this.startYear.setSelectedItem(this.endYear.getSelectedItem());
        }

        this.staffCount1.setText(mss.getItoStaffCount1().toString());
        this.staffCount2.setText(mss.getItoStaffCount2().toString());
        this.prevStaffCount1.setText(mss.getItoPrevStaffCount1().toString());
        this.prevStaffCount2.setText(mss.getItoPrevStaffCount2().toString());
    }

    private void setPeriod() {

        if (startYear.getSelectedItem() == null || startYear.getSelectedItem().toString().length() == 0) {
            return;
        }
        if (endYear.getSelectedItem() == null || endYear.getSelectedItem().toString().length() == 0) {
            return;
        }

        calStart = Calendar.getInstance();
        calStart.set(Calendar.YEAR, Integer.parseInt(startYear.getSelectedItem().toString()));
        calStart.set(Calendar.MONTH, startMonth.getSelectedIndex());
        calStart.set(Calendar.DAY_OF_MONTH, 1);
        calStart.set(Calendar.HOUR_OF_DAY, 0);
        calStart.set(Calendar.MINUTE, 0);
        calStart.set(Calendar.SECOND, 0);
        calStart.set(Calendar.MILLISECOND, 0);

        calEnd = (Calendar) calStart.clone();
        calEnd.set(Calendar.YEAR, Integer.parseInt(endYear.getSelectedItem().toString()));
        calEnd.set(Calendar.MONTH, endMonth.getSelectedIndex());
        calEnd.set(Calendar.DAY_OF_MONTH, 1);
        calEnd.add(Calendar.MONTH, 1);
        calEnd.add(Calendar.DAY_OF_MONTH, -1);

        int startYM = (calStart.get(Calendar.YEAR) * 12) + calStart.get(Calendar.MONTH);
        int endYM = (calEnd.get(Calendar.YEAR) * 12) + calEnd.get(Calendar.MONTH);
        int period = endYM - startYM + 1;

        calPrevStart = (Calendar) calStart.clone();
        calPrevEnd = (Calendar) calEnd.clone();

        if (this.optPrevYear.isSelected()) {
            calPrevStart.add(Calendar.YEAR, -1);
            calPrevEnd.add(Calendar.YEAR, -1);
        } else {
            calPrevStart.add(Calendar.MONTH, period * -1);
            calPrevEnd.add(Calendar.MONTH, period * -1);
        }

        calBeforePrevStart = (Calendar) calPrevStart.clone();
        calBeforePrevStart.add(Calendar.MONTH, period * -1);

        calBeforePrevEnd = (Calendar) calPrevEnd.clone();
        calBeforePrevEnd.add(Calendar.MONTH, period * -1);

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月");

        lblPrevPeriod.setText(sdf.format(calPrevStart.getTime()) + " 〜 " + sdf.format(calPrevEnd.getTime()));
    }

    private String getTechItemValueSQL(boolean isPrev) {

        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");

        // 総売上
        sql.append("      sum(case when B.product_division in (1, 2,3,4) then product_value - discount_value  else 0 end) as total_value");
        // 技術売上
        sql.append("     ,sum(case when B.product_division in (1,3) then product_value - discount_value else 0 end) as tech_value");
        // 商品売上
        sql.append("     ,sum(case when B.product_division in (2,4) then product_value - discount_value else 0 end) as item_value");
        // 商品購入客数
        sql.append("     ,count(distinct case when B.product_division in (2) then customer_id end) as item_count ");

        sql.append("     from         data_sales A \n");
        sql.append("     INNER JOIN\n");
        sql.append("         data_sales_detail B\n");
        sql.append("     ON\n");
        sql.append("         A.slip_no = B.slip_no\n");
        sql.append("     AND A.shop_id = B.shop_id \n");


        sql.append("         join mst_customer mc");
        sql.append("         using(customer_id)");
        sql.append(" where");
        sql.append("         A.shop_id in (" + paramBean.getShopIDList() + ")");

        if (isPrev) {
            sql.append(" and A.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and A.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        //Luc start delete 20140321 task #20779
        //sql.append("     and mc.customer_no <> '0'");
        //Luc end delete 20140321  task #20779

        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and A.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }

        return sql.toString();
    }

    private String getTotalCountSQL(boolean isPrev) {

        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");

        // 総客数
        sql.append("      count(*) as total_count");
        // 女性客数
        //Luc start edit 20140325
        //sql.append("     ,sum(case when coalesce(mc.sex, 0) in (0, 2) then 1 else 0 end) as female_count");
        sql.append("     ,sum(case when mc.sex=2 then 1 else 0 end) as female_count");

        //Luc end edit 20140325
        // 指名客数
        sql.append("     ,sum(case when ds.designated_flag then 1 else 0 end) as designated_count");

        sql.append(" from");
        sql.append("     data_sales ds");
        sql.append("         join mst_customer mc");
        sql.append("         using(customer_id)");
        sql.append(" where");
        sql.append("         ds.delete_date is null");

        sql.append("     and ds.shop_id in (" + paramBean.getShopIDList() + ")");

        if (isPrev) {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        //Luc start delete 20140325 task #20752
        //sql.append("     and mc.customer_no <> '0'");
        //Luc end delete 20140325 task #20752
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }

        return sql.toString();
    }

    private String getTotalCountTechItemSQL(boolean IsItem, boolean isPrev) {

        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");

        // 総客数
        sql.append("      count(*) as total_count");
        // 女性客数
        sql.append("     ,sum(case when coalesce(mc.sex, 0) in (0, 2) then 1 else 0 end) as female_count");
        // 指名客数
        sql.append("     ,sum(case when ds.designated_flag then 1 else 0 end) as designated_count");

        sql.append(" from");
        sql.append("     data_sales ds");
        sql.append("         join mst_customer mc");
        sql.append("         using(customer_id)");
        sql.append("  inner join ( select distinct slip_no");
        //Luc start edit 20140324 task #20752
        //if (IsItem) {
        //    sql.append("  ,product_division from data_sales_detail where  product_division in (1,3)) dsd using(slip_no)");
        //} else {
        //    sql.append("  ,product_division from data_sales_detail where  product_division in (2,4)) dsd using(slip_no)");
        //}
        if (!IsItem) {

            sql.append("  ,product_division from data_sales_detail where  product_division in (1)) dsd using(slip_no)");
        } else {
            sql.append("  ,product_division from data_sales_detail where  product_division in (2)) dsd using(slip_no)");
        }
        //Luc end edit 20140324 task  #20752
        sql.append(" where");
        sql.append("         ds.delete_date is null");

        sql.append("     and ds.shop_id in (" + paramBean.getShopIDList() + ")");

        if (isPrev) {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        //Luc start delete 20140324 task #20752
        //sql.append("     and mc.customer_no <> '0'");
        //Luc end edit 20140324 task  #20752
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }

        return sql.toString();
    }

    private String getListMotiveSQL() {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select first_coming_motive_name as MotiveName from mst_first_coming_motive");
        sql.append(" order by display_seq asc");
        return sql.toString();

    }

    private String getCusSourceCountSQL(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select first_coming_motive_name as MotiveName,case when  Num is null then 0 else Num end as Num  from mst_first_coming_motive");
        sql.append(" left join (select first_coming_motive_name,count(*) as Num from data_sales ds");
        sql.append(" inner join mst_customer using(customer_id)");
        sql.append(" inner join mst_first_coming_motive using(first_coming_motive_class_id)");
        sql.append(" where");
        sql.append(" ds.delete_date is null");
        sql.append(" and ds.shop_id in (" + paramBean.getShopIDList() + ")");
         if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        if (isPrev) {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
            //Luc start add 20140324
            sql.append(" and not exists (select * from data_sales ds1 where customer_id = ds.customer_id and  sales_date< '" + calPrevStart.getTime() + "')\n");
            //Luc end add 20140324
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
            //Luc start add 20140324
            sql.append(" and not exists (select * from data_sales ds1 where customer_id = ds.customer_id and  sales_date< " + SQLUtil.convertForSQL(calStart.getTime()) + ")\n");
            //Luc end add 20140324
        }

        sql.append(" group by first_coming_motive_name,display_seq");
        sql.append(" order by display_seq asc ) t using(first_coming_motive_name)");
        sql.append(" order by display_seq asc");
        return sql.toString();

    }

    private String getTotalComingMotiveCustomer(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select count(*) as new_count \n");
        sql.append(" from \n");
        sql.append(" (\n");
        sql.append("     SELECT 		\n");
        sql.append("     distinct (A.customer_id)\n");
        sql.append("     FROM \n");
        sql.append("     data_sales A \n");
        sql.append("     INNER JOIN	\n");
        sql.append("     mst_customer B\n");
        sql.append("     ON	\n");
        sql.append("     A.customer_id = B.customer_id	\n");
        sql.append("     LEFT JOIN	\n");
        sql.append("     mst_first_coming_motive C \n");
        sql.append("     ON  B.first_coming_motive_class_id = C.first_coming_motive_class_id\n");
        sql.append("     WHERE  A.delete_date is null and A.shop_id in (" + paramBean.getShopIDList() + ")\n");
         if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and A.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        if (isPrev) {
            sql.append(" AND A.sales_date   between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + "\n");   //前年度
            sql.append(" and not exists (select * from data_sales ds1 where customer_id = A.customer_id and  sales_date<" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ")\n");
        } else {
            sql.append(" AND A.sales_date   between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()) + "\n");           //今年度
            sql.append(" and not exists (select * from data_sales ds1 where customer_id = A.customer_id and  sales_date<" + SQLUtil.convertForSQL(calStart.getTime()) + ")\n");
        }

        sql.append(" )a\n");
        return sql.toString();

    }

    private String getNewFixedCountSQL(boolean isPrev) {

        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");

        // 新規客数
        sql.append("      count(case when t.visit_num = 1 then customer_id end) as new_count");

        // 新規再来店数
        sql.append("     ,count(");
        sql.append("         case when t.visit_num = 1");
        sql.append("               and");
        sql.append("                 (");
        sql.append("                    select count(*) from data_sales");
        sql.append("                    where");
        sql.append("                            delete_date is null");
        sql.append("                        and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                        and customer_id = t.customer_id");
        sql.append("                        and sales_date > t.sales_date");
        if (isPrev) {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        sql.append("                 ) >= 1");
        sql.append("             then customer_id");
        sql.append("         end");
        sql.append("      ) as new_reappearance_count");

        // 新規3回来店数
        sql.append("     ,count(");
        sql.append("         case when t.visit_num = 1");
        sql.append("               and");
        sql.append("                 (");
        sql.append("                    select count(*) from data_sales");
        sql.append("                    where");
        sql.append("                            delete_date is null");
        sql.append("                        and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                        and customer_id = t.customer_id");
        sql.append("                        and sales_date > t.sales_date");
        if (isPrev) {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        sql.append("                 ) >= 2");
        sql.append("             then customer_id");
        sql.append("         end");
        sql.append("      ) as new_reappearance_count2");

        // 紹介客数
        sql.append("     ,count(case when t.visit_num = 1 and t.introducer_id is not null then t.customer_id end) as introducer_count");

        // 固定客数
        sql.append("     ,count(case when t.visit_num >= 2 then customer_id end) as fixed_count");

        // 固定再来店数
        sql.append("     ,count(");
        sql.append("         case when t.visit_num >= 2");
        sql.append("               and");
        sql.append("                 (");
        sql.append("                    select count(*) from data_sales");
        sql.append("                    where");
        sql.append("                            delete_date is null");
        sql.append("                        and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                        and customer_id = t.customer_id");
        sql.append("                        and sales_date > t.sales_date");
        if (isPrev) {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        sql.append("                 ) >= 1");
        sql.append("             then customer_id");
        sql.append("         end");
        sql.append("      ) as fixed_reappearance_count");

        // 固定客平均来店サイクル
        sql.append("     ,avg(case when t.visit_num >= 2 then fixed_visit_cycle end) as fixed_visit_cycle");
        sql.append("     ,avg(case when t.visit_num >= 2 then fixed_visit_cycle_days end) as fixed_visit_cycle_days");

        sql.append(" from");
        sql.append("     (");
        sql.append("         select");
        sql.append("              t.*");
        sql.append("             ," + getMonthsBetween(calStart, calEnd) + " / fixed_visit_num as fixed_visit_cycle");
        sql.append("             ," + getDaysBetween(calStart, calEnd) + " / fixed_visit_num as fixed_visit_cycle_days");
        sql.append("         from");
        sql.append("             (");
        sql.append("                 select");
        sql.append("                      ds.shop_id");
        sql.append("                     ,ds.customer_id");
        sql.append("                     ,ds.sales_date");
        sql.append("                     ,mc.introducer_id");
        sql.append("                     ,(");
        sql.append("                         select");
        sql.append("                             sum(1)");
        sql.append("                         from");
        sql.append("                             data_sales a");
        sql.append("                         where");
        sql.append("                                 a.shop_id = ds.shop_id");
        sql.append("                             and a.customer_id = ds.customer_id");
        sql.append("                             and a.sales_date <= ds.sales_date");
        sql.append("                             and a.delete_date is null");
        sql.append("                         limit 2");
        sql.append("                      ) + coalesce(mc.before_visit_num, 0) as visit_num");
        sql.append("                     ,(");
        sql.append("                          select");
        sql.append("                              count(*)");
        sql.append("                          from");
        sql.append("                              data_sales");
        sql.append("                          where");
        sql.append("                                  shop_id in (" + paramBean.getShopIDList() + ")");
        if (isPrev) {
            sql.append("                         and sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("                          and sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        sql.append("                              and customer_id = ds.customer_id");
        sql.append("                              and delete_date is null");
        sql.append("                      ) as fixed_visit_num");
        sql.append("                 from");
        sql.append("                     data_sales ds");
        sql.append("                         join mst_customer mc");
        sql.append("                         using(customer_id)");
        sql.append("                 where");
        sql.append("                         ds.delete_date is null");

        sql.append("                     and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        if (isPrev) {
            sql.append("                 and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("                 and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        //Luc start delete 20140324 task #20752
        //sql.append("                     and mc.customer_no <> '0'");
        //Luc end delete 20140324 task #20752
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append("                 and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append("             ) t");
        sql.append("     ) t");

        return sql.toString();
    }
    
    

    private String getCycleDayAverageCustomerSQL(boolean isPrev) {
        StringBuffer sql = new StringBuffer();
        Calendar beforeStart = (Calendar) calStart.clone();
        Calendar beforeEnd = (Calendar) calStart.clone();
        if (isPrev) {
            beforeStart = (Calendar) calPrevStart.clone();

            beforeEnd = (Calendar) calPrevStart.clone();

        }
        beforeStart.add(Calendar.YEAR, -1);
        beforeStart.add(Calendar.MONTH, 2);
        //beforeStart.add(Calendar.MONTH, -1);
        beforeEnd.add(Calendar.MONTH, 2);
        beforeEnd.add(Calendar.DAY_OF_MONTH, -1);

        SimpleDateFormat fortmat = new SimpleDateFormat("yyyy-MM-dd");
        sql.append(" select sum(distance)/count(*) as ctt --C.customer_id,C.sales_date,c.last_sales_date,c.distance \n");
        sql.append(" from  \n");
        sql.append("    ( \n");
        sql.append("        select B.customer_id,B.sales_date, \n");
        sql.append("        (	select TO_CHAR(Max(A.sales_date), 'YYYY/MM/DD' ) as sales_date FROM \n");
        sql.append("            data_sales A \n");
        sql.append("            WHERE \n");
        sql.append("            A.sales_date between '" + fortmat.format(beforeStart.getTime()) + "' and '" + fortmat.format(beforeEnd.getTime()) + "' \n");
        sql.append("            AND A.customer_id IN ( \n");
        sql.append("            SELECT DISTINCT customer_id FROM data_sales \n");
        if (isPrev) {
            sql.append("            WHERE TO_CHAR( sales_date, 'YYYY/MM/DD' ) BETWEEN '" + fortmat.format(calPrevStart.getTime()) + "' AND '" + fortmat.format(calPrevEnd.getTime()) + "' \n");
        } else {
            sql.append("            WHERE TO_CHAR( sales_date, 'YYYY/MM/DD' ) BETWEEN '" + fortmat.format(calStart.getTime()) + "' AND '" + fortmat.format(calEnd.getTime()) + "' \n");

        }
        sql.append("            AND delete_date IS NULL ) \n");
        sql.append("            AND delete_date IS NULL  \n");
        sql.append("            AND A.sales_date<B.sales_date \n");
        sql.append("            AND A.customer_id = b.customer_id \n");
        sql.append("        ) as last_sales_date, \n");
        sql.append("        EXTRACT(DAY from  \n");
        sql.append("        B.sales_date - \n");
        sql.append("        (	select Max(A.sales_date) as sales_date FROM \n");
        sql.append("            data_sales A \n");
        sql.append("            WHERE \n");
        sql.append("            A.sales_date between  '" + fortmat.format(beforeStart.getTime()) + "' and '" + fortmat.format(beforeEnd.getTime()) + "' \n");
        sql.append("            AND A.customer_id IN ( \n");
        sql.append("            SELECT DISTINCT customer_id FROM data_sales \n");
        if (isPrev) {
            sql.append("            WHERE TO_CHAR( sales_date, 'YYYY/MM/DD' ) BETWEEN '" + fortmat.format(calPrevStart.getTime()) + "' AND '" + fortmat.format(calPrevEnd.getTime()) + "'  \n");
        } else {
            sql.append("            WHERE TO_CHAR( sales_date, 'YYYY/MM/DD' ) BETWEEN '" + fortmat.format(calStart.getTime()) + "' AND '" + fortmat.format(calEnd.getTime()) + "'  \n");
        }
        
        sql.append("            AND delete_date IS NULL ) \n");
        sql.append("            AND delete_date IS NULL \n");
        sql.append("            AND A.sales_date<B.sales_date \n");
        sql.append("            AND A.customer_id = b.customer_id \n");
        sql.append("        ) ) as  distance \n");
        sql.append("        from \n");
        sql.append("        ( \n");
        sql.append("            SELECT DISTINCT A.customer_id, A.sales_date as sales_date FROM \n");
        sql.append("            data_sales A \n");
        sql.append("            WHERE \n");
        sql.append("            A.sales_date between  '" + fortmat.format(beforeStart.getTime()) + "' and '" + fortmat.format(beforeEnd.getTime()) + "' \n");
        sql.append("            AND A.customer_id IN ( \n");
        sql.append("            SELECT DISTINCT customer_id FROM data_sales \n");
        if (isPrev) {
            sql.append("            WHERE TO_CHAR( sales_date, 'YYYY/MM/DD' )BETWEEN '" + fortmat.format(calPrevStart.getTime()) + "' AND '" + fortmat.format(calPrevEnd.getTime()) + "'  \n");
        } else {
            sql.append("            WHERE TO_CHAR( sales_date, 'YYYY/MM/DD' )BETWEEN '" + fortmat.format(calStart.getTime()) + "' AND '" + fortmat.format(calEnd.getTime()) + "'  \n");

        }
        sql.append("            AND delete_date IS NULL ) \n");
        sql.append("            AND delete_date IS NULL  \n");
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append("                 and A.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append("            ORDER BY A.customer_id, A.sales_date	DESC \n");
        sql.append("        ) B \n");
        sql.append("    ) C \n");
        sql.append(" where distance is not null \n");

        return sql.toString();
    }

    private String getReservationCountSQL(boolean isPrev) {

        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");

        // 全予約数
        sql.append("      count(*) as total_count");
        // 次回予約数
        sql.append("     ,sum(case when mobile_flag is null and next_flag = 1 then 1 else 0 end) as next_count");
        // 電話・事前予約数
        sql.append("     ,sum(case when mobile_flag is null and preorder_flag = 1 then 1 else 0 end) as preorder_count");
        // WEB予約数
        sql.append("     ,sum(case when mobile_flag is not null then 1 else 0 end) as web_count");

        sql.append(" from");
        sql.append("     data_reservation");
        sql.append(" where");
        sql.append("         delete_date is null");
        sql.append("     and shop_id in (" + paramBean.getShopIDList() + ")");

        if (isPrev) {
            sql.append(" and insert_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and insert_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }

        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }

        return sql.toString();
    }

    private String getMenuRatioSQL(boolean isPrev) {

        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");
        sql.append("      ito.menu_setting_id");
        sql.append("     ,count(distinct ds.slip_no) as menu_count");
        sql.append(" from");
        sql.append("     data_sales ds");
        sql.append("         inner join data_sales_detail dsd");
        sql.append("                 on ds.shop_id = dsd.shop_id");
        sql.append("                and ds.slip_no = dsd.slip_no");
        sql.append("                and ds.delete_date is null");
        sql.append("                and dsd.delete_date is null");
        sql.append("         join mst_customer mc");
        sql.append("             using(customer_id)");
        sql.append("         inner join mst_technic mt");
        sql.append("             on dsd.product_id = mt.technic_id");
        sql.append("            and dsd.product_division = 1");
        sql.append("         inner join mst_ito_menu_setting ito");
        sql.append("             on mt.technic_class_id = ito.technic_class_id");
        sql.append(" where");
        sql.append("         ds.shop_id in (" + paramBean.getShopIDList() + ")");

        if (isPrev) {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }

        sql.append("     and mc.customer_no <> '0'");

        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }

        sql.append(" group by");
        sql.append("      ito.menu_setting_id");

        return sql.toString();
    }

    private String getValidCountSQL(Calendar calDate, int months) {

        Calendar calTmp = (Calendar) calDate.clone();
        StringBuilder strFrom = new StringBuilder(1000);

        for (int i = 0; i < months; i++) {
            calTmp.add(Calendar.MONTH, i);
            if (i > 0) {
                strFrom.append(" union all ");
            }
            strFrom.append(getValidCountSQL(calTmp));
        }

        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      sum(cnt1) as cnt1");
        sql.append("     ,sum(cnt2) as cnt2");
        sql.append("     ,sum(cnt3) as cnt3");
        sql.append("     ,sum(cnt4) as cnt4");
        sql.append(" from (" + strFrom.toString() + ") t");

        return sql.toString();
    }

    private String getTotalCustomerComming4MonthAgoCycle(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" SELECT \n");
        sql.append(" count(distinct customer_id)\n");
        sql.append(" from data_sales \n");
        sql.append(" where sales_date between \n");
        if (isPrev) {
            sql.append(" to_date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ", 'yyyy-mm-dd') - CAST('4 months' AS INTERVAL) \n");
            sql.append(" and to_date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ", 'yyyy-mm-dd') - CAST('1 day' AS INTERVAL) \n");

        } else {
            sql.append(" to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + ", 'yyyy-mm-dd') - CAST('4 months' AS INTERVAL) \n");
            sql.append(" and to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + ", 'yyyy-mm-dd') - CAST('1 day' AS INTERVAL) \n");
        }

        sql.append(" AND CUSTOMER_ID IN ( SELECT DISTINCT CUSTOMER_ID FROM data_sales \n");
        if (isPrev) {
            sql.append("                      WHERE sales_date between to_date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ", 'yyyy-mm-dd') \n");
            sql.append("                                           AND to_date(" + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ", 'yyyy-mm-dd') ) \n");

        } else {
            sql.append("                      WHERE sales_date between to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + ", 'yyyy-mm-dd') \n");
            sql.append("                                           AND to_date(" + SQLUtil.convertForSQL(calEnd.getTime()) + ", 'yyyy-mm-dd') ) \n");
        }

        return sql.toString();
    }

    private String getTotalCustomerComming5MothTo6MonthAgoCycle(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" SELECT COUNT(DISTINCT customer_id) \n");
        sql.append(" FROM \n");
        sql.append(" data_sales \n");
        sql.append(" WHERE \n");
        sql.append(" customer_id NOT IN ( \n");
        sql.append("     SELECT \n");
        sql.append("     distinct customer_id \n");
        sql.append("     from data_sales \n");
        sql.append("     where sales_date between \n");
        if (isPrev) {
            sql.append("     to_date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ", 'yyyy-mm-dd') - CAST('4 months' AS INTERVAL) \n");
            sql.append("     and to_date(" + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ", 'yyyy-mm-dd') - CAST('0 months' AS INTERVAL) ) \n");

        } else {
            sql.append("     to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + ", 'yyyy-mm-dd') - CAST('4 months' AS INTERVAL) \n");
            sql.append("     and to_date(" + SQLUtil.convertForSQL(calEnd.getTime()) + ", 'yyyy-mm-dd') - CAST('0 months' AS INTERVAL) ) \n");
        }
        sql.append(" AND sales_date between  \n");
        if (isPrev) {
            sql.append(" to_date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ", 'yyyy-mm-dd') - CAST('6 months' AS INTERVAL)  \n");
            sql.append(" AND to_date(" + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ", 'yyyy-mm-dd') - CAST('5 months' AS INTERVAL) \n");

        } else {
            sql.append(" to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + ", 'yyyy-mm-dd') - CAST('6 months' AS INTERVAL)  \n");
            sql.append(" AND to_date(" + SQLUtil.convertForSQL(calEnd.getTime()) + ", 'yyyy-mm-dd') - CAST('5 months' AS INTERVAL) \n");
        }

        return sql.toString();
    }

    private String getTotalCustomerComming7MothTo1YearAgoCycle(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" SELECT COUNT(DISTINCT customer_id) \n");
        sql.append(" FROM \n");
        sql.append(" data_sales \n");
        sql.append(" WHERE \n");
        sql.append(" customer_id NOT IN ( \n");
        sql.append("     SELECT \n");
        sql.append("     distinct customer_id \n");
        sql.append("     from data_sales \n");
        sql.append("     where sales_date between \n");
        if (isPrev) {
            sql.append("     to_date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ", 'yyyy-mm-dd') - CAST('6 months' AS INTERVAL) \n");
            sql.append("     and to_date(" + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ", 'yyyy-mm-dd') - CAST('0 months' AS INTERVAL) ) \n");

        } else {
            sql.append("     to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + ", 'yyyy-mm-dd') - CAST('6 months' AS INTERVAL) \n");
            sql.append("     and to_date(" + SQLUtil.convertForSQL(calEnd.getTime()) + ", 'yyyy-mm-dd') - CAST('0 months' AS INTERVAL) ) \n");
        }
        sql.append(" AND sales_date between  \n");
        if (isPrev) {
            sql.append(" to_date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ", 'yyyy-mm-dd') - CAST('12 months' AS INTERVAL)  \n");
            sql.append(" AND to_date(" + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ", 'yyyy-mm-dd') - CAST('6 months' AS INTERVAL) \n");

        } else {
            sql.append(" to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + ", 'yyyy-mm-dd') - CAST('12 months' AS INTERVAL)  \n");
            sql.append(" AND to_date(" + SQLUtil.convertForSQL(calEnd.getTime()) + ", 'yyyy-mm-dd') - CAST('6 months' AS INTERVAL) \n");
        }

        return sql.toString();
    }

    private String getTotalCustomerComming1YearTo2YearAgoCycle(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" SELECT COUNT(DISTINCT customer_id) \n");
        sql.append(" FROM \n");
        sql.append(" data_sales \n");
        sql.append(" WHERE \n");
        sql.append(" customer_id NOT IN ( \n");
        sql.append("     SELECT \n");
        sql.append("     distinct customer_id \n");
        sql.append("     from data_sales \n");
        sql.append("     where sales_date between \n");
        if (isPrev) {
            sql.append("     to_date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ", 'yyyy-mm-dd') - CAST('12 months' AS INTERVAL) \n");
            sql.append("     and to_date(" + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ", 'yyyy-mm-dd') - CAST('0 months' AS INTERVAL) ) \n");

        } else {
            sql.append("     to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + ", 'yyyy-mm-dd') - CAST('12 months' AS INTERVAL) \n");
            sql.append("     and to_date(" + SQLUtil.convertForSQL(calEnd.getTime()) + ", 'yyyy-mm-dd') - CAST('0 months' AS INTERVAL) ) \n");
        }
        sql.append(" AND sales_date between  \n");
        if (isPrev) {
            sql.append(" to_date(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ", 'yyyy-mm-dd') - CAST('24 months' AS INTERVAL)  \n");
            sql.append(" AND to_date(" + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ", 'yyyy-mm-dd') - CAST('12 months' AS INTERVAL) \n");

        } else {
            sql.append(" to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + ", 'yyyy-mm-dd') - CAST('24 months' AS INTERVAL)  \n");
            sql.append(" AND to_date(" + SQLUtil.convertForSQL(calStart.getTime()) + ", 'yyyy-mm-dd') - CAST('11 months' AS INTERVAL) - CAST('1 day' AS INTERVAL) \n");
        }

        return sql.toString();
    }

    private String getValidCountSQL(Calendar calDate) {

        Calendar cal1 = (Calendar) calDate.clone();
        Calendar cal2 = (Calendar) calDate.clone();

        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");

        // 稼働カルテ枚数
        cal1.add(Calendar.MONTH, -3);
        cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
        sql.append("      count(distinct case when a.sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()) + " then a.customer_id end) as cnt1");

        // 現役客カルテ枚数
        cal1.add(Calendar.MONTH, -2);
        cal2.add(Calendar.MONTH, -4);
        cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
        sql.append("     ,count(distinct case when a.sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()) + " then a.customer_id end) as cnt2");

        // 離店客カルテ枚数
        cal1.add(Calendar.MONTH, -6);
        cal2.add(Calendar.MONTH, -2);
        cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
        sql.append("     ,count(distinct case when a.sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()) + " then a.customer_id end) as cnt3");

        // 失客カルテ枚数
        cal1.add(Calendar.YEAR, -1);
        cal2.add(Calendar.MONTH, -6);
        cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));
        sql.append("     ,count(distinct case when a.sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()) + " then a.customer_id end) as cnt4");

        cal1 = (Calendar) calDate.clone();
        cal1.add(Calendar.YEAR, -2);
        cal1.add(Calendar.MONTH, 1);

        cal2 = (Calendar) calDate.clone();
        cal2.set(Calendar.DAY_OF_MONTH, cal2.getActualMaximum(Calendar.DATE));

        sql.append(" from");
        sql.append("     data_sales a");
        sql.append("         join");
        sql.append("         (");
        sql.append("             select");
        sql.append("                  customer_id");
        sql.append("                 ,max(sales_date) as sales_date");
        sql.append("             from");
        sql.append("                 data_sales");
        sql.append("             where");
        sql.append("                     delete_date is null");
        sql.append("                 and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 and sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()));
        sql.append("             group by");
        sql.append("                 customer_id");
        sql.append("         ) b");
        sql.append("         using(customer_id, sales_date)");
        sql.append(" where");
        sql.append("         a.delete_date is null");
        sql.append("     and not not exists");
        sql.append("         (");
        sql.append("             select 1");
        sql.append("             from");
        sql.append("                 mst_customer");
        sql.append("             where");
        sql.append("                     customer_id = a.customer_id");
        sql.append("                 and customer_no <> '0'");
        sql.append("         )");
        sql.append("     and a.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(cal1.getTime()) + " and " + SQLUtil.convertForSQLDateOnly(cal2.getTime()));

        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and a.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }

        return sql.toString();
    }

    private int getMonthsBetween(Calendar fromDate, Calendar toDate) {

        int dt1 = (fromDate.get(Calendar.YEAR) * 12) + fromDate.get(Calendar.MONTH);
        int dt2 = (toDate.get(Calendar.YEAR) * 12) + toDate.get(Calendar.MONTH);

        return dt2 - dt1 + 1;
    }

    private int getDaysBetween(Calendar fromDate, Calendar toDate) {

        long startTime = fromDate.getTimeInMillis();
        long endTime = toDate.getTimeInMillis();
        long result = (endTime - startTime) / (1000 * 60 * 60 * 24);
        return new Long(result).intValue() + 1;
    }

    private void checkStaffCount(JTextFieldEx txt) {
        NumberUtils numUtil = new NumberUtils();
        if (!numUtil.isNumber(txt.getText())) {
            txt.setText("0");
        }
    }

    private void registStaffCount() {

        if (!staffCount1.getText().equals(mss.getItoStaffCount1().toString())) {
            mss.setItoStaffCount1(Integer.valueOf(staffCount1.getText()));
        }

        if (!staffCount2.getText().equals(mss.getItoStaffCount2().toString())) {
            mss.setItoStaffCount2(Integer.valueOf(staffCount2.getText()));
        }

        if (!prevStaffCount1.getText().equals(mss.getItoPrevStaffCount1().toString())) {
            mss.setItoPrevStaffCount1(Integer.valueOf(prevStaffCount1.getText()));
        }

        if (!prevStaffCount2.getText().equals(mss.getItoPrevStaffCount2().toString())) {
            mss.setItoPrevStaffCount2(Integer.valueOf(prevStaffCount2.getText()));
        }

        mss.regist();
    }

    private void initYearCombo(final JComboBox cmb, int nowYear) {

        cmb.removeAllItems();

        int y = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = 0; i < 5; i++) {
            cmb.addItem(String.valueOf(y - i));
        }
        cmb.setSelectedItem(nowYear);
        cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ((JTextField) cmb.getEditor().getEditorComponent()).selectAll();
            }
        });
    }

    private boolean inputCheck() {
        NumberUtils numUtil = new NumberUtils();
        if (!numUtil.isNumber(this.startYear.getSelectedItem().toString())) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "開始年"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            this.startYear.requestFocusInWindow();
            return false;
        }

        if (!numUtil.isNumber(this.endYear.getSelectedItem().toString())) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "終了年"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            this.endYear.requestFocusInWindow();
            return false;
        }

        return true;
    }

    private JPOIApiSaleTransittion outputNewTemplate() {
        JPOIApiSaleTransittion jx = new JPOIApiSaleTransittion("売上構成分析");
        jx.setTemplateFile("/reports/売上構成分析New.xls");
        // ヘッダ
        jx.setCellValue(3, 9, paramBean.getTargetName());
        //jx.setValue(8, 4, paramBean.getStaffName());
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");
        /*
         jx.setValue(3, 5, calPrevStart.getTime());
         jx.setValue(8, 5, calPrevEnd.getTime());
         jx.setValue(3, 6, calStart.getTime());
         **/
        jx.setCellValue(3, 11, calEnd.getTime());
        /**
         * **********************************************************
         */
        // スタッフ数
        /**
         * **********************************************************
         */
        /*
         jx.setValue(2, 13, Integer.parseInt(this.prevStaffCount1.getText()));
         jx.setValue(2, 14, Integer.parseInt(this.staffCount1.getText()));
         jx.setValue(2, 16, Integer.parseInt(this.prevStaffCount2.getText()));
         jx.setValue(2, 17, Integer.parseInt(this.staffCount2.getText()));
         */
        jx.setCellValue(3, 23, Integer.parseInt(this.staffCount1.getText()) + Integer.parseInt(this.staffCount2.getText()));
        jx.setCellValue(3, 24, Integer.parseInt(this.prevStaffCount1.getText()) + Integer.parseInt(this.prevStaffCount2.getText()));
        int months = getMonthsBetween(calStart, calEnd);
        if (this.optLast.isSelected()) {
            jx.setCellValue(8, 13, "直近");
            jx.setCellValue(2, 20, "直近");
            jx.setCellValue(5, 20, "直近");
            jx.setCellValue(11, 10, "直近");
            jx.setCellValue(11, 12, "直近");
            jx.setCellValue(11, 18, "直近");
            jx.setCellValue(11, 16, "直近");
            jx.setCellValue(14, 16, "直近");
            jx.setCellValue(11, 23, "直近");
            jx.setCellValue(8, 26, "直近");
            jx.setCellValue(11, 27, "直近");
            jx.setCellValue(2, 28, "直近");
            jx.setCellValue(8, 31, "直近");
            jx.setCellValue(11, 31, "直近");
            jx.setCellValue(5, 33, "直近");
            jx.setCellValue(8, 35, "直近");
            jx.setCellValue(11, 35, "直近");
            jx.setCellValue(5, 39, "直近");
            jx.setCellValue(8, 39, "直近");
            jx.setCellValue(11, 39, "直近");
            jx.setCellValue(2, 24, "直近");
            jx.setCellValue(16, 38, "直近よりアップしているところは青");
            jx.setCellValue(16, 39, "直近よりアップしているところは青");

        } else if (this.optPrevYear.isSelected()) {
            jx.setCellValue(8, 13, "前年");
            jx.setCellValue(2, 20, "前年");
            jx.setCellValue(5, 20, "前年");
            jx.setCellValue(11, 10, "前年");
            jx.setCellValue(11, 12, "前年");
            jx.setCellValue(11, 18, "前年");
            jx.setCellValue(11, 16, "前年");
            jx.setCellValue(14, 16, "前年");
            jx.setCellValue(11, 23, "前年");
            jx.setCellValue(8, 26, "前年");
            jx.setCellValue(11, 27, "前年");
            jx.setCellValue(2, 28, "前年");
            jx.setCellValue(8, 31, "前年");
            jx.setCellValue(11, 31, "前年");
            jx.setCellValue(5, 33, "前年");
            jx.setCellValue(8, 35, "前年");
            jx.setCellValue(11, 35, "前年");
            jx.setCellValue(5, 39, "前年");
            jx.setCellValue(8, 39, "前年");
            jx.setCellValue(11, 39, "前年");
            jx.setCellValue(2, 24, "前年");
            jx.setCellValue(16, 38, "前年よりアップしているところは青");
            jx.setCellValue(16, 39, "前年よりアップしているところは青");
        }
        ConnectionWrapper con = SystemInfo.getConnection();
        long tech_valueThis = 0;
        long tech_valuePrev = 0;
        /**
         * **********************************************************
         */
        // 総売上、技術売上、販売率(金額)、購買率(客数)
        /**
         * **********************************************************
         */
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getTechItemValueSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getTechItemValueSQL(false));

            if (rsPrev.next()) {
                //jx.setCellValue(3, 20, rsPrev.getLong("total_value") / months);
                //jx.setCellValue(6, 20, rsPrev.getLong("tech_value") / months);
                //jx.setCellValue(6, 33, rsPrev.getLong("item_value") / months);
                //jx.setValue(16, 21, rsPrev.getLong("item_count") / months);
                jx.setCellValue(3, 20, rsPrev.getLong("total_value"));
                tech_valuePrev = rsPrev.getLong("tech_value");
                jx.setCellValue(6, 20, rsPrev.getLong("tech_value"));
                jx.setCellValue(6, 33, rsPrev.getLong("item_value"));
            }

            if (rsThis.next()) {
                //jx.setCellValue(3, 19, rsThis.getLong("total_value") / months);
                //jx.setCellValue(6, 19, rsThis.getLong("tech_value") / months);
                //jx.setCellValue(6, 32, rsThis.getLong("item_value") / months);
                //jx.setValue(16, 22, rsThis.getLong("item_count") / months);
                jx.setCellValue(3, 19, rsThis.getLong("total_value"));
                tech_valueThis = rsThis.getLong("tech_value");
                jx.setCellValue(6, 19, rsThis.getLong("tech_value"));
                jx.setCellValue(6, 32, rsThis.getLong("item_value"));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        /**
         * **********************************************************
         */
        // 総客数、女性比率、指名率
        /**
         * **********************************************************
         */
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getTotalCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getTotalCountSQL(false));

            BigDecimal bd = null;

            if (rsPrev.next()) {
                long totalCount = rsPrev.getLong("total_count");

                // jx.setCellValue(9, 31, totalCount / months);

                if (totalCount > 0) {
                    bd = new BigDecimal(rsPrev.getDouble("female_count") / totalCount * 100);
                    jx.setCellValue(9, 39, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    //bd = new BigDecimal(rsPrev.getDouble("designated_count") / totalCount * 100);
                    //jx.setValue(14, 30, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }
            }

            if (rsThis.next()) {
                long totalCount = rsThis.getLong("total_count");

                //jx.setCellValue(9, 30, totalCount / months);

                if (totalCount > 0) {
                    bd = new BigDecimal(rsThis.getDouble("female_count") / totalCount * 100);
                    jx.setCellValue(9, 38, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    //bd = new BigDecimal(rsThis.getDouble("designated_count") / totalCount * 100);
                    //jx.setValue(14, 31, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        /**
         * **********************************************************
         */
        // 販売客数
        /**
         * **********************************************************
         */
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getTotalCountTechItemSQL(true, true));
            ResultSetWrapper rsThis = con.executeQuery(getTotalCountTechItemSQL(true, false));

            if (rsThis.next()) {
                jx.setCellValue(9, 30, rsThis.getLong("total_count"));
            }

            if (rsPrev.next()) {
                jx.setCellValue(9, 31, rsPrev.getLong("total_count"));
            }



        } catch (SQLException e) {
            e.printStackTrace();
        }
        /**
         * **********************************************************
         */
        // 技術客数
        /**
         * **********************************************************
         */
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getTotalCountTechItemSQL(false, true));
            ResultSetWrapper rsThis = con.executeQuery(getTotalCountTechItemSQL(false, false));
            if (rsThis.next()) {
                jx.setCellValue(9, 12, rsThis.getLong("total_count"));
            }

            if (rsPrev.next()) {
                jx.setCellValue(9, 13, rsPrev.getLong("total_count"));
            }



        } catch (SQLException e) {
            e.printStackTrace();
        }
        /**
         * **********************************************************
         */
        // スタッフ
        /**
         * **********************************************************
         */
        //VTAN Start Delete 20140526 Request #22818 [gb]売上構成分析_スタッフについて
//        try {
//            ResultSetWrapper rsPrev = con.executeQuery(getCountStaff(true));
//            ResultSetWrapper rsThis = con.executeQuery(getCountStaff(false));
//            if (rsThis.next()) {
//                jx.setCellValue(3, 23, rsThis.getInt("CountStaff"));
//            }
//
//            if (rsPrev.next()) {
//                jx.setCellValue(3, 24, rsPrev.getInt("CountStaff"));
//            }
//
//
//
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
        //VTAN End Delete 20140526 Request #22818 [gb]売上構成分析_スタッフについて
        //ファン客数の再来率
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getFanCustomerSQL(true));
            //ResultSetWrapper rsThis = con.executeQuery(getFanCustomerSQL(false));

            //ResultSetWrapper rsCombackThis = con.executeQuery(getFanCustomerComebackSQL(false));
            long cusPrev = 0;
            Integer cusComebackPrev = 0;
            while (rsPrev.next()) {
                cusPrev += 1;


            }
            cusPrev = Math.round(cusPrev * 0.2);
            ResultSetWrapper rsCombackPrev = con.executeQuery(getFanCustomerComebackSQL(true, cusPrev));
            if (rsCombackPrev.next()) {
                cusComebackPrev = rsCombackPrev.getInt("count");
            }

            BigDecimal bd = new BigDecimal(0);
            if (cusPrev != 0) {
                bd = new BigDecimal(cusComebackPrev * 100 / cusPrev);

            }
            jx.setCellValue(12, 12, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
        } catch (SQLException e) {
            e.printStackTrace();
        }


        /**
         * **********************************************************
         */
        // 常連客数の再来率
        /**
         * **********************************************************
         */
        try {

            ResultSetWrapper rsPrev = con.executeQuery(getTotalCustomer4TimeInMonthSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getTotalCustomer4TimeInMonthSQL(false));
            ResultSetWrapper rsComebackThis = con.executeQuery(getTotalCustomer4TimeInMonthAndComming3MothAgo(false));
            ResultSetWrapper rsComebackPrev = con.executeQuery(getTotalCustomer4TimeInMonthAndComming3MothAgo(true));

            int totalCusThis = 0;
            int totalCusPrev = 0;
            int totalCusCombackThis = 0;
            int toalCusCombackPrev = 0;
            if (rsThis.next()) {
                totalCusThis = rsThis.getInt("count");
            }
            if (rsPrev.next()) {
                totalCusPrev = rsPrev.getInt("count");
            }
            if (rsComebackThis.next()) {
                totalCusCombackThis = rsComebackThis.getInt("count");
            }
            if (rsComebackPrev.next()) {
                toalCusCombackPrev = rsComebackPrev.getInt("count");
            }
            BigDecimal bd;
            if (totalCusThis != 0) {
                bd = new BigDecimal(totalCusCombackThis * 100 / totalCusThis);
                jx.setCellValue(13, 11, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
            }

            rsPrev.last();
            double rowPrev = rsPrev.getRow();
            rsPrev.beforeFirst();
            if (totalCusPrev != 0) {
                bd = new BigDecimal(toalCusCombackPrev * 100 / totalCusPrev);
                jx.setCellValue(13, 12, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
            }



        } catch (SQLException e) {
            e.printStackTrace();
        }

        /**
         * **********************************************************
         */
        // 浮遊客数の再来率
        /**
         * **********************************************************
         */
        try {

            ResultSetWrapper rsPrev = con.executeQuery(getTotalCustomer2TimeOr3TimeInMonthSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getTotalCustomer2TimeOr3TimeInMonthSQL(false));
            ResultSetWrapper rsComebackThis = con.executeQuery(getTotalCustomer2TimeOr3TimeInMonthAndComming3MothAgo(false));
            ResultSetWrapper rsComebackPrev = con.executeQuery(getTotalCustomer2TimeOr3TimeInMonthAndComming3MothAgo(true));

            double totalCusThis = 0;
            double totalCusPrev = 0;
            double totalCusCombackThis = 0;
            double toalCusCombackPrev = 0;
            if (rsThis.next()) {
                totalCusThis = rsThis.getInt("count");
            }
            if (rsPrev.next()) {
                totalCusPrev = rsPrev.getInt("count");
            }
            if (rsComebackThis.next()) {
                totalCusCombackThis = rsComebackThis.getInt("count");
            }
            if (rsComebackPrev.next()) {
                toalCusCombackPrev = rsComebackPrev.getInt("count");
            }
            BigDecimal bd;
            if (totalCusThis != 0) {
                bd = new BigDecimal(totalCusCombackThis * 100 / totalCusThis);
                jx.setCellValue(14, 11, bd.setScale(1, BigDecimal.ROUND_HALF_DOWN).doubleValue());
            }
            if (totalCusPrev != 0) {
                bd = new BigDecimal(toalCusCombackPrev * 100 / totalCusPrev);
                jx.setCellValue(14, 12, bd.setScale(1, BigDecimal.ROUND_HALF_DOWN).doubleValue());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        /**
         * **********************************************************
         */
        // 新規、紹介、固定客数、平均来店サイクル
        /**
         * **********************************************************
         */
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getNewFixedCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getNewFixedCountSQL(false));

            //ResultSetWrapper rsListMotive = con.executeQuery(getListMotiveSQL());

            ResultSetWrapper rsMotivePrev = con.executeQuery(getCusSourceCountSQL(true));
            ResultSetWrapper rsMotiveThis = con.executeQuery(getCusSourceCountSQL(false));
            ResultSetWrapper rsTotalMotiveCustomerPrev = con.executeQuery(getTotalComingMotiveCustomer(true));
            ResultSetWrapper rsTotalMotiveCustomerThis = con.executeQuery(getTotalComingMotiveCustomer(false));


            int column = 15;
            rsMotiveThis.last();
            int row = rsMotiveThis.getRow();
            rsMotiveThis.beforeFirst();
            /*
             while (rsListMotive.next()) {
             jx.setValue(column, 14, rsListMotive.getString("MotiveName"));            
             column += 1;
             }
             * */
            int index = 0;
            int totalNewCustomer = 0;
            while (rsMotiveThis.next()) {
                jx.setCellValue(column, 14, rsMotiveThis.getString("MotiveName"));
                //jx.CreateCell(14, column + 1, "");
                jx.setCellValue(column, 15, rsMotiveThis.getInt("Num"));
                //jx.CreateCell(15, column + 1, "");
                totalNewCustomer +=rsMotiveThis.getInt("Num"); 
                column += 1;
                index += 1;
                if (index != row) {
                    jx.copyCell(jx.getCell(15, 14), jx.getCell(column, 14));
                    jx.copyCell(jx.getCell(15, 15), jx.getCell(column, 15));
                    jx.copyCell(jx.getCell(15, 16), jx.getCell(column, 16));
                }

                /*
                 if (column == 22) {
                 jx.RemoveCell(column, 14);
                 jx.RemoveCell(column, 15);
                 }
                 * */
                //jx.copyCell(jx.getCell(15, 14), jx.getCell(column, 14));
                //jx.copyCell(jx.getCell(15, 15), jx.getCell(column, 15));
            }
            
            //新規客数
            jx.setCellValue(12, 15,totalNewCustomer);

            column = 15;
            totalNewCustomer = 0;
            while (rsMotivePrev.next()) {
                jx.setCellValue(column, 14, rsMotivePrev.getString("MotiveName"));
                jx.setCellValue(column, 16, rsMotivePrev.getInt("Num"));
                totalNewCustomer += rsMotivePrev.getInt("Num");
                column += 1;
            }
            //新規客数
            jx.setCellValue(12, 16,totalNewCustomer);

            //Luc end add 20140324
            BigDecimal bd = null;
            if (rsPrev.next()) {


                if (rsPrev.getDouble("new_count") > 0) {
                    bd = new BigDecimal(rsPrev.getDouble("new_reappearance_count") / rsPrev.getDouble("new_count") * 100);
                    jx.setCellValue(12, 18, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    //bd = new BigDecimal(rsPrev.getDouble("new_reappearance_count2") / rsPrev.getDouble("new_count") * 100);
                    //jx.setValue(10, 21, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }

                jx.setCellValue(15, 16, rsPrev.getLong("introducer_count") / months);



            }
            rsPrev = con.executeQuery(getCycleDayAverageCustomerSQL(true));
            if (rsPrev.next()) {
                bd = new BigDecimal(rsPrev.getDouble("ctt"));
                jx.setCellValue(6, 39, bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue());
            }

            //Luc start add 20140324
            if (rsThis.next()) {
                //Luc start delete 20140324
                //jx.setCellValue(12, 15, rsThis.getLong("new_count") / months);

                //Luc end delete 20140324

                if (rsThis.getDouble("new_count") > 0) {
                    bd = new BigDecimal(rsThis.getDouble("new_reappearance_count") / rsThis.getDouble("new_count") * 100);
                    jx.setCellValue(12, 17, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    //bd = new BigDecimal(rsThis.getDouble("new_reappearance_count2") / rsThis.getDouble("new_count") * 100);
                    //jx.setValue(10, 22, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }

                //jx.setCellValue(15, 15, rsThis.getLong("introducer_count") / months);
                /*
                 jx.setValue(6, 28, rsThis.getLong("fixed_count") / months);

                 if (rsThis.getDouble("fixed_count") > 0) {
                 bd = new BigDecimal(rsThis.getDouble("fixed_reappearance_count") / rsThis.getDouble("fixed_count") * 100);
                 jx.setValue(10, 26, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                 }

                 bd = new BigDecimal(rsThis.getDouble("fixed_visit_cycle"));
                 jx.setValue(10, 30, bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue());
                 */


            }
            rsThis = con.executeQuery(getCycleDayAverageCustomerSQL(false));
            if (rsThis.next()) {
                bd = new BigDecimal(rsThis.getDouble("ctt"));
                jx.setCellValue(6, 38, bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue());
            }


        } catch (SQLException e) {
            e.printStackTrace();
        }

        /**
         * **********************************************************
         */
        // 総客数、女性比率、指名率
        /**
         * **********************************************************
         */
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getBusinessReportTechInfo(true));
            ResultSetWrapper rsThis = con.executeQuery(getBusinessReportTechInfo(false));

            int column = 12;
            rsThis.last();
            int row = rsThis.getRow();
            rsThis.beforeFirst();
            /*
             while (rsListMotive.next()) {
             jx.setValue(column, 14, rsListMotive.getString("MotiveName"));            
             column += 1;
             }
             * */
            BigDecimal bd = null;
            int index = 0;
            int TotalCustomerCount = 0;
            while (rsThis.next()) {
                TotalCustomerCount += rsThis.getInt("customer_count");
            }
            rsThis.beforeFirst();
            while (rsThis.next()) {
                jx.setCellValue(column, 20, rsThis.getString("technic_class_name"));
                jx.setCellValue(column, 21, rsThis.getInt("customer_count"));
                if (TotalCustomerCount != 0) {
                    bd = new BigDecimal(rsThis.getDouble("customer_count") / TotalCustomerCount * 100);
                    jx.setCellValue(column, 22, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }
                jx.setCellValue(column, 25, rsThis.getString("technic_class_name"));
                jx.setCellValue(column, 26, rsThis.getInt("sales_value"));
                column += 1;
                index += 1;
                if (index != row) {
                    jx.copyCell(jx.getCell(12, 20), jx.getCell(column, 20));
                    jx.copyCell(jx.getCell(12, 21), jx.getCell(column, 21));
                    jx.copyCell(jx.getCell(12, 22), jx.getCell(column, 22));
                    jx.copyCell(jx.getCell(12, 23), jx.getCell(column, 23));
                    jx.copyCell(jx.getCell(12, 25), jx.getCell(column, 25));
                    jx.copyCell(jx.getCell(12, 26), jx.getCell(column, 26));
                    jx.copyCell(jx.getCell(12, 27), jx.getCell(column, 27));
                }

                /*
                 if (column == 22) {
                 jx.RemoveCell(column, 14);
                 jx.RemoveCell(column, 15);
                 }
                 * */
                //jx.copyCell(jx.getCell(15, 14), jx.getCell(column, 14));
                //jx.copyCell(jx.getCell(15, 15), jx.getCell(column, 15));
            }



            column = 12;
            while (rsPrev.next()) {
                jx.setCellValue(column, 20, rsPrev.getString("technic_class_name"));
                jx.setCellValue(column, 23, rsPrev.getInt("customer_count"));
                jx.setCellValue(column, 27, rsPrev.getInt("sales_value"));
                column += 1;
            }



        } catch (SQLException e) {
            e.printStackTrace();
        }

        /**
         * **********************************************************
         */
        // 商品状況
        /**
         * **********************************************************
         */
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getBusinessReportItemInfo(true));
            ResultSetWrapper rsThis = con.executeQuery(getBusinessReportItemInfo(false));

            //実績
            int column = 12;
            rsThis.last();
            int row = rsThis.getRow();
            rsThis.beforeFirst();
            int totalCustomerCount = 0;
            int index = 0;
            while (rsThis.next()) {
                jx.setCellValue(column, 29, rsThis.getString("item_class_name"));
                jx.setCellValue(column, 30, rsThis.getInt("customer_count"));
                jx.setCellValue(column, 33, rsThis.getString("item_class_name"));
                jx.setCellValue(column, 34, rsThis.getInt("sales_value"));
                totalCustomerCount+= rsThis.getInt("customer_count");
                column += 1;
                index += 1;
                if (index != row) {
                    jx.copyCell(jx.getCell(12, 29), jx.getCell(column, 29));
                    jx.copyCell(jx.getCell(12, 30), jx.getCell(column, 30));
                    jx.copyCell(jx.getCell(12, 31), jx.getCell(column, 31));
                    jx.copyCell(jx.getCell(12, 33), jx.getCell(column, 33));
                    jx.copyCell(jx.getCell(12, 34), jx.getCell(column, 34));
                    jx.copyCell(jx.getCell(12, 35), jx.getCell(column, 35));
                }

            }
            jx.setCellValue(9, 30, totalCustomerCount);
             
            
            //実績
            totalCustomerCount = 0;
            column = 12;
            while (rsPrev.next()) {
                jx.setCellValue(column, 33, rsPrev.getString("item_class_name"));
                jx.setCellValue(column, 31, rsPrev.getInt("customer_count"));
                totalCustomerCount += rsPrev.getInt("customer_count");
                jx.setCellValue(column, 35, rsPrev.getInt("sales_value"));
                column += 1;
            }
            jx.setCellValue(9, 31, totalCustomerCount);


        } catch (SQLException e) {
            e.printStackTrace();
        }

        /**
         * **********************************************************
         */
        // ファン客数、常連客数、浮遊客数
        /**
         * **********************************************************
         */
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getCountCustomerVisited(true));
            ResultSetWrapper rsThis = con.executeQuery(getCountCustomerVisited(false));

            if (rsThis.next()) {

                jx.setCellValue(13, 9, rsThis.getInt("CountVisit4"));
                jx.setCellValue(14, 9, rsThis.getInt("CountVisit2"));

            }

            if (rsPrev.next()) {
                jx.setCellValue(13, 10, rsPrev.getInt("CountVisit4"));
                jx.setCellValue(14, 10, rsPrev.getInt("CountVisit2"));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        /**
         * **********************************************************
         */
        // ファン客数
        /**
         * **********************************************************
         */
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getFanCustomerSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getFanCustomerSQL(false));
            BigDecimal bd = null;
            int CoutCus = 0;
            long fanCus = 0;
            double totalTech_value = 0;
            while (rsThis.next()) {
                CoutCus += 1;
                totalTech_value += rsThis.getDouble("val");

                if (tech_valueThis > 0) {
                    bd = new BigDecimal(totalTech_value / tech_valueThis * 100);
                    if (bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() >= 20) {
                        jx.setCellValue(12, 9, CoutCus);
                        break;
                    }
                }
            }

            fanCus = Math.round(CoutCus * 0.2);
            jx.setCellValue(12, 9, fanCus);

            CoutCus = 0;
            totalTech_value = 0;
            while (rsPrev.next()) {
                CoutCus += 1;
                totalTech_value += rsPrev.getDouble("val");
            }
            fanCus = Math.round(CoutCus * 0.2);
            jx.setCellValue(12, 10, fanCus);

        } catch (SQLException e) {
            e.printStackTrace();
        }

        /**
         * **********************************************************
         */
        // ファン客数
        /**
         * **********************************************************
         */
        try {
            if (months == 1) {
                ResultSetWrapper rsPrev = con.executeQuery(getTechValueCustomerSQLPrev());
                BigDecimal bd = null;
                int CoutCus = 0;
                double totalTech_value = 0;
                String CusID = "";
                while (rsPrev.next()) {
                    CoutCus += 1;
                    totalTech_value += rsPrev.getDouble("tech_value");
                    CusID += rsPrev.getString("customer_id") + ",";
                    if (tech_valueThis != 0) {
                        bd = new BigDecimal(totalTech_value / tech_valueThis * 100);

                    }
                    if (bd != null) {
                        if (bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() >= 20) {
                            break;
                        }
                    }
                    //jx.setCellValue(column, 22, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }
                if (!CusID.isEmpty()) {
                    CusID = CusID.substring(0, CusID.length() - 1);
                    rsPrev = con.executeQuery(getTechValueCustomerSQLPrev3Month(CusID));
                    rsPrev.last();
                    int row3Month = rsPrev.getRow();
                    rsPrev.beforeFirst();
                    CoutCus = 0;
                    totalTech_value = 0;
                    CusID = "";
                    while (rsPrev.next()) {
                        CoutCus += 1;
                        totalTech_value += rsPrev.getDouble("tech_value");
                        CusID += rsPrev.getString("customer_id") + ",";
                        if (tech_valueThis != 0) {
                            bd = new BigDecimal(totalTech_value / tech_valueThis * 100);

                        }
                        if (bd != null) {
                            if (bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue() >= 20) {
                                break;
                            }
                        }
                    }
//                    if (!CusID.isEmpty()) {
//                        CusID = CusID.substring(0, CusID.length() - 1);
//                        rsPrev = con.executeQuery(getTechValueCustomerSQLPrev1Month(CusID));
//                        rsPrev.last();
//                        double row = rsPrev.getRow();
//                        rsPrev.beforeFirst();
//                        bd = new BigDecimal(row * 100 / row3Month);
//                        jx.setCellValue(12, 12, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
//                    }

                }
            }



        } catch (SQLException e) {
            e.printStackTrace();
        }

        /**
         * **********************************************************
         */
        // 予約率
        /**
         * **********************************************************
         */
        /*
         try {
         ResultSetWrapper rsPrev = con.executeQuery(getReservationCountSQL(true));
         ResultSetWrapper rsThis = con.executeQuery(getReservationCountSQL(false));
         BigDecimal bd = null;
         if (rsPrev.next()) {
         if (rsPrev.getDouble("total_count") > 0) {
         bd = new BigDecimal(rsPrev.getDouble("next_count") / rsPrev.getDouble("total_count") * 100);
         jx.setValue(14, 26, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
         double preCount = rsPrev.getDouble("preorder_count") + rsPrev.getDouble("web_count");
         bd = new BigDecimal(preCount / rsPrev.getDouble("total_count") * 100);
         jx.setValue(16, 26, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
         }
         }
         if (rsThis.next()) {
         if (rsThis.getDouble("total_count") > 0) {
         bd = new BigDecimal(rsThis.getDouble("next_count") / rsThis.getDouble("total_count") * 100);
         jx.setValue(14, 27, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
         double preCount = rsThis.getDouble("preorder_count") + rsThis.getDouble("web_count");
         bd = new BigDecimal(preCount / rsThis.getDouble("total_count") * 100);
         jx.setValue(16, 27, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
         }
         }
         } catch(SQLException e) {
         e.printStackTrace();
         }
         */
        /**
         * **********************************************************
         */
        // メニュー率
        /**
         * **********************************************************
         */
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getMenuRatioSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getMenuRatioSQL(false));
            /*
             while (rsPrev.next()) {
             int id = rsPrev.getInt("menu_setting_id");
             double count = rsPrev.getLong("menu_count") / months;
             switch (id) {
             case 1: jx.setValue(14, 13, count); break;
             case 2: jx.setValue(16, 13, count); break;
             case 3: jx.setValue(14, 16, count); break;
             case 4: jx.setValue(16, 16, count); break;
             }
             }
             while (rsThis.next()) {
             int id = rsThis.getInt("menu_setting_id");
             double count = rsThis.getLong("menu_count") / months;
             switch (id) {
             case 1: jx.setValue(14, 14, count); break;
             case 2: jx.setValue(16, 14, count); break;
             case 3: jx.setValue(14, 17, count); break;
             case 4: jx.setValue(16, 17, count); break;
             }
             }
             *  */
        } catch (SQLException e) {
            e.printStackTrace();
        }

        /**
         * **********************************************************
         */
        // 稼働、現役、離店、失客 カルテ枚数
        /**
         * **********************************************************
         */
        try {

            Calendar calTmpThis = (Calendar) calEnd.clone();
            calTmpThis.set(Calendar.DAY_OF_MONTH, 1);

            Calendar calTmpPrev = (Calendar) calStart.clone();
            if (this.optPrevYear.isSelected()) {
                calTmpPrev.setTime(calTmpThis.getTime());
                calTmpPrev.add(Calendar.YEAR, -1);
            } else {
                calTmpPrev.add(Calendar.MONTH, -1);
            }
            long totalCusThis = 0l;
            long totalCusPrev = 0l;
            //稼働カルテ
            ResultSetWrapper rsPrev = con.executeQuery(getTotalCustomerComming4MonthAgoCycle(true));
            ResultSetWrapper rsThis = con.executeQuery(getTotalCustomerComming4MonthAgoCycle(false));

            if (rsPrev.next()) {
                jx.setCellValue(13, 39, rsPrev.getLong("count"));
                totalCusPrev += rsPrev.getLong("count");
            }

            if (rsThis.next()) {
                jx.setCellValue(13, 38, rsThis.getLong("count"));
                totalCusThis += rsThis.getLong("count");
            }


            rsPrev = con.executeQuery(getTotalCustomerComming5MothTo6MonthAgoCycle(true));
            rsThis = con.executeQuery(getTotalCustomerComming5MothTo6MonthAgoCycle(false));
            if (rsPrev.next()) {
                totalCusPrev += rsPrev.getLong("count");
            }
            if (rsThis.next()) {
                totalCusThis += rsThis.getLong("count");
            }

            rsPrev = con.executeQuery(getTotalCustomerComming7MothTo1YearAgoCycle(true));
            rsThis = con.executeQuery(getTotalCustomerComming7MothTo1YearAgoCycle(false));
            if (rsPrev.next()) {
                totalCusPrev += rsPrev.getLong("count");
            }
            if (rsThis.next()) {
                totalCusThis += rsThis.getLong("count");
            }

            //失客カルテ
            rsPrev = con.executeQuery(getTotalCustomerComming1YearTo2YearAgoCycle(true));
            rsThis = con.executeQuery(getTotalCustomerComming1YearTo2YearAgoCycle(false));
            if (rsPrev.next()) {
                jx.setCellValue(14, 39, rsPrev.getLong("count"));
                totalCusPrev += rsPrev.getLong("count");

            }

            if (rsThis.next()) {
                jx.setCellValue(14, 38, rsThis.getLong("count"));
                totalCusThis += rsThis.getLong("count");
            }

            //総カルテ
            jx.setCellValue(12, 38, totalCusThis);
            jx.setCellValue(12, 39, totalCusPrev);


        } catch (SQLException e) {
            e.printStackTrace();
        }
        return jx;
    }

    private JExcelApi outputOldTemplate() throws NumberFormatException {
        JExcelApi jx = new JExcelApi("売上構成分析");
        jx.setTemplateFile("/reports/売上構成分析.xls");
        // ヘッダ
        jx.setValue(3, 4, paramBean.getTargetName());
        jx.setValue(8, 4, paramBean.getStaffName());
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");
        jx.setValue(3, 5, calPrevStart.getTime());
        jx.setValue(8, 5, calPrevEnd.getTime());
        jx.setValue(3, 6, calStart.getTime());
        jx.setValue(8, 6, calEnd.getTime());
        jx.setValue(2, 13, Integer.parseInt(this.prevStaffCount1.getText()));
        jx.setValue(2, 14, Integer.parseInt(this.staffCount1.getText()));
        jx.setValue(2, 16, Integer.parseInt(this.prevStaffCount2.getText()));
        jx.setValue(2, 17, Integer.parseInt(this.staffCount2.getText()));
        int months = getMonthsBetween(calStart, calEnd);
        ConnectionWrapper con = SystemInfo.getConnection();
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getTechItemValueSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getTechItemValueSQL(false));

            if (rsPrev.next()) {
                jx.setValue(14, 8, rsPrev.getLong("total_value") / months);
                jx.setValue(16, 8, rsPrev.getLong("tech_value") / months);
                jx.setValue(14, 21, rsPrev.getLong("item_value") / months);
                jx.setValue(16, 21, rsPrev.getLong("item_count") / months);
            }

            if (rsThis.next()) {
                jx.setValue(14, 9, rsThis.getLong("total_value") / months);
                jx.setValue(16, 9, rsThis.getLong("tech_value") / months);
                jx.setValue(14, 22, rsThis.getLong("item_value") / months);
                jx.setValue(16, 22, rsThis.getLong("item_count") / months);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getTotalCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getTotalCountSQL(false));

            BigDecimal bd = null;

            if (rsPrev.next()) {
                long totalCount = rsPrev.getLong("total_count");

                jx.setValue(2, 23, totalCount / months);

                if (totalCount > 0) {
                    bd = new BigDecimal(rsPrev.getDouble("female_count") / totalCount * 100);
                    jx.setValue(2, 28, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    bd = new BigDecimal(rsPrev.getDouble("designated_count") / totalCount * 100);
                    jx.setValue(14, 30, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }
            }

            if (rsThis.next()) {
                long totalCount = rsThis.getLong("total_count");

                jx.setValue(2, 24, totalCount / months);

                if (totalCount > 0) {
                    bd = new BigDecimal(rsThis.getDouble("female_count") / totalCount * 100);
                    jx.setValue(2, 29, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    bd = new BigDecimal(rsThis.getDouble("designated_count") / totalCount * 100);
                    jx.setValue(14, 31, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getNewFixedCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getNewFixedCountSQL(false));

            BigDecimal bd = null;

            if (rsPrev.next()) {
                jx.setValue(6, 19, rsPrev.getLong("new_count") / months);

                if (rsPrev.getDouble("new_count") > 0) {
                    bd = new BigDecimal(rsPrev.getDouble("new_reappearance_count") / rsPrev.getDouble("new_count") * 100);
                    jx.setValue(10, 17, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    bd = new BigDecimal(rsPrev.getDouble("new_reappearance_count2") / rsPrev.getDouble("new_count") * 100);
                    jx.setValue(10, 21, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }

                jx.setValue(6, 23, rsPrev.getLong("introducer_count") / months);

                jx.setValue(6, 27, rsPrev.getLong("fixed_count") / months);

                if (rsPrev.getDouble("fixed_count") > 0) {
                    bd = new BigDecimal(rsPrev.getDouble("fixed_reappearance_count") / rsPrev.getDouble("fixed_count") * 100);
                    jx.setValue(10, 25, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }

                bd = new BigDecimal(rsPrev.getDouble("fixed_visit_cycle"));
                jx.setValue(10, 29, bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue());

                bd = new BigDecimal(rsPrev.getDouble("fixed_visit_cycle_days"));
                jx.setValue(11, 29, bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue());
            }

            if (rsThis.next()) {
                jx.setValue(6, 20, rsThis.getLong("new_count") / months);

                if (rsThis.getDouble("new_count") > 0) {
                    bd = new BigDecimal(rsThis.getDouble("new_reappearance_count") / rsThis.getDouble("new_count") * 100);
                    jx.setValue(10, 18, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    bd = new BigDecimal(rsThis.getDouble("new_reappearance_count2") / rsThis.getDouble("new_count") * 100);
                    jx.setValue(10, 22, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }

                jx.setValue(6, 24, rsThis.getLong("introducer_count") / months);

                jx.setValue(6, 28, rsThis.getLong("fixed_count") / months);

                if (rsThis.getDouble("fixed_count") > 0) {
                    bd = new BigDecimal(rsThis.getDouble("fixed_reappearance_count") / rsThis.getDouble("fixed_count") * 100);
                    jx.setValue(10, 26, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }

                bd = new BigDecimal(rsThis.getDouble("fixed_visit_cycle"));
                jx.setValue(10, 30, bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue());

                bd = new BigDecimal(rsThis.getDouble("fixed_visit_cycle_days"));
                jx.setValue(11, 30, bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue());
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getReservationCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getReservationCountSQL(false));

            BigDecimal bd = null;

            if (rsPrev.next()) {
                if (rsPrev.getDouble("total_count") > 0) {
                    bd = new BigDecimal(rsPrev.getDouble("next_count") / rsPrev.getDouble("total_count") * 100);
                    jx.setValue(14, 26, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    double preCount = rsPrev.getDouble("preorder_count") + rsPrev.getDouble("web_count");
                    bd = new BigDecimal(preCount / rsPrev.getDouble("total_count") * 100);
                    jx.setValue(16, 26, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }
            }

            if (rsThis.next()) {
                if (rsThis.getDouble("total_count") > 0) {
                    bd = new BigDecimal(rsThis.getDouble("next_count") / rsThis.getDouble("total_count") * 100);
                    jx.setValue(14, 27, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    double preCount = rsThis.getDouble("preorder_count") + rsThis.getDouble("web_count");
                    bd = new BigDecimal(preCount / rsThis.getDouble("total_count") * 100);
                    jx.setValue(16, 27, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getMenuRatioSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getMenuRatioSQL(false));

            while (rsPrev.next()) {
                int id = rsPrev.getInt("menu_setting_id");
                double count = rsPrev.getLong("menu_count") / months;
                switch (id) {
                    case 1:
                        jx.setValue(14, 13, count);
                        break;
                    case 2:
                        jx.setValue(16, 13, count);
                        break;
                    case 3:
                        jx.setValue(14, 16, count);
                        break;
                    case 4:
                        jx.setValue(16, 16, count);
                        break;
                }
            }

            while (rsThis.next()) {
                int id = rsThis.getInt("menu_setting_id");
                double count = rsThis.getLong("menu_count") / months;
                switch (id) {
                    case 1:
                        jx.setValue(14, 14, count);
                        break;
                    case 2:
                        jx.setValue(16, 14, count);
                        break;
                    case 3:
                        jx.setValue(14, 17, count);
                        break;
                    case 4:
                        jx.setValue(16, 17, count);
                        break;
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {

            Calendar calTmpThis = (Calendar) calEnd.clone();
            calTmpThis.set(Calendar.DAY_OF_MONTH, 1);

            Calendar calTmpPrev = (Calendar) calStart.clone();
            if (this.optPrevYear.isSelected()) {
                calTmpPrev.setTime(calTmpThis.getTime());
                calTmpPrev.add(Calendar.YEAR, -1);
            } else {
                calTmpPrev.add(Calendar.MONTH, -1);
            }

            ResultSetWrapper rsPrev = con.executeQuery(getValidCountSQL(calTmpPrev, 1));
            ResultSetWrapper rsThis = con.executeQuery(getValidCountSQL(calTmpThis, 1));

            if (rsPrev.next()) {
                jx.setValue(4, 9, rsPrev.getLong("cnt1"));
                jx.setValue(6, 9, rsPrev.getLong("cnt2"));
                jx.setValue(8, 9, rsPrev.getLong("cnt3"));
                jx.setValue(10, 9, rsPrev.getLong("cnt4"));
            }

            if (rsThis.next()) {
                jx.setValue(4, 10, rsThis.getLong("cnt1"));
                jx.setValue(6, 10, rsThis.getLong("cnt2"));
                jx.setValue(8, 10, rsThis.getLong("cnt3"));
                jx.setValue(10, 10, rsThis.getLong("cnt4"));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return jx;
    }

    private String getBusinessReportTechInfo(boolean isPrev) {

        StringBuilder sql = new StringBuilder(1000);

        try {

            sql.append(" select");
            sql.append("      mtc.technic_class_id");
            sql.append("     ,mtc.technic_class_name");
            sql.append("     ,coalesce(ds.product_num, 0) as product_num");
            sql.append("     ,coalesce(ds.sales_value, 0) as sales_value");
            sql.append("     ,coalesce(ds.customer_count, 0) as customer_count");
            sql.append(" from");
            sql.append("     mst_technic_class mtc");
            sql.append("         left join");
            sql.append("             (");
            sql.append("                 select");
            sql.append("                      mt.technic_class_id");
            sql.append("                     ,sum(dsd.product_num) as product_num");
            sql.append("                     ,sum(discount_detail_value_in_tax) as sales_value");
            //Luc start edit 20140324 task #20752
            //sql.append("                     ,count(distinct dsd.slip_no) as customer_count"); 
            sql.append("                     ,count( distinct dsd.slip_no) as customer_count");
            //Luc start edit 20140324 task #20752
            sql.append(" 				from");
            sql.append("                     view_data_sales_detail_valid dsd");
            sql.append(" 				        left join mst_technic mt");
            sql.append(" 				               on mt.technic_id = dsd.product_id");
            sql.append(" 				where");
            sql.append("                         dsd.product_division in (1,3)");
            sql.append("                     and dsd.shop_id in (" + paramBean.getShopIDList() + ")");

            if (isPrev) {
                sql.append(" and dsd.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
            } else {
                sql.append(" and dsd.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
            }
            if (paramBean.getStaffId() != null) {
                sql.append("                 and dsd.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
            }
            sql.append("                 group by");
            sql.append("                     mt.technic_class_id");
            sql.append("             ) ds");
            sql.append("             on ds.technic_class_id = mtc.technic_class_id");
            sql.append(" where");
            sql.append("         mtc.delete_date is null");
            sql.append("     and mtc.prepaid = 0");
            sql.append("     and exists");
            sql.append("         (");
            sql.append("             select 1");
            sql.append("             from");
            sql.append("                 mst_use_product mup");
            sql.append("                     inner join mst_technic mt");
            sql.append("                             on mup.product_id = mt.technic_id");
            sql.append("             where");
            sql.append("                     mup.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                 and mup.product_division in (1,3)");
            sql.append("                 and mt.technic_class_id = mtc.technic_class_id");
            sql.append("         )");
            sql.append(" order by");
            sql.append("     mtc.display_seq");

        } catch (Exception e) {
            e.printStackTrace();
        }

        return sql.toString();
    }

    private String getBusinessReportItemInfo(boolean isPrev) {

        StringBuilder sql = new StringBuilder(1000);

        try {

            sql.append(" select");
            sql.append("      mgc.item_class_id");
            sql.append("     ,mgc.item_class_name");
            sql.append("     ,coalesce(ds.product_num, 0) as product_num");
            sql.append("     ,coalesce(ds.product_sales_num, 0) as product_sales_num");
            sql.append("     ,coalesce(ds.sales_value, 0) as sales_value");
            sql.append("     ,coalesce(ds.customer_count, 0) as customer_count");
            sql.append(" from");
            sql.append("     mst_item_class mgc");
            sql.append("         left join");
            sql.append("             (");
            sql.append("                 select");
            sql.append("                      mg.item_class_id");
            sql.append("                     ,sum(case when product_division = 2 then dsd.product_num else dsd.product_num * -1 end) as product_num");
            sql.append("                     ,sum(case when product_division = 2 then dsd.product_num else 0 end) as product_sales_num");
            //Luc start edit 20140324 task #20752
            //sql.append("                     ,sum(discount_detail_value_no_tax) as sales_value");
            //sql.append("                     ,count(distinct dsd.slip_no) as customer_count");
            sql.append("                     ,sum(discount_detail_value_in_tax) as sales_value");
            sql.append("                     ,count( distinct dsd.slip_no) as customer_count");
            //Luc end edit 20140324 task #20752
            sql.append("                 from");
            sql.append("                     view_data_sales_detail_valid dsd");
            sql.append("                         left join mst_item mg");
            sql.append("                                on mg.item_id = dsd.product_id");
            sql.append("                 where");

            sql.append("                         dsd.product_division in (2, 4)");


            sql.append("                     and dsd.shop_id in (" + paramBean.getShopIDList() + ")");
            if (isPrev) {
                sql.append(" and dsd.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
            } else {
                sql.append(" and dsd.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
            }
            if (paramBean.getStaffId() != null) {
                sql.append("                 and dsd.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
            }
            sql.append("                 group by");
            sql.append("                     mg.item_class_id ");
            sql.append("             ) ds");
            sql.append("             on ds.item_class_id = mgc.item_class_id");
            sql.append(" where");
            sql.append("         mgc.delete_date is null");
            sql.append("     and exists");
            sql.append("         (");
            sql.append("             select 1");
            sql.append("             from");
            sql.append("                 mst_use_product mup");
            sql.append("                     inner join mst_item mi");
            sql.append("                             on mup.product_id = mi.item_id");
            sql.append("             where");
            sql.append("                     mup.shop_id in (" + paramBean.getShopIDList() + ")");

            sql.append("                 and mup.product_division in (2,4)");
            sql.append("                 and mi.item_class_id = mgc.item_class_id");
            sql.append("         )");
            sql.append(" order by");
            sql.append("     mgc.display_seq");

        } catch (Exception e) {
            e.printStackTrace();
        }

        return sql.toString();
    }

    private String getCountCustomerVisited(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select ");
        sql.append(" count(case when VisitCount >= 4 then VisitCount end) as CountVisit4, ");
        sql.append(" count(case when VisitCount in (2,3)  then VisitCount end) as CountVisit2 ");
        sql.append(" from ");
        sql.append(" (select count(customer_id) as VisitCount,customer_id from data_sales ds ");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")");
        if (isPrev) {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append(" group by customer_id) t ");


//        sql.append(" SELECT A.customer_id, count(DISTINCT A.shop_id || A.slip_no) as cnt \n");
//        sql.append(" FROM \n");
//        sql.append("     data_sales A \n");
//        sql.append(" INNER JOIN\n");
//        sql.append("     data_sales_detail B\n");
//        sql.append(" ON\n");
//        sql.append("     A.shop_id = B.shop_id\n");
//        sql.append(" AND A.slip_no = B.slip_no\n");
//        sql.append(" WHERE \n");
//        sql.append("     TO_DATE(A.sales_date,'YYYYMMDD')\n");
//        if (isPrev) {
//            sql.append("         BETWEEN TO_DATE(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ",'YYYYMMDD')\n");
//            sql.append("         AND        TO_DATE( " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ",'YYYYMMDD')\n");
//        } else {
//            sql.append("         BETWEEN TO_DATE(" + SQLUtil.convertForSQL(calStart.getTime()) + ",'YYYYMMDD')\n");
//            sql.append("         AND        TO_DATE( " + SQLUtil.convertForSQL(calEnd.getTime()) + ",'YYYYMMDD')\n");
//
//        }
//        sql.append("         AND A.shop_id in (" + paramBean.getShopIDList() + ")");
//        sql.append(" AND B.product_division IN ( 1, 3 )\n");
//        sql.append(" AND A.delete_date is null \n");
//        if (chargeStaff.getSelectedIndex() > 0) {
//            sql.append(" AND A.STAFF_ID = " + SQLUtil.convertForSQL(paramBean.getStaffId()) + "\n");
//        }
//        sql.append(" GROUP BY A.customer_id \n");
//        sql.append(" HAVING count(DISTINCT A.shop_id || A.slip_no)  in ( 2, 3 )\n");
        return sql.toString();
    }

    private String getCountStaff(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select ");
        sql.append(" count(distinct staff_id) as CountStaff");
        sql.append(" from data_sales");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")");
        if (isPrev) {
            sql.append(" and sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append(" and delete_date is Null");
        return sql.toString();
    }

    private String getFanCustomerSQL(boolean isPrev) {

        StringBuilder sql = new StringBuilder(1000);
//
//        sql.append(" select");
//        // 技術売上
//        sql.append(" sum(case when ds.product_division in (1) then discount_detail_value_in_tax else 0 end) as tech_value");
//        sql.append(" ,customer_id");
//
//        sql.append(" from");
//        sql.append("     view_data_sales_detail_valid ds");
//        sql.append("         join mst_customer mc");
//        sql.append("         using(customer_id)");
//        sql.append(" where");
//        sql.append("         ds.shop_id in (" + paramBean.getShopIDList() + ")");
//
//        if (isPrev) {
//            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
//        } else {
//            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
//        }
//
//        if (chargeStaff.getSelectedIndex() > 0) {
//            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
//        }
//        sql.append(" and ds.product_division in (1,3) \n");
//        sql.append(" group by customer_id");
//        sql.append(" order by tech_value desc");



        sql.append(" SELECT  \n");
        sql.append("     A.customer_id,  \n");
        sql.append("     SUM( B.product_value - B.discount_value ) as val  \n");
        sql.append(" FROM  \n");
        sql.append("     data_sales A  \n");
        sql.append(" INNER JOIN  \n");
        sql.append("     data_sales_detail B  \n");
        sql.append(" ON  \n");
        sql.append("     A.slip_no = B.slip_no  \n");
        sql.append(" AND A.shop_id = B.shop_id  \n");
        sql.append(" WHERE  \n");
        sql.append("     A.sales_date  \n");
        if (isPrev) {
            sql.append("         BETWEEN " + SQLUtil.convertForSQL(calPrevStart.getTime()) + "  \n");
            sql.append("         AND     " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + " \n");
        } else {
            sql.append("         BETWEEN " + SQLUtil.convertForSQL(calStart.getTime()) + "  \n");
            sql.append("         AND     " + SQLUtil.convertForSQL(calEnd.getTime()) + " \n");
        }
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" AND A.STAFF_ID = " + SQLUtil.convertForSQL(paramBean.getStaffId()) + " \n");
        }
        sql.append(" AND B.product_division IN ( 1, 3 )  \n");
        sql.append(" AND A.delete_date is null  \n");
        sql.append(" AND B.delete_date is null  \n");
        sql.append(" AND A.shop_id in (" + paramBean.getShopIDList() + " )\n");
        sql.append(" GROUP BY  \n");
        sql.append("     A.customer_id  \n");
        sql.append(" ORDER BY  \n");
        sql.append("     SUM( B.product_value - B.discount_value ) desc  \n");

        return sql.toString();
    }

    private String getFanCustomerComebackSQL(boolean isPrev, long topCount) {

        StringBuilder sql = new StringBuilder(1000);

        Calendar cal3MothAgoStart = (Calendar) calStart.clone();
        cal3MothAgoStart.add(Calendar.MONTH, -3);
        Calendar cal3MothAgoEnd = (Calendar) calStart.clone();
        cal3MothAgoEnd.add(Calendar.DAY_OF_MONTH, -1);

        Calendar cal3MothAgoPrevStart = (Calendar) calPrevStart.clone();
        cal3MothAgoPrevStart.add(Calendar.MONTH, -3);
        Calendar cal3MothAgoPrevEnd = (Calendar) calPrevStart.clone();
        cal3MothAgoPrevEnd.add(Calendar.DAY_OF_MONTH, -1);
        sql.append(" select count(*)");
        sql.append(" from");
        sql.append(" (");
        sql.append("    SELECT customer_id ");
        sql.append("    FROM ");
        sql.append("    data_sales A  ");
        sql.append("    WHERE  ");
        if (isPrev) {
            sql.append("    A.sales_date BETWEEN " + SQLUtil.convertForSQL(cal3MothAgoPrevStart.getTime()) + " AND " + SQLUtil.convertForSQL(cal3MothAgoPrevEnd.getTime()) + "  -- 前年度 通常 \n");
        } else {
            sql.append("    A.sales_date BETWEEN  " + SQLUtil.convertForSQL(cal3MothAgoStart.getTime()) + " AND " + SQLUtil.convertForSQL(cal3MothAgoEnd.getTime()) + "  -- 前年度 通常 \n");
        }
        sql.append("    AND A.delete_date is null ");
        sql.append("    And         A.shop_id in (" + paramBean.getShopIDList() + ")     ");
        sql.append("    and customer_id in(");
        sql.append("       SELECT  ");
        sql.append("       A.customer_id ");
        sql.append("       FROM          data_sales A ");
        sql.append("       INNER JOIN  data_sales_detail B ");
        sql.append("       ON   A.slip_no = B.slip_no ");
        sql.append("       AND A.shop_id = B.shop_id ");
        sql.append("       WHERE TO_DATE(TO_CHAR(A.sales_date,'YYYY/MM/DD'),'YYYY/MM/DD') ");
        if (isPrev) {
            sql.append("       BETWEEN TO_DATE(" + SQLUtil.convertForSQL(calPrevStart.getTime()) + ",'YYYY/MM/DD') ");
            sql.append("       AND        TO_DATE(" + SQLUtil.convertForSQL(calPrevEnd.getTime()) + ",'YYYY/MM/DD') ");
        } else {
            sql.append("       BETWEEN TO_DATE(" + SQLUtil.convertForSQL(calStart.getTime()) + ",'YYYY/MM/DD') ");
            sql.append("       AND        TO_DATE(" + SQLUtil.convertForSQL(calEnd.getTime()) + ",'YYYY/MM/DD') ");
        }
        sql.append("       AND B.product_division IN ( 1, 3 ) ");
        sql.append("       AND A.delete_date is null ");
        sql.append("       AND B.delete_date is null ");
        sql.append("       GROUP BY ");
        sql.append("       A.customer_id ");
        sql.append("       ORDER BY ");
        sql.append("       SUM( B.product_value - B.discount_value ) desc ");
        sql.append("        limit " + topCount + "");
        sql.append("        )");
        sql.append("    GROUP BY customer_id ");
        sql.append(" )a");

        return sql.toString();
    }

    private String getCustomerVisitedCountRegular(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select ");
        sql.append(" customer_id ");
        sql.append(" from ");
        sql.append(" (select count(customer_id) as VisitCount,customer_id from data_sales ds ");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")");
        if (isPrev) {
            sql.append(" and ds.sales_date <=" + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and ds.sales_date <= " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append(" group by customer_id) t ");
        sql.append(" where VisitCount >= 4");
        return sql.toString();
    }

    private String getReturnCustomer(boolean isPrev) {
        Calendar cal1;
        Calendar cal2;
        if (isPrev) {
            cal1 = (Calendar) calPrevStart.clone();
            cal2 = (Calendar) calPrevEnd.clone();
        } else {
            cal1 = (Calendar) calStart.clone();
            cal2 = (Calendar) calEnd.clone();
        }

        // 稼働カルテ枚数
        cal1.add(cal1.MONTH, -3);
        cal2.add(cal2.MONTH, -1);


        StringBuilder sql = new StringBuilder(1000);
        sql.append(" Select customer_id from data_sales ds where ds.delete_date is NULL ");
        sql.append(" and shop_id in (" + paramBean.getShopIDList() + ")");
        if (isPrev) {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append(" and customer_id in (");
        sql.append(" Select customer_id from data_sales ds where ds.delete_date is NULL ");
        sql.append(" and shop_id in (" + paramBean.getShopIDList() + ")");
        if (isPrev) {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(cal1.getTime()) + " and " + SQLUtil.convertForSQL(cal2.getTime()));
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(cal1.getTime()) + " and " + SQLUtil.convertForSQL(cal2.getTime()));
        }
        sql.append(" and customer_id in ( ");
        sql.append(getCustomerVisitedCountRegular(isPrev));
        sql.append(" )");
        sql.append(" group by customer_id)");
        sql.append(" group by customer_id");
        return sql.toString();
    }

    private String getTotalCustomer4TimeInMonthSQL(boolean isPrev) {

        StringBuilder sql = new StringBuilder(1000);
//        sql.append(" select count(*) from \n");
//        sql.append(" (\n");
//        sql.append("     SELECT A.customer_id, count(*) as cnt\n");
//        sql.append("     FROM\n");
//        sql.append("     data_sales A\n");
//        sql.append("     WHERE\n");
//        if (isPrev) {
//            sql.append("     A.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + "  -- - 昨年度 通常	\n");
//        } else {
//            sql.append("     A.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()) + "  -- 今年度 通常	\n");
//        }
//        sql.append("     AND A.delete_date is null \n");
//        sql.append("     group by A.customer_id \n");
//        sql.append("     having count(*) >= 4        -- 常連の場合 \n");
//        sql.append(" )a \n");
//        return sql.toString();


        sql.append(" select count(*) from \n");
        sql.append(" (\n");
        sql.append(" SELECT  A.customer_id, count( cast(A.shop_id as text)|| A.slip_no) as cnt \n");
        sql.append(" FROM  \n");
        sql.append("     data_sales A  \n");
        sql.append(" INNER JOIN \n");
        sql.append("     data_sales_detail B \n");
        sql.append(" ON\n");
        sql.append("     A.shop_id = B.shop_id\n");
        sql.append(" AND A.slip_no = B.slip_no\n");
        sql.append(" WHERE \n");
        if (isPrev) {
            sql.append("     A.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + "  -- - 昨年度 通常	\n");
        } else {
            sql.append("     A.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()) + "  -- 今年度 通常	\n");
        }
        sql.append(" AND B.product_division IN ( 1, 3 )\n");
        sql.append(" AND A.delete_date is null \n");
        sql.append(" GROUP BY A.customer_id \n");
        sql.append(" HAVING count( cast(A.shop_id as text) || A.slip_no) >= 4\n");

        sql.append(" )a \n");
        return sql.toString();
    }

    private String getTotalCustomer2TimeOr3TimeInMonthSQL(boolean isPrev) {

        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select count(*) from \n");
        sql.append(" (\n");
        sql.append("     SELECT A.customer_id, count(*) as cnt\n");
        sql.append("     FROM\n");
        sql.append("     data_sales A\n");
        sql.append("     WHERE\n");
        if (isPrev) {
            sql.append("     A.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + "  -- - 昨年度 通常	\n");
        } else {
            sql.append("     A.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()) + "  -- 今年度 通常	\n");
        }
        sql.append("     AND A.delete_date is null \n");
        sql.append("     group by A.customer_id \n");
        sql.append("     having count(*) in ( 2, 3 )  -- 浮動の場合 \n");
        sql.append(" )a \n");
        return sql.toString();
    }

    private String getTotalCustomer4TimeInMonthAndComming3MothAgo(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);


        Calendar cal4MothAgoStart = (Calendar) calStart.clone();
        cal4MothAgoStart.add(Calendar.MONTH, -3);
        Calendar cal4MothAgoEnd = (Calendar) calStart.clone();
        cal4MothAgoEnd.add(Calendar.DAY_OF_MONTH, -1);
        Calendar cal4MonthAgoStartPrev = (Calendar) calPrevStart.clone();
        cal4MonthAgoStartPrev.add(Calendar.MONTH, -3);
        Calendar cal4MonthAgoEndPrev = (Calendar) calPrevStart.clone();
        cal4MonthAgoEndPrev.add(Calendar.DAY_OF_MONTH, -1);
        sql.append(" select count(*)\n");
        sql.append(" from \n");
        sql.append(" (\n");
        sql.append(" SELECT A.customer_id, count(*) as cnt\n");
        sql.append(" FROM\n");
        sql.append(" data_sales A\n");
        sql.append(" WHERE\n");
        if (isPrev) {
            sql.append(" A.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + "  -- 昨年度 通常\n");
        } else {
            sql.append(" A.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()) + "  -- 今年度 通常\n");
        }
        sql.append(" AND A.delete_date is null\n");
        sql.append("  and customer_id in (\n");
        sql.append(" SELECT customer_id\n");
        sql.append(" FROM\n");
        sql.append("     data_sales A\n");
        sql.append(" WHERE\n");
        if (isPrev) {
            sql.append("     A.sales_date BETWEEN " + SQLUtil.convertForSQL(cal4MonthAgoStartPrev.getTime()) + " AND " + SQLUtil.convertForSQL(cal4MonthAgoEndPrev.getTime()) + " --`前年度 通常  \n");

        } else {
            sql.append("     A.sales_date BETWEEN " + SQLUtil.convertForSQL(cal4MothAgoStart.getTime()) + " AND " + SQLUtil.convertForSQL(cal4MothAgoEnd.getTime()) + "  --今年度 通常 \n");
        }
        sql.append(" AND A.delete_date is null\n");
        sql.append(" GROUP BY customer_id\n");
        sql.append(" )\n");
        sql.append(" group by A.customer_id\n");
        sql.append("  having count(*) >= 4        -- 常連の場合\n");
        sql.append(" )a	\n");
        return sql.toString();



    }

    private String getTotalCustomer2TimeOr3TimeInMonthAndComming3MothAgo(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);
        Calendar cal3MothAgoStart = (Calendar) calStart.clone();
        cal3MothAgoStart.add(Calendar.MONTH, -3);
        Calendar cal3MothAgoEnd = (Calendar) calStart.clone();
        cal3MothAgoEnd.add(Calendar.DAY_OF_MONTH, -1);


        Calendar cal3MonthAgoStartPrev = (Calendar) calPrevStart.clone();
        cal3MonthAgoStartPrev.add(Calendar.MONTH, -3);
        Calendar cal3MonthAgoEndPrev = (Calendar) calPrevStart.clone();
        cal3MonthAgoEndPrev.add(Calendar.DAY_OF_MONTH, -1);
        sql.append(" select count(*)\n");
        sql.append(" from \n");
        sql.append(" (\n");
        sql.append(" SELECT A.customer_id, count(*) as cnt\n");
        sql.append(" FROM\n");
        sql.append(" data_sales A\n");
        sql.append(" WHERE\n");
        if (isPrev) {
            sql.append(" A.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()) + "  -- 昨年度 通常\n");
        } else {
            sql.append(" A.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()) + "  -- 今年度 通常\n");
        }
        sql.append(" AND A.delete_date is null\n");
        sql.append("  and customer_id in (\n");
        sql.append(" SELECT customer_id\n");
        sql.append(" FROM\n");
        sql.append("     data_sales A\n");
        sql.append(" WHERE\n");
        if (isPrev) {
            sql.append("     A.sales_date BETWEEN " + SQLUtil.convertForSQL(cal3MonthAgoStartPrev.getTime()) + " AND " + SQLUtil.convertForSQL(cal3MonthAgoEndPrev.getTime()) + "  -- 前年度 通常\n");
        } else {
            sql.append("     A.sales_date BETWEEN " + SQLUtil.convertForSQL(cal3MothAgoStart.getTime()) + " AND " + SQLUtil.convertForSQL(cal3MothAgoEnd.getTime()) + "  -- 今年度 通常\n");
        }
        sql.append(" AND A.delete_date is null\n");
        sql.append(" GROUP BY customer_id\n");
        sql.append(" )\n");
        sql.append(" group by A.customer_id\n");
        sql.append("   having count(*) in ( 2, 3 )  -- 浮動の場合\n");
        sql.append(" )a	\n");




        return sql.toString();
    }

    private String getCustomerVisitedCountGuest(boolean isPrev) {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select ");
        sql.append(" customer_id ");
        sql.append(" from ");
        sql.append(" (select count(customer_id) as VisitCount,customer_id from data_sales ds ");
        sql.append(" where shop_id in (" + paramBean.getShopIDList() + ")");
        if (isPrev) {
            sql.append(" and ds.sales_date <=" + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and ds.sales_date <= " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append(" group by customer_id) t ");
        sql.append(" where VisitCount in (2,3)");
        return sql.toString();
    }

    private String getReturnCustomerGuest(boolean isPrev) {
        Calendar cal1;
        Calendar cal2;
        if (isPrev) {
            cal1 = (Calendar) calPrevStart.clone();
            cal2 = (Calendar) calPrevEnd.clone();
        } else {
            cal1 = (Calendar) calStart.clone();
            cal2 = (Calendar) calEnd.clone();
        }

        // 稼働カルテ枚数
        cal1.add(cal1.MONTH, -3);
        cal2.add(cal2.MONTH, -1);


        StringBuilder sql = new StringBuilder(1000);
        sql.append(" Select customer_id from data_sales ds where ds.delete_date is NULL ");
        sql.append(" and shop_id in (" + paramBean.getShopIDList() + ")");
        if (isPrev) {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append(" and customer_id in (");
        sql.append(" Select customer_id from data_sales ds where ds.delete_date is NULL ");
        sql.append(" and shop_id in (" + paramBean.getShopIDList() + ")");
        if (isPrev) {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(cal1.getTime()) + " and " + SQLUtil.convertForSQL(cal2.getTime()));
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(cal1.getTime()) + " and " + SQLUtil.convertForSQL(cal2.getTime()));
        }
        sql.append(" and customer_id in ( ");
        sql.append(getCustomerVisitedCountGuest(isPrev));
        sql.append(" )");
        sql.append(" group by customer_id)");
        sql.append(" group by customer_id");
        return sql.toString();
    }

    private String getTechValueCustomerSQLPrev() {

        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");
        // 技術売上
        sql.append(" sum(case when ds.product_division in (1) then discount_detail_value_in_tax else 0 end) as tech_value");
        sql.append(" ,customer_id");

        sql.append(" from");
        sql.append("     view_data_sales_detail_valid ds");
        sql.append("         join mst_customer mc");
        sql.append("         using(customer_id)");
        sql.append(" where");
        sql.append("         ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append(" and ds.sales_date <= " + SQLUtil.convertForSQL(calEnd.getTime()));

        sql.append("     and mc.customer_no <> '0'");

        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append(" group by customer_id");
        sql.append(" order by tech_value desc");

        return sql.toString();
    }

    private String getTechValueCustomerSQLPrev3Month(String CusID) {

        Calendar cal1;
        Calendar cal2;
        cal1 = (Calendar) calPrevStart.clone();
        cal2 = (Calendar) calPrevEnd.clone();
        // 稼働カルテ枚数
        cal1.add(cal1.MONTH, -3);
        cal2.add(cal2.MONTH, -1);
        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");
        // 技術売上
        sql.append(" sum(case when ds.product_division in (1) then discount_detail_value_in_tax else 0 end) as tech_value");
        sql.append(" ,customer_id");

        sql.append(" from");
        sql.append("     view_data_sales_detail_valid ds");
        sql.append("         join mst_customer mc");
        sql.append("         using(customer_id)");
        sql.append(" where");
        sql.append("         ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(cal1.getTime()) + " and " + SQLUtil.convertForSQL(cal2.getTime()));
        sql.append(" and ds.customer_id in (" + CusID + ") ");

        sql.append("     and mc.customer_no <> '0'");

        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append(" group by customer_id");
        sql.append(" order by tech_value desc");

        return sql.toString();
    }

    private String getTechValueCustomerSQLPrev1Month(String CusID) {

        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");
        // 技術売上
        sql.append(" sum(case when ds.product_division in (1) then discount_detail_value_in_tax else 0 end) as tech_value");
        sql.append(" ,customer_id");

        sql.append(" from");
        sql.append("     view_data_sales_detail_valid ds");
        sql.append("         join mst_customer mc");
        sql.append("         using(customer_id)");
        sql.append(" where");
        sql.append("         ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        sql.append(" and ds.customer_id in (" + CusID + ") ");

        sql.append("     and mc.customer_no <> '0'");

        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append(" group by customer_id");
        sql.append(" order by tech_value desc");

        return sql.toString();
    }
}