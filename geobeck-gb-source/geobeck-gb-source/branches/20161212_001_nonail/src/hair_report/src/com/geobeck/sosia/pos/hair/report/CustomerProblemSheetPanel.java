/*
 * ReappearancePredictionPanel.java
 *
 * Created on 2010/03/05, 12:00
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.ibm.icu.text.SimpleDateFormat;
import java.awt.*;
import java.util.*;
import javax.swing.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.mail.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.util.SQLUtil;
import java.math.BigDecimal;
import java.sql.SQLException;
import javax.swing.text.JTextComponent;
import javax.swing.text.PlainDocument;
import org.apache.commons.lang.math.NumberUtils;

/**
 *
 * @author  geobeck
 */
public class CustomerProblemSheetPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx implements SelectMailAddressDialogOpener
{
	private Integer selectedAddress = -1;
        private ArrayList<MstCustomer> resultList = new ArrayList<MstCustomer>();
        
        private ReportParameterBean paramBean = null;
        
        private Calendar calStart = null;
        private Calendar calEnd = null;
        private Calendar calPrevStart = null;
        private Calendar calPrevEnd = null;
        private Calendar calBeforePrevStart = null;
        private Calendar calBeforePrevEnd = null;
        
        /** Creates new form StaffShopRankingPanel */
	public CustomerProblemSheetPanel()
	{
            initComponents();
            addMouseCursorChange();
            this.setSize(820,680);
            this.setPath("帳票出力");
            this.setTitle("客数問題発見シートα");
            this.setKeyListener();

            this.initChargeStaff();

            // 顧客共有の有無によりグループ表示を切り替える
            if (SystemInfo.getSetteing().isShareCustomer()) {
                SystemInfo.initGroupShopComponents(shop, 3);
            } else {
                SystemInfo.initGroupShopComponents(shop, 2);
            }

            //初期化処理
            this.init();
            
	}
        
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
            SystemInfo.addMouseCursorChange(btnOutput);
	}
        
    	public void setSelectedAddress(Integer selectedAddress)
	{
            this.selectedAddress = selectedAddress;
	}
	    
	/**
	 * 主担当を取得する
	 */
	private void initChargeStaff()
	{
	    chargeStaff.removeAllItems();

	    MstStaffs staffs = new MstStaffs();

	    staffs.setShopIDList(SystemInfo.getCurrentShop().getShopID().toString());

	    try
	    {
		staffs.load(SystemInfo.getConnection(), true);
	    }
	    catch(java.sql.SQLException e)
	    {
		//SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }

	    for (MstStaff ms : staffs) {
		chargeStaff.addItem(ms);
	    }

	    chargeStaff.setSelectedIndex(0);
	}	
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        customerGroup = new javax.swing.ButtonGroup();
        comingCycleGroup = new javax.swing.ButtonGroup();
        customerCategoryGroup = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        btnOutput = new javax.swing.JButton();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        chargeStaffLabel = new javax.swing.JLabel();
        chargeStaffNo = new javax.swing.JTextField();
        chargeStaff = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        lblTargetDate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        endMonth = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        startMonth = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        staffCount = new com.geobeck.swing.JTextFieldEx();
        jLabel9 = new javax.swing.JLabel();
        lblTargetDate1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        prevStaffCount = new com.geobeck.swing.JTextFieldEx();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lblPrevPeriod = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        startYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
            startYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));

    endYear = new javax.swing.JComboBox();
    ((PlainDocument)((JTextComponent)
        endYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
    new CustomFilter(4, CustomFilter.NUMBER));

    setFocusCycleRoot(true);
    setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.setLayout(null);

    pnlMain.setFocusCycleRoot(true);
    pnlMain.setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.setOpaque(false);
    btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnOutput.setBorderPainted(false);
    btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnOutput.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOutputActionPerformed(evt);
        }
    });

    pnlMain.add(btnOutput);
    btnOutput.setBounds(440, 10, 92, 25);

    shopLabel.setText("\u5e97\u8217");
    pnlMain.add(shopLabel);
    shopLabel.setBounds(0, 10, 50, 22);

    shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    shop.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            shopActionPerformed(evt);
        }
    });

    pnlMain.add(shop);
    shop.setBounds(70, 10, 210, 22);

    chargeStaffLabel.setText("\u4e3b\u62c5\u5f53\u8005");
    pnlMain.add(chargeStaffLabel);
    chargeStaffLabel.setBounds(0, 40, 50, 25);

    chargeStaffNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    chargeStaffNo.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            chargeStaffNoFocusLost(evt);
        }
    });

    pnlMain.add(chargeStaffNo);
    chargeStaffNo.setBounds(70, 40, 40, 25);

    chargeStaff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    chargeStaff.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            chargeStaffActionPerformed(evt);
        }
    });

    pnlMain.add(chargeStaff);
    chargeStaff.setBounds(120, 40, 160, 24);

    jLabel2.setText("\u30b9\u30bf\u30c3\u30d5\u4eba\u6570");
    pnlMain.add(jLabel2);
    jLabel2.setBounds(70, 160, 60, 20);

    lblTargetDate.setText("\u5bfe\u8c61\u671f\u9593");
    lblTargetDate.setFocusCycleRoot(true);
    lblTargetDate.setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.add(lblTargetDate);
    lblTargetDate.setBounds(0, 120, 50, 22);

    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("\uff5e");
    jLabel1.setFocusCycleRoot(true);
    jLabel1.setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.add(jLabel1);
    jLabel1.setBounds(200, 120, 20, 22);

    jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel5.setText("\u5e74");
    pnlMain.add(jLabel5);
    jLabel5.setBounds(120, 120, 20, 22);

    endMonth.setMaximumRowCount(12);
    endMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    endMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    endMonth.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            endMonthActionPerformed(evt);
        }
    });

    pnlMain.add(endMonth);
    endMonth.setBounds(300, 120, 40, 22);

    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel6.setText("\u6708");
    pnlMain.add(jLabel6);
    jLabel6.setBounds(180, 120, 20, 22);

    jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel7.setText("\u5e74");
    pnlMain.add(jLabel7);
    jLabel7.setBounds(280, 120, 20, 22);

    startMonth.setMaximumRowCount(12);
    startMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    startMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    startMonth.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            startMonthActionPerformed(evt);
        }
    });

    pnlMain.add(startMonth);
    startMonth.setBounds(140, 120, 40, 22);

    jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel8.setText("\u6708");
    pnlMain.add(jLabel8);
    jLabel8.setBounds(340, 120, 20, 22);

    staffCount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    staffCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    staffCount.setText("0");
    staffCount.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            staffCountFocusLost(evt);
        }
    });

    pnlMain.add(staffCount);
    staffCount.setBounds(130, 160, 40, 22);

    jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel9.setText("\u4eba");
    pnlMain.add(jLabel9);
    jLabel9.setBounds(170, 160, 20, 22);

    lblTargetDate1.setText("\u6bd4\u8f03\u671f\u9593");
    lblTargetDate1.setFocusCycleRoot(true);
    lblTargetDate1.setFocusTraversalPolicy(getFocusTraversalPolicy());
    pnlMain.add(lblTargetDate1);
    lblTargetDate1.setBounds(0, 230, 50, 22);

    jLabel3.setText("\u30b9\u30bf\u30c3\u30d5\u4eba\u6570");
    pnlMain.add(jLabel3);
    jLabel3.setBounds(70, 260, 60, 20);

    prevStaffCount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    prevStaffCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    prevStaffCount.setText("0");
    prevStaffCount.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            prevStaffCountFocusLost(evt);
        }
    });

    pnlMain.add(prevStaffCount);
    prevStaffCount.setBounds(130, 260, 40, 22);

    jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel10.setText("\u4eba");
    pnlMain.add(jLabel10);
    jLabel10.setBounds(170, 260, 20, 22);

    jLabel14.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
    jLabel14.setForeground(java.awt.Color.gray);
    jLabel14.setText("\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501");
    pnlMain.add(jLabel14);
    jLabel14.setBounds(0, 90, 490, 13);

    jLabel15.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
    jLabel15.setForeground(java.awt.Color.gray);
    jLabel15.setText("\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501");
    pnlMain.add(jLabel15);
    jLabel15.setBounds(0, 200, 490, 13);

    lblPrevPeriod.setText("2008\u5e7404\u6708 \uff5e 2009\u5e7403\u6708");
    pnlMain.add(lblPrevPeriod);
    lblPrevPeriod.setBounds(70, 230, 210, 20);

    jLabel16.setFont(new java.awt.Font("MS UI Gothic", 1, 12));
    jLabel16.setForeground(java.awt.Color.gray);
    jLabel16.setText("\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501");
    pnlMain.add(jLabel16);
    jLabel16.setBounds(0, 310, 490, 13);

    startYear.setEditable(true);
    startYear.setMaximumRowCount(12);
    startYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    startYear.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            startYearActionPerformed(evt);
        }
    });

    pnlMain.add(startYear);
    startYear.setBounds(60, 120, 60, 22);

    endYear.setEditable(true);
    endYear.setMaximumRowCount(12);
    endYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    endYear.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            endYearActionPerformed(evt);
        }
    });

    pnlMain.add(endYear);
    endYear.setBounds(220, 120, 60, 22);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 606, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(44, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(97, Short.MAX_VALUE))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void endYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endYearActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_endYearActionPerformed

    private void startYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startYearActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_startYearActionPerformed

    private void endMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endMonthActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_endMonthActionPerformed

    private void startMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMonthActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_startMonthActionPerformed

    private void prevStaffCountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_prevStaffCountFocusLost

        NumberUtils numUtil = new NumberUtils();
        if(!numUtil.isNumber(this.prevStaffCount.getText())) {
            this.prevStaffCount.setText("0");
        }
        
    }//GEN-LAST:event_prevStaffCountFocusLost

    private void staffCountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_staffCountFocusLost

        NumberUtils numUtil = new NumberUtils();
        if(!numUtil.isNumber(this.staffCount.getText())) {
            this.staffCount.setText("0");
        }
        
    }//GEN-LAST:event_staffCountFocusLost

    private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed

        if (inputCheck()) {

            btnOutput.setCursor(null);
            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                this.print();

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
        }
        
    }//GEN-LAST:event_btnOutputActionPerformed

    private void chargeStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chargeStaffActionPerformed

	MstStaff ms= (MstStaff)chargeStaff.getSelectedItem();
        
        if (ms != null) {
            if (ms.getStaffID() != null) {
		chargeStaffNo.setText(ms.getStaffNo());
	    }

	    if (chargeStaff.getSelectedIndex() == 0) {
                chargeStaffNo.setText("");
            }
        }
    }//GEN-LAST:event_chargeStaffActionPerformed

    private void chargeStaffNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chargeStaffNoFocusLost

	if (!chargeStaffNo.getText().equals("")) {
            this.setChargeStaff(chargeStaffNo.getText());
        }else{
            chargeStaff.setSelectedIndex(0);
        }
    }//GEN-LAST:event_chargeStaffNoFocusLost

    private boolean checkDuplicateCustomer(ArrayList<MstCustomer> selectedArray, MstCustomer customer){
        for(MstCustomer mc : selectedArray){
            if(mc.getCustomerID().intValue() == customer.getCustomerID().intValue()){
                return true;
            }
        }
        return false;
    }
    
    private Date getStartDate(Date date){
        
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        
        return cal.getTime();
    }
    
    private Date getEndDate(Date date){
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);
        
        return cal.getTime();
    }
    
    private void print(){

        paramBean = new ReportParameterBean();
        
        //グループ
        if(shop.getSelectedItem() instanceof MstGroup)
        {
            MstGroup mg = (MstGroup)shop.getSelectedItem();
            paramBean.setTargetName(mg.getGroupName());
            paramBean.setShopIDList(mg.getShopIDListAll());
        }
        //店舗
        else if(shop.getSelectedItem() instanceof MstShop)
        {
            MstShop ms = (MstShop)shop.getSelectedItem();
            paramBean.setTargetName(ms.getShopName());
            paramBean.setShopIDList(ms.getShopID().toString());
        }
        
        // 主担当
        if (chargeStaff.getSelectedIndex() > 0) {
            MstStaff ms = (MstStaff)this.chargeStaff.getSelectedItem();
            paramBean.setStaffId(ms.getStaffID());
            paramBean.setStaffName(ms.getFullStaffName());
        } else {
            paramBean.setStaffId(null);
            paramBean.setStaffName("");
        }
        
        JExcelApi jx = new JExcelApi("客数問題発見シートα");
        jx.setTemplateFile("/reports/客数問題発見シートα.xls");
        
        // ヘッダ
        if (chargeStaff.getSelectedIndex() > 0) {
            jx.setValue(4, 3, paramBean.getStaffName());
        } else {
            jx.setValue(4, 3, paramBean.getTargetName());
        }
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");
        jx.setValue(4, 4, sdf.format(calPrevStart.getTime()) + " 〜 " + sdf.format(calPrevEnd.getTime()));
        jx.setValue(4, 5, sdf.format(calStart.getTime()) + " 〜 " + sdf.format(calEnd.getTime()));

        /*****************************/
        // スタッフ数
        /*****************************/
        jx.setValue(4, 12, Integer.parseInt(this.prevStaffCount.getText()));
        jx.setValue(4, 13, Integer.parseInt(this.staffCount.getText()));
        
        ConnectionWrapper con = SystemInfo.getConnection();
        
        /*****************************/
        // メニュー率
        /*****************************/
        try {
            ResultSetWrapper rsTech = con.executeQuery(getMenuRatioTechSQL());
            ResultSetWrapper rsItem = con.executeQuery(getMenuRatioItemSQL());

            final int MAX_COUNT = 24;
            int techCount = 0;
            int itemCount = 0;
            
            if (rsTech.last()) techCount = rsTech.getRow();
            if (rsItem.last()) itemCount = rsItem.getRow();
            
            int delCount = MAX_COUNT;
            int maxCount = Math.max(techCount, itemCount);
            if (maxCount > 12) {
                delCount = MAX_COUNT - (int)Math.ceil((maxCount - 12) / 2d);
            }
            
            for (int i = 0; i < (delCount * 3); i++) {
                jx.removeRow(35);
            }
            
            rsTech.beforeFirst();
            rsItem.beforeFirst();

            int row = 17;
            
            while(rsTech.next()){
                boolean isLeftCell = (rsTech.getRow() % 2) > 0;
                int col = isLeftCell ? 34 : 39;
                jx.setValue(col, row, rsTech.getString("technic_class_name"));
                jx.setValue(col, row + 1, rsTech.getInt("tech_count_prev"));
                jx.setValue(col, row + 2, rsTech.getInt("tech_count"));
                if (!isLeftCell) {
                    row += 3;
                }
            }

            row = 17;
            while(rsItem.next()){
                boolean isLeftCell = (rsItem.getRow() % 2) > 0;
                int col = isLeftCell ? 44 : 49;
                jx.setValue(col, row, rsItem.getString("item_class_name"));
                jx.setValue(col, row + 1, rsItem.getInt("item_count_prev"));
                jx.setValue(col, row + 2, rsItem.getInt("item_count"));
                if (!isLeftCell) {
                    row += 3;
                }
            }
            
        } catch(SQLException e) {
            e.printStackTrace();
        }
        
        /*****************************/
        // 指名率
        /*****************************/
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getDesignatedCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getDesignatedCountSQL(false));

            if (rsPrev.next()) jx.setValue(4, 16, rsPrev.getLong("designated_count"));
            if (rsThis.next()) jx.setValue(4, 17, rsThis.getLong("designated_count"));
            
        } catch(SQLException e) {
            e.printStackTrace();
        }
        
        /*****************************/
        // 総客数
        /*****************************/
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getTotalCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getTotalCountSQL(false));

            if (rsPrev.next()) jx.setValue(4, 24, rsPrev.getLong("total_count"));
            if (rsThis.next()) jx.setValue(4, 25, rsThis.getLong("total_count"));
            
        } catch(SQLException e) {
            e.printStackTrace();
        }
        
        /*****************************/
        // 有効顧客数
        /*****************************/
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getValidCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getValidCountSQL(false));

            if (rsPrev.next()) {
                jx.setValue(9, 8, rsPrev.getLong("valid_count1"));
                jx.setValue(14, 8, rsPrev.getLong("valid_count2"));
                jx.setValue(19, 8, rsPrev.getLong("valid_count3"));
            }
            
            if (rsThis.next()) {
                jx.setValue(9, 9, rsThis.getLong("valid_count1"));
                jx.setValue(14, 9, rsThis.getLong("valid_count2"));
                jx.setValue(19, 9, rsThis.getLong("valid_count3"));
            }
            
        } catch(SQLException e) {
            e.printStackTrace();
        }
        
        /*****************************/
        // 失客数
        /*****************************/
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getInValidCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getInValidCountSQL(false));

            if (rsPrev.next()) jx.setValue(24, 8, rsPrev.getLong("invalid_count"));
            if (rsThis.next()) jx.setValue(24, 9, rsThis.getLong("invalid_count"));
            
        } catch(SQLException e) {
            e.printStackTrace();
        }
        
        /*****************************/
        // 有効顧客数
        /*****************************/
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getTechItemCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getTechItemCountSQL(false));

            if (rsPrev.next()) {
                jx.setValue(39, 8, rsPrev.getLong("tech_value"));
                jx.setValue(34, 13, rsPrev.getLong("item_value"));
                jx.setValue(44, 13, rsPrev.getLong("item_count"));
            }
            
            if (rsThis.next()) {
                jx.setValue(39, 9, rsThis.getLong("tech_value"));
                jx.setValue(34, 14, rsThis.getLong("item_value"));
                jx.setValue(44, 14, rsThis.getLong("item_count"));
            }
            
        } catch(SQLException e) {
            e.printStackTrace();
        }
        
        /*****************************/
        // 予約率
        /*****************************/
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getReservationCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getReservationCountSQL(false));

            BigDecimal bd = null;
            
            if (rsPrev.next()) {
                if (rsPrev.getDouble("total_count") > 0) {
                    bd = new BigDecimal(rsPrev.getDouble("preorder_count") / rsPrev.getDouble("total_count") * 100);
                    jx.setValue(19, 12, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    bd = new BigDecimal(rsPrev.getDouble("web_count") / rsPrev.getDouble("total_count") * 100);
                    jx.setValue(24, 12, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }
            }
            
            if (rsThis.next()) {
                if (rsThis.getDouble("total_count") > 0) {
                    bd = new BigDecimal(rsThis.getDouble("preorder_count") / rsThis.getDouble("total_count") * 100);
                    jx.setValue(19, 13, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    bd = new BigDecimal(rsThis.getDouble("web_count") / rsThis.getDouble("total_count") * 100);
                    jx.setValue(24, 13, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }
            }
            
        } catch(SQLException e) {
            e.printStackTrace();
        }

        /*****************************/
        // 新規・紹介・固定客数
        /*****************************/
        try {
            ResultSetWrapper rsPrev = con.executeQuery(getNewFixedCountSQL(true));
            ResultSetWrapper rsThis = con.executeQuery(getNewFixedCountSQL(false));

            BigDecimal bd = null;
            
            if (rsPrev.next()) {
                jx.setValue(14, 20, rsPrev.getLong("new_count"));
                
                if (rsPrev.getDouble("new_count") > 0) {
                    bd = new BigDecimal(rsPrev.getDouble("new_reappearance_count") / rsPrev.getDouble("new_count") * 100);
                    jx.setValue(24, 18, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    bd = new BigDecimal(rsPrev.getDouble("new_reappearance_count2") / rsPrev.getDouble("new_count") * 100);
                    jx.setValue(24, 22, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }

                jx.setValue(14, 24, rsPrev.getLong("introducer_count"));

                jx.setValue(14, 28, rsPrev.getLong("fixed_count"));

                if (rsPrev.getDouble("fixed_count") > 0) {
                    bd = new BigDecimal(rsPrev.getDouble("fixed_reappearance_count") / rsPrev.getDouble("fixed_count") * 100);
                    jx.setValue(24, 26, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }

                bd = new BigDecimal(rsPrev.getDouble("fixed_visit_cycle"));
                jx.setValue(24, 30, bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue());
            }
            
            if (rsThis.next()) {
                jx.setValue(14, 21, rsThis.getLong("new_count"));
                
                if (rsThis.getDouble("new_count") > 0) {
                    bd = new BigDecimal(rsThis.getDouble("new_reappearance_count") / rsThis.getDouble("new_count") * 100);
                    jx.setValue(24, 19, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());

                    bd = new BigDecimal(rsThis.getDouble("new_reappearance_count2") / rsThis.getDouble("new_count") * 100);
                    jx.setValue(24, 23, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }

                jx.setValue(14, 25, rsThis.getLong("introducer_count"));

                jx.setValue(14, 29, rsThis.getLong("fixed_count"));

                if (rsThis.getDouble("fixed_count") > 0) {
                    bd = new BigDecimal(rsThis.getDouble("fixed_reappearance_count") / rsThis.getDouble("fixed_count") * 100);
                    jx.setValue(24, 27, bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue());
                }

                bd = new BigDecimal(rsThis.getDouble("fixed_visit_cycle"));
                jx.setValue(24, 31, bd.setScale(1, BigDecimal.ROUND_DOWN).doubleValue());
            }
            
        } catch(SQLException e) {
            e.printStackTrace();
        }
        
        
        
        
        
        
        jx.openWorkbook();

    }
    
    /**
     * 主担当者をセットする。
     */
    private void setChargeStaff(String staffNo)
    {     
	chargeStaff.setSelectedIndex(0);

	for (int i = 1; i < chargeStaff.getItemCount(); i++) {
	    if (((MstStaff)chargeStaff.getItemAt(i)).getStaffNo().equals(staffNo)) {
		chargeStaff.setSelectedIndex(i);
		break;
	    }
	}
    }
    
    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed

    }//GEN-LAST:event_shopActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutput;
    private javax.swing.JComboBox chargeStaff;
    private javax.swing.JLabel chargeStaffLabel;
    private javax.swing.JTextField chargeStaffNo;
    private javax.swing.ButtonGroup comingCycleGroup;
    private javax.swing.ButtonGroup customerCategoryGroup;
    private javax.swing.ButtonGroup customerGroup;
    private javax.swing.JComboBox endMonth;
    private javax.swing.JComboBox endYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblPrevPeriod;
    private javax.swing.JLabel lblTargetDate;
    private javax.swing.JLabel lblTargetDate1;
    private javax.swing.JPanel pnlMain;
    private com.geobeck.swing.JTextFieldEx prevStaffCount;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private com.geobeck.swing.JTextFieldEx staffCount;
    private javax.swing.JComboBox startMonth;
    private javax.swing.JComboBox startYear;
    // End of variables declaration//GEN-END:variables
	
    private void setKeyListener()
    {
        startYear.addKeyListener(SystemInfo.getMoveNextField());
        startYear.addFocusListener(SystemInfo.getSelectText());
        endYear.addKeyListener(SystemInfo.getMoveNextField());
        endYear.addFocusListener(SystemInfo.getSelectText());

        startMonth.addKeyListener(SystemInfo.getMoveNextField());
        endMonth.addKeyListener(SystemInfo.getMoveNextField());

        staffCount.addKeyListener(SystemInfo.getMoveNextField());
        staffCount.addFocusListener(SystemInfo.getSelectText());

        prevStaffCount.addKeyListener(SystemInfo.getMoveNextField());
        prevStaffCount.addFocusListener(SystemInfo.getSelectText());

    }

    /**
     * 初期化処理を行う。
     */
    private void init()
    {
        Calendar cal = Calendar.getInstance();
        int nowYear = cal.get(Calendar.YEAR);
        int nowMonth = cal.get(Calendar.MONTH); 

        initYearCombo(startYear, nowYear - 1);
        if (nowMonth < 11) {
            this.startMonth.setSelectedIndex(nowMonth + 1);
        }else {
            this.startMonth.setSelectedIndex(0);
        }

        initYearCombo(endYear, nowYear);
        this.endMonth.setSelectedIndex(nowMonth);
    }

    private void setPeriod() {

        if (startYear.getSelectedItem() == null || startYear.getSelectedItem().toString().length() == 0) return;
        if (endYear.getSelectedItem() == null || endYear.getSelectedItem().toString().length() == 0) return;
        
        calStart = Calendar.getInstance();
        calStart.set(Calendar.YEAR, Integer.parseInt(startYear.getSelectedItem().toString()));
        calStart.set(Calendar.MONTH, startMonth.getSelectedIndex());
        calStart.set(Calendar.DAY_OF_MONTH, 1);
        calStart.set(Calendar.HOUR_OF_DAY, 0);
        calStart.set(Calendar.MINUTE, 0);
        calStart.set(Calendar.SECOND, 0);
        calStart.set(Calendar.MILLISECOND, 0);

        calEnd = (Calendar)calStart.clone();
        calEnd.set(Calendar.YEAR, Integer.parseInt(endYear.getSelectedItem().toString()));
        calEnd.set(Calendar.MONTH, endMonth.getSelectedIndex());
        calEnd.set(Calendar.DAY_OF_MONTH, 1);
        calEnd.add(Calendar.MONTH, 1);
        calEnd.add(Calendar.DAY_OF_MONTH, -1);

        int startYM = (calStart.get(Calendar.YEAR) * 12) + calStart.get(Calendar.MONTH);
        int endYM = (calEnd.get(Calendar.YEAR) * 12) + calEnd.get(Calendar.MONTH);
        int period = endYM - startYM + 1;
        
        calPrevStart = (Calendar)calStart.clone();
        calPrevStart.add(Calendar.MONTH, period * -1);
        
        calPrevEnd = (Calendar)calEnd.clone();
        calPrevEnd.add(Calendar.MONTH, period * -1);

        calBeforePrevStart = (Calendar)calPrevStart.clone();
        calBeforePrevStart.add(Calendar.MONTH, period * -1);
        
        calBeforePrevEnd = (Calendar)calPrevEnd.clone();
        calBeforePrevEnd.add(Calendar.MONTH, period * -1);
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月");
        
        lblPrevPeriod.setText(sdf.format(calPrevStart.getTime()) + " 〜 " + sdf.format(calPrevEnd.getTime()));
    }
    
    private String getMenuRatioTechSQL() {
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      t.technic_class_id");
        sql.append("     ,t.technic_class_name");
        sql.append("     ,coalesce(a.tech_count, 0) as tech_count_prev");
        sql.append("     ,coalesce(b.tech_count, 0) as tech_count");
        sql.append(" from");
        sql.append("     (");
        sql.append("         select");
        sql.append("              mtc.technic_class_id");
        sql.append("             ,mtc.technic_class_name");
        sql.append("             ,mtc.display_seq");
        sql.append("         from");
        sql.append("             view_data_sales_detail_valid ds");
        sql.append("                 join mst_customer mc");
        sql.append("                     using(customer_id)");
        sql.append("                 inner join mst_technic mt");
        sql.append("                     on ds.product_id = mt.technic_id");
        sql.append("                    and ds.product_division = 1");
        sql.append("                 inner join mst_technic_class mtc");
        sql.append("                     on mt.technic_class_id = mtc.technic_class_id");
        sql.append("         where");
        sql.append("                 ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("             and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        sql.append("             and mc.customer_no <> '0'");
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append("         and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append("         group by");
        sql.append("              mtc.technic_class_id");
        sql.append("             ,mtc.technic_class_name");
        sql.append("             ,mtc.display_seq");
        sql.append("     ) t");
        sql.append("     left join");
        sql.append("         (");
        sql.append("             select");
        sql.append("                  mt.technic_class_id");
        sql.append("                 ,count(distinct customer_id) as tech_count");
        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid ds");
        sql.append("                     join mst_customer mc");
        sql.append("                         using(customer_id)");
        sql.append("                     inner join mst_technic mt");
        sql.append("                         on ds.product_id = mt.technic_id");
        sql.append("                        and ds.product_division = 1");
        sql.append("             where");
        sql.append("                     ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        sql.append("                 and mc.customer_no <> '0'");
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append("             and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append("             group by");
        sql.append("                 mt.technic_class_id");
        sql.append("         ) a");
        sql.append("         on t.technic_class_id = a.technic_class_id");
        sql.append("     left join");
        sql.append("         (");
        sql.append("             select");
        sql.append("                  mt.technic_class_id");
        sql.append("                 ,count(distinct customer_id) as tech_count");
        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid ds");
        sql.append("                     join mst_customer mc");
        sql.append("                         using(customer_id)");
        sql.append("                     inner join mst_technic mt");
        sql.append("                         on ds.product_id = mt.technic_id");
        sql.append("                        and ds.product_division = 1");
        sql.append("             where");
        sql.append("                     ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        sql.append("                 and mc.customer_no <> '0'");
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append("             and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append("             group by");
        sql.append("                 mt.technic_class_id");
        sql.append("         ) b");
        sql.append("         on t.technic_class_id = b.technic_class_id");
        sql.append(" order by");
        sql.append("     t.display_seq");
        
        return sql.toString();
    }
    
    private String getMenuRatioItemSQL() {
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      t.item_class_id");
        sql.append("     ,t.item_class_name");
        sql.append("     ,coalesce(a.item_count, 0) as item_count_prev");
        sql.append("     ,coalesce(b.item_count, 0) as item_count");
        sql.append(" from");
        sql.append("     (");
        sql.append("         select");
        sql.append("              mic.item_class_id");
        sql.append("             ,mic.item_class_name");
        sql.append("             ,mic.display_seq");
        sql.append("         from");
        sql.append("             view_data_sales_detail_valid ds");
        sql.append("                 join mst_customer mc");
        sql.append("                     using(customer_id)");
        sql.append("                 inner join mst_item mi");
        sql.append("                     on ds.product_id = mi.item_id");
        sql.append("                    and ds.product_division = 2");
        sql.append("                 inner join mst_item_class mic");
        sql.append("                     on mi.item_class_id = mic.item_class_id");
        sql.append("         where");
        sql.append("                 ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("             and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        sql.append("             and mc.customer_no <> '0'");
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append("         and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append("         group by");
        sql.append("              mic.item_class_id");
        sql.append("             ,mic.item_class_name");
        sql.append("             ,mic.display_seq");
        sql.append("     ) t");
        sql.append("     left join");
        sql.append("         (");
        sql.append("             select");
        sql.append("                  mi.item_class_id");
        sql.append("                 ,count(distinct customer_id) as item_count");
        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid ds");
        sql.append("                     join mst_customer mc");
        sql.append("                         using(customer_id)");
        sql.append("                     inner join mst_item mi");
        sql.append("                         on ds.product_id = mi.item_id");
        sql.append("                        and ds.product_division = 2");
        sql.append("             where");
        sql.append("                     ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        sql.append("                 and mc.customer_no <> '0'");
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append("             and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append("             group by");
        sql.append("                 mi.item_class_id");
        sql.append("         ) a");
        sql.append("         on t.item_class_id = a.item_class_id");
        sql.append("     left join");
        sql.append("         (");
        sql.append("             select");
        sql.append("                  mi.item_class_id");
        sql.append("                 ,count(distinct customer_id) as item_count");
        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid ds");
        sql.append("                     join mst_customer mc");
        sql.append("                         using(customer_id)");
        sql.append("                     inner join mst_item mi");
        sql.append("                         on ds.product_id = mi.item_id");
        sql.append("                        and ds.product_division = 2");
        sql.append("             where");
        sql.append("                     ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        sql.append("                 and mc.customer_no <> '0'");
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append("             and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        sql.append("             group by");
        sql.append("                 mi.item_class_id");
        sql.append("         ) b");
        sql.append("         on t.item_class_id = b.item_class_id");
        sql.append(" order by");
        sql.append("     t.display_seq");

        return sql.toString();
    }

    private String getDesignatedCountSQL(boolean isPrev) {
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("     count(distinct case when ds.designated_flag then customer_id end) as designated_count");
        sql.append(" from");
        sql.append("     view_data_sales_valid ds");
        sql.append("         join mst_customer mc");
        sql.append("         using(customer_id)");
        sql.append(" where");
        sql.append("         ds.shop_id in (" + paramBean.getShopIDList() + ")");
        
        if (isPrev) {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        
        sql.append("     and mc.customer_no <> '0'");
        
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        
        return sql.toString();
    }

    private String getTotalCountSQL(boolean isPrev) {
        
        StringBuilder sql = new StringBuilder(1000);
        
        sql.append(" select");
        sql.append("     count(*) as total_count");
        sql.append(" from");
        sql.append("     (");
        sql.append("         select");
        sql.append("              ds.customer_id");
        sql.append("             ,(");
        sql.append("                 select");
        sql.append("                     staff_id");
        sql.append("                 from");
        sql.append("                     data_sales");
        sql.append("                 where");
        sql.append("                         customer_id = ds.customer_id");
        sql.append("                     and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and sales_date = max(ds.sales_date)");
        sql.append("                     and delete_date is null");
        sql.append("                 order by");
        sql.append("                      insert_date desc");
        sql.append("                     ,slip_no desc");
        sql.append("                 limit 1");
        sql.append("              ) as staff_id");
        sql.append("         from");
        sql.append("             view_data_sales_valid ds");
        sql.append("                 join mst_customer mc");
        sql.append("                 using(customer_id)");
        sql.append("         where");
        sql.append("                 ds.shop_id in (" + paramBean.getShopIDList() + ")");
        
        if (isPrev) {
            sql.append("         and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("         and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        
        sql.append("             and mc.customer_no <> '0'");
        sql.append("         group by");
        sql.append("             ds.customer_id");
        sql.append("     ) ds");
        
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" where");
            sql.append("     ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }

        return sql.toString();
    }

    private String getReservationCountSQL(boolean isPrev) {
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        
        // 全体
        sql.append("      count(*) as total_count");

        // 事前予約数
        sql.append("     ,sum(case when preorder_flag = 1 then 1 else 0 end) as preorder_count");
        
        // WEB予約数
        sql.append("     ,sum(case when mobile_flag is not null then 1 else 0 end) as web_count");

        sql.append(" from");
        sql.append("     data_reservation");
        sql.append(" where");
        sql.append("         delete_date is null");
        sql.append("     and shop_id in (" + paramBean.getShopIDList() + ")");

        if (isPrev) {
            sql.append(" and insert_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and insert_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        
        return sql.toString();
    }

    private String getTechItemCountSQL(boolean isPrev) {
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        
        // 技術売上
        sql.append("      sum(case when ds.product_division in (1) then discount_detail_value_in_tax else 0 end) as tech_value");
        
        // 店販売上
        sql.append("     ,sum(case when ds.product_division in (2) then discount_detail_value_in_tax else 0 end) as item_value");
        
        // 商品購入客数
        sql.append("     ,count(distinct case when ds.product_division in (2) then customer_id end) as item_count");
        
        sql.append(" from");
        sql.append("     view_data_sales_detail_valid ds");
        sql.append("         join mst_customer mc");
        sql.append("         using(customer_id)");
        sql.append(" where");
        sql.append("         ds.shop_id in (" + paramBean.getShopIDList() + ")");

        if (isPrev) {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append(" and ds.sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        
        sql.append("     and mc.customer_no <> '0'");
        
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        
        return sql.toString();
    }
    
    private String getValidCountSQL(boolean isPrev) {
        
        StringBuilder sql = new StringBuilder(1000);
        
        sql.append(" select");
        
        MstShopSetting mss = MstShopSetting.getInstance();
        
        // 稼働カルテ枚数
        sql.append("      sum(case when ds.visit_cycle <= " + mss.getValidCustomerPeriod1() + " then 1 else 0 end) as valid_count1");
        
        // 現役客カルテ枚数
        sql.append("     ,sum(case when ds.visit_cycle between " + (mss.getValidCustomerPeriod1() + 0.1) + " and " + mss.getValidCustomerPeriod2() + " then 1 else 0 end) as valid_count2");
        
        // 離店客カルテ枚数
        sql.append("     ,sum(case when ds.visit_cycle >= " + (mss.getValidCustomerPeriod2() + 0.1) + " then 1 else 0 end) as valid_count3");
        
        sql.append(" from");
        sql.append("     (");
        sql.append("         select");
        sql.append("              customer_id");
        
        if (isPrev) {
            sql.append("         ," + getMonthsBetween(calPrevStart, calPrevEnd) + " / count(*) as visit_cycle");
        } else {
            sql.append("         ," + getMonthsBetween(calStart, calEnd) + " / count(*) as visit_cycle");
        }
        
        sql.append("             ,(");
        sql.append("                 select");
        sql.append("                     staff_id");
        sql.append("                 from");
        sql.append("                     data_sales");
        sql.append("                 where");
        sql.append("                         customer_id = ds.customer_id");
        sql.append("                     and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and sales_date = max(ds.sales_date)");
        sql.append("                     and delete_date is null");
        sql.append("                 order by");
        sql.append("                      insert_date desc");
        sql.append("                     ,slip_no desc");
        sql.append("                 limit 1");
        sql.append("              ) as staff_id");
        
        sql.append("         from");
        sql.append("             view_data_sales_valid ds");
        sql.append("         where");
        sql.append("                 shop_id in (" + paramBean.getShopIDList() + ")");
        
        if (isPrev) {
            sql.append("         and sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("         and sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        
        sql.append("         group by");
        sql.append("             customer_id");
        sql.append("     ) ds");
        sql.append("     join mst_customer mc");
        sql.append("         using(customer_id)");
        sql.append(" where");
        sql.append("     mc.customer_no <> '0'");

        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }

        return sql.toString();
    }

    private String getInValidCountSQL(boolean isPrev) {
        
        StringBuilder sql = new StringBuilder(1000);
        
        sql.append(" select");
        sql.append("     count(*) as invalid_count");
        sql.append(" from");
        sql.append("     (");
        sql.append("         select");
        sql.append("              customer_id");
        sql.append("             ,(");
        sql.append("                 select");
        sql.append("                     staff_id");
        sql.append("                 from");
        sql.append("                     data_sales");
        sql.append("                 where");
        sql.append("                         customer_id = ds.customer_id");
        sql.append("                     and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and sales_date = max(ds.sales_date)");
        sql.append("                     and delete_date is null");
        sql.append("                 order by");
        sql.append("                      insert_date desc");
        sql.append("                     ,slip_no desc");
        sql.append("                 limit 1");
        sql.append("              ) as staff_id");
        sql.append("         from");
        sql.append("             view_data_sales_valid ds");
        sql.append("         where");
        sql.append("                 shop_id in (" + paramBean.getShopIDList() + ")");
        
        if (isPrev) {
            sql.append("         and sales_date <= " + SQLUtil.convertForSQL(calBeforePrevEnd.getTime()));
        } else {
            sql.append("         and sales_date <= " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        }
        
        sql.append("             and customer_id in");
        sql.append("                 (");
        sql.append("                     select distinct");
        sql.append("                          customer_id");
        sql.append("                     from");
        sql.append("                         data_sales");
        sql.append("                     where");
        sql.append("                             delete_date IS NULL");
        sql.append("                         and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     group by");
        sql.append("                         customer_id");
        sql.append("                     having");
        
        if (isPrev) {
            sql.append("                     max(sales_date) between " + SQLUtil.convertForSQL(calBeforePrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calBeforePrevEnd.getTime()));
        } else {
            sql.append("                     max(sales_date) between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        }
        
        sql.append("                 )");
        sql.append("         group by");
        sql.append("             customer_id");
        sql.append("     ) ds");
        sql.append("     join mst_customer mc");
        sql.append("         using(customer_id)");
        sql.append(" where");
        sql.append("         mc.customer_no <> '0'");
        
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }

        return sql.toString();
    }

    private String getNewFixedCountSQL(boolean isPrev) {
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        
        // 新規客数
        sql.append("      count(case when t.visit_num = 1 then customer_id end) as new_count");
        
        // 新規再来店数
        sql.append("     ,count(");
        sql.append("         case when t.visit_num = 1");
        sql.append("               and");
        sql.append("                 (");
        sql.append("                    select count(*) from data_sales");
        sql.append("                    where");
        sql.append("                            delete_date is null");
        sql.append("                        and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                        and customer_id = t.customer_id");
        sql.append("                        and sales_date > t.sales_date");

        if (isPrev) {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calEnd.getTime()));
        }

        sql.append("                 ) >= 1");
        sql.append("             then customer_id");
        sql.append("         end");
        sql.append("      ) as new_reappearance_count");
        
        // 新規3回来店数
        sql.append("     ,count(");
        sql.append("         case when t.visit_num = 1");
        sql.append("               and");
        sql.append("                 (");
        sql.append("                    select count(*) from data_sales");
        sql.append("                    where");
        sql.append("                            delete_date is null");
        sql.append("                        and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                        and customer_id = t.customer_id");
        sql.append("                        and sales_date > t.sales_date");
        
        if (isPrev) {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        
        sql.append("                 ) >= 2");
        sql.append("             then customer_id");
        sql.append("         end");
        sql.append("      ) as new_reappearance_count2");
        
        // 紹介客数
        sql.append("     ,count(case when t.visit_num = 1 and t.introducer_id is not null then t.customer_id end) as introducer_count");
        
        // 固定客数
        sql.append("     ,count(case when t.visit_num >= 2 then customer_id end) as fixed_count");
        
        // 固定再来店数
        sql.append("     ,count(");
        sql.append("         case when t.visit_num >= 2");
        sql.append("               and");
        sql.append("                 (");
        sql.append("                    select count(*) from data_sales");
        sql.append("                    where");
        sql.append("                            delete_date is null");
        sql.append("                        and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                        and customer_id = t.customer_id");
        sql.append("                        and sales_date > t.sales_date");
        
        if (isPrev) {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("                    and sales_date <= " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        
        sql.append("                 ) >= 1");
        sql.append("             then customer_id");
        sql.append("         end");
        sql.append("      ) as fixed_reappearance_count");
        
        // 固定客平均来店サイクル
        sql.append("     ,avg(case when t.visit_num >= 2 then fixed_visit_cycle end) as fixed_visit_cycle");
        
        sql.append(" from");
        sql.append("     (");
        sql.append("         select");
        sql.append("              ds.shop_id");
        sql.append("             ,ds.customer_id");
        sql.append("             ,ds.sales_date");
        sql.append("             ,mc.introducer_id");
        sql.append("             ,get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) as visit_num");

        if (isPrev) {
            sql.append("         ," + getMonthsBetween(calPrevStart, calPrevEnd));
        } else {
            sql.append("         ," + getMonthsBetween(calStart, calEnd));
        }
        
        sql.append("                 / (");
        sql.append("                     select");
        sql.append("                         count(*)");
        sql.append("                     from");
        sql.append("                         view_data_sales_valid");
        sql.append("                     where");
        sql.append("                             shop_id in (" + paramBean.getShopIDList() + ")");
        
        if (isPrev) {
            sql.append("                     and sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("                     and sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        
        sql.append("                         and customer_id = ds.customer_id");
        sql.append("                   ) as fixed_visit_cycle");

        sql.append("         from");
        sql.append("             (");
        sql.append("                 select");
        sql.append("                      shop_id");
        sql.append("                     ,customer_id");
        sql.append("                     ,min(sales_date) as sales_date");
        sql.append("                     ,(");
        sql.append("                         select");
        sql.append("                             staff_id");
        sql.append("                         from");
        sql.append("                             data_sales");
        sql.append("                         where");
        sql.append("                                 customer_id = ds.customer_id");
        sql.append("                             and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                             and sales_date = max(ds.sales_date)");
        sql.append("                             and delete_date is null");
        sql.append("                         order by");
        sql.append("                              insert_date desc");
        sql.append("                             ,slip_no desc");
        sql.append("                         limit 1");
        sql.append("                      ) as staff_id");
        sql.append("                 from");
        sql.append("                     view_data_sales_valid ds");
        sql.append("                 where");
        sql.append("                         shop_id in (" + paramBean.getShopIDList() + ")");
        
        if (isPrev) {
            sql.append("                 and sales_date between " + SQLUtil.convertForSQL(calPrevStart.getTime()) + " and " + SQLUtil.convertForSQL(calPrevEnd.getTime()));
        } else {
            sql.append("                 and sales_date between " + SQLUtil.convertForSQL(calStart.getTime()) + " and " + SQLUtil.convertForSQL(calEnd.getTime()));
        }
        
        sql.append("                 group by");
        sql.append("                      shop_id");
        sql.append("                     ,customer_id");
        sql.append("             ) ds");
        sql.append("             join mst_customer mc");
        sql.append("             using(customer_id)");
        sql.append("         where");
        sql.append("             mc.customer_no <> '0'");
        
        if (chargeStaff.getSelectedIndex() > 0) {
            sql.append("         and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }
        
        sql.append("     ) t");

        return sql.toString();
    }

    private int getMonthsBetween(Calendar fromDate, Calendar toDate) {
        
        int dt1 = (fromDate.get(Calendar.YEAR) * 12) + fromDate.get(Calendar.MONTH);
        int dt2 = (toDate.get(Calendar.YEAR) * 12) + toDate.get(Calendar.MONTH);
        
        return dt2 - dt1 + 1 ;
    }
    
    private void initYearCombo(final JComboBox cmb, int nowYear) {

        cmb.removeAllItems();

        int y = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = 2; i >= 0; i--) {
            cmb.addItem(String.valueOf(y - i));
        }
        cmb.setSelectedItem(nowYear);
        cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ((JTextField)cmb.getEditor().getEditorComponent()).selectAll();
            }
        });
    }

    private boolean inputCheck()
    {
        NumberUtils numUtil = new NumberUtils();
        if(!numUtil.isNumber(this.startYear.getSelectedItem().toString())) {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "開始年"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            this.startYear.requestFocusInWindow();
            return false;
        }

        if(!numUtil.isNumber(this.endYear.getSelectedItem().toString())) {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "終了年"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            this.endYear.requestFocusInWindow();
            return false;
        }

        return true;
    }
    
}
