/*
 * NotMemberListPanel.java
 *
 * Created on 2007/03/12, 9:20
 */

package com.geobeck.sosia.pos.hair.report;

import java.awt.Color;
import java.awt.Cursor;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;

import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.text.JTextComponent;
import javax.swing.text.PlainDocument;

import jp.co.flatsoft.fscomponent.FSCalenderCombo;

import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.report.bean.PostMaxResultsBean;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.swing.table.ColumnGroup;
import com.geobeck.sosia.pos.swing.table.GroupableTableHeader;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.CustomFilter;
import com.geobeck.swing.JTableEx;
import com.geobeck.swing.SwingUtil;

public class PostMaxResultsPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
	private boolean isLoading = false;
	private String shopIdString = "";

	private List<Integer> staffIdList = new ArrayList<Integer>();
	private List<String> staffNameList = new ArrayList<String>();
	private List<String> staffShopNameList = new ArrayList<String>();
	
	private String startDateStr;
	private String endDateStr;
	private String startDateJpStr;
	private String endDateJpStr;
	
    private Calendar calStart = null;
    private Calendar calEnd = null;
	
	private HashMap<Integer, PostMaxResultsBean> map = new HashMap<Integer, PostMaxResultsBean>();
	private JLabel lblDateSelect;

	public PostMaxResultsPanel() {
		isLoading = true;

		initComponents();
		addMouseCursorChange();

		this.setPath("í†ï[ä«óù");
        //nhanvt start edit 20150210 New request #35190
		this.setTitle("ÉMÉlÉXèWåv");
        //nhanvt end edit 20150210 New request #35190
		this.setSize(835, 800);

		this.init();

		isLoading = false;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		btnGrpKubun = new javax.swing.ButtonGroup();
		jPanel1 = new javax.swing.JPanel();
		shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
		lblShop = new javax.swing.JLabel();
		showButton = new javax.swing.JButton();
		btnOutput = new javax.swing.JButton();
		detailScrollPane = new javax.swing.JScrollPane();
		lblDateSelect = new javax.swing.JLabel();
		//dateSelect = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
		//dateSelect2 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
		tblDetail = new JTableEx() {
			protected JTableHeader createDefaultTableHeader() {
				return new GroupableTableHeader(columnModel);
			}
		};
		rdoShop = new javax.swing.JRadioButton();
		rdoStaff = new javax.swing.JRadioButton();
		lblKubun = new javax.swing.JLabel();
		jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
		startYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
        		startYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));
		endYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
        		endYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));
        startMonth = new javax.swing.JComboBox();
        endMonth = new javax.swing.JComboBox();
		setFocusCycleRoot(true);

		jPanel1.setOpaque(false);

		shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		shop.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				shopActionPerformed(evt);
			}
		});

		lblShop.setText("ìXï‹");

		showButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
		showButton.setBorderPainted(false);
		showButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
		showButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showButtonActionPerformed(evt);
			}
		});

		btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
		btnOutput.setBorderPainted(false);
		btnOutput.setFocusCycleRoot(true);
		btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
		btnOutput.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnOutputActionPerformed(evt);
			}
		});

		detailScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		detailScrollPane.setPreferredSize(new java.awt.Dimension(457, 402));

		tblDetail.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] {}));
		tblDetail.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
		tblDetail.setSelectionBackground(new java.awt.Color(220, 220, 220));
		tblDetail.setSelectionForeground(new java.awt.Color(0, 0, 0));
		tblDetail.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		tblDetail.getTableHeader().setReorderingAllowed(false);
		tblDetail.setDefaultRenderer(String.class, new SelectTableCellRenderer());
		SwingUtil.setJTableHeaderRenderer(tblDetail, SystemInfo.getTableHeaderRenderer());
		tblDetail.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
		detailScrollPane.setViewportView(tblDetail);

		btnGrpKubun.add(rdoShop);
		rdoShop.setSelected(true);
		rdoShop.setText("ìXï‹ï ");
		rdoShop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
		rdoShop.setMargin(new java.awt.Insets(0, 0, 0, 0));
		rdoShop.setOpaque(false);
		rdoShop.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				rdoShopActionPerformed(evt);
			}
		});

		btnGrpKubun.add(rdoStaff);
		rdoStaff.setText("ÉXÉ^ÉbÉtï ");
		rdoStaff.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
		rdoStaff.setMargin(new java.awt.Insets(0, 0, 0, 0));
		rdoStaff.setOpaque(false);
		rdoStaff.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				rdoStaffActionPerformed(evt);
			}
		});

        lblDateSelect.setText("ëŒè€ä˙ä‘");

        //dateSelect.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        
		lblKubun.setText("ãÊï™");
		
        //dateSelect2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel1.setText("Å`");

        startYear.setEditable(true);
        startYear.setMaximumRowCount(12);
        startYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        startYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startYearActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("îN");

        startMonth.setMaximumRowCount(12);
        startMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        startMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        startMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMonthActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("åé");

        endYear.setEditable(true);
        endYear.setMaximumRowCount(12);
        endYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        endYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endYearActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("îN");

        endMonth.setMaximumRowCount(12);
        endMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        endMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        endMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endMonthActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("åé");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(detailScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 811, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblDateSelect)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, lblKubun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, lblShop, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(rdoShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(startYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(startMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(2, 2, 2)
                                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel1)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(endYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(endMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(53, 53, 53)
                                        .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(rdoStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(338, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(lblDateSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(startYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel1)
                        .add(startMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(endYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(endMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(rdoShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(lblKubun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(rdoStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(39, 39, 39)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblShop))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(detailScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(161, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        }// </editor-fold>//GEN-END:initComponents
	
    private void initYearCombo(final JComboBox cmb, int nowYear) {
        
        cmb.removeAllItems();
        
        int y = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = 0; i < 5; i++) {
            cmb.addItem(String.valueOf(y - i));
        }
        cmb.setSelectedItem(nowYear);
        cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ((JTextField)cmb.getEditor().getEditorComponent()).selectAll();
            }
        });
    }
    private void startYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startYearActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_startYearActionPerformed

    private void startMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startMonthActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_startMonthActionPerformed

    private void endYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endYearActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_endYearActionPerformed

    private void endMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endMonthActionPerformed
        this.setPeriod();
    }//GEN-LAST:event_endMonthActionPerformed
    
    private void setPeriod() {

        if (startYear.getSelectedItem() == null || startYear.getSelectedItem().toString().length() == 0) return;
        if (endYear.getSelectedItem() == null || endYear.getSelectedItem().toString().length() == 0) return;
        
        calStart = Calendar.getInstance();
        calStart.set(Calendar.YEAR, Integer.parseInt(startYear.getSelectedItem().toString()));
        calStart.set(Calendar.MONTH, startMonth.getSelectedIndex());
        calStart.set(Calendar.DAY_OF_MONTH, 1);
        calStart.set(Calendar.HOUR_OF_DAY, 0);
        calStart.set(Calendar.MINUTE, 0);
        calStart.set(Calendar.SECOND, 0);
        calStart.set(Calendar.MILLISECOND, 0);
        

        calEnd = (Calendar)calStart.clone();
        calEnd.set(Calendar.YEAR, Integer.parseInt(endYear.getSelectedItem().toString()));
        calEnd.set(Calendar.MONTH, endMonth.getSelectedIndex());
        calEnd.set(Calendar.DAY_OF_MONTH, 1);
        calEnd.add(Calendar.MONTH, 1);
        calEnd.add(Calendar.DAY_OF_MONTH, -1);
        
        int diff = calStart.compareTo(calEnd);
        if (diff > 0) {
        	
        }
 
    }

    
	private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
		if (isLoading)
			return;

		// shopIdStringÇçÏê¨
		this.getShopIdString();
	}//GEN-LAST:event_shopActionPerformed

	private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
		this.showDetail();
	}//GEN-LAST:event_showButtonActionPerformed

	private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed
		btnOutput.setCursor(null);

		try {
			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			this.showDetail();
			printExcel();
		} finally {
			setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		}
	}//GEN-LAST:event_btnOutputActionPerformed

	private void rdoShopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoShopActionPerformed
		// shopIdStringÇçÏê¨
		this.getShopIdString();
		// ìXï‹ëIë
		this.shop.setEnabled(false);
	}//GEN-LAST:event_rdoShopActionPerformed

	private void rdoStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoStaffActionPerformed
		// shopIdStringÇçÏê¨
		this.getShopIdString();
		// ìXï‹ëIë
		this.shop.setEnabled(true);
	}//GEN-LAST:event_rdoStaffActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup btnGrpKubun;
	private javax.swing.JButton btnOutput;
	private javax.swing.JScrollPane detailScrollPane;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JLabel lblKubun;
	private javax.swing.JLabel lblShop;
	private javax.swing.JRadioButton rdoShop;
	private javax.swing.JRadioButton rdoStaff;
	private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
	private javax.swing.JButton showButton;
	private javax.swing.JTable tblDetail;
    //private jp.co.flatsoft.fscomponent.FSCalenderCombo dateSelect;
    //private jp.co.flatsoft.fscomponent.FSCalenderCombo dateSelect2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JComboBox startMonth;
    private javax.swing.JComboBox startYear;
    private javax.swing.JComboBox endMonth;
    private javax.swing.JComboBox endYear;
	// End of variables declaration//GEN-END:variables

	/**
	 * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
	 */
	private void addMouseCursorChange() {
		SystemInfo.addMouseCursorChange(showButton);
		SystemInfo.addMouseCursorChange(btnOutput);
	}

	/**
	 * èâä˙âªèàóùÇçsÇ§ÅB
	 */
	private void init() {
		// ìXï‹selectboxÇèâä˙âª
		MstShop nullShop = new MstShop();
		nullShop.setShopID(null);
		nullShop.setShopName("");
		shop.addItem(nullShop);
		SystemInfo.initGroupShopComponents(shop, 2);
		this.getShopIdString();
		this.shop.setEnabled(false);
		
		// ëŒè€ä˙ä‘Çèâä˙âª
		//dateSelect.setDate(new Date());
		//dateSelect2.setDate(new Date());
		Calendar cal = Calendar.getInstance();
        int nowYear = cal.get(Calendar.YEAR);
        int nowMonth = cal.get(Calendar.MONTH); 

        initYearCombo(startYear, nowYear);
        initYearCombo(endYear, nowYear);
        this.startMonth.setSelectedIndex(0);
        this.endMonth.setSelectedIndex(nowMonth);
	}

	/**
	 * ñæç◊Çï\é¶Ç∑ÇÈÅB
	 */
	private void showDetail() {
		
		// êÊÇ…ñæç◊ÇÉNÉäÉA
		SwingUtil.clearTable(tblDetail);

		// shopIdStringÇçÏê¨
		this.getShopIdString();
		
		this.getStartEndDate();

		// íSìñé“ï ÇÃèÍçáÅAíSìñé“ÉäÉXÉgÇçÏê¨
		this.staffIdList.clear();
		this.staffNameList.clear();
		this.staffShopNameList.clear();
		if (rdoStaff.isSelected()) {
			this.staffIdList.add(0);
			this.staffNameList.add("");
			this.staffShopNameList.add("");

			String sql = "select staff_id,staff_name1,staff_name2,mst_shop.shop_name from mst_staff left join mst_shop on mst_shop.shop_id=mst_staff.shop_id";
			sql += " where mst_staff.delete_date is null and mst_staff.shop_id in (" + this.shopIdString + ")";
			sql += " order by mst_staff.shop_id,mst_staff.display_seq,lpad(mst_staff.staff_no, 10, '0'),mst_staff.staff_id";
			System.out.println("íSìñé“:" + sql);
			try {
				ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql);
				while (rs.next()) {
					staffIdList.add(rs.getInt("staff_id"));
					String staffName1 = rs.getString("staff_name1");
					String staffName2 = rs.getString("staff_name2");
					if (staffName1 == null) {
						staffName1 = "";
					}
					if (staffName2 == null) {
						staffName2 = "";
					}
					staffNameList.add(staffName1 + " " + staffName2);
					String staffShopName = rs.getString("shop_name");
					if (staffShopName == null) {
						staffShopName = "";
					}
					staffShopNameList.add(staffShopName);
				}
				rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		List<String> list = this.getDetailHeaderList();

		tblDetail.setModel(new DefaultTableModel(new Object[][] {}, (String[]) list.toArray(new String[0])) {
			public Class getColumnClass(int columnIndex) {
				return String.class;
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return false;
			}
		});

		// ------Å§----headerÇçÏê¨---Å§-------
		GroupableTableHeader header = (GroupableTableHeader) tblDetail.getTableHeader();
		header.setBackground(new Color(204, 204, 204));
		TableColumnModel cm = tblDetail.getColumnModel();

		int colNum = 1;
		ColumnGroup colGroup = new ColumnGroup("ëçîÑè„");
		for (int i = 1; i <= 2; i++) {
			colGroup.add(cm.getColumn(colNum));
			colNum++;
		}
		header.addColumnGroup(colGroup);
		colGroup = new ColumnGroup("ãZèpîÑè„");
		for (int i = 1; i <= 2; i++) {
			colGroup.add(cm.getColumn(colNum));
			colNum++;
		}
		header.addColumnGroup(colGroup);
		colGroup = new ColumnGroup("è§ïiîÑè„");
		for (int i = 1; i <= 2; i++) {
			colGroup.add(cm.getColumn(colNum));
			colNum++;
		}
		header.addColumnGroup(colGroup);
		colGroup = new ColumnGroup("ëçãqêî");
		for (int i = 1; i <= 2; i++) {
			colGroup.add(cm.getColumn(colNum));
			colNum++;
		}
		header.addColumnGroup(colGroup);
		colGroup = new ColumnGroup("ãZèpãqêî");
		for (int i = 1; i <= 2; i++) {
			colGroup.add(cm.getColumn(colNum));
			colNum++;
		}
		header.addColumnGroup(colGroup);
		colGroup = new ColumnGroup("éwñºãqêî");
		for (int i = 1; i <= 2; i++) {
			colGroup.add(cm.getColumn(colNum));
			colNum++;
		}
		header.addColumnGroup(colGroup);
		colGroup = new ColumnGroup("êVãKãqêî");
		for (int i = 1; i <= 2; i++) {
			colGroup.add(cm.getColumn(colNum));
			colNum++;
		}
		header.addColumnGroup(colGroup);
		colGroup = new ColumnGroup("è–âÓãqêî");
		for (int i = 1; i <= 2; i++) {
			colGroup.add(cm.getColumn(colNum));
			colNum++;
		}
		header.addColumnGroup(colGroup);
		colGroup = new ColumnGroup("ìXîÃãqêî");
		for (int i = 1; i <= 2; i++) {
			colGroup.add(cm.getColumn(colNum));
			colNum++;
		}
		header.addColumnGroup(colGroup);
		System.out.println("ÉRÉâÉÄêîÅF" + colNum);
		// ------Å¢----headerÇçÏê¨---Å¢-------


		// óÒïùÇí≤êÆ
		SelectTableCellRenderer cellRenderRight = new SelectTableCellRenderer();
		cellRenderRight.setHorizontalAlignment(SwingConstants.RIGHT); //âEäÒÇπ
		tblDetail.getColumnModel().getColumn(0).setPreferredWidth(220); // ìXï‹ñº
		for (int i = 1; i < tblDetail.getColumnCount(); i++) {
			tblDetail.getColumnModel().getColumn(i).setPreferredWidth(68);
			tblDetail.getColumnModel().getColumn(i).setCellRenderer(cellRenderRight);
		}

		// loopÇ≈ñæç◊Çí«â¡
		// ñæç◊åèêî
		int rowNum = 0;
		if (rdoShop.isSelected()) {
			rowNum = shop.getItemCount();
		} else {
			rowNum = this.staffIdList.size();
		}
		// çsNo
		int rowIndex = 1;
		// ñæç◊ÉfÅ[É^ÇéÊìæ
		if (rdoShop.isSelected()) {
			// ëçãqêî,ãZèpãqêî,éwñºãqêî,êVãKãqêî,è–âÓãqêî,ìXîÃãqêîÇéÊìæ
			this.getNumGroupByShop();
			// ëçîÑè„,ãZèpîÑè„,è§ïiîÑè„ÇéÊìæ
			this.getTotalGroupByShop();
		} else {
			// ëçãqêî,ãZèpãqêî,éwñºãqêî,êVãKãqêî,è–âÓãqêî,ìXîÃãqêîÇéÊìæ
			this.getNumGroupByStaff();
			// ëçîÑè„,ãZèpîÑè„,è§ïiîÑè„ÇéÊìæ
			this.getTotalGroupByStaff();
		}
		for (; rowIndex < rowNum; rowIndex++) {
			int mapKey = 0;
			if (rdoShop.isSelected()) {
				mapKey = ((MstShop) shop.getItemAt(rowIndex)).getShopID();
			} else {
				mapKey = this.staffIdList.get(rowIndex);
			}

			Object[] row = new Object[colNum];

			// ìXï‹ñºÅEíSìñé“ñº
			if (rdoShop.isSelected()) {
				row[0] = ((MstShop) shop.getItemAt(rowIndex)).getShopName();
			} else {
				row[0] = this.staffNameList.get(rowIndex) + "(" + this.staffShopNameList.get(rowIndex) + ")";
			}

			// ëçîÑè„
			row[1] = this.map.get(mapKey).getAllTotalDate();
			//row[1] = this.startDateJpStr + "Å`" + this.endDateJpStr;
			row[2] = this.map.get(mapKey).getAllTotal() == 0 ? "" : this.map.get(mapKey).getAllTotal();
			// ãZèpîÑè„
			row[3] = this.map.get(mapKey).getTechnicTotalDate();
			//row[3] = this.startDateJpStr + "Å`" + this.endDateJpStr;
			row[4] = this.map.get(mapKey).getTechnicTotal() == 0 ? "" : this.map.get(mapKey).getTechnicTotal();
			// è§ïiîÑè„
			row[5] = this.map.get(mapKey).getItemTotalDate();
			//row[5] = this.startDateJpStr + "Å`" + this.endDateJpStr;
			row[6] = this.map.get(mapKey).getItemTotal() == 0 ? "" : this.map.get(mapKey).getItemTotal();
			// ëçãqêî
			row[7] = this.map.get(mapKey).getAllTotalNumDate();
			//row[7] = this.startDateJpStr + "Å`" + this.endDateJpStr;
			row[8] = this.map.get(mapKey).getAllTotalNum() == 0 ? "" : this.map.get(mapKey).getAllTotalNum();
			// ãZèpãqêî
			row[9] = this.map.get(mapKey).getTechnicTotalNumDate();
			//row[9] = this.startDateJpStr + "Å`" + this.endDateJpStr;
			row[10] = this.map.get(mapKey).getTechnicTotalNum() == 0 ? "" : this.map.get(mapKey).getTechnicTotalNum();
			// éwñºãqêî
			row[11] = this.map.get(mapKey).getChargeNumDate();
			//row[11] = this.startDateJpStr + "Å`" + this.endDateJpStr;
			row[12] = this.map.get(mapKey).getChargeNum() == 0 ? "" : this.map.get(mapKey).getChargeNum();
			// êVãKãqêî
			row[13] = this.map.get(mapKey).getNewVisitNumDate();
			//row[13] = this.startDateJpStr + "Å`" + this.endDateJpStr;
			row[14] = this.map.get(mapKey).getNewVisitNum() == 0 ? "" : this.map.get(mapKey).getNewVisitNum();
			// è–âÓãqêî
			row[15] = this.map.get(mapKey).getIntroducerNumDate();
			//row[15] = this.startDateJpStr + "Å`" + this.endDateJpStr;
			row[16] = this.map.get(mapKey).getIntroducerNum() == 0 ? "" : this.map.get(mapKey).getIntroducerNum();
			// ìXîÃãqêî
			row[17] = this.map.get(mapKey).getItemBuyNumDate();
			//row[17] = this.startDateJpStr + "Å`" + this.endDateJpStr;
			row[18] = this.map.get(mapKey).getItemBuyNum() == 0 ? "" : this.map.get(mapKey).getItemBuyNum();

			DefaultTableModel model = (DefaultTableModel) tblDetail.getModel();
			model.addRow(row);
		}
	}

	/**
	 * shopIdStringÇçÏê¨Ç∑ÇÈÅB
	 */
	private void getShopIdString() {
		String shopIdString = "";

		if (rdoShop.isSelected()) {
			// ìXï‹ï ÇÃèÍçá
			for (int i = 1; i < shop.getItemCount(); i++) {
				MstShop mstShop = (MstShop) shop.getItemAt(i);
				if (shopIdString.equals("")) {
					shopIdString += mstShop.getShopID();
				} else {
					shopIdString += "," + mstShop.getShopID();
				}
			}
		} else {
			// íSìñé“ï ÇÃèÍçá
			if (((MstShop) shop.getSelectedItem()).getShopID() == null) {
				// ëSìXÇÃèÍçá
				for (int i = 1; i < shop.getItemCount(); i++) {
					MstShop mstShop = (MstShop) shop.getItemAt(i);
					if (shopIdString.equals("")) {
						shopIdString += mstShop.getShopID();
					} else {
						shopIdString += "," + mstShop.getShopID();
					}
				}
			} else {
				shopIdString = ((MstShop) shop.getSelectedItem()).getShopID().toString();
			}
		}

		this.shopIdString = shopIdString;
		System.out.println("shopIdString:" + this.shopIdString);
	}

	/**
	 * EXCELèoóÕÇçsÇ§
	 */
	private void printExcel() {
		JExcelApi jx = new JExcelApi("âﬂãéç≈ëÂé¿ê—");
		jx.setTemplateFile("/reports/âﬂãéç≈ëÂé¿ê—.xls");

		// ÉwÉbÉ_
		if (rdoShop.isSelected()) {
			jx.setValue(1, 2, "Å°ìXï‹ï âﬂãéç≈ëÂé¿ê—");
			jx.setValue(1, 4, "èoóÕèåèÅFìXï‹ï ");
			jx.setValue(1, 5, "");
			jx.setValue(1, 6, "ëŒè€ä˙ä‘ÅF"+this.startDateJpStr+"Å`"+this.endDateJpStr);
			jx.setValue(1, 8, "ìXï‹ñº");
		} else {
			jx.setValue(1, 2, "Å°íSìñé“ï âﬂãéç≈ëÂé¿ê—");
			jx.setValue(1, 4, "èoóÕèåèÅFíSìñé“ï ");
			String shopName = ((MstShop) shop.getSelectedItem()).getShopName();
			if (shopName == null || shopName.equals("")) {
				shopName = "ëSìX";
			}
			jx.setValue(1, 5, "ëŒè€ìXï‹ÅF" + shopName);
			jx.setValue(1, 6, "ëŒè€ä˙ä‘ÅF"+this.startDateJpStr+"Å`"+this.endDateJpStr);
			jx.setValue(1, 8, "íSìñé“ñº");
		}

		DefaultTableModel model = (DefaultTableModel) tblDetail.getModel();
		int rowCount = model.getRowCount();
		int colCount = model.getColumnCount();

		// insertÇ∑ÇÈçsêî
		int insertRowCount = 0;
		if (rowCount > 1) {
			insertRowCount = rowCount - 1;
		}
		// insertÇ∑ÇÈ
		if (insertRowCount > 0) {
			jx.insertRow(11, insertRowCount);
		}

		// ñæç◊ÇèoóÕ
		int rowIndex = 0;
		for (Object row : model.getDataVector()) {
			for (int colIndex = 0; colIndex < colCount; colIndex++) {
				Object obj = ((Vector) row).get(colIndex);
				if (obj != null) {
					jx.setValue(colIndex + 1, 11 + rowIndex, obj);
				}
			}

			rowIndex++;
		}

		jx.openWorkbook();
	}
	
	/**
	 * èWåvä˙ä‘ÇãÅÇﬂÇÈÅB
	 */
	private void getStartEndDate() {
		// ç°åé
		String begin_year = Integer.toString(calStart.get(Calendar.YEAR));
		String begin_month = Integer.toString(calStart.get(Calendar.MONTH)+1);
		String begin_day = "1";
		String end_year = Integer.toString(calEnd.get(Calendar.YEAR));
		String end_month = Integer.toString(calEnd.get(Calendar.MONTH)+1);
		Calendar c= Calendar.getInstance();
		 c.set(Calendar.YEAR, Integer.parseInt(end_year));
		 c.set(Calendar.MONTH, Integer.parseInt(end_month)-1);
		 String end_day = Integer.toString(c.getActualMaximum(Calendar.DAY_OF_MONTH));
		this.startDateStr = begin_year + "-" + begin_month + "-" + begin_day;
		this.endDateStr = end_year + "-" + end_month + "-" + end_day;
		
		this.startDateJpStr = begin_year + "îN" + begin_month + "åé";
		this.endDateJpStr = end_year + "îN" + end_month + "åé";

		System.out.println("startDateStr:" + this.startDateStr);
		System.out.println("endDateStr:" + this.endDateStr);
	}


	/**
	 * ñæç◊ÉeÅ[ÉuÉãÇÃÉwÉbÉ_ÉfÅ[É^ÇéÊìæÅB
	 * @return
	 */
	private List<String> getDetailHeaderList() {
		List<String> list = new ArrayList<String>();

		if (rdoShop.isSelected()) {
			list.add("ìXï‹ñº");
		} else {
			list.add("íSìñé“ñº");
		}

		list.add("ëŒè€îNåé");
		list.add("ã‡äz");
		list.add("ëŒè€îNåé");
		list.add("ã‡äz");
		list.add("ëŒè€îNåé");
		list.add("ã‡äz");

		list.add("ëŒè€îNåé");
		list.add("êlêî");
		list.add("ëŒè€îNåé");
		list.add("êlêî");
		list.add("ëŒè€îNåé");
		list.add("êlêî");
		list.add("ëŒè€îNåé");
		list.add("êlêî");
		list.add("ëŒè€îNåé");
		list.add("êlêî");
		list.add("ëŒè€îNåé");
		list.add("êlêî");

		return list;
	}

	/**
	 * ëçãqêî,ãZèpãqêî,éwñºãqêî,êVãKãqêî,è–âÓãqêî,ìXîÃãqêîÇéÊìæÇ∑ÇÈÅB(ìXï‹ï )
	 */
	private void getNumGroupByShop() {
		// ñﬂÇËílÇèâä˙âª
		map.clear();
		for (String s : this.shopIdString.split(",")) {
			map.put(Integer.parseInt(s), new PostMaxResultsBean());
		}

		// SQLï∂ÇçÏê¨
		String sql = "";
		sql += " select ds.shop_id,";
		sql += " date_trunc('month', ds.sales_date) as year_month,";
		sql += " sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND dsd.item_num + dsd.item_crame_num = 0) THEN 1 ELSE 0 END) AS tech_only_num,";
		sql += " sum(CASE WHEN (dsd.item_num + dsd.item_crame_num > 0 AND dsd.tech_num + dsd.tech_crame_num = 0) THEN 1 ELSE 0 END) AS item_only_num,";
		sql += " sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND dsd.item_num + dsd.item_crame_num > 0) THEN 1 ELSE 0 END) AS tech_and_item_num,";
		sql += " sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND mc.customer_no <> '0' AND get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1) THEN 1 ELSE 0 END) AS new_commer,";
		sql += " sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND mc.customer_no <> '0' AND get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1 AND mc.introducer_id IS NOT NULL) THEN 1 ELSE 0 END) AS introduce,";
		sql += " sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND ds.designated_flag = TRUE) THEN 1 ELSE 0 END) AS charge";
		sql += " FROM data_sales ds";
		sql += " INNER JOIN";
		sql += " (SELECT dsd.shop_id,dsd.slip_no,date_trunc('month', ds.sales_date) as year_month,";
		sql += " sum(CASE dsd.product_division WHEN 1 THEN 1 ELSE 0 END) AS tech_num,";
		sql += " sum(CASE dsd.product_division WHEN 3 THEN 1 ELSE 0 END) AS tech_crame_num,";
		sql += " sum(CASE dsd.product_division WHEN 2 THEN 1 ELSE 0 END) AS item_num,";
		sql += " sum(CASE dsd.product_division WHEN 4 THEN 1 ELSE 0 END) AS item_crame_num";
		sql += " FROM data_sales ds";
		sql += " INNER JOIN view_data_sales_detail_valid dsd";
		sql += " ON dsd.shop_id = ds.shop_id AND dsd.slip_no = ds.slip_no";
		sql += " WHERE ds.delete_date IS NULL";
		sql += " AND ds.shop_id IN (" + this.shopIdString + ")";
		sql += " AND ds.sales_date between '" + this.startDateStr + "' and '" + this.endDateStr + "'";
		sql += " GROUP BY dsd.shop_id,dsd.slip_no,date_trunc('month', ds.sales_date)";
		sql += " ) dsd";
		sql += " ON dsd.shop_id = ds.shop_id AND dsd.slip_no = ds.slip_no and date_trunc('month', ds.sales_date)=dsd.year_month";
		sql += " LEFT OUTER JOIN (SELECT customer_id,customer_no,introducer_id FROM mst_customer mc) mc";
		sql += " ON mc.customer_id = ds.customer_id";
		sql += " WHERE ds.delete_date IS NULL";
		sql += " AND ds.shop_id IN (" + this.shopIdString + ")";
		sql += " AND ds.sales_date between '" + this.startDateStr + "' and '" + this.endDateStr + "'";
		sql += " and exists (select 1 from data_sales where customer_id= mc.customer_id and delete_date is null and date_trunc('month', sales_date)=date_trunc('month', ds.sales_date))";
		sql += " GROUP BY ds.shop_id,date_trunc('month', ds.sales_date)";
		System.out.println("ãqêîèÓïÒ:" + sql);

		try {
			// åüçıÇçsÇ§
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				// ìXï‹id
				int shopId = rs.getInt("shop_id");
				// ëŒè€îNåé
				String yearMonth = rs.getDate("year_month").toString();
				yearMonth = yearMonth.substring(0, 4) + "îN" + Integer.parseInt(yearMonth.substring(5, 7)) + "åé";

				// ãZèpãqêî
				int technicTotalNum = rs.getInt("tech_only_num") + rs.getInt("tech_and_item_num");
				if (technicTotalNum > 0 && technicTotalNum > map.get(shopId).getTechnicTotalNum()) {
					map.get(shopId).setTechnicTotalNum(technicTotalNum);
					map.get(shopId).setTechnicTotalNumDate(yearMonth);
				}

				// ëçãqêî
				int allTotalNum = rs.getInt("tech_only_num") + rs.getInt("tech_and_item_num") + rs.getInt("item_only_num");
				if (allTotalNum > 0 && allTotalNum > map.get(shopId).getAllTotalNum()) {
					map.get(shopId).setAllTotalNum(allTotalNum);
					map.get(shopId).setAllTotalNumDate(yearMonth);
				}

				// éwñºãqêî
				int chargeNum = rs.getInt("charge");
				if (chargeNum > 0 && chargeNum > map.get(shopId).getChargeNum()) {
					map.get(shopId).setChargeNum(chargeNum);
					map.get(shopId).setChargeNumDate(yearMonth);
				}

				// êVãKãqêî
				int newVisitNum = rs.getInt("new_commer");
				if (newVisitNum > 0 && newVisitNum > map.get(shopId).getNewVisitNum()) {
					map.get(shopId).setNewVisitNum(newVisitNum);
					map.get(shopId).setNewVisitNumDate(yearMonth);
				}

				// è–âÓãqêî
				int introducerNum = rs.getInt("introduce");
				if (introducerNum > 0 && introducerNum > map.get(shopId).getIntroducerNum()) {
					map.get(shopId).setIntroducerNum(introducerNum);
					map.get(shopId).setIntroducerNumDate(yearMonth);
				}

				// ìXîÃãqêî
				int itemBuyNum = rs.getInt("tech_and_item_num") + rs.getInt("item_only_num");
				if (itemBuyNum > 0 && itemBuyNum > map.get(shopId).getItemBuyNum()) {
					map.get(shopId).setItemBuyNum(itemBuyNum);
					map.get(shopId).setItemBuyNumDate(yearMonth);
				}
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}

	/**
	 * ëçãqêî,ãZèpãqêî,éwñºãqêî,êVãKãqêî,è–âÓãqêî,ìXîÃãqêîÇéÊìæÇ∑ÇÈÅB(íSìñé“ï )
	 */
	private void getNumGroupByStaff() {
		// ñﬂÇËílÇèâä˙âª
		map.clear();
		for (int staffId : staffIdList) {
			map.put(staffId, new PostMaxResultsBean());
		}

		// SQLï∂ÇçÏê¨
		String sql = "";
		sql += " select ds.staff_id,";
		sql += " date_trunc('month', ds.sales_date) as year_month,";
		sql += " sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND dsd.item_num + dsd.item_crame_num = 0) THEN 1 ELSE 0 END) AS tech_only_num,";
		sql += " sum(CASE WHEN (dsd.item_num + dsd.item_crame_num > 0 AND dsd.tech_num + dsd.tech_crame_num = 0) THEN 1 ELSE 0 END) AS item_only_num,";
		sql += " sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND dsd.item_num + dsd.item_crame_num > 0) THEN 1 ELSE 0 END) AS tech_and_item_num,";
		sql += " sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND mc.customer_no <> '0' AND get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1) THEN 1 ELSE 0 END) AS new_commer,";
		sql += " sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND mc.customer_no <> '0' AND get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1 AND mc.introducer_id IS NOT NULL) THEN 1 ELSE 0 END) AS introduce,";
		sql += " sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND ds.designated_flag = TRUE) THEN 1 ELSE 0 END) AS charge";
		sql += " FROM data_sales ds";
		sql += " INNER JOIN";
		sql += " (SELECT dsd.shop_id,dsd.slip_no,date_trunc('month', ds.sales_date) as year_month,";
		sql += " sum(CASE dsd.product_division WHEN 1 THEN 1 ELSE 0 END) AS tech_num,";
		sql += " sum(CASE dsd.product_division WHEN 3 THEN 1 ELSE 0 END) AS tech_crame_num,";
		sql += " sum(CASE dsd.product_division WHEN 2 THEN 1 ELSE 0 END) AS item_num,";
		sql += " sum(CASE dsd.product_division WHEN 4 THEN 1 ELSE 0 END) AS item_crame_num";
		sql += " FROM data_sales ds";
		sql += " INNER JOIN view_data_sales_detail_valid dsd";
		sql += " ON dsd.shop_id = ds.shop_id AND dsd.slip_no = ds.slip_no";
		sql += " WHERE ds.delete_date IS NULL";
		sql += " AND ds.shop_id IN (" + this.shopIdString + ")";
		sql += " AND ds.sales_date between '" + this.startDateStr + "' and '" + this.endDateStr + "'";
		sql += " GROUP BY dsd.shop_id,dsd.slip_no,date_trunc('month', ds.sales_date)";
		sql += " ) dsd";
		sql += " ON dsd.shop_id = ds.shop_id AND dsd.slip_no = ds.slip_no and date_trunc('month', ds.sales_date)=dsd.year_month";
		sql += " LEFT OUTER JOIN (SELECT customer_id,customer_no,introducer_id FROM mst_customer mc) mc";
		sql += " ON mc.customer_id = ds.customer_id";
		sql += " WHERE ds.delete_date IS NULL";
		sql += " AND ds.shop_id IN (" + this.shopIdString + ")";
		sql += " AND ds.sales_date between '" + this.startDateStr + "' and '" + this.endDateStr + "'";
		sql += " and exists (select 1 from data_sales where customer_id= mc.customer_id and delete_date is null and date_trunc('month', sales_date)=date_trunc('month', ds.sales_date))";
		sql += " GROUP BY ds.staff_id,date_trunc('month', ds.sales_date)";
		System.out.println("ãqêîèÓïÒ:" + sql);

		try {
			// åüçıÇçsÇ§
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				// íSìñé“id
				int staffId = rs.getInt("staff_id");
				// ëŒè€îNåé
				String yearMonth = rs.getDate("year_month").toString();
				yearMonth = yearMonth.substring(0, 4) + "îN" + Integer.parseInt(yearMonth.substring(5, 7)) + "åé";

				// ãZèpãqêî
				int technicTotalNum = rs.getInt("tech_only_num") + rs.getInt("tech_and_item_num");
				if (technicTotalNum > 0 && map.containsKey(staffId) && technicTotalNum > map.get(staffId).getTechnicTotalNum()) {
					map.get(staffId).setTechnicTotalNum(technicTotalNum);
					map.get(staffId).setTechnicTotalNumDate(yearMonth);
				}

				// ëçãqêî
				int allTotalNum = rs.getInt("tech_only_num") + rs.getInt("tech_and_item_num") + rs.getInt("item_only_num");
				if (allTotalNum > 0 && map.containsKey(staffId) && allTotalNum > map.get(staffId).getAllTotalNum()) {
					map.get(staffId).setAllTotalNum(allTotalNum);
					map.get(staffId).setAllTotalNumDate(yearMonth);
				}

				// éwñºãqêî
				int chargeNum = rs.getInt("charge");
				if (chargeNum > 0 && map.containsKey(staffId) && chargeNum > map.get(staffId).getChargeNum()) {
					map.get(staffId).setChargeNum(chargeNum);
					map.get(staffId).setChargeNumDate(yearMonth);
				}

				// êVãKãqêî
				int newVisitNum = rs.getInt("new_commer");
				if (newVisitNum > 0 && map.containsKey(staffId) && newVisitNum > map.get(staffId).getNewVisitNum()) {
					map.get(staffId).setNewVisitNum(newVisitNum);
					map.get(staffId).setNewVisitNumDate(yearMonth);
				}

				// è–âÓãqêî
				int introducerNum = rs.getInt("introduce");
				if (introducerNum > 0 && map.containsKey(staffId) && introducerNum > map.get(staffId).getIntroducerNum()) {
					map.get(staffId).setIntroducerNum(introducerNum);
					map.get(staffId).setIntroducerNumDate(yearMonth);
				}

				// ìXîÃãqêî
				int itemBuyNum = rs.getInt("tech_and_item_num") + rs.getInt("item_only_num");
				if (itemBuyNum > 0 && map.containsKey(staffId) && itemBuyNum > map.get(staffId).getItemBuyNum()) {
					map.get(staffId).setItemBuyNum(itemBuyNum);
					map.get(staffId).setItemBuyNumDate(yearMonth);
				}
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}

	/**
	 * ëçîÑè„,ãZèpîÑè„,è§ïiîÑè„ÇéÊìæÇ∑ÇÈÅB(ìXï‹ï )
	 */
	private void getTotalGroupByShop() {
		// SQLï∂ÇçÏê¨
		String sql = "";
		sql += " select";
		sql += " ds.shop_id,";
		sql += " date_trunc('month', ds.sales_date) as year_month,";
		sql += " sum(ds.discount_value) as all_discount";
		sql += " from view_data_sales_valid ds";
		sql += " where ds.shop_id in (" + this.shopIdString + ")";
		sql += " and exists (select 1 from view_data_sales_detail_valid where shop_id=ds.shop_id and slip_no=ds.slip_no and product_division in(1,2))";
		sql += " and ds.sales_date is not null";
		sql += " and ds.sales_date between '" + this.startDateStr + "' and '" + this.endDateStr + "'";
		sql += " group by ds.shop_id, date_trunc('month', ds.sales_date)";
		System.out.println("ëSëÃäÑà¯:" + sql);
		HashMap<String, Integer> hm = new HashMap<String, Integer>();
		try {
			// åüçıÇçsÇ§
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				// ìXï‹id
				int shopId = rs.getInt("shop_id");
				// ëŒè€îNåé
				String yearMonth = rs.getDate("year_month").toString();
				// ëSëÃäÑà¯
				int allDiscount = rs.getInt("all_discount");
				// ÉLÅ[
				String key = shopId + "," + yearMonth;
				hm.put(key, allDiscount);
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		// SQLï∂ÇçÏê¨
		sql = "";
		sql += " select";
		sql += " shop_id,date_trunc('month', sales_date) as year_month,";
		sql += " sum(case product_division when 1 then discount_detail_value_in_tax else 0 end) as technic_total,";
		sql += " sum(case product_division when 2 then discount_detail_value_in_tax when 4 then discount_detail_value_in_tax else 0 end) as item_total";
		sql += " from view_data_sales_detail_valid dsd";
		sql += " where";
		sql += " shop_id in (" + this.shopIdString + ")";
		sql += " and sales_date is not null";
		sql += " AND sales_date between '" + this.startDateStr + "' and '" + this.endDateStr + "'";
		sql += " group by shop_id, date_trunc('month', sales_date)";
		System.out.println("îÑè„:" + sql);

		try {
			// åüçıÇçsÇ§
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				// ìXï‹id
				int shopId = rs.getInt("shop_id");
				// ëŒè€îNåé
				String yearMonth = rs.getDate("year_month").toString();
				yearMonth = yearMonth.substring(0, 4) + "îN" + Integer.parseInt(yearMonth.substring(5, 7)) + "åé";

				// ãZèpîÑè„
				int technicTotal = rs.getInt("technic_total");
				if (technicTotal > 0 && technicTotal > map.get(shopId).getTechnicTotal()) {
					map.get(shopId).setTechnicTotal(technicTotal);
					map.get(shopId).setTechnicTotalDate(yearMonth);
				}

				// è§ïiîÑè„
				int itemTotal = rs.getInt("item_total");
				if (itemTotal > 0 && itemTotal > map.get(shopId).getItemTotal()) {
					map.get(shopId).setItemTotal(itemTotal);
					map.get(shopId).setItemTotalDate(yearMonth);
				}

				// ëçîÑè„
				String key = shopId + "," + rs.getDate("year_month").toString();
				int allTotal = 0;
				if (hm.containsKey(key)) {
					allTotal = rs.getInt("technic_total") + rs.getInt("item_total") - hm.get(key);
				} else {
					allTotal = rs.getInt("technic_total") + rs.getInt("item_total");
				}
				if (allTotal > 0 && allTotal > map.get(shopId).getAllTotal()) {
					map.get(shopId).setAllTotal(allTotal);
					map.get(shopId).setAllTotalDate(yearMonth);
				}
			}
			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}

	/**
	 * ëçîÑè„,ãZèpîÑè„,è§ïiîÑè„ÇéÊìæÇ∑ÇÈÅB(íSìñé“ï )
	 */
	private void getTotalGroupByStaff() {
		// SQLï∂ÇçÏê¨
		String sql = "";
		sql += " select";
		sql += " ds.staff_id,";
		sql += " date_trunc('month', ds.sales_date) as year_month,";
		sql += " sum(ds.discount_value) as all_discount";
		sql += " from view_data_sales_valid ds";
		sql += " where ds.shop_id in (" + this.shopIdString + ")";
		sql += " and exists (select 1 from view_data_sales_detail_valid where shop_id=ds.shop_id and slip_no=ds.slip_no and product_division in(1,2))";
		sql += " and ds.sales_date is not null";
		sql += " and ds.sales_date between '" + this.startDateStr + "' and '" + this.endDateStr + "'";
		sql += " group by ds.staff_id, date_trunc('month', ds.sales_date)";
		System.out.println("ëSëÃäÑà¯:" + sql);
		HashMap<String, Integer> hm = new HashMap<String, Integer>();
		try {
			// åüçıÇçsÇ§
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				// íSìñé“id
				int staffId = rs.getInt("staff_id");
				// ëŒè€îNåé
				String yearMonth = rs.getDate("year_month").toString();
				// ëSëÃäÑà¯
				int allDiscount = rs.getInt("all_discount");
				// ÉLÅ[
				String key = staffId + "," + yearMonth;
				hm.put(key, allDiscount);
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		// SQLï∂ÇçÏê¨
		sql = "";
		sql += " select";
		sql += " staff_id,date_trunc('month', sales_date) as year_month,";
		sql += " sum(case product_division when 1 then discount_detail_value_in_tax else 0 end) as technic_total,";
		sql += " sum(case product_division when 2 then discount_detail_value_in_tax when 4 then discount_detail_value_in_tax else 0 end) as item_total";
		sql += " from view_data_sales_detail_valid dsd";
		sql += " where";
		sql += " shop_id in (" + this.shopIdString + ")";
		sql += " and sales_date is not null";
		sql += " and sales_date between '" + this.startDateStr + "' and '" + this.endDateStr + "'";
		sql += " group by staff_id, date_trunc('month', sales_date)";
		System.out.println("îÑè„:" + sql);

		try {
			// åüçıÇçsÇ§
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				// íSìñé“id
				int staffId = rs.getInt("staff_id");
				// ëŒè€îNåé
				String yearMonth = rs.getDate("year_month").toString();
				yearMonth = yearMonth.substring(0, 4) + "îN" + Integer.parseInt(yearMonth.substring(5, 7)) + "åé";

				// ãZèpîÑè„
				int technicTotal = rs.getInt("technic_total");
				if (technicTotal > 0 && map.containsKey(staffId) && technicTotal > map.get(staffId).getTechnicTotal()) {
					map.get(staffId).setTechnicTotal(technicTotal);
					map.get(staffId).setTechnicTotalDate(yearMonth);
				}

				// è§ïiîÑè„
				int itemTotal = rs.getInt("item_total");
				if (itemTotal > 0 && map.containsKey(staffId) && itemTotal > map.get(staffId).getItemTotal()) {
					map.get(staffId).setItemTotal(itemTotal);
					map.get(staffId).setItemTotalDate(yearMonth);
				}

				// ëçîÑè„
				String key = staffId + "," + rs.getDate("year_month").toString();
				int allTotal = 0;
				if (hm.containsKey(key)) {
					allTotal = rs.getInt("technic_total") + rs.getInt("item_total") - hm.get(key);
				} else {
					allTotal = rs.getInt("technic_total") + rs.getInt("item_total");
				}
				if (allTotal > 0 && map.containsKey(staffId) && allTotal > map.get(staffId).getAllTotal()) {
					map.get(staffId).setAllTotal(allTotal);
					map.get(staffId).setAllTotalDate(yearMonth);
				}
			}
			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
}