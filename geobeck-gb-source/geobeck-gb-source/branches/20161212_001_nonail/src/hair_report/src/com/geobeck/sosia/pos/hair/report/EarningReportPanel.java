/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConditionSetPanel.java
 *
 * Created on 2011/07/15, 16:31:19
 */
package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.hair.report.logic.EarningReportLogic;
import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.sosia.pos.master.company.MstGroup;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.CustomFilter;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import java.awt.Cursor;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.text.PlainDocument;
import com.geobeck.util.SQLUtil;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.logging.Level;

/**
 *
 * @author geobeck
 */
public class EarningReportPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private Calendar calStart = null;
    private Calendar calEnd = null;
    private Calendar calPrevStart = null;
    private Calendar calPrevEnd = null;
    private Calendar calPrevMonthStart = null;
    private Calendar calPrevMonthEnd = null;
    private Calendar calBeforePrevStart = null;
    private Calendar calBeforePrevEnd = null;
    private String CurrentDate = "";
    private int monthStart;
    private int monthEnd;
    private int yearStart;
    private int yearEnd;
    private int dayStart;
    private int dayEnd;

    /**
     * Creates new form ConditionSetPanel
     */
    public EarningReportPanel() {
        initComponents();
        this.setPath("比較集計表");
        this.setTitle("比較集計表");
        this.setSize(694, 246);
        // 顧客共有の有無によりグループ表示を切り替える
        addMouseCursorChange();
        init();
    }

    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(btnRegist);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpReportType = new javax.swing.ButtonGroup();
        shopLabel = new javax.swing.JLabel();
        lblTax27 = new javax.swing.JLabel();
        btnRegist = new javax.swing.JButton();
        shopLabel1 = new javax.swing.JLabel();
        startDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        endDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();

        setFocusCycleRoot(true);

        shopLabel.setText("店舗");

        lblTax27.setText(" 〜");
        lblTax27.setFocusCycleRoot(true);

        btnRegist.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnRegist.setBorderPainted(false);
        btnRegist.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnRegist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistActionPerformed(evt);
            }
        });

        shopLabel1.setText("集計期間");

        startDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        startDate.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        startDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                startDateItemStateChanged(evt);
            }
        });
        startDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                startDateFocusGained(evt);
            }
        });

        endDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        endDate.setDate(SystemInfo.getCurrentShop().getSystemDate().getTime());
        endDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                endDateItemStateChanged(evt);
            }
        });
        endDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                endDateFocusGained(evt);
            }
        });

        shop.setFocusCycleRoot(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(shopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(shopLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTax27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(btnRegist, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnRegist, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(shopLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTax27, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistActionPerformed


        btnRegist.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            EarningReportLogic lg = new EarningReportLogic();
            //ReportLogic lg = new ReportLogic();
            ReportParameterBean paramBean = new ReportParameterBean();
            
            paramBean.setCalculationStartDateObj(this.startDate.getDate());
            paramBean.setCalculationEndDateObj(this.endDate.getDate());

            Calendar start = Calendar.getInstance();
            Calendar end = Calendar.getInstance();
            if (this.startDate.getDate() == null || this.startDate.getDate() == null) {
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "対象期間"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            start.setTime(this.startDate.getDate());
            end.setTime(this.endDate.getDate());

            Date prevStar = startDate.getDate();
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(prevStar);
            monthStart = calendar.get(Calendar.MONTH) + 1;
            yearStart = calendar.get(Calendar.YEAR);
            dayStart = calendar.get(Calendar.DATE);

            Date prevEnd = endDate.getDate();
            Calendar calendarEnd = Calendar.getInstance();
            calendarEnd.setTime(prevEnd);
            monthEnd = calendarEnd.get(Calendar.MONTH) + 1;
            yearEnd = calendarEnd.get(Calendar.YEAR);
            dayEnd = calendarEnd.get(Calendar.DATE);

            if (start.compareTo(end) != 0) {
                //対象期間が開始日＞終了日ならエラー
                if (start.after(end)) {
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "対象期間"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                } else if ((monthStart != monthEnd || yearEnd != yearStart)) {
                    MessageDialog.showMessageDialog(this,
                            MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "対象期間"),
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            if (shop.getSelectedItem() instanceof MstGroup) {
                MstGroup mg = (MstGroup) shop.getSelectedItem();
                paramBean.setTargetName(mg.getGroupName());
                paramBean.setShopIDList(mg.getShopIDListAll());
            } //店舗
            else if (shop.getSelectedItem() instanceof MstShop) {
                MstShop ms = (MstShop) shop.getSelectedItem();
                paramBean.setTargetName(ms.getShopName());
                paramBean.setShopIDList(ms.getShopID().toString());
            }

            lg.viewSaleAnalysis(paramBean, false);

        } catch (Exception e) {
             SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(1099),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
        }finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }


    }//GEN-LAST:event_btnRegistActionPerformed

    private void startDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_startDateItemStateChanged
    }//GEN-LAST:event_startDateItemStateChanged

    private void startDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startDateFocusGained
        if (startDate.getInputContext() != null) {
            startDate.getInputContext().setCharacterSubsets(null);
        }
    }//GEN-LAST:event_startDateFocusGained

    private void endDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_endDateItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_endDateItemStateChanged

    private void endDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_endDateFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_endDateFocusGained
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegist;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo endDate;
    private javax.swing.ButtonGroup grpReportType;
    private javax.swing.JLabel lblTax27;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JLabel shopLabel1;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo startDate;
    // End of variables declaration//GEN-END:variables

    /**
     * 初期化処理を行う。
     */
    private void init() {
        //対象期間の設定【来店周期別構成比】
        this.startDate.setDate(getFirstDateOfCurrentMonth());
        this.endDate.setDate(new Date());
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -1);
        CurrentDate = dateFormat.format(cal.getTime());
        SystemInfo.initGroupShopComponents(shop, 3);

    }
    
     private Date getFirstDateOfCurrentMonth() {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMinimum(Calendar.DAY_OF_MONTH));
        return cal.getTime();
    }

    private void dispCountCondition() {

        try {
        } catch (Exception e) {
        }
    }

    private void dispPriceCondition() {

        try {
        } catch (Exception e) {
        }

    }

    private void dispIntroducerPriceCondition() {

        try {
        } catch (Exception e) {
        }

    }

    private boolean inputCheck() {


        return true;
    }

    private void updateValue() {
    }

    /**
     * ダイアログを閉じる
     */
    private void close() {
        if (this.isDialog()) {
            ((JDialog) this.getParent().getParent().getParent().getParent()).setVisible(false);
        } else {
            this.setVisible(false);
        }
    }
}
