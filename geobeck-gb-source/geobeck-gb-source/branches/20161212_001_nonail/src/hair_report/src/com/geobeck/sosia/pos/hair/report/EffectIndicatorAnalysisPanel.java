/*
 * NotMemberListPanel.java
 *
 * Created on 2007/03/12, 9:20
 */

package com.geobeck.sosia.pos.hair.report;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;

import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.text.JTextComponent;
import javax.swing.text.PlainDocument;

import com.geobeck.sosia.pos.hair.report.logic.ReportLogic;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.report.bean.EffectIndicatorAnalysisBean;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.swing.table.ColumnGroup;
import com.geobeck.sosia.pos.swing.table.GroupableTableHeader;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.CustomFilter;
import com.geobeck.swing.JTableEx;
import com.geobeck.swing.SwingUtil;
import com.geobeck.util.CheckUtil;
import com.geobeck.util.SQLUtil;
import com.geobeck.util.PropertiesUtil;

public class EffectIndicatorAnalysisPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
	private boolean isLoading = false;
	private String shopIdString = "";

	private String thisMonthStartDateStr;
	private String thisMonthEndDateStr;
	private String lastMonthStartDateStr;
	private String lastMonthEndDateStr;
	private String lastYearStartDateStr;
	private String lastYearEndDateStr;

	private int[] techClassIdArray;
	private String[] techClassNameArray;
	private JCheckBox[] techClassArray;
	private JTextField[] shopStaffArray;
	private double[] staffCountArray = new double[10000];
	private List<Integer> staffIdList = new ArrayList<Integer>();
	private List<String> staffNameList = new ArrayList<String>();
	private JLabel jLabel1;
	private JLabel jLabel2;

	public EffectIndicatorAnalysisPanel() {
		isLoading = true;

		initComponents();
		addMouseCursorChange();

		this.setPath("分析 >> カスタム帳票");
		this.setTitle("効果指標数値分析");
		this.setSize(835, 800);

		this.init();

		isLoading = false;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		btnGrpKubun = new javax.swing.ButtonGroup();
		btnGrpPeriod = new javax.swing.ButtonGroup();
		jPanel1 = new javax.swing.JPanel();
		shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
		lblShop = new javax.swing.JLabel();
		showButton = new javax.swing.JButton();
		btnOutput = new javax.swing.JButton();
		detailScrollPane = new javax.swing.JScrollPane();
		tblDetail = new JTableEx() {
			protected JTableHeader createDefaultTableHeader() {
				return new GroupableTableHeader(columnModel);
			}
		};
		lblDateSelect = new javax.swing.JLabel();
		dateSelect = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
		dateSelect2 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
		//dateSelectMonth = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
		rdoShop = new javax.swing.JRadioButton();
		rdoStaff = new javax.swing.JRadioButton();
        rdoDay = new javax.swing.JRadioButton();
        rdoMonth = new javax.swing.JRadioButton();
		lblKubun = new javax.swing.JLabel();
		conditionScrollPane = new javax.swing.JScrollPane();
		tblCondition = new com.geobeck.swing.JTableEx();
		lblCondition = new javax.swing.JLabel();
		lblTechClass = new javax.swing.JLabel();
		techClassScrollPane = new javax.swing.JScrollPane();
		shopStaffScrollPane = new javax.swing.JScrollPane();
		tblTechClass = new com.geobeck.swing.JTableEx();
		shopStaffTbl = new com.geobeck.swing.JTableEx();
		lblTargetPeriod1 = new javax.swing.JLabel();
		cmbReappearanceSpan = new javax.swing.JComboBox();
        selectYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
        		selectYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMBER));
        selectMonth = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        /*
        txtStaffCount = new javax.swing.JTextField();
        ((PlainDocument)txtStaffCount.getDocument()).setDocumentFilter(
                new CustomFilter(5, CustomFilter.NUMERIC));
		*/
		setFocusCycleRoot(true);
		
		this.cmbReappearanceSpan.setEditable(false);
    	this.dateSelect.setEnabled(false);
    	this.dateSelect2.setEnabled(false);

		jPanel1.setOpaque(false);

		shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		shop.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				shopActionPerformed(evt);
			}
		});

		lblShop.setText("店舗");
		lblShop.setVisible(false);
		shop.setVisible(false);
		
		selectMonth.setMaximumRowCount(12);
	    selectMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
	    selectMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

		showButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
		showButton.setBorderPainted(false);
		showButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
		showButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showButtonActionPerformed(evt);
			}
		});

		btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
		btnOutput.setBorderPainted(false);
		btnOutput.setFocusCycleRoot(true);
		btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
		btnOutput.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnOutputActionPerformed(evt);
			}
		});

		detailScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		detailScrollPane.setPreferredSize(new java.awt.Dimension(457, 402));

		tblDetail.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] {}));
		tblDetail.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
		tblDetail.setSelectionBackground(new java.awt.Color(220, 220, 220));
		tblDetail.setSelectionForeground(new java.awt.Color(0, 0, 0));
		tblDetail.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		tblDetail.getTableHeader().setReorderingAllowed(false);
		tblDetail.getTableHeader().setResizingAllowed(false);
		tblDetail.setDefaultRenderer(String.class, new SelectTableCellRenderer());
		SwingUtil.setJTableHeaderRenderer(tblDetail, SystemInfo.getTableHeaderRenderer());
		tblDetail.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);

		detailScrollPane.setViewportView(tblDetail);

		lblDateSelect.setText("対象期間");

		dateSelect.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		dateSelect2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

		btnGrpKubun.add(rdoShop);
		rdoShop.setSelected(true);
		rdoShop.setText("店舗別");
		rdoShop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
		rdoShop.setMargin(new java.awt.Insets(0, 0, 0, 0));
		rdoShop.setOpaque(false);
		rdoShop.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				rdoShopActionPerformed(evt);
			}
		});

		btnGrpKubun.add(rdoStaff);
		rdoStaff.setText("スタッフ別");
		rdoStaff.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
		rdoStaff.setMargin(new java.awt.Insets(0, 0, 0, 0));
		rdoStaff.setOpaque(false);
		rdoStaff.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				rdoStaffActionPerformed(evt);
			}
		});

		lblKubun.setText("区分");

		tblCondition.setDefaultRenderer(String.class, new RowRenderer());
		tblCondition.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { null, null }, new String[] { null, null }) {
			Class[] types = new Class[] { java.lang.String.class, java.lang.String.class };
			boolean[] canEdit = new boolean[] { false, true };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		tblCondition.setTableHeader(null);
		conditionScrollPane.setViewportView(tblCondition);
		tblCondition.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

		lblCondition.setText("条件指定");

		lblTechClass.setText("技術分類");

		tblTechClass.setDefaultRenderer(String.class, new RowRenderer());
		tblTechClass.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { null, null }, new String[] { null, null }) {
			Class[] types = new Class[] { java.lang.String.class, java.lang.String.class };
			boolean[] canEdit = new boolean[] { false, true };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		tblTechClass.setTableHeader(null);
		techClassScrollPane.setViewportView(tblTechClass);
		tblTechClass.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
		
		
		shopStaffTbl.setDefaultRenderer(String.class, new RowRenderer());
		shopStaffTbl.setModel(new javax.swing.table.DefaultTableModel(new Object[][] { null, null }, new String[] { null, null }) {
			Class[] types = new Class[] { java.lang.String.class, java.lang.String.class };
			boolean[] canEdit = new boolean[] { false, true };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		shopStaffTbl.setTableHeader(null);
		shopStaffScrollPane.setViewportView(shopStaffTbl);
		shopStaffTbl.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
		shopStaffTbl.getColumnModel().getColumn(0).setPreferredWidth(160);
		shopStaffTbl.setRowHeight(19);
		
		lblTargetPeriod1.setText("再来算出期間");
        jLabel1.setText("~");
        jLabel2.setText("人数");
        
		btnGrpPeriod.add( rdoDay);
        rdoDay.setText("日付指定");
        rdoDay.setOpaque(false);
        rdoDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoDayActionPerformed(evt);
            }
        });

		btnGrpPeriod.add(rdoMonth);
		rdoMonth.setSelected(true);
        rdoMonth.setText("月指定 ");
        rdoMonth.setOpaque(false);
        rdoMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoMonthActionPerformed(evt);
            }
        });
        /*
        txtStaffCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtStaffCount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStaffCountFocusLost(evt);
            }
        });
        */
        
        //dateSelectMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
		cmbReappearanceSpan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1ヶ月", "45日", "2ヶ月", "3ヶ月", "4ヶ月", "5ヶ月", "6ヶ月" }));
		
		
        jLabel3.setText("人数指定");
        selectYear.setEditable(true);
        selectYear.setMaximumRowCount(12);
        selectYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jLabel4.setText("年");

        jLabel5.setText("月");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(detailScrollPane, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lblCondition, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(lblDateSelect)
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, lblKubun, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, lblShop, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                                    .add(jLabel3))
                                .add(0, 0, Short.MAX_VALUE)))
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(rdoShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(rdoStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .add(rdoDay)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED))
                                            .add(jPanel1Layout.createSequentialGroup()
                                                .add(rdoMonth)
                                                .add(12, 12, 12)))
                                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jPanel1Layout.createSequentialGroup()
                                                .add(selectYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                                .add(jLabel4))
                                            .add(dateSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jLabel1)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(dateSelect2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(selectMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(jLabel5)
                                        .add(73, 73, 73)
                                        .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(4, 4, 4)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(conditionScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(lblTechClass)
                                        .add(10, 10, 10)
                                        .add(techClassScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(shopStaffScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 269, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(542, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(lblTargetPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(13, 13, 13)
                        .add(cmbReappearanceSpan, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jLabel1)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(showButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(dateSelect2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(lblDateSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(rdoMonth)
                            .add(selectYear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(selectMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel4)
                            .add(jLabel5))
                        .add(8, 8, 8)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(dateSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(rdoDay))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(rdoShop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(rdoStaff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblShop)))
                    .add(lblKubun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel3)
                    .add(shopStaffScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(techClassScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(conditionScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTechClass)
                    .add(lblCondition))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbReappearanceSpan, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblTargetPeriod1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(detailScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 337, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(86, 86, 86))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );
        }// </editor-fold>//GEN-END:initComponents

	private void shopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopActionPerformed
	{//GEN-HEADEREND:event_shopActionPerformed
		if (isLoading)
			return;
		
		int selectShopId = ((MstShop) shop.getSelectedItem()).getShopID();
		//txtStaffCount.setText(Double.toString(staffCountArray[selectShopId]));
		
		// shopIdStringを作成
		this.getShopIdString();
		// 技術分類Tableをreload
		this.initTblTechClass();
	}//GEN-LAST:event_shopActionPerformed

	private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
		this.showDetail();
	}//GEN-LAST:event_showButtonActionPerformed

	private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed
		btnOutput.setCursor(null);

		try {
			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			this.showDetail();
			printExcel();
		} finally {
			setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
		}
	}//GEN-LAST:event_btnOutputActionPerformed

	private void rdoShopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoShopActionPerformed
		// shopIdStringを作成
		this.getShopIdString();
		// 店舗選択
		this.shop.setEnabled(false);
		this.shop.setVisible(false);
		this.lblShop.setVisible(false);
		this.shopStaffScrollPane.setVisible(true);
		this.shopStaffTbl.setVisible(true);
		this.jLabel3.setVisible(true);
		//this.txtStaffCount.setEnabled(true);
		// 技術分類Tableをreload
		this.initTblTechClass();
	}//GEN-LAST:event_rdoShopActionPerformed

	private void rdoStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoStaffActionPerformed
		// shopIdStringを作成
		this.getShopIdString();
		// 店舗選択
		this.shop.setEnabled(true);
		this.shop.setVisible(true);
		this.lblShop.setVisible(true);
		this.shopStaffScrollPane.setVisible(false);
		this.shopStaffTbl.setVisible(false);
		this.jLabel3.setVisible(false);
		//this.txtStaffCount.setEnabled(false);
		
		// 技術分類Tableをreload
		this.initTblTechClass();
	}//GEN-LAST:event_rdoStaffActionPerformed
	
    private void rdoDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoDayActionPerformed
    	this.cmbReappearanceSpan.setEnabled(false);
    	//this.dateSelectMonth.setEnabled(false);
    	this.selectMonth.setEnabled(false);
    	this.selectYear.setEnabled(false);
    	this.dateSelect.setEnabled(true);
    	this.dateSelect2.setEnabled(true);
    }//GEN-LAST:event_rdoDayActionPerformed

    private void rdoMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoMonthActionPerformed
    	this.cmbReappearanceSpan.setEnabled(true);
    	this.dateSelect.setEnabled(false);
    	this.dateSelect2.setEnabled(false);
    	this.selectMonth.setEnabled(true);
    	this.selectYear.setEnabled(true);
    	//this.dateSelectMonth.setEnabled(true);
    }//GEN-LAST:event_rdoMonthActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup btnGrpKubun;
	private javax.swing.ButtonGroup btnGrpPeriod;
	private javax.swing.JButton btnOutput;
	private javax.swing.JComboBox cmbReappearanceSpan;
	private javax.swing.JScrollPane conditionScrollPane;
	private jp.co.flatsoft.fscomponent.FSCalenderCombo dateSelect;
	private jp.co.flatsoft.fscomponent.FSCalenderCombo dateSelect2;
	//private jp.co.flatsoft.fscomponent.FSCalenderCombo dateSelectMonth;
	private javax.swing.JScrollPane detailScrollPane;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel lblCondition;
	private javax.swing.JLabel lblDateSelect;
	private javax.swing.JLabel lblKubun;
	private javax.swing.JLabel lblShop;
	private javax.swing.JLabel lblTargetPeriod1;
	private javax.swing.JLabel lblTechClass;
	private javax.swing.JRadioButton rdoShop;
	private javax.swing.JRadioButton rdoStaff;
    private javax.swing.JRadioButton rdoDay;
    private javax.swing.JRadioButton rdoMonth;
	private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
	private javax.swing.JButton showButton;
	private com.geobeck.swing.JTableEx tblCondition;
	private com.geobeck.swing.JTableEx tblDetail;
	private com.geobeck.swing.JTableEx tblTechClass;
	private com.geobeck.swing.JTableEx shopStaffTbl;
	private javax.swing.JScrollPane techClassScrollPane;
	private javax.swing.JScrollPane shopStaffScrollPane;
	private javax.swing.JCheckBox chkOutputItems;
	private javax.swing.JCheckBox chkNewComeRate;
	private javax.swing.JCheckBox chkExistComeRate;
	private javax.swing.JCheckBox chkNextTimeReserveRate;
	private javax.swing.JCheckBox chkReserveSuccessRate;
	private javax.swing.JCheckBox chkShopSaleRate;
	private javax.swing.JCheckBox chkIntroductionNum;
	private javax.swing.JCheckBox chkOneStaffSales;
	private javax.swing.JCheckBox chkTotalSales;
	private javax.swing.JCheckBox chkTechSales;
	private javax.swing.JCheckBox chkItemSales;
	private javax.swing.JCheckBox chkTotalCustNum;
	private javax.swing.JCheckBox chkTechCustNum;
	private javax.swing.JCheckBox chkAssignCustNum;
	private javax.swing.JCheckBox chkNewCustNum;
	private javax.swing.JCheckBox chkShopSaleCustNum;
	private javax.swing.JCheckBox chkOutputItems2;
    private javax.swing.JComboBox selectYear;
    private javax.swing.JComboBox selectMonth;
	//private javax.swing.JTextField txtStaffCount;


	// End of variables declaration//GEN-END:variables

	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange() {
		SystemInfo.addMouseCursorChange(showButton);
		SystemInfo.addMouseCursorChange(btnOutput);
	}

	/**
	 * 初期化処理を行う。
	 */
	private void init() {
		// 店舗selectboxを初期化
		SystemInfo.initGroupShopComponents(shop, 2);
		this.getShopIdString();
		this.shop.setEnabled(true);

		// 対象期間を初期化
        Calendar cdr = Calendar.getInstance();
        cdr.setTime(new java.util.Date());
        
        initYearCombo(selectYear, cdr.get(Calendar.YEAR));
        this.selectMonth.setSelectedIndex(cdr.get(Calendar.MONTH));
		//dateSelectMonth.setDate(new Date());
		dateSelect.setDate(new Date());
		dateSelect2.setDate(new Date());
		
		//txtStaffCount.setText("0.0");

		// 条件指定Tableを初期化
		initTblCondition();

		//  技術分類Tableを初期化
		initTblTechClass();
		
		//  人数指定Tableを初期化
		initShopStaffTbl();
		
		/*
		txtStaffCount.addKeyListener(SystemInfo.getMoveNextField());
		txtStaffCount.addFocusListener(SystemInfo.getSelectText());
		*/
	}
	
    private void initYearCombo(final JComboBox cmb, int nowYear) {

        cmb.removeAllItems();

        int y = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = 0; i < 5; i++) {
            cmb.addItem(String.valueOf(y - i));
        }

        cmb.setSelectedItem(nowYear);
        cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ((JTextField)cmb.getEditor().getEditorComponent()).selectAll();
            }
        });
    }

	/**
	 * 明細を表示する。
	 */
	private void showDetail() {
		// 先に明細をクリア
		SwingUtil.clearTable(tblDetail);

		// shopIdStringを作成
		this.getShopIdString();
		// 集計期間を求める
		this.getStartEndDate();

		// 担当者別の場合、担当者リストを作成
		this.staffIdList.clear();
		this.staffNameList.clear();
		if (rdoStaff.isSelected()) {
			this.staffIdList.add(0);
			this.staffNameList.add("");

			String sql = "select staff_id,staff_name1,staff_name2 from mst_staff where delete_date is null and shop_id=" + this.shopIdString;
			sql += " order by display_seq,lpad(staff_no, 10, '0'),staff_id";
			try {
				ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql);
				while (rs.next()) {
					staffIdList.add(rs.getInt("staff_id"));
					String staffName1 = rs.getString("staff_name1");
					String staffName2 = rs.getString("staff_name2");
					if (staffName1 == null) {
						staffName1 = "";
					}
					if (staffName2 == null) {
						staffName2 = "";
					}
					staffNameList.add(staffName1 + " " + staffName2);
				}
				rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		List<String> list = this.getDetailHeaderList();

		tblDetail.setModel(new DefaultTableModel(new Object[][] {}, (String[]) list.toArray(new String[0])) {
			public Class getColumnClass(int columnIndex) {
				return String.class;
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return false;
			}
		});
		
		//デフォルトでの選択状態保存
		String ConditionString= ""; 
		if (this.chkNewComeRate.isSelected()){
			ConditionString += "chkNewComeRate,";
		}
		if (this.chkExistComeRate.isSelected()){
			ConditionString += "chkExistComeRate,";
		}
		if (this.chkNextTimeReserveRate.isSelected()){
			ConditionString += "chkNextTimeReserveRate,";
		}
		if (this.chkReserveSuccessRate.isSelected()){
			ConditionString += "chkReserveSuccessRate,";
		}
		if (this.chkShopSaleRate.isSelected()){
			ConditionString += "chkShopSaleRate,";
		}
		if (this.chkIntroductionNum.isSelected()){
			ConditionString += "chkIntroductionNum,";
		}
		if (this.chkOneStaffSales.isSelected()){
			ConditionString += "chkOneStaffSales,";
		}
		if (this.chkTotalSales.isSelected()){
			ConditionString += "chkTotalSales,";
		}
		if (this.chkTechSales.isSelected()){
			ConditionString += "chkTechSales,";
		}
		if (this.chkItemSales.isSelected()){
			ConditionString += "chkItemSales,";
		}
		if (this.chkTotalCustNum.isSelected()){
			ConditionString += "chkTotalCustNum,";
		}
		if (this.chkTechCustNum.isSelected()){
			ConditionString += "chkTechCustNum,";
		}
		if (this.chkAssignCustNum.isSelected()){
			ConditionString += "chkAssignCustNum,";
		}
		if (this.chkNewCustNum.isSelected()){
			ConditionString += "chkNewCustNum,";
		}
		if (this.chkShopSaleCustNum.isSelected()){
			ConditionString += "chkShopSaleCustNum,";
		}
		PropertiesUtil.writeProperties("EffectIndicatorAnalysisPanel.properties", "Condition", ConditionString);
		
		// ------▽----headerを作成---▽-------
		GroupableTableHeader header = (GroupableTableHeader) tblDetail.getTableHeader();
		header.setBackground(new Color(204, 204, 204));
		TableColumnModel cm = tblDetail.getColumnModel();

		int colNum = 1;
		int boxNum = this.rdoMonth.isSelected() ? 4 : 3;
		if (this.chkNewComeRate.isSelected() && this.rdoMonth.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("新規再来率");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkExistComeRate.isSelected() && this.rdoMonth.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("既存再来率");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkNextTimeReserveRate.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("次回予約率");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkReserveSuccessRate.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("予約成約率");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkShopSaleRate.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("店販比率");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkIntroductionNum.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("紹介数");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkOneStaffSales.isSelected() && this.rdoShop.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("スタッフ1人当たり売上");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkTotalSales.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("総売上");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkTechSales.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("技術売上");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkItemSales.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("商品売上");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkTotalCustNum.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("総客数");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkTechCustNum.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("技術客数");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkAssignCustNum.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("指名客数");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkNewCustNum.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("新規客数");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		if (this.chkShopSaleCustNum.isSelected()) {
			ColumnGroup colGroup = new ColumnGroup("店販客数");
			for (int i = 1; i <= boxNum; i++) {
				colGroup.add(cm.getColumn(colNum));
				colNum++;
			}
			header.addColumnGroup(colGroup);
		}
		//デフォルトでの選択状態保存
		String TechClassString= ","; 
		for (int i = 0; i < techClassArray.length; i++) {
			if (techClassArray[i].isSelected()) {
				TechClassString += techClassIdArray[i] +",";
				ColumnGroup colGroup = new ColumnGroup(techClassNameArray[i] + "獲得率");
				for (int j = 1; j <= boxNum; j++) {
					colGroup.add(cm.getColumn(colNum));
					colNum++;
				}
				header.addColumnGroup(colGroup);
			}
		}
		
		PropertiesUtil.writeProperties("EffectIndicatorAnalysisPanel.properties", "TechClass", TechClassString);
		
		//propertiesファイルの保存箇所の改修 追加で、スタッフ人数も保存する対応
		String staffCountString = "";
		for (int i = 0; i < shop.getItemCount(); i++) {
			MstShop mstShop = (MstShop) shop.getItemAt(i);
			if (i == (shop.getItemCount()-1)) {
				staffCountString += mstShop.getShopID() + ":" + staffCountArray[mstShop.getShopID()];
			} else {
				staffCountString += mstShop.getShopID() + ":" + staffCountArray[mstShop.getShopID()] + "_";
			}
			
		}
		PropertiesUtil.writeProperties("EffectIndicatorAnalysisPanel.properties", "staffCount", staffCountString);
		
		
		System.out.println("コラム数：" + colNum);
		// ------△----headerを作成---△-------

		// 明細データ
		// 新規再来率
		int year = Integer.parseInt(this.selectYear.getSelectedItem().toString());
		int month = Integer.parseInt(this.selectMonth.getSelectedItem().toString());
		Calendar c = Calendar.getInstance();
		c.set(year, month - 2, 1);
		int yearLastMonth = c.get(Calendar.YEAR);
		int monthLastMonth = c.get(Calendar.MONTH) + 1;
		HashMap<Integer, EffectIndicatorAnalysisBean> mapNewComeRateThisMonth = null;
		HashMap<Integer, EffectIndicatorAnalysisBean> mapNewComeRateLastMonth = null;
		HashMap<Integer, EffectIndicatorAnalysisBean> mapNewComeRateLastYear = null;
		if (this.chkNewComeRate.isSelected() && this.rdoMonth.isSelected()) {
			mapNewComeRateThisMonth = this.getComeRate(1, year, month);
			mapNewComeRateLastMonth = this.getComeRate(1, yearLastMonth, monthLastMonth);
			mapNewComeRateLastYear = this.getComeRate(1, year - 1, month);
		}
		// 既存再来率
		HashMap<Integer, EffectIndicatorAnalysisBean> mapExistComeRateThisMonth = null;
		HashMap<Integer, EffectIndicatorAnalysisBean> mapExistComeRateLastMonth = null;
		HashMap<Integer, EffectIndicatorAnalysisBean> mapExistComeRateLastYear = null;
		if (this.chkExistComeRate.isSelected() && this.rdoMonth.isSelected()) {
			mapExistComeRateThisMonth = this.getComeRate(2, year, month);
			mapExistComeRateLastMonth = this.getComeRate(2, yearLastMonth, monthLastMonth);
			mapExistComeRateLastYear = this.getComeRate(2, year - 1, month);
		}
		// 次回予約率
		HashMap<Integer, EffectIndicatorAnalysisBean> mapNextTimeReserveRateThisMonth = null;
		HashMap<Integer, EffectIndicatorAnalysisBean> mapNextTimeReserveRateLastMonth = null;
		HashMap<Integer, EffectIndicatorAnalysisBean> mapNextTimeReserveRateLastYear = null;
		if (this.chkNextTimeReserveRate.isSelected()) {
			if (rdoShop.isSelected()) {
				mapNextTimeReserveRateThisMonth = this.getNextTimeReserveRateShop(this.thisMonthStartDateStr, this.thisMonthEndDateStr);
				mapNextTimeReserveRateLastMonth = this.getNextTimeReserveRateShop(this.lastMonthStartDateStr, this.lastMonthEndDateStr);
				mapNextTimeReserveRateLastYear = this.getNextTimeReserveRateShop(this.lastYearStartDateStr, this.lastYearEndDateStr);
			} else {
				mapNextTimeReserveRateThisMonth = this.getNextTimeReserveRateStaff(this.staffIdList, this.thisMonthStartDateStr, this.thisMonthEndDateStr);
				mapNextTimeReserveRateLastMonth = this.getNextTimeReserveRateStaff(this.staffIdList, this.lastMonthStartDateStr, this.lastMonthEndDateStr);
				mapNextTimeReserveRateLastYear = this.getNextTimeReserveRateStaff(this.staffIdList, this.lastYearStartDateStr, this.lastYearEndDateStr);
			}
		}
		// 予約成約率
		HashMap<Integer, EffectIndicatorAnalysisBean> mapReserveSuccessRateThisMonth = null;
		HashMap<Integer, EffectIndicatorAnalysisBean> mapReserveSuccessRateLastMonth = null;
		HashMap<Integer, EffectIndicatorAnalysisBean> mapReserveSuccessRateLastYear = null;
		if (this.chkReserveSuccessRate.isSelected()) {
			if (rdoShop.isSelected()) {
				mapReserveSuccessRateThisMonth = this.getReserveSuccessRateShop(this.thisMonthStartDateStr, this.thisMonthEndDateStr);
				mapReserveSuccessRateLastMonth = this.getReserveSuccessRateShop(this.lastMonthStartDateStr, this.lastMonthEndDateStr);
				mapReserveSuccessRateLastYear = this.getReserveSuccessRateShop(this.lastYearStartDateStr, this.lastYearEndDateStr);
			} else {
				mapReserveSuccessRateThisMonth = this.getReserveSuccessRateStaff(this.staffIdList, this.thisMonthStartDateStr, this.thisMonthEndDateStr);
				mapReserveSuccessRateLastMonth = this.getReserveSuccessRateStaff(this.staffIdList, this.lastMonthStartDateStr, this.lastMonthEndDateStr);
				mapReserveSuccessRateLastYear = this.getReserveSuccessRateStaff(this.staffIdList, this.lastYearStartDateStr, this.lastYearEndDateStr);
			}
		}
		// 店販比率,紹介数,○○獲得率など
		HashMap<Integer, EffectIndicatorAnalysisBean> mapThisMonth = this.getBusinessReportForAll(this.thisMonthStartDateStr, this.thisMonthEndDateStr);
		HashMap<Integer, EffectIndicatorAnalysisBean> mapLastMonth = this.getBusinessReportForAll(this.lastMonthStartDateStr, this.lastMonthEndDateStr);
		HashMap<Integer, EffectIndicatorAnalysisBean> mapLastYear = this.getBusinessReportForAll(this.lastYearStartDateStr, this.lastYearEndDateStr);
		// スタッフ1人当たり売上
		HashMap<Integer, EffectIndicatorAnalysisBean> mapOneStaffSalesThisMonth = null;
		HashMap<Integer, EffectIndicatorAnalysisBean> mapOneStaffSalesLastMonth = null;
		HashMap<Integer, EffectIndicatorAnalysisBean> mapOneStaffSalesLastYear = null;
		if (this.chkOneStaffSales.isSelected() && rdoShop.isSelected()) {
			Calendar thisMonthStartCal = Calendar.getInstance();
			thisMonthStartCal.set(Integer.parseInt(thisMonthStartDateStr.substring(0, 4)), Integer.parseInt(thisMonthStartDateStr.substring(5, 7)) - 1,
					Integer.parseInt(thisMonthStartDateStr.substring(8, 10)), 0, 0, 0);
			Calendar thisMonthEndCal = Calendar.getInstance();
			thisMonthEndCal.set(Integer.parseInt(thisMonthEndDateStr.substring(0, 4)), Integer.parseInt(thisMonthEndDateStr.substring(5, 7)) - 1,
					Integer.parseInt(thisMonthEndDateStr.substring(8, 10)), 0, 0, 0);
			Calendar lastMonthStartCal = Calendar.getInstance();
			lastMonthStartCal.set(Integer.parseInt(lastMonthStartDateStr.substring(0, 4)), Integer.parseInt(lastMonthStartDateStr.substring(5, 7)) - 1,
					Integer.parseInt(lastMonthStartDateStr.substring(8, 10)), 0, 0, 0);
			Calendar lastMonthEndCal = Calendar.getInstance();
			lastMonthEndCal.set(Integer.parseInt(lastMonthEndDateStr.substring(0, 4)), Integer.parseInt(lastMonthEndDateStr.substring(5, 7)) - 1,
					Integer.parseInt(lastMonthEndDateStr.substring(8, 10)), 0, 0, 0);
			Calendar lastYearStartCal = Calendar.getInstance();
			lastYearStartCal.set(Integer.parseInt(lastYearStartDateStr.substring(0, 4)), Integer.parseInt(lastYearStartDateStr.substring(5, 7)) - 1,
					Integer.parseInt(lastYearStartDateStr.substring(8, 10)), 0, 0, 0);
			Calendar lastYearEndCal = Calendar.getInstance();
			lastYearEndCal.set(Integer.parseInt(lastYearEndDateStr.substring(0, 4)), Integer.parseInt(lastYearEndDateStr.substring(5, 7)) - 1, Integer.parseInt(lastYearEndDateStr.substring(8, 10)),
					0, 0, 0);

			mapOneStaffSalesThisMonth = this.getSalesOneStaff(thisMonthStartCal.getTime(), thisMonthEndCal.getTime());
			mapOneStaffSalesLastMonth = this.getSalesOneStaff(lastMonthStartCal.getTime(), lastMonthEndCal.getTime());
			mapOneStaffSalesLastYear = this.getSalesOneStaff(lastYearStartCal.getTime(), lastYearEndCal.getTime());
		}

		// loopで明細を追加
		// 明細件数
		int rowNum = 0;
		if (rdoShop.isSelected()) {
			rowNum = shop.getItemCount();
		} else {
			rowNum = this.staffIdList.size();
		}
		// 行No
		int rowIndex = 0;
		if (rdoShop.isSelected()) {
			rowIndex = 0;
		} else {
			rowIndex = 1;
		}
		MathContext mc = new MathContext(8, RoundingMode.HALF_UP);
		for (; rowIndex < rowNum; rowIndex++) {
			int mapKey = 0;
			if (rdoShop.isSelected()) {
				mapKey = ((MstShop) shop.getItemAt(rowIndex)).getShopID();
			} else {
				mapKey = this.staffIdList.get(rowIndex);
			}

			Object[] row = new Object[colNum];
			// 店舗名・担当者名
			if (rdoShop.isSelected()) {
				row[0] = ((MstShop) shop.getItemAt(rowIndex)).getShopName();
			} else {
				row[0] = this.staffNameList.get(rowIndex);
			}
			int colIndex = 1;
			// 新規再来率
			if (this.chkNewComeRate.isSelected() && this.rdoMonth.isSelected()) {
				BigDecimal bd1 = mapNewComeRateThisMonth.get(mapKey).getNewComeRate();
				BigDecimal bd2 = mapNewComeRateLastMonth.get(mapKey).getNewComeRate();
				BigDecimal bd3 = mapNewComeRateLastYear.get(mapKey).getNewComeRate();

				row[colIndex] = bd1.toString() + "%";
				colIndex++;

				if (bd2.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd2, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (bd3.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd3, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;
				
				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 既存再来率
			if (this.chkExistComeRate.isSelected() && this.rdoMonth.isSelected()) {
				BigDecimal bd1 = mapExistComeRateThisMonth.get(mapKey).getExistComeRate();
				BigDecimal bd2 = mapExistComeRateLastMonth.get(mapKey).getExistComeRate();
				BigDecimal bd3 = mapExistComeRateLastYear.get(mapKey).getExistComeRate();

				row[colIndex] = bd1.toString() + "%";
				colIndex++;

				if (bd2.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd2, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (bd3.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd3, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 次回予約率
			if (this.chkNextTimeReserveRate.isSelected()) {
				BigDecimal bd1 = mapNextTimeReserveRateThisMonth.get(mapKey).getNextTimeReserveRate();
				BigDecimal bd2 = mapNextTimeReserveRateLastMonth.get(mapKey).getNextTimeReserveRate();
				BigDecimal bd3 = mapNextTimeReserveRateLastYear.get(mapKey).getNextTimeReserveRate();

				row[colIndex] = bd1.toString() + "%";
				colIndex++;

				if (bd2.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd2, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (bd3.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd3, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 予約成約率
			if (this.chkReserveSuccessRate.isSelected()) {
				BigDecimal bd1 = mapReserveSuccessRateThisMonth.get(mapKey).getReserveSuccessRate();
				BigDecimal bd2 = mapReserveSuccessRateLastMonth.get(mapKey).getReserveSuccessRate();
				BigDecimal bd3 = mapReserveSuccessRateLastYear.get(mapKey).getReserveSuccessRate();

				row[colIndex] = bd1.toString() + "%";
				colIndex++;

				if (bd2.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd2, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (bd3.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd3, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}

			EffectIndicatorAnalysisBean beanThisMonth = mapThisMonth.get(mapKey);
			EffectIndicatorAnalysisBean beanLastMonth = mapLastMonth.get(mapKey);
			EffectIndicatorAnalysisBean beanLastYear = mapLastYear.get(mapKey);
			// 店販比率
			if (this.chkShopSaleRate.isSelected()) {
				BigDecimal bd1 = beanThisMonth.getShopSaleRate();
				BigDecimal bd2 = beanLastMonth.getShopSaleRate();
				BigDecimal bd3 = beanLastYear.getShopSaleRate();
				row[colIndex] = bd1.toString() + "%";
				colIndex++;

				if (bd2.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd2, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (bd3.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd3, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 紹介数
			if (this.chkIntroductionNum.isSelected()) {
				int int1 = beanThisMonth.getIntroducerNum();
				int int2 = beanLastMonth.getIntroducerNum();
				int int3 = beanLastYear.getIntroducerNum();

				System.out.println("紹介数:" + int1);
				row[colIndex] = int1;
				colIndex++;

				System.out.println("紹介数:" + int2);
				if (int2 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int2), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				System.out.println("紹介数:" + int3);
				if (int3 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int3), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// スタッフ1人当たり売上
			if (this.chkOneStaffSales.isSelected() && rdoShop.isSelected()) {
				BigDecimal bd1 = mapOneStaffSalesThisMonth.get(mapKey).getSalesOneStaff();
				BigDecimal bd2 = mapOneStaffSalesLastMonth.get(mapKey).getSalesOneStaff();
				BigDecimal bd3 = mapOneStaffSalesLastYear.get(mapKey).getSalesOneStaff();

				row[colIndex] = bd1;
				colIndex++;

				if (bd2.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd2, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (bd3.compareTo(BigDecimal.ZERO) != 0) {
					row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd3, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 総売上
			if (this.chkTotalSales.isSelected()) {
				int int1 = beanThisMonth.getAllTotal();
				int int2 = beanLastMonth.getAllTotal();
				int int3 = beanLastYear.getAllTotal();

				row[colIndex] = int1;
				colIndex++;

				if (int2 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int2), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (int3 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int3), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 技術売上
			if (this.chkTechSales.isSelected()) {
				int int1 = beanThisMonth.getTechnicTotal();
				int int2 = beanLastMonth.getTechnicTotal();
				int int3 = beanLastYear.getTechnicTotal();

				row[colIndex] = int1;
				colIndex++;

				if (int2 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int2), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (int3 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int3), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;
				
				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 商品売上
			if (this.chkItemSales.isSelected()) {
				int int1 = beanThisMonth.getItemTotal();
				int int2 = beanLastMonth.getItemTotal();
				int int3 = beanLastYear.getItemTotal();

				row[colIndex] = int1;
				colIndex++;

				if (int2 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int2), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (int3 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int3), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 総客数
			if (this.chkTotalCustNum.isSelected()) {
				int int1 = beanThisMonth.getTotalNum();
				int int2 = beanLastMonth.getTotalNum();
				int int3 = beanLastYear.getTotalNum();

				row[colIndex] = int1;
				colIndex++;

				if (int2 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int2), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (int3 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int3), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 技術客数
			if (this.chkTechCustNum.isSelected()) {
				int int1 = beanThisMonth.getTechnicTotalNum();
				int int2 = beanLastMonth.getTechnicTotalNum();
				int int3 = beanLastYear.getTechnicTotalNum();

				row[colIndex] = int1;
				colIndex++;

				if (int2 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int2), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (int3 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int3), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 指名客数
			if (this.chkAssignCustNum.isSelected()) {
				int int1 = beanThisMonth.getChargeNum();
				int int2 = beanLastMonth.getChargeNum();
				int int3 = beanLastYear.getChargeNum();

				row[colIndex] = int1;
				colIndex++;

				if (int2 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int2), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (int3 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int3), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 新規客数
			if (this.chkNewCustNum.isSelected()) {
				int int1 = beanThisMonth.getNewVisitNum();
				int int2 = beanLastMonth.getNewVisitNum();
				int int3 = beanLastYear.getNewVisitNum();

				row[colIndex] = int1;
				colIndex++;

				if (int2 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int2), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (int3 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int3), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}
			// 店販客数
			if (this.chkShopSaleCustNum.isSelected()) {
				int int1 = beanThisMonth.getItemBuyNum();
				int int2 = beanLastMonth.getItemBuyNum();
				int int3 = beanLastYear.getItemBuyNum();

				row[colIndex] = int1;
				colIndex++;

				if (int2 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int2), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (int3 != 0) {
					row[colIndex] = new BigDecimal(int1).multiply(new BigDecimal("100")).divide(new BigDecimal(int3), mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
				}
				colIndex++;

				if (this.rdoMonth.isSelected()) {
					row[colIndex] = null;
					colIndex++;
				}
				
			}

			// ○○獲得率
			for (int i = 0; i < beanThisMonth.getTechIdNumList().size(); i++) {
				BigDecimal bd1 = BigDecimal.ZERO.setScale(1, BigDecimal.ROUND_HALF_UP);
				if (beanThisMonth.getTechnicTotalNum() > 0) {
					bd1 = new BigDecimal(beanThisMonth.getTechIdNumList().get(i).getCustomerCount() / (double) beanThisMonth.getTechnicTotalNum() * 100).setScale(1, BigDecimal.ROUND_HALF_UP);
				}
				BigDecimal bd2 = BigDecimal.ZERO.setScale(1, BigDecimal.ROUND_HALF_UP);
				if (beanLastMonth.getTechnicTotalNum() > 0) {
					bd2 = new BigDecimal(beanLastMonth.getTechIdNumList().get(i).getCustomerCount() / (double) beanLastMonth.getTechnicTotalNum() * 100).setScale(1, BigDecimal.ROUND_HALF_UP);
				}
				BigDecimal bd3 = BigDecimal.ZERO.setScale(1, BigDecimal.ROUND_HALF_UP);
				if (beanLastYear.getTechnicTotalNum() > 0) {
					bd3 = new BigDecimal(beanLastYear.getTechIdNumList().get(i).getCustomerCount() / (double) beanLastYear.getTechnicTotalNum() * 100).setScale(1, BigDecimal.ROUND_HALF_UP);
				}

				for (int j = 0; j < techClassIdArray.length; j++) {
					if (techClassIdArray[j] == beanThisMonth.getTechIdNumList().get(i).getProductClassId()) {
						if (techClassArray[j].isSelected()) {
							row[colIndex] = bd1.toString() + "%";
							colIndex++;

							if (bd2.compareTo(BigDecimal.ZERO) != 0) {
								row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd2, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
							}
							colIndex++;

							if (bd3.compareTo(BigDecimal.ZERO) != 0) {
								row[colIndex] = bd1.multiply(new BigDecimal("100")).divide(bd3, mc).setScale(1, BigDecimal.ROUND_HALF_UP).toString() + "%";
							}
							colIndex++;

							if (this.rdoMonth.isSelected()) {
								row[colIndex] = null;
								colIndex++;
							}
							
						}
						break;
					}
				}
			}

			DefaultTableModel model = (DefaultTableModel) tblDetail.getModel();
			model.addRow(row);
		}

		// 列幅を調整
		SelectTableCellRenderer cellRenderRight = new SelectTableCellRenderer();
		cellRenderRight.setHorizontalAlignment(SwingConstants.RIGHT); //右寄せ
		tblDetail.getColumnModel().getColumn(0).setPreferredWidth(120); // 店舗名
		for (int i = 1; i < tblDetail.getColumnCount(); i++) {
			tblDetail.getColumnModel().getColumn(i).setPreferredWidth(68);
			tblDetail.getColumnModel().getColumn(i).setCellRenderer(cellRenderRight);
		}
	}

	/**
	 * shopIdStringを作成する。
	 */
	private void getShopIdString() {
		String shopIdString = "";

		if (rdoShop.isSelected()) {
			// 店舗別の場合
			for (int i = 0; i < shop.getItemCount(); i++) {
				MstShop mstShop = (MstShop) shop.getItemAt(i);
				if (shopIdString.equals("")) {
					shopIdString += mstShop.getShopID();
				} else {
					shopIdString += "," + mstShop.getShopID();
				}
			}
		} else {
			// 担当者別の場合
			shopIdString = ((MstShop) shop.getSelectedItem()).getShopID().toString();
		}

		this.shopIdString = shopIdString;
		System.out.println("shopIdString:" + this.shopIdString);
	}

	/**
	 * 集計期間を求める。
	 */
	private void getStartEndDate() {
		
		if (rdoMonth.isSelected()) {
			// 今月
			String year = this.selectYear.getSelectedItem().toString();
			String month = this.selectMonth.getSelectedItem().toString();
			if (Integer.parseInt(month) < 10) {
				month = "0" + month;
			}
			this.thisMonthStartDateStr = year + "-" + month + "-01";

			Calendar c = Calendar.getInstance();
			c.set(Integer.parseInt(year), Integer.parseInt(month), 1);// 選択月の翌月にして
			c.add(Calendar.DAY_OF_MONTH, -1); // １日戻す
			this.thisMonthEndDateStr = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());

			System.out.println("thisMonthStartDateStr:" + this.thisMonthStartDateStr);
			System.out.println("thisMonthEndDateStr:" + this.thisMonthEndDateStr);
			// 前月

			c.set(Integer.parseInt(year), Integer.parseInt(month) - 2, 1);
			this.lastMonthStartDateStr = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());
			c.set(Integer.parseInt(year), Integer.parseInt(month) - 1, 1);
			c.add(Calendar.DAY_OF_MONTH, -1); // １日戻す
			this.lastMonthEndDateStr = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());
			System.out.println("lastMonthStartDateStr:" + this.lastMonthStartDateStr);
			System.out.println("lastMonthEndDateStr:" + this.lastMonthEndDateStr);
			// 前年
			c.set(Integer.parseInt(year) - 1, Integer.parseInt(month) - 1, 1);
			this.lastYearStartDateStr = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());
			c.set(Integer.parseInt(year) - 1, Integer.parseInt(month), 1);
			c.add(Calendar.DAY_OF_MONTH, -1); // １日戻す
			this.lastYearEndDateStr = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());
			System.out.println("lastYearStartDateStr:" + this.lastYearStartDateStr);
			System.out.println("lastYearEndDateStr:" + this.lastYearEndDateStr);
		} else {
			// 今月
			String begin_year = this.dateSelect.getDateStr().substring(0, 4);
			String begin_month = this.dateSelect.getDateStr().substring(4, 6);
			String begin_date = this.dateSelect.getDateStr().substring(6, 8);
			String end_year = this.dateSelect2.getDateStr().substring(0, 4);
			String end_month = this.dateSelect2.getDateStr().substring(4, 6);
			String end_date = this.dateSelect2.getDateStr().substring(6, 8);
			this.thisMonthStartDateStr = begin_year + "-" + begin_month + "-" +begin_date;
			this.thisMonthEndDateStr = end_year + "-" + end_month + "-" + end_date;
			System.out.println("thisMonthStartDateStr:" + this.thisMonthStartDateStr);
			System.out.println("thisMonthEndDateStr:" + this.thisMonthEndDateStr);
			// 前月
			Calendar c = Calendar.getInstance();
			c.set(Integer.parseInt(begin_year), Integer.parseInt(begin_month) - 2, Integer.parseInt(begin_date));
			this.lastMonthStartDateStr = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());
			c.set(Integer.parseInt(end_year), Integer.parseInt(end_month) - 2, Integer.parseInt(end_date));
			this.lastMonthEndDateStr = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());
			System.out.println("lastMonthStartDateStr:" + this.lastMonthStartDateStr);
			System.out.println("lastMonthEndDateStr:" + this.lastMonthEndDateStr);
			// 前年
			c.set(Integer.parseInt(begin_year) - 1, Integer.parseInt(begin_month) - 1, Integer.parseInt(begin_date));
			this.lastYearStartDateStr = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());
			c.set(Integer.parseInt(end_year) - 1, Integer.parseInt(end_month) - 1, Integer.parseInt(end_date));
			this.lastYearEndDateStr = new SimpleDateFormat("yyyy-MM-dd").format(c.getTime());
			System.out.println("lastYearStartDateStr:" + this.lastYearStartDateStr);
			System.out.println("lastYearEndDateStr:" + this.lastYearEndDateStr);
		}
	}

	/**
	 * EXCEL出力を行う
	 */
	private void printExcel() {
		JExcelApi jx = null;
		if (rdoShop.isSelected()) {
			if (rdoMonth.isSelected()) {
				jx = new JExcelApi("効果指標数値分析_店舗別_月指定");
				jx.setTemplateFile("/reports/効果指標数値分析_店舗別_月指定.xls");
			} else {
				jx = new JExcelApi("効果指標数値分析_店舗別_日付指定");
				jx.setTemplateFile("/reports/効果指標数値分析_店舗別_日付指定.xls");
			}
		} else {
			if (rdoMonth.isSelected()) {
				jx = new JExcelApi("効果指標数値分析_担当者別_月指定");
				jx.setTemplateFile("/reports/効果指標数値分析_担当者別_月指定.xls");
			} else {
				jx = new JExcelApi("効果指標数値分析_担当者別_日付指定");
				jx.setTemplateFile("/reports/効果指標数値分析_担当者別_日付指定.xls");
			}
		}
		
		String targetDateStr = "";
		// 対象期間
		if (this.rdoMonth.isSelected()) {
			targetDateStr = "対象期間：" + this.selectYear.getSelectedItem().toString() + "年" + Integer.parseInt( this.selectMonth.getSelectedItem().toString()) + "月";
		} else {
			targetDateStr = "対象期間：" + this.dateSelect.getDateStr().substring(0, 4) + "年" + Integer.parseInt(this.dateSelect.getDateStr().substring(4, 6)) + "月" + Integer.parseInt(this.dateSelect.getDateStr().substring(6, 8)) + "日" ;
			targetDateStr += "〜" + this.dateSelect2.getDateStr().substring(0, 4) + "年" + Integer.parseInt(this.dateSelect2.getDateStr().substring(4, 6)) + "月" + Integer.parseInt(this.dateSelect2.getDateStr().substring(6, 8)) + "日" ;
		}
		// ヘッダ
		jx.setValue(1, 4, targetDateStr);
		if (!rdoShop.isSelected()) {
			String shopName = ((MstShop) shop.getSelectedItem()).getShopName();
			jx.setValue(1, 6, "対象店舗：" + shopName);
		}

		DefaultTableModel model = (DefaultTableModel) tblDetail.getModel();
		int rowCount = model.getRowCount();

		// insertする行数
		int insertRowCount = 0;
		if (rowCount > 1) {
			insertRowCount = rowCount - 1;
		}
		// insertする
		if (insertRowCount > 0) {
			if (rdoShop.isSelected()) {
				jx.insertRow(10, insertRowCount);
			} else {
				jx.insertRow(11, insertRowCount);
			}
		}
		
		if (this.rdoMonth.isSelected()) {
			// テンプレートファイル中の列数
			int excelColCount = 0;
			if (rdoShop.isSelected()) {
				excelColCount = 181;
			} else {
				excelColCount = 177;
			}
	
			// 店販客数uncheckedの場合
			if (!chkShopSaleCustNum.isSelected()) {
				for (int i = 0; i < 4; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(58);
					} else {
						jx.removeColumn(54);
					}
				}
				excelColCount = excelColCount - 4;
			}
			// 新規客数uncheckedの場合
			if (!chkNewCustNum.isSelected()) {
				for (int i = 0; i < 4; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(54);
					} else {
						jx.removeColumn(50);
					}
				}
				excelColCount = excelColCount - 4;
			}
			// 指名客数uncheckedの場合
			if (!chkAssignCustNum.isSelected()) {
				for (int i = 0; i < 4; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(50);
					} else {
						jx.removeColumn(46);
					}
				}
				excelColCount = excelColCount - 4;
			}
			// 技術客数uncheckedの場合
			if (!chkTechCustNum.isSelected()) {
				for (int i = 0; i < 4; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(46);
					} else {
						jx.removeColumn(42);
					}
				}
				excelColCount = excelColCount - 4;
			}
			// 総客数uncheckedの場合
			if (!chkTotalCustNum.isSelected()) {
				for (int i = 0; i < 4; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(42);
					} else {
						jx.removeColumn(38);
					}
				}
				excelColCount = excelColCount - 4;
			}
			// 商品売上uncheckedの場合
			if (!chkItemSales.isSelected()) {
				for (int i = 0; i < 4; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(38);
					} else {
						jx.removeColumn(34);
					}
				}
				excelColCount = excelColCount - 4;
			}
			// 技術売上uncheckedの場合
			if (!chkTechSales.isSelected()) {
				for (int i = 0; i < 4; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(34);
					} else {
						jx.removeColumn(30);
					}
				}
				excelColCount = excelColCount - 4;
			}
			// 総売上uncheckedの場合
			if (!chkTotalSales.isSelected()) {
				for (int i = 0; i < 4; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(30);
					} else {
						jx.removeColumn(26);
					}
				}
				excelColCount = excelColCount - 4;
			}
			// スタッフ1人当たり売上uncheckedの場合
			if (rdoShop.isSelected() && !chkOneStaffSales.isSelected()) {
				for (int i = 0; i < 4; i++) {
					jx.removeColumn(26);
				}
				excelColCount = excelColCount - 4;
			}
			// 紹介数uncheckedの場合
			if (!chkIntroductionNum.isSelected()) {
				for (int i = 0; i < 4; i++) {
					jx.removeColumn(22);
				}
				excelColCount = excelColCount - 4;
			}
			// 店販比率uncheckedの場合
			if (!chkShopSaleRate.isSelected()) {
				for (int i = 0; i < 4; i++) {
					jx.removeColumn(18);
				}
				excelColCount = excelColCount - 4;
			}
			// 予約成約率uncheckedの場合
			if (!chkReserveSuccessRate.isSelected()) {
				for (int i = 0; i < 4; i++) {
					jx.removeColumn(14);
				}
				excelColCount = excelColCount - 4;
			}
			// 次回予約率uncheckedの場合
			if (!chkNextTimeReserveRate.isSelected()) {
				for (int i = 0; i < 4; i++) {
					jx.removeColumn(10);
				}
				excelColCount = excelColCount - 4;
			}
			// 既存再来率uncheckedの場合
			if (!chkExistComeRate.isSelected() || this.rdoDay.isSelected()) {
				for (int i = 0; i < 4; i++) {
					jx.removeColumn(6);
				}
				excelColCount = excelColCount - 4;
			}
			// 新規再来率uncheckedの場合
			if (!chkNewComeRate.isSelected() || this.rdoDay.isSelected()) {
				for (int i = 0; i < 4; i++) {
					jx.removeColumn(2);
				}
				excelColCount = excelColCount - 4;
			}
	
			// 獲得率の方、delete必要な列数
			int deleteColCountTech = 0;
			int colCount = model.getColumnCount();
			if (colCount < excelColCount) {
				deleteColCountTech = excelColCount - colCount;
			}
			// deleteする
			if (deleteColCountTech > 0) {
				for (int i = 0; i < deleteColCountTech; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(62 - (181 - excelColCount));
					} else {
						jx.removeColumn(58 - (177 - excelColCount));
					}
				}
			}
	
			// ○○獲得率という文字を置換
			int selectCount = 0;
			for (int i = 0; i < techClassArray.length; i++) {
				if (techClassArray[i].isSelected()) {
					String value = techClassNameArray[i] + "獲得率";
					if (rdoShop.isSelected()) {
						jx.setValue(62 - (181 - excelColCount) + selectCount * 4, 7, value);
					} else {
						jx.setValue(58 - (177 - excelColCount) + selectCount * 4, 8, value);
					}
					selectCount++;
				}
			}
	
			// 明細を出力
			int rowIndex = 0;
			for (Object row : model.getDataVector()) {
				for (int colIndex = 0; colIndex < colCount; colIndex++) {
					Object obj = ((Vector) row).get(colIndex);
					if (obj != null) {
						if (rdoShop.isSelected()) {
							jx.setValue(colIndex + 1, 10 + rowIndex, obj);
						} else {
							jx.setValue(colIndex + 1, 11 + rowIndex, obj);
						}					
					}
				}
				rowIndex++;
			}
		} else {
			// テンプレートファイル中の列数
			int excelColCount = 0;
			if (rdoShop.isSelected()) {
				excelColCount = 136;
			} else {
				excelColCount = 133;
			}
	
			// 店販客数uncheckedの場合
			if (!chkShopSaleCustNum.isSelected()) {
				for (int i = 0; i < 3; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(44);
					} else {
						jx.removeColumn(41);
					}
				}
				excelColCount = excelColCount - 3;
			}
			// 新規客数uncheckedの場合
			if (!chkNewCustNum.isSelected()) {
				for (int i = 0; i < 3; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(41);
					} else {
						jx.removeColumn(38);
					}
				}
				excelColCount = excelColCount - 3;
			}
			// 指名客数uncheckedの場合
			if (!chkAssignCustNum.isSelected()) {
				for (int i = 0; i < 3; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(38);
					} else {
						jx.removeColumn(35);
					}
				}
				excelColCount = excelColCount - 3;
			}
			// 技術客数uncheckedの場合
			if (!chkTechCustNum.isSelected()) {
				for (int i = 0; i < 3; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(35);
					} else {
						jx.removeColumn(32);
					}
				}
				excelColCount = excelColCount - 3;
			}
			// 総客数uncheckedの場合
			if (!chkTotalCustNum.isSelected()) {
				for (int i = 0; i < 3; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(32);
					} else {
						jx.removeColumn(29);
					}
				}
				excelColCount = excelColCount - 3;
			}
			// 商品売上uncheckedの場合
			if (!chkItemSales.isSelected()) {
				for (int i = 0; i < 3; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(29);
					} else {
						jx.removeColumn(26);
					}
				}
				excelColCount = excelColCount - 3;
			}
			// 技術売上uncheckedの場合
			if (!chkTechSales.isSelected()) {
				for (int i = 0; i < 3; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(26);
					} else {
						jx.removeColumn(23);
					}
				}
				excelColCount = excelColCount - 3;
			}
			// 総売上uncheckedの場合
			if (!chkTotalSales.isSelected()) {
				for (int i = 0; i < 3; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(23);
					} else {
						jx.removeColumn(20);
					}
				}
				excelColCount = excelColCount - 3;
			}
			// スタッフ1人当たり売上uncheckedの場合
			if (rdoShop.isSelected() && !chkOneStaffSales.isSelected()) {
				for (int i = 0; i < 3; i++) {
					jx.removeColumn(20);
				}
				excelColCount = excelColCount - 3;
			}
			// 紹介数uncheckedの場合
			if (!chkIntroductionNum.isSelected()) {
				for (int i = 0; i < 3; i++) {
					jx.removeColumn(17);
				}
				excelColCount = excelColCount - 3;
			}
			// 店販比率uncheckedの場合
			if (!chkShopSaleRate.isSelected()) {
				for (int i = 0; i < 3; i++) {
					jx.removeColumn(14);
				}
				excelColCount = excelColCount - 3;
			}
			// 予約成約率uncheckedの場合
			if (!chkReserveSuccessRate.isSelected()) {
				for (int i = 0; i < 3; i++) {
					jx.removeColumn(11);
				}
				excelColCount = excelColCount - 3;
			}
			// 次回予約率uncheckedの場合
			if (!chkNextTimeReserveRate.isSelected()) {
				for (int i = 0; i < 3; i++) {
					jx.removeColumn(8);
				}
				excelColCount = excelColCount - 3;
			}
			// 既存再来率uncheckedの場合
			if (!chkExistComeRate.isSelected() || this.rdoDay.isSelected()) {
				for (int i = 0; i < 3; i++) {
					jx.removeColumn(5);
				}
				excelColCount = excelColCount - 3;
			}
			// 新規再来率uncheckedの場合
			if (!chkNewComeRate.isSelected() || this.rdoDay.isSelected()) {
				for (int i = 0; i < 3; i++) {
					jx.removeColumn(2);
				}
				excelColCount = excelColCount - 3;
			}
	
			// 獲得率の方、delete必要な列数
			int deleteColCountTech = 0;
			int colCount = model.getColumnCount();
			if (colCount < excelColCount) {
				deleteColCountTech = excelColCount - colCount;
			}
			
			
			// deleteする
			if (deleteColCountTech > 0) {
				for (int i = 0; i < deleteColCountTech; i++) {
					if (rdoShop.isSelected()) {
						jx.removeColumn(47 - (136 - excelColCount));
					} else {
						jx.removeColumn(44 - (133 - excelColCount));
					}
				}
			}
	
			// ○○獲得率という文字を置換
			int selectCount = 0;
			for (int i = 0; i < techClassArray.length; i++) {
				if (techClassArray[i].isSelected()) {
					String value = techClassNameArray[i] + "獲得率";
					if (rdoShop.isSelected()) {
						jx.setValue(47 - (136 - excelColCount) + selectCount * 3, 7, value);
					} else {
						jx.setValue(44 - (133 - excelColCount) + selectCount * 3, 8, value);
					}
					selectCount++;
				}
			}
			
			// 明細を出力
			int rowIndex = 0;
			for (Object row : model.getDataVector()) {
				for (int colIndex = 0; colIndex < colCount; colIndex++) {
					Object obj = ((Vector) row).get(colIndex);
					if (obj != null) {
						if (rdoShop.isSelected()) {
							jx.setValue(colIndex + 1, 10 + rowIndex, obj);
						} else {
							jx.setValue(colIndex + 1, 11 + rowIndex, obj);
						}					
					}
				}
				rowIndex++;
			}
		}
		jx.openWorkbook();
	}
	
    private void txtStaffCountFocusLost(java.awt.event.FocusEvent evt, int index) {//GEN-FIRST:event_txtStaffCountFocusLost

        if (CheckUtil.isNumeric(shopStaffArray[index].getText())) {
            double d = Double.parseDouble(shopStaffArray[index].getText());
            if (d < 0) {
            	shopStaffArray[index].setText("0.0");
            } else if (d > 999.9) {
            	shopStaffArray[index].setText("999.9");
            } else {
                DecimalFormat f =  new DecimalFormat("###0.0");
                shopStaffArray[index].setText(f.format(d));
            }
        } else {
        	shopStaffArray[index].setText("0.0");
        }
        int selectShopId = ((MstShop) shop.getItemAt(index)).getShopID();
        staffCountArray[selectShopId] = Double.parseDouble(shopStaffArray[index].getText());

    }//GEN-LAST:event_txtStaffCountFocusLost
	
	/**
	 * 条件指定Tableを初期化
	 */
	private void initTblCondition() {
		boolean allSelected = true;
		String ConditionString = PropertiesUtil.readValue("EffectIndicatorAnalysisPanel.properties", "Condition");
		chkOutputItems = new javax.swing.JCheckBox();
		chkOutputItems.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkOutputItems.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkOutputItems.setOpaque(false);
		
		chkNewComeRate = new javax.swing.JCheckBox();
		chkNewComeRate.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkNewComeRate.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkNewComeRate.setOpaque(false);

		if (ConditionString.indexOf("chkNewComeRate,") >= 0) {
			chkNewComeRate.setSelected(true);
		} else {
			chkNewComeRate.setSelected(false);
			allSelected = false;
		}
		
		chkExistComeRate = new javax.swing.JCheckBox();
		chkExistComeRate.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkExistComeRate.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkExistComeRate.setOpaque(false);
		if (ConditionString.indexOf("chkExistComeRate,") >= 0) {
			chkExistComeRate.setSelected(true);
		} else {
			chkExistComeRate.setSelected(false);
			allSelected = false;
		}
		
		chkNextTimeReserveRate = new javax.swing.JCheckBox();
		chkNextTimeReserveRate.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkNextTimeReserveRate.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkNextTimeReserveRate.setOpaque(false);
		if (ConditionString.indexOf("chkNextTimeReserveRate,") >= 0) {
			chkNextTimeReserveRate.setSelected(true);
		} else {
			chkNextTimeReserveRate.setSelected(false);
			allSelected = false;
		}
		
		chkReserveSuccessRate = new javax.swing.JCheckBox();
		chkReserveSuccessRate.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkReserveSuccessRate.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkReserveSuccessRate.setOpaque(false);
		if (ConditionString.indexOf("chkReserveSuccessRate,") >= 0) {
			chkReserveSuccessRate.setSelected(true);
		} else {
			chkReserveSuccessRate.setSelected(false);
			allSelected = false;
		}
		
		chkShopSaleRate = new javax.swing.JCheckBox();
		chkShopSaleRate.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkShopSaleRate.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkShopSaleRate.setOpaque(false);
		if (ConditionString.indexOf("chkShopSaleRate,") >= 0) {
			chkShopSaleRate.setSelected(true);
		} else {
			chkShopSaleRate.setSelected(false);
			allSelected = false;
		}
		
		chkIntroductionNum = new javax.swing.JCheckBox();
		chkIntroductionNum.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkIntroductionNum.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkIntroductionNum.setOpaque(false);
		if (ConditionString.indexOf("chkIntroductionNum,") >= 0) {
			chkIntroductionNum.setSelected(true);
		} else {
			chkIntroductionNum.setSelected(false);
			allSelected = false;
		}
		
		chkOneStaffSales = new javax.swing.JCheckBox();
		chkOneStaffSales.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkOneStaffSales.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkOneStaffSales.setOpaque(false);
		if (ConditionString.indexOf("chkOneStaffSales,") >= 0) {
			chkOneStaffSales.setSelected(true);
		} else {
			chkOneStaffSales.setSelected(false);
			allSelected = false;
		}
		
		chkTotalSales = new javax.swing.JCheckBox();
		chkTotalSales.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkTotalSales.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkTotalSales.setOpaque(false);
		if (ConditionString.indexOf("chkTotalSales,") >= 0) {
			chkTotalSales.setSelected(true);
		} else {
			chkTotalSales.setSelected(false);
			allSelected = false;
		}
		
		chkTechSales = new javax.swing.JCheckBox();
		chkTechSales.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkTechSales.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkTechSales.setOpaque(false);
		if (ConditionString.indexOf("chkTechSales,") >= 0) {
			chkTechSales.setSelected(true);
		} else {
			chkTechSales.setSelected(false);
			allSelected = false;
		}
		
		chkItemSales = new javax.swing.JCheckBox();
		chkItemSales.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkItemSales.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkItemSales.setOpaque(false);
		if (ConditionString.indexOf("chkItemSales,") >= 0) {
			chkItemSales.setSelected(true);
		} else {
			chkItemSales.setSelected(false);
			allSelected = false;
		}
		
		chkTotalCustNum = new javax.swing.JCheckBox();
		chkTotalCustNum.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkTotalCustNum.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkTotalCustNum.setOpaque(false);
		if (ConditionString.indexOf("chkTotalCustNum,") >= 0) {
			chkTotalCustNum.setSelected(true);
		} else {
			chkTotalCustNum.setSelected(false);
			allSelected = false;
		}
		
		chkTechCustNum = new javax.swing.JCheckBox();
		chkTechCustNum.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkTechCustNum.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkTechCustNum.setOpaque(false);
		if (ConditionString.indexOf("chkTechCustNum,") >= 0) {
			chkTechCustNum.setSelected(true);
		} else {
			chkTechCustNum.setSelected(false);
			allSelected = false;
		}
		
		chkAssignCustNum = new javax.swing.JCheckBox();
		chkAssignCustNum.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkAssignCustNum.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkAssignCustNum.setOpaque(false);
		if (ConditionString.indexOf("chkAssignCustNum,") >= 0) {
			chkAssignCustNum.setSelected(true);
		} else {
			chkAssignCustNum.setSelected(false);
			allSelected = false;
		}
		
		chkNewCustNum = new javax.swing.JCheckBox();
		chkNewCustNum.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkNewCustNum.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkNewCustNum.setOpaque(false);
		if (ConditionString.indexOf("chkNewCustNum,") >= 0) {
			chkNewCustNum.setSelected(true);
		} else {
			chkNewCustNum.setSelected(false);
			allSelected = false;
		}
		
		chkShopSaleCustNum = new javax.swing.JCheckBox();
		chkShopSaleCustNum.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkShopSaleCustNum.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkShopSaleCustNum.setOpaque(false);
		if (ConditionString.indexOf("chkShopSaleCustNum,") >= 0) {
			chkShopSaleCustNum.setSelected(true);
		} else {
			chkShopSaleCustNum.setSelected(false);
			allSelected = false;
		}
		
		if (allSelected) {
			chkOutputItems.setSelected(true);
		} else {
			chkOutputItems.setSelected(false);
		}

		// 先に明細をクリア
		SwingUtil.clearTable(tblCondition);

		tblCondition.getColumnModel().getColumn(0).setPreferredWidth(122);
		tblCondition.getColumnModel().getColumn(1).setPreferredWidth(7);

		DefaultTableModel model = (DefaultTableModel) tblCondition.getModel();
		model.addRow(new Object[] { "出力項目", chkOutputItems });
		model.addRow(new Object[] { "新規再来率", chkNewComeRate });
		model.addRow(new Object[] { "既存再来率", chkExistComeRate });
		model.addRow(new Object[] { "次回予約率", chkNextTimeReserveRate });
		model.addRow(new Object[] { "予約成約率", chkReserveSuccessRate });
		model.addRow(new Object[] { "店販比率", chkShopSaleRate });
		model.addRow(new Object[] { "紹介数", chkIntroductionNum });
		model.addRow(new Object[] { "スタッフ1人当たり売上", chkOneStaffSales });
		model.addRow(new Object[] { "総売上", chkTotalSales });
		model.addRow(new Object[] { "技術売上", chkTechSales });
		model.addRow(new Object[] { "商品売上", chkItemSales });
		model.addRow(new Object[] { "総客数", chkTotalCustNum });
		model.addRow(new Object[] { "技術客数", chkTechCustNum });
		model.addRow(new Object[] { "指名客数", chkAssignCustNum });
		model.addRow(new Object[] { "新規客数", chkNewCustNum });
		model.addRow(new Object[] { "店販客数", chkShopSaleCustNum });

		SelectTableCellRenderer cell1Render = new SelectTableCellRenderer();
		cell1Render.setHorizontalAlignment(SwingConstants.CENTER); //センタリング
		tblCondition.getColumnModel().getColumn(1).setCellRenderer(cell1Render);

		tblCondition.setSelectionBackground(new java.awt.Color(220, 220, 220));
		tblCondition.setSelectionForeground(new java.awt.Color(0, 0, 0));

		chkOutputItems.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (chkOutputItems.isSelected()) {
					chkNewComeRate.setSelected(true);
					chkExistComeRate.setSelected(true);
					chkNextTimeReserveRate.setSelected(true);
					chkReserveSuccessRate.setSelected(true);
					chkShopSaleRate.setSelected(true);
					chkIntroductionNum.setSelected(true);
					chkOneStaffSales.setSelected(true);
					chkTotalSales.setSelected(true);
					chkTechSales.setSelected(true);
					chkItemSales.setSelected(true);
					chkTotalCustNum.setSelected(true);
					chkTechCustNum.setSelected(true);
					chkAssignCustNum.setSelected(true);
					chkNewCustNum.setSelected(true);
					chkShopSaleCustNum.setSelected(true);
				} else {
					chkNewComeRate.setSelected(false);
					chkExistComeRate.setSelected(false);
					chkNextTimeReserveRate.setSelected(false);
					chkReserveSuccessRate.setSelected(false);
					chkShopSaleRate.setSelected(false);
					chkIntroductionNum.setSelected(false);
					chkOneStaffSales.setSelected(false);
					chkTotalSales.setSelected(false);
					chkTechSales.setSelected(false);
					chkItemSales.setSelected(false);
					chkTotalCustNum.setSelected(false);
					chkTechCustNum.setSelected(false);
					chkAssignCustNum.setSelected(false);
					chkNewCustNum.setSelected(false);
					chkShopSaleCustNum.setSelected(false);
				}
				tblCondition.repaint();
			}

		});
	}

	/**
	 * 新規再来率,既存再来率を取得。
	 * @param fixedCount
	 * @return
	 */
	private HashMap<Integer, EffectIndicatorAnalysisBean> getComeRate(int fixedCount, int year, int month) {
		ReportLogic logic = new ReportLogic();
		ReportParameterBean paramBean = new ReportParameterBean();
		paramBean.setMainReportType(ReportParameterBean.MAIN_REPORT_STAFF);

		//IVS_Thanh  start add 2014/08/01 Mashu_再来分析
		String categoryIDList = "";
		String categoryNameList = "";
		paramBean.setCategoryIDList(categoryIDList);
		paramBean.setCategoryNameList(categoryNameList);
		paramBean.setNewVisitCurrent(true);//自店新規
		//IVS_Thanh  end add 2014/07/28 Mashu_再来分析

		//グループ
		paramBean.setShopIDList(this.shopIdString);
		paramBean.setIsGroupSelected(false);

		//対象となる店舗が存在しない場合
		if (paramBean.getShopIDList().equals("")) {
			System.out.println(this.getTitle() + ":" + MessageUtil.getMessage(4001));
			return null;
		}

		// 主担当者
		paramBean.setStaffId(null);
		paramBean.setStaffName("全体");

		// 再来算出期間
		int reappearanceCount = getReappearanceSpan();
		paramBean.setReappearanceCountMessage(this.cmbReappearanceSpan.getSelectedItem().toString());

		// 固定回数
		paramBean.setFixedCount(fixedCount);

		// 人数条件
		String numberCondition = "延べ客数";
		paramBean.setNumberCondition(numberCondition);

		// 技術分類再来
		paramBean.setSameTechnicClass(false);

		// 集計期間を求める
		Calendar cal = Calendar.getInstance();
		try {
			cal.set(Calendar.YEAR, year);
		} catch (Exception e) {
		}

		cal.set(Calendar.MONTH, month - 1);
		cal.set(Calendar.DAY_OF_MONTH, 1);
		java.util.Date targetDate = cal.getTime();

		// ○ヶ月前の月初
		Calendar calculationStart = Calendar.getInstance();
		calculationStart.setTime(targetDate);
		if (reappearanceCount == 45) {
			// 45日再来は2ヶ月前の15日
			calculationStart.add(Calendar.MONTH, -2);
			calculationStart.set(Calendar.DAY_OF_MONTH, 15);
		} else {
			// それ以外は○ヶ月前の1日
			calculationStart.add(Calendar.MONTH, (reappearanceCount * -1));
			calculationStart.set(Calendar.DAY_OF_MONTH, 1);
		}

		// 選んだ月の月末
		Calendar calculationEnd = Calendar.getInstance();
		calculationEnd.set(year, month, 1);// 選択月の翌月にして
		calculationEnd.add(Calendar.DAY_OF_MONTH, -1); // １日戻す

		// 再来対象期間
		// 開始日は集計開始日と同じ
		Calendar targetStart = Calendar.getInstance();
		targetStart.setTime(calculationStart.getTime());

		Calendar targetEnd = Calendar.getInstance();
		targetEnd.setTime(calculationStart.getTime());
		if (reappearanceCount == 45) {
			// 45日再来の終了は、翌月の14日
			targetEnd.add(Calendar.MONTH, 1);
			targetEnd.set(Calendar.DAY_OF_MONTH, 14);
		} else {
			// 終了は開始月の月末
			targetEnd.add(Calendar.MONTH, 1); // 翌月にして
			targetEnd.add(Calendar.DAY_OF_MONTH, -1); // １日戻す
		}

		// 期間設定を締日基準にする
		//		if (reappearanceCount != 45) {
		//			this.resetSpan(targetStart, targetEnd);
		//			this.resetSpan(calculationStart, calculationEnd);
		//			calculationStart.setTime(targetStart.getTime());
		//		}

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		paramBean.setTargetStartDate(sdf.format(targetStart.getTime()));
		paramBean.setTargetEndDate(sdf.format(targetEnd.getTime()));
		paramBean.setTargetStartDateObj(targetStart.getTime());
		paramBean.setTargetEndDateObj(targetEnd.getTime());

		paramBean.setCalculationStartDate(sdf.format(calculationStart.getTime()));
		paramBean.setCalculationEndDate(sdf.format(calculationEnd.getTime()));
		paramBean.setCalculationStartDateObj(calculationStart.getTime());
		paramBean.setCalculationEndDateObj(calculationEnd.getTime());

		//出力処理
		HashMap<Integer, EffectIndicatorAnalysisBean> map;
		try {
			if (rdoShop.isSelected()) {
				map = logic.outStaffReportReappearanceOnePeriodShop(paramBean);
			} else {
				map = logic.outStaffReportReappearanceOnePeriodStaff(this.staffIdList, paramBean);
			}
		} catch (Exception e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			return null;
		}

		return map;
	}

	/**
	 * 次回予約率を取得する。店舗別。
	 */
	private HashMap<Integer, EffectIndicatorAnalysisBean> getNextTimeReserveRateShop(String startDate, String endDate) {
		// 戻り値を初期化
		HashMap<Integer, EffectIndicatorAnalysisBean> map = new HashMap<Integer, EffectIndicatorAnalysisBean>();
		for (String s : this.shopIdString.split(",")) {
			map.put(Integer.parseInt(s), new EffectIndicatorAnalysisBean());
		}

		// 未来の予約がありdata_reservation.next_flag=1の件数
		String sql = "";
		sql += " select shop_id, count(distinct customer_id) as cnt from data_reservation";
		sql += " where delete_date is null";
		sql += " and shop_id in (" + this.shopIdString + ")";
		sql += " and next_flag=1";
		sql += " and insert_date>'" + endDate + " 23:59:59'";
		sql += " and customer_id in (";
		sql += " SELECT distinct customer_id FROM data_sales ds JOIN mst_customer mc using(customer_id)";
		sql += " WHERE EXISTS (SELECT 1 FROM data_sales_detail WHERE shop_id = ds.shop_id AND slip_no = ds.slip_no";
		sql += " AND delete_date IS NULL AND product_division IN (1, 5, 6)) AND ds.delete_date IS NULL AND mc.customer_no <> '0'";
		sql += " AND ds.shop_id IN (" + this.shopIdString + ")";
		sql += " AND ds.sales_date BETWEEN '" + startDate + " 00:00:00' and '" + endDate + " 23:59:59')";
		sql += " group by shop_id";
		System.out.println(sql);

		try {
			// 検索を行う
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				map.get(rs.getInt("shop_id")).setNextTimeReserve(rs.getInt("cnt"));
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		// 来店顧客数
		sql = "";
		sql += " SELECT ds.shop_id, count(distinct customer_id) as cnt FROM data_sales ds JOIN mst_customer mc using(customer_id)";
		sql += " WHERE EXISTS (SELECT 1 FROM data_sales_detail WHERE shop_id = ds.shop_id AND slip_no = ds.slip_no";
		sql += " AND delete_date IS NULL AND product_division IN (1, 5, 6)) AND ds.delete_date IS NULL AND mc.customer_no <> '0'";
		sql += " AND ds.shop_id IN (" + this.shopIdString + ")";
		sql += " AND ds.sales_date BETWEEN '" + startDate + " 00:00:00' and '" + endDate + " 23:59:59'";
		sql += " group by ds.shop_id";
		System.out.println(sql);

		try {
			// 検索を行う
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				map.get(rs.getInt("shop_id")).setComeShopTotal(rs.getInt("cnt"));
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		return map;
	}

	/**
	 * 次回予約率を取得する。担当者別。
	 */
	private HashMap<Integer, EffectIndicatorAnalysisBean> getNextTimeReserveRateStaff(List<Integer> staffIdList, String startDate, String endDate) {
		// 戻り値を初期化
		HashMap<Integer, EffectIndicatorAnalysisBean> map = new HashMap<Integer, EffectIndicatorAnalysisBean>();
		for (int staffId : staffIdList) {
			map.put(staffId, new EffectIndicatorAnalysisBean());
		}

		// 未来の予約がありdata_reservation.next_flag=1の件数
		String sql = "";
		sql += " select staff_id, count(distinct customer_id) as cnt from data_reservation";
		sql += " where delete_date is null";
		sql += " and shop_id in (" + this.shopIdString + ")";
		sql += " and next_flag=1";
		sql += " and insert_date>'" + endDate + " 23:59:59'";
		sql += " and customer_id in (";
		sql += " SELECT distinct customer_id FROM data_sales ds JOIN mst_customer mc using(customer_id)";
		sql += " WHERE EXISTS (SELECT 1 FROM data_sales_detail WHERE shop_id = ds.shop_id AND slip_no = ds.slip_no";
		sql += " AND delete_date IS NULL AND product_division IN (1, 5, 6)) AND ds.delete_date IS NULL AND mc.customer_no <> '0'";
		sql += " AND ds.shop_id IN (" + this.shopIdString + ")";
		sql += " AND ds.sales_date BETWEEN '" + startDate + " 00:00:00' and '" + endDate + " 23:59:59')";
		sql += " group by staff_id";
		System.out.println(sql);

		try {
			// 検索を行う
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				int staffId = rs.getInt("staff_id");
				if (map.containsKey(staffId)) {
					map.get(staffId).setNextTimeReserve(rs.getInt("cnt"));
				}
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		// 来店顧客数
		sql = "";
		sql += " SELECT ds.staff_id, count(distinct customer_id) as cnt FROM data_sales ds JOIN mst_customer mc using(customer_id)";
		sql += " WHERE EXISTS (SELECT 1 FROM data_sales_detail WHERE shop_id = ds.shop_id AND slip_no = ds.slip_no";
		sql += " AND delete_date IS NULL AND product_division IN (1, 5, 6)) AND ds.delete_date IS NULL AND mc.customer_no <> '0'";
		sql += " AND ds.shop_id IN (" + this.shopIdString + ")";
		sql += " AND ds.sales_date BETWEEN '" + startDate + " 00:00:00' and '" + endDate + " 23:59:59'";
		sql += " group by ds.staff_id";
		System.out.println(sql);

		try {
			// 検索を行う
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				int staffId = rs.getInt("staff_id");
				if (map.containsKey(staffId)) {
					map.get(staffId).setComeShopTotal(rs.getInt("cnt"));
				}
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		return map;
	}

	/**
	 * 予約成約率を取得する。店舗別。
	 */
	private HashMap<Integer, EffectIndicatorAnalysisBean> getReserveSuccessRateShop(String startDate, String endDate) {
		// 戻り値を初期化
		HashMap<Integer, EffectIndicatorAnalysisBean> map = new HashMap<Integer, EffectIndicatorAnalysisBean>();
		for (String s : this.shopIdString.split(",")) {
			map.put(Integer.parseInt(s), new EffectIndicatorAnalysisBean());
		}

		// data_reservation.status=3の件数
		String sql = "";
		sql += " select shop_id,count(*) as cnt from data_reservation";
		sql += " where delete_date is null";
		sql += " and shop_id in (" + this.shopIdString + ")";
		sql += " and status=3";
		sql += " and insert_date between '" + startDate + " 00:00:00' and '" + endDate + " 23:59:59'";
		sql += " group by shop_id";
		System.out.println(sql);

		try {
			// 検索を行う
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				map.get(rs.getInt("shop_id")).setReserveSuccess(rs.getInt("cnt"));
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		// 当月の予約件数
		sql = "";
		sql += " select shop_id,count(*) as cnt from data_reservation";
		sql += " where delete_date is null";
		sql += " and shop_id in (" + this.shopIdString + ")";
		sql += " and insert_date between '" + startDate + " 00:00:00' and '" + endDate + " 23:59:59'";
		sql += " group by shop_id";
		System.out.println(sql);

		try {
			// 検索を行う
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				map.get(rs.getInt("shop_id")).setReserveTotal(rs.getInt("cnt"));
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		return map;
	}

	/**
	 * 予約成約率を取得する。担当者別。
	 */
	private HashMap<Integer, EffectIndicatorAnalysisBean> getReserveSuccessRateStaff(List<Integer> staffIdList, String startDate, String endDate) {
		// 戻り値を初期化
		HashMap<Integer, EffectIndicatorAnalysisBean> map = new HashMap<Integer, EffectIndicatorAnalysisBean>();
		for (int staffId : staffIdList) {
			map.put(staffId, new EffectIndicatorAnalysisBean());
		}

		// data_reservation.status=3の件数
		String sql = "";
		sql += " select staff_id,count(*) as cnt from data_reservation";
		sql += " where delete_date is null";
		sql += " and shop_id in (" + this.shopIdString + ")";
		sql += " and status=3";
		sql += " and insert_date between '" + startDate + " 00:00:00' and '" + endDate + " 23:59:59'";
		sql += " group by staff_id";
		System.out.println(sql);

		try {
			// 検索を行う
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				int staffId = rs.getInt("staff_id");
				if (map.containsKey(staffId)) {
					map.get(staffId).setReserveSuccess(rs.getInt("cnt"));
				}
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		// 当月の予約件数
		sql = "";
		sql += " select staff_id,count(*) as cnt from data_reservation";
		sql += " where delete_date is null";
		sql += " and shop_id in (" + this.shopIdString + ")";
		sql += " and insert_date between '" + startDate + " 00:00:00' and '" + endDate + " 23:59:59'";
		sql += " group by staff_id";
		System.out.println(sql);

		try {
			// 検索を行う
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			while (rs.next()) {
				int staffId = rs.getInt("staff_id");
				if (map.containsKey(staffId)) {
					map.get(staffId).setReserveTotal(rs.getInt("cnt"));
				}
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		return map;
	}

	/**
	 * 再来算出期間を求める
	 */
	private int getReappearanceSpan() {
		String textSpan = this.cmbReappearanceSpan.getSelectedItem().toString();

		if ("1ヶ月".equals(textSpan)) {
			return 1;
		} else if ("45日".equals(textSpan)) {
			return 45;
		} else if ("2ヶ月".equals(textSpan)) {
			return 2;
		} else if ("3ヶ月".equals(textSpan)) {
			return 3;
		} else if ("4ヶ月".equals(textSpan)) {
			return 4;
		} else if ("5ヶ月".equals(textSpan)) {
			return 5;
		} else {
			return 6;
		}
	}

	/**
	 * 店販比率,○○獲得率,紹介数,総売上などの項目を取得する。
	 * @return
	 */
	private HashMap<Integer, EffectIndicatorAnalysisBean> getBusinessReportForAll(String startDate, String endDate) {
		if (!SystemInfo.checkAuthorityPassword(210)) {
			return null;
		}

		ReportLogic logic = new ReportLogic();
		ReportParameterBean paramBean = new ReportParameterBean();
		paramBean.setMainReportType(ReportParameterBean.MAIN_REPORT_BUSINESS);

		//割引の区分の設定
		Integer discountType = SystemInfo.getAccountSetting().getDiscountType();
		paramBean.setDiscountType(discountType);

		// 税区分(税込み)
		paramBean.setTaxType(ReportParameterBean.TAX_TYPE_UNIT);

		// 主担当
		paramBean.setStaffType(ReportParameterBean.STAFF_TYPE_MAIN);

		// 自店新規
		paramBean.setNewVisitType(ReportParameterBean.NEW_VISIT_CURRENT);

		//グループ
		paramBean.setShopIDList(this.shopIdString);

		//対象となる店舗が存在しない場合
		if (paramBean.getShopIDList().equals("")) {
			System.out.println(this.getTitle() + ":" + MessageUtil.getMessage(4001));
			return null;
		}

		// 対象期間
		paramBean.setTargetStartDate(startDate);
		paramBean.setTargetEndDate(endDate);

		Calendar cal = Calendar.getInstance();
		cal.set(Integer.parseInt(startDate.substring(0, 4)), Integer.parseInt(startDate.substring(5, 7)) - 1, Integer.parseInt(startDate.substring(8, 10)));
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		paramBean.setTargetStartDateObj(cal.getTime());

		cal.set(Integer.parseInt(endDate.substring(0, 4)), Integer.parseInt(endDate.substring(5, 7)) - 1, Integer.parseInt(endDate.substring(8, 10)));
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 59);
		cal.set(Calendar.SECOND, 59);
		paramBean.setTargetEndDateObj(cal.getTime());

		//業務報告
		paramBean.setSubReportType(ReportParameterBean.SUB_REPORT_BUSINESS_ALL);

		HashMap<Integer, EffectIndicatorAnalysisBean> map;
		try {
			if (rdoShop.isSelected()) {
				map = logic.viewBusinessReportForAllShop(paramBean);
			} else {
				map = logic.viewBusinessReportForAllStaff(this.staffIdList, paramBean);
			}
		} catch (Exception e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
			return null;
		}

		return map;
	}

	/**
	 * スタッフ1人当たり売上を取得。
	 */
	private HashMap<Integer, EffectIndicatorAnalysisBean> getSalesOneStaff(Date startDate, Date endDate) {
		ReportParameterBean paramBean = new ReportParameterBean();

		paramBean.setShopIDList(this.shopIdString);

		//対象となる店舗が存在しない場合
		if (paramBean.getShopIDList().equals("")) {
			System.out.println(this.getTitle() + ":" + MessageUtil.getMessage(4001));
			return null;
		}

		// 再来算出期間
		int reappearanceCount = getReappearanceSpan();
		paramBean.setReappearanceCountMessage(this.cmbReappearanceSpan.getSelectedItem().toString());

		// 固定回数
		int fixedCount = 3;
		paramBean.setFixedCount(fixedCount);

		//税区分
		paramBean.setTaxType(ReportParameterBean.TAX_TYPE_UNIT); // 税区分(税込み)

		// 集計期間を求める
		boolean isEndOfMonth = false;
		/*********************************/
		// ○ヶ月前の開始日
		/*********************************/
		Calendar calculationStart = Calendar.getInstance();
		calculationStart.setTime(startDate);
		isEndOfMonth = calculationStart.getActualMaximum(Calendar.DAY_OF_MONTH) == calculationStart.get(Calendar.DAY_OF_MONTH);
		if (reappearanceCount == 45) {
			// 45日再来
			calculationStart.add(Calendar.MONTH, -2);
			// 月末の場合
			if (isEndOfMonth) {
				calculationStart.set(Calendar.DAY_OF_MONTH, 1);
				calculationStart.add(Calendar.MONTH, 1);
				calculationStart.add(Calendar.DAY_OF_MONTH, -1);
			}
			calculationStart.add(Calendar.DAY_OF_MONTH, 14);
		} else {
			// それ以外
			calculationStart.add(Calendar.MONTH, (reappearanceCount * -1));
			// 月末の場合
			if (isEndOfMonth) {
				calculationStart.set(Calendar.DAY_OF_MONTH, 1);
				calculationStart.add(Calendar.MONTH, 1);
				calculationStart.add(Calendar.DAY_OF_MONTH, -1);
			}
		}
		/*********************************/
		// ○ヶ月前の終了日
		/*********************************/
		Calendar calculationEnd = Calendar.getInstance();
		calculationEnd.setTime(endDate);
		isEndOfMonth = calculationEnd.getActualMaximum(Calendar.DAY_OF_MONTH) == calculationEnd.get(Calendar.DAY_OF_MONTH);
		if (reappearanceCount == 45) {
			// 45日再来
			calculationEnd.add(Calendar.MONTH, -2);
			// 月末の場合
			if (isEndOfMonth) {
				calculationEnd.set(Calendar.DAY_OF_MONTH, 1);
				calculationEnd.add(Calendar.MONTH, 1);
				calculationEnd.add(Calendar.DAY_OF_MONTH, -1);
			}
			calculationEnd.add(Calendar.DAY_OF_MONTH, 14);
		} else {
			// それ以外
			calculationEnd.add(Calendar.MONTH, (reappearanceCount * -1));
			// 月末の場合
			if (isEndOfMonth) {
				calculationEnd.set(Calendar.DAY_OF_MONTH, 1);
				calculationEnd.add(Calendar.MONTH, 1);
				calculationEnd.add(Calendar.DAY_OF_MONTH, -1);
			}
		}

		SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
		paramBean.setTargetStartDate(sdf.format(startDate));
		paramBean.setTargetEndDate(sdf.format(endDate));
		paramBean.setTargetStartDateObj(startDate);
		paramBean.setTargetEndDateObj(endDate);

		paramBean.setCalculationStartDate(sdf.format(calculationStart.getTime()));
		paramBean.setCalculationEndDate(sdf.format(calculationEnd.getTime()));
		paramBean.setCalculationStartDateObj(calculationStart.getTime());
		paramBean.setCalculationEndDateObj(calculationEnd.getTime());

		// 戻り値を初期化
		HashMap<Integer, EffectIndicatorAnalysisBean> map = new HashMap<Integer, EffectIndicatorAnalysisBean>();
		for (String s : this.shopIdString.split(",")) {
			map.put(Integer.parseInt(s), new EffectIndicatorAnalysisBean());
		}

		ResultSetWrapper rs;
		// 営業日数（売上なしのレジ締め日数も含める）
		try {
			StringBuilder sql = new StringBuilder(1000);
			sql.append(" select");
			sql.append(" shop_id,");
			sql.append(" count(distinct date_trunc('day', sales_date)) as TotalDays");
			sql.append(" from");
			sql.append(" (");
			sql.append(" select");
			sql.append("     a.shop_id,sales_date");
			sql.append(" from");
			sql.append("     view_data_sales_detail_valid a");
			sql.append("         join mst_customer b using(customer_id)");
			sql.append(" where");
			sql.append("         a.shop_id in (" + paramBean.getShopIDList() + ")");
			sql.append("     and a.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
			sql.append(" union all");
			sql.append(" select");
			sql.append("     dr.shop_id,manage_date");
			sql.append(" from");
			sql.append("     data_register dr");
			sql.append(" where");
			sql.append("         delete_date is null");
			sql.append("     and shop_id in (" + paramBean.getShopIDList() + ")");
			sql.append("     and manage_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
			sql.append("     and not exists");
			sql.append("         (");
			sql.append("             select 1");
			sql.append("             from");
			sql.append("                 data_sales");
			sql.append("             where");
			sql.append("                     delete_date is null");
			sql.append("                 and shop_id = dr.shop_id");
			sql.append("                 and sales_date = dr.manage_date");
			sql.append("         )");
			sql.append(" ) t");
			sql.append(" group by shop_id");
			System.out.println("営業日数:" + sql);

			rs = SystemInfo.getConnection().executeQuery(sql.toString());
			if (rs.next()) {
				map.get(rs.getInt("shop_id")).setWorkDayNum(rs.getInt("TotalDays"));
			}

			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		// メインSQL
		try {
			// スタッフ数取得SQL
			StringBuilder tmpSql = new StringBuilder(1000);
			tmpSql.append(" select");
			tmpSql.append(" coalesce(sum(staff_count), 0)");
			tmpSql.append(" from");
			tmpSql.append(" data_register dr");
			tmpSql.append(" where");
			tmpSql.append(" dr.delete_date is null");
			tmpSql.append(" and dr.shop_id=a.shop_id");
			tmpSql.append(" and dr.manage_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
			StringBuilder sql = new StringBuilder(1000);
			sql.append(" select");
			sql.append(" a.shop_id");
			sql.append(" ,coalesce(sum(case when product_division = 1 then discount_detail_value_in_tax else 0 end), 0) as TechSales");
			sql.append(" ,(" + tmpSql.toString() + ") as TotalStaffCount");
			sql.append(" from");
			sql.append(" view_data_sales_detail_valid a");
			sql.append(" join mst_customer b using(customer_id)");
			sql.append(" where");
			sql.append(" a.shop_id in (" + paramBean.getShopIDList() + ")");
			sql.append(" and a.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
			sql.append(" group by a.shop_id");
			System.out.println("スタッフ1人当たり売上:" + sql);

			rs = SystemInfo.getConnection().executeQuery(sql.toString());
			while (rs.next()) {
				// 技術売上
				map.get(rs.getInt("shop_id")).setTechnicTotal(rs.getInt("TechSales"));
				// スタッフ数
				//int workDayNum = map.get(rs.getInt("shop_id")).getWorkDayNum();
				//map.get(rs.getInt("shop_id")).setStaffNum(workDayNum > 0 ? rs.getDouble("TotalStaffCount") / workDayNum : 0);
				System.out.println("shopStaffCount:" +rs.getInt("shop_id") + "=>" +staffCountArray[rs.getInt("shop_id")]);
				map.get(rs.getInt("shop_id")).setStaffNum(staffCountArray[rs.getInt("shop_id")] > 0 ? staffCountArray[rs.getInt("shop_id")] : 0);
			}
			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		return map;
	}

	/**
	 * 明細テーブルのヘッダデータを取得。
	 * @return
	 */
	private List<String> getDetailHeaderList() {
		List<String> list = new ArrayList<String>();

		if (rdoShop.isSelected()) {
			list.add("店舗名");
		} else {
			list.add("担当者名");
		}

		int cnt = 0;
		if (this.chkNewComeRate.isSelected() && this.rdoMonth.isSelected()) {
			cnt++;
		}
		if (this.chkExistComeRate.isSelected() && this.rdoMonth.isSelected()) {
			cnt++;
		}
		if (this.chkNextTimeReserveRate.isSelected()) {
			cnt++;
		}
		if (this.chkReserveSuccessRate.isSelected()) {
			cnt++;
		}
		if (this.chkShopSaleRate.isSelected()) {
			cnt++;
		}
		if (this.chkIntroductionNum.isSelected()) {
			cnt++;
		}
		if (this.chkOneStaffSales.isSelected() && rdoShop.isSelected()) {
			cnt++;
		}
		if (this.chkTotalSales.isSelected()) {
			cnt++;
		}
		if (this.chkTechSales.isSelected()) {
			cnt++;
		}
		if (this.chkItemSales.isSelected()) {
			cnt++;
		}
		if (this.chkTotalCustNum.isSelected()) {
			cnt++;
		}
		if (this.chkTechCustNum.isSelected()) {
			cnt++;
		}
		if (this.chkAssignCustNum.isSelected()) {
			cnt++;
		}
		if (this.chkNewCustNum.isSelected()) {
			cnt++;
		}
		if (this.chkShopSaleCustNum.isSelected()) {
			cnt++;
		}
		for (int i = 0; i < techClassArray.length; i++) {
			if (techClassArray[i].isSelected()) {
				cnt++;
			}
		}

		for (int i = 0; i < cnt; i++) {
			if (this.rdoMonth.isSelected()) {
				list.add("当月");
			} else {
				list.add("対象期間");
			}
			list.add("前月比");
			list.add("前年比");
			if (this.rdoMonth.isSelected()) {
				list.add("目標達成率");
			}
		}

		return list;
	}
	
	/**
	 * 人数指定Tableを初期化
	 */
	private void initShopStaffTbl() {

		SwingUtil.clearTable(shopStaffTbl);
		DefaultTableModel model = (DefaultTableModel) shopStaffTbl.getModel();
		model.addRow(new Object[] { "店舗", "人数" });

		SelectTableCellRenderer cell1Render = new SelectTableCellRenderer();
		cell1Render.setHorizontalAlignment(SwingConstants.CENTER); //センタリング


		shopStaffTbl.setSelectionBackground(new java.awt.Color(220, 220, 220));
		shopStaffTbl.setSelectionForeground(new java.awt.Color(0, 0, 0));
		
		String staffCountString = PropertiesUtil.readValue("EffectIndicatorAnalysisPanel.properties", "staffCount");
		String[] deaufltStaffCountArray = new String[10000];
		for (int i = 0; i < shop.getItemCount(); i++) {
			MstShop mstShop = (MstShop) shop.getItemAt(i);
			deaufltStaffCountArray[mstShop.getShopID()] = "0.0";
		}
		if (!staffCountString.equals("")) {
			String[] shopCorrespondStaffArray = staffCountString.split("_");
			for(String shopCorrespondStaff : shopCorrespondStaffArray) {
				String[] tmpSplit =  shopCorrespondStaff.split(":");
				deaufltStaffCountArray[Integer.parseInt(tmpSplit[0])] = tmpSplit[1];
			}
		}
		this.shopStaffArray = null;
		this.shopStaffArray = new JTextField[shop.getItemCount()];
		for (int i = 0; i < shop.getItemCount(); i++) {
			final int index = i;
			MstShop mstShop = (MstShop) shop.getItemAt(i);
			JTextField textField = new javax.swing.JTextField();
			textField.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
			textField.setText(deaufltStaffCountArray[mstShop.getShopID()]);
			((PlainDocument)textField.getDocument()).setDocumentFilter(new CustomFilter(5, CustomFilter.NUMERIC));
			textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStaffCountFocusLost(evt, index);
            }
        });
			shopStaffArray[i] = textField;
			model.addRow(new Object[] { mstShop.getShopName(), shopStaffArray[i]});
		}
		
	}

	/**
	 * 技術分類Tableを初期化
	 */
	private void initTblTechClass() {
		boolean allSelected = true;
		
		String TechClassString = PropertiesUtil.readValue("EffectIndicatorAnalysisPanel.properties", "TechClass");
		
		StringBuilder sql = new StringBuilder(1000);

		sql.append(" select");
		sql.append(" mtc.technic_class_id,mtc.technic_class_name");
		sql.append(" from mst_technic_class mtc");
		sql.append(" where mtc.delete_date IS NULL");
		sql.append(" and mtc.prepaid = 0");
		sql.append(" and EXISTS (");
		sql.append(" select 1 from mst_use_product mup INNER JOIN mst_technic mt on mup.product_id=mt.technic_id");
		sql.append(" where mup.shop_id in (" + this.shopIdString + ") and mup.product_division=1 and mt.technic_class_id=mtc.technic_class_id)");
		sql.append(" order by mtc.display_seq");
		System.out.println(sql);

		try {
			// 検索を行う
			ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(sql.toString());

			rs.last();
			int recCnt = rs.getRow();
			rs.beforeFirst();

			this.techClassIdArray = null;
			this.techClassNameArray = null;
			this.techClassArray = null;
			this.techClassIdArray = new int[recCnt];
			this.techClassNameArray = new String[recCnt];
			this.techClassArray = new JCheckBox[recCnt];

			int i = 0;
			while (rs.next()) {
				int techClassId = rs.getInt("technic_class_id");
				String techClassName = rs.getString("technic_class_name");

				JCheckBox checkbox = new javax.swing.JCheckBox();
				checkbox.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
				checkbox.setMargin(new java.awt.Insets(0, 0, 0, 0));
				checkbox.setOpaque(false);
				if (TechClassString.indexOf("," + Integer.toString(techClassId) + ",") >= 0){
					checkbox.setSelected(true);
				} else {
					checkbox.setSelected(false);
					allSelected = false;
				}
				

				techClassIdArray[i] = techClassId;
				techClassNameArray[i] = techClassName;
				techClassArray[i] = checkbox;

				i++;
			}
			if (i == 0) {
				allSelected = false;
			}
			rs.close();
		} catch (SQLException e) {
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}

		// 先に明細をクリア
		SwingUtil.clearTable(tblTechClass);

		tblTechClass.getColumnModel().getColumn(0).setPreferredWidth(122);
		tblTechClass.getColumnModel().getColumn(1).setPreferredWidth(7);

		DefaultTableModel model = (DefaultTableModel) tblTechClass.getModel();

		// 出力項目checkbox
		chkOutputItems2 = new javax.swing.JCheckBox();
		chkOutputItems2.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 5, 3, 5));
		chkOutputItems2.setMargin(new java.awt.Insets(0, 0, 0, 0));
		chkOutputItems2.setOpaque(false);
		if (allSelected) {
			chkOutputItems2.setSelected(true);
		} else {
			chkOutputItems2.setSelected(false);
		}
		
		model.addRow(new Object[] { "出力項目", chkOutputItems2 });

		for (int i = 0; i < techClassNameArray.length; i++) {
			model.addRow(new Object[] { techClassNameArray[i], techClassArray[i] });
		}

		SelectTableCellRenderer cell1Render = new SelectTableCellRenderer();
		cell1Render.setHorizontalAlignment(SwingConstants.CENTER); //センタリング
		tblTechClass.getColumnModel().getColumn(1).setCellRenderer(cell1Render);

		tblTechClass.setSelectionBackground(new java.awt.Color(220, 220, 220));
		tblTechClass.setSelectionForeground(new java.awt.Color(0, 0, 0));

		chkOutputItems2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (chkOutputItems2.isSelected()) {
					for (JCheckBox c : techClassArray) {
						c.setSelected(true);
					}
				} else {
					for (JCheckBox c : techClassArray) {
						c.setSelected(false);
					}
				}
				tblTechClass.repaint();
			}
		});
	}

	/**
	 * 第一行は色をつける
	 * @author katsu
	 *
	 */
	class RowRenderer extends DefaultTableCellRenderer {
		public Component getTableCellRendererComponent(JTable t, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
			Component comp = super.getTableCellRendererComponent(t, value, isSelected, hasFocus, row, column);
			if (row == 0) {
				comp.setBackground(new java.awt.Color(220, 220, 220));
			} else {
				comp.setBackground(Color.white);
			}
			return comp;
		}
	}
}