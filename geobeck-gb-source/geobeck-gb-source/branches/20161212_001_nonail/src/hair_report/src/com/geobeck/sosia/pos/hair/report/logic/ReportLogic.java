/*
 * ReportLogic.java
 *
 * Created on 2006/05/18, 21:54
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */
package com.geobeck.sosia.pos.hair.report.logic;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;

import javax.swing.JOptionPane;

import jxl.CellView;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRLoader;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFPrintSetup;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import com.geobeck.sosia.pos.hair.report.beans.BusinessConsumptionReportBean;
import com.geobeck.sosia.pos.hair.report.beans.BusinessConsumptionReportCourseBean;
import com.geobeck.sosia.pos.hair.report.beans.BusinessCourseReportBean;
import com.geobeck.sosia.pos.hair.report.beans.BusinessCourseReportCourseBean;
import com.geobeck.sosia.pos.hair.report.beans.StaffCourseConsumptionBean;
import com.geobeck.sosia.pos.hair.report.beans.StaffCourseConsumptionResultBean;
import com.geobeck.sosia.pos.hair.report.beans.StaffCourseContractBean;
import com.geobeck.sosia.pos.hair.report.beans.StaffCourseContractResultBean;
import com.geobeck.sosia.pos.hair.report.util.JExcelApi;
import com.geobeck.sosia.pos.hair.report.util.JPOIApi;
import com.geobeck.sosia.pos.hair.report.util.JPOIApiSaleTransittion;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.company.MstShopSetting;
import com.geobeck.sosia.pos.master.company.MstStaff;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.report.bean.BusinessReportBean;
import com.geobeck.sosia.pos.report.bean.BusinessSubReportBean;
import com.geobeck.sosia.pos.report.bean.EffectIndicatorAnalysisBean;
import com.geobeck.sosia.pos.report.bean.ReappearanceReportBean;
import com.geobeck.sosia.pos.report.bean.ReportParameterBean;
import com.geobeck.sosia.pos.report.bean.SalesReportBean;
import com.geobeck.sosia.pos.report.bean.StaffReportBean;
import com.geobeck.sosia.pos.report.bean.StaffReportBeanProportionally;
import com.geobeck.sosia.pos.report.util.ReportManager;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.MessageDialog;
import com.geobeck.util.SQLUtil;
import com.lowagie.tools.ConcatPdf;
import java.math.RoundingMode;
import java.sql.SQLException;
import java.util.Date;
import java.util.GregorianCalendar;

class HashMapArrayList extends ArrayList<HashMap> {
};

/**
 * レポートロジック
 *
 * @author k.anayama
 */
public class ReportLogic {

    public static int REPORT_TYPE_PDF = 0;
    public static int REPORT_TYPE_EXCEL = 1;
    public static int STAFF_REPORT_COLUMN_COUNT = 6;
    public static String REPORT_RESOURCE_PATH = "/reports/";
    public static String REPORT_EXPORT_PATH = "./";
    public static String REPORT_XML_FILE_EXT = ".jasper";
    public static String REPORT_FILE_STAFF_TECHNICAL = "StaffReportTechnic";
    public static String REPORT_FILE_STAFF_TECHNICAL_CONTINUE = "StaffReportTechnicContinue";
    public static String REPORT_FILE_STAFF_GOODS = "StaffReportItem";
    public static String REPORT_FILE_STAFF_GOODS_CONTINUE = "StaffReportItemContinue";
    public static String REPORT_FILE_STAFF_CUSTOMER_SALES = "StaffReportCustomerSales";
    public static String REPORT_FILE_OCCUPATION_RATIO = "StaffReportOccupationRatio";
    public static String REPORT_FILE_PROPORTIONALLY_DISTRIBUTION = "StaffReportPropDistribution";
    public static int ORDER_DISPLAY_KINGAKU = 0;
    public static int ORDER_DISPLAY_POINT = 1;
    //Excel１シート当りの按分数
    public static int PROPORTIONALLY_COUNT_OF_ONE_EXCEL_SHEET = 15;
    //按分成績のソート用
    private int proportionallyOrderDisplay;

    /**
     * コンストラクタ
     */
    public ReportLogic() {
    }

    /**
     * 按分成績のソート用クラス
     */
    public class StaffReportBeanProportionallyComparator implements Comparator {

        public int compare(Object object1, Object object2) {
            StaffReportBeanProportionally srbp1 = (StaffReportBeanProportionally) object1;
            StaffReportBeanProportionally srbp2 = (StaffReportBeanProportionally) object2;

            //戻り値
            int ret = 0;
            if (proportionallyOrderDisplay == ORDER_DISPLAY_KINGAKU) {
                //金額の降順で並び替え
                Long kingaku1 = new Long(srbp1.getTotalKingaku());
                Long kingaku2 = new Long(srbp2.getTotalKingaku());
                ret = -(kingaku1.compareTo(kingaku2));
            } else if (proportionallyOrderDisplay == ORDER_DISPLAY_POINT) {
                //ポイントの降順で並び替え
                Double point1 = new Double(srbp1.getTotalPoint());
                Double point2 = new Double(srbp2.getTotalPoint());
                ret = -(point1.compareTo(point2));
            }
            return ret;
        }
    }

    /**
     * 動向分析取得
     *
     * @param paramBean レポートパラメータBean
     * @param customerType 対象顧客
     * @param comingCycle 来店周期
     * @param customerCategory 顧客種別(すべてとか新規とか)
     */
    public ArrayList<HashMap> searchReappearancePrediction(ReportParameterBean paramBean, int customerType, int comingCycle, int customerCategory) {

        // 前回来店日
        StringBuilder lastVisitDateSql = new StringBuilder(1000);
        lastVisitDateSql.append(" (");
        lastVisitDateSql.append("     select");
        lastVisitDateSql.append("         max(sales_date)");
        lastVisitDateSql.append("     from");
        lastVisitDateSql.append("         data_sales");
        lastVisitDateSql.append("     where");
        lastVisitDateSql.append("             customer_id = ds.customer_id");
        lastVisitDateSql.append("         and sales_date < ds.sales_date");
        lastVisitDateSql.append("         and shop_id = ds.shop_id");
        lastVisitDateSql.append("         and delete_date is null");
        lastVisitDateSql.append(" )");

        // 次回来店日
        StringBuilder nextVisitDateSql = new StringBuilder(1000);
        nextVisitDateSql.append(" (");
        nextVisitDateSql.append("     select");
        nextVisitDateSql.append("         min(sales_date)");
        nextVisitDateSql.append("     from");
        nextVisitDateSql.append("         data_sales");
        nextVisitDateSql.append("     where");
        nextVisitDateSql.append("             customer_id = ds.customer_id");
        nextVisitDateSql.append("         and sales_date > ds.sales_date");
        nextVisitDateSql.append("         and shop_id = ds.shop_id");
        nextVisitDateSql.append("         and delete_date is null");
        nextVisitDateSql.append(" )");

        // 来店周期
        StringBuilder comingCycleSql = new StringBuilder(1000);
        comingCycleSql.append(" (");
        comingCycleSql.append("     select distinct");
        comingCycleSql.append("         date_part('day', ds.sales_date - " + lastVisitDateSql.toString() + " )");
        comingCycleSql.append("     from");
        comingCycleSql.append("         data_sales");
        comingCycleSql.append("     where");
        comingCycleSql.append("             customer_id = ds.customer_id");
        comingCycleSql.append("	        and delete_date is null");
        comingCycleSql.append(" )");

        String nextVisitDateComingCycle = "";
        if (comingCycle == 0) {
            // 賞美期限は次回来店予定日をそのまま
            nextVisitDateComingCycle = " ds.next_visit_date ";

        } else {
            // 来店周期は前回来店日に来店周期を足す
            nextVisitDateComingCycle = " ds.sales_date + cast(" + comingCycleSql.toString() + " || ' days' as interval) ";
        }

        // 来店予定者
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      ds.sales_date as last_visit_date");
        sql.append("     ,(select staff_name1 || ' ' || staff_name2 from mst_staff where staff_id = ds.staff_id) as staff_name");
        sql.append("     ,mc.customer_no");
        sql.append("     ,mc.customer_id");
        sql.append("     ,mc.customer_name1");
        sql.append("     ,mc.customer_name2");
        sql.append("     ,mc.postal_code");
        sql.append("     ,mc.address1");
        sql.append("     ,mc.address2");
        sql.append("     ,mc.address3");
        sql.append("     ,mc.address4");
        sql.append("     ,mc.pc_mail_address");
        sql.append("     ,mc.cellular_mail_address");
        sql.append("     ,coalesce(mc.before_visit_num, 0) as before_visit_num");
        sql.append("     ,ds.designated_flag");
        sql.append("     ," + (customerType == 2 ? nextVisitDateSql.toString() : nextVisitDateComingCycle) + " as next_visit_date");

        if (comingCycle == 0) {

            // 賞美期限
            sql.append("     ,(");
            sql.append("         select");
            sql.append("             min( (select praise_time_limit from mst_technic where technic_id = a.product_id) )");
            sql.append("         from");
            sql.append("             view_data_sales_detail_valid a");
            sql.append("         where");
            sql.append("                 product_division in (1)");
            sql.append("             and shop_id = ds.shop_id");
            sql.append("             and slip_no = ds.slip_no");
            sql.append("      ) as coming_cycle");

        } else {

            // 来店周期
            sql.append("     ,date_part('day', ds.sales_date - " + lastVisitDateSql.toString() + " ) as coming_cycle");
        }

        sql.append("     ," + (customerType == 2 ? "date_part('day', " + nextVisitDateSql.toString() + " - ds.sales_date)"
                : "date_part('day', current_timestamp - ds.sales_date)") + " as progress_day");

        sql.append("     ," + (customerType == 2 ? "get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date + '1 day')"
                : "get_visit_count(ds.customer_id, ds.shop_id, " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + ")") + " as visit_count");

        sql.append("     ,(");
        sql.append("         select");
        sql.append("             sum(account_setting_value)");
        sql.append("         from");
        sql.append("             view_data_sales_detail_valid");
        sql.append("         where");
        sql.append("                 product_division in (1)");
        sql.append("             and shop_id = ds.shop_id");
        sql.append("             and slip_no = ds.slip_no");
        sql.append("      ) as last_sales_value");
        sql.append("     ," + lastVisitDateSql.toString() + " as reappearance_date");
        sql.append(" from");
        sql.append("     (");

        if (customerType == 0) {
            // 来店予定者
            sql.append("         select");
            sql.append("             a.*");
            sql.append("         from");
            //IVS_LVTu start edit 2015/09/14 Bug #42570
            //sql.append("             view_data_sales_valid a");
            sql.append("             data_sales a");
            sql.append("                 join");
            sql.append("                 (");
            sql.append("                     select");
            sql.append("                          a.shop_id");
            sql.append("                         ,a.sales_date");
            sql.append("                         ,a.customer_id");
            sql.append("                         ,max(a.slip_no) as slip_no");
            sql.append("                     from");
            //sql.append("                         view_data_sales_valid a");
            sql.append("                         data_sales a");
            sql.append("                             join");
            sql.append("                             (");
            sql.append("                                 select");
            sql.append("                                      customer_id");
            sql.append("                                     ,max(sales_date) as sales_date");
            sql.append("                                 from");
            //sql.append("                                     view_data_sales_valid");
            sql.append("                                     data_sales ds1 ");
            sql.append("                                 where");
            sql.append("                                     /* 店舗ID */");
            sql.append("                                         ds1.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                                     and ds1.sales_date is not null");
            sql.append("                                     and ds1.delete_date is null ");
            sql.append("                                 group by");
            sql.append("                                     customer_id");
            sql.append("                             ) b");
            sql.append("                             using(customer_id, sales_date)");
            sql.append("                             where a.delete_date is null ");
            sql.append("                     group by");
            sql.append("                          shop_id");
            sql.append("                         ,sales_date");
            sql.append("                         ,customer_id");
            sql.append("                 ) b");
            sql.append("                 using(shop_id, customer_id, sales_date, slip_no)");
            sql.append("                 where a.delete_date is null ");
        } else {
            sql.append(" select");
            sql.append("     *");
            sql.append(" from");
            //sql.append("     view_data_sales_valid");
            sql.append("     data_sales ds1");
            sql.append(" where");
            sql.append("         shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("     and sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
            sql.append("     and ds1.delete_date is null ");
            sql.append("     and customer_id in");
            sql.append("         (");
            sql.append("             select");
            sql.append("                 customer_id");
            sql.append("             from");
            //sql.append("                 view_data_sales_valid a");
            sql.append("                 data_sales a");
            sql.append("             where");
            sql.append("                     sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and current_timestamp");
            sql.append("                 and shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                 and exists");
            sql.append("                     (");
            sql.append("                         select 1");
            sql.append("                         from");
            //sql.append("                             view_data_sales_valid");
            sql.append("                             data_sales");
            sql.append("                         where");
            sql.append("                                 sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
            sql.append("                             and shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                             and customer_id = a.customer_id");
            sql.append("                             and delete_date is null ");
            sql.append("                     )");
            sql.append("                  and a.delete_date is null ");
            //IVS_LVTu end edit 2015/09/14 Bug #42570
            sql.append("             group by");
            sql.append("                 customer_id");

            if (customerType == 2) {
                // 再来店者
                sql.append(" having");
                sql.append("     count(*) > 1");
            }

            sql.append("         )");
        }
        sql.append("     ) as ds");
        sql.append("     join mst_customer as mc");
        sql.append("         using (customer_id)");
        sql.append(" where");
        sql.append("     true");

        // 再来店者の場合
        if (customerType == 2) {
            sql.append(" and exists");
            sql.append("     (");
            sql.append("         select");
            sql.append("             1");
            sql.append("         from");
            sql.append("             (");
            sql.append("                 select");
            sql.append("                      ds.sales_date");
            sql.append("                     ,ds.customer_id");
            sql.append("                     ,ds.insert_date");
            sql.append("                 from");
            sql.append("                     data_sales ds");
            sql.append("                         join mst_customer mc");
            sql.append("                         using(customer_id)");
            sql.append("                 where");
            sql.append("                         exists");
            sql.append("                         (");
            sql.append("                             select");
            sql.append("                                 1");
            sql.append("                             from");
            sql.append("                                 data_sales_detail");
            sql.append("                             where");
            sql.append("                                     shop_id = ds.shop_id");
            sql.append("                                 and slip_no = ds.slip_no");
            sql.append("                                 and delete_date is null");
            sql.append("                                 and product_division in (1)");
            sql.append("                         )");
            sql.append("                     and ds.delete_date is null");
            sql.append("                     and mc.customer_no <> '0'");
            sql.append("                     and ds.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getCalculationStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getCalculationEndDateObj()));
            sql.append("             ) w");
            sql.append("         where");
            sql.append("                 w.customer_id = ds.customer_id");
            sql.append("             and w.sales_date > ds.sales_date");
            sql.append("     )");
            sql.append(" and exists");
            sql.append("     (");
            sql.append("         select 1");
            sql.append("         from");
            sql.append("             data_sales_detail");
            sql.append("         where");
            sql.append("                 shop_id = ds.shop_id");
            sql.append("             and slip_no = ds.slip_no");
            sql.append("             and delete_date is null");
            sql.append("             and product_division in (1)");
            sql.append("     )");
        }

        if (customerType == 1) {
            // 失客候補者の場合、期間内の最終来店日以降に来店していないデータを抽出
            sql.append(" and " + nextVisitDateSql.toString() + " is null");
            sql.append(" and mc.customer_no <> '0'");
        } else if (customerType == 2) {
            // 再来店者の場合、期間内の最終来店日以降にも来店しているデータを抽出
            sql.append(" and " + nextVisitDateSql.toString() + " is not null");
        }

        if (customerType == 0) {
            sql.append(" and " + nextVisitDateComingCycle + " between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
            sql.append(" and " + nextVisitDateComingCycle + " >= current_timestamp");
            sql.append(" and mc.customer_no <> '0'");
        }

        if (paramBean.getStaffId() != null) {
            sql.append(" and ds.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
        }

        sql.append(" order by");
        sql.append("     last_visit_date");
        

        System.out.println(sql.toString() + "\n\n");

        ArrayList<HashMap> resultList = new ArrayList<HashMap>();

        ConnectionWrapper cw = SystemInfo.getConnection();

        try {
            ResultSetWrapper rs = cw.executeQuery(sql.toString());

            while (rs.next()) {
                HashMap row = new HashMap();

                java.util.Date lastVisitDate = rs.getDate("last_visit_date");

                //java.util.GregorianCalendar cal = null;

                /* SQLでやるように変更した
                 // 来店周期のときは来店日に周期を足す
                 if(comingCycle == 1){
                 cal = new java.util.GregorianCalendar();
                 cal.setTime(lastVisitDate);
                 cal.add(Calendar.DAY_OF_MONTH, (int)rs.getDouble("coming_cycle"));
                 }
                 */

                // 表示条件
                switch (customerCategory) {
                    case 1:
                        // 指名客
                        if (!rs.getBoolean("designated_flag")) {
                            continue;
                        }
                        break;
                    case 2:
                        // フリー客
                        if (rs.getBoolean("designated_flag")) {
                            continue;
                        }
                        break;
                    case 3:
                        // 新規客
                        if (rs.getDate("reappearance_date") != null || rs.getInt("before_visit_num") > 0) {
                            continue;
                        }
                        break;
                }

                MstCustomer mc = new MstCustomer();
                mc.setCustomerID(rs.getInt("customer_id"));
                mc.setCustomerNo(rs.getString("customer_no"));
                mc.setCustomerName(new String[]{rs.getString("customer_name1"), rs.getString("customer_name2")});
                mc.setPCMailAddress(rs.getString("pc_mail_address"));
                mc.setCellularMailAddress(rs.getString("cellular_mail_address"));
                mc.setPostalCode(rs.getString("postal_code"));
                mc.setAddress(new String[]{rs.getString("address1"), rs.getString("address2"), rs.getString("address3"), rs.getString("address4")});

                row.put("mc", mc);
                row.put("last_visit_date", lastVisitDate);
                row.put("customer_no", rs.getString("customer_no"));
                row.put("customer_id", rs.getInt("customer_id"));
                row.put("customer_name", rs.getString("customer_name1") + " " + rs.getString("customer_name2"));
                row.put("staff_name", rs.getString("staff_name"));
                row.put("is_charge", rs.getBoolean("designated_flag"));
                //row.put("next_visit_date", (comingCycle == 0 ? rs.getDate("next_visit_date") : new java.sql.Date(cal.getTime().getTime())));
                row.put("next_visit_date", rs.getDate("next_visit_date"));
                row.put("coming_cycle", (int) rs.getDouble("coming_cycle"));
                row.put("progress_day", Math.abs(rs.getInt("progress_day")));
                row.put("visit_count", rs.getLong("visit_count"));
                row.put("last_sales_value", rs.getLong("last_sales_value"));
                row.put("last_sales", "");
                row.put("mailaddress_enable", ((rs.getString("pc_mail_address") != null && !rs.getString("pc_mail_address").equals(""))
                        || (rs.getString("cellular_mail_address") != null && !rs.getString("cellular_mail_address").equals(""))));
                row.put("reappearance_date", rs.getDate("reappearance_date"));
                resultList.add(row);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("SQL = \r\n" + sql);
        }
        return resultList;
    }

    /**
     * 業務報告出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean viewBusinessReportForAll(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        // 店舗情報取得
        HashMap<String, String> shopInfo = this.getShopInfo(paramBean.getShopIDList());
        Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
        paramBean.setTaxRate(tax_rate);

        HashMap<String, Object> paramMap = new HashMap<String, Object>();

        if (!this.setBusinessReportCommonData(cw, paramBean, paramMap)) {
            return false;
        }

        if (SystemInfo.getDatabase().startsWith("pos_hair_lim")) {
            if (!this.setBusinessReportCommonData_LIM(cw, paramBean, paramMap)) {
                return false;
            }
        }

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            paramMap.put("TaxType", "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            paramMap.put("TaxType", "税込");
        }

        if (paramBean.getNewVisitType() == ReportParameterBean.NEW_VISIT_CURRENT) {
            paramMap.put("NewVisitType", "自店新規");
        } else {
            paramMap.put("NewVisitType", "全店新規");
        }

        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
        paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));

        if (null == paramBean.getStaffId() || "".equals(paramBean.getStaffId())) {
            paramMap.put("TargetName", paramBean.getTargetName());
        } else {
            paramMap.put("TargetName", this.getStaffName(paramBean));
        }

        SimpleDateFormat dFormat = new SimpleDateFormat("yyyyMMdd");

        StringBuffer whereCondition = new StringBuffer();
        whereCondition.append(" dsd.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' ");
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
        if (null != paramBean.getStaffId() && !"".equals(paramBean.getStaffId())) {
            whereCondition.append(" AND ds.staff_id = '" + paramBean.getStaffId() + "' ");
        }
        }
        

        // 営業日数（売上なしのレジ締め日数も含める）
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("     count(distinct sales_date) as date_count");
        sql.append(" from");
        sql.append(" (");
        sql.append("     select");
        sql.append("         ds.sales_date");
        sql.append("     from");
        sql.append("         data_sales ds inner join view_data_sales_detail_valid dsd using(shop_id, slip_no) ");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        
        sql.append("             left join mst_staff ms on dsd.detail_staff_id = ms.staff_id");
        sql.append("     where " + whereCondition.toString());
        sql.append("       and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     union all");
        sql.append("     select");
        sql.append("         manage_date");
        sql.append("     from");
        sql.append("         data_register dr");
        sql.append("     where");
        sql.append("             delete_date is null");
        sql.append("         and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("         and manage_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "' ");
        sql.append("         and not exists");
        sql.append("             (");
        sql.append("                 select 1");
        sql.append("                 from");
        sql.append("                     data_sales");
        sql.append("                 where");
        sql.append("                         delete_date is null");
        sql.append("                     and shop_id = dr.shop_id");
        sql.append("                     and sales_date = dr.manage_date");
        sql.append("             )");
        sql.append(" )t");

        int dayCount = 0;
        ResultSetWrapper rs = cw.executeQuery(sql.toString());
        if (rs.next()) {
            dayCount = rs.getInt("date_count");
        }
        paramMap.put("TargetDayCount", dayCount + "日");

        /* GEOBECK start edit 20160824 #54164 intをlongに */
        //プリペイド
        long prepaidValue = 0;
        rs = cw.executeQuery(getBusinessReportPrepaidInfo(paramBean));
        if (rs.next()) {
            prepaidValue = rs.getLong("sales_value");
        }
        
        //技術状況
        String mainQuery = getBusinessReportTechInfo(paramBean);
        rs = cw.executeQuery(mainQuery);
        ArrayList<BusinessReportBean> technicList = new ArrayList<BusinessReportBean>();
        BusinessReportBean business = null;

        double totalCustomerCount = 0;
        long totalSalesPrice = 0;
        /* GEOBECK end edit 20160824 #54164 */

        while (rs.next()) {
            business = new BusinessReportBean();
            business.setProductClassName(rs.getString("technic_class_name"));

            /* GEOBECK start edit 20160824 #54164 getIntをgetLongに */
            business.setTotalPrice(rs.getLong("sales_value"));

            business.setSalesCount(rs.getLong("product_num"));
            /* GEOBECK end edit 20160824 #54164 */
            business.setCustomerCount(rs.getDouble("customer_count"));

            totalSalesPrice += business.getTotalPrice();
            totalCustomerCount += business.getCustomerCount();

            technicList.add(business);
        }

        for (int i = 0; i < technicList.size(); i++) {
            if (technicList.get(i).getCustomerCount() == 0) {
                technicList.get(i).setClassRate(0.0);
                technicList.get(i).setCustomerCost(0.0);
            } else if (technicList.get(i).getCustomerCount() > 0) {
                technicList.get(i).setClassRate((technicList.get(i).getCustomerCount() / totalCustomerCount) * 100);
                technicList.get(i).setCustomerCost(technicList.get(i).getTotalPrice() / technicList.get(i).getCustomerCount());
            }
        }

        //技術クレーム
        //IVS_LVTu start edit 2015/10/02 Bug #43106
        mainQuery = "SELECT sum(data.value) AS value , SUM(count) AS num  "
                + "FROM ( "
                + "        SELECT dsd.slip_no ,  \n";

        mainQuery += "sum(" + makeValueString(paramBean) + ") as value \n";

        mainQuery += "        ,COUNT(*) AS count "
                + "        FROM view_data_sales_detail_valid AS dsd \n";
                //+ "        INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no \n";
                 
                if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
                                mainQuery +="     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ";
                                mainQuery += (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : "");
                }
                
                //mainQuery += "        WHERE ds.delete_date IS NULL \n"
                mainQuery += "          WHERE dsd.sales_date between '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' \n"
                + "          AND dsd.shop_id in (" + paramBean.getShopIDList() + ")\n"
                + "          AND dsd.product_division = 3 \n";
                if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
                    mainQuery +=//				//技術クレームは施術担当
                (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")
                ? //				"          AND dsd.detail_staff_id = '" + paramBean.getStaffId() + "' " : "") +
                "          AND dsd.staff_id = '" + paramBean.getStaffId() + "' " : "");
                }
                //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += " and \n";
                    mainQuery +=" (	\n";
                    mainQuery +=" exists (	\n";
                    mainQuery +="         select 1 from \n";
                    mainQuery +="         view_data_sales_detail_valid dsd1\n";
                    mainQuery +="         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(3)\n";
                    mainQuery +="         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n";
                    mainQuery +="         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n";
                    mainQuery +="         and mtc.shop_category_id in( " + paramBean.getListCategoryId() + ")	\n";
                    mainQuery +="         ) 	\n";
                    mainQuery +=" )\n";
                }
                //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応        
                mainQuery+= "         GROUP BY dsd.slip_no  \n"
                + ") data ";
                //IVS_LVTu end edit 2015/10/02 Bug #43106

        rs = cw.executeQuery(mainQuery);

        if (rs.next()) {
            paramMap.put("TechnicComplaintNum", rs.getInt("num"));
            paramMap.put("TechnicComplaintPrice", rs.getLong("value"));
        } else {
            paramMap.put("TechnicComplaintNum", new Integer(0));
            paramMap.put("TechnicComplaintPrice", new Long(0));
        }


        //商品状況
        mainQuery = getBusinessReportItemInfo(paramBean);

        totalCustomerCount = 0;
        totalSalesPrice = 0;

        rs = cw.executeQuery(mainQuery);
        ArrayList<BusinessReportBean> itemList = new ArrayList<BusinessReportBean>();
        BusinessReportBean item = null;

        while (rs.next()) {
            item = new BusinessReportBean();
            item.setProductClassName(rs.getString("item_class_name"));

            /* GEOBECK start edit 20160824 #54164 getIntをgetLongに */
            item.setTotalPrice(rs.getLong("sales_value"));

            item.setSalesCount(rs.getLong("product_num"));
            /* GEOBECK end edit 20160824 #54164 getIntをgetLongに */
            item.setCustomerCount(rs.getDouble("customer_count"));

            totalSalesPrice += item.getTotalPrice();
            totalCustomerCount += item.getCustomerCount();

            itemList.add(item);
        }

        for (int i = 0; i < itemList.size(); i++) {
            if (itemList.get(i).getCustomerCount() == 0) {
                itemList.get(i).setClassRate(0.0);
                itemList.get(i).setCustomerCost(0.0);
            } //else if(itemList.get(i).getCustomerCount() > 0)
            else {
                System.out.println(itemList.get(i).getCustomerCount() + " : " + (itemList.get(i).getCustomerCount() / totalCustomerCount * 100d) + "\n");
                itemList.get(i).setClassRate((itemList.get(i).getCustomerCount() / totalCustomerCount * 100d));
                //GEOBECK start edit 20160824 #54164
                //Integer sig = (Integer.signum(itemList.get(i).getTotalPrice()) == -1 ? -1 : 1);
                long sig = (Long.signum(itemList.get(i).getTotalPrice()) == -1 ? -1 : 1);
                //GEOBECK end edit 20160824 #54164
                itemList.get(i).setCustomerCost(sig * itemList.get(i).getTotalPrice() / itemList.get(i).getCustomerCount());
            }
        }

        //商品返品
        //IVS_LVTu start edit 2015/10/02 Bug #43106
        mainQuery = "SELECT sum(data.value) AS value , SUM(count) AS num  "
                + "FROM ( "
                + "        SELECT dsd.slip_no ,  \n";

        mainQuery += "        sum(" + makeValueString(paramBean) + ") as value \n";

        mainQuery += "        ,COUNT(*) AS count "
                + "        FROM view_data_sales_detail_valid AS dsd \n";
                //+ "        INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no \n";
                 
                if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
                      mainQuery +="     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ";
                      mainQuery += (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : "");
                }
                
                //mainQuery += "        WHERE ds.delete_date IS NULL \n"
                mainQuery += "          WHERE dsd.sales_date between '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' \n"
                + "          AND dsd.shop_id in (" + paramBean.getShopIDList() + ")\n"
                + "          AND dsd.product_division = 4 \n";
                
                if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
                    mainQuery += //商品返品は主担当
                (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")
                ? "          AND dsd.staff_id = '" + paramBean.getStaffId() + "' " : "");
                }
        //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            mainQuery += " and \n";
            mainQuery +=" (	\n";
            mainQuery +=" exists(\n";
            mainQuery +="         select 1 from\n";
            mainQuery +="         view_data_sales_detail_valid dsd1\n";
            mainQuery +="         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (4) \n";
            mainQuery +="         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n";
            mainQuery +="         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n";
            mainQuery +="         and mic.shop_category_id in( " + paramBean.getListCategoryId() + ")\n";
            mainQuery +="         )\n";
            mainQuery +=" )\n";
        }
        //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        mainQuery+= "         GROUP BY dsd.slip_no  \n"
        + ") data ";
        //IVS_LVTu end edit 2015/10/02 Bug #43106

        rs = cw.executeQuery(mainQuery);

        if (rs.next()) {
            paramMap.put("ItemReturnNum", rs.getInt("num"));
            paramMap.put("ItemReturnPrice", rs.getLong("value"));
        } else {
            paramMap.put("ItemReturnNum", new Integer(0));
            paramMap.put("ItemReturnPrice", new Long(0));
        }


        // レジ精算
        /* GEOBECK start edit 20160824 #54164 int→long */
        long moneyPrice = 0;
        long cardPrice = 0;
        long eCashPrice = 0;
        long giftPrice = 0;
        long receivePrice = 0;
        /* GEOBECK end edit 20160824 #54164 int→long */
        StringBuffer whereRegiCondition = new StringBuffer();
        whereRegiCondition.append(" dp.payment_date BETWEEN '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' ");

//		if(null != paramBean.getStaffId() && !"".equals(paramBean.getStaffId()))
//		{
//			whereRegiCondition.append(" AND dp.staff_id = '" + paramBean.getStaffId() + "' ");
//		}


        sql.setLength(0);
        sql.append(" select");
        sql.append("      mpc.payment_class_id,");
//        
//        sql.append("     ,sum(dpd.payment_value) - (");
//        sql.append("     select sum(change_value) from data_payment dpt");
//        //スタッフの絞込みは売上のデータから
//        if (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")) {
//            sql.append("     inner join data_sales ds");
//            sql.append("             on ds.shop_id = dpt.shop_id");
//            sql.append("            and ds.slip_no = dpt.slip_no");
//            sql.append("            and ds.staff_id = '" + paramBean.getStaffId() + "'");
//        }
//        sql.append("     where dpt.delete_date is null");
//        sql.append("     and dpt.shop_id in (" + paramBean.getShopIDList() + ")");
//        //IVS NNTUAN START EDIT 20130912
//        //sql.append("   and dpt.payment_date BETWEEN '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' ) as payment_price");
//        sql.append("   and dpt.payment_date BETWEEN '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "'");
//        sql.append("   and exists (   select 1 from      view_data_sales_valid ");
//        sql.append("   where     shop_id = dpt.shop_id ");
//        sql.append("   and slip_no = dpt.slip_no ");
//        sql.append("   and sales_date is not null )) as payment_price");
//        //IVS NNTUAN END EDIT 20130912
        sql.append(" sum(case dp.payment_no when 0 then dpd.payment_value - (case when dp.change_value < 0 then 0 else dp.change_value end) else 0 end)  AS payment_price ");
        sql.append(" from");
        sql.append("     data_payment_detail dpd");
        sql.append("         inner join data_payment dp");
        sql.append("             using(shop_id, slip_no, payment_no)");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
                        sql.append("     inner join data_sales ds");
                        sql.append("             on ds.shop_id = dp.shop_id");
                        sql.append("            and ds.slip_no = dp.slip_no");
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        
        sql.append("         inner join mst_payment_method mpm");
        sql.append("                 on dpd.payment_method_id = mpm.payment_method_id");
        sql.append("         inner join mst_payment_class mpc");
        sql.append("                 on mpm.payment_class_id = mpc.payment_class_id");
        //スタッフの絞込みは売上のデータから
         
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")) {
                sql.append("     inner join data_sales ds");
                sql.append("             on ds.shop_id = dp.shop_id");
                sql.append("            and ds.slip_no = dp.slip_no");
                sql.append("            and ds.staff_id = '" + paramBean.getStaffId() + "'");
            }
        }
         
        sql.append(" where");
        sql.append("        " + whereRegiCondition.toString());
        sql.append("     and dpd.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     and dpd.delete_date is null");
        sql.append("     and dpd.payment_no = 0");
        sql.append("     and mpc.payment_class_id = 1");
        sql.append("     and exists");
        sql.append("         (");
        sql.append("             select 1");
        sql.append("             from");
        sql.append("                 view_data_sales_valid");
        sql.append("             where");
        sql.append("                     shop_id = dp.shop_id");
        sql.append("                 and slip_no = dp.slip_no");
        sql.append("                 and sales_date is not null");
        sql.append("         )");
        sql.append(" group by");
        sql.append("     mpc.payment_class_id");

        rs = cw.executeQuery(sql.toString());
        if (rs.next()) {
            /* GEOBECK start edit 20160824 #54164 */
            //moneyPrice = rs.getInt("payment_price");
            moneyPrice = rs.getLong("payment_price");
            /* GEOBECK end edit 20160824 #54164 */
        }

        sql.setLength(0);
        sql.append(" select");
        sql.append("      mpc.payment_class_id");
        sql.append("     ,sum(dpd.payment_value) as payment_price");
        sql.append(" from");
        sql.append("     data_payment_detail dpd");
        sql.append("         inner join data_payment dp");
        sql.append("             using(shop_id, slip_no, payment_no)");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
            sql.append("     inner join data_sales ds");
            sql.append("             on ds.shop_id = dp.shop_id");
            sql.append("            and ds.slip_no = dp.slip_no");
            sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
            sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        
        sql.append("         inner join mst_payment_method mpm");
        sql.append("                 on dpd.payment_method_id = mpm.payment_method_id");
        sql.append("         inner join mst_payment_class mpc");
        sql.append("                 on mpm.payment_class_id = mpc.payment_class_id");
        //スタッフの絞込みは売上のデータから
         
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")) {
                sql.append("     inner join data_sales ds");
                sql.append("             on ds.shop_id = dp.shop_id");
                sql.append("            and ds.slip_no = dp.slip_no");
                sql.append("            and ds.staff_id = '" + paramBean.getStaffId() + "'");
            }
        }
         
        sql.append(" where");
        sql.append("        " + whereRegiCondition.toString());
        sql.append("     and dpd.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     and dpd.delete_date is null");
        sql.append("     and dpd.payment_no = 0");
        sql.append("     and exists");
        sql.append("         (");
        sql.append("             select 1");
        sql.append("             from");
        sql.append("                 data_sales");
        sql.append("             where");
        sql.append("                     shop_id = dp.shop_id");
        sql.append("                 and slip_no = dp.slip_no");
        sql.append("                 and sales_date is not null");
        sql.append("         )");
        sql.append(" group by");
        sql.append("     mpc.payment_class_id");
        sql.append(" order by");
        sql.append("     mpc.payment_class_id");

        rs = cw.executeQuery(sql.toString());
        while (rs.next()) {

            /* GEOBECK start edit 20160824 #54164 getIntをgetLong */
            if (rs.getInt("payment_class_id") == 2) {
                cardPrice = rs.getLong("payment_price");
            } else if (rs.getInt("payment_class_id") == 3) {
                eCashPrice = rs.getLong("payment_price");
            } else if (rs.getInt("payment_class_id") == 4) {
                giftPrice = rs.getLong("payment_price");
            }
            /* GEOBECK end edit 20160824 #54164 getIntをgetLong */
        }

        rs.close();


        sql.setLength(0);
        sql.append(" select");
        sql.append("     sum(dp.bill_value) as payment_price");
        sql.append(" from");
        sql.append("     data_payment_detail dpd");
        sql.append("         inner join data_payment dp");
        sql.append("             using(shop_id, slip_no, payment_no)");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
             sql.append("     inner join data_sales ds");
             sql.append("             on ds.shop_id = dp.shop_id");
             sql.append("            and ds.slip_no = dp.slip_no");
             sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
             sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        
        sql.append("         inner join mst_payment_method mpm");
        sql.append("                 on dpd.payment_method_id = mpm.payment_method_id");
        sql.append("         inner join mst_payment_class mpc");
        sql.append("                 on mpm.payment_class_id = mpc.payment_class_id");
        //スタッフの絞込みは売上のデータから
         
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")) {
                sql.append("     inner join data_sales ds");
                sql.append("             on ds.shop_id = dp.shop_id");
                sql.append("            and ds.slip_no = dp.slip_no");
                sql.append("            and ds.staff_id = '" + paramBean.getStaffId() + "'");
            }
        }
         
        sql.append(" where");
        sql.append("        " + whereRegiCondition.toString());
        sql.append("     and dpd.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     and dpd.payment_no = 0");
        sql.append("     and exists");
        sql.append("         (");
        sql.append("             select 1");
        sql.append("             from");
        sql.append("                 data_sales");
        sql.append("             where");
        sql.append("                     shop_id = dp.shop_id");
        sql.append("                 and slip_no = dp.slip_no");
        sql.append("                 and sales_date is not null");
        sql.append("         )");

        rs = cw.executeQuery(sql.toString());
        if (rs.next()) {
            /* GEOBECK start edit 20160824 #54164 */
            //receivePrice = rs.getInt("payment_price");
            receivePrice = rs.getLong("payment_price");
            /* GEOBECK end edit 20160824 #54164 */
        }


        /* GEOBECK start edit 20160824 #54164 int→long */
        long moneyBill = 0;
        long cardBill = 0;
        long creditBill = 0;
        /* GEOBECK end edit 20160824 #54164 int→long */
        sql = new StringBuilder();
        sql.append("select sum(case mpm.payment_class_id\n");
        sql.append("when 1 then dpd.payment_value else 0 end) as money,\n");
        sql.append("sum(case mpm.payment_class_id\n");
        sql.append("when 2 then dpd.payment_value else 0 end) as card,\n");
        sql.append("sum(case mpm.payment_class_id\n");
        sql.append("when 3 then dpd.payment_value else 0 end) as credit\n");
        sql.append("from data_sales ds\n");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        
        sql.append("inner join  data_payment dp\n");
        sql.append("on dp.shop_id = ds.shop_id\n");
        sql.append("and dp.slip_no = ds.slip_no\n");
        sql.append("and dp.payment_no = 0\n");
        sql.append("left outer join data_payment_detail dpd\n");
        sql.append("on dpd.shop_id = dp.shop_id\n");
        sql.append( "and dpd.slip_no = dp.slip_no\n");
        sql.append("and dpd.payment_no = dp.payment_no\n");
        sql.append("and dpd.delete_date is null\n");
        sql.append("left outer join mst_payment_method mpm\n");
        sql.append("on mpm.payment_method_id = dpd.payment_method_id\n");
        sql.append("where ds.delete_date is null\n");
        sql.append("and ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append("and dp.delete_date is null\n");
        sql.append("and dp.payment_no > 0\n");
        sql.append("and dp.payment_date between '" + paramBean.getTargetStartDate() + "'\n");
        sql.append("and '" + paramBean.getTargetEndDate() + "'\n");
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            sql.append((paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")
                ? " and dp.staff_id = '" + paramBean.getStaffId() + "' " : ""));
        }
        rs = cw.executeQuery(sql.toString());

        if (rs.next()) {
            /* GEOBECK start edit 20160824 #54164 getInt→getLong */
            moneyBill = rs.getLong("money");
            cardBill = rs.getLong("card");
            creditBill = rs.getLong("credit");
            /* GEOBECK end edit 20160824 #54164 getInt→getLong */
        }

        rs.close();

        paramMap.put("MoneyBill", moneyBill);
        paramMap.put("CardBill", cardBill);
        paramMap.put("CreditBill", creditBill);

        // 売掛金
        sql.setLength(0);
        sql.append(" select");
        sql.append("     sum(dp.bill_value) as bill_value");
        sql.append(" from");
        sql.append("     data_payment dp");
        sql.append("         join data_sales ds using(shop_id, slip_no)");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dp.shop_id AND dsmt.slip_no = dp.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        
        sql.append(" where");
        sql.append("         dp.payment_no = 0");
        sql.append("     and ds.delete_date is null");
        sql.append("     and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     and ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
        
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")) {
                sql.append("     and ds.staff_id = '" + paramBean.getStaffId() + "'");

            }
        }
        

        rs = cw.executeQuery(sql.toString());
        if (rs.next()) {
            /* GEOBECK start edit 20160824 #54164 */
            //paramMap.put("BillValue", rs.getInt("bill_value"));
            paramMap.put("BillValue", rs.getLong("bill_value"));
            /* GEOBECK end edit 20160824 #54164 */
        } else {
            paramMap.put("BillValue", 0);
        }
        rs.close();

        // 売掛回収金
        sql.setLength(0);
        sql.append(" select");
        // IVS SANG START EDIT 20130926
        sql.append("     sum(case when mpm.payment_class_id = 1 then coalesce(dpd.payment_value - (case when dp.change_value < 0 then 0 else dp.change_value end), 0) else 0 end) as collected_cash_value,\n");
        //sql.append("     ,sum(case when mpm.payment_class_id in (2, 3, 4) then coalesce(dpd.payment_value - (case when dp.change_value < 0 then 0 else dp.change_value end), 0) else 0 end) as collected_card_value");
        sql.append("     sum(case when mpm.payment_class_id = 2 then coalesce(dpd.payment_value - (case when dp.change_value < 0 then 0 else dp.change_value end), 0) else 0 end) as collected_card_value,\n");
        sql.append("     sum(case when mpm.payment_class_id = 3 then coalesce(dpd.payment_value - (case when dp.change_value < 0 then 0 else dp.change_value end), 0) else 0 end) as collected_ecash_value,\n");
        sql.append("     sum(case when mpm.payment_class_id = 4 then coalesce(dpd.payment_value - (case when dp.change_value < 0 then 0 else dp.change_value end), 0) else 0 end) as collected_gift_value\n");
        // IVS SANG END EDIT 20130926
        sql.append(" from");
        sql.append("     data_payment_detail dpd");
        sql.append("         join data_payment dp");
        sql.append("             using (shop_id, slip_no, payment_no)");
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dpd.shop_id AND dsmt.slip_no = dpd.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        sql.append("         join mst_payment_method mpm");
        sql.append("             using (payment_method_id)");
        sql.append(" where");
        sql.append("         dpd.delete_date is null");
        sql.append("     and dp.delete_date is null");
        sql.append("     and dp.payment_no > 0");
        sql.append("     and dp.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     and dp.payment_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
         
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
        if (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")) {
            sql.append(" and dp.staff_id = " + paramBean.getStaffId());
        }
        }

        try {
            rs = cw.executeQuery(sql.toString());
        } catch (Exception e) {
            System.err.println(sql);
            throw e;
        }
        if (rs.next()) {
            // IVS SANG START EDIT 20130926
            //paramMap.put("CollectedCashValue", rs.getInt("collected_cash_value"));
            //paramMap.put("CollectedCardValue", rs.getInt("collected_card_value"));
            // 現金売上
            paramMap.put("CollectedCashValue", rs.getDouble("collected_cash_value"));

            // カード売上
            paramMap.put("CollectedCardPrice", rs.getDouble("collected_card_value"));
            // 電子マネー

            paramMap.put("CollectedECashPrice", rs.getDouble("collected_ecash_value"));

            // 金券・その他

            paramMap.put("CollectedGiftPrice", rs.getDouble("collected_gift_value"));

        } // IVS SANG START EDIT 20130926
        else {
            paramMap.put("CollectedCashValue", 0);
            paramMap.put("CollectedCardPrice", 0);
            paramMap.put("CollectedECashPrice", 0);
            paramMap.put("CollectedGiftPrice", 0);
        }
        rs.close();


        paramMap.put("MoneyPrice", moneyPrice);
        paramMap.put("CardPrice", cardPrice);
        paramMap.put("ECashPrice", eCashPrice);
        paramMap.put("GiftPrice", giftPrice);
        paramMap.put("ReceivePrice", receivePrice);

        // レジ入出金
        sql.setLength(0);
        sql.append("select \n");
        sql.append( "sum(case when in_out = 't' then io_value else 0 end) as in, \n");
        sql.append( "sum(case when in_out = 'f' then io_value else 0 end) as out \n");
        sql.append( "from data_cash_io \n");
        sql.append( "where ");
        sql.append( "shop_id in(" + paramBean.getShopIDList() + ") and \n");
        sql.append( "io_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + " and \n");
        sql.append( (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")
                ? "  staff_id = '" + paramBean.getStaffId() + "'  and \n" : ""));
        sql.append( "delete_date is null");

        try {
            rs = cw.executeQuery(sql.toString());
        } catch (Exception e) {
            System.err.println(sql);
            throw e;
        }

        if (rs.next()) {
            paramMap.put("CashIn", rs.getLong("in"));
            paramMap.put("CashOut", rs.getLong("out"));
        }
        rs.close();

        int totalVisitNum = 0;
        int salesedTaxOutPrice = 0;
        int salesedTaxInPrice = 0;
        int sumTotalVisitNum = 0;
        int sumSalesedTaxOutPrice = 0;
        int sumSalesedTaxInPrice = 0;

        //入客状況
        sql.setLength(0);
        sql.append(" select\n");
        sql.append("      sum(1) as customer_total\n");
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and dsd.item_num + dsd.item_crame_num = 0) then 1 else 0 end)  as tech_only_num\n");
        //2016/08/15 #53772 geobeck mod start------------------
        //sql.append("     ,sum(case when (dsd.item_num + dsd.item_crame_num > 0 and dsd.tech_num + dsd.tech_crame_num = 0) then 1 else 0 end)  as item_only_num\n");
        sql.append("     ,sum(case when (dsd.item_num + dsd.item_crame_num > 0\n");
        sql.append("      and dsd.tech_num + dsd.tech_crame_num = 0           \n");
        sql.append("      and dsd.other_num = 0)                              \n"); //add
        sql.append("      then 1 else 0 end)  as item_only_num                \n");
        //2016/08/15 #53772 geobeck mod end------------------
        //2016/08/24 #53772 geobeck mod start----------------
        sql.append("     ,sum(case when dsd.item_num + dsd.item_crame_num > 0 then 1 else 0 end) as item_in_num\n"); //add
        //2016/08/24 #53772 geobeck mod end------------------
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and dsd.item_num + dsd.item_crame_num > 0) then 1 else 0 end)  as tech_and_item_num\n");
        // 会員
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0') then 1 else 0 end)      as member\n");
        // 非会員
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no = '0') then 1 else 0 end)       as not_member\n");
        // 新規
        if (paramBean.getNewVisitType() == ReportParameterBean.NEW_VISIT_CURRENT) {
            // 自店新規
            sql.append(" ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1) then 1 else 0 end)           as new_commer\n");
            //IVS_LVTu start edit 2015/07/28 Bug #41091
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 2) then 1 else 0 end)        as fixed2\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 3) then 1 else 0 end)        as fixed3\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 4) then 1 else 0 end)        as fixed4\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) >= 5) then 1 else 0 end)        as fixed5\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) >= 2) then 1 else 0 end)        as fixed\n");
        } else {
            // 全店新規
            sql.append(" ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.sales_date) = 1) then 1 else 0 end)           as new_commer\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id,  ds.sales_date) = 2) then 1 else 0 end)        as fixed2\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id,  ds.sales_date) = 3) then 1 else 0 end)        as fixed3\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id,  ds.sales_date) = 4) then 1 else 0 end)        as fixed4\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id,  ds.sales_date) >= 5) then 1 else 0 end)        as fixed5\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id,  ds.sales_date) >= 2) then 1 else 0 end)        as fixed\n");
        }
        // 男性
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and mc.sex = 1) then 1 else 0 end)                 as male\n");
        // 女性
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and mc.sex = 2) then 1 else 0 end)                 as female\n");
        //IVS_LVTu start edit 2015/10/23 New request #43757
        //WEB予約客
        sql.append("     ,sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND mc.customer_no <> '0' AND dr.mobile_flag <>0) THEN 1 ELSE 0 END) AS num_mobile_flag ");
        // 紹介(新規かつ紹介あり)
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1 and mc.introducer_id is not null) then 1 else 0 end) as introduce\n");
//        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 2) then 1 else 0 end)        as fixed2\n");
//        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 3) then 1 else 0 end)        as fixed3\n");
//        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 4) then 1 else 0 end)        as fixed4\n");
//        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) >= 5) then 1 else 0 end)        as fixed5\n");
//        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) >= 2) then 1 else 0 end)        as fixed\n");
        //IVS_LVTu end edit 2015/07/28 Bug #41091
        // 指名
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and ds.designated_flag = true) then 1 else 0 end)    as charge\n");
        sql.append("     ,sum(dsd.sales_value) + sum(dsd.sales_crame_value) + sum(dsd.item_value) + sum(dsd.item_crame_value)   as customer_total_value\n");
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 ) then dsd.sales_value + dsd.sales_crame_value  else 0 end)  as tech_value\n");
        //2016/08/15 #53772 geobeck mod start------------------
        //sql.append("     ,sum(case when (dsd.item_num + dsd.item_crame_num > 0 and dsd.tech_num + dsd.tech_crame_num= 0) then dsd.item_value + (dsd.item_crame_value) else 0 end)  as item_only_value\n");
        sql.append("     ,sum(case when (dsd.item_num + dsd.item_crame_num > 0\n");
        sql.append("          and dsd.tech_num + dsd.tech_crame_num= 0        \n");
        sql.append("          and dsd.other_num = 0)                          \n"); //add
        sql.append("          then dsd.item_value + (dsd.item_crame_value) else 0 end)  as item_only_value\n");
        //2016/08/15 #53772 geobeck mod end------------------
        //2016/08/24 #53772 geobeck mod start----------------
        sql.append("     ,sum(case when dsd.item_num + dsd.item_crame_num > 0 then dsd.item_value + (dsd.item_crame_value) else 0 end) as item_in_value\n"); //add
        //2016/08/24 #53772 geobeck mod end------------------
        sql.append("     ,sum(case when (dsd.item_num + dsd.item_crame_num > 0) then dsd.item_value + (dsd.item_crame_value)  else 0 end) as item_value\n");
        // 会員
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0') then dsd.sales_value + dsd.sales_crame_value else 0 end)    as member_value\n");
        // 非会員
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no = '0') then dsd.sales_value + dsd.sales_crame_value  else 0 end)    as not_member_value\n");
        // 新規
        if (paramBean.getNewVisitType() == ReportParameterBean.NEW_VISIT_CURRENT) {
            // 自店新規
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1) then dsd.sales_value + dsd.sales_crame_value  else 0 end)  as new_commer_value\n");
            //IVS_LVTu start edit 2015/07/28 Bug #41091
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 2) then dsd.sales_value + dsd.sales_crame_value  else 0 end)    as fixed2_value\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 3) then dsd.sales_value + dsd.sales_crame_value  else 0 end)    as fixed3_value\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 4) then dsd.sales_value + dsd.sales_crame_value  else 0 end)    as fixed4_value\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) >= 5) then dsd.sales_value + dsd.sales_crame_value  else 0 end)   as fixed5_value\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) >= 2) then dsd.sales_value + dsd.sales_crame_value  else 0 end)   as fixed_value\n");
        
        } else {
            // 全店新規
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.sales_date) = 1) then dsd.sales_value + dsd.sales_crame_value  else 0 end)  as new_commer_value\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id,  ds.sales_date) = 2) then dsd.sales_value + dsd.sales_crame_value  else 0 end)    as fixed2_value\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id,  ds.sales_date) = 3) then dsd.sales_value + dsd.sales_crame_value  else 0 end)    as fixed3_value\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id,  ds.sales_date) = 4) then dsd.sales_value + dsd.sales_crame_value  else 0 end)    as fixed4_value\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id,  ds.sales_date) >= 5) then dsd.sales_value + dsd.sales_crame_value  else 0 end)   as fixed5_value\n");
            sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id,  ds.sales_date) >= 2) then dsd.sales_value + dsd.sales_crame_value  else 0 end)   as fixed_value\n");
        
        }
        // 男性
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and mc.sex = 1) then dsd.sales_value + dsd.sales_crame_value  else 0 end)  as male_value\n");
        // 女性
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and mc.sex = 2) then dsd.sales_value + dsd.sales_crame_value  else 0 end)  as female_value\n");
        //WEB予約客
        sql.append("     ,sum(CASE WHEN (dsd.tech_num + dsd.tech_crame_num > 0 AND mc.customer_no <> '0' AND dr.mobile_flag <>0) THEN dsd.sales_value + dsd.sales_crame_value ELSE 0 END) AS value_mobile_flag ");
        // 紹介(新規かつ紹介あり)
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1 and mc.introducer_id is not null) then dsd.sales_value + dsd.sales_crame_value  else 0 end) as introduce_value\n");
//        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 2) then dsd.sales_value + dsd.sales_crame_value  else 0 end)    as fixed2_value\n");
//        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 3) then dsd.sales_value + dsd.sales_crame_value  else 0 end)    as fixed3_value\n");
//        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 4) then dsd.sales_value + dsd.sales_crame_value  else 0 end)    as fixed4_value\n");
//        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) >= 5) then dsd.sales_value + dsd.sales_crame_value  else 0 end)   as fixed5_value\n");
//        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) >= 2) then dsd.sales_value + dsd.sales_crame_value  else 0 end)   as fixed_value\n");
        //IVS_LVTu end edit 2015/07/28 Bug #41091
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and ds.designated_flag = true) then dsd.sales_value + dsd.sales_crame_value  else 0 end)  as charge_value\n");
        sql.append(" from\n");
        sql.append("     data_sales ds\n");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        
        sql.append("         inner join\n");
        sql.append("             (\n");
        sql.append("                 select\n");
        sql.append("                      dsd.shop_id, dsd.slip_no\n");
        // 技術売上
        sql.append("                   ,sum(case when dsd.product_division = 1 then " + makeValueString(paramBean) + " else 0 end) as sales_value\n");
        // 技術クレーム売上
        sql.append("                     ,sum(case when dsd.product_division = 3 then " + makeValueString(paramBean) + " else 0 end) as sales_crame_value\n");
        // 商品売上
        sql.append("                     ,sum(case when dsd.product_division = 2 then " + makeValueString(paramBean) + " else 0 end) as item_value\n");
        // 商品クレーム売上
        sql.append("                     ,sum(case when dsd.product_division = 4 then " + makeValueString(paramBean) + " else 0 end) as item_crame_value\n");
        // 技術客数
        sql.append("                     ,sum(case dsd.product_division when 1 then 1 else 0 end) as tech_num\n");
        // 技術客数
        sql.append("                     ,sum(case dsd.product_division when 3 then 1 else 0 end) as tech_crame_num\n");
        // 商品客数
        sql.append("                     ,sum(case dsd.product_division when 2 then 1 else 0 end) as item_num\n");
        sql.append("                     ,sum(case dsd.product_division when 4 then 1 else 0 end) as item_crame_num\n");
        //2016/08/15 #53772 geobeck add start------------------
        sql.append("                     ,sum(case when dsd.product_division in (5, 6, 7, 8, 9) then 1 else 0 end) as other_num\n");
        //2016/08/15 #53772 geobeck add end------------------
        sql.append("                 from\n");
        sql.append("                       view_data_sales_detail_valid dsd\n");
        //sql.append("                     data_sales ds\n");
        //sql.append("                         inner join view_data_sales_detail_valid dsd\n");
        //sql.append("                                 on dsd.shop_id = ds.shop_id\n");
        //sql.append("                                and dsd.slip_no = ds.slip_no\n");
        sql.append("                 where\n");
        //sql.append("                         ds.delete_date is null\n");
        //sql.append("                     and ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append("                     dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append("                     and dsd.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
        sql.append("                                           and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
         //IVS LUC START ADD 20141118 業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!= null && !paramBean.getListCategoryId().equals(""))) {
                    sql.append(" and  ");
                    sql.append(" ( ");
                    sql.append(" exists ( ");
                    sql.append("         select * from ");
                    sql.append("         view_data_sales_detail_valid dsd1 ");
                    sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (1,3) ");
                    sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id ");
                    sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no ");
                    sql.append("         and mtc.shop_category_id in ( " + paramBean.getListCategoryId() + ") ");
                    sql.append("         )  ");
                    sql.append(" or  ");
                    sql.append(" exists( ");
                    sql.append("         select * from ");
                    sql.append("         view_data_sales_detail_valid dsd1 ");
                    sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (2,4)  ");
                    sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id ");
                    sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no ");
                    sql.append("         and mic.shop_category_id in ( " + paramBean.getListCategoryId() + ") ");
                    sql.append("         ) ");
                    //2016/08/24 #53772 geobeck mod start----------------
                    sql.append("         or   exists(\n");        
                    sql.append("         select * from\n");          
                    sql.append("         view_data_sales_detail_valid dsd1\n");          
                    sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_class_id\n"); 
                    sql.append("         and dsd.product_division = dsd1.product_division\n");
                    sql.append("         and dsd1.product_division in (5,6)\n");          
                    sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");         
                    sql.append("         where dsd1.slip_no = dsd.slip_no\n");
                    sql.append("         and dsd1.shop_id = dsd.shop_id\n");
                    sql.append("         and dsd1.slip_detail_no = dsd.slip_detail_no\n");      
                    sql.append("         and mcc.shop_category_id in ( 2,1)          )\n");
                    sql.append("         or   exists(\n");
                    sql.append("         select * from\n");       
                    sql.append("         view_data_sales_detail_valid dsd1\n");         
                    sql.append("         where dsd1.product_division in (7,8,9) )\n");
                    //2016/08/24 #53772 geobeck mod end------------------
                    sql.append(" ) ");
        }
         //IVS LUC END ADD 20141118 業務報告のトータルビューティ対応
        sql.append("                 \ngroup by\n");
        sql.append("                      dsd.shop_id");
        sql.append("                     ,dsd.slip_no\n");
        sql.append("             ) dsd\n");
        sql.append("             on dsd.shop_id = ds.shop_id\n");
        sql.append("             and dsd.slip_no = ds.slip_no\n");
        sql.append("         left outer join\n");
        sql.append("             (\n");
        sql.append("                 select\n");
        sql.append("                      customer_id\n");
        sql.append("                     ,customer_no\n");
        sql.append("                     ,sex\n");
        sql.append("                     ,before_visit_num\n");
        sql.append("                     ,introducer_id\n");
        sql.append("                 from\n");
        sql.append("                     mst_customer mc\n");
        sql.append("                 where\n");
        sql.append("                     exists\n");
        sql.append("                     (\n");
        sql.append("                         select 1\n");
        sql.append("                         from\n");
        sql.append("                             data_sales ds\n");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        
        sql.append("                         where\n");
        sql.append("                                 customer_id = mc.customer_id\n");
        sql.append("                             and ds.delete_date is null\n");
        sql.append("                             and sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
        sql.append("                                                and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
        
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null) {
                sql.append("                        \n and ds.staff_id = " + paramBean.getStaffId().toString());
            }
        }
        
        sql.append("                     )\n");
        sql.append("             ) mc\n");
        sql.append("             on mc.customer_id = ds.customer_id\n");
        sql.append(" left join data_reservation dr on dr.shop_id = ds.shop_id and dr.slip_no = ds.slip_no and dr.delete_date is null ");
        sql.append(" and dr.customer_id = mc.customer_id ");
        //IVS_LVTu end edit 2015/10/23 New request #43757
        sql.append(" where\n");
        sql.append("         ds.delete_date is null\n");
        sql.append("     and ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append("     and ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
        sql.append("                           and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
         
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null) {
                sql.append("\n and ds.staff_id = " + paramBean.getStaffId().toString());
            }
        }

        try {
            rs = cw.executeQuery(sql.toString());
        } catch (Exception e) {
            System.err.println(sql);
            throw e;
        }

        if (rs.next()) {

            /* GEOBECK start edit 20160824 #54164 getInt→getLong 
             *                                    Integer→Long */
            Long total = rs.getLong("customer_total");
            Long techAndItemTotal = rs.getLong("tech_only_num") + rs.getInt("tech_and_item_num");
            Long fixed = rs.getLong("fixed");
            Long member = rs.getLong("member");
 
            paramMap.put("TotalVisitNum", rs.getLong("customer_total"));
            paramMap.put("TechnicTotalNum", techAndItemTotal);
            paramMap.put("ItemTotalNum", rs.getLong("item_only_num"));
            paramMap.put("TechnicAndItemNum", rs.getLong("tech_and_item_num") + rs.getLong("item_only_num"));
            //2016/08/24 #53772 geobeck mod start----------------
            paramMap.put("ItemInNum", rs.getLong("item_in_num")); //add
            //2016/08/24 #53772 geobeck mod end------------------
            paramMap.put("MemberVisitNum", rs.getLong("member"));
            paramMap.put("GuestVisitNum", rs.getLong("not_member"));
            paramMap.put("NewVisitNum", rs.getLong("new_commer"));
            paramMap.put("WomanVisitNum", rs.getLong("female"));
            paramMap.put("ManVisitNum", rs.getLong("male"));
            paramMap.put("IntroducerNum", rs.getLong("introduce"));
            paramMap.put("Fixed2Num", rs.getLong("fixed2"));
            paramMap.put("Fixed3Num", rs.getLong("fixed3"));
            paramMap.put("Fixed4Num", rs.getLong("fixed4"));
            paramMap.put("Fixed5Num", rs.getLong("fixed5"));
            paramMap.put("FixedNum", rs.getLong("fixed"));
            paramMap.put("ChargeNum", rs.getLong("charge"));

            paramMap.put("TotalSalesPrice", rs.getLong("customer_total_value"));
//                        paramMap.put("TechTotalPrice", rs.getInt("tech_only_value") + rs.getInt("tech_and_item_value"));
            paramMap.put("TechTotalPrice", rs.getLong("tech_value"));
            paramMap.put("ItemTotalPrice", rs.getLong("item_only_value"));
//                        paramMap.put("TechnicAndItemPrice", rs.getInt("tech_and_item_value") + rs.getInt("item_only_value"));
            paramMap.put("TechnicAndItemPrice", rs.getLong("item_value"));
            //2016/08/24 #53772 geobeck mod start----------------
            paramMap.put("ItemInPrice", rs.getLong("item_in_value")); //add
            //2016/08/24 #53772 geobeck mod end------------------
            paramMap.put("MemberSalesPrice", rs.getLong("member_value"));
            paramMap.put("GuestSalesPrice", rs.getLong("not_member_value"));
            paramMap.put("NewSalesPrice", rs.getLong("new_commer_value"));
            paramMap.put("WomanSalesPrice", rs.getLong("female_value"));
            paramMap.put("ManSalesPrice", rs.getLong("male_value"));
            paramMap.put("IntroducerValue", rs.getLong("introduce_value"));
            paramMap.put("Fixed2Value", rs.getLong("fixed2_value"));
            paramMap.put("Fixed3Value", rs.getLong("fixed3_value"));
            paramMap.put("Fixed4Value", rs.getLong("fixed4_value"));
            paramMap.put("Fixed5Value", rs.getLong("fixed5_value"));
            paramMap.put("FixedValue", rs.getLong("fixed_value"));
            paramMap.put("ChargeValue", rs.getLong("charge_value"));
            paramMap.put("NumMobileFlag", rs.getInt("num_mobile_flag"));
            paramMap.put("ValueMobileFlag", rs.getInt("value_mobile_flag"));


            if (techAndItemTotal > 0) {
                paramMap.put("MemberRate", rs.getDouble("member") / techAndItemTotal * 100d);
                paramMap.put("GuestRate", rs.getDouble("not_member") / techAndItemTotal * 100d);
                paramMap.put("ChargeRate", rs.getDouble("charge") / techAndItemTotal * 100d);
            } else {
                paramMap.put("MemberRate", 0d);
                paramMap.put("GuestRate", 0d);
                paramMap.put("ChargeRate", 0d);
            }

            if (fixed > 0) {
                paramMap.put("Fixed2Rate", rs.getDouble("fixed2") / fixed * 100d);
                paramMap.put("Fixed3Rate", rs.getDouble("fixed3") / fixed * 100d);
                paramMap.put("Fixed4Rate", rs.getDouble("fixed4") / fixed * 100d);
                paramMap.put("Fixed5Rate", rs.getDouble("fixed5") / fixed * 100d);
            } else {
                paramMap.put("Fixed2Rate", 0d);
                paramMap.put("Fixed3Rate", 0d);
                paramMap.put("Fixed4Rate", 0d);
                paramMap.put("Fixed5Rate", 0d);
            }

            if (member > 0) {
                paramMap.put("FixedRate", rs.getDouble("fixed") / member * 100d);
                paramMap.put("NewRate", rs.getDouble("new_commer") / member * 100d);
                paramMap.put("IntroducerRate", rs.getDouble("introduce") / member * 100d);
                paramMap.put("WomanRate", rs.getDouble("female") / member * 100d);
                paramMap.put("ManRate", rs.getDouble("male") / member * 100d);
            } else {
                paramMap.put("FixedRate", 0d);
                paramMap.put("NewRate", 0d);
                paramMap.put("WomanRate", 0d);
                paramMap.put("ManRate", 0d);
                paramMap.put("IntroducerRate", 0d);
            }

            paramMap.put("TechnicTotalCost", (techAndItemTotal == 0 ? 0 : rs.getDouble("tech_value")) / techAndItemTotal);
            paramMap.put("MemberCustomerCost", (rs.getLong("member") == 0 ? 0 : rs.getDouble("member_value") / rs.getLong("member")));
            paramMap.put("GuestCustomerCost", (rs.getLong("not_member") == 0 ? 0 : rs.getDouble("not_member_value") / rs.getLong("not_member")));
            paramMap.put("NewCustomerCost", (rs.getLong("new_commer") == 0 ? 0 : rs.getDouble("new_commer_value") / rs.getLong("new_commer")));
            paramMap.put("WomanCustomerCost", (rs.getLong("female") == 0 ? 0 : rs.getDouble("female_value") / rs.getLong("female")));
            paramMap.put("ManCustomerCost", (rs.getLong("male") == 0 ? 0 : rs.getDouble("male_value") / rs.getLong("male")));
            paramMap.put("IntroducerCustomerCost", (rs.getLong("introduce") == 0 ? 0 : rs.getDouble("introduce_value") / rs.getLong("introduce")));
            paramMap.put("Fixed2CustomerCost", (rs.getLong("fixed2") == 0 ? 0 : rs.getDouble("fixed2_value") / rs.getLong("fixed2")));
            paramMap.put("Fixed3CustomerCost", (rs.getLong("fixed3") == 0 ? 0 : rs.getDouble("fixed3_value") / rs.getLong("fixed3")));
            paramMap.put("Fixed4CustomerCost", (rs.getLong("fixed4") == 0 ? 0 : rs.getDouble("fixed4_value") / rs.getLong("fixed4")));
            paramMap.put("Fixed5CustomerCost", (rs.getLong("fixed5") == 0 ? 0 : rs.getDouble("fixed5_value") / rs.getLong("fixed5")));
            paramMap.put("FixedCustomerCost", (rs.getLong("fixed") == 0 ? 0 : rs.getDouble("fixed_value") / rs.getLong("fixed")));
            paramMap.put("ChargeCustomerCost", (rs.getLong("charge") == 0 ? 0 : rs.getDouble("charge_value") / rs.getLong("charge")));

            if (total > 0) {
                paramMap.put("TechAndItemRate", (rs.getDouble("tech_and_item_num") + rs.getLong("item_only_num")) / total * 100d);
                paramMap.put("ItemTotalRate", rs.getDouble("item_only_num") / total * 100d);

            } else {
                paramMap.put("TechAndItemRate", 0d);
                paramMap.put("ItemTotalRate", 0d);
            }

            paramMap.put("TotalSalesCost", (total == 0 ? 0 : rs.getDouble("customer_total_value") / total));
            paramMap.put("TechAndItemCost", (rs.getLong("tech_and_item_num") + rs.getLong("item_only_num") == 0 ? 0 : ((rs.getDouble("item_value")) / (rs.getLong("tech_and_item_num") + rs.getLong("item_only_num")))));
            paramMap.put("ItemOnlyCost", (rs.getLong("item_only_num") == 0 ? 0 : rs.getDouble("item_only_value") / rs.getLong("item_only_num")));
        }

        rs.close();

        //コース契約の売上集計取得
        sql.setLength(0);
        //nhanvt edit start Bug #31116
        //sql.append("select count (total_contract_num) as total_contract_num \n ");
        sql.append("select SUM (total_contract_num) as total_contract_num \n ");
        //nhanvt edit end Bug #31116
        sql.append(", sum (total_contract_value) as total_contract_value \n");
        sql.append(" from (");
        sql.append(" select");
        //nhanvt start edit 20150205Bug #35170
        //LVTu start edit 2015/03/20 Bug #35449
        sql.append(" SUM (total_contract_num) AS total_contract_num, ");
        //LVTu start edit 2015/10/27 Bug #43950
        //if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
        //    sql.append("    SUM (total_contract_value)/(1.0 + get_tax_rate(a.sales_date)) AS total_contract_value ");
        //} else {
            sql.append("    SUM (total_contract_value) AS total_contract_value ");
        //}
        sql.append(" FROM ");
        sql.append(" (SELECT sales_date,");
        sql.append("     ds.product_id , count(ds.product_id) as total_contract_num");
        //if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            //sql.append("     ,ceil(sum(ds.product_value) / (1.0 + get_tax_rate(max(ds.sales_date)))) as total_contract_value");
            
        //} else {
            // 税込み
        //IVS_LVTu start edit 2015/05/05 Bug #36492
        //sql.append("     ,sum(ds.product_value) as total_contract_value");
        //IVS_LVTu start edit 2015/06/23 Bug #36488
        //sql.append("     ,sum(ds.product_value - discount_value) as total_contract_value");
        //sql.append("     ,sum( case when product_division in (7) then ds.payment_value else  ds.product_value - discount_value end ) as total_contract_value ");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append("     ,sum( case when product_division in (7) then ds.payment_value else  ds.discount_detail_value_no_tax end ) as total_contract_value ");
        } else {
            sql.append("     ,sum( case when product_division in (7) then ds.payment_value else  ds.discount_detail_value_in_tax end ) as total_contract_value ");
        }
        //IVS_LVTu end edit 2015/06/23 Bug #36488
        //IVS_LVTu end edit 2015/05/05 Bug #36492
        //}
        //LVTu end edit 2015/03/20 Bug #35449     
        sql.append(" from (");
        sql.append(" select distinct ds.*");
        //IVS_LVTu start add 2015/06/23 Bug #36488
        //IVS_LVTu start edit 2015/07/03 Bug #39338
        //sql.append(" ,dpd.payment_value ");
        sql.append("     , (select sum(CASE WHEN product_division IN (7) THEN dpd.payment_value else 0 end) ");
        sql.append("     from data_payment_detail dpd ");
        sql.append("     where dpd.shop_id = ds.shop_id and dpd.slip_no = ds.slip_no ");
        sql.append("     and delete_date is null ");
        sql.append("     ) as payment_value ");
        //IVS_LVTu end edit 2015/07/03 Bug #39338
        //IVS_LVTu end add 2015/06/23 Bug #36488
        sql.append(" from view_data_sales_detail_valid ds");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        
        //IVS_LVTu start add 2015/06/23 Bug #36488
        sql.append("      left join data_payment_detail dpd on dpd.shop_id = ds.shop_id and dpd.slip_no = ds.slip_no ");
        //IVS_LVTu end add 2015/06/23 Bug #36488
        sql.append("      inner join data_contract dc");
        sql.append("      on ds.shop_id = dc.shop_id and ds.slip_no = dc.slip_no and ds.product_id = dc.product_id");
        // IVS SANG START DELETE 20131218 [gbソース]業務報告のコース契約金額の不具合
        // sql.append("      inner join data_sales_detail dsd");
        // sql.append("      on ds.shop_id = dsd.shop_id and ds.slip_no=dsd.slip_no");
        // IVS SANG END DELETE 20131218 [gbソース]業務報告のコース契約金額の不具合
        // IVS SANG START EDIT 20131218 [gbソース]業務報告のコース契約金額の不具合
        // sql.append(" where dsd.product_division = 5 and  ds.shop_id in (").append(paramBean.getShopIDList()).append(")");
        sql.append(" where ds.shop_id in (").append(paramBean.getShopIDList()).append(")");
        // IVS SANG END EDIT 20131218 [gbソース]業務報告のコース契約金額の不具合
        sql.append(" and ds.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
         
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
        if (paramBean.getStaffId() != null) {
            sql.append(" and ds.staff_id = " + paramBean.getStaffId().toString());
        }
        }
         
        //IVS_LVTu start edit 2015/06/23 Bug #36488
        //sql.append(" and ds.product_division = 5 ");
        sql.append(" and ds.product_division in (5, 7) ");
        //IVS_LVTu end edit 2015/06/23 Bug #36488
        //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append("    exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         view_data_sales_detail_valid ds1\n");
            sql.append("         inner join mst_course mc on ds1.product_id = mc.course_id and ds.product_division = ds1.product_division and ds1.product_division in (5, 7) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where ds1.slip_no = ds.slip_no and ds1.shop_id = ds.shop_id and ds1.slip_detail_no = ds.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in ( " + paramBean.getListCategoryId() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }
        sql.append(" ) ds");
        //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応        
        sql.append(" group by ds.product_id \n ");
        //LVTu start add 2015/03/20 Bug #35449 
        sql.append(" ,sales_date \n ");
        //LVTu end add 2015/03/20 Bug #35449 
        sql.append("order by ds.product_id \n");
        //nhanvt end edit 20150205Bug #35170
        sql.append(") a \n");
        //LVTu start add 2015/03/20 Bug #35449 
        sql.append(" group by sales_date ");
        sql.append(") t \n");
        //LVTu end add 2015/03/20 Bug #35449 
        System.out.println("************************:" + sql.toString());
        //LVTu end edit 2015/10/27 Bug #43950

        try {
            //nhanvt khtn
            rs = cw.executeQuery(sql.toString());
        } catch (Exception e) {
            System.err.println(sql);
            throw e;
        }


        if (rs.next()) {
            /* GEOBECK start edit 20160824 #54164 */
            //paramMap.put("totalContractNum", rs.getInt("total_contract_num"));
            paramMap.put("totalContractNum", rs.getLong("total_contract_num"));
            /* GEOBECK end edit 20160824 #54164 */
            //LVTu start edit 2015/03/20 Bug #35449 
            //paramMap.put("totalContractValue", rs.getInt("total_contract_value"));
            paramMap.put("totalContractValue", rs.getDouble("total_contract_value"));
            //LVTu end edit 2015/03/20 Bug #35449 
        } else {
            paramMap.put("totalContractNum", Integer.valueOf(0));
            paramMap.put("totalContractValue", Integer.valueOf(0));
        }
        rs.close();

        //コース消化の売上集計取得
        sql.setLength(0);
        sql.append("select \n");
        sql.append("sum(total_consumption_num) as total_consumption_num, \n");
        sql.append("sum (total_consumption_value) as total_consumption_value  \n");
        sql.append("from  ( \n");
        sql.append(" select \n ");
        //sql.append("     count(dc.product_id) as total_consumption_num");

        sql.append("     sum(coalesce(dcd.product_num,0)) as total_consumption_num");
        //nhanvt start edit 20150205 Bug #35171
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            sql.append("     ,ceil(sum(dcd.product_num*dc.product_value/dc.product_num) / (1.0 + get_tax_rate(max(coalesce(dsd.sales_date,current_date))))) as total_consumption_value");
        } else {
            // 税込み
            sql.append("     ,sum(dcd.product_num*dc.product_value/dc.product_num) as total_consumption_value");
        }
        sql.append(",dc.product_id ");
        
        sql.append("  from      ");       
        sql.append(" (select distinct ds.sales_date, dsd.slip_no, dsd.shop_id, dsd.contract_detail_no, dsd.product_id, dsd.product_division ");
        sql.append(" from data_sales ds");
        sql.append(" inner join data_sales_detail dsd on ds.slip_no = dsd.slip_no and ds.shop_id = dsd.shop_id"); 
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        
        sql.append(" where dsd.shop_id in (").append(paramBean.getShopIDList()).append(")");
        sql.append(" and ds.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
        sql.append(" and dsd.product_division = 6 ");
         
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
        if (paramBean.getStaffId() != null) {
            sql.append(" and ds.staff_id = " + paramBean.getStaffId().toString());
        }
        }
         
        //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append("    exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         view_data_sales_detail_valid ds1\n");
            sql.append("         inner join mst_course mc on ds1.product_id = mc.course_id and dsd.product_division = ds1.product_division and ds1.product_division in (6) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where ds1.slip_no = dsd.slip_no and ds1.shop_id = dsd.shop_id and ds1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getListCategoryId() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }
        //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応    
        sql.append(" ) dsd");
        sql.append("     inner join data_contract_digestion dcd");
        sql.append("     on dsd.shop_id = dcd.shop_id and dsd.slip_no = dcd.slip_no and dcd.contract_detail_no = dsd.contract_detail_no");
        sql.append("     inner join data_contract dc");
        //Luc start edit New request #30962　業務報告のトータルビューティ対応
        //IVS_LVTu start edit 2015/08/12 Bug #41945
        //sql.append("     on dcd.shop_id = dc.shop_id and dcd.contract_no = dc.contract_no and dcd.contract_detail_no = dc.contract_detail_no and dc.product_id = dsd.product_id");
        sql.append("     on dcd.contract_shop_id = dc.shop_id and dcd.contract_no = dc.contract_no and dcd.contract_detail_no = dc.contract_detail_no and dc.product_id = dsd.product_id");
        //IVS_LVTu end edit 2015/08/12 Bug #41945
        //Luc end edit New request #30962　業務報告のトータルビューティ対応
        
        //nhanvt end edit 20150205 Bug #35171  
        sql.append(" group by dc.product_id   ");
        sql.append("order by dc.product_id ");
        sql.append(") dc ");

        try {
            rs = cw.executeQuery(sql.toString());
        } catch (Exception e) {
            System.err.println(sql);
            throw e;
        }

        if (rs.next()) {
            paramMap.put("totalConsumptionNum", rs.getDouble("total_consumption_num"));
            paramMap.put("totalConsumptionValue", rs.getFloat("total_consumption_value"));
        } else {
            paramMap.put("totalConsumptionNum", Double.valueOf(0));
            paramMap.put("totalConsumptionValue", Float.valueOf(0));
        }
        rs.close();

        //出力日時
        paramMap.put("OutputTime", new java.util.Date());

        ArrayList<BusinessSubReportBean> dataSource = new ArrayList<BusinessSubReportBean>();
        BusinessSubReportBean subReportBean = new BusinessSubReportBean();
        subReportBean.setSubReportTechnic(new JRBeanCollectionDataSource(technicList));
        subReportBean.setSubReportItem(new JRBeanCollectionDataSource(itemList));
        dataSource.add(subReportBean);

        JExcelApi jx = new JExcelApi("業務報告");
        if (SystemInfo.getDatabase().startsWith("pos_hair_lim")) {
            //limカスタマイズ（解約済み）
            jx.setTemplateFile("/reports/業務報告_LIM.xls");
        } else {
            jx.setTemplateFile("/reports/業務報告.xls");
        }

        //------------------------------
        // ヘッダ
        //------------------------------
        jx.setValue(6, 3, paramMap.get("TargetStartDate") + " 〜 " + paramMap.get("TargetEndDate"));
        jx.setValue(6, 4, paramMap.get("TargetName"));
        jx.setValue(6, 5, paramMap.get("TargetDayCount"));
        jx.setValue(6, 6, paramMap.get("TaxType"));
        if(paramBean.getUseShopCategory()==1) {
            jx.setValue(14, 5, paramBean.getListCategoryName());
        }else {
            jx.setValue(12, 5, "");
            jx.setValue(13, 5, "");
            
        }
        jx.setValue(14, 6, paramMap.get("NewVisitType"));

        //------------------------------
        // 売上情報
        //------------------------------
        // 技術
        jx.setValue(1, 11, paramMap.get("TechnicTotal"));
        long technicAmount = Long.parseLong(paramMap.get("TechnicAmount").toString());
        jx.setValue(7, 11, technicAmount < 0 ? "-" : technicAmount);
        // 商品
        jx.setValue(11, 11, paramMap.get("ItemTotal"));
        long itemAmount = Long.parseLong(paramMap.get("ItemAmount").toString());
        jx.setValue(17, 11, itemAmount < 0 ? "-" : itemAmount);
        // 全体割引
        if(paramBean.getListCategoryId()==null|| paramBean.getListCategoryId().equals("")) {
            jx.setValue(25, 11, paramMap.get("AllDiscountPrice"));
        }else {
            jx.setValue(25, 11, 0);
        }
        // 累計総売上
        long amountTotal = Long.parseLong(paramMap.get("TechnicAmount").toString()) + Long.parseLong(paramMap.get("ItemAmount").toString());
        jx.setValue(33, 11, amountTotal < 0 ? "-" : amountTotal - Long.parseLong(paramMap.get("DiscountAmount").toString()));

        //------------------------------
        // 明細割引
        //------------------------------
        // 技術割引
        jx.setValue(42, 11, paramMap.get("TechnicDiscountPrice"));
        // 商品割引
        jx.setValue(46, 11, paramMap.get("ItemDiscountPrice"));

        //------------------------------
        // 消費税
        //------------------------------
        //IVS_LVTu start edit 2015/07/13 Bug #40181
        //jx.setValue(51, 11, paramMap.get("TotalTaxPrice"));
        /* GEOBECK start edit 20160824 #54164 */
        //jx.setValue(51, 11, Integer.parseInt(paramMap.get("TotalTaxPrice").toString()) - Integer.parseInt(paramMap.get("OverallDiscount").toString()));
        jx.setValue(51, 11, Long.parseLong(paramMap.get("TotalTaxPrice").toString()) - Long.parseLong(paramMap.get("OverallDiscount").toString()));
        /* GEOBECK end edit 20160824 #54164 */        
        //IVS_LVTu end edit 2015/07/13 Bug #40181


        //------------------------------
        // LIM用
        //------------------------------
        if (SystemInfo.getDatabase().startsWith("pos_hair_lim")) {
            //------------------------------
            // 売上情報
            //------------------------------
            // 技術
            jx.setValue(1, 12, paramMap.get("TechnicTotal_LIM"));
            technicAmount = Long.parseLong(paramMap.get("TechnicAmount_LIM").toString());
            jx.setValue(7, 12, technicAmount < 0 ? "-" : technicAmount);
            // 商品
            jx.setValue(11, 12, paramMap.get("ItemTotal_LIM"));
            itemAmount = Long.parseLong(paramMap.get("ItemAmount_LIM").toString());
            jx.setValue(17, 12, itemAmount < 0 ? "-" : itemAmount);
            // 全体割引
            jx.setValue(25, 12, paramMap.get("AllDiscountPrice_LIM"));
            // 累計総売上
            amountTotal = Long.parseLong(paramMap.get("TechnicAmount_LIM").toString()) + Long.parseLong(paramMap.get("ItemAmount_LIM").toString());
            jx.setValue(33, 12, amountTotal < 0 ? "-" : amountTotal - Long.parseLong(paramMap.get("DiscountAmount_LIM").toString()));

            //------------------------------
            // 消費税
            //------------------------------
            jx.setValue(51, 12, paramMap.get("TotalTaxPrice_LIM"));
        }

        //------------------------------
        // 技術クレーム
        //------------------------------
        // 数量
        jx.setValue(1, 16, paramMap.get("TechnicComplaintNum"));
        // 売上
        jx.setValue(3, 16, paramMap.get("TechnicComplaintPrice"));

        //------------------------------
        // 商品返品
        //------------------------------
        // 数量
        jx.setValue(8, 16, paramMap.get("ItemReturnNum"));
        // 売上
        jx.setValue(10, 16, paramMap.get("ItemReturnPrice"));

        //------------------------------
        // レジ精算
        //------------------------------
        // 現金売上
        jx.setValue(15, 16, paramMap.get("MoneyPrice"));
        // カード売上
        jx.setValue(19, 16, paramMap.get("CardPrice"));
        // 電子マネー
        jx.setValue(23, 16, paramMap.get("ECashPrice"));
        // 金券・その他
        jx.setValue(27, 16, paramMap.get("GiftPrice"));
        // 売掛金
        jx.setValue(31, 16, paramMap.get("BillValue"));

        //------------------------------
        // レジ入出金
        //------------------------------
        // 入金
        jx.setValue(36, 16, paramMap.get("CashIn"));
        // 出金
        jx.setValue(39, 16, paramMap.get("CashOut"));

        //------------------------------
        // コース契約
        //------------------------------
        //数量
        jx.setValue(1, 20, paramMap.get("totalContractNum"));
        //売上（預かり金）
        jx.setValue(4, 20, paramMap.get("totalContractValue"));

        //------------------------------
        // 消化金額
        //------------------------------
        //数量
        jx.setValue(8, 20, paramMap.get("totalConsumptionNum"));
        //実質売上
        jx.setValue(11, 20, paramMap.get("totalConsumptionValue"));

        //------------------------------
        // TODO 売掛金回収
        //------------------------------
        // 現金売上
        jx.setValue(15, 20, paramMap.get("CollectedCashValue"));
        // カード売上
        jx.setValue(19, 20, paramMap.get("CollectedCardPrice"));
        // 電子マネー
        jx.setValue(23, 20, paramMap.get("CollectedECashPrice"));
        // 金券・その他
        jx.setValue(27, 20, paramMap.get("CollectedGiftPrice"));
        // 売掛金
        jx.setValue(31, 20, paramMap.get("CollectedBillValue"));

        //------------------------------
        // プリペイド
        //------------------------------
        if (prepaidValue > 0) {
            jx.setValue(50, 16, prepaidValue);
        }

        //------------------------------
        // 入客状況
        //------------------------------
        // 技術客数
        jx.setValue(5, 24, paramMap.get("TechnicTotalNum"));
        jx.setValue(9, 24, paramMap.get("TechTotalPrice"));
        // 会員
        jx.setValue(5, 25, paramMap.get("MemberVisitNum"));
        jx.setValue(9, 25, paramMap.get("MemberSalesPrice"));
        // 非会員
        jx.setValue(5, 26, paramMap.get("GuestVisitNum"));
        jx.setValue(9, 26, paramMap.get("GuestSalesPrice"));
        // 指名
        jx.setValue(5, 27, paramMap.get("ChargeNum"));
        jx.setValue(9, 27, paramMap.get("ChargeValue"));
        // 固定2回
        jx.setValue(5, 28, paramMap.get("Fixed2Num"));
        jx.setValue(9, 28, paramMap.get("Fixed2Value"));
        // 固定3回
        jx.setValue(5, 29, paramMap.get("Fixed3Num"));
        jx.setValue(9, 29, paramMap.get("Fixed3Value"));
        // 固定4回
        jx.setValue(5, 30, paramMap.get("Fixed4Num"));
        jx.setValue(9, 30, paramMap.get("Fixed4Value"));
        // 固定5回以上
        jx.setValue(5, 31, paramMap.get("Fixed5Num"));
        jx.setValue(9, 31, paramMap.get("Fixed5Value"));
        // 新規
        jx.setValue(5, 33, paramMap.get("NewVisitNum"));
        jx.setValue(9, 33, paramMap.get("NewSalesPrice"));
        // 紹介
        jx.setValue(5, 34, paramMap.get("IntroducerNum"));
        jx.setValue(9, 34, paramMap.get("IntroducerValue"));
        // 女性
        jx.setValue(5, 35, paramMap.get("WomanVisitNum"));
        jx.setValue(9, 35, paramMap.get("WomanSalesPrice"));
        // 男性
        jx.setValue(5, 36, paramMap.get("ManVisitNum"));
        jx.setValue(9, 36, paramMap.get("ManSalesPrice"));
        //IVS_LVTu start edit 2015/10/23 New request #43757
        if (SystemInfo.getDatabase().startsWith("pos_hair_lim")) {
            // 総客数
            jx.setValue(9, 38, paramMap.get("TotalSalesPrice"));
            // 商品購入者
            jx.setValue(5, 39, paramMap.get("TechnicAndItemNum"));
            jx.setValue(9, 39, paramMap.get("TechnicAndItemPrice"));
            // 商品のみ客
            jx.setValue(5, 40, paramMap.get("ItemTotalNum"));
            jx.setValue(9, 40, paramMap.get("ItemTotalPrice"));
        }else {
            //WEB予約客
            jx.setValue(5, 37, paramMap.get("NumMobileFlag"));
            jx.setValue(9, 37, paramMap.get("ValueMobileFlag"));
            // 総客数
            jx.setValue(9, 39, paramMap.get("TotalSalesPrice"));
            //2016/08/15 #53772 geobeck add start------------------
            jx.setValue(5, 39, paramMap.get("TotalVisitNum"));
            //2016/08/15 #53772 geobeck add end--------------------
            // 商品購入者
            //2016/08/24 #53772 geobeck mod start----------------
            //jx.setValue(5, 40, paramMap.get("TechnicAndItemNum"));
            jx.setValue(5, 40, paramMap.get("ItemInNum"));
            //jx.setValue(9, 40, paramMap.get("TechnicAndItemPrice"));
            jx.setValue(9, 40, paramMap.get("ItemInPrice"));
            //2016/08/24 #53772 geobeck mod end------------------
            // 商品のみ客
            jx.setValue(5, 41, paramMap.get("ItemTotalNum"));
            jx.setValue(9, 41, paramMap.get("ItemTotalPrice"));
        }
        //IVS_LVTu end edit 2015/10/23 New request #43757

        int maxSize = Math.max(technicList.size(), itemList.size());
        //IVS_LVTu start edit 2015/10/26 New request #43757
        int defaultRow = 17;
        if (SystemInfo.getDatabase().startsWith("pos_hair_lim")) {
            defaultRow = 16;
        }
        if (maxSize > defaultRow) {
            //jx.insertRow(37, maxSize - 16);
            jx.insertRow(38, maxSize - defaultRow);
            for (int i = 0; i < maxSize - defaultRow; i++) {
                int row = 37 + i + 1;
                if (!SystemInfo.getDatabase().startsWith("pos_hair_lim")) {
                    row = 38 + i + 1;
                }
                //IVS_LVTu end edit 2015/10/26 New request #43757
                jx.mergeCells(16, row, 20, row);
                jx.mergeCells(21, row, 22, row);
                jx.mergeCells(23, row, 24, row);
                jx.mergeCells(25, row, 26, row);
                jx.mergeCells(27, row, 28, row);
                jx.mergeCells(29, row, 31, row);
                jx.mergeCells(32, row, 34, row);
                jx.mergeCells(36, row, 40, row);
                jx.mergeCells(41, row, 42, row);
                jx.mergeCells(43, row, 44, row);
                jx.mergeCells(45, row, 46, row);
                jx.mergeCells(47, row, 48, row);
                jx.mergeCells(49, row, 51, row);
                jx.mergeCells(52, row, 54, row);
            }
        }

        //------------------------------
        // 技術状況
        //------------------------------
        for (int i = 0; i < technicList.size(); i++) {
            int row = 24 + i;
            // 分類名
            jx.setValue(16, row, technicList.get(i).getProductClassName());
            // 数量
            jx.setValue(21, row, technicList.get(i).getSalesCount());
            // 人数
            jx.setValue(25, row, technicList.get(i).getCustomerCount());
            // 売上
            jx.setValue(29, row, technicList.get(i).getTotalPrice());
        }

        //------------------------------
        // 商品状況
        //------------------------------
        for (int i = 0; i < itemList.size(); i++) {
            int row = 24 + i;
            // 分類名
            jx.setValue(36, row, itemList.get(i).getProductClassName());
            // 数量
            jx.setValue(41, row, itemList.get(i).getSalesCount());
            // 人数
            jx.setValue(45, row, itemList.get(i).getCustomerCount());
            // 売上
            jx.setValue(49, row, itemList.get(i).getTotalPrice());
        }
        
        // vtbphuong start add 20150609 (code theo yeu cau KH ticket 37227
        //IVS_LVTu start edit 2015/07/10 Bug #40181
        //Double totalReceive =  Long.parseLong(paramMap.get("TechnicTotal").toString())+ Long.parseLong(paramMap.get("ItemTotal").toString()) - Long.parseLong(paramMap.get("AllDiscountPrice").toString()) +  (Double.parseDouble(paramMap.get("totalContractValue").toString())) ;
        Double totalReceive = 0d;
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            totalReceive = Long.parseLong(paramMap.get("TechnicTotal").toString())+ Long.parseLong(paramMap.get("ItemTotal").toString()) - Long.parseLong(paramMap.get("AllDiscountPrice").toString()) +  (Double.parseDouble(paramMap.get("totalContractValue").toString())) + (Long.parseLong(paramMap.get("TotalTaxPrice").toString())) ;
        }else {
            totalReceive = Long.parseLong(paramMap.get("TechnicTotal").toString())+ Long.parseLong(paramMap.get("ItemTotal").toString()) - Long.parseLong(paramMap.get("AllDiscountPrice").toString()) +  (Double.parseDouble(paramMap.get("totalContractValue").toString())) ;
        }
        //IVS_LVTu end edit 2015/07/10 Bug #40181
  
        Double money = Double.parseDouble(paramMap.get("MoneyPrice").toString()) +   Double.parseDouble(paramMap.get("CardPrice").toString()) +  Double.parseDouble( paramMap.get("ECashPrice").toString()) + Double.parseDouble( paramMap.get("GiftPrice").toString()) +  Double.parseDouble(paramMap.get("BillValue").toString());
        //IVS_LVTu start edit 2015/08/25 Bug #42208
        if(money > totalReceive && (paramBean.getListCategoryId() == null || paramBean.getListCategoryId().equals("")))
        {
            Double Realmoney =  totalReceive - ( Double.parseDouble(paramMap.get("CardPrice").toString()) +  Double.parseDouble( paramMap.get("ECashPrice").toString()) + Double.parseDouble( paramMap.get("GiftPrice").toString()) +  Double.parseDouble(paramMap.get("BillValue").toString()));
            // 現金売上
        jx.setValue(15, 16, Realmoney);
        }
        //IVS_LVTu end edit 2015/08/25 Bug #42208
        // vtbphuong end add 20150609 (code theo yeu cau KH ticket 37227

        jx.openWorkbook();

        return true;

    }

	/**
	 * 業務報告出力ロジック。効果指標数値分析(店舗別)する時に使用。
	 *
	 * @param paramBean レポートパラメータBean
	 * @return 
	 * @exception Exception
	 */
	public HashMap<Integer, EffectIndicatorAnalysisBean> viewBusinessReportForAllShop(ReportParameterBean paramBean) throws Exception {
		ConnectionWrapper cw = SystemInfo.getConnection();

		// 戻り値を初期化
		HashMap<Integer, EffectIndicatorAnalysisBean> map = new HashMap<Integer, EffectIndicatorAnalysisBean>();
		for (String s: paramBean.getShopIDList().split(",")) {
			map.put(Integer.parseInt(s), new EffectIndicatorAnalysisBean());
		}
		StringBuilder sql = new StringBuilder(1000);
		sql.append(" select technic_class_id from mst_technic_class");
		sql.append(" where delete_date IS NULL and prepaid = 0");
		sql.append(" AND EXISTS (SELECT 1 FROM mst_use_product mup INNER JOIN mst_technic mt ON mup.product_id = mt.technic_id");
		sql.append(" WHERE mup.shop_id in (" + paramBean.getShopIDList() + ") and mup.product_division = 1 AND mt.technic_class_id = mst_technic_class.technic_class_id)");
		sql.append(" order by display_seq");
		ResultSetWrapper rs = cw.executeQuery(sql.toString());
		Iterator<Entry<Integer, EffectIndicatorAnalysisBean>> iter = map.entrySet().iterator();
		while (iter.hasNext()) {
			ArrayList<BusinessReportBean> technicList = new ArrayList<BusinessReportBean>();
			BusinessReportBean business = null;
			rs.beforeFirst();
			while (rs.next()) {
				business = new BusinessReportBean();
				business.setProductClassId(rs.getInt("technic_class_id"));
				business.setCustomerCount(0);
				technicList.add(business);
			}

			iter.next().getValue().setTechIdNumList(technicList);
		}
		rs.close();
		
		Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
		paramBean.setTaxRate(tax_rate);

		StringBuffer whereCondition = new StringBuffer();
		whereCondition.append(" ds.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' ");

		if (null != paramBean.getStaffId() && !"".equals(paramBean.getStaffId())) {
			whereCondition.append(" AND ds.staff_id = '" + paramBean.getStaffId() + "' ");
		}

		//技術状況
		sql.setLength(0);
		sql.append(" select");
		sql.append("      mtc.technic_class_id");
		sql.append("     ,mtc.technic_class_name");
		sql.append("     ,coalesce(ds.shop_id, 0) as shop_id");
		sql.append("     ,coalesce(ds.customer_count, 0) as customer_count");
		sql.append(" from");
		sql.append("     mst_technic_class mtc");
		sql.append("         left join");
		sql.append("             (");
		sql.append("                 select");
		sql.append("                      mt.technic_class_id");
		sql.append("                      ,dsd.shop_id");
		sql.append("                     ,count(distinct dsd.slip_no) as customer_count");
		sql.append(" 				from");
		sql.append("                     view_data_sales_detail_valid dsd");
                
		sql.append(" 				        left join mst_technic mt");
		sql.append(" 				               on mt.technic_id = dsd.product_id");
		sql.append(" 				where");
		sql.append("                         dsd.product_division in (1,3)");
		sql.append("                     and dsd.shop_id in (" + paramBean.getShopIDList() + ")");
		sql.append("                     and dsd.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDate()));
		sql.append("                                            and " + SQLUtil.convertForSQL(paramBean.getTargetEndDate()));
		if (paramBean.getStaffId() != null) {
			sql.append("                 and dsd.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
		}
		sql.append("                 group by");
		sql.append("                     mt.technic_class_id,dsd.shop_id");
		sql.append("             ) ds");
		sql.append("             on ds.technic_class_id = mtc.technic_class_id");
		sql.append(" where");
		sql.append("         mtc.delete_date is null");
		sql.append("     and mtc.prepaid = 0");
		sql.append("     and exists");
		sql.append("         (");
		sql.append("             select 1");
		sql.append("             from");
		sql.append("                 mst_use_product mup");
		sql.append("                     inner join mst_technic mt");
		sql.append("                             on mup.product_id = mt.technic_id");
		sql.append("             where");
		sql.append("                     mup.shop_id in (" + paramBean.getShopIDList() + ")");
		sql.append("                 and mup.product_division = 1");
		sql.append("                 and mt.technic_class_id = mtc.technic_class_id");
		sql.append("         )");
                //IVS LUC START ADD 20141118 業務報告のトータルビューティ対応
                if ((paramBean.getListCategoryId()!= null && !paramBean.getListCategoryId().equals(""))) {
                    sql.append("         and mtc.shop_category_id in ( " + paramBean.getListCategoryId() + ") ");
                }
                 //IVS LUC END ADD 20141118 業務報告のトータルビューティ対応
		sql.append(" order by");
		sql.append("     mtc.display_seq");
		rs = cw.executeQuery(sql.toString());
		while (rs.next()) {
			int technicClassId = rs.getInt("technic_class_id");
			int shopId         = rs.getInt("shop_id");
			int customerCount  = rs.getInt("customer_count");
			if (shopId > 0 && customerCount > 0) {
				for (BusinessReportBean b :map.get(shopId).getTechIdNumList()) {
					if (b.getProductClassId() == technicClassId) {
						b.setCustomerCount(customerCount);
						break;
					}
				}
			}
		}
		rs.close();

		//入客状況
		sql.setLength(0);
		sql.append(" select\n");
		sql.append("      ds.shop_id");
		sql.append("     ,sum(1) as customer_total\n");
		sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and dsd.item_num + dsd.item_crame_num = 0) then 1 else 0 end)  as tech_only_num\n");
		sql.append("     ,sum(case when (dsd.item_num + dsd.item_crame_num > 0 and dsd.tech_num + dsd.tech_crame_num = 0) then 1 else 0 end)  as item_only_num\n");
		sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and dsd.item_num + dsd.item_crame_num > 0) then 1 else 0 end)  as tech_and_item_num\n");
		// 自店新規
		sql.append(" ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1) then 1 else 0 end)           as new_commer\n");
		// 紹介(新規かつ紹介あり)
		sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1 and mc.introducer_id is not null) then 1 else 0 end) as introduce\n");
		// 指名
		sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and ds.designated_flag = true) then 1 else 0 end)    as charge\n");
		sql.append(" from\n");
		sql.append("     data_sales ds\n");
		sql.append("         inner join\n");
		sql.append("             (\n");
		sql.append("                 select\n");
		sql.append("                      dsd.shop_id, dsd.slip_no\n");
		// 技術売上
		sql.append("                   ,sum(case when dsd.product_division = 1 then " + makeValueString(paramBean) + " else 0 end) as sales_value\n");
		// 技術クレーム売上
		sql.append("                     ,sum(case when dsd.product_division = 3 then " + makeValueString(paramBean) + " else 0 end) as sales_crame_value\n");
		// 商品売上
		sql.append("                     ,sum(case when dsd.product_division = 2 then " + makeValueString(paramBean) + " else 0 end) as item_value\n");
		// 商品クレーム売上
		sql.append("                     ,sum(case when dsd.product_division = 4 then " + makeValueString(paramBean) + " else 0 end) as item_crame_value\n");
		// 技術客数
		sql.append("                     ,sum(case dsd.product_division when 1 then 1 else 0 end) as tech_num\n");
		// 技術客数
		sql.append("                     ,sum(case dsd.product_division when 3 then 1 else 0 end) as tech_crame_num\n");
		// 商品客数
		sql.append("                     ,sum(case dsd.product_division when 2 then 1 else 0 end) as item_num\n");
		sql.append("                     ,sum(case dsd.product_division when 4 then 1 else 0 end) as item_crame_num\n");
		sql.append("                 from\n");
		sql.append("                     data_sales ds\n");
		sql.append("                         inner join view_data_sales_detail_valid dsd\n");
		sql.append("                                 on dsd.shop_id = ds.shop_id\n");
		sql.append("                                and dsd.slip_no = ds.slip_no\n");
		sql.append("                 where\n");
		sql.append("                         ds.delete_date is null\n");
		sql.append("                     and ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
		sql.append("                     and ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
		sql.append("                                           and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
		sql.append("                     and dsd.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
		sql.append("                                           and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
		sql.append("                 \ngroup by\n");
		sql.append("                      dsd.shop_id");
		sql.append("                     ,dsd.slip_no\n");
		sql.append("             ) dsd\n");
		sql.append("             on dsd.shop_id = ds.shop_id\n");
		sql.append("             and dsd.slip_no = ds.slip_no\n");
		sql.append("         left outer join\n");
		sql.append("             (\n");
		sql.append("                 select\n");
		sql.append("                      customer_id\n");
		sql.append("                     ,customer_no\n");
		sql.append("                     ,sex\n");
		sql.append("                     ,before_visit_num\n");
		sql.append("                     ,introducer_id\n");
		sql.append("                 from\n");
		sql.append("                     mst_customer mc\n");
		sql.append("                 where\n");
		sql.append("                     exists\n");
		sql.append("                     (\n");
		sql.append("                         select 1\n");
		sql.append("                         from\n");
		sql.append("                             data_sales\n");
		sql.append("                         where\n");
		sql.append("                                 customer_id = mc.customer_id\n");
		sql.append("                             and delete_date is null\n");
		sql.append("                             and sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
		sql.append("                                                and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
		if (paramBean.getStaffId() != null) {
			sql.append("                        \n and staff_id = " + paramBean.getStaffId().toString());
		}
		sql.append("                     )\n");
		sql.append("             ) mc\n");
		sql.append("             on mc.customer_id = ds.customer_id\n");
		sql.append(" where\n");
		sql.append("         ds.delete_date is null\n");
		sql.append("     and ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
		sql.append("     and ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
		sql.append("                           and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
		if (paramBean.getStaffId() != null) {
			sql.append("\n and ds.staff_id = " + paramBean.getStaffId().toString());
		}
		sql.append(" group by ds.shop_id");
		
		try {
			rs = cw.executeQuery(sql.toString());
		} catch (Exception e) {
			System.err.println(sql);
			throw e;
		}

		while (rs.next()) {
			EffectIndicatorAnalysisBean bean = map.get(rs.getInt("shop_id"));
			// 技術客数
			bean.setTechnicTotalNum(rs.getInt("tech_only_num") + rs.getInt("tech_and_item_num"));
			// 商品のみ客
			bean.setItemTotalNum(rs.getInt("item_only_num"));
			// 商品購入者
			bean.setItemBuyNum(rs.getInt("tech_and_item_num") + rs.getInt("item_only_num"));
			// 紹介数
			bean.setIntroducerNum(rs.getInt("introduce"));
			// 指名客数
			bean.setChargeNum(rs.getInt("charge"));
			// 新規客数
			bean.setNewVisitNum(rs.getInt("new_commer"));
		}
		rs.close();

                //売上情報
		sql.setLength(0);
		sql.append("select\n");
		sql.append(" shop_id,");
		sql.append(" sum(case dsd.product_division when 1 then\n" + "dsd.discount_detail_value_in_tax else 0 end) as technic_total,\n");
		sql.append(" sum(case dsd.product_division when 2 then\n" + "dsd.discount_detail_value_in_tax  when 4 then dsd.discount_detail_value_in_tax  else 0 end) as item_total\n");
		sql.append(" from view_data_sales_detail_valid dsd \n");
		sql.append(" where");
		sql.append(" shop_id in (" + paramBean.getShopIDList() + ")");
		sql.append(" and sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
		if (paramBean.getStaffId() != null) {
			sql.append(" and staff_id = '" + paramBean.getStaffId().toString() + "'");
		}
//                //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
//                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
//                    sql.append(" and \n");
//                    sql.append(" (	\n");
//                    sql.append(" exists (	\n");
//                    sql.append("         select 1 from \n");
//                    sql.append("         view_data_sales_detail_valid dsd1\n");
//                    sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division=1\n");
//                    sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
//                    sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n");
//                    sql.append("         and mtc.shop_category_id in( " + paramBean.getListCategoryId() + ")	\n");
//                    sql.append("         ) 	\n");
//                    sql.append(" or \n");
//                    sql.append(" exists(\n");
//                    sql.append("         select 1 from\n");
//                    sql.append("         view_data_sales_detail_valid dsd1\n");
//                    sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n");
//                    sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
//                    sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
//                    sql.append("         and mic.shop_category_id in( " + paramBean.getListCategoryId()+ ")\n");
//                    sql.append("         )\n");
//                    sql.append(" )\n");
//                }
//                //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
		sql.append(" group by shop_id");
		rs = cw.executeQuery(sql.toString());
		while (rs.next()) {
			EffectIndicatorAnalysisBean bean = map.get(rs.getInt("shop_id"));
			// 技術売上
			bean.setTechnicTotal(rs.getInt("technic_total"));
			// 商品売上
			bean.setItemTotal(rs.getInt("item_total"));
		}
		rs.close();


		sql.setLength(0);
		sql.append(" select\n");
		sql.append(" ds.shop_id,");
		sql.append(" sum(ds.discount_value) as all_discount\n");
		sql.append(" from view_data_sales_valid ds\n");
		sql.append(" where ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
		if (paramBean.getStaffId() != null) {
			sql.append(" and ds.staff_id=" + paramBean.getStaffId().toString() + "\n");
		}
		sql.append(" and ds.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
		sql.append(" and exists (select 1 from view_data_sales_detail_valid where shop_id=ds.shop_id and slip_no=ds.slip_no and product_division in(1,2))");
		sql.append(" group by ds.shop_id");
		rs = cw.executeQuery(sql.toString());
		while (rs.next()) {
			EffectIndicatorAnalysisBean bean = map.get(rs.getInt("shop_id"));
			// 全体割引
			bean.setAllDiscountPrice(rs.getInt("all_discount"));
		}
		rs.close();

		// 返す
		return map;
	}

	/**
	 * 業務報告出力ロジック。効果指標数値分析(担当者別)する時に使用。
	 *
	 * @param paramBean レポートパラメータBean
	 * @return 
	 * @exception Exception
	 */
	public HashMap<Integer, EffectIndicatorAnalysisBean> viewBusinessReportForAllStaff(List<Integer> staffIdList, ReportParameterBean paramBean) throws Exception {
		ConnectionWrapper cw = SystemInfo.getConnection();

		// 戻り値を初期化
		HashMap<Integer, EffectIndicatorAnalysisBean> map = new HashMap<Integer, EffectIndicatorAnalysisBean>();
		for (int staffId : staffIdList) {
			map.put(staffId, new EffectIndicatorAnalysisBean());
		}
		StringBuilder sql = new StringBuilder(1000);
		sql.append(" select technic_class_id from mst_technic_class");
		sql.append(" where delete_date IS NULL and prepaid = 0");
		sql.append(" AND EXISTS (SELECT 1 FROM mst_use_product mup INNER JOIN mst_technic mt ON mup.product_id = mt.technic_id");
		sql.append(" WHERE mup.shop_id in (" + paramBean.getShopIDList() + ") and mup.product_division = 1 AND mt.technic_class_id = mst_technic_class.technic_class_id)");
		sql.append(" order by display_seq");
		ResultSetWrapper rs = cw.executeQuery(sql.toString());
		Iterator<Entry<Integer, EffectIndicatorAnalysisBean>> iter = map.entrySet().iterator();
		while (iter.hasNext()) {
			ArrayList<BusinessReportBean> technicList = new ArrayList<BusinessReportBean>();
			BusinessReportBean business = null;
			rs.beforeFirst();
			while (rs.next()) {
				business = new BusinessReportBean();
				business.setProductClassId(rs.getInt("technic_class_id"));
				business.setCustomerCount(0);
				technicList.add(business);
			}

			iter.next().getValue().setTechIdNumList(technicList);
		}
		rs.close();
		
		Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
		paramBean.setTaxRate(tax_rate);

		StringBuffer whereCondition = new StringBuffer();
		whereCondition.append(" ds.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' ");

		if (null != paramBean.getStaffId() && !"".equals(paramBean.getStaffId())) {
			whereCondition.append(" AND ds.staff_id = '" + paramBean.getStaffId() + "' ");
		}

		//技術状況
		sql.setLength(0);
		sql.append(" select");
		sql.append("      mtc.technic_class_id");
		sql.append("     ,mtc.technic_class_name");
		sql.append("     ,coalesce(ds.staff_id, 0) as staff_id");
		sql.append("     ,coalesce(ds.customer_count, 0) as customer_count");
		sql.append(" from");
		sql.append("     mst_technic_class mtc");
		sql.append("         left join");
		sql.append("             (");
		sql.append("                 select");
		sql.append("                      mt.technic_class_id");
		sql.append("                      ,dsd.staff_id");
		sql.append("                     ,count(distinct dsd.slip_no) as customer_count");
		sql.append(" 				from");
		sql.append("                     view_data_sales_detail_valid dsd");
		sql.append(" 				        left join mst_technic mt");
		sql.append(" 				               on mt.technic_id = dsd.product_id");
		sql.append(" 				where");
		sql.append("                         dsd.product_division in (1,3)");
		sql.append("                     and dsd.shop_id in (" + paramBean.getShopIDList() + ")");
		sql.append("                     and dsd.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDate()));
		sql.append("                                            and " + SQLUtil.convertForSQL(paramBean.getTargetEndDate()));
		if (paramBean.getStaffId() != null) {
			sql.append("                 and dsd.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
		}
		sql.append("                 group by");
		sql.append("                     mt.technic_class_id,dsd.staff_id");
		sql.append("             ) ds");
		sql.append("             on ds.technic_class_id = mtc.technic_class_id");
		sql.append(" where");
		sql.append("         mtc.delete_date is null");
		sql.append("     and mtc.prepaid = 0");
		sql.append("     and exists");
		sql.append("         (");
		sql.append("             select 1");
		sql.append("             from");
		sql.append("                 mst_use_product mup");
		sql.append("                     inner join mst_technic mt");
		sql.append("                             on mup.product_id = mt.technic_id");
		sql.append("             where");
		sql.append("                     mup.shop_id in (" + paramBean.getShopIDList() + ")");
		sql.append("                 and mup.product_division = 1");
		sql.append("                 and mt.technic_class_id = mtc.technic_class_id");
		sql.append("         )");
                  //IVS LUC START ADD 20141118 業務報告のトータルビューティ対応
                if ((paramBean.getListCategoryId()!= null && !paramBean.getListCategoryId().equals(""))) {
                    sql.append("         and mtc.shop_category_id in ( " + paramBean.getListCategoryId() + ") ");
                }
                 //IVS LUC END ADD 20141118 業務報告のトータルビューティ対応
		sql.append(" order by");
		sql.append("     mtc.display_seq");
		rs = cw.executeQuery(sql.toString());
		while (rs.next()) {
			int technicClassId = rs.getInt("technic_class_id");
			int staffId         = rs.getInt("staff_id");
			int customerCount  = rs.getInt("customer_count");
			if (staffId > 0 && customerCount > 0 && map.containsKey(staffId)) {
				for (BusinessReportBean b :map.get(staffId).getTechIdNumList()) {
					if (b.getProductClassId() == technicClassId) {
						b.setCustomerCount(customerCount);
						break;
					}
				}
			}
		}
		rs.close();

		//入客状況
		sql.setLength(0);
		sql.append(" select\n");
		sql.append("      ds.staff_id");
		sql.append("     ,sum(1) as customer_total\n");
		sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and dsd.item_num + dsd.item_crame_num = 0) then 1 else 0 end)  as tech_only_num\n");
		sql.append("     ,sum(case when (dsd.item_num + dsd.item_crame_num > 0 and dsd.tech_num + dsd.tech_crame_num = 0) then 1 else 0 end)  as item_only_num\n");
		sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and dsd.item_num + dsd.item_crame_num > 0) then 1 else 0 end)  as tech_and_item_num\n");
		// 自店新規
		sql.append(" ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1) then 1 else 0 end)           as new_commer\n");
		// 紹介(新規かつ紹介あり)
		sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1 and mc.introducer_id is not null) then 1 else 0 end) as introduce\n");
		// 指名
		sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and ds.designated_flag = true) then 1 else 0 end)    as charge\n");
		sql.append(" from\n");
		sql.append("     data_sales ds\n");
		sql.append("         inner join\n");
		sql.append("             (\n");
		sql.append("                 select\n");
		sql.append("                      dsd.shop_id, dsd.slip_no\n");
		// 技術売上
		sql.append("                   ,sum(case when dsd.product_division = 1 then " + makeValueString(paramBean) + " else 0 end) as sales_value\n");
		// 技術クレーム売上
		sql.append("                     ,sum(case when dsd.product_division = 3 then " + makeValueString(paramBean) + " else 0 end) as sales_crame_value\n");
		// 商品売上
		sql.append("                     ,sum(case when dsd.product_division = 2 then " + makeValueString(paramBean) + " else 0 end) as item_value\n");
		// 商品クレーム売上
		sql.append("                     ,sum(case when dsd.product_division = 4 then " + makeValueString(paramBean) + " else 0 end) as item_crame_value\n");
		// 技術客数
		sql.append("                     ,sum(case dsd.product_division when 1 then 1 else 0 end) as tech_num\n");
		// 技術客数
		sql.append("                     ,sum(case dsd.product_division when 3 then 1 else 0 end) as tech_crame_num\n");
		// 商品客数
		sql.append("                     ,sum(case dsd.product_division when 2 then 1 else 0 end) as item_num\n");
		sql.append("                     ,sum(case dsd.product_division when 4 then 1 else 0 end) as item_crame_num\n");
		sql.append("                 from\n");
		sql.append("                     data_sales ds\n");
		sql.append("                         inner join view_data_sales_detail_valid dsd\n");
		sql.append("                                 on dsd.shop_id = ds.shop_id\n");
		sql.append("                                and dsd.slip_no = ds.slip_no\n");
		sql.append("                 where\n");
		sql.append("                         ds.delete_date is null\n");
		sql.append("                     and ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
		sql.append("                     and ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
		sql.append("                                           and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
		sql.append("                     and dsd.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
		sql.append("                                           and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
		sql.append("                 \ngroup by\n");
		sql.append("                      dsd.shop_id");
		sql.append("                     ,dsd.slip_no\n");
		sql.append("             ) dsd\n");
		sql.append("             on dsd.shop_id = ds.shop_id\n");
		sql.append("             and dsd.slip_no = ds.slip_no\n");
		sql.append("         left outer join\n");
		sql.append("             (\n");
		sql.append("                 select\n");
		sql.append("                      customer_id\n");
		sql.append("                     ,customer_no\n");
		sql.append("                     ,sex\n");
		sql.append("                     ,before_visit_num\n");
		sql.append("                     ,introducer_id\n");
		sql.append("                 from\n");
		sql.append("                     mst_customer mc\n");
		sql.append("                 where\n");
		sql.append("                     exists\n");
		sql.append("                     (\n");
		sql.append("                         select 1\n");
		sql.append("                         from\n");
		sql.append("                             data_sales\n");
		sql.append("                         where\n");
		sql.append("                                 customer_id = mc.customer_id\n");
		sql.append("                             and delete_date is null\n");
		sql.append("                             and sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
		sql.append("                                                and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
		if (paramBean.getStaffId() != null) {
			sql.append("                        \n and staff_id = " + paramBean.getStaffId().toString());
		}
		sql.append("                     )\n");
		sql.append("             ) mc\n");
		sql.append("             on mc.customer_id = ds.customer_id\n");
		sql.append(" where\n");
		sql.append("         ds.delete_date is null\n");
		sql.append("     and ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
		sql.append("     and ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
		sql.append("                           and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()));
		if (paramBean.getStaffId() != null) {
			sql.append("\n and ds.staff_id = " + paramBean.getStaffId().toString());
		}
		sql.append(" group by ds.staff_id");
		
		try {
			rs = cw.executeQuery(sql.toString());
		} catch (Exception e) {
			System.err.println(sql);
			throw e;
		}

		while (rs.next()) {
			int staffId = rs.getInt("staff_id");
			if (map.containsKey(staffId)) {
				EffectIndicatorAnalysisBean bean = map.get(staffId);
				// 技術客数
				bean.setTechnicTotalNum(rs.getInt("tech_only_num") + rs.getInt("tech_and_item_num"));
				// 商品のみ客
				bean.setItemTotalNum(rs.getInt("item_only_num"));
				// 商品購入者
				bean.setItemBuyNum(rs.getInt("tech_and_item_num") + rs.getInt("item_only_num"));
				// 紹介数
				bean.setIntroducerNum(rs.getInt("introduce"));
				// 指名客数
				bean.setChargeNum(rs.getInt("charge"));
				// 新規客数
				bean.setNewVisitNum(rs.getInt("new_commer"));
			}
		}
		rs.close();

                //売上情報
		sql.setLength(0);
		sql.append("select\n");
		sql.append(" staff_id,");
		sql.append(" sum(case dsd.product_division when 1 then\n" + "dsd.discount_detail_value_in_tax else 0 end) as technic_total,\n");
		sql.append(" sum(case dsd.product_division when 2 then\n" + "dsd.discount_detail_value_in_tax  when 4 then dsd.discount_detail_value_in_tax  else 0 end) as item_total\n");
		sql.append(" from view_data_sales_detail_valid dsd \n");
		sql.append(" where");
		sql.append(" shop_id in (" + paramBean.getShopIDList() + ")");
		sql.append(" and sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
		if (paramBean.getStaffId() != null) {
			sql.append(" and staff_id = '" + paramBean.getStaffId().toString() + "'");
		}
//                //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
//                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
//                    sql.append(" and \n");
//                    sql.append(" (	\n");
//                    sql.append(" exists (	\n");
//                    sql.append("         select 1 from \n");
//                    sql.append("         view_data_sales_detail_valid dsd1\n");
//                    sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division=1\n");
//                    sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
//                    sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n");
//                    sql.append("         and mtc.shop_category_id in( " + paramBean.getCategoryIDList() + ")	\n");
//                    sql.append("         ) 	\n");
//                    sql.append(" or \n");
//                    sql.append(" exists(\n");
//                    sql.append("         select * from\n");
//                    sql.append("         view_data_sales_detail_valid dsd1\n");
//                    sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n");
//                    sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
//                    sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
//                    sql.append("         and mic.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
//                    sql.append("         )\n");
//                    sql.append(" )\n");
//                }
//                //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
		sql.append(" group by staff_id");
		rs = cw.executeQuery(sql.toString());
		while (rs.next()) {
			int staffId = rs.getInt("staff_id");
			if (map.containsKey(staffId)) {
				EffectIndicatorAnalysisBean bean = map.get(staffId);
				// 技術売上
				bean.setTechnicTotal(rs.getInt("technic_total"));
				// 商品売上
				bean.setItemTotal(rs.getInt("item_total"));
			}
		}
		rs.close();


		sql.setLength(0);
		sql.append(" select\n");
		sql.append(" ds.staff_id,");
		sql.append(" sum(ds.discount_value) as all_discount\n");
		sql.append(" from view_data_sales_valid ds\n");
		sql.append(" where ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
		if (paramBean.getStaffId() != null) {
			sql.append(" and ds.staff_id=" + paramBean.getStaffId().toString() + "\n");
		}
		sql.append(" and ds.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
		sql.append(" and exists (select 1 from view_data_sales_detail_valid where shop_id=ds.shop_id and slip_no=ds.slip_no and product_division in(1,2))");
		sql.append(" group by ds.staff_id");
		rs = cw.executeQuery(sql.toString());
		while (rs.next()) {
			int staffId = rs.getInt("staff_id");
			if (map.containsKey(staffId)) {
				EffectIndicatorAnalysisBean bean = map.get(staffId);
				// 全体割引
				bean.setAllDiscountPrice(rs.getInt("all_discount"));
			}
		}
		rs.close();

		// 返す
		return map;
	}

    private String getBusinessReportTechInfo(ReportParameterBean paramBean) {

        StringBuilder sql = new StringBuilder(1000);

        try {

            sql.append(" select");
            sql.append("      mtc.technic_class_id");
            sql.append("     ,mtc.technic_class_name");
            sql.append("     ,coalesce(ds.product_num, 0) as product_num");
            sql.append("     ,coalesce(ds.sales_value, 0) as sales_value");
            sql.append("     ,coalesce(ds.customer_count, 0) as customer_count");
            sql.append(" from");
            sql.append("     mst_technic_class mtc");
            sql.append("         left join");
            sql.append("             (");
            sql.append("                 select");
            sql.append("                      mt.technic_class_id");
            //IVS_LVTu start add 2015/06/25 Bug #38427
            //IVS_LVTu start edit 2015/07/13 Bug #40181
            if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                sql.append("                     ,sum(case when dsd.product_division = 1 AND dsmt.shop_category_id = mtc.shop_category_id then dsd.product_num else 0 end) as product_num");
                sql.append("                         ,sum(case when dsd.product_division = 1 AND dsmt.shop_category_id = mtc.shop_category_id then " + this.makeValueString(paramBean) + " else 0 end) as sales_value");
            //IVS_LVTu end edit 2015/07/13 Bug #40181
            }else {
                sql.append("                     ,sum(dsd.product_num) as product_num");
            sql.append("                     ,sum(" + this.makeValueString(paramBean) + ") as sales_value");
            }
            //IVS_LVTu start add 2015/06/25 Bug #38427
            //IVS_LVTu start edit 2016/01/18 Bug #46807
            //IVS_LVTu start edit 2016/01/27 #Bug #47267
            //sql.append("                     ,count(distinct dsd.slip_no) as customer_count");
            //sql.append("                     ,count((select count(*) from data_sales ds ");
            //sql.append("                     where ds.shop_id = dsd.shop_id and ds.slip_no = dsd.slip_no ");
            //sql.append("                     )) as customer_count ");
            sql.append("                     , count(distinct CAST(dsd.shop_id as text) || '-' || CAST(dsd.slip_no as text))  as customer_count ");
            //IVS_LVTu end edit 2016/01/27 Bug #46807
            //IVS_LVTu end edit 2016/01/18 Bug #47267
            sql.append(" 				from");
            sql.append("                     view_data_sales_detail_valid dsd");
            
            if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                            //IVS_LVTu start add 2015/06/25 Bug #38427
                            sql.append("     inner join data_sales_detail dsd1 using(shop_id, slip_no ,product_id,slip_detail_no)");
                            sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
                            sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                            
                            sql.append("     and dsmt.shop_category_id in( " + paramBean.getListCategoryId()+ ")	\n ");
                            sql.append("     INNER JOIN mst_technic mt1 ON dsd.product_id = mt1.technic_id ");
                            sql.append("     AND dsd.product_division IN(1,3) ");
                            sql.append("     INNER JOIN mst_technic_class mtc ON mtc.technic_class_id = mt1.technic_class_id ");
                            //IVS_LVTu end add 2015/06/25 Bug #38427
            }
            
            sql.append(" 				        left join mst_technic mt");
            sql.append(" 				               on mt.technic_id = dsd.product_id");
            sql.append(" 				where");
            sql.append("                         dsd.product_division in (1,3)");
            sql.append("                     and dsd.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and dsd.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDate()));
            sql.append("                                            and " + SQLUtil.convertForSQL(paramBean.getTargetEndDate()));
            if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
                if (paramBean.getStaffId() != null) {
                    sql.append("                 and dsd.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
                }
            }

            sql.append("                 group by");
            sql.append("                     mt.technic_class_id");
            sql.append("             ) ds");
            sql.append("             on ds.technic_class_id = mtc.technic_class_id");
            sql.append(" where");
            //IVS_LVTu start edit 2016/05/09 Bug #50136
            //sql.append("         mtc.delete_date is null");
            sql.append("     mtc.prepaid = 0");
            sql.append("     and ");
            sql.append("     (exists");
            sql.append("         (");
            sql.append("             select 1");
            sql.append("             from");
            sql.append("                 mst_use_product mup");
            sql.append("                     inner join mst_technic mt");
            sql.append("                             on mup.product_id = mt.technic_id");
            sql.append("             where");
            sql.append("                     mup.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                 and mup.product_division = 1");
            sql.append("                 and mt.technic_class_id = mtc.technic_class_id");
            sql.append("                 and mtc.delete_date is null");
            sql.append("         )");
            sql.append("         or exists ");
            sql.append("         (select 1 ");
            sql.append(" 		from");
            sql.append("                     view_data_sales_detail_valid dsd");
            sql.append("                     left join mst_technic mt");
            sql.append("                     on mt.technic_id = dsd.product_id");
            sql.append(" 				where");
            sql.append("                         dsd.product_division in (1,3)");
            sql.append("                     and dsd.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and dsd.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDate()));
            sql.append("                                            and " + SQLUtil.convertForSQL(paramBean.getTargetEndDate()));
            sql.append("                     and mt.technic_class_id = mtc.technic_class_id");
            sql.append("         )");
            sql.append("         )");
            //IVS_LVTu end edit 2016/05/09 Bug #50136
              //IVS LUC START ADD 20141118 業務報告のトータルビューティ対応
                if ((paramBean.getListCategoryId()!= null && !paramBean.getListCategoryId().equals(""))) {
                    sql.append("         and mtc.shop_category_id in ( " + paramBean.getListCategoryId() + ") ");
                }
                 //IVS LUC END ADD 20141118 業務報告のトータルビューティ対応
            sql.append(" order by");
            sql.append("     mtc.display_seq");

        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("ReportLoigc#getBusinessReportTechInfo:" + sql);
        return sql.toString();
    }

    private String getBusinessReportPrepaidInfo(ReportParameterBean paramBean) {

        StringBuilder sql = new StringBuilder(1000);

        try {

            sql.append(" select");
            sql.append("     sum(coalesce(ds.sales_value, 0)) as sales_value");
            sql.append(" from");
            sql.append("     mst_technic_class mtc");
            sql.append("         left join");
            sql.append("             (");
            sql.append("                 select");
            sql.append("                      mt.technic_class_id");
            sql.append("                     ,sum(discount_detail_value_in_tax) as sales_value");
            sql.append("                 from");
            sql.append("                     (");
            sql.append("                         select");
            sql.append("                             *");
            sql.append("                         from");
            sql.append("                             view_data_sales_detail_valid_with_prepaid dsd");
            sql.append("                         where");
            sql.append("                             exists");
            sql.append("                             (");
            sql.append("                                 select 1");
            sql.append("                                 from");
            sql.append("                                     mst_technic mt");
            sql.append("                                         join mst_technic_class mtc");
            sql.append("                                         using (technic_class_id)");
            sql.append("                                 where");
            sql.append("                                         mtc.prepaid = 1");
            sql.append("                                     and mt.technic_id = dsd.product_id");
            sql.append("                                     and dsd.product_division in (1,3)");
            sql.append("                             )");
            sql.append("                     ) dsd");
            sql.append(" 			left join mst_technic mt");
            sql.append(" 			       on mt.technic_id = dsd.product_id");
            sql.append("                where");
            sql.append("                         dsd.product_division in (1,3)");
            sql.append("                     and dsd.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and dsd.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDate()));
            sql.append("                                            and " + SQLUtil.convertForSQL(paramBean.getTargetEndDate()));

            if (paramBean.getStaffId() != null) {
                sql.append("                 and dsd.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
            }

            sql.append("                 group by");
            sql.append("                     mt.technic_class_id");
            sql.append("             ) ds");
            sql.append("             on ds.technic_class_id = mtc.technic_class_id");
            sql.append(" where");
            sql.append("         mtc.delete_date is null");
            sql.append("     and mtc.prepaid = 1");
            sql.append("     and exists");
            sql.append("         (");
            sql.append("             select 1");
            sql.append("             from");
            sql.append("                 mst_use_product mup");
            sql.append("                     inner join mst_technic mt");
            sql.append("                             on mup.product_id = mt.technic_id");
            sql.append("             where");
            sql.append("                     mup.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                 and mup.product_division = 1");
            sql.append("                 and mt.technic_class_id = mtc.technic_class_id");
            sql.append("         )");

        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("ReportLogic#getBusinessReportPrepaidInfo:" + sql);
        return sql.toString();
    }

    private String getBusinessReportItemInfo(ReportParameterBean paramBean) {

        StringBuilder sql = new StringBuilder(1000);

        try {

            sql.append(" select");
            sql.append("      mgc.item_class_id");
            sql.append("     ,mgc.item_class_name");
            sql.append("     ,coalesce(ds.product_num, 0) as product_num");
            sql.append("     ,coalesce(ds.product_sales_num, 0) as product_sales_num");
            sql.append("     ,coalesce(ds.sales_value, 0) as sales_value");
            sql.append("     ,coalesce(ds.customer_count, 0) as customer_count");
            sql.append(" from");
            sql.append("     mst_item_class mgc");
            sql.append("         left join");
            sql.append("             (");
            sql.append("                 select");
            sql.append("                      mg.item_class_id");
            //IVS_LVTu start edit 2015/07/13 Bug #40181
            if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null ){
                sql.append("                     ,sum(case when dsd.product_division = 2 and dsmt.shop_category_id = mic.shop_category_id then dsd.product_num else dsd.product_num * -1 end) as product_num");
                sql.append("                     ,sum(case when dsd.product_division = 2 and dsmt.shop_category_id = mic.shop_category_id then dsd.product_num else 0 end) as product_sales_num");
                sql.append("                     ,sum(case when dsd.product_division = 2 and dsmt.shop_category_id = mic.shop_category_id then " + this.makeValueString(paramBean) + " else 0 end ) as sales_value");
            }else {
                sql.append("                     ,sum(case when dsd.product_division = 2 then dsd.product_num else dsd.product_num * -1 end) as product_num");
                sql.append("                     ,sum(case when dsd.product_division = 2 then dsd.product_num else 0 end) as product_sales_num");
                sql.append("                     ,sum(" + this.makeValueString(paramBean) + ") as sales_value");
            }
            //IVS_LVTu end edit 2015/07/13 Bug #40181
            sql.append("                     ,count(distinct dsd.slip_no) as customer_count");
            sql.append("                 from");
            sql.append("                     view_data_sales_detail_valid dsd");
            
            if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null ){
                            sql.append("     INNER JOIN data_sales_detail dsd1 using(shop_id, slip_no ,product_id,slip_detail_no)");
                            sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
                            sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                            //IVS_LVTu start add 2015/06/24 Bug #38427
                            sql.append("     and dsmt.shop_category_id in( " + paramBean.getListCategoryId()+ ")	\n ");
                            sql.append("     INNER JOIN mst_item mi ON dsd.product_id = mi.item_id ");
                            sql.append("     INNER JOIN mst_item_class mic ON mic.item_class_id = mi.item_class_id ");
                            //IVS_LVTu end add 2015/06/24 Bug #38427
            }
            
            sql.append("                         left join mst_item mg");
            sql.append("                                on mg.item_id = dsd.product_id");
            sql.append("                 where");
            sql.append("                         dsd.product_division in (2, 4)");
            sql.append("                     and dsd.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and dsd.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
            sql.append("                                            and " + SQLUtil.convertForSQL(paramBean.getTargetEndDate()));
            if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null) {
                sql.append("                 and dsd.staff_id = " + SQLUtil.convertForSQL(paramBean.getStaffId()));
            }
            }
            sql.append("                 group by");
            sql.append("                     mg.item_class_id ");
            sql.append("             ) ds");
            sql.append("             on ds.item_class_id = mgc.item_class_id");
            sql.append(" where");
            //IVS_LVTu start edit 2016/05/09 Bug #50136
            //sql.append("         mgc.delete_date is null");
            //sql.append("     and ");
            sql.append("     (exists");
            sql.append("         (");
            sql.append("             select 1");
            sql.append("             from");
            sql.append("                 mst_use_product mup");
            sql.append("                     inner join mst_item mi");
            sql.append("                             on mup.product_id = mi.item_id");
            sql.append("             where");
            sql.append("                     mup.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                 and mup.product_division = 2");
            sql.append("                 and mi.item_class_id = mgc.item_class_id");
            sql.append("                 and mgc.delete_date is null");
            sql.append("         )");
            
            sql.append("         	or exists");
            sql.append("         	(select 1");
            sql.append("                 from");
            sql.append("                     view_data_sales_detail_valid dsd");
            sql.append("                         left join mst_item mg");
            sql.append("                                on mg.item_id = dsd.product_id");
            sql.append("                 where");
            sql.append("                         dsd.product_division in (2, 4)");
            sql.append("                     and dsd.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("                     and dsd.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()));
            sql.append("                                            and " + SQLUtil.convertForSQL(paramBean.getTargetEndDate()));
             sql.append("                    and mg.item_class_id = mgc.item_class_id");
            sql.append("                )");
            sql.append("         )");
            //IVS_LVTu end edit 2016/05/09 Bug #50136
            //IVS LUC START ADD 20141118 業務報告のトータルビューティ対応
            if ((paramBean.getListCategoryId()!= null && !paramBean.getListCategoryId().equals(""))) {
                sql.append("         and mgc.shop_category_id in ( " + paramBean.getListCategoryId() + ") ");
            }
             //IVS LUC END ADD 20141118 業務報告のトータルビューティ対応
            sql.append(" order by");
            sql.append("     mgc.display_seq");

        } catch (Exception e) {
            e.printStackTrace();
        }

        return sql.toString();
    }

    private boolean setBusinessReportCommonData(
            ConnectionWrapper cw, ReportParameterBean paramBean,
            HashMap<String, Object> paramMap) throws SQLException {
        boolean result = false;
        StringBuilder sql = new StringBuilder();
        sql.append("select\n" );
        Integer test = 0;

        Integer allDiscountTax = 0;
        Integer allDiscount = 0;

        //全体割引外だし
        //税抜き表示
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 全体割引
             sql.append(       "sum(ds.discount_value_no_tax) as all_discount,\n" );
        } //税込み表示
        else {
            sql.append( "sum(ds.discount_value) as all_discount,\n" );
        }

        sql.append( "sum(ds.discount_value - ds.discount_value_no_tax) as all_discount_tax\n");
        sql.append( "from view_data_sales_valid ds\n");
        //IVS_LVTu start edit 2015/06/17 Bug #37388
        //if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""){
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
        //IVS_LVTu start edit 2015/06/17 Bug #37388
            sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
            sql.append("        and dsmt.shop_category_id in (" + paramBean.getListCategoryId() + ") ");
            sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                        
        }
        
        sql.append( "where ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            sql.append( (paramBean.getStaffId() != null ? "and ds.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        }
        sql.append( "and ds.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        
        sql.append( "     and exists");
        sql.append( "         (");
        sql.append( "             select 1");
        sql.append( "             from");
        sql.append( "                 data_sales_detail");
        sql.append( "             where");
        sql.append( "                     shop_id = ds.shop_id");
        sql.append( "                 and slip_no = ds.slip_no");
        sql.append( "                 and product_division in(1,2)");
        sql.append( "         )");

        ResultSetWrapper rs = cw.executeQuery(sql.toString());

        if (rs.next()) {
            allDiscountTax = rs.getInt("all_discount_tax");
            allDiscount = rs.getInt("all_discount");

        }

        rs.close();


        //売上情報
        sql = new StringBuilder();
        sql.append( "select\n");
        //税抜き表示
        //IVS_LVTu start edit 2015/07/13 Bug #40181
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null) {
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                sql.append( "sum(CASE WHEN dsd.product_division in ( 1, 3 ) and mtc.shop_category_id = dsmt.shop_category_id then \n");
                sql.append( "dsd.detail_value_no_tax - dsd.discount_detail_value_no_tax else 0 end) as technic_discount,\n");
                sql.append( "sum(CASE WHEN  dsd.product_division in ( 1,3 ) and mtc.shop_category_id = dsmt.shop_category_id THEN \n");
                sql.append( "dsd.discount_detail_value_no_tax else 0 end) as technic_total,\n");
                // 商品
                sql.append("sum(CASE WHEN dsd.product_division in (2, 4 ) and mic.shop_category_id = dsmt.shop_category_id THEN \n");
                sql.append("dsd.detail_value_no_tax - dsd.discount_detail_value_no_tax  else 0 end) as item_discount,\n");
                sql.append("sum(CASE WHEN dsd.product_division in (2, 4 ) and mic.shop_category_id = dsmt.shop_category_id THEN \n");
                sql.append("dsd.discount_detail_value_no_tax else 0 end) as item_total,\n");
            } //税込み表示
            else {
                sql.append("sum(CASE WHEN  dsd.product_division in ( 1,3 ) and mtc.shop_category_id = dsmt.shop_category_id THEN\n");
                sql.append("dsd.detail_value_in_tax - dsd.discount_detail_value_in_tax else 0 end) as technic_discount,\n");
                sql.append("sum(CASE WHEN  dsd.product_division in ( 1,3 ) and mtc.shop_category_id = dsmt.shop_category_id THEN\n");
                sql.append("dsd.discount_detail_value_in_tax else 0 end) as technic_total,\n");
                sql.append("sum(CASE WHEN dsd.product_division in (2, 4 ) and mic.shop_category_id = dsmt.shop_category_id THEN\n");
                sql.append("dsd.detail_value_in_tax - dsd.discount_detail_value_in_tax else 0 end) as item_discount,\n");
                sql.append("sum(CASE WHEN dsd.product_division in (2, 4 ) and mic.shop_category_id = dsmt.shop_category_id THEN \n");
                sql.append("dsd.discount_detail_value_in_tax  else 0 end) as item_total,\n");
            }
        }else {
            //IVS_LVTu start edit 2015/06/26 Bug #38254
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                //sql.append( "sum(case dsd.product_division when 1 then\n");
                sql.append( "sum(CASE WHEN dsd.product_division in ( 1, 3 )then \n");
                sql.append( "dsd.detail_value_no_tax - dsd.discount_detail_value_no_tax else 0 end) as technic_discount,\n");
                //sql.append( "sum(case dsd.product_division when 1 then\n");
                sql.append( "sum(CASE WHEN  dsd.product_division in ( 1,3 )THEN \n");
                sql.append( "dsd.discount_detail_value_no_tax else 0 end) as technic_total,\n");
                // 商品
                //sql.append("sum(case dsd.product_division when 2 then\n");
                sql.append("sum(CASE WHEN dsd.product_division in (2, 4 )THEN \n");
                sql.append("dsd.detail_value_no_tax - dsd.discount_detail_value_no_tax  else 0 end) as item_discount,\n");
                sql.append("sum(case dsd.product_division when 2 then\n");
                sql.append("dsd.discount_detail_value_no_tax when 4 then\n");
                sql.append("dsd.discount_detail_value_no_tax else 0 end) as item_total,\n");
            } //税込み表示
            else {
                //sql.append("sum(case dsd.product_division when 1 then\n");
                sql.append("sum(CASE WHEN  dsd.product_division in ( 1,3 )THEN\n");
                sql.append("dsd.detail_value_in_tax - dsd.discount_detail_value_in_tax else 0 end) as technic_discount,\n");
                //sql.append("sum(case dsd.product_division when 1 then\n");
                sql.append("sum(CASE WHEN  dsd.product_division in ( 1,3 )THEN\n");
                sql.append("dsd.discount_detail_value_in_tax else 0 end) as technic_total,\n");
               // sql.append("sum(case dsd.product_division when 2 then\n");
                 sql.append("sum(CASE WHEN dsd.product_division in (2, 4 )THEN\n");
                sql.append("dsd.detail_value_in_tax - dsd.discount_detail_value_in_tax else 0 end) as item_discount,\n");
                sql.append("sum(case dsd.product_division when 2 then\n");
                sql.append("dsd.discount_detail_value_in_tax  when 4 then dsd.discount_detail_value_in_tax  else 0 end) as item_total,\n");
            }
            //IVS_LVTu end edit 2015/06/26 Bug #38254
        }
        //IVS_LVTu end edit 2015/07/13 Bug #40181

        sql.append("     ( \n");
        
        
        //nhanvt start 20141003 edit Bug #31112
//        sql += "         select \n";
//          sql += "             sum(discount_detail_value_in_tax - discount_detail_value_no_tax) \n";
//        sql += "         from \n";
//         sql += "             view_data_sales_detail_valid \n";
//        sql += "         where \n";
//        sql += "                 shop_id in (" + paramBean.getShopIDList() + ")";
//        sql += "             and sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'";
//        sql += "               and product_division <> 6  \n "; 
//        if (paramBean.getStaffId() != null) {
//            sql += "             and staff_id = '" + paramBean.getStaffId().toString() + "'";
//        }
        
        sql.append( "  select  " + "\n");
        sql.append("  sum(  " + "\n");
        sql.append(" CASE " + "\n");
        sql.append("       WHEN  coalesce (a.overall_discount,0) = 0::numeric THEN discount_detail_value_in_tax - discount_detail_value_no_tax   " + "\n");
        sql.append("      WHEN a.overall_discount > 0  AND b.discount_type = 1  THEN discount_detail_value_in_tax - discount_detail_value_no_tax  - (  trunc( floor ((a.overall_discount) * (1.0 + get_tax_rate(a.sales_date))))  - a.overall_discount )  " + "\n");
        sql.append("      WHEN a.overall_discount > 0  AND b.discount_type = 0  THEN discount_detail_value_in_tax - discount_detail_value_no_tax  - (  a.overall_discount -  trunc( ceil((a.overall_discount) / (1.0 + get_tax_rate(a.sales_date))))  )  " + "\n");
        sql.append("     ELSE NULL::numeric " + "\n");
        sql.append("   END  " + "\n");
        sql.append(" )      " + "\n");
        sql.append(" 	from (  " + "\n");
        
        //IVS_LVTu start edit 2015/07/13 Bug #40181
        sql.append("   select dsd.shop_id , dsd.slip_no ,");
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null) {
            sql.append("   sum( case when (dsd.product_division in (1,3) and mtc.shop_category_id = dsmt.shop_category_id) or (dsd.product_division in (2,4) and mic.shop_category_id = dsmt.shop_category_id) then discount_detail_value_in_tax else 0 end)  as  discount_detail_value_in_tax  , " );
            sql.append("   sum( case when (dsd.product_division in (1,3) and mtc.shop_category_id = dsmt.shop_category_id) or (dsd.product_division in (2,4) and mic.shop_category_id = dsmt.shop_category_id) then discount_detail_value_no_tax else 0 end)  as  discount_detail_value_no_tax " + "\n");
        }else {
            sql.append("   sum( discount_detail_value_in_tax )  as  discount_detail_value_in_tax  , " );
            sql.append("   sum( discount_detail_value_no_tax )  as  discount_detail_value_no_tax " + "\n");
        }
        //IVS_LVTu end edit 2015/07/13 Bug #40181
        //nhanvt start add 20141224 Bug #34510 
        sql.append(" 	       ,(CASE WHEN product_division = 0 THEN COALESCE(discount_value,0) ELSE 0 END) AS overall_discount ");
        //nhanvt end add 20141224 Bug #34510 
        sql.append("  , sales_date  from   view_data_sales_detail_valid dsd  " + "\n");
        
        //IVS_LVTu start edit 2015/06/17 Bug #37388
        //if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""){
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
        //IVS_LVTu start edit 2015/06/17 Bug #37388
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
                        sql.append("        and dsmt.shop_category_id in (" + paramBean.getListCategoryId() + ") ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                        //IVS_LVTu start add 2015/07/13 Bug #40181
                        sql.append("     left join mst_technic mt on dsd.product_id = mt.technic_id and dsd.product_division = dsd.product_division and dsd.product_division in(1,3) ");
                        sql.append("     left join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id  ");
                        sql.append("     left join mst_item mi on dsd.product_id = mi.item_id and dsd.product_division = dsd.product_division and dsd.product_division in (2,4)  ");
                        sql.append("     left join mst_item_class mic on mic.item_class_id = mi.item_class_id ");
                        //IVS_LVTu end add 2015/07/13 Bug #40181
        }
        
        sql.append("          where  dsd.shop_id in( " + paramBean.getShopIDList() + ")\n");
        sql.append("             and sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
        sql.append(" 		and product_division <> 6  " + "\n");
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null) {
                sql.append("             and staff_id = '" + paramBean.getStaffId().toString() + "'");
            }
        }
        //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists (	\n");
            sql.append("         select 1 from \n");
            //sql.append("         view_data_sales_detail_valid dsd1\n");
            sql.append("        data_sales ds \n");
            sql.append("        inner join data_sales_detail dsd1 on ds.shop_id = dsd1.shop_id and ds.slip_no = dsd1.slip_no \n");
            sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1,3)\n");
            sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n");
            sql.append("         and ds.delete_date is null \n");
            sql.append("         and dsd1.delete_date is null \n");
            sql.append("         and mtc.shop_category_id in( " + paramBean.getListCategoryId() + ")	\n");
            sql.append("         ) 	\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            //sql.append("         view_data_sales_detail_valid dsd1\n");
            sql.append("        data_sales ds \n");
            sql.append("        inner join data_sales_detail dsd1 on ds.shop_id = dsd1.shop_id and ds.slip_no = dsd1.slip_no \n");
            sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n");
            sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and ds.delete_date is null \n");
            sql.append("         and dsd1.delete_date is null \n");
            sql.append("         and mic.shop_category_id in( " + paramBean.getListCategoryId() + ")\n");
            sql.append("         )\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select * from\n");
            //sql.append("         view_data_sales_detail_valid dsd1\n");
            sql.append("        data_sales ds \n");
            sql.append("        inner join data_sales_detail dsd1 on ds.shop_id = dsd1.shop_id and ds.slip_no = dsd1.slip_no \n");
            sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and ds.delete_date is null \n");
            sql.append("         and dsd1.delete_date is null \n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getListCategoryId() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }
        //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        sql.append(" 	group by  dsd.shop_id , dsd.slip_no ,sales_date,product_division,discount_value   " + "\n");
        sql.append("  ) a,  " + "\n");
        //nhanvt start edit 20141224 Bug #34510 
//        sql +="        left join   " + "\n";
//        sql +="            ( select shop_id , slip_no  ,coalesce( discount_value ,0)  as overall_discount  " + "\n";
//        sql +="          from  view_data_sales_detail_all " + "\n";
//        sql +="          where  shop_id in( " + paramBean.getShopIDList() + ")\n";
//        sql += "             and sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'";
//        sql +=" 	and product_division = 0   ) b using (shop_id , slip_no )   ) a  ,  " + "\n";
        //nhanvt end edit 20141224 Bug #34510 
        sql.append("       ( SELECT mst_account_setting.display_price_type, mst_account_setting.discount_type " + "\n");
        sql.append("            FROM mst_account_setting " + "\n");
        sql.append("          WHERE mst_account_setting.delete_date IS NULL " + "\n");
        sql.append("         LIMIT 1) b   " + "\n");
        
        //nhanvt start 20141003 edit Bug #31112
        sql.append( "     ) as tax_total \n");

        sql.append( "from view_data_sales_detail_valid dsd \n");
        
        //IVS_LVTu start edit 2015/06/17 Bug #37388
        //if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""){
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
                        sql.append("        and dsmt.shop_category_id in (" + paramBean.getListCategoryId() + ") ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                        //IVS_LVTu start add 2015/07/13 Bug #40181
                        sql.append("     left join mst_technic mt on dsd.product_id = mt.technic_id and dsd.product_division = dsd.product_division and dsd.product_division in(1,3) ");
                        sql.append("     left join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id  ");
                        sql.append("     left join mst_item mi on dsd.product_id = mi.item_id and dsd.product_division = dsd.product_division and dsd.product_division in (2,4)  ");
                        sql.append("     left join mst_item_class mic on mic.item_class_id = mi.item_class_id ");
                        //IVS_LVTu end add 2015/07/13 Bug #40181
                        
        }
        //IVS_LVTu end edit 2015/06/17 Bug #37388
        
        sql.append( " where");
        sql.append( "         dsd.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append( "     and sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
        
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null) {
                //IVS_LVTu start edit 2015/09/23 Bug #43007
                if ( paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
                    sql.append( " and staff_id = '" + paramBean.getStaffId().toString() + "'");
                } else {
                    sql.append( " and dsd.detail_staff_id = '" + paramBean.getStaffId().toString() + "'");
                }
                //IVS_LVTu end edit 2015/09/23 Bug #43007
            }
        }
        //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append( " and \n");
            sql.append(" (	\n");
            sql.append(" exists (	\n");
            sql.append("         select 1 from \n");
            //sql.append("         view_data_sales_detail_valid dsd1\n");
            sql.append("        data_sales ds \n");
            sql.append("        inner join data_sales_detail dsd1 on ds.shop_id = dsd1.shop_id and ds.slip_no = dsd1.slip_no \n");
            sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1,3)\n");
            sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n");
            sql.append("         and ds.delete_date is null \n");
            sql.append("         and dsd1.delete_date is null \n");
            sql.append("         and mtc.shop_category_id in( " + paramBean.getListCategoryId() + ")	\n");
            sql.append("         ) 	\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            //sql.append("         view_data_sales_detail_valid dsd1\n");
            sql.append("        data_sales ds \n");
            sql.append("        inner join data_sales_detail dsd1 on ds.shop_id = dsd1.shop_id and ds.slip_no = dsd1.slip_no \n");
            sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n");
            sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and ds.delete_date is null \n");
            sql.append("         and dsd1.delete_date is null \n");
            sql.append("         and mic.shop_category_id in( " + paramBean.getListCategoryId() + ")\n");
            sql.append("         )\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            //sql.append("         view_data_sales_detail_valid dsd1\n");
            sql.append("        data_sales ds \n");
            sql.append("        inner join data_sales_detail dsd1 on ds.shop_id = dsd1.shop_id and ds.slip_no = dsd1.slip_no \n");
            sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5,6) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and ds.delete_date is null \n");
            sql.append("         and dsd1.delete_date is null \n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getListCategoryId() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }
        //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
 
        rs = cw.executeQuery(sql.toString());


        if (rs.next()) {
            //GEOBECK start edit 20160824 #54164 getIntをgetLongに変更
            paramMap.put("TechnicDiscountPrice", rs.getLong("technic_discount"));
            paramMap.put("TechnicTotal", rs.getLong("technic_total"));
            paramMap.put("ItemDiscountPrice", rs.getLong("item_discount"));
            paramMap.put("ItemTotal", rs.getLong("item_total"));
            paramMap.put("AllDiscountPrice", allDiscount);

            paramMap.put("TotalTaxPrice", rs.getLong("tax_total"));

            paramMap.put("SalesTotal", rs.getLong("technic_total") + rs.getLong("item_total"));
            paramMap.put("AddDiscountPrice", rs.getLong("technic_discount")
                    + rs.getLong("item_discount") + allDiscount);

            paramMap.put("DiscountTotal", rs.getLong("technic_discount") + rs.getLong("item_discount") + allDiscount);
            paramMap.put("TotalPrice", rs.getLong("technic_total") + rs.getLong("item_total") - allDiscount);
            paramMap.put("ItemRate", rs.getDouble("item_total") / (rs.getDouble("technic_total") + rs.getDouble("item_total")) * 100d);
            paramMap.put("TechnicRate", rs.getDouble("technic_total") / (rs.getDouble("technic_total") + rs.getDouble("item_total")) * 100d);
            //GEOBECK end edit 20160824 #54164
            
            result = true;
        }

        rs.close();
        
        //IVS_LVTu start add 2015/07/13 Bug #40181
        Integer overallDiscount = 0;
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql = new StringBuilder();
            
            sql.append(" select sum(a.overall_discount - trunc(ceil((a.overall_discount) / (1.0 + get_tax_rate(a.sales_date))))) as overall_discount \n");
            sql.append(" from ( \n");
            sql.append(" select COALESCE(discount_value,0) AS overall_discount \n");
            sql.append(" ,ds.sales_date \n");
            sql.append(" from data_sales ds \n");
            sql.append(" inner join data_sales_detail dsd using(shop_id,slip_no) \n");
            if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
                        sql.append("        and dsmt.shop_category_id in (" + paramBean.getListCategoryId() + ") ");
                        sql.append("        and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n");
            }
            sql.append(" WHERE dsd.shop_id IN(" + paramBean.getShopIDList() + ") \n");
            sql.append(" AND sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "' \n");
            sql.append(" AND product_division = 0 \n");
            sql.append(" AND ds.delete_date IS NULL \n");
            sql.append(" AND dsd.delete_date IS NULL \n");
            if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                sql.append( " and \n");
                sql.append(" (	\n");
                sql.append(" exists (	\n");
                sql.append("         select 1 from \n");
                //sql.append("         view_data_sales_detail_valid dsd1\n");
                sql.append("        data_sales ds \n");
                sql.append("        inner join data_sales_detail dsd1 on ds.shop_id = dsd1.shop_id and ds.slip_no = dsd1.slip_no \n");
                sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1,3)\n");
                sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
                sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n");
                sql.append("         and ds.delete_date is null \n");
                sql.append("         and dsd1.delete_date is null \n");
                sql.append("         and mtc.shop_category_id in( " + paramBean.getListCategoryId() + ")	\n");
                sql.append("         ) 	\n");
                sql.append(" or \n");
                sql.append(" exists(\n");
                sql.append("         select 1 from\n");
                //sql.append("         view_data_sales_detail_valid dsd1\n");
                sql.append("        data_sales ds \n");
                sql.append("        inner join data_sales_detail dsd1 on ds.shop_id = dsd1.shop_id and ds.slip_no = dsd1.slip_no \n");
                sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n");
                sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
                sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
                sql.append("         and ds.delete_date is null \n");
                sql.append("         and dsd1.delete_date is null \n");
                sql.append("         and mic.shop_category_id in( " + paramBean.getListCategoryId() + ")\n");
                sql.append("         )\n");
                sql.append(" or \n");
                sql.append(" exists(\n");
                sql.append("         select 1 from\n");
                //sql.append("         view_data_sales_detail_valid dsd1\n");
                sql.append("        data_sales ds \n");
                sql.append("        inner join data_sales_detail dsd1 on ds.shop_id = dsd1.shop_id and ds.slip_no = dsd1.slip_no \n");
                sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5,6) \n");
                sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
                sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
                sql.append("         and ds.delete_date is null \n");
                sql.append("         and dsd1.delete_date is null \n");
                sql.append("         and mcc.shop_category_id in( " + paramBean.getListCategoryId() + ")\n");
                sql.append("         )\n");
                sql.append(" )\n");
            }
            sql.append(" GROUP BY dsd.shop_id, \n");
            sql.append(" dsd.slip_no, \n");
            sql.append(" sales_date, \n");
            sql.append(" product_division, \n");
            sql.append(" discount_value)a \n");
            
            rs = cw.executeQuery(sql.toString());

            if (rs.next()) {
                overallDiscount = rs.getInt("overall_discount");
            }
            
            rs.close();
        }
        paramMap.put("OverallDiscount", overallDiscount);
        //IVS_LVTu end add 2015/07/13 Bug #40181
        //　修正(11/12) 集計期間が１日の場合のみ累計を取得
        if (paramBean.getTargetStartDate().equals(paramBean.getTargetEndDate())) {

            // 累計を求めるSQL(店舗ごとに締日が違うと可能性があるため、店舗ごとに求める)
            java.util.StringTokenizer token = new java.util.StringTokenizer(paramBean.getShopIDList(), ",");
            long technicAmount = 0;
            long itemAmount = 0;
            long discountAmount = 0;
            try {
                while (token.hasMoreTokens()) {
                    String shopID = token.nextToken();
                    MstShop shop = new MstShop();
                    shop.setShopID(new Integer(shopID.trim()));
                    shop.load(cw);

                    Calendar start = Calendar.getInstance();
                    start.setTime(paramBean.getTargetEndDateObj());

                    if (shop.getCutoffDay() == 31) {
                        // 31日なら月末の翌日 = １日から
                        start.set(Calendar.DAY_OF_MONTH, 1);

                    } else if (shop.getCutoffDay() >= start.get(Calendar.DAY_OF_MONTH)) {
                        // まだ締日に達してなかったら前月の締日の翌日
                        start.add(Calendar.MONTH, -1);
                        start.set(Calendar.DAY_OF_MONTH, shop.getCutoffDay() + 1);
                    } else {
                        // 締日を超えてたらその月の締日の翌日
                        start.set(Calendar.DAY_OF_MONTH, shop.getCutoffDay() + 1);
                    }

                    start.set(Calendar.HOUR_OF_DAY, 0);
                    start.set(Calendar.MINUTE, 0);
                    start.set(Calendar.SECOND, 0);
                    sql = new StringBuilder();
                    sql.append("select * \n");
                    sql.append( "from ( \n");
                    sql.append( "select \n");
                    sql.append( "sum(case ");
                    //IVS_LVTu start edit 2015/06/26 Bug #38254
                    //sql.append( "when product_division = 1 then " + makeValueString(paramBean) + " else 0 end) as technic_amount, " + "\n");
                    sql.append( "when product_division in ( 1, 3 ) then " + makeValueString(paramBean) + " else 0 end) as technic_amount, " + "\n");
                    sql.append( "sum(case ");
                    //sql.append( "when product_division = 2 then " + makeValueString(paramBean) + " else 0 end) as item_amount " + "\n");
                    sql.append( "when product_division in ( 2, 4 ) then " + makeValueString(paramBean) + " else 0 end) as item_amount " + "\n");
                    sql.append( "from view_data_sales_detail_valid as dsd " + "\n");
                    //IVS_LVTu end edit 2015/06/26 Bug #38254
                    
                    //IVS_LVTu start edit 2015/06/17 Bug #37388
                    //if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""){
                    if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                    //IVS_LVTu start edit 2015/06/17 Bug #37388
                                    sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
                                    sql.append("        and dsmt.shop_category_id in (" + paramBean.getListCategoryId() + ") ");
                                    sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                    }
                    
                    sql.append( "where ");
                    sql.append( "sales_date between " + SQLUtil.convertForSQL(start.getTime()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "\n");
                    sql.append( "and dsd.shop_id = " + shop.getShopID() + "\n");
                    
                    if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
                        sql.append( (paramBean.getStaffId() != null ? "and dsd.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                    }
                            //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
                            if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                                 sql.append( " and \n");
                                 sql.append( " (	\n");
                                 sql.append( " exists (	\n");
                                 sql.append( "         select 1 from \n");
                                 //sql.append("         view_data_sales_detail_valid dsd1\n");
                                sql.append("        data_sales ds \n");
                                sql.append("        inner join data_sales_detail dsd1 on ds.shop_id = dsd1.shop_id and ds.slip_no = dsd1.slip_no \n");
                                 sql.append( "         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division=1\n");
                                 sql.append( "         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
                                 sql.append( "         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n");
                                 sql.append("         and ds.delete_date is null \n");
                                 sql.append("         and dsd1.delete_date is null \n");
                                 sql.append( "         and mtc.shop_category_id in( " + paramBean.getListCategoryId() + ")	\n");
                                 sql.append( "         ) 	\n");
                                 sql.append( " or \n");
                                 sql.append( " exists(\n");
                                 sql.append( "         select 1 from\n");
                                 //sql.append("         view_data_sales_detail_valid dsd1\n");
                                 sql.append("        data_sales ds \n");
                                 sql.append("        inner join data_sales_detail dsd1 on ds.shop_id = dsd1.shop_id and ds.slip_no = dsd1.slip_no \n");
                                 sql.append( "         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division = 2 \n");
                                 sql.append( "         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
                                 sql.append( "         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
                                 sql.append("         and ds.delete_date is null \n");
                                 sql.append("         and dsd1.delete_date is null \n");
                                 sql.append( "         and mic.shop_category_id in (" + paramBean.getListCategoryId() + ")\n");
                                 sql.append( "         )\n");
                                 sql.append( " )\n");
                                
                            }
                           sql.append( ") a , \n");
                            //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応        
                           if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                                sql.append( " (select 0 as discount_amount) b ");
                           }else {
                                sql.append( " ( \n");
                                sql.append( "select sum(" + makeDiscountString(paramBean) + ") as discount_amount " + "\n");
                                sql.append( "  from view_data_sales_valid dsd2 " + "\n");
                                
                                //IVS_LVTu start edit 2015/06/17 Bug #37388
                                //if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""){
                                if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                                //IVS_LVTu end edit 2015/06/17 Bug #37388
                                                sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd2.shop_id AND dsmt.slip_no = dsd2.slip_no ");
                                                sql.append("        and dsmt.shop_category_id in (" + paramBean.getListCategoryId() + ") ");
                                                sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                                }
                                
                                sql.append( "where ");
                                sql.append( "sales_date between " + SQLUtil.convertForSQL(start.getTime()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "\n");
                                sql.append( "and dsd2.shop_id = " + shop.getShopID() + "\n");
                                
                                if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
                                    sql.append( (paramBean.getStaffId() != null ? "and staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                                }
                                sql.append( ") b \n");
                           }

                    rs = cw.executeQuery(sql.toString());

                    if (rs.next()) {
                        technicAmount += rs.getLong("technic_amount");
                        itemAmount += rs.getLong("item_amount");
                        discountAmount += rs.getLong("discount_amount");
                    }

                    rs.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                System.err.println("SQL = \n" + sql);
            }
            paramMap.put("TechnicAmount", technicAmount);
            paramMap.put("ItemAmount", itemAmount);
            paramMap.put("DiscountAmount", discountAmount);
        } else {
            paramMap.put("TechnicAmount", new Long(-1));
            paramMap.put("ItemAmount", new Long(-1));
            paramMap.put("DiscountAmount", new Long(-1));
        }

        return result;
    }

    private boolean setBusinessReportCommonData_LIM(
            ConnectionWrapper cw, ReportParameterBean paramBean,
            HashMap<String, Object> paramMap) throws SQLException {
        boolean result = false;
        Integer test = 0;

        Integer allDiscountTax = 0;
        Integer allDiscount = 0;

        StringBuilder sql = new StringBuilder(1000);
        sql.append("select\n");

        //全体割引外だし
        //税抜き表示
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 全体割引
            sql.append("sum(ds.discount_value_no_tax) as all_discount,\n");
        } else {
            //税込み表示
            sql.append("sum(ds.discount_value) as all_discount,\n");
        }

        sql.append("sum(ds.discount_value - ds.discount_value_no_tax) as all_discount_tax\n");
        sql.append("from\n");
        sql.append(" view_data_sales_valid ds\n");
        sql.append("where ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append((paramBean.getStaffId() != null ? "and ds.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
        sql.append("and ds.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'\n");
        sql.append("     and exists");
        sql.append("         (");
        sql.append("             select 1");
        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid");
        sql.append("             where");
        sql.append("                     shop_id = ds.shop_id");
        sql.append("                 and slip_no = ds.slip_no");
        sql.append("                 and product_division in(1,2)");
        sql.append("         )");
        sql.append(" and exists");
        sql.append(" (");
        sql.append("     select");
        sql.append("         1");
        sql.append("     from");
        sql.append("         data_payment dp");
        sql.append("             join data_payment_detail dpd");
        sql.append("                 using(shop_id, slip_no, payment_no)");
        sql.append("             join mst_payment_method mpm");
        sql.append("                 using(payment_method_id)");
        sql.append("     where");
        sql.append("             mpm.payment_class_id = 2");
        sql.append("         and dp.shop_id = ds.shop_id");
        sql.append("         and dp.slip_no = ds.slip_no");
        sql.append(" )");

        ResultSetWrapper rs = cw.executeQuery(sql.toString());

        if (rs.next()) {
            allDiscountTax = rs.getInt("all_discount_tax");
            allDiscount = rs.getInt("all_discount");
        }

        rs.close();

        /**
         * **************************************************
         */
        /**
         * **************************************************
         */
        sql.setLength(0);
        sql.append("select\n");

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {

            //税抜き表示
            sql.append("sum(case dsd.product_division when 1 then\n");
            sql.append("dsd.detail_value_no_tax - dsd.discount_detail_value_no_tax else 0 end) as technic_discount,\n");
            sql.append("sum(case dsd.product_division when 1 then\n");
            sql.append("dsd.discount_detail_value_no_tax else 0 end) as technic_total,\n");

            // 商品
            sql.append("sum(case dsd.product_division when 2 then\n");
            sql.append("dsd.detail_value_no_tax - dsd.discount_detail_value_no_tax  else 0 end) as item_discount,\n");
            sql.append("sum(case dsd.product_division when 2 then\n");
            sql.append("dsd.discount_detail_value_no_tax else 0 end) as item_total,\n");

        } else {

            //税込み表示
            sql.append("sum(case dsd.product_division when 1 then\n");
            sql.append("dsd.detail_value_in_tax - dsd.discount_detail_value_in_tax else 0 end) as technic_discount,\n");
            sql.append("sum(case dsd.product_division when 1 then\n");
            sql.append("dsd.discount_detail_value_in_tax else 0 end) as technic_total,\n");

            sql.append("sum(case dsd.product_division when 2 then\n");
            sql.append("dsd.detail_value_in_tax - dsd.discount_detail_value_in_tax else 0 end) as item_discount,\n");
            sql.append("sum(case dsd.product_division when 2 then\n");
            sql.append("dsd.discount_detail_value_in_tax  else 0 end) as item_total,\n");
        }

        sql.append("     ( \n");
        sql.append("         select \n");
        sql.append("             sum(discount_sales_value_in_tax - discount_sales_value_no_tax) \n");
        sql.append("         from \n");
        sql.append("             view_data_sales_valid ds\n");
        sql.append("         where \n");
        sql.append("                 shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("             and sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");

        if (paramBean.getStaffId() != null) {
            sql.append("             and staff_id = '" + paramBean.getStaffId().toString() + "'");
        }

        sql.append(" and exists");
        sql.append(" (");
        sql.append("     select");
        sql.append("         1");
        sql.append("     from");
        sql.append("         data_payment dp");
        sql.append("             join data_payment_detail dpd");
        sql.append("                 using(shop_id, slip_no, payment_no)");
        sql.append("             join mst_payment_method mpm");
        sql.append("                 using(payment_method_id)");
        sql.append("     where");
        sql.append("             mpm.payment_class_id = 2");
        sql.append("         and dp.shop_id = ds.shop_id");
        sql.append("         and dp.slip_no = ds.slip_no");
        sql.append(" )");

        sql.append("     ) as tax_total \n");

        sql.append("from view_data_sales_detail_valid dsd \n");
        sql.append(" where");
        sql.append("         shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     and sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");

        if (paramBean.getStaffId() != null) {
            sql.append(" and staff_id = '" + paramBean.getStaffId().toString() + "'");
        }

        sql.append(" and exists");
        sql.append(" (");
        sql.append("     select");
        sql.append("         1");
        sql.append("     from");
        sql.append("         data_payment dp");
        sql.append("             join data_payment_detail dpd");
        sql.append("                 using(shop_id, slip_no, payment_no)");
        sql.append("             join mst_payment_method mpm");
        sql.append("                 using(payment_method_id)");
        sql.append("     where");
        sql.append("             mpm.payment_class_id = 2");
        sql.append("         and dp.shop_id = dsd.shop_id");
        sql.append("         and dp.slip_no = dsd.slip_no");
        sql.append(" )");

        rs = cw.executeQuery(sql.toString());

        if (rs.next()) {
            paramMap.put("TechnicTotal_LIM", rs.getInt("technic_total"));
            paramMap.put("ItemTotal_LIM", rs.getInt("item_total"));
            paramMap.put("AllDiscountPrice_LIM", allDiscount);
            paramMap.put("TotalTaxPrice_LIM", rs.getInt("tax_total"));
            result = true;
        }

        rs.close();

        /**
         * **************************************************
         */
        /**
         * **************************************************
         */
        //　修正(11/12) 集計期間が１日の場合のみ累計を取得
        if (paramBean.getTargetStartDate().equals(paramBean.getTargetEndDate())) {

            // 累計を求めるSQL(店舗ごとに締日が違うと可能性があるため、店舗ごとに求める)
            java.util.StringTokenizer token = new java.util.StringTokenizer(paramBean.getShopIDList(), ",");
            long technicAmount = 0;
            long itemAmount = 0;
            long discountAmount = 0;
            try {
                while (token.hasMoreTokens()) {
                    String shopID = token.nextToken();
                    MstShop shop = new MstShop();
                    shop.setShopID(new Integer(shopID.trim()));
                    shop.load(cw);

                    Calendar start = Calendar.getInstance();
                    start.setTime(paramBean.getTargetEndDateObj());

                    if (shop.getCutoffDay() == 31) {
                        // 31日なら月末の翌日 = １日から
                        start.set(Calendar.DAY_OF_MONTH, 1);

                    } else if (shop.getCutoffDay() >= start.get(Calendar.DAY_OF_MONTH)) {
                        // まだ締日に達してなかったら前月の締日の翌日
                        start.add(Calendar.MONTH, -1);
                        start.set(Calendar.DAY_OF_MONTH, shop.getCutoffDay() + 1);
                    } else {
                        // 締日を超えてたらその月の締日の翌日
                        start.set(Calendar.DAY_OF_MONTH, shop.getCutoffDay() + 1);
                    }

                    start.set(Calendar.HOUR_OF_DAY, 0);
                    start.set(Calendar.MINUTE, 0);
                    start.set(Calendar.SECOND, 0);

                    sql.setLength(0);
                    sql.append("select * \n");
                    sql.append("from ( \n");
                    sql.append("    select \n");
                    sql.append("        sum(case ");
                    sql.append("            when product_division = 1 then " + makeValueString(paramBean) + " else 0 end) as technic_amount, " + "\n");
                    sql.append("        sum(case ");
                    sql.append("            when product_division = 2 then " + makeValueString(paramBean) + " else 0 end) as item_amount " + "\n");
                    sql.append("    from view_data_sales_detail_valid as dsd " + "\n");
                    sql.append("    where ");
                    sql.append("            sales_date between " + SQLUtil.convertForSQL(start.getTime()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "\n");
                    sql.append("        and shop_id = " + shop.getShopID() + "\n");
                    sql.append((paramBean.getStaffId() != null ? "and dsd.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                    sql.append(" and exists");
                    sql.append(" (");
                    sql.append("     select");
                    sql.append("         1");
                    sql.append("     from");
                    sql.append("         data_payment dp");
                    sql.append("             join data_payment_detail dpd");
                    sql.append("                 using(shop_id, slip_no, payment_no)");
                    sql.append("             join mst_payment_method mpm");
                    sql.append("                 using(payment_method_id)");
                    sql.append("     where");
                    sql.append("             mpm.payment_class_id = 2");
                    sql.append("         and dp.shop_id = dsd.shop_id");
                    sql.append("         and dp.slip_no = dsd.slip_no");
                    sql.append(" )");
                    sql.append(") a , \n");
                    sql.append("( \n");
                    sql.append("    select sum(" + makeDiscountString(paramBean) + ") as discount_amount " + "\n");
                    sql.append("    from view_data_sales_valid ds " + "\n");
                    sql.append("    where ");
                    sql.append("            sales_date between " + SQLUtil.convertForSQL(start.getTime()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "\n");
                    sql.append("        and shop_id = " + shop.getShopID() + "\n");
                    sql.append((paramBean.getStaffId() != null ? "and staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                    sql.append(" and exists");
                    sql.append(" (");
                    sql.append("     select");
                    sql.append("         1");
                    sql.append("     from");
                    sql.append("         data_payment dp");
                    sql.append("             join data_payment_detail dpd");
                    sql.append("                 using(shop_id, slip_no, payment_no)");
                    sql.append("             join mst_payment_method mpm");
                    sql.append("                 using(payment_method_id)");
                    sql.append("     where");
                    sql.append("             mpm.payment_class_id = 2");
                    sql.append("         and dp.shop_id = ds.shop_id");
                    sql.append("         and dp.slip_no = ds.slip_no");
                    sql.append(" )");
                    sql.append(") b \n");

                    rs = cw.executeQuery(sql.toString());

                    if (rs.next()) {
                        technicAmount += rs.getLong("technic_amount");
                        itemAmount += rs.getLong("item_amount");
                        discountAmount += rs.getLong("discount_amount");
                    }

                    rs.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                System.err.println("SQL = \n" + sql.toString());
            }
            paramMap.put("TechnicAmount_LIM", technicAmount);
            paramMap.put("ItemAmount_LIM", itemAmount);
            paramMap.put("DiscountAmount_LIM", discountAmount);
        } else {
            paramMap.put("TechnicAmount_LIM", new Long(-1));
            paramMap.put("ItemAmount_LIM", new Long(-1));
            paramMap.put("DiscountAmount_LIM", new Long(-1));
        }

        return result;
    }

    /**
     * 技術詳細出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @param isPDF PDF出力かどうか
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean viewBusinessReportForTechnical(ReportParameterBean paramBean, boolean isPDF) throws Exception {
        return viewBusinessReportForTechnicalAndItem(paramBean, true, isPDF);
    }

    /**
     * 業務報告(技術詳細)出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean viewBusinessReportForTechnical(ReportParameterBean paramBean) throws Exception {
        return viewBusinessReportForTechnical(paramBean, true);
    }

    /**
     * 業務報告(商品詳細)出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean viewBusinessReportForItem(ReportParameterBean paramBean, boolean isPDF) throws Exception {
        return viewBusinessReportForTechnicalAndItem(paramBean, false, isPDF);
    }

    /**
     * 業務報告(商品詳細)出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean viewBusinessReportForItem(ReportParameterBean paramBean) throws Exception {
        return viewBusinessReportForItem(paramBean, true);
    }

    /**
     * 業務報告(コース詳細)出力ロジック
     *
     * @param paramBean
     * @return
     * @throws Exception
     */
    public boolean viewBusinessReportForCourse(ReportParameterBean paramBean) throws Exception {
        return viewBusinessReportForCourse(paramBean, false);
    }

    /**
     * 業務報告(コース詳細)出力ロジック
     *
     * @param paramBean
     * @param isPDF
     * @return
     * @throws Exception
     */
    private boolean viewBusinessReportForCourse(ReportParameterBean paramBean, boolean isPDF) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        HashMap<String, Object> paramMap = new HashMap<String, Object>();

        //------------------------------------------------------------
        // ヘッダー部の情報取得・生成
        //------------------------------------------------------------
        // 税込み･税別の区分
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            paramMap.put("TaxType", "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            paramMap.put("TaxType", "税込");
        }

        //担当区分
        if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
            paramMap.put("StaffType", "主担当");
        } else {
            paramMap.put("StaffType", "施術担当");
        }

        // 期間
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
        paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));

        // 店舗名もしくはスタッフ名(スタッフ未選択時は店舗名)
        if (null == paramBean.getStaffId() || "".equals(paramBean.getStaffId().toString())) {
            paramMap.put("TargetName", paramBean.getTargetName());
        } else {
            paramMap.put("TargetName", this.getStaffName(paramBean) + " （" + paramMap.get("StaffType") + "）");
        }

        //営業日数
        int operatingDays = getOperatingDays(cw, paramBean);
        paramMap.put("TargetDayCount", operatingDays + "日");

        //出力日時
        paramMap.put("OutputTime", new java.util.Date());


        // 明細のデータ(コース契約) 2791行目参照
        Collection<BusinessCourseReportBean> reportList = getCourseList(cw, paramBean, 5);

        // 明細がどちらもなければ終了
        if (reportList.size() == 0) {
            return false;
        }


        String fileName = "業務報告_コース契約一覧";
        JExcelApi jx = new JExcelApi(fileName);
        //テンプレートとなるファイルをセット
        jx.setTemplateFile("/reports/" + fileName + ".xls");

        //------------------------------
        // ヘッダー部に値をセット
        //------------------------------
        jx.setValue(7, 3, paramMap.get("TargetStartDate") + " 〜 " + paramMap.get("TargetEndDate"));
        jx.setValue(7, 4, paramMap.get("TargetName"));
        jx.setValue(7, 5, paramMap.get("TargetDayCount"));
        jx.setValue(7, 6, paramMap.get("TaxType"));
        if(paramBean.getUseShopCategory()==1) {
            jx.setValue(14, 5, paramBean.getListCategoryName());
        }else {
            jx.setValue(12, 5, "");
            jx.setValue(13, 5, "");
            
        }
        //------------------------------
        // 技術報告
        //------------------------------
        String productClassName = "";

        int baseRow = 11;
        //出力する行数-1追加
        for (BusinessCourseReportBean bean : reportList) {
            List<BusinessCourseReportCourseBean> courseList = bean.getCourseList();
            //出力するコース数分行をinsert
            //ここではinsertするだけ。全角文字が出力されているとinsert等でエラーが発生する
            jx.insertRow(baseRow, courseList.size());
            for (int i = 0; i < courseList.size(); i++) {
                int row = baseRow + i + 1;
                //以下セルの結合
                jx.mergeCells(2, row, 7, row);  //分類名
                jx.mergeCells(8, row, 19, row); //コース名
                jx.mergeCells(20, row, 22, row); //単価
                jx.mergeCells(23, row, 24, row); //数量
                jx.mergeCells(25, row, 27, row); //分類比
                jx.mergeCells(28, row, 30, row); //全体比
                jx.mergeCells(31, row, 34, row); //売上
                jx.mergeCells(35, row, 38, row); //割引

                //分類別
                jx.mergeCells(40, row, 42, row); //数量
                jx.mergeCells(43, row, 45, row); //％
                jx.mergeCells(46, row, 49, row); //合計
            }
        }


        for (BusinessCourseReportBean bean : reportList) {
            for (BusinessCourseReportCourseBean courseBean : bean.getCourseList()) {
                // 分類名(非表示列にセット)
                jx.setValue(1, baseRow, bean.getCourseClassName());
                // コース名
                jx.setValue(8, baseRow, courseBean.getCourseName());
                // 単価
                if (courseBean.getSalesPrice() == null) {
                    jx.setValue(20, baseRow, courseBean.getBasePrice());
                } else {
                    jx.setValue(20, baseRow, courseBean.getSalesPrice());
                }
                // 数量
                jx.setValue(23, baseRow, courseBean.getTotalSalesNum());
                // 売上
                // IVS SANG START EDIT 20131218 [gbソース]業務報告のコース契約金額の不具合
                // jx.setValue(31, baseRow, courseBean.getTotalSalesValue());
                //LVTu start edit 2015/03/20 Bug #35449
                //jx.setValue(31, baseRow, courseBean.getTotalSalesValue() - courseBean.getTotalDiscountValue());
                if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                    jx.setValue(31, baseRow, courseBean.getTotalSalesNumDouble()- courseBean.getTotalDiscountValue());
                } else {
                jx.setValue(31, baseRow, courseBean.getTotalSalesValue() - courseBean.getTotalDiscountValue());
                }
                //LVTu end edit 2015/03/20 Bug #35449
                // IVS SANG END EDIT 20131218 [gbソース]業務報告のコース契約金額の不具合
                // 割引
                jx.setValue(35, baseRow, courseBean.getTotalDiscountValue());
                baseRow++;
            }
            jx.setUpperLine(2, baseRow);
            jx.setUpperLine(23, baseRow);
            jx.setUpperLine(31, baseRow);
            jx.setUpperLine(35, baseRow);

            jx.setUpperLine(40, baseRow);
            jx.setUpperLine(43, baseRow);
            jx.setUpperLine(46, baseRow);
        }
        jx.removeRow(baseRow);
        jx.removeRow(baseRow);

        //ファイル出力
        jx.openWorkbook();

        return true;
    }

    /**
     * コース契約リストを取得する
     *
     * @param cw
     * @param paramBean
     * @param productDivision
     * @return
     * @throws Exception
     */
    private Collection<BusinessCourseReportBean> getCourseList(ConnectionWrapper cw, ReportParameterBean paramBean, int productDivision) throws Exception {
        String priceSql = "";
        String discountSql = "";

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            priceSql = "ceil(coalesce(mup.price, mc.price) / (1.0 + get_tax_rate(max(ds.sales_date)))) as price";
            discountSql = "dsd.detail_value_no_tax - dsd.discount_detail_value_no_tax";
        } else {
            // 税込み
            priceSql = "coalesce(mup.price, mc.price) as price";
            discountSql = "dsd.detail_value_in_tax - dsd.discount_detail_value_in_tax";
        }

        String productValueSql = makeValueString(paramBean);

        StringBuilder sql = new StringBuilder(1000);
        //削除されていないコースの売上取得
        sql.append(" select");
        sql.append("     mcc.display_seq as mcc_display_seq");
        sql.append("     ,mcc.course_class_id");
        sql.append("     ,mcc.course_class_name");
        sql.append("     ,mc.display_seq as mc_display_seq");
        sql.append("     ,mc.course_id");
        sql.append("     ,mc.course_name");
        sql.append("     ,count(dsd.product_num) as total_sales_num");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            //税抜き
            sql.append("     ,ceil(mc.price / (1.0 + get_tax_rate(max(coalesce(dsd.sales_date,current_date))))) as base_price");
            sql.append("     ,ceil(mc.sales_price / (1.0 + get_tax_rate(max(coalesce(dsd.sales_date,current_date))))) as sales_price");
            //LVTu start edit 2015/03/20 Bug #35449
            //sql.append("     ,ceil(coalesce(sum(dsd.product_value),0) / (1.0 + get_tax_rate(max(coalesce(dsd.sales_date,current_date))))) as total_sales_value");
            sql.append("     ,(coalesce(sum(dsd.product_value),0) / (1.0 + get_tax_rate(max(coalesce(dsd.sales_date,current_date))))) as total_sales_value");
            //LVTu end edit 2015/03/20 Bug #35449
            sql.append("     ,ceil(coalesce(sum(dsd.discount_value),0) / (1.0 + get_tax_rate(max(coalesce(dsd.sales_date,current_date))))) as total_discount_value");
        } else {
            //税込み
            sql.append("     ,mc.price as base_price");
            sql.append("     ,mc.sales_price");
            sql.append("     ,sum(dsd.product_value) as total_sales_value");
            sql.append("     ,sum(dsd.discount_value) as total_discount_value");
        }
        sql.append(" from");
        sql.append("     (");
        sql.append("         select");
        sql.append("         mc2.*, mc2.price as sales_price");
        sql.append("         from");
        sql.append("         mst_course mc2");
        //sql.append("         where mc2.delete_date is null");
        sql.append("     ) mc");
        sql.append("     inner join mst_course_class mcc");
        sql.append("     on mc.course_class_id = mcc.course_class_id");
        sql.append("     inner join ");
        sql.append("     (");
        sql.append("         select");
        //sql.append("         distinct dsd2.*, ds2.sales_date , dc2.product_num as contract_num, dc2.product_value as contract_value    ");
        //Thanh edit 20130716
        //sql.append("         dsd2.*, ds2.sales_date , dc2.product_num as contract_num, dc2.product_value as contract_value    ");
        sql.append("        distinct dsd2.*, ds2.sales_date ");
        //Thanh edit 20130716
        sql.append("         from data_sales ds2");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds2.shop_id AND dsmt.slip_no = ds2.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                        sql.append("     and dsmt.shop_category_id in( " + paramBean.getListCategoryId()+ ")	\n ");
        }
        
        sql.append("         inner join data_sales_detail dsd2");
        sql.append("         on ds2.shop_id = dsd2.shop_id and ds2.slip_no = dsd2.slip_no and dsd2.product_division = 5 ");
        sql.append("         inner join data_contract dc2");
        sql.append("         on ds2.shop_id = dc2.shop_id and ds2.slip_no = dc2.slip_no");
        //  sql.append("         where dsd2.product_division = " + productDivision );
        //  sql.append("         and ds2.delete_date is null");
        //  sql.append("         and dsd2.delete_date is null");
        //  sql.append("         and dc2.delete_date is null");
        sql.append("         where ds2.shop_id in (").append(paramBean.getShopIDList()).append(")");
        sql.append("         and ds2.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
         
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
        if (paramBean.getStaffId() != null) {
            if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
                sql.append("    and ds2.staff_id = '").append(paramBean.getStaffId().toString()).append("'");
            } else {
                sql.append("    and dsd2.staff_id = '").append(paramBean.getStaffId().toString()).append("'");
            }
        }
        }
        
       //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");            
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         view_data_sales_detail_valid dsd1\n");
            sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd2.product_division = dsd1.product_division and dsd1.product_division in (5) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = dsd2.slip_no and dsd1.shop_id = dsd2.shop_id and dsd1.slip_detail_no = dsd2.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getListCategoryId() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }
        //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        sql.append("     ) dsd");
        sql.append("     on mc.course_id = dsd.product_id");
        //sql.append(" where mcc.delete_date is null");
        sql.append(" group by mcc.display_seq,mcc.course_class_id,mcc.course_class_name,mc.display_seq,mc.course_id,mc.course_name,mc.price,mc.sales_price");
        // vtbphuong start delete Bug #21460 [gb]業務報告⇒コース詳細、消化一覧の金額が違う
//        sql.append(" union all");
//
//        //削除されているコースの売上取得
//        sql.append(" select");
//        sql.append("     mcc.display_seq as mcc_display_seq");
//        sql.append("     ,mcc.course_class_id");
//        sql.append("     ,mcc.course_class_name");
//        sql.append("     ,mc.display_seq as mc_display_seq");
//        sql.append("     ,mc.course_id");
//        sql.append("     ,mc.course_name");
//        sql.append("     ,count(dsd.product_num) as total_sales_num");
//        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
//            //税抜き
//            sql.append("     ,ceil(mc.price / (1.0 + get_tax_rate(max(coalesce(dsd.sales_date,current_date))))) as base_price");
//            sql.append("     ,ceil(mc.sales_price / (1.0 + get_tax_rate(max(coalesce(dsd.sales_date,current_date))))) as sales_price");
//            sql.append("     ,ceil(coalesce(sum(dsd.product_value),0) / (1.0 + get_tax_rate(max(coalesce(dsd.sales_date,current_date))))) as total_sales_value");
//            sql.append("     ,ceil(coalesce(sum(dsd.discount_value),0) / (1.0 + get_tax_rate(max(coalesce(dsd.sales_date,current_date))))) as total_discount_value");
//        } else {
//            //税込み
//            sql.append("     ,mc.price as base_price");
//            sql.append("     ,mc.sales_price");
//            sql.append("     ,sum(dsd.product_value) as total_sales_value");
//            sql.append("     ,sum(dsd.discount_value) as total_discount_value");
//        }
//        sql.append(" from");
//        sql.append("     (");
//        sql.append("         select");
//        sql.append("         mc2.*, mup2.price as sales_price");
//        sql.append("         from");
//        sql.append("         mst_course mc2");
//        sql.append("         left outer join mst_use_product mup2");
//        sql.append("         on mc2.course_id = mup2.product_id and mup2.product_division=3");
//        //sql.append("         where mc2.delete_date is not null");
//        sql.append("         and mup2.shop_id in (").append(paramBean.getShopIDList()).append(")");
//        sql.append("     ) mc");
//        sql.append("     inner join mst_course_class mcc");
//        sql.append("     on mc.course_class_id = mcc.course_class_id");
//        sql.append("     inner join ");
//        sql.append("     (");
//        sql.append("         select");
//        //sql.append("         distinct dsd2.*, ds2.sales_date  , dc2.product_num as contract_num, dc2.product_value as contract_value    ");
//         //Thanh edit 20130716
//        //sql.append("         dsd2.*, ds2.sales_date , dc2.product_num as contract_num, dc2.product_value as contract_value    ");
//        sql.append("        distinct dsd2.*, ds2.sales_date ");
//        //Thanh edit 20130716
//        sql.append("         from data_sales ds2");
//        sql.append("         inner join data_sales_detail dsd2");
//        sql.append("         on ds2.shop_id = dsd2.shop_id and ds2.slip_no = dsd2.slip_no");
//        sql.append("         inner join data_contract dc2");
//        sql.append("         on ds2.shop_id = dc2.shop_id and ds2.slip_no = dc2.slip_no");
//        sql.append("         where dsd2.product_division = " + productDivision );
//        //sql.append("         and ds2.delete_date is null");
//        //sql.append("         and dsd2.delete_date is null");
//        //sql.append("         and dc2.delete_date is null");
//        sql.append("         and ds2.shop_id in (").append(paramBean.getShopIDList()).append(")");
//        sql.append("         and ds2.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
//        if (paramBean.getStaffId() != null) {
//            if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
//                sql.append("    and ds2.staff_id = '").append(paramBean.getStaffId().toString()).append("'");
//            } else {
//                sql.append("    and dsd2.staff_id = '").append(paramBean.getStaffId().toString()).append("'");
//            }
//        }
//        sql.append("     ) dsd");
//        sql.append("     on mc.course_id = dsd.product_id");
//        sql.append(" group by mcc.display_seq,mcc.course_class_id,mcc.course_class_name,mc.display_seq,mc.course_id,mc.course_name,mc.price,mc.sales_price");
        // vtbphuong end delete Bug #21460 [gb]業務報告⇒コース詳細、消化一覧の金額が違う
        sql.append(" order by mcc_display_seq, mc_display_seq");
        System.out.println("************************:" + sql.toString());
        ResultSetWrapper rs = cw.executeQuery(sql.toString());

        Map<Integer, BusinessCourseReportBean> reportMap = new LinkedHashMap<Integer, BusinessCourseReportBean>();
        while (rs.next()) {
            BusinessCourseReportBean bean = null;
            Integer courseClassId = rs.getInt("course_class_id");
            if (reportMap.containsKey(courseClassId)) {
                bean = reportMap.get(courseClassId);
            } else {
                bean = new BusinessCourseReportBean();
                bean.setCourseClassId(courseClassId);
                bean.setCourseClassName(rs.getString("course_class_name"));
            }

            BusinessCourseReportCourseBean courseBean = new BusinessCourseReportCourseBean();
            courseBean.setCourseId(rs.getInt("course_id"));
            courseBean.setCourseName(rs.getString("course_name"));
            courseBean.setBasePrice(rs.getInt("base_price"));
            Object salesPrice = rs.getObject("sales_price");
            if (salesPrice != null) {
                courseBean.setSalesPrice(((BigDecimal) salesPrice).intValue());
            }
            courseBean.setTotalSalesNum(rs.getInt("total_sales_num"));
            //LVTu start edit 2015/03/20 Bug #35449
            //courseBean.setTotalSalesValue(rs.getInt("total_sales_value"));
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                courseBean.setTotalSalesNumDouble(rs.getDouble("total_sales_value"));
            } else {
            courseBean.setTotalSalesValue(rs.getInt("total_sales_value"));
            }
            //LVTu end edit 2015/03/20 Bug #35449
            courseBean.setTotalDiscountValue(rs.getInt("total_discount_value"));

            bean.addCourse(courseBean);

            reportMap.put(courseClassId, bean);
        }

        return reportMap.values();
    }

    /**
     * 業務報告(消化一覧)出力ロジック
     *
     * @param paramBean
     * @return
     * @throws Exception
     */
    public boolean viewBusinessReportForConsumption(ReportParameterBean paramBean) throws Exception {
        return viewBusinessReportForConsumption(paramBean, false);
    }

    public int viewBusinessReportForSalesDetail(ReportParameterBean paramBean) throws Exception {
        return viewBusinessReportForSalesDetail(paramBean, false);
    }

    //IVS_TMTrong start add 2015/10/02 New request #43049
    public Integer viewBusinessReportForSalesList(ReportParameterBean paramBean) throws Exception {
        return viewBusinessReportForSalesList(paramBean, false);
    }
    //IVS_TMTrong end add 2015/10/02 New request #43049
    
    /**
     * 業務報告(消化一覧)出力ロジック
     *
     * @param paramBean
     * @param isPDF
     * @return
     * @throws Exception
     */
    private boolean viewBusinessReportForConsumption(ReportParameterBean paramBean, boolean isPDF) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        HashMap<String, Object> paramMap = new HashMap<String, Object>();

        //------------------------------------------------------------
        // ヘッダー部の情報取得・生成
        //------------------------------------------------------------
        // 税込み･税別の区分
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            paramMap.put("TaxType", "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            paramMap.put("TaxType", "税込");
        }

        //担当区分
        if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
            paramMap.put("StaffType", "主担当");
        } else {
            paramMap.put("StaffType", "施術担当");
        }

        // 期間
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
        paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));

        // 店舗名もしくはスタッフ名(スタッフ未選択時は店舗名)
        if (null == paramBean.getStaffId() || "".equals(paramBean.getStaffId().toString())) {
            paramMap.put("TargetName", paramBean.getTargetName());
        } else {
            paramMap.put("TargetName", this.getStaffName(paramBean) + " （" + paramMap.get("StaffType") + "）");
        }

        //営業日数
        int operatingDays = getOperatingDays(cw, paramBean);
        paramMap.put("TargetDayCount", operatingDays + "日");

        //出力日時
        paramMap.put("OutputTime", new java.util.Date());


        // 明細のデータ(コース契約) 2791行目参照
        Collection<BusinessConsumptionReportBean> reportList = getConsumptionList(cw, paramBean, 6);

        // 明細がどちらもなければ終了
        if (reportList.size() == 0) {
            return false;
        }

        String fileName = "業務報告_コース消化一覧";
        JExcelApi jx = new JExcelApi(fileName);
        //テンプレートとなるファイルをセット
        jx.setTemplateFile("/reports/" + fileName + ".xls");

        //------------------------------
        // ヘッダー部に値をセット
        //------------------------------
        jx.setValue(7, 3, paramMap.get("TargetStartDate") + " 〜 " + paramMap.get("TargetEndDate"));
        jx.setValue(7, 4, paramMap.get("TargetName"));
        jx.setValue(7, 5, paramMap.get("TargetDayCount"));
        jx.setValue(7, 6, paramMap.get("TaxType"));
        if(paramBean.getUseShopCategory()==1) {
            jx.setValue(14, 5, paramBean.getListCategoryName());
        }else {
            jx.setValue(12, 5, "");
            jx.setValue(13, 5, "");
        }
        //コース消化情報セット
        int baseRow = 11;
        for (BusinessConsumptionReportBean bean : reportList) {
            List<BusinessConsumptionReportCourseBean> courseList = bean.getCourseList();
            //出力するコース数分行をinsert
            //ここではinsertするだけ。全角文字が出力されているとinsert等でエラーが発生する
            jx.insertRow(baseRow, courseList.size());
            for (int i = 0; i < courseList.size(); i++) {
                int row = baseRow + i + 1;
                //以下セルの結合
                jx.mergeCells(2, row, 7, row);  //分類名
                jx.mergeCells(8, row, 19, row);  //コース名
                jx.mergeCells(20, row, 22, row);  //消化金額
                jx.mergeCells(23, row, 24, row);  //数量
                jx.mergeCells(25, row, 27, row);  //分類比
                jx.mergeCells(28, row, 30, row);  //全体比
                jx.mergeCells(31, row, 34, row);  //消化金額

                //分類別
                jx.mergeCells(36, row, 38, row);  //数量
                jx.mergeCells(39, row, 41, row);  //％
                jx.mergeCells(42, row, 45, row);  //合計
            }
        }

        //上記処理でセルの準備ができたのでデータを出力する
        NumberFormat nf = NumberFormat.getInstance();
        double totalConsumptionNum = 0d;
        double totalConsumptionValue = 0d;
        for (BusinessConsumptionReportBean bean : reportList) {
            double subtotalConsumptionNum = 0d;
            double subtotalConsumptionValue = 0d;
            for (BusinessConsumptionReportCourseBean courseBean : bean.getCourseList()) {
                jx.setValue(1, baseRow, bean.getCourseClassName());//コース分類名
                jx.setValue(8, baseRow, courseBean.getCourseName());//コース名
                jx.setValue(20, baseRow, courseBean.getConsumptionPrice());//消化金額
                jx.setValue(23, baseRow, nf.format(courseBean.getTotalConsumptionNum()));//数量

                //   BigDecimal value = new BigDecimal(courseBean.getTotalConsumptionValue());
                //   value = value.setScale(0, RoundingMode.HALF_UP);

                jx.setValue(31, baseRow, nf.format(courseBean.getTotalConsumptionValue()));//売上（消化金額x数量）
                //    jx.setValue(31, baseRow, nf.format(value.longValue()));

                subtotalConsumptionNum += courseBean.getTotalConsumptionNum();
                subtotalConsumptionValue += courseBean.getTotalConsumptionValue();

                totalConsumptionNum += courseBean.getTotalConsumptionNum();
                //IVS_LVTu start edit 2016/03/11 Bug #49052
                //totalConsumptionValue += courseBean.getTotalConsumptionValue();
                totalConsumptionValue += courseBean.getTotalConsumption();
                baseRow++;
            }
            //分類別（数量）
            jx.setValue(36, baseRow - 1, nf.format(subtotalConsumptionNum));
            //分類別（合計）
            //  BigDecimal subrondTotalValue = new BigDecimal(subtotalConsumptionValue);
            // subrondTotalValue = subrondTotalValue.setScale(0, RoundingMode.HALF_UP);
            // subtotalConsumptionValue = subrondTotalValue.doubleValue();
            jx.setValue(42, baseRow - 1, nf.format(subtotalConsumptionValue));

            jx.setUpperLine(2, baseRow);
            jx.setUpperLine(36, baseRow);
            jx.setUpperLine(39, baseRow);
            jx.setUpperLine(42, baseRow);
        }
        //不要な行が2行あるので削除
        jx.removeRow(baseRow);
        jx.removeRow(baseRow);

         BigDecimal rondTotalValue = new BigDecimal(totalConsumptionValue);
         rondTotalValue = rondTotalValue.setScale(0, RoundingMode.HALF_UP);
         totalConsumptionValue = rondTotalValue.doubleValue();
         //IVS_LVTu end edit 2016/03/11 Bug #49052

        //数量の合計
        jx.setValue(23, baseRow, nf.format(totalConsumptionNum));
        //合計の合計
        jx.setValue(31, baseRow, nf.format(totalConsumptionValue));

        //分類別（数量）の合計
        jx.setValue(36, baseRow, nf.format(totalConsumptionNum));
        //分類別（合計）の合計


        jx.setValue(42, baseRow, nf.format(totalConsumptionValue));



        //ファイル出力
        jx.openWorkbook();

        return true;
    }

    /**
     * 業務報告(消化一覧)出力ロジック
     *
     * @param paramBean
     * @param isPDF
     * @return
     * @throws Exception
     */
    private int viewBusinessReportForSalesDetail(ReportParameterBean paramBean, boolean isPDF) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();
        ResultSetWrapper rs = new ResultSetWrapper();
        ResultSetWrapper rs1 = new ResultSetWrapper();
        ResultSetWrapper rs2 = new ResultSetWrapper();
        ResultSetWrapper rs3 = new ResultSetWrapper();
        ResultSetWrapper rs4 = new ResultSetWrapper();
        ResultSetWrapper rs5 = new ResultSetWrapper();

        HashMap<String, Object> paramMap = new HashMap<String, Object>();


        //------------------------------------------------------------
        // ヘッダー部の情報取得・生成
        //------------------------------------------------------------
        // 税込み･税別の区分
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            paramMap.put("TaxType", "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            paramMap.put("TaxType", "税込");
        }

        //担当区分
        if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
            paramMap.put("StaffType", "主担当");
        } else {
            paramMap.put("StaffType", "施術担当");
        }

        // 期間
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
        paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));

        // 店舗名もしくはスタッフ名(スタッフ未選択時は店舗名)
        if (null == paramBean.getStaffId() || "".equals(paramBean.getStaffId().toString())) {
            paramMap.put("TargetName", paramBean.getTargetName());
        } else {
            paramMap.put("TargetName", this.getStaffName(paramBean) + " （" + paramMap.get("StaffType") + "）");
        }



        String fileName = "売上明細";
        JPOIApiSaleTransittion jx = new JPOIApiSaleTransittion(fileName);
        JExcelApi je = new JExcelApi(fileName);
        //テンプレートとなるファイルをセット
        jx.setTemplateFile("/reports/" + fileName + ".xls");


        jx.setCellValue(2, 3, paramMap.get("TargetName").toString());
        jx.setCellValue(2, 4, paramMap.get("TargetStartDate") + " 〜 " + paramMap.get("TargetEndDate"));
        jx.setCellValue(2, 5, paramMap.get("TaxType").toString());

        //コース消化情報セット
        int lastRow = 15;


        StringBuffer sql = new StringBuffer(10000);
        //売上日 
        sql.append(" select distinct to_char(sales_date,'YYYY/MM/DD') as sales_date from data_sales");
        sql.append(" where sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "");
        sql.append(" and shop_id in(" + paramBean.getShopIDList() + ")");
        rs = cw.executeQuery(sql.toString());
        StringBuffer sql1, sql2, sql3, sql4, sql5 = null;
        long valueOfSlip = 0;
        int countSlip = 0;
        int countDay = 0;
        int maxtechnic = 0;
        int maxitem = 0;
        int maxProductRow = 0;
        long totalTechnic = 0;
        long totalItem = 0;
        long totalTax = 0;
        long totalDiscount = 0;
        long money = 0;
        long card = 0;
        long ecard = 0;
        long gift = 0;
        long totalMoney = 0;
        long totalCard = 0;
        long totalEcard = 0;
        long totalGift = 0;
        long totalBill = 0;
        long totalPayment = 0;
        int countAddRow = 0;

        if (!rs.next()) {
            return 0;
        }

        rs = cw.executeQuery(sql.toString());
        while (rs.next()) {

            countDay += 1;

            //lastRow += 1;

            if (countDay > 1) {
                jx.copyRow(6, lastRow + 2);
                jx.setCellValue(1, lastRow + 3, rs.getString("sales_date"));
                lastRow += 1;
            }
            sql1 = new StringBuffer(10000);
            sql1.append(" select ds.shop_id,ds.slip_no ,mc.customer_no,mc.customer_name1 || mc.customer_name2 as customer_name,\n");
            sql1.append(" case mc.sex when 1 then '男性' when 2 then '女性' end as sex,date_part('year',age(mc.birthday)) as age,mj.job_name,\n");
            sql1.append(" (select count(ds1.slip_no) from data_sales ds1 where ds1.customer_id = ds.customer_id) as cnt,\n");
            sql1.append(" ms.staff_name1 || ms.staff_name2 as staff_name,\n");
            sql1.append(" ds.designated_flag\n");
            sql1.append(" from data_sales ds \n");
            sql1.append(" left join mst_customer mc on ds.customer_id = mc.customer_id\n");
            sql1.append(" left join mst_job mj on mc.job_id = mj.job_id\n");
            sql1.append(" left join mst_staff ms on ds.staff_id = ms.staff_id\n");
            sql1.append(" where to_char(ds.sales_date,'YYYY/MM/DD') = '" + rs.getString("sales_date") + "'");
            sql1.append(" and ds.shop_id in(" + paramBean.getShopIDList() + ")");
            sql1.append(" order by ds.slip_no asc");
            rs1 = cw.executeQuery(sql1.toString());
            while (rs1.next()) {
                countSlip += 1;
                //jx.insertRow(baseRow1,baseRow1+(countSlip*9+1),1);
                //header slip no
                if (countSlip == 1 && countDay == 1) {
                    //売上日
                    jx.setCellValue(1, 7, rs.getString("sales_date"));

                    jx.setCellValue(1, 9, rs1.getString("slip_no"));
                    jx.setCellValue(2, 9, rs1.getString("customer_no"));
                    jx.setCellValue(3, 9, rs1.getString("customer_name"));
                    jx.setCellValue(4, 9, rs1.getString("sex"));
                    jx.setCellValue(5, 9, rs1.getString("age"));
                    jx.setCellValue(6, 9, rs1.getString("job_name"));
                    jx.setCellValue(7, 9, rs1.getInt("cnt"));
                    jx.setCellValue(8, 9, rs1.getString("staff_name"));
                    jx.setCellValue(9, 9, rs1.getBoolean("designated_flag") == true ? "●" : "");


                    sql2 = new StringBuffer();
                    sql2.append(" select dsd.product_division,\n");
                    sql2.append(" case dsd.product_division\n");
                    sql2.append("   when 1 then '技）'||mtc.technic_class_contracted_name \n");
                    sql2.append("   when 3 then 'ク）'||mtc.technic_class_contracted_name \n");
                    sql2.append("   when 5 then '契）'||mcc.course_class_contracted_name \n");
                    sql2.append("   when 6 then '消）'||mcc.course_class_contracted_name \n");
                    sql2.append("   when 8 then '解）'||mcc.course_class_contracted_name \n");
                    sql2.append("   when 9 then '手数料' \n");
                    sql2.append(" end as product_class_contracted_name,\n");
                    sql2.append(" case dsd.product_division\n");
                    sql2.append("   when 1 then mt.technic_name \n");
                    sql2.append("   when 3 then mt.technic_name \n");
                    sql2.append("   when 5 then mc.course_name \n");
                    sql2.append("   when 6 then mc.course_name \n");
                    sql2.append("   when 8 then mc.course_name \n");
                    sql2.append("   when 9 then '変更手数料' \n");

                    sql2.append(" end as product_name,\n");
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                        sql2.append(" detail_value_in_tax/dsd.product_num as product_value,");
                    } else {
                        sql2.append(" detail_value_no_tax/dsd.product_num as product_value,");
                    }
                    sql2.append(" dsd.discount_value ,");
                    /*
                     sql2.append(" case dsd.product_division when 1 then dsd.product_value - dsd.discount_value");
                     sql2.append(" when 3 then dsd.product_value - dsd.discount_value");
                     sql2.append(" when 5 then (dsd.product_value - dsd.discount_value)*dsd.product_num");
                     sql2.append(" when 6 then dsd.product_value - dsd.discount_value");
                     sql2.append(" end as amount_value");
                     * */
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                        sql2.append(" discount_detail_value_in_tax");
                    } else {
                        sql2.append(" discount_detail_value_no_tax");
                    }
                    sql2.append(" as amount_value\n");


                    sql2.append(" from view_data_sales_detail_valid dsd");

                    sql2.append(" left join mst_technic mt on dsd.product_id = mt.technic_id");
                    sql2.append(" left join mst_course mc on dsd.product_id = mc.course_id");
                    sql2.append(" left join mst_technic_class  mtc on mt.technic_class_id = mtc.technic_class_id");
                    sql2.append(" left join mst_course_class  mcc on mc.course_class_id = mcc.course_class_id");
                    sql2.append(" where slip_no = " + rs1.getString("slip_no") + " and shop_id = " + rs1.getString("shop_id") + "\n");
                    sql2.append(" and dsd.product_division in (1,3,5,6,8,9)");
                    rs2 = cw.executeQuery(sql2.toString());
                    maxtechnic = 0;
                    totalTechnic = 0;
                    valueOfSlip = 0;
                    int coutAdd = 0;
                    while (rs2.next()) {
                        maxtechnic += 1;
                        if (maxtechnic == 1) {
                            jx.setCellValue(1, 11, rs2.getString("product_class_contracted_name"));
                            jx.setCellValue(2, 11, rs2.getString("product_name"));
                            jx.setCellValue(4, 11, rs2.getDouble("product_value"));
                            jx.setCellValue(5, 11, rs2.getLong("discount_value"));
                            jx.setCellValue(6, 11, rs2.getLong("amount_value"));
                        } else if (maxtechnic == 2) {
                            jx.setCellValue(1, 12, rs2.getString("product_class_contracted_name"));
                            jx.setCellValue(2, 12, rs2.getString("product_name"));
                            jx.setCellValue(4, 12, rs2.getDouble("product_value"));
                            jx.setCellValue(5, 12, rs2.getLong("discount_value"));
                            jx.setCellValue(6, 12, rs2.getLong("amount_value"));
                        } else if (maxtechnic == 3) {
                            jx.setCellValue(1, 13, rs2.getString("product_class_contracted_name"));
                            jx.setCellValue(2, 13, rs2.getString("product_name"));
                            jx.setCellValue(4, 13, rs2.getDouble("product_value"));
                            jx.setCellValue(5, 13, rs2.getLong("discount_value"));
                            jx.setCellValue(6, 13, rs2.getLong("amount_value"));

                        } else if (maxtechnic > 3) {
                            jx.copyRow(11, 13);
                            jx.getCell(1, 13).setCellStyle(jx.getCell(1, 12).getCellStyle());
                            jx.getCell(2, 13).setCellStyle(jx.getCell(2, 12).getCellStyle());
                            jx.getCell(3, 13).setCellStyle(jx.getCell(3, 12).getCellStyle());
                            jx.getCell(4, 13).setCellStyle(jx.getCell(4, 12).getCellStyle());
                            jx.getCell(5, 13).setCellStyle(jx.getCell(5, 12).getCellStyle());
                            jx.getCell(6, 13).setCellStyle(jx.getCell(6, 12).getCellStyle());
                            jx.getCell(7, 13).setCellStyle(jx.getCell(7, 12).getCellStyle());
                            jx.getCell(8, 13).setCellStyle(jx.getCell(8, 12).getCellStyle());
                            jx.getCell(9, 13).setCellStyle(jx.getCell(9, 12).getCellStyle());
                            jx.getCell(10, 13).setCellStyle(jx.getCell(10, 12).getCellStyle());
                            jx.getCell(11, 13).setCellStyle(jx.getCell(11, 12).getCellStyle());
                            jx.getCell(12, 13).setCellStyle(jx.getCell(12, 12).getCellStyle());
                            jx.getCell(13, 13).setCellStyle(jx.getCell(13, 12).getCellStyle());
                            coutAdd = maxtechnic - 3;
                            countAddRow = coutAdd;
                            jx.setCellValue(1, 14, rs2.getString("product_class_contracted_name"));
                            jx.setCellValue(2, 14, rs2.getString("product_name"));
                            jx.setCellValue(4, 14, rs2.getDouble("product_value"));
                            jx.setCellValue(5, 14, rs2.getLong("discount_value"));
                            jx.setCellValue(6, 14, rs2.getLong("amount_value"));
                        }
                        totalTechnic += rs2.getLong("amount_value");
                        totalDiscount += rs2.getLong("discount_value");
                        if (rs2.getInt("product_division") == 1
                                || rs2.getInt("product_division") == 3
                                || rs2.getInt("product_division") == 5
                                || rs2.getInt("product_division") == 8
                                || rs2.getInt("product_division") == 9) {
                            valueOfSlip += rs2.getLong("amount_value");

                        }


                    }

                    maxProductRow = maxtechnic;
                    sql3 = new StringBuffer();
                    sql3.append(" select dsd.product_division,dsd.slip_no,\n");
                    sql3.append(" case dsd.product_division\n");
                    sql3.append("   when 2 then '商）'||itc.item_class_contracted_name \n");
                    sql3.append("   when 4 then '返）'||itc.item_class_contracted_name \n");
                    sql3.append(" end as item_class_contracted_name,\n");

                    sql3.append(" it.item_name,");
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                        sql3.append(" detail_value_in_tax/dsd.product_num as product_value,");
                    } else {
                        sql3.append(" detail_value_no_tax/dsd.product_num as product_value,");
                    }
                    sql3.append(" dsd.discount_value ,\n");
                    sql3.append(" dsd.product_num,\n");
                    /*
                     sql3.append(" case dsd.product_division when 1 then dsd.product_value - dsd.discount_value\n");
                     sql3.append(" when 2 then dsd.product_value - dsd.discount_value\n");
                     sql3.append(" when 3 then dsd.product_value - dsd.discount_value\n");
                     sql3.append(" when 4 then dsd.product_value - dsd.discount_value\n");
                     sql3.append(" when 5 then (dsd.product_value/dsd.product_num - dsd.discount_value)*dsd.product_num\n");
                     sql3.append(" when 6 then dsd.product_value - dsd.discount_value\n");
                     sql3.append(" end as amount_value\n");
                     * * */
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                        sql3.append(" discount_detail_value_in_tax");
                    } else {
                        sql3.append(" discount_detail_value_no_tax");
                    }
                    sql3.append(" as amount_value\n");



                    sql3.append(" from view_data_sales_detail_valid dsd\n");
                    sql3.append(" left join mst_item it on dsd.product_id = it.item_id\n");
                    sql3.append(" left join mst_item_class  itc on it.item_class_id = itc.item_class_id\n");
                    sql3.append(" where slip_no = " + rs1.getString("slip_no") + " and shop_id = " + rs1.getString("shop_id") + "\n");
                    sql3.append(" and dsd.product_division in (2,4)\n");
                    rs3 = cw.executeQuery(sql3.toString());
                    totalItem = 0;
                    while (rs3.next()) {
                        maxitem += 1;
                        if (maxitem == 1) {
                            jx.setCellValue(7, 11, rs3.getString("item_class_contracted_name"));
                            jx.setCellValue(8, 11, rs3.getString("item_name"));
                            jx.setCellValue(10, 11, rs3.getDouble("product_value"));
                            jx.setCellValue(11, 11, rs3.getLong("product_num"));
                            jx.setCellValue(12, 11, rs3.getLong("discount_value"));
                            jx.setCellValue(13, 11, rs3.getLong("amount_value"));
                        } else if (maxitem == 2) {
                            jx.setCellValue(7, 12, rs3.getString("item_class_contracted_name"));
                            jx.setCellValue(8, 12, rs3.getString("item_name"));
                            jx.setCellValue(10, 12, rs3.getDouble("product_value"));
                            jx.setCellValue(11, 12, rs3.getLong("product_num"));
                            jx.setCellValue(12, 12, rs3.getLong("discount_value"));
                            jx.setCellValue(13, 12, rs3.getLong("amount_value"));
                        } else if (maxitem == 3) {
                            jx.setCellValue(7, 13, rs3.getString("item_class_contracted_name"));
                            jx.setCellValue(8, 13, rs3.getString("item_name"));
                            jx.setCellValue(10, 13, rs3.getDouble("product_value"));
                            jx.setCellValue(11, 13, rs3.getLong("product_num"));
                            jx.setCellValue(12, 13, rs3.getLong("discount_value"));
                            jx.setCellValue(13, 13, rs3.getLong("amount_value"));
                        } else if (maxitem > 3) {
                            if (maxitem > maxtechnic) {
                                jx.copyRow(11, 13);
                                coutAdd = maxitem - 3;
                                countAddRow = coutAdd;
                                jx.getCell(1, 13).setCellStyle(jx.getCell(1, 12).getCellStyle());
                                jx.getCell(2, 13).setCellStyle(jx.getCell(2, 12).getCellStyle());
                                jx.getCell(3, 13).setCellStyle(jx.getCell(3, 12).getCellStyle());
                                jx.getCell(4, 13).setCellStyle(jx.getCell(4, 12).getCellStyle());
                                jx.getCell(5, 13).setCellStyle(jx.getCell(5, 12).getCellStyle());
                                jx.getCell(6, 13).setCellStyle(jx.getCell(6, 12).getCellStyle());
                                jx.getCell(7, 13).setCellStyle(jx.getCell(7, 12).getCellStyle());
                                jx.getCell(8, 13).setCellStyle(jx.getCell(8, 12).getCellStyle());
                                jx.getCell(9, 13).setCellStyle(jx.getCell(9, 12).getCellStyle());
                                jx.getCell(10, 13).setCellStyle(jx.getCell(10, 12).getCellStyle());
                                jx.getCell(11, 13).setCellStyle(jx.getCell(11, 12).getCellStyle());
                                jx.getCell(12, 13).setCellStyle(jx.getCell(12, 12).getCellStyle());
                                jx.getCell(13, 13).setCellStyle(jx.getCell(13, 12).getCellStyle());
                                jx.setCellValue(7, 14, rs3.getString("item_class_contracted_name"));
                                jx.setCellValue(8, 14, rs3.getString("item_name"));
                                jx.setCellValue(10, 14, rs3.getDouble("product_value"));
                                jx.setCellValue(11, 14, rs3.getLong("product_num"));
                                jx.setCellValue(12, 14, rs3.getLong("discount_value"));
                                jx.setCellValue(13, 14, rs3.getLong("amount_value"));
                            }
                        }

                        totalItem += rs3.getLong("amount_value");
                        totalDiscount += rs3.getLong("discount_value");
                        if (rs3.getInt("product_division") == 2
                                || rs3.getInt("product_division") == 4
                                || rs3.getInt("product_division") == 5
                                || rs3.getInt("product_division") == 9) {
                            valueOfSlip += rs3.getLong("amount_value");

                        }




                    }

                    if (maxitem > maxProductRow) {
                        maxProductRow = maxitem;
                    }
                    lastRow = lastRow + coutAdd;
                    //会計
                    if (maxProductRow > 3) {
                        jx.setCellValue(6, 10 + maxProductRow + 1, totalTechnic);
                        jx.setCellValue(13, 10 + maxProductRow + 1, totalItem);
                    } else {
                        jx.setCellValue(6, 14, totalTechnic);
                        jx.setCellValue(13, 14, totalItem);
                    }

                    //IVS_LVTu start edit 2015/12/17 New request #44147
                    sql4 = new StringBuffer();
                    sql4.append(" select (select coalesce(sum(discount_detail_value_in_tax - discount_detail_value_no_tax),0) \n");
                    sql4.append(" from  view_data_sales_detail_valid \n");
                    sql4.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in (1,2,5)) as tax\n");
//                    //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
//                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
//                        sql.append(" and \n");
//                        sql.append(" (	\n");
//                        sql.append(" exists (	\n");
//                        sql.append("         select 1 from \n");
//                        sql.append("         view_data_sales_detail_valid dsd1\n");
//                        sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division=1\n");
//                        sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
//                        sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n");
//                        sql.append("         and mtc.shop_category_id in( " + paramBean.getCategoryIDList() + ")	\n");
//                        sql.append("         ) 	\n");
//                        sql.append(" or \n");
//                        sql.append(" exists(\n");
//                        sql.append("         select 1 from\n");
//                        sql.append("         view_data_sales_detail_valid dsd1\n");
//                        sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n");
//                        sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
//                        sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
//                        sql.append("         and mic.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
//                        sql.append("         )\n");
//                        sql.append(" or \n");
//                        sql.append(" exists(\n");
//                        sql.append("         select 1 from\n");
//                        sql.append("         view_data_sales_detail_valid dsd1\n");
//                        sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5,6) \n");
//                        sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
//                        sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
//                        sql.append("         and mic.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
//                        sql.append("         )\n");
//                        sql.append(" )\n");
//                    }
//                    //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
                    sql4.append(" ,(select st.staff_name1||st.staff_name2 as staff_name from \n");
                    sql4.append(" data_payment dp\n");
                    sql4.append(" inner join mst_staff st on dp.staff_id = st.staff_id \n");
                    sql4.append(" where dp.slip_no = ds.slip_no and dp.shop_id = ds.shop_id\n");
                    sql4.append(" order by payment_no asc limit 1\n");
                    sql4.append(" ) as staff_name, \n");

                    //sql4.append(" ,s.staff_name1||s.staff_name2 as staff_name ,\n");
                    sql4.append(" (select  date_part('hour',visit_time)||':'||date_part('minute',visit_time)\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id) as visit_time,\n");
                    sql4.append(" (select  date_part('hour',start_time)||':'||date_part('minute',start_time)\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id) as start_time,\n");
                    sql4.append(" (select  date_part('hour',leave_time)||':'||date_part('minute',leave_time)\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id) as leave_time,\n");
                    sql4.append(" (\n");
                    sql4.append(" select date_part('hour',( \n");
                    sql4.append(" (select start_time\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id) - (select visit_time\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id)  ))*60+  \n");
                    sql4.append(" date_part('minute',( (select start_time\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id))) - date_part('minute', (select visit_time\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id))) as distance,\n");

                    sql4.append(" (select coalesce(sum(payment_value),0) from data_payment_detail \n");
                    sql4.append(" where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append("  and payment_method_id in (\n");
                    sql4.append("  select payment_method_id from mst_payment_method where payment_class_id = 1)\n");
                    sql4.append(" )as money_value,\n");
                    sql4.append(" (select coalesce(sum(payment_value),0) from data_payment_detail \n");
                    sql4.append("  where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append("  and payment_method_id in (\n");
                    sql4.append("  select payment_method_id from mst_payment_method where payment_class_id = 2)\n");
                    sql4.append(" )as card_value,\n");
                    sql4.append(" (select coalesce(sum(payment_value),0) from data_payment_detail \n");
                    sql4.append("  where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append("  and payment_method_id in (\n");
                    sql4.append("  select payment_method_id from mst_payment_method where payment_class_id = 3)\n");
                    sql4.append(" )as ecard_value,\n");
                    sql4.append(" (select coalesce(sum(payment_value),0) from data_payment_detail \n");
                    sql4.append("  where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append("  and payment_method_id in (\n");
                    sql4.append("  select payment_method_id from mst_payment_method where payment_class_id = 4)\n");
                    sql4.append(" )as gift_value,\n");
                    sql4.append(" (select coalesce(sum(bill_value),0) from data_payment \n");
                    sql4.append("  where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append(" ) as bill_value\n");
                    sql4.append(" ,(select coalesce(sum(discount_value),0) from data_sales_detail\n");
                    sql4.append(" where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append(" and product_division = 0\n");
                    sql4.append(" ) as discount_all\n");
                    sql4.append(" from view_data_sales_valid ds\n");
                    sql4.append(" left join mst_staff s on ds.staff_id = s.staff_id\n");
                    sql4.append(" where ds.slip_no = " + rs1.getString("slip_no") + " and ds.shop_id = " + rs1.getString("shop_id") + " \n");
                    rs4 = cw.executeQuery(sql4.toString());
                    while (rs4.next()) {
                        totalTax += rs4.getLong("tax");
                        money = rs4.getLong("money_value");
                        totalCard += rs4.getLong("card_value");
                        totalEcard += rs4.getLong("ecard_value");
                        totalGift += rs4.getLong("gift_value");
                        totalBill += rs4.getLong("bill_value");
                        totalPayment = money+rs4.getLong("card_value")+ rs4.getLong("ecard_value")+rs4.getLong("gift_value");
                        
                        jx.setCellValue(10, 9, rs4.getString("staff_name"));
                      
                        
                        if(totalPayment>valueOfSlip) {
                            money = money-(totalPayment-valueOfSlip);                           
                        }
                        totalMoney+=money; 
                        if (maxProductRow > 3) {
//                            jx.setCellValue(2, 10 + maxProductRow + 2, rs4.getLong("tax"));
//                            jx.setCellValue(4, 10 + maxProductRow + 2, money);
//                            jx.setCellValue(6, 10 + maxProductRow + 2, rs4.getLong("ecard_value"));
                            jx.setCellValue(10, 10 + maxProductRow + 2, rs4.getString("visit_time") == null ? "" : rs4.getString("visit_time").toString());
                            jx.setCellValue(12, 10 + maxProductRow + 2, rs4.getString("start_time") == null ? "" : rs4.getString("start_time").toString());

                            //IVS_LVTu start edit 2015/10/16 Bug #43530
//                            jx.setCellValue(2, 10 + maxProductRow + 2, valueOfSlip);
//                            jx.setCellValue(4, 10 + maxProductRow + 2, rs4.getLong("card_value"));
//                            jx.setCellValue(6, 10 + maxProductRow + 2, rs4.getLong("gift_value"));
//
//                            jx.setCellValue(7, 10 + maxProductRow + 2, rs4.getLong("bill_value"));
//                            jx.setCellValue(8, 10 + maxProductRow + 2, rs4.getString("staff_name"));
//
//                            jx.setCellValue(10, 10 + maxProductRow + 2, rs4.getString("leave_time"));
//                            jx.setCellValue(12, 10 + maxProductRow + 2, rs4.getLong("distance"));
                            jx.setCellValue(1, 10 + maxProductRow + 3, rs4.getLong("discount_all"));
                            jx.setCellValue(2, 10 + maxProductRow + 3, rs4.getLong("tax"));
                            jx.setCellValue(3, 10 + maxProductRow + 3, valueOfSlip - rs4.getLong("discount_all"));
                            jx.setCellValue(4, 10 + maxProductRow + 3, money);
                            jx.setCellValue(5, 10 + maxProductRow + 3, rs4.getLong("card_value"));
                            jx.setCellValue(6, 10 + maxProductRow + 3, rs4.getLong("ecard_value"));
                            jx.setCellValue(7, 10 + maxProductRow + 3, rs4.getLong("gift_value"));

                            jx.setCellValue(8, 10 + maxProductRow + 3, rs4.getLong("bill_value"));
                            //jx.setCellValue(8, 10 + maxProductRow + 3, rs4.getString("staff_name"));

                            jx.setCellValue(10, 10 + maxProductRow + 3, rs4.getString("leave_time"));
                            jx.setCellValue(12, 10 + maxProductRow + 3, rs4.getLong("distance"));
                            //IVS_LVTu end edit 2015/10/16 Bug #43530
                        } else {

//                            jx.setCellValue(2, 15, rs4.getLong("tax"));
//                            jx.setCellValue(4, 15, money);
//                            jx.setCellValue(6, 15, rs4.getLong("ecard_value"));
                            jx.setCellValue(10, 15, rs4.getString("visit_time"));
                            jx.setCellValue(12, 15, rs4.getString("start_time"));

                            jx.setCellValue(1, 16, rs4.getLong("discount_all"));
                            jx.setCellValue(2, 16, rs4.getLong("tax"));
                            jx.setCellValue(3, 16, valueOfSlip - rs4.getLong("discount_all"));
                            jx.setCellValue(4, 16, money);
                            jx.setCellValue(5, 16, rs4.getLong("card_value"));
                            jx.setCellValue(6, 16, rs4.getLong("ecard_value"));
                            jx.setCellValue(7, 16, rs4.getLong("gift_value"));
                            jx.setCellValue(8, 16, rs4.getLong("bill_value"));
                            //jx.setCellValue(8, 16, rs4.getString("staff_name"));
                            jx.setCellValue(10, 16, rs4.getString("leave_time") == null ? "" : rs4.getString("leave_time").toString());
                            jx.setCellValue(12, 16, rs4.getLong("distance"));


                        }
                        

                    }


                } else {
                    //set slip no header 

                    //IVS_LVTu start edit 2015/10/15 Bug #43530
                    //jx.copyRow(7, lastRow + 2);
                    jx.copyRow(7, lastRow + 2);
                    jx.setCellValue(1, lastRow + 3, "【伝票No】");
                    jx.setCellValue(2, lastRow + 3, "【顧客No】");
                    jx.setCellValue(3, lastRow + 3, "【名前】");
                    jx.setCellValue(4, lastRow + 3, "【性別】");
                    jx.setCellValue(5, lastRow + 3, "【年齢】");
                    jx.setCellValue(6, lastRow + 3, "【職業】");
                    jx.setCellValue(7, lastRow + 3, "【来店回数】");
                    jx.setCellValue(8, lastRow + 3, "【主担当】");
                    jx.setCellValue(9, lastRow + 3, "【指名】");
                    jx.setCellValue(10, lastRow + 3, "【レジ担当】");

                    //master slip no infomation
                    //jx.copyRow(8, lastRow + 3);
                    jx.copyRow(8, lastRow + 3);

                    jx.setCellValue(1, lastRow + 4, rs1.getString("slip_no"));
                    jx.setCellValue(2, lastRow + 4, rs1.getString("customer_no"));
                    jx.setCellValue(3, lastRow + 4, rs1.getString("customer_name"));
                    jx.setCellValue(4, lastRow + 4, rs1.getString("sex"));
                    jx.setCellValue(5, lastRow + 4, rs1.getString("age"));
                    jx.setCellValue(6, lastRow + 4, rs1.getString("job_name"));
                    jx.setCellValue(7, lastRow + 4, rs1.getInt("cnt"));
                    jx.setCellValue(8, lastRow + 4, rs1.getString("staff_name"));
                    jx.setCellValue(9, lastRow + 4, rs1.getBoolean("designated_flag") == true ? "●" : "");

                    //master slip no infomation
                    jx.copyRow(9, lastRow + 4);

                    jx.setCellValue(1, lastRow + 5, "【技術/コース契約/コース消化】");
                    jx.setCellValue(4, lastRow + 5, "【単価】");
                    jx.setCellValue(5, lastRow + 5, "【割引】");
                    jx.setCellValue(6, lastRow + 5, "【金額】");
                    jx.setCellValue(7, lastRow + 5, "【商品】");
                    jx.setCellValue(10, lastRow + 5, "【単価】");
                    jx.setCellValue(11, lastRow + 5, "【数量】");
                    jx.setCellValue(12, lastRow + 5, "【割引】");
                    jx.setCellValue(13, lastRow + 5, "【金額】");


                    sql2 = new StringBuffer();
                    sql2.append(" select dsd.product_division,");
                    sql2.append(" case dsd.product_division\n");
                    sql2.append("   when 1 then  '技）'|| mtc.technic_class_contracted_name \n");
                    sql2.append("   when 3 then 'ク）'||mtc.technic_class_contracted_name \n");
                    sql2.append("   when 5 then '契）'||mcc.course_class_contracted_name \n");
                    sql2.append("   when 6 then '消）'||mcc.course_class_contracted_name \n");
                    sql2.append("   when 8 then '解）'||mcc.course_class_contracted_name \n");
                    sql2.append("   when 9 then '手数料' \n");
                    sql2.append(" end as product_class_contracted_name,\n");
                    sql2.append("  case dsd.product_division\n");
                    sql2.append("   when 1 then mt.technic_name \n");
                    sql2.append("   when 3 then mt.technic_name \n");
                    sql2.append("   when 5 then mc.course_name \n");
                    sql2.append("   when 6 then mc.course_name \n");
                    sql2.append("   when 8 then mc.course_name \n");
                    sql2.append("   when 9 then '変更手数料' \n");
                    sql2.append(" end as product_name,\n");
                    //Luc start edit 20151007 #43245
                    //if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                    //    sql2.append(" detail_value_in_tax/dsd.product_num as product_value,");
                    //} else {
                    //    sql2.append(" detail_value_no_tax/dsd.product_num as product_value,");
                    //}
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                        sql2.append(" case when dsd.product_num <> 0 then detail_value_in_tax/dsd.product_num else 0 end as product_value,");
                    } else {
                        sql2.append(" case when dsd.product_num <> 0 then detail_value_no_tax/dsd.product_num else 0 end as product_value,");
                    }
                    //Luc end edit 20151007 #43245
                    sql2.append(" dsd.discount_value ,");

                    /*
                     sql2.append(" case dsd.product_division when 1 then dsd.product_value - dsd.discount_value");
                     sql2.append(" when 3 then dsd.product_value - dsd.discount_value");
                     sql2.append(" when 5 then (dsd.product_value - dsd.discount_value)*dsd.product_num");
                     sql2.append(" when 6 then dsd.product_value - dsd.discount_value");
                     sql2.append(" end as amount_value");
                     * */
                    //nhanvt start edit 20141009 Bug #31219
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                        
                        sql2.append(" case dsd.product_division ");
                        sql2.append(" when 1 then ");
                        sql2.append(" discount_detail_value_in_tax*dsd.product_num ");
                        sql2.append(" when 3 then ");
                        sql2.append(" discount_detail_value_in_tax*dsd.product_num ");
                        sql2.append(" when 5 then ");
                        sql2.append(" discount_detail_value_in_tax*dsd.product_num ");
                        sql2.append(" when 6 then  ");
                       // sql2.append(" ((select product_num ::INT from data_contract_digestion where slip_no= dsd.slip_no and shop_id = dsd.shop_id)*dsd.discount_detail_value_in_tax ) ");
                        
                        
                        sql2.append(" (select dcd.product_num ::INT ");
                        sql2.append(" from data_contract_digestion dcd ");
                        sql2.append(" inner join data_sales_detail dsd1 on dcd.contract_no = dsd1.contract_no and dcd.contract_detail_no = dsd1.contract_detail_no  ");
                        sql2.append(" and dcd.slip_no = dsd1.slip_no and dcd.shop_id = dsd1.shop_id   ");
                        sql2.append(" where dcd.slip_no = dsd.slip_no and dcd.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no  ");
                        sql2.append(" )*dsd.discount_detail_value_in_tax ");
                       
                        
                        
                        
                        
                        sql2.append(" when 8 then ");
                        sql2.append(" discount_detail_value_in_tax*dsd.product_num ");
                        sql2.append(" when 9 then ");
                        
                        sql2.append(" discount_detail_value_in_tax*dsd.product_num ");
                        sql2.append(" end as amount_value ");
                       // sql2.append(" discount_detail_value_in_tax");
                        
                    } else {
                        
                        sql2.append(" case dsd.product_division ");
                        sql2.append(" when 1 then ");
                        sql2.append(" discount_detail_value_no_tax*dsd.product_num ");
                        sql2.append(" when 3 then ");
                        sql2.append(" discount_detail_value_no_tax*dsd.product_num ");
                        sql2.append(" when 5 then ");
                        sql2.append(" discount_detail_value_no_tax*dsd.product_num ");
                        sql2.append(" when 6 then  ");
                        //sql2.append(" ((select product_num ::INT from data_contract_digestion where slip_no= dsd.slip_no and shop_id = dsd.shop_id)*dsd.discount_detail_value_no_tax ) ");
                         sql2.append(" (select dcd.product_num ::INT ");
                        sql2.append(" from data_contract_digestion dcd ");
                        sql2.append(" inner join data_sales_detail dsd1 on dcd.contract_no = dsd1.contract_no and dcd.contract_detail_no = dsd1.contract_detail_no  ");
                        sql2.append(" and dcd.slip_no = dsd1.slip_no and dcd.shop_id = dsd1.shop_id   ");
                        sql2.append(" where dcd.slip_no = dsd.slip_no and dcd.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no  ");
                        sql2.append(" )*dsd.discount_detail_value_no_tax ");
                        sql2.append(" when 8 then ");
                        sql2.append(" discount_detail_value_no_tax*dsd.product_num ");
                        sql2.append(" when 9 then ");
                        
                        sql2.append(" discount_detail_value_no_tax*dsd.product_num ");
                        sql2.append(" end as amount_value ");
                        //sql2.append(" discount_detail_value_no_tax");
                        
                    }
                    //sql2.append(" as amount_value\n");
                    //nhanvt start edit 20141009 Bug #31219

                    sql2.append(" from view_data_sales_detail_valid dsd");

                    sql2.append(" left join mst_technic mt on dsd.product_id = mt.technic_id");
                    sql2.append(" left join mst_course mc on dsd.product_id = mc.course_id");
                    sql2.append(" left join mst_technic_class  mtc on mt.technic_class_id = mtc.technic_class_id");
                    sql2.append(" left join mst_course_class  mcc on mc.course_class_id = mcc.course_class_id");
                    sql2.append(" where slip_no = " + rs1.getString("slip_no") + " and shop_id = " + rs1.getString("shop_id") + "\n");
                    sql2.append(" and dsd.product_division in (1,3,5,6,8,9)");
                    rs2 = cw.executeQuery(sql2.toString());
                    maxtechnic = 0;
                    totalTechnic = 0;
                    valueOfSlip = 0;
                    while (rs2.next()) {
                        maxtechnic += 1;
                        jx.copyRow(11, lastRow + 5);
                        //技術
                        jx.setCellValue(1, lastRow + 6, rs2.getString("product_class_contracted_name"));
                        jx.setCellValue(2, lastRow + 6, rs2.getString("product_name"));
                        jx.setCellValue(4, lastRow + 6, rs2.getDouble("product_value"));
                        jx.setCellValue(5, lastRow + 6, rs2.getLong("discount_value"));
                        jx.setCellValue(6, lastRow + 6, rs2.getLong("amount_value"));
                        //商品
                        jx.setCellValue(7, lastRow + 6, "");
                        jx.setCellValue(8, lastRow + 6, "");
                        jx.setCellValue(10, lastRow + 6, "");
                        jx.setCellValue(11, lastRow + 6, "");
                        jx.setCellValue(12, lastRow + 6, "");
                        jx.setCellValue(13, lastRow + 6, "");
                        totalTechnic += rs2.getLong("amount_value");
                        totalDiscount += rs2.getLong("discount_value");
                        if (rs2.getInt("product_division") == 1
                                || rs2.getInt("product_division") == 3
                                || rs2.getInt("product_division") == 5
                                || rs2.getInt("product_division") == 8
                                || rs2.getInt("product_division") == 9) {
                            valueOfSlip += rs2.getLong("amount_value");

                        }

                    }
                    maxProductRow = maxtechnic;
                    sql3 = new StringBuffer();
                    sql3.append(" select dsd.product_division,dsd.slip_no,\n");
                    sql3.append(" case dsd.product_division\n");
                    sql3.append("   when 2 then '商）'||itc.item_class_contracted_name \n");
                    sql3.append("   when 4 then '返）'||itc.item_class_contracted_name \n");
                    sql3.append(" end as item_class_contracted_name,\n");
                    sql3.append(" it.item_name,");
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                        sql3.append(" detail_value_in_tax/dsd.product_num as product_value,");
                    } else {
                        sql3.append(" detail_value_no_tax/dsd.product_num as product_value,");
                    }
                    sql3.append(" dsd.discount_value ,\n");
                    sql3.append(" dsd.product_num,\n");
                    /*
                     sql3.append(" case dsd.product_division when 1 then dsd.product_value - dsd.discount_value\n");
                     sql3.append(" when 2 then dsd.product_value - dsd.discount_value\n");
                     sql3.append(" when 3 then dsd.product_value - dsd.discount_value\n");
                     sql3.append(" when 4 then dsd.product_value - dsd.discount_value\n");
                     sql3.append(" when 5 then (dsd.product_value/dsd.product_num - dsd.discount_value)*dsd.product_num\n");
                     sql3.append(" when 6 then dsd.product_value - dsd.discount_value\n");
                     sql3.append(" end as amount_value\n");
                     * */
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                        sql3.append(" discount_detail_value_in_tax");
                    } else {
                        sql3.append(" discount_detail_value_no_tax");
                    }
                    sql3.append(" as amount_value\n");

                    sql3.append(" from view_data_sales_detail_valid dsd\n");
                    sql3.append(" left join mst_item it on dsd.product_id = it.item_id\n");
                    sql3.append(" left join mst_item_class  itc on it.item_class_id = itc.item_class_id\n");
                    sql3.append(" where slip_no = " + rs1.getString("slip_no") + " and shop_id = " + rs1.getString("shop_id") + "\n");
                    sql3.append(" and dsd.product_division in (2,4)\n");
                    rs3 = cw.executeQuery(sql3.toString());
                    maxitem = 0;
                    totalItem = 0;
                    while (rs3.next()) {
                        maxitem += 1;
                        if (maxitem > maxtechnic) {
                            jx.copyRow(11, lastRow + 5);
                            //技術
                            jx.setCellValue(1, lastRow + 5 + maxitem + 1, "");
                            jx.setCellValue(2, lastRow + 5 + maxitem + 1, "");
                            jx.setCellValue(4, lastRow + 5 + maxitem + 1, "");
                            jx.setCellValue(5, lastRow + 5 + maxitem + 1, "");
                            jx.setCellValue(6, lastRow + 5 + maxitem + 1, "");
                            for (int i = 0; i < maxtechnic; i++) {
                                jx.setCellValue(1, lastRow + 5 + i + 1, jx.getCellValue(1, lastRow + 5 + i + 2));
                                jx.setCellValue(2, lastRow + 5 + i + 1, jx.getCellValue(2, lastRow + 5 + i + 2));
                                jx.setCellValue(4, lastRow + 5 + i + 1, Double.valueOf(jx.getCellValue(4, lastRow + 5 + i + 2)));
                                jx.setCellValue(5, lastRow + 5 + i + 1, Double.valueOf(jx.getCellValue(5, lastRow + 5 + i + 2)).longValue());
                                jx.setCellValue(6, lastRow + 5 + i + 1, Double.valueOf(jx.getCellValue(6, lastRow + 5 + i + 2)).longValue());

                                jx.setCellValue(1, lastRow + 5 + i + 2, "");
                                jx.setCellValue(2, lastRow + 5 + i + 2, "");
                                jx.setCellValue(4, lastRow + 5 + i + 2, "");
                                jx.setCellValue(5, lastRow + 5 + i + 2, "");
                                jx.setCellValue(6, lastRow + 5 + i + 2, "");
                            }


                        }
                        //商品
                        jx.setCellValue(7, lastRow + 6, rs3.getString("item_class_contracted_name"));
                        jx.setCellValue(8, lastRow + 6, rs3.getString("item_name"));
                        jx.setCellValue(10, lastRow + 6, rs3.getDouble("product_value"));
                        jx.setCellValue(11, lastRow + 6, rs3.getLong("product_num"));
                        jx.setCellValue(12, lastRow + 6, rs3.getLong("discount_value"));
                        jx.setCellValue(13, lastRow + 6, rs3.getLong("amount_value"));
                        totalItem += rs3.getLong("amount_value");
                        totalDiscount += rs3.getLong("discount_value");
                        if (rs3.getInt("product_division") == 2
                                || rs3.getInt("product_division") == 4
                                || rs3.getInt("product_division") == 5
                                || rs3.getInt("product_division") == 9) {
                            valueOfSlip += rs3.getLong("amount_value");

                        }

                    }

                    if (maxitem > maxProductRow) {
                        maxProductRow = maxitem;
                    }

                    //小計
                    //jx.copyRow(13, lastRow + 5 + maxProductRow);
                    jx.copyRow(13 + countAddRow, lastRow + 5 + maxProductRow);
                    jx.setCellValue(1, lastRow + 5 + maxProductRow + 1, "小計");
                    jx.setCellValue(6, lastRow + 5 + maxProductRow + 1, totalTechnic);
                    jx.setCellValue(7, lastRow + 5 + maxProductRow + 1, "小計");
                    jx.setCellValue(13, lastRow + 5 + maxProductRow + 1, totalItem);


                    ///【消費税】
                    //jx.copyRow(14, lastRow + 5 + maxProductRow + 1);
                    jx.copyRow(14 + countAddRow, lastRow + 5 + maxProductRow + 1);
                    jx.setCellValue(1, lastRow + 6 + maxProductRow + 1, "【全体割引】");
                    jx.setCellValue(2, lastRow + 6 + maxProductRow + 1, "【消費税】");
                    jx.setCellValue(3, lastRow + 6 + maxProductRow + 1, "【請求金額】");
                    jx.setCellValue(4, lastRow + 6 + maxProductRow + 1, "【現金】");
                    jx.setCellValue(5, lastRow + 6 + maxProductRow + 1, "【カード】");
                    jx.setCellValue(6, lastRow + 6 + maxProductRow + 1, "【電子マネー】");
                    jx.setCellValue(7, lastRow + 6 + maxProductRow + 1, "【金券・その他】");
                    jx.setCellValue(8, lastRow + 6 + maxProductRow + 1, "[売掛金]");
                    //jx.setCellValue(8, lastRow + 6 + maxProductRow + 1, "【レジ担当】");
                    jx.setCellValue(9, lastRow + 6 + maxProductRow + 1, "入店");
                    jx.setCellValue(11, lastRow + 6 + maxProductRow + 1, "スタート");

                    //jx.copyRow(15, lastRow + 5 + maxProductRow + 2);
                    jx.copyRow(15 + countAddRow, lastRow + 5 + maxProductRow + 2);
                    //IVS_LVTu end edit 2015/10/15 Bug #43530
//                    jx.setCellValue(1, lastRow + 6 + maxProductRow + 2, "【請求金額】");
//                    jx.setCellValue(3, lastRow + 6 + maxProductRow + 2, "【カード】");
//                    jx.setCellValue(5, lastRow + 6 + maxProductRow + 2, "【金券・その他】");
                    jx.setCellValue(9, lastRow + 6 + maxProductRow + 2, "退店");
                    jx.setCellValue(11, lastRow + 6 + maxProductRow + 2, "待ち");

                    sql4 = new StringBuffer();
                    sql4.append(" select (select coalesce(sum(discount_detail_value_in_tax - discount_detail_value_no_tax),0) \n");
                    sql4.append(" from  view_data_sales_detail_valid \n");
                    sql4.append(" where shop_id = ds.shop_id and slip_no = ds.slip_no and product_division in (1,2,5)) as tax,\n");
//                    //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
//                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
//                        sql.append(" and \n");
//                        sql.append(" (	\n");
//                        sql.append(" exists (	\n");
//                        sql.append("         select 1 from \n");
//                        sql.append("         view_data_sales_detail_valid dsd1\n");
//                        sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division=1\n");
//                        sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
//                        sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n");
//                        sql.append("         and mtc.shop_category_id in(" + paramBean.getCategoryIDList() + ")	\n");
//                        sql.append("         ) 	\n");
//                        sql.append(" or \n");
//                        sql.append(" exists(\n");
//                        sql.append("         select 1 from\n");
//                        sql.append("         view_data_sales_detail_valid dsd1\n");
//                        sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n");
//                        sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
//                        sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
//                        sql.append("         and mic.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
//                        sql.append("         )\n");
//                        sql.append(" or \n");
//                        sql.append(" exists(\n");
//                        sql.append("         select 1 from\n");
//                        sql.append("         view_data_sales_detail_valid dsd1\n");
//                        sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5,6) \n");
//                        sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
//                        sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
//                        sql.append("         and mic.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
//                        sql.append("         )\n");
//                        sql.append(" )\n");
//                    }
//                    //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
                    sql4.append(" (select st.staff_name1||st.staff_name2 as staff_name from \n");
                    sql4.append(" data_payment dp\n");
                    sql4.append(" inner join mst_staff st on dp.staff_id = st.staff_id \n");
                    sql4.append(" where dp.slip_no = ds.slip_no and dp.shop_id = ds.shop_id\n");
                    sql4.append(" order by payment_no asc limit 1\n");
                    sql4.append(" ) as staff_name, \n");
                    sql4.append(" (select  date_part('hour',visit_time)||':'||date_part('minute',visit_time)\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id) as visit_time,\n");
                    sql4.append(" (select  date_part('hour',start_time)||':'||date_part('minute',start_time)\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id) as start_time,\n");
                    sql4.append(" (select  date_part('hour',leave_time)||':'||date_part('minute',leave_time)\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id) as leave_time,\n");
                    sql4.append(" (\n");
                    sql4.append(" select date_part('hour',( \n");
                    sql4.append(" (select start_time\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id) - (select visit_time\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id)  ))*60+  \n");
                    sql4.append(" date_part('minute',( (select start_time\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id))) - date_part('minute',(select visit_time\n");
                    sql4.append(" from data_reservation \n");
                    sql4.append(" where slip_no = ds.slip_no  and shop_id = ds.shop_id))) as distance,\n");

                    sql4.append(" (select coalesce(sum(payment_value),0) from data_payment_detail \n");
                    sql4.append(" where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append("  and payment_method_id in (\n");
                    sql4.append("  select payment_method_id from mst_payment_method where payment_class_id = 1)\n");
                    sql4.append(" )as money_value,\n");
                    sql4.append(" (select coalesce(sum(payment_value),0) from data_payment_detail \n");
                    sql4.append("  where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append("  and payment_method_id in (\n");
                    sql4.append("  select payment_method_id from mst_payment_method where payment_class_id = 2)\n");
                    sql4.append(" )as card_value,\n");
                    sql4.append(" (select coalesce(sum(payment_value),0) from data_payment_detail \n");
                    sql4.append("  where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append("  and payment_method_id in (\n");
                    sql4.append("  select payment_method_id from mst_payment_method where payment_class_id = 3)\n");
                    sql4.append(" )as ecard_value,\n");
                    sql4.append(" (select coalesce(sum(payment_value),0) from data_payment_detail \n");
                    sql4.append("  where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append("  and payment_method_id in (\n");
                    sql4.append("  select payment_method_id from mst_payment_method where payment_class_id = 4)\n");
                    sql4.append(" )as gift_value,\n");
                    sql4.append(" (select coalesce(sum(bill_value),0) from data_payment \n");
                    sql4.append("  where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append(" ) as bill_value\n");
                    sql4.append(" ,(select coalesce(sum(discount_value),0) from data_sales_detail\n");
                    sql4.append(" where slip_no = ds.slip_no \n");
                    sql4.append(" and delete_date is null \n");
                    sql4.append(" and shop_id = ds.shop_id \n");
                    sql4.append(" and product_division = 0\n");
                    sql4.append(" ) as discount_all\n");
                    sql4.append(" from view_data_sales_valid ds\n");
                    sql4.append(" left join mst_staff s on ds.staff_id = s.staff_id\n");
                    sql4.append(" where ds.slip_no = " + rs1.getString("slip_no") + " and ds.shop_id = " + rs1.getString("shop_id") + " \n");
                    rs4 = cw.executeQuery(sql4.toString());
                    while (rs4.next()) {
                        
                        totalTax += rs4.getLong("tax");
                        money = rs4.getLong("money_value");
                        totalCard += rs4.getLong("card_value");

                        totalEcard += rs4.getLong("ecard_value");
                        totalGift += rs4.getLong("gift_value");
                        totalBill += rs4.getLong("bill_value");
                        
                        totalPayment = money+rs4.getLong("card_value")+ rs4.getLong("ecard_value")+rs4.getLong("gift_value");
                        
                        if(totalPayment>valueOfSlip) {
                            money = money-(totalPayment-valueOfSlip);                       
                        }
                        totalMoney+=money; 
//                        jx.setCellValue(2, lastRow + 6 + maxProductRow + 1, rs4.getLong("tax"));
//                        jx.setCellValue(4, lastRow + 6 + maxProductRow + 1, money);
//                        jx.setCellValue(6, lastRow + 6 + maxProductRow + 1, rs4.getLong("ecard_value"));
                        jx.setCellValue(10, lastRow + 6 + maxProductRow + 1, rs4.getString("visit_time") == null ? "" : rs4.getString("visit_time").toString());
                        jx.setCellValue(12, lastRow + 6 + maxProductRow + 1, rs4.getString("start_time") == null ? "" : rs4.getString("start_time").toString());

                        jx.setCellValue(1, lastRow + 6 + maxProductRow + 2, rs4.getLong("discount_all"));
                        jx.setCellValue(2, lastRow + 6 + maxProductRow + 2, rs4.getLong("tax"));
                        jx.setCellValue(3, lastRow + 6 + maxProductRow + 2, valueOfSlip - rs4.getLong("discount_all"));
                        jx.setCellValue(4, lastRow + 6 + maxProductRow + 2, money);
                        jx.setCellValue(5, lastRow + 6 + maxProductRow + 2, rs4.getLong("card_value"));
                        jx.setCellValue(6, lastRow + 6 + maxProductRow + 2, rs4.getLong("ecard_value"));
                        jx.setCellValue(7, lastRow + 6 + maxProductRow + 2, rs4.getLong("gift_value"));
                        jx.setCellValue(8, lastRow + 6 + maxProductRow + 2, rs4.getLong("bill_value"));
                        jx.setCellValue(10, lastRow + 4, rs4.getString("staff_name"));

                        jx.setCellValue(10, lastRow + 6 + maxProductRow + 2, rs4.getString("leave_time") == null ? "" : rs4.getString("leave_time").toString());
                        jx.setCellValue(12, lastRow + 6 + maxProductRow + 2, rs4.getLong("distance"));

                        
                    }
                    lastRow = lastRow + maxProductRow + 7;//template slip:6 + product row+ 1:spilit row
                }
            }
        }


        if (jx.getCellValue(1, 13).equals("") && jx.getCellValue(7, 13).equals("")) {
            jx.DeleteRowAt(12);
            lastRow = lastRow - 1;

        }
        if (jx.getCellValue(1, 12).equals("") && jx.getCellValue(7, 12).equals("")) {
            jx.DeleteRowAt(11);
            lastRow = lastRow - 1;

        }

        lastRow = lastRow + 1;



        //total quantity
        HSSFCell blankCell = jx.getCell(1, 2);
        HSSFCell sourceCell = jx.getCell(15, 2);
        HSSFCell desCell = jx.getCell(1, lastRow + 2);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(15, 3);
        desCell = jx.getCell(1, lastRow + 3);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);


        sourceCell = jx.getCell(15, 4);
        desCell = jx.getCell(1, lastRow + 4);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);


        sourceCell = jx.getCell(15, 5);
        desCell = jx.getCell(1, lastRow + 5);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);


        sourceCell = jx.getCell(16, 2);
        desCell = jx.getCell(2, lastRow + 2);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(16, 3);
        desCell = jx.getCell(2, lastRow + 3);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(16, 4);
        desCell = jx.getCell(2, lastRow + 4);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(16, 5);
        desCell = jx.getCell(2, lastRow + 5);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(17, 2);
        desCell = jx.getCell(3, lastRow + 2);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(17, 3);
        desCell = jx.getCell(3, lastRow + 3);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);
        
        sourceCell = jx.getCell(17, 4);
        desCell = jx.getCell(3, lastRow + 4);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(18, 2);
        desCell = jx.getCell(4, lastRow + 2);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(18, 3);
        desCell = jx.getCell(4, lastRow + 3);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);
        
        sourceCell = jx.getCell(18, 4);
        desCell = jx.getCell(4, lastRow + 4);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);


        sourceCell = jx.getCell(19, 2);
        desCell = jx.getCell(5, lastRow + 2);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(19, 3);
        desCell = jx.getCell(5, lastRow + 3);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(19, 4);
        desCell = jx.getCell(5, lastRow + 4);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(19, 5);
        desCell = jx.getCell(5, lastRow + 5);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(19, 6);
        desCell = jx.getCell(5, lastRow + 6);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);


        sourceCell = jx.getCell(20, 2);
        desCell = jx.getCell(6, lastRow + 2);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(20, 3);
        desCell = jx.getCell(6, lastRow + 3);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(20, 4);
        desCell = jx.getCell(6, lastRow + 4);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(20, 5);
        desCell = jx.getCell(6, lastRow + 5);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        sourceCell = jx.getCell(20, 6);
        desCell = jx.getCell(6, lastRow + 6);
        jx.copyCell(sourceCell, desCell);
        jx.copyCell(blankCell, sourceCell);

        jx.setCellValue(1, 2, "");

        //技術会計
        sql5 = new StringBuffer();
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            sql5.append(" select sum(discount_detail_value_in_tax) as total_value \n");
        } else {
            sql5.append(" select sum(discount_detail_value_no_tax) as total_value \n");
        }
        sql5.append(" from view_data_sales_detail_valid ds\n");

        sql5.append(" where ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "");
        sql5.append(" and  product_division in (1,3)\n");
        sql5.append(" and ds.shop_id in (" + paramBean.getShopIDList() + ")\n");
        rs5 = cw.executeQuery(sql5.toString());
        long total_value = 0;
        while (rs5.next()) {
            total_value = rs5.getLong("total_value");

        }
        jx.setCellValue(2, lastRow + 2, total_value);

        //商品会計
        sql5 = new StringBuffer();
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            sql5.append(" select sum(discount_detail_value_in_tax) as total_value \n");
        } else {
            sql5.append(" select sum(discount_detail_value_no_tax) as total_value \n");
        }
        sql5.append(" from view_data_sales_detail_valid ds\n");

        sql5.append(" where ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "");
        sql5.append(" and  product_division in (2,4)\n");
        sql5.append(" and ds.shop_id in( " + paramBean.getShopIDList() + ")\n");
        rs5 = cw.executeQuery(sql5.toString());
        total_value = 0;
        while (rs5.next()) {
            total_value = rs5.getLong("total_value");

        }
        jx.setCellValue(2, lastRow + 3, total_value);

        //契約会計
        sql5 = new StringBuffer();
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            sql5.append(" select sum(discount_detail_value_in_tax) as total_value \n");
        } else {
            sql5.append(" select sum(discount_detail_value_no_tax) as total_value \n");
        }
        sql5.append(" from view_data_sales_detail_valid ds\n");

        sql5.append(" where ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "");
        sql5.append(" and  product_division in (5)\n");
        sql5.append(" and ds.shop_id in( " + paramBean.getShopIDList() + ")\n");
        rs5 = cw.executeQuery(sql5.toString());
        total_value = 0;
        while (rs5.next()) {
            total_value = rs5.getLong("total_value");

        }
        jx.setCellValue(2, lastRow + 4, total_value);

        //消化会計
        sql5 = new StringBuffer();
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            sql5.append(" select sum(detail_value_in_tax) as total_value \n");
        } else {
            sql5.append(" select sum(detail_value_no_tax) as total_value \n");
        }
        sql5.append(" from view_data_sales_detail_valid ds\n");

        sql5.append(" where ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "");
        sql5.append(" and  product_division in (6)\n");
        sql5.append(" and ds.shop_id in( " + paramBean.getShopIDList() + ")\n");
        rs5 = cw.executeQuery(sql5.toString());
        total_value = 0;
        while (rs5.next()) {
            total_value = rs5.getLong("total_value");

        }
        jx.setCellValue(2, lastRow + 5, total_value);

        //消費税
        jx.setCellValue(4, lastRow + 2, totalTax);
        //明細割引
        jx.setCellValue(4, lastRow + 3, totalDiscount);
        //明細割引
         sql5.setLength(0);
        sql5.append(" select sum(discount_value) as  discount_all\n");
        sql5.append("  from data_sales ds\n");
        sql5.append("  inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id  and dsd.slip_no = ds.slip_no\n");
        sql5.append(" where ds.sales_date between " + SQLUtil.convertForSQL(paramBean.getTargetStartDateObj()) + " and " + SQLUtil.convertForSQL(paramBean.getTargetEndDateObj()) + "");
        sql5.append(" and  dsd.product_division in (0)\n");
        sql5.append(" and ds.shop_id in( " + paramBean.getShopIDList() + ")\n");
        sql5.append(" and ds.delete_date is null\n");
        sql5.append(" and dsd.delete_date is null\n");
        rs5 = cw.executeQuery(sql5.toString());
        long discountAll = 0l;
        while (rs5.next()) {
            discountAll = rs5.getLong("discount_all");
        }
        jx.setCellValue(4, lastRow + 4, discountAll);
        //IVS_LVTu end edit 2015/12/17 New request #44147
        

        jx.setCellValue(6, lastRow + 2, totalMoney);
        jx.setCellValue(6, lastRow + 3, totalCard);
        jx.setCellValue(6, lastRow + 4, totalEcard);
        jx.setCellValue(6, lastRow + 5, totalGift);
        jx.setCellValue(6, lastRow + 6, totalBill);

        jx.openWorkbook();


        return 1;
    }

    //IVS_TMTrong start add 2015/10/02 New request #43049
    private Integer viewBusinessReportForSalesList(ReportParameterBean paramBean, boolean isPDF) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();
        ResultSetWrapper rs = new ResultSetWrapper();
        
        HashMap<String, Object> paramMap = new HashMap<String, Object>();

        //------------------------------------------------------------
        // ヘッダー部の情報取得・生成
        //------------------------------------------------------------
        // 税込み･税別の区分
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            paramMap.put("TaxType", "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            paramMap.put("TaxType", "税込");
        }

        // 期間
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
        paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));
        
        String fileName = "";
        if(paramBean.isCourseFlag()){
            fileName="売上一覧_役務有";
        }else{
            fileName = "売上一覧_役務無";
        }
        
        JExcelApi jx = new JExcelApi(fileName);
        //テンプレートとなるファイルをセット
        jx.setTemplateFile("/reports/" + fileName + ".xls");


        jx.setValue(2, 4, paramBean.getTargetName());
        jx.setValue(2, 5, paramMap.get("TargetStartDate") + " 〜 " + paramMap.get("TargetEndDate"));
        if(paramBean.getUseShopCategory()==1) {
            jx.setValue(2, 6, paramBean.getListCategoryName());
        }else {
            jx.setValue(2, 6, "");
        }
        jx.setValue(2, 7, paramMap.get("TaxType").toString());

        Boolean isShopCourseFlag = paramBean.isCourseFlag();
        Integer staffID = paramBean.getStaffId();
        String shopIDList = paramBean.getShopIDList();
        String categoryIDList = paramBean.getListCategoryId();
        Integer useShopCategory = paramBean.getUseShopCategory();
        String fromDate = paramMap.get("TargetStartDate")!=null?paramMap.get("TargetStartDate").toString():null;
        String toDate = paramMap.get("TargetEndDate")!=null?paramMap.get("TargetEndDate").toString():null;
        Integer isTaxIncluded = paramBean.getTaxType();
        String queryString = getLoadSalesListSQL(isShopCourseFlag ,categoryIDList,useShopCategory ,staffID, shopIDList,isTaxIncluded ,fromDate, toDate);
        
        int row = 10;
        try{
            rs = cw.executeQuery(queryString);
            rs.last();
            Integer rowCnt = rs.getRow();
            if(rowCnt==0){ 
                return 0;
            }
            //IVS_TMTrong start edit 2015/10/07 New request #43049
            jx.insertRow(row, rowCnt-1);
            //IVS_TMTrong end edit 2015/10/07 New request #43049s
            //IVS_LVTu start edit 2015/12/03 New request #45059
            rs.first();
            do{
                jx.setValue(1, row, rs.getString("shop_name"));
                jx.setValue(2, row, rs.getString("slip_no"));
                if(rs.getString("sales_date")!=null){
                   String sales_date = new SimpleDateFormat("yyyy/MM/dd").format(rs.getDate("sales_date"));
                    jx.setValue(3, row, sales_date);
                }else{
                    jx.setValue(3, row, "");
                }
                //jx.setValue(3, row, rs.getString("customer_no"));
                jx.setValue(4, row, rs.getString("customer_no"));
                String customerName = rs.getString("customer_name1")+rs.getString("customer_name2");
                //jx.setValue(4, row, !customerName.equals("")?customerName:"");
                //jx.setValue(5, row, rs.getInt("visit_count"));
                jx.setValue(5, row, !customerName.equals("")?customerName:"");
                jx.setValue(6, row, rs.getInt("visit_count"));
                String staffName = rs.getString("staff_name1")+rs.getString("staff_name2");
                jx.setValue(7, row, !staffName.equals("")?staffName:"");
                if(rs.getBoolean("designated_flag")){
                    jx.setValue(8, row, "●");
                }else{
                    jx.setValue(8, row, "");
                }
                String productName = "";
                if(!rs.getString("technic_name").equals("")){
                    productName=rs.getString("technic_name");
                }
                if(!rs.getString("item_name").equals("")){
                    if(!rs.getString("technic_name").equals("")){
                        productName+="、";
                    }
                    productName +=rs.getString("item_name");
                }
                if(!rs.getString("course_name").equals("")){
                    if( (!(rs.getString("technic_name").equals("") && rs.getString("item_name").equals(""))) ||
                        ((rs.getString("technic_name").equals("") && !rs.getString("item_name").equals("")))    
                    ){
                        productName+="、";
                    }
                    productName +=rs.getString("course_name");
                }
                jx.setValue(9, row, productName);
                jx.setValue(10, row, rs.getDouble("technic_amount"));
                jx.setValue(11, row, rs.getDouble("item_amount"));
                if(isShopCourseFlag==true){
                    jx.setValue(12, row, rs.getDouble("course_amount"));
                    jx.setValue(13, row, rs.getDouble("digestion_amount"));
                    jx.setValue(14, row, rs.getDouble("discount"));
                    jx.setValue(15, row, rs.getDouble("overall_discount"));
                    jx.setValue(16, row, rs.getDouble("total_value"));
                    jx.setValue(17, row, rs.getDouble("tax"));
                }else{
                    jx.setValue(12, row, rs.getDouble("discount"));
                    jx.setValue(13, row, rs.getDouble("overall_discount"));
                    jx.setValue(14, row, rs.getDouble("total_value"));
                    jx.setValue(15, row, rs.getDouble("tax"));
                }
                //IVS_LVTu end edit 2015/12/03 New request #45059

                row++;
            }while(rs.next());
            jx.removeRow(row);
        }catch(Exception ex){
            return -1;
        }
        jx.openWorkbook();
        return 1;
    }
    
    private String getLoadSalesListSQL(Boolean isShopCourseFlag,String categoryIDList,Integer useShopCategory, Integer staffID, 
            String shopIDList,Integer isTaxIncluded ,String fromDate, String toDate)
    {
            StringBuilder sql = new StringBuilder(1000);
            sql.append("SELECT          a.shop_id , \n");
            sql.append("(select mshop.shop_name from mst_shop mshop where mshop.shop_id = a.shop_id) as shop_name, \n");
            sql.append("a.slip_no , \n");
            sql.append("a.sales_date , \n");
            sql.append("a.customer_id ,\n");
            sql.append(" a.staff_id ,\n");
            sql.append("a.designated_flag ,\n");
            sql.append(" a.visit_count ,\n");
            sql.append("coalesce(a.staff_name1,'') as staff_name1,\n");
            sql.append("coalesce(a.staff_name2,'') as staff_name2,\n");
            sql.append("a.customer_no ,\n");
            sql.append("a.customer_kana1 ,\n");
            sql.append("a.customer_kana2 ,\n");
            sql.append("coalesce(a.customer_name1,'') as customer_name1,\n");
            sql.append("coalesce(a.customer_name2,'') as customer_name2,\n");
            sql.append("a.technic_amount ,\n");
            sql.append("a.item_amount ,\n");
            if(isShopCourseFlag==true){
                sql.append("a.course_amount ,\n");
                sql.append("a.digestion_amount ,\n");
            }
            sql.append("coalesce(a.technic_name,'') as technic_name,\n");
            sql.append("coalesce(a.item_name,'') as item_name,\n");
            sql.append("coalesce(a.course_name,'') as course_name,\n");
            sql.append("a.discount ,\n");
            sql.append("a.overall_discount ,\n");
            sql.append("CASE\n");
            sql.append("  WHEN a.overall_discount = 0::numeric THEN a.total_value \n");
            sql.append("WHEN a.overall_discount > 0 THEN a.total_value -  overall_discount  \n");
            sql.append("ELSE NULL::numeric \n");
            sql.append("END AS total_value,   \n");
            sql.append("CASE \n");
            sql.append("   WHEN a.overall_discount = 0::numeric THEN a.tax \n");
            sql.append(" WHEN a.overall_discount > 0 THEN a.tax - (  overall_discount -  trunc( ceil((a.overall_discount) / (1.0 + get_tax_rate(a.sales_date))))  )  \n");
            sql.append("ELSE NULL::numeric \n");
            sql.append("END AS tax \n");
            sql.append("FROM ( \n");
            sql.append(" select  distinct " + "\n");
            sql.append("      a.shop_id" + "\n");
            sql.append("     ,a.slip_no , b.sales_date  " + "\n");
            sql.append("     ,b.customer_id" + "\n");
            sql.append("     ,b.staff_id" + "\n");
            sql.append("     ,b.designated_flag" + "\n");
            sql.append("     ,get_visit_count(b.customer_id, b.shop_id, b.sales_date) as visit_count" + "\n");
            sql.append("     ,ms.staff_name1" + "\n");
            sql.append("     ,ms.staff_name2" + "\n");
            sql.append("     ,mc.customer_no" + "\n");
            sql.append("     ,mc.customer_kana1" + "\n");
            sql.append("     ,mc.customer_kana2" + "\n");
            sql.append("     ,mc.customer_name1" + "\n");
            sql.append("     ,mc.customer_name2" + "\n");
            sql.append("     ,a.technic_amount" + "\n");
            sql.append("     ,a.item_amount" + "\n");
            sql.append("     ,a.course_amount" + "\n");
            sql.append("     ,a.digestion_amount" + "\n");
            sql.append("     ,a.discount" + "\n");                
            sql.append("     ,b.discount_value as overall_discount" + "\n");
            sql.append("     ,a.tax  as tax \n ") ; 
            sql.append("    ,a.total_value as total_value \n ");
            sql.append("    ,a.technic_name \n ");
            sql.append("    ,a.item_name \n ");
            sql.append("    ,a.course_name \n ");
            sql.append(" from" + "\n");
            sql.append("     (" + "\n");
            sql.append("         select  distinct " + "\n");
            sql.append("              a.shop_id" + "\n");
            if(useShopCategory != 0 && categoryIDList != null && categoryIDList != "" && staffID!=null && staffID>0){
                sql.append("              ,dsmt.staff_id" + "\n");
            }
            sql.append("             ,a.slip_no" + "\n");
            //IVS_LVTu start edit 2016/03/11 Bug #49052
            if(isTaxIncluded== ReportParameterBean.TAX_TYPE_BLANK){
                sql.append("             ,sum(case when product_division in (1,3) then discount_detail_value_no_tax else 0 end) as technic_amount" + "\n");
                sql.append("             ,sum(case when product_division in (2,4) then discount_detail_value_no_tax else 0 end) as item_amount" + "\n");
                sql.append("             ,sum(CASE " + "\n");
                sql.append("    			WHEN product_division IN ( 5 )" + "\n");
                sql.append("                            THEN discount_detail_value_no_tax" + "\n");
                sql.append("				ELSE 0" + "\n");
                sql.append("				END) AS course_amount" + "\n");
//                sql.append("		,sum(CASE " + "\n");
//                sql.append("				WHEN product_division IN ( 6 )" + "\n");
//                sql.append("					THEN discount_detail_value_no_tax" + "\n");
//                sql.append("				ELSE 0" + "\n");
//                sql.append("				END) AS digestion_amount" + "\n");
            }
            else if(isTaxIncluded == ReportParameterBean.TAX_TYPE_UNIT){
                sql.append("             ,sum(case when product_division in (1,3) then discount_detail_value_in_tax else 0 end) as technic_amount" + "\n");
                sql.append("             ,sum(case when product_division in (2,4) then discount_detail_value_in_tax else 0 end) as item_amount" + "\n");
                sql.append("             ,sum(CASE " + "\n");
                sql.append("    			WHEN product_division IN ( 5 )" + "\n");
                sql.append("                            THEN discount_detail_value_in_tax" + "\n");
                sql.append("				ELSE 0" + "\n");
                sql.append("				END) AS course_amount" + "\n");
//                sql.append("		,sum(CASE " + "\n");
//                sql.append("				WHEN product_division IN ( 6 )" + "\n");
//                sql.append("					THEN discount_detail_value_in_tax" + "\n");
//                sql.append("				ELSE 0" + "\n");
//                sql.append("				END) AS digestion_amount" + "\n");
            }
            sql.append("	,(SELECT \n");
            if(isTaxIncluded== ReportParameterBean.TAX_TYPE_BLANK){
                sql.append("	ceil(SUM(dcd.product_num*dc.product_value/dc.product_num)/(1.0 + get_tax_rate(max(coalesce(dsd.sales_date,current_date))))) AS total_consumption_value \n");
            }else{
                sql.append("	SUM(dcd.product_num*dc.product_value/dc.product_num) AS total_consumption_value \n");
            }
            
            sql.append("	   FROM \n");
            sql.append("		 (SELECT DISTINCT ds.sales_date, \n");
            sql.append("						  dsd.slip_no, \n");
            sql.append("						  dsd.shop_id, \n");
            sql.append("						  dsd.contract_detail_no, \n");
            sql.append("						  dsd.product_id, \n");
            sql.append("						  dsd.product_division \n");
            sql.append("		  FROM data_sales ds \n");
            sql.append("		  INNER JOIN data_sales_detail dsd ON ds.slip_no = dsd.slip_no \n");
            sql.append("		  AND ds.shop_id = dsd.shop_id \n");
            sql.append("		  WHERE dsd.product_division = 6) dsd \n");
            sql.append("	   INNER JOIN data_contract_digestion dcd ON dsd.shop_id = dcd.shop_id \n");
            sql.append("	   AND dsd.slip_no = dcd.slip_no \n");
            sql.append("	   AND dcd.contract_detail_no = dsd.contract_detail_no \n");
            sql.append("	   INNER JOIN data_contract dc ON dcd.contract_shop_id = dc.shop_id \n");
            sql.append("	   AND dcd.contract_no = dc.contract_no \n");
            sql.append("	   AND dcd.contract_detail_no = dc.contract_detail_no \n");
            sql.append("	   AND dc.product_id = dsd.product_id \n");
            sql.append("	   AND dsd.shop_id = a.shop_id \n");
            sql.append("	   AND dsd.slip_no = a.slip_no \n");
            sql.append("	   GROUP BY dsd.shop_id, \n");
            sql.append("		dsd.slip_no) AS digestion_amount \n");
            //IVS_LVTu end edit 2016/03/11 Bug #49052
            sql.append("             ,sum(discount_value) as discount" + "\n");
            sql.append("             ,sum(" );
            sql.append("                    CASE WHEN a.product_division = 7 THEN ");
            sql.append("                    ( 0");
            sql.append("                       )");
            sql.append("                      ELSE(");
            //IVS_TMTrong start add 2015/10/08 New request #43049
             sql.append("                    case when a.product_division != 6 then ");    
            //IVS_TMTrong end add 2015/10/08 New request #43049
            sql.append("                            case when ac.discount_type = 0 then\n");
            sql.append("                                case when discount_value != 0 then \n");
            sql.append("                                    floor(detail_value_no_tax* ( 1+ get_tax_rate(sales_date)) - discount_value  - (detail_value_no_tax* ( 1+ get_tax_rate(sales_date)) - discount_value)/( 1+ get_tax_rate(sales_date)))\n"); 
            sql.append("                                else\n"); 
            sql.append("                                    discount_detail_value_in_tax - discount_detail_value_no_tax\n"); 
            sql.append("                                end\n");
            sql.append("             		else\n");
            sql.append("                                case when discount_value !=  0 \n");
            sql.append("                                then \n");
            sql.append("                                    ceil((detail_value_no_tax* ( 1+ get_tax_rate(sales_date))- detail_value_no_tax - ceil(discount_value*get_tax_rate(sales_date))))\n");
            sql.append("                                else \n");
            sql.append("                                    discount_detail_value_in_tax - discount_detail_value_no_tax\n");
            sql.append("                                end\n");
            sql.append("                       end \n");
            //IVS_TMTrong start add 2015/10/08 New request #43049
            sql.append("                            end\n");
            //IVS_TMTrong end add 2015/10/08 New request #43049
            sql.append("                       )END ");
            sql.append("                ) AS tax");
            sql.append("            ,sum(CASE WHEN a.product_division = 7  ");
            sql.append("                    THEN ( SELECT sum(dpd.payment_value) AS payment_value1 FROM data_payment_detail dpd INNER JOIN mst_payment_method mpm ON mpm.payment_method_id = dpd.payment_method_id ");
            sql.append("                            AND mpm.payment_class_id IN (1,2,3,4) WHERE true AND dpd.payment_no = 0 AND shop_id = a.shop_id AND slip_no = a.slip_no) ");
            sql.append("                    ELSE ( ");
            sql.append("                    case when a.product_division != 6 then ");    
            sql.append("                            case when ac.discount_type = 0 then");
            sql.append("                                case when discount_value != 0 then \n");
            sql.append("                                    case when ac.display_price_type = 0 then \n"); 
            sql.append("                                        detail_value_in_tax - discount_value \n");
            sql.append("                                    else \n");
            sql.append("                                        floor(detail_value_no_tax *( 1+ get_tax_rate(sales_date))) - discount_value \n");
            sql.append("                                    end \n");
            sql.append("                                else\n"); 
            sql.append("                                    detail_value_in_tax\n"); 
            sql.append("                                end\n");
            sql.append("                            else  \n");
            sql.append("                                case when discount_value != 0 then\n"); 
            sql.append("                                    ceil(detail_value_no_tax *( 1+ get_tax_rate(sales_date)) - ceil(discount_value *  ( 1+ get_tax_rate(sales_date)))) \n");
            sql.append("                                else \n"); 
            sql.append("                                    detail_value_in_tax\n"); 
            sql.append("                                end \n"); 
            sql.append("                        end ");
            sql.append("                            end) \n");
            sql.append("                    end  \n");
            sql.append("                ) AS total_value \n");
            sql.append("                ,array_to_string(array(SELECT t.technic_name FROM data_sales_detail dsd \n");
            sql.append("                						,mst_technic t  \n");
            if(useShopCategory != 0 && categoryIDList != null && categoryIDList != ""){
                sql.append("                						inner join mst_technic_class msc on msc.technic_class_id = t.technic_class_id  \n");
                sql.append("                						and msc.shop_category_id in ("+categoryIDList+")  \n");
            }
            sql.append("                						WHERE dsd.shop_id = a.shop_id \n");
            sql.append("                						AND dsd.slip_no = a.slip_no \n");
            sql.append("                						AND dsd.product_division IN (1,3) \n");
            sql.append("                						AND dsd.product_id = t.technic_id), ', ') AS technic_name \n");
            sql.append("                ,array_to_string(array(SELECT i.item_name FROM data_sales_detail dsd \n");
            sql.append("                						,mst_item i  \n");
            if(useShopCategory != 0 && categoryIDList != null && categoryIDList != ""){
                sql.append("                						inner join mst_item_class mic on mic.item_class_id = i.item_class_id   \n");
                sql.append("                						and mic.shop_category_id in ("+categoryIDList+")  \n");
            }									
            sql.append("                						WHERE dsd.shop_id = a.shop_id \n");
            sql.append("                						AND dsd.slip_no = a.slip_no \n");
            sql.append("                						AND dsd.product_division IN (2,4) \n");
            sql.append("                						AND dsd.product_id = i.item_id), ', ') AS item_name \n");
            //IVS_TMTrong start edit 2015/10/16 New request #43049
            sql.append("                ,array_to_string(array(SELECT case when dsd.product_id = -2 and dsd.product_division=9 then '変更手数料' else  c.course_name end \n");
            sql.append("                                                                FROM data_sales_detail dsd \n");
            if(useShopCategory != 0 && categoryIDList != null && categoryIDList != ""){
                sql.append("                						left join mst_course_class mscc on mscc.course_class_id = c.course_class_id  \n");
                sql.append("                						AND mscc.shop_category_id in ("+categoryIDList+")  \n");
            }
            sql.append("                						left join mst_course c on   dsd.product_id = c.course_id \n");
            sql.append("                						WHERE dsd.shop_id = a.shop_id \n");
            sql.append("                						AND dsd.slip_no = a.slip_no \n");
            //IVS_TMTrong start edit 2015/10/15 New request #43049
            sql.append("                						AND dsd.product_division IN (5,6,7,8,9) \n");
            //IVS_TMTrong end edit 2015/10/15 New request #43049
            sql.append("                						), ', ') AS course_name \n");
             //IVS_TMTrong end edit 2015/10/16 New request #43049
            sql.append("         from" + "\n");
            sql.append("             view_data_sales_detail_valid a" + "\n");
             //IVS_TMTrong start edit 2015/10/07 New request #43049
            if(useShopCategory != 0 && categoryIDList != null && categoryIDList != "" && staffID!=null && staffID>0){
                sql.append("         inner join  data_sales_mainstaff dsmt on a.slip_no = dsmt.slip_no and a.shop_id = dsmt.shop_id and dsmt.shop_category_id IN ("+categoryIDList+")");
            }
             //IVS_TMTrong end edit 2015/10/07 New request #43049
            sql.append("             ,(SELECT mst_account_setting.display_price_type, mst_account_setting.discount_type \n");
            sql.append("             FROM mst_account_setting \n");
            sql.append("             WHERE mst_account_setting.delete_date IS NULL \n");
            sql.append("             LIMIT 1) ac \n");
            sql.append("         where" + "\n");
            sql.append("                 a.shop_id in (" + shopIDList + ")\n");
            if(isShopCourseFlag==false){
                sql.append("                 and a.product_division <> 6 \n");
            }
            sql.append("             and a.sales_date between "+SQLUtil.convertForSQL(fromDate)+" and "+SQLUtil.convertForSQL(toDate)+"\n");
             if(useShopCategory != 0 && categoryIDList != null && categoryIDList != "" && staffID!=null && staffID>0 ){
                sql.append(" and dsmt.staff_id = "+staffID+ "\n");
            }else if(staffID!=null && staffID>0){
               sql.append(" and a.staff_id = "+staffID+ "\n");
            }
            if(useShopCategory != 0 && categoryIDList != null && categoryIDList != ""){
                sql.append("             AND Exists ( \n");
                sql.append("             		    (select 1 \n");
                sql.append("             		      from \n");
                sql.append("             		      data_sales_detail dsd1 \n");
                sql.append("             		       inner join mst_technic mst on mst.technic_id = dsd1.product_id  \n");
                sql.append("             		       inner join mst_technic_class msc on msc.technic_class_id = mst.technic_class_id  \n");
                sql.append("             				    and msc.shop_category_id in ("+categoryIDList+")  \n");
                sql.append("             		      where dsd1.slip_no = a.slip_no and dsd1.shop_id = a.shop_id and dsd1.slip_detail_no = a.slip_detail_no \n");
                sql.append("             		      and dsd1.product_division in (1,3) and dsd1.product_division = a.product_division  \n");
                sql.append("             		      and dsd1.delete_date is null  \n");
                sql.append("             		      ) \n");
                sql.append("             		  Union all \n");
                sql.append("             		      (select 1  \n");
                sql.append("             		      from \n");
                sql.append("             		       data_sales_detail dsd1 \n");
                sql.append("             		       inner join mst_item msi on msi.item_id = dsd1.product_id   \n");
                sql.append("             		       inner join mst_item_class mic on mic.item_class_id = msi.item_class_id   \n");
                sql.append("             			    and mic.shop_category_id in ("+categoryIDList+")  \n");
                sql.append("             		      where dsd1.slip_no = a.slip_no and dsd1.shop_id = a.shop_id and dsd1.slip_detail_no = a.slip_detail_no  \n");
                sql.append("             			    and dsd1.product_division in (2,4) and dsd1.product_division = a.product_division  \n");
                sql.append("             			    and dsd1.delete_date is null  \n");
                sql.append("             		      ) \n");
                sql.append("             		   Union all   \n");
                sql.append("             		       ( SELECT 1 \n");
                sql.append("             			 FROM \n");
                sql.append("             			 data_sales_detail dsd \n");
                sql.append("             			 inner join mst_course msc on msc.course_id = dsd.product_id  \n");
                sql.append("             			 inner join mst_course_class mscc on mscc.course_class_id = msc.course_class_id  \n");
                sql.append("             			 AND mscc.shop_category_id in ("+categoryIDList+")  \n");
                sql.append("             			 WHERE \n");
                sql.append("             				  dsd.shop_id = a.shop_id \n");
                sql.append("             				  AND dsd.slip_no = a.slip_no \n");
                sql.append("             				  AND dsd.slip_detail_no = a.slip_detail_no \n");
                sql.append("             				  AND dsd.delete_date is null \n");
                sql.append("             				  AND dsd.product_division in (5,6,7) \n");
                sql.append("             		 )  \n");
                sql.append("             	      )\n");
            }
            sql.append("         group by" + "\n");
            sql.append("              a.shop_id" + "\n");
            sql.append("             ,a.slip_no" + "\n");
            if(useShopCategory != 0 && categoryIDList != null && categoryIDList != "" && staffID!=null && staffID>0){
                sql.append("             ,dsmt.staff_id" + "\n");
            }
            sql.append("     ) a" + "\n");
            sql.append("     inner join view_data_sales_valid b" + "\n");
            sql.append("             on a.shop_id = b.shop_id" + "\n");
            sql.append("            and a.slip_no = b.slip_no" + "\n");
            sql.append("     left outer join mst_customer mc" + "\n");
            sql.append("                  on b.customer_id = mc.customer_id" + "\n");
             if(useShopCategory != 0 && categoryIDList != null && categoryIDList != "" && staffID!=null && staffID>0 ){
                sql.append("     left outer join mst_staff as ms on a.staff_id = ms.staff_id" + "\n");
             }else {
                sql.append("     left outer join mst_staff as ms on b.staff_id = ms.staff_id" + "\n");
             }
            sql.append("     inner join data_sales c" + "\n");
            sql.append("             on b.shop_id = c.shop_id" + "\n");
            sql.append("            and b.slip_no = c.slip_no" + "\n");
            sql.append(" where" + "\n");
            sql.append("         b.shop_id in (" + shopIDList + ")\n");
            sql.append("     and b.sales_date between "+ SQLUtil.convertForSQL(fromDate)+" and "+SQLUtil.convertForSQL(toDate)+"\n");  
            sql.append(" order by" + "\n");
            sql.append("     slip_no" + "\n");
            sql.append(" ) a  \n");
            return sql.toString();
    }
    //IVS_TMTrong end add 2015/10/02 New request #43049
    
    public boolean viewSaleAnalysis(ReportParameterBean paramBean, boolean isPDF) throws Exception {

        StringBuffer sql = new StringBuffer();

        String fileName = "比較集計表";
        JExcelApi jx = new JExcelApi(fileName);
        //テンプレートとなるファイルをセット
        jx.setTemplateFile("/reports/" + fileName + ".xls");
        try {
            sql.append(" select\n");
            sql.append(" a.shop_id,a.shop_name,sum(a.技術売上の金額) as 技術売上の金額 ,sum(a.技術売上の数量) as 技術売上の数量,\n");
            sql.append(" sum(a.店販売上の金額) as 店販売上の金額 ,sum(a.店販売上の数量) as 店販売上の数量 ,sum(a.店販実) as 店販実 ,sum(総客) as 総客 ,sum(a.ﾍﾙﾌﾟ) as ﾍﾙﾌﾟ ,sum(a.税込売上) as 税込売上,sum(a.税抜売上) as 税抜売上 ,sum(a.新規) as 新規,sum(a.指新) as 指新 ,sum(a.紹新) as 紹新 ,\n");
            sql.append(" sum(a.カットの金額) as カットの金額 ,sum(a.カットの数量) as カットの数量 ,sum(a.カラーの金額) as カラーの金額 ,sum(a.カラーの数量) as カラーの数量 ,sum(a.パーマの金額) as パーマの金額 ,sum(a.パーマの数量) as パーマの数量 ,sum(a.スパの金額) as スパの金額 ,sum(a.スパの数量) as スパの数量,\n");
            sql.append(" sum(a.ﾄﾘｰﾄﾒﾝﾄの金額) as ﾄﾘｰﾄﾒﾝﾄの金額 ,sum(a.ﾄﾘｰﾄﾒﾝﾄの数量) as ﾄﾘｰﾄﾒﾝﾄの数量 ,\n");
            sql.append(" sum(a.カットの数量)/sum(a.総客::numeric)*100 as CUT率,sum(a.カットの金額)/sum(a.総客::numeric)*100 as CUT単価 ,\n");
            sql.append(" sum(a.カラーの数量)/sum(a.総客::numeric)*100  as COL率,\n");
            sql.append(" sum(a.カラーの金額)/sum(a.総客::numeric)*100 as COL単価,\n");
            sql.append(" sum(a.パーマの数量)/sum(a.総客::numeric)*100 as Perm率,sum(a.パーマの金額)/sum(総客::numeric)*100 as Perm単価,\n");
            sql.append(" sum(a.スパの数量)/sum(a.総客::numeric)*100 as スパ率,sum(a.スパの金額)/sum(総客::numeric)*100 as スパ単価,\n");
            sql.append(" sum(a.ﾄﾘｰﾄﾒﾝﾄの数量)/sum(a.総客::numeric)*100 as ﾄﾘｰﾄﾒﾝﾄ率,sum(a.ﾄﾘｰﾄﾒﾝﾄの金額)/sum(総客)::numeric*100 as ﾄﾘｰﾄﾒﾝﾄ単価,\n");
            sql.append(" sum(a.店販売上の金額)/sum(a.税抜売上::numeric)*100 as 店販率,\n");
            sql.append(" sum(a.店販売上の金額)/sum(a.総客::numeric)*100 as 店販単価,\n");
            sql.append(" sum(a.技術売上の金額)/sum(a.総客::numeric)*100 as 技術単価,\n");
            sql.append(" sum(a.税抜売上)/sum(a.総客::numeric)*100 as 総売単価\n");
            sql.append(" from \n");
            sql.append(" (	select distinct \n");
            sql.append(" 	a.shop_id,a.shop_name,b.技術売上の金額,b.技術売上の数量,\n");
            sql.append(" 	c.店販売上の金額,c.店販売上の数量,c.店販実,c.総客,c.ﾍﾙﾌﾟ,d.税込売上,d.税抜売上,e.新規,f.指新,g.紹新,\n");
            sql.append(" 	h.カットの金額,h.カットの数量,i.カラーの金額,i.カラーの数量,j.パーマの金額,j.パーマの数量,k.スパの金額,k.スパの数量,\n");
            sql.append(" 	l.ﾄﾘｰﾄﾒﾝﾄの金額,l.ﾄﾘｰﾄﾒﾝﾄの数量\n");
            sql.append(" 	from \n");
            sql.append("	 (select distinct a.shop_id,b.shop_name  from mst_staff a left join mst_shop b on a.shop_id=b.shop_id where a.shop_id=" + SQLUtil.convertForSQL(paramBean.getShopId()) + ") a\n");
            sql.append(" 	left join ( \n");
            sql.append(" 		select a.shop_id,sum(a.product_value) as 技術売上の金額,sum(a.product_num) as 技術売上の数量   \n");
            sql.append(" 		from view_data_sales_detail_valid a\n");
            sql.append("                inner join mst_staff d on a.staff_id=d.staff_id and a.shop_id = d.shop_id \n");
            sql.append("                where a.product_division=1 group by a.shop_id \n");
            sql.append(" 		) b on a.shop_id=b.shop_id \n");
            sql.append(" 	left join ( \n");
            sql.append(" 		select a.shop_id,sum(a.product_value) as 店販売上の金額,sum(a.product_num) as 店販売上の数量,sum(a.detail_value_no_tax) as 店販実,\n");
            sql.append(" 			   sum(a.customer_id)as 総客,coalesce(sum(b.point))/case when coalesce(sum(b.ratio),0)=0 then 1 else sum(b.ratio)end*100 as ﾍﾙﾌﾟ\n");
            sql.append(" 		from view_data_sales_detail_valid a\n");
            sql.append(" 		left join data_sales_proportionally b on a.slip_no =b.slip_no and a.slip_detail_no =b.slip_detail_no \n");
            sql.append("                inner join mst_staff d on a.staff_id=d.staff_id and a.shop_id = d.shop_id \n");
            sql.append(" 		group by a.shop_id\n");
            sql.append(" 		) c on a.shop_id=c.shop_id \n");
            sql.append(" 	left join ( \n");
            sql.append(" 		select a.shop_id,sum(a.discount_detail_value_in_tax) as 税込売上,sum(a.discount_detail_value_no_tax) as 税抜売上   \n");
            sql.append(" 		from view_data_sales_detail_valid a \n");
            sql.append("                inner join mst_staff d on a.staff_id=d.staff_id and a.shop_id = d.shop_id \n");
            sql.append("                where (a.product_division=1 or a.product_division=3) group by a.shop_id  \n");
            sql.append(" 		) d on a.shop_id=d.shop_id \n");
            sql.append(" 	left join ( \n");
            sql.append(" 		select a.shop_id,\n");
            sql.append(" 			   sum(a.customer_id)as 新規\n");
            sql.append(" 		from view_data_sales_detail_valid a\n");
            sql.append("                inner join mst_staff d on a.staff_id=d.staff_id and a.shop_id = d.shop_id \n");
            sql.append(" 		where a.visit_num=1\n");
            sql.append(" 		group by a.shop_id\n");
            sql.append(" 		) e on a.shop_id=e.shop_id \n");
            sql.append(" 	left join ( \n");
            sql.append(" 		select a.shop_id,\n");
            sql.append(" 			   sum(a.customer_id)as 指新\n");
            sql.append(" 		from view_data_sales_detail_valid a\n");
            sql.append("                inner join mst_staff d on a.staff_id=d.staff_id and a.shop_id = d.shop_id \n");
            sql.append(" 		where a.visit_num=1\n");
            sql.append(" 		and designated_flag=true\n");
            sql.append(" 		group by a.shop_id\n");
            sql.append(" 		) f on a.shop_id=f.shop_id \n");
            sql.append(" 	left join ( \n");
            sql.append(" 		select a.shop_id,\n");
            sql.append(" 			   coalesce(sum(b.customer_id),0)as 紹新\n");
            sql.append(" 		from data_sales_detail a inner join data_sales b on a.slip_no=b.slip_no \n");
            sql.append("                inner join mst_staff d on a.staff_id=d.staff_id and a.shop_id = d.shop_id \n");
            sql.append(" 		where b.visit_num=1\n");
            sql.append(" 		and a.approached_flag=true\n");
            sql.append(" 		group by a.shop_id\n");
            sql.append(" 		) g on a.shop_id=e.shop_id \n");
            sql.append(" 	left join ( \n");
            sql.append(" 		select a.shop_id,sum(a.product_value) as カットの金額,sum(a.product_num) as カットの数量  \n");
            sql.append(" 		from view_data_sales_detail_valid a\n");
            sql.append(" 		left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append(" 		left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("                inner join mst_staff d on a.staff_id=d.staff_id and a.shop_id = d.shop_id \n");
            sql.append(" 		where a.product_division=1  \n");
            sql.append(" 		and c.technic_class_name='カット'\n");
            sql.append(" 		group by a.shop_id \n");
            sql.append(" 		) h on a.shop_id=h.shop_id \n");
            sql.append(" 	left join ( \n");
            sql.append(" 		select a.shop_id,sum(a.product_value) as カラーの金額,sum(a.product_num) as カラーの数量  \n");
            sql.append(" 		from view_data_sales_detail_valid a\n");
            sql.append(" 		left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append(" 		left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("                inner join mst_staff d on a.staff_id=d.staff_id and a.shop_id = d.shop_id \n");
            sql.append(" 		where a.product_division=1  \n");
            sql.append(" 		and c.technic_class_name='カラー'\n");
            sql.append(" 		group by a.shop_id \n");
            sql.append(" 		) i on a.shop_id=i.shop_id \n");
            sql.append(" 	left join ( \n");
            sql.append(" 		select a.shop_id,sum(a.product_value) as パーマの金額,sum(a.product_num) as パーマの数量  \n");
            sql.append(" 		from view_data_sales_detail_valid a\n");
            sql.append(" 		left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append(" 		left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("                inner join mst_staff d on a.staff_id=d.staff_id and a.shop_id = d.shop_id \n");
            sql.append(" 		where a.product_division=1  \n");
            sql.append(" 		and c.technic_class_name='パーマ'\n");
            sql.append(" 		group by a.shop_id \n");
            sql.append(" 		) j on a.shop_id=j.shop_id \n");
            sql.append(" 	left join ( \n");
            sql.append(" 		select a.shop_id,sum(a.product_value) as スパの金額,sum(a.product_num) as スパの数量  \n");
            sql.append(" 		from view_data_sales_detail_valid a\n");
            sql.append(" 		left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append(" 		left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("                inner join mst_staff d on a.staff_id=d.staff_id and a.shop_id = d.shop_id \n");
            sql.append(" 		where a.product_division=1  \n");
            sql.append(" 		and c.technic_class_name='スパ'\n");
            sql.append(" 		group by a.shop_id \n");
            sql.append(" 		) k on a.shop_id=k.shop_id \n");
            sql.append(" 	left join ( \n");
            sql.append(" 		select a.shop_id,sum(a.product_value) as ﾄﾘｰﾄﾒﾝﾄの金額,sum(a.product_num) as ﾄﾘｰﾄﾒﾝﾄの数量  \n");
            sql.append(" 		from view_data_sales_detail_valid a\n");
            sql.append(" 		left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append(" 		left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("                inner join mst_staff d on a.staff_id=d.staff_id and a.shop_id = d.shop_id \n");
            sql.append(" 		where a.product_division=1  \n");
            sql.append(" 		and c.technic_class_name='ﾄﾘｰﾄﾒﾝﾄ'\n");
            sql.append(" 		group by a.shop_id \n");
            sql.append(" 		) l on a.shop_id=l.shop_id \n");
            sql.append(" 		union \n");
            sql.append(" 	select distinct \n");
            sql.append(" 	 a.shop_id,a.shop_name,b.技術売上の金額,b.技術売上の数量,\n");
            sql.append(" 	c.店販売上の金額,c.店販売上の数量,c.店販実,c.総客,c.ﾍﾙﾌﾟ,d.税込売上,d.税抜売上,e.新規,f.指新,g.紹新,\n");
            sql.append(" 	h.カットの金額,h.カットの数量,i.カラーの金額,i.カラーの数量,j.パーマの金額,j.パーマの数量,k.スパの金額,k.スパの数量,\n");
            sql.append(" 	l.ﾄﾘｰﾄﾒﾝﾄの金額,l.ﾄﾘｰﾄﾒﾝﾄの数量\n");
            sql.append("	 from\n");
            sql.append("	 (select a.shop_id,a.shop_name  from mst_shop a where shop_id=" + SQLUtil.convertForSQL(paramBean.getShopId()) + ") a\n");
            sql.append("	 left join (\n");
            sql.append("	     	 select shop_id,staff_id,sum(product_value) as 技術売上の金額,sum(product_num) as 技術売上の数量\n");
            sql.append("		 from view_data_sales_detail_valid where product_division=1 and staff_id is null   group by staff_id,shop_id\n");
            sql.append("		 ) b on a.shop_id=b.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.staff_id,a.shop_id,sum(a.product_value) as 店販売上の金額,sum(a.product_num) as 店販売上の数量,sum(a.detail_value_no_tax) as 店販実,\n");
            sql.append("		 	    sum(a.customer_id)as 総客,coalesce(sum(b.point))/case when coalesce(sum(b.ratio),0)=0 then 1 else sum(b.ratio)end*100 as ﾍﾙﾌﾟ,");
            sql.append("                            sum(a.product_value*b.ratio/100*c.ratio/100) as 技術実\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join data_sales_proportionally b on a.slip_no =b.slip_no and a.slip_detail_no =b.slip_detail_no\n");
            sql.append("                 left join data_sales_detail_proportionally c \n");
            sql.append("                 on b.slip_no=c.slip_no and b.slip_detail_no=c.slip_detail_no and a.shop_id=c.shop_id and a.staff_id=c.staff_id\n");
            sql.append("		 where a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) c on a.shop_id=c.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select shop_id,staff_id,sum(discount_detail_value_in_tax) as 税込売上,sum(discount_detail_value_no_tax) as 税抜売上\n");
            sql.append("		 from view_data_sales_detail_valid where (product_division=1 or product_division=3) and staff_id is null group by staff_id,shop_id\n");
            sql.append("		 ) d on a.shop_id=d.shop_id \n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,\n");
            sql.append("			   sum(a.customer_id)as 新規\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 where a.visit_num=1 and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) e on a.shop_id=e.shop_id \n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,\n");
            sql.append("			   sum(a.customer_id)as 指新\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 where a.visit_num=1\n");
            sql.append("		 and designated_flag=true and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) f on a.shop_id=f.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,\n");
            sql.append("			   coalesce(sum(b.customer_id),0)as 紹新\n");
            sql.append("		 from data_sales_detail a inner join data_sales b on a.slip_no=b.slip_no \n");
            sql.append("		 where b.visit_num=1\n");
            sql.append("		 and a.approached_flag=true and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) g on a.shop_id=e.shop_id \n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as カットの金額,sum(a.product_num) as カットの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("                 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1\n");
            sql.append("		 and c.technic_class_name='カット' and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) h on a.shop_id=h.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as カラーの金額,sum(a.product_num) as カラーの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1\n");
            sql.append("		 and c.technic_class_name='カラー' and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) i on a.shop_id=i.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as パーマの金額,sum(a.product_num) as パーマの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1\n");
            sql.append("		 and c.technic_class_name='パーマ' and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) j on a.shop_id=j.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as スパの金額,sum(a.product_num) as スパの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1 \n");
            sql.append("		 and c.technic_class_name='スパ' and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) k on a.shop_id=k.shop_id \n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as ﾄﾘｰﾄﾒﾝﾄの金額,sum(a.product_num) as ﾄﾘｰﾄﾒﾝﾄの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1 \n");
            sql.append("		 and c.technic_class_name='ﾄﾘｰﾄﾒﾝﾄ' and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) l on a.shop_id=l.shop_id \n");
            sql.append(" )a\n");
            sql.append(" group by a.shop_id,a.shop_name");
            ConnectionWrapper con = SystemInfo.getConnection();
            ResultSetWrapper rs = con.executeQuery(sql.toString());
            int i = 0;
            int rowCount = 0;

            while (rs.next()) {
                jx.setValue(1, 4, rs.getString("shop_name"));
                jx.setValue(2, 4, rs.getInt("カットの数量"));
                jx.setValue(3, 4, rs.getInt("カットの金額"));
                jx.setValue(4, 4, rs.getInt("パーマの数量"));
                jx.setValue(5, 4, rs.getInt("パーマの金額"));
                jx.setValue(6, 4, rs.getInt("カラーの数量"));
                jx.setValue(7, 4, rs.getInt("カラーの金額"));
                jx.setValue(8, 4, rs.getInt("スパの数量"));
                jx.setValue(9, 4, rs.getInt("スパの金額"));
                jx.setValue(10, 4, rs.getInt("ﾄﾘｰﾄﾒﾝﾄの数量"));
                jx.setValue(11, 4, rs.getInt("ﾄﾘｰﾄﾒﾝﾄの金額"));
                jx.setValue(12, 4, rs.getInt("技術売上の数量"));
                jx.setValue(13, 4, rs.getInt("技術売上の金額"));
                jx.setValue(14, 4, "");
                jx.setValue(15, 4, rs.getInt("店販売上の数量"));
                jx.setValue(16, 4, rs.getInt("店販売上の金額"));
                jx.setValue(17, 4, rs.getInt("税込売上"));
                jx.setValue(18, 4, rs.getInt("税抜売上"));
                jx.setValue(19, 4, rs.getInt("店販実"));
                jx.setValue(20, 4, rs.getInt("総客"));
                jx.setValue(21, 4, rs.getInt("ﾍﾙﾌﾟ"));
                jx.setValue(22, 4, rs.getInt("新規"));
                jx.setValue(23, 4, rs.getInt("指新"));
                jx.setValue(24, 4, rs.getInt("紹新"));
                jx.setValue(25, 4, rs.getDouble("CUT率"));
                jx.setValue(26, 4, rs.getDouble("CUT単価"));
                jx.setValue(27, 4, rs.getDouble("COL率"));
                jx.setValue(28, 4, rs.getDouble("COL単価"));
                jx.setValue(29, 4, rs.getDouble("Perm率"));
                jx.setValue(30, 4, rs.getDouble("Perm単価"));
                jx.setValue(31, 4, rs.getDouble("スパ率"));
                jx.setValue(32, 4, rs.getDouble("スパ単価"));
                jx.setValue(33, 4, rs.getDouble("ﾄﾘｰﾄﾒﾝﾄ率"));
                jx.setValue(34, 4, rs.getDouble("ﾄﾘｰﾄﾒﾝﾄ単価"));
                jx.setValue(35, 4, rs.getDouble("店販率"));
                jx.setValue(36, 4, rs.getDouble("店販単価"));
                jx.setValue(37, 4, rs.getDouble("技術単価"));
                jx.setValue(38, 4, rs.getDouble("総売単価"));

            }

            sql = new StringBuffer();
            sql.append(" select a.staff_id,a.staff_name1,a.staff_name2,a.shop_id,a.技術売上の金額,a.技術売上の数量,a.技術実,\n");
            sql.append(" a.店販売上の金額,a.店販売上の数量,a.店販実,総客,a.ﾍﾙﾌﾟ,a.税込売上,a.税抜売上,a.新規,a.指新,a.紹新,\n");
            sql.append(" a.カットの金額,a.カットの数量,a.カラーの金額,a.カラーの数量,a.パーマの金額,a.パーマの数量,a.スパの金額,a.スパの数量,\n");
            sql.append(" a.ﾄﾘｰﾄﾒﾝﾄの金額,a.ﾄﾘｰﾄﾒﾝﾄの数量,\n");
            sql.append(" a.カットの数量/a.総客::numeric*100 as CUT率,a.カットの金額/a.総客::numeric*100 as CUT単価 ,\n");
            sql.append(" a.カラーの数量/a.総客::numeric*100  as COL率,\n");
            sql.append(" a.カラーの金額/a.総客::numeric*100 as COL単価,\n");
            sql.append(" a.パーマの数量/総客::numeric*100 as Perm率,a.パーマの金額/総客::numeric*100 as Perm単価,\n");
            sql.append(" a.スパの数量/総客::numeric*100 as スパ率,a.スパの金額/総客::numeric*100 as スパ単価,\n");
            sql.append(" a.ﾄﾘｰﾄﾒﾝﾄの数量/総客::numeric*100 as ﾄﾘｰﾄﾒﾝﾄ率,a.ﾄﾘｰﾄﾒﾝﾄの金額/総客::numeric*100 as ﾄﾘｰﾄﾒﾝﾄ単価,\n");
            sql.append(" a.店販売上の金額/a.税抜売上::numeric*100 as 店販率,\n");
            sql.append(" a.店販売上の金額/a.総客::numeric*100 as 店販単価,\n");
            sql.append(" a.技術売上の金額/a.総客::numeric*100 as 技術単価,\n");
            sql.append(" a.税抜売上/a.総客::numeric*100 as 総売単価\n");
            sql.append(" from\n");
            sql.append(" (	 select a.staff_id,a.staff_name1,a.staff_name2,a.shop_id,b.技術売上の金額,b.技術売上の数量,\n");
            sql.append(" 	 c.店販売上の金額,c.店販売上の数量,c.店販実,c.総客,c.ﾍﾙﾌﾟ,c.技術実,d.税込売上,d.税抜売上,e.新規,f.指新,g.紹新,\n");
            sql.append(" 	 h.カットの金額,h.カットの数量,i.カラーの金額,i.カラーの数量,j.パーマの金額,j.パーマの数量,k.スパの金額,k.スパの数量,\n");
            sql.append("	 l.ﾄﾘｰﾄﾒﾝﾄの金額,l.ﾄﾘｰﾄﾒﾝﾄの数量\n");
            sql.append("	 from\n");
            sql.append("	 (select a.staff_id,a.staff_name1,a.staff_name2,a.shop_id  from mst_staff a where shop_id=" + SQLUtil.convertForSQL(paramBean.getShopId()) + ") a\n");
            sql.append("	 left join (\n");
            sql.append("	     	 select shop_id,staff_id,sum(product_value) as 技術売上の金額,sum(product_num) as 技術売上の数量\n");
            sql.append("		 from view_data_sales_detail_valid where product_division=1   group by staff_id,shop_id\n");
            sql.append("		 ) b on a.shop_id=b.shop_id and a.staff_id=b.staff_id\n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.staff_id,a.shop_id,sum(a.product_value) as 店販売上の金額,sum(a.product_num) as 店販売上の数量,sum(a.detail_value_no_tax) as 店販実,\n");
            sql.append("		 	    sum(a.customer_id)as 総客,coalesce(sum(b.point))/case when coalesce(sum(b.ratio),0)=0 then 1 else sum(b.ratio)end*100 as ﾍﾙﾌﾟ,");
            sql.append("                            sum(a.product_value*b.ratio/100*c.ratio/100) as 技術実\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join data_sales_proportionally b on a.slip_no =b.slip_no and a.slip_detail_no =b.slip_detail_no\n");
            sql.append("                 left join data_sales_detail_proportionally c \n");
            sql.append("                 on b.slip_no=c.slip_no and b.slip_detail_no=c.slip_detail_no and a.shop_id=c.shop_id and a.staff_id=c.staff_id\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) c on a.shop_id=c.shop_id and a.staff_id=c.staff_id\n");
            sql.append("	 left join ( \n");
            sql.append("		 select shop_id,staff_id,sum(discount_detail_value_in_tax) as 税込売上,sum(discount_detail_value_no_tax) as 税抜売上\n");
            sql.append("		 from view_data_sales_detail_valid where (product_division=1 or product_division=3) group by staff_id,shop_id\n");
            sql.append("		 ) d on a.shop_id=d.shop_id and a.staff_id=d.staff_id\n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,\n");
            sql.append("			   sum(a.customer_id)as 新規\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 where a.visit_num=1\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) e on a.shop_id=e.shop_id and a.staff_id=e.staff_id\n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,\n");
            sql.append("			   sum(a.customer_id)as 指新\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 where a.visit_num=1\n");
            sql.append("		 and designated_flag=true\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) f on a.shop_id=f.shop_id and a.staff_id=f.staff_id\n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,\n");
            sql.append("			   coalesce(sum(b.customer_id),0)as 紹新\n");
            sql.append("		 from data_sales_detail a inner join data_sales b on a.slip_no=b.slip_no \n");
            sql.append("		 where b.visit_num=1\n");
            sql.append("		 and a.approached_flag=true\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) g on a.shop_id=e.shop_id and a.staff_id=g.staff_id\n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as カットの金額,sum(a.product_num) as カットの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1\n");
            sql.append("		 and c.technic_class_name='カット'\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) h on a.shop_id=h.shop_id and a.staff_id=h.staff_id\n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as カラーの金額,sum(a.product_num) as カラーの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1\n");
            sql.append("		 and c.technic_class_name='カラー'\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) i on a.shop_id=i.shop_id and a.staff_id=i.staff_id\n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as パーマの金額,sum(a.product_num) as パーマの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1\n");
            sql.append("		 and c.technic_class_name='パーマ'\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) j on a.shop_id=j.shop_id and a.staff_id=j.staff_id\n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as スパの金額,sum(a.product_num) as スパの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1 \n");
            sql.append("		 and c.technic_class_name='スパ'\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) k on a.shop_id=k.shop_id and a.staff_id=k.staff_id\n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as ﾄﾘｰﾄﾒﾝﾄの金額,sum(a.product_num) as ﾄﾘｰﾄﾒﾝﾄの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1 \n");
            sql.append("		 and c.technic_class_name='ﾄﾘｰﾄﾒﾝﾄ'\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) l on a.shop_id=l.shop_id and a.staff_id=l.staff_id\n");
            sql.append(" )a\n");

            rs = con.executeQuery(sql.toString());
            i = 0;
            while (rs.next()) {
                if (i == 0) {
                    jx.setValue(1, 7, rs.getString("staff_name1") + rs.getString("staff_name2"));
                    jx.setValue(2, 7, rs.getInt("カットの数量"));
                    jx.setValue(3, 7, rs.getInt("カットの金額"));
                    jx.setValue(4, 7, rs.getInt("パーマの数量"));
                    jx.setValue(5, 7, rs.getInt("パーマの金額"));
                    jx.setValue(6, 7, rs.getInt("カラーの数量"));
                    jx.setValue(7, 7, rs.getInt("カラーの金額"));
                    jx.setValue(8, 7, rs.getInt("スパの数量"));
                    jx.setValue(9, 7, rs.getInt("スパの金額"));
                    jx.setValue(10, 7, rs.getInt("ﾄﾘｰﾄﾒﾝﾄの数量"));
                    jx.setValue(11, 7, rs.getInt("ﾄﾘｰﾄﾒﾝﾄの金額"));
                    jx.setValue(12, 7, rs.getInt("技術売上の数量"));
                    jx.setValue(13, 7, rs.getInt("技術売上の金額"));
                    jx.setValue(14, 7, rs.getInt("技術実"));
                    jx.setValue(15, 7, rs.getInt("店販売上の数量"));
                    jx.setValue(16, 7, rs.getInt("店販売上の金額"));
                    jx.setValue(17, 7, rs.getInt("税込売上"));
                    jx.setValue(18, 7, rs.getInt("税抜売上"));
                    jx.setValue(19, 7, rs.getInt("店販実"));
                    jx.setValue(20, 7, rs.getInt("総客"));
                    jx.setValue(21, 7, rs.getInt("ﾍﾙﾌﾟ"));
                    jx.setValue(22, 7, rs.getInt("新規"));
                    jx.setValue(23, 7, rs.getInt("指新"));
                    jx.setValue(24, 7, rs.getInt("紹新"));
                    jx.setValue(25, 7, rs.getDouble("CUT率"));
                    jx.setValue(26, 7, rs.getDouble("CUT単価"));
                    jx.setValue(27, 7, rs.getDouble("COL率"));
                    jx.setValue(28, 7, rs.getDouble("COL単価"));
                    jx.setValue(29, 7, rs.getDouble("Perm率"));
                    jx.setValue(30, 7, rs.getDouble("Perm単価"));
                    jx.setValue(31, 7, rs.getDouble("スパ率"));
                    jx.setValue(32, 7, rs.getDouble("スパ単価"));
                    jx.setValue(33, 7, rs.getDouble("ﾄﾘｰﾄﾒﾝﾄ率"));
                    jx.setValue(34, 7, rs.getDouble("ﾄﾘｰﾄﾒﾝﾄ単価"));
                    jx.setValue(35, 7, rs.getDouble("店販率"));
                    jx.setValue(36, 7, rs.getDouble("店販単価"));
                    jx.setValue(37, 7, rs.getDouble("技術単価"));
                    jx.setValue(38, 7, rs.getDouble("総売単価"));
                } else {

                    jx.insertRow(7 + i - 1, 1);
                    rowCount++;
                    jx.setValue(1, 7 + i, rs.getString("staff_name1") + rs.getString("staff_name2"));
                    jx.setValue(2, 7 + i, rs.getInt("カットの数量"));
                    jx.setValue(3, 7 + i, rs.getInt("カットの金額"));
                    jx.setValue(4, 7 + i, rs.getInt("パーマの数量"));
                    jx.setValue(5, 7 + i, rs.getInt("パーマの金額"));
                    jx.setValue(6, 7 + i, rs.getInt("カラーの数量"));
                    jx.setValue(7, 7 + i, rs.getInt("カラーの金額"));
                    jx.setValue(8, 7 + i, rs.getInt("スパの数量"));
                    jx.setValue(9, 7 + i, rs.getInt("スパの金額"));
                    jx.setValue(10, 7 + i, rs.getInt("ﾄﾘｰﾄﾒﾝﾄの数量"));
                    jx.setValue(11, 7 + i, rs.getInt("ﾄﾘｰﾄﾒﾝﾄの金額"));
                    jx.setValue(12, 7 + i, rs.getInt("技術売上の数量"));
                    jx.setValue(13, 7 + i, rs.getInt("技術売上の金額"));
                    jx.setValue(14, 7 + i, rs.getInt("技術実"));
                    jx.setValue(15, 7 + i, rs.getInt("店販売上の数量"));
                    jx.setValue(16, 7 + i, rs.getInt("店販売上の金額"));
                    jx.setValue(17, 7 + i, rs.getInt("税込売上"));
                    jx.setValue(18, 7 + i, rs.getInt("税抜売上"));
                    jx.setValue(19, 7 + i, rs.getInt("店販実"));
                    jx.setValue(20, 7 + i, rs.getInt("総客"));
                    jx.setValue(21, 7 + i, rs.getInt("ﾍﾙﾌﾟ"));
                    jx.setValue(22, 7 + i, rs.getInt("新規"));
                    jx.setValue(23, 7 + i, rs.getInt("指新"));
                    jx.setValue(24, 7 + i, rs.getInt("紹新"));
                    jx.setValue(25, 7 + i, rs.getDouble("CUT率"));
                    jx.setValue(26, 7 + i, rs.getDouble("CUT単価"));
                    jx.setValue(27, 7 + i, rs.getDouble("COL率"));
                    jx.setValue(28, 7 + i, rs.getDouble("COL単価"));
                    jx.setValue(29, 7 + i, rs.getDouble("Perm率"));
                    jx.setValue(30, 7 + i, rs.getDouble("Perm単価"));
                    jx.setValue(31, 7 + i, rs.getDouble("スパ率"));
                    jx.setValue(32, 7 + i, rs.getDouble("スパ単価"));
                    jx.setValue(33, 7 + i, rs.getDouble("ﾄﾘｰﾄﾒﾝﾄ率"));
                    jx.setValue(34, 7 + i, rs.getDouble("ﾄﾘｰﾄﾒﾝﾄ単価"));
                    jx.setValue(35, 7 + i, rs.getDouble("店販率"));
                    jx.setValue(36, 7 + i, rs.getDouble("店販単価"));
                    jx.setValue(37, 7 + i, rs.getDouble("技術単価"));
                    jx.setValue(38, 7 + i, rs.getDouble("総売単価"));
                }
                i++;
            }

            sql = new StringBuffer();
            sql.append(" select a.staff_id,a.staff_name1,a.staff_name2,a.shop_id,a.技術売上の金額,a.技術売上の数量,a.技術実,\n");
            sql.append(" a.店販売上の金額,a.店販売上の数量,a.店販実,総客,a.ﾍﾙﾌﾟ,a.税込売上,a.税抜売上,a.新規,a.指新,a.紹新,\n");
            sql.append(" a.カットの金額,a.カットの数量,a.カラーの金額,a.カラーの数量,a.パーマの金額,a.パーマの数量,a.スパの金額,a.スパの数量,\n");
            sql.append(" a.ﾄﾘｰﾄﾒﾝﾄの金額,a.ﾄﾘｰﾄﾒﾝﾄの数量,\n");
            sql.append(" a.カットの数量/a.総客::numeric*100 as CUT率,a.カットの金額/a.総客::numeric*100 as CUT単価 ,\n");
            sql.append(" a.カラーの数量/a.総客::numeric*100  as COL率,\n");
            sql.append(" a.カラーの金額/a.総客::numeric*100 as COL単価,\n");
            sql.append(" a.パーマの数量/総客::numeric*100 as Perm率,a.パーマの金額/総客::numeric*100 as Perm単価,\n");
            sql.append(" a.スパの数量/総客::numeric*100 as スパ率,a.スパの金額/総客::numeric*100 as スパ単価,\n");
            sql.append(" a.ﾄﾘｰﾄﾒﾝﾄの数量/総客::numeric*100 as ﾄﾘｰﾄﾒﾝﾄ率,a.ﾄﾘｰﾄﾒﾝﾄの金額/総客::numeric*100 as ﾄﾘｰﾄﾒﾝﾄ単価,\n");
            sql.append(" a.店販売上の金額/a.税抜売上::numeric*100 as 店販率,\n");
            sql.append(" a.店販売上の金額/a.総客::numeric*100 as 店販単価,\n");
            sql.append(" a.技術売上の金額/a.総客::numeric*100 as 技術単価,\n");
            sql.append(" a.税抜売上/a.総客::numeric*100 as 総売単価\n");
            sql.append(" from\n");
            sql.append(" (	 select a.staff_id,a.staff_name1,a.staff_name2,a.shop_id,b.技術売上の金額,b.技術売上の数量,\n");
            sql.append(" 	 c.店販売上の金額,c.店販売上の数量,c.店販実,c.総客,c.ﾍﾙﾌﾟ,c.技術実,d.税込売上,d.税抜売上,e.新規,f.指新,g.紹新,\n");
            sql.append(" 	 h.カットの金額,h.カットの数量,i.カラーの金額,i.カラーの数量,j.パーマの金額,j.パーマの数量,k.スパの金額,k.スパの数量,\n");
            sql.append("	 l.ﾄﾘｰﾄﾒﾝﾄの金額,l.ﾄﾘｰﾄﾒﾝﾄの数量\n");
            sql.append("	 from\n");
            sql.append("	 (select distinct null as staff_id ,null as staff_name1,null as staff_name2,a.shop_id  from mst_shop a where shop_id=" + SQLUtil.convertForSQL(paramBean.getShopId()) + ") a\n");
            sql.append("	 left join (\n");
            sql.append("	     	 select shop_id,staff_id,sum(product_value) as 技術売上の金額,sum(product_num) as 技術売上の数量\n");
            sql.append("		 from view_data_sales_detail_valid where product_division=1 and staff_id is null   group by staff_id,shop_id\n");
            sql.append("		 ) b on a.shop_id=b.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.staff_id,a.shop_id,sum(a.product_value) as 店販売上の金額,sum(a.product_num) as 店販売上の数量,sum(a.detail_value_no_tax) as 店販実,\n");
            sql.append("		 	    sum(a.customer_id)as 総客,coalesce(sum(b.point))/case when coalesce(sum(b.ratio),0)=0 then 1 else sum(b.ratio)end*100 as ﾍﾙﾌﾟ,");
            sql.append("                            sum(a.product_value*b.ratio/100*c.ratio/100) as 技術実\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join data_sales_proportionally b on a.slip_no =b.slip_no and a.slip_detail_no =b.slip_detail_no\n");
            sql.append("                 left join data_sales_detail_proportionally c \n");
            sql.append("                 on b.slip_no=c.slip_no and b.slip_detail_no=c.slip_detail_no and a.shop_id=c.shop_id and a.staff_id=c.staff_id\n");
            sql.append("		 where a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) c on a.shop_id=c.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select shop_id,staff_id,sum(discount_detail_value_in_tax) as 税込売上,sum(discount_detail_value_no_tax) as 税抜売上\n");
            sql.append("		 from view_data_sales_detail_valid where (product_division=1 or product_division=3) and staff_id is null group by staff_id,shop_id\n");
            sql.append("		 ) d on a.shop_id=d.shop_id \n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,\n");
            sql.append("			   sum(a.customer_id)as 新規\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 where a.visit_num=1 and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) e on a.shop_id=e.shop_id \n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,\n");
            sql.append("			   sum(a.customer_id)as 指新\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 where a.visit_num=1\n");
            sql.append("		 and designated_flag=true and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) f on a.shop_id=f.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,\n");
            sql.append("			   coalesce(sum(b.customer_id),0)as 紹新\n");
            sql.append("		 from data_sales_detail a inner join data_sales b on a.slip_no=b.slip_no \n");
            sql.append("		 where b.visit_num=1\n");
            sql.append("		 and a.approached_flag=true and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id\n");
            sql.append("		 ) g on a.shop_id=e.shop_id \n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as カットの金額,sum(a.product_num) as カットの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1\n");
            sql.append("		 and c.technic_class_name='カット' and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) h on a.shop_id=h.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as カラーの金額,sum(a.product_num) as カラーの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1\n");
            sql.append("		 and c.technic_class_name='カラー' and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) i on a.shop_id=i.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as パーマの金額,sum(a.product_num) as パーマの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1\n");
            sql.append("		 and c.technic_class_name='パーマ' and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) j on a.shop_id=j.shop_id \n");
            sql.append("	 left join ( \n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as スパの金額,sum(a.product_num) as スパの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1 \n");
            sql.append("		 and c.technic_class_name='スパ' and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) k on a.shop_id=k.shop_id \n");
            sql.append("	 left join (\n");
            sql.append("		 select a.shop_id,a.staff_id,sum(a.product_value) as ﾄﾘｰﾄﾒﾝﾄの金額,sum(a.product_num) as ﾄﾘｰﾄﾒﾝﾄの数量\n");
            sql.append("		 from view_data_sales_detail_valid a\n");
            sql.append("		 left join mst_technic b on a.product_id=b.technic_id\n");
            sql.append("		 left join mst_technic_class c on b.technic_class_id=c.technic_class_id\n");
            sql.append("		 where a.product_division=1 \n");
            sql.append("		 and c.technic_class_name='ﾄﾘｰﾄﾒﾝﾄ' and a.staff_id is null\n");
            sql.append("		 group by a.staff_id,a.shop_id \n");
            sql.append("		 ) l on a.shop_id=l.shop_id \n");
            sql.append(" )a\n");

            rs = con.executeQuery(sql.toString());
            i = 0;
            while (rs.next()) {

                jx.setValue(2, 8 + rowCount, rs.getInt("カットの数量"));
                jx.setValue(3, 8 + rowCount, rs.getInt("カットの金額"));
                jx.setValue(4, 8 + rowCount, rs.getInt("パーマの数量"));
                jx.setValue(5, 8 + rowCount, rs.getInt("パーマの金額"));
                jx.setValue(6, 8 + rowCount, rs.getInt("カラーの数量"));
                jx.setValue(7, 8 + rowCount, rs.getInt("カラーの金額"));
                jx.setValue(8, 8 + rowCount, rs.getInt("スパの数量"));
                jx.setValue(9, 8 + rowCount, rs.getInt("スパの金額"));
                jx.setValue(10, 8 + rowCount, rs.getInt("ﾄﾘｰﾄﾒﾝﾄの数量"));
                jx.setValue(11, 8 + rowCount, rs.getInt("ﾄﾘｰﾄﾒﾝﾄの金額"));
                jx.setValue(12, 8 + rowCount, rs.getInt("技術売上の数量"));
                jx.setValue(13, 8 + rowCount, rs.getInt("技術売上の金額"));
                jx.setValue(14, 8 + rowCount, rs.getInt("技術実"));
                jx.setValue(15, 8 + rowCount, rs.getInt("店販売上の数量"));
                jx.setValue(16, 8 + rowCount, rs.getInt("店販売上の金額"));
                jx.setValue(17, 8 + rowCount, rs.getInt("税込売上"));
                jx.setValue(18, 8 + rowCount, rs.getInt("税抜売上"));
                jx.setValue(19, 8 + rowCount, rs.getInt("店販実"));
                jx.setValue(20, 8 + rowCount, rs.getInt("総客"));
                jx.setValue(21, 8 + rowCount, rs.getInt("ﾍﾙﾌﾟ"));
                jx.setValue(22, 8 + rowCount, rs.getInt("新規"));
                jx.setValue(23, 8 + rowCount, rs.getInt("指新"));
                jx.setValue(24, 8 + rowCount, rs.getInt("紹新"));
                jx.setValue(25, 8 + rowCount, rs.getDouble("CUT率"));
                jx.setValue(26, 8 + rowCount, rs.getDouble("CUT単価"));
                jx.setValue(27, 8 + rowCount, rs.getDouble("COL率"));
                jx.setValue(28, 8 + rowCount, rs.getDouble("COL単価"));
                jx.setValue(29, 8 + rowCount, rs.getDouble("Perm率"));
                jx.setValue(30, 8 + rowCount, rs.getDouble("Perm単価"));
                jx.setValue(31, 8 + rowCount, rs.getDouble("スパ率"));
                jx.setValue(32, 8 + rowCount, rs.getDouble("スパ単価"));
                jx.setValue(33, 8 + rowCount, rs.getDouble("ﾄﾘｰﾄﾒﾝﾄ率"));
                jx.setValue(34, 8 + rowCount, rs.getDouble("ﾄﾘｰﾄﾒﾝﾄ単価"));
                jx.setValue(35, 8 + rowCount, rs.getDouble("店販率"));
                jx.setValue(36, 8 + rowCount, rs.getDouble("店販単価"));
                jx.setValue(37, 8 + rowCount, rs.getDouble("技術単価"));
                jx.setValue(38, 8 + rowCount, rs.getDouble("総売単価"));

            }


            sql = new StringBuffer();
            sql.append(" select * from(\n");
            sql.append(" select distinct  b.staff_id,b.staff_name1,b.staff_name2,b.shop_id\n");
            sql.append(" from data_sales_detail a left join mst_staff b\n");
            sql.append(" on a.staff_id = b.staff_id and a.shop_id=b.shop_id\n");
            sql.append(" where b.staff_id is  not null\n");
            sql.append(" )a\n");
            sql.append(" left join\n");
            sql.append(" (select a.shop_id,a.staff_id,sum(a.product_value) as 店販実\n");
            sql.append(" from data_sales_detail a where a.product_division=2\n");
            sql.append(" group by a.staff_id,a.shop_id \n");
            sql.append(" )b on a.staff_id=b.staff_id and a.shop_id=b.shop_id\n");
            sql.append(" left join \n");
            sql.append(" (\n");
            sql.append(" 	select  a.staff_id,a.shop_id,sum(c.point) as ﾎﾟｲﾝﾄ合計 ,sum(a.product_value*c.ratio*0.01) as 技術料金\n");
            sql.append(" 	from data_sales_detail a \n");
            sql.append(" 	left join data_sales_detail_proportionally b on a.slip_no=b.slip_no and a.slip_detail_no = b.slip_detail_no\n");
            sql.append(" 	left join data_sales_proportionally c on a.slip_no=c.slip_no and a.slip_detail_no = c.slip_detail_no \n");
            sql.append(" 	left join mst_technic e on a.product_id=e.technic_id\n");
            sql.append(" 	where a.product_division=2 \n");
            sql.append(" 	group by a.shop_id,a.staff_id\n");
            sql.append(" )c on a.staff_id = c.staff_id and a.shop_id=c.shop_id\n");
            rs = con.executeQuery(sql.toString());
            i = 0;
            while (rs.next()) {
                int staffId = rs.getInt("staff_id");
                if (i == 0) {
                    jx.setValue(1, 11 + rowCount, rs.getString("staff_name1") + rs.getString("staff_name2"));
                    jx.setValue(20, 11 + rowCount, rs.getInt("ﾎﾟｲﾝﾄ合計"));
                    jx.setValue(20, 11 + rowCount + 1, rs.getDouble("技術料金"));
                    sql = new StringBuffer();
                    sql.append(" select * from\n");
                    sql.append(" (select proportionally_integration_id,proportionally_integration_name from mst_proportionally_integration a) a\n");
                    sql.append(" left join \n");
                    sql.append(" (select  c.data_proportionally_id,sum(c.point) as ﾎﾟｲﾝﾄ,sum(a.product_value*c.ratio*0.01) as 金額 \n");
                    sql.append(" from data_sales_detail a \n");
                    sql.append(" left join data_sales_detail_proportionally b on a.slip_no=b.slip_no and a.slip_detail_no = b.slip_detail_no  \n");
                    sql.append(" left join data_sales_proportionally c on a.slip_no=c.slip_no and a.slip_detail_no = c.slip_detail_no \n");
                    sql.append(" left join mst_technic e on a.product_id=e.technic_id\n");
                    sql.append(" where a.product_division=2 and a.shop_id=" + SQLUtil.convertForSQL(paramBean.getShopId()) + " and a.staff_id=\n" + SQLUtil.convertForSQL(staffId));
                    sql.append(" group by c.data_proportionally_id,a.shop_id,a.staff_id\n");
                    sql.append(" )b on a.proportionally_integration_id=b.data_proportionally_id\n");
                    ResultSetWrapper rs1 = con.executeQuery(sql.toString());

                    int k = 0;
                    while (rs1.next()) {
                        jx.setValue(21 + k, 10 + rowCount, rs1.getString("proportionally_integration_name"));
                        jx.setValue(21 + k, 11 + rowCount, rs1.getInt("ﾎﾟｲﾝﾄ"));
                        jx.setValue(21 + k, 11 + rowCount + 1, rs1.getDouble("金額"));
                        k++;
                    }
                } else {
                    jx.insertRow(11 + rowCount + (i - 1) * 2 + 1, 1);

                    jx.insertRow(11 + rowCount + (i - 1) * 2 + 1, 1);
                    jx.setValue(1, 11 + rowCount + i * 2, rs.getString("staff_name1") + rs.getString("staff_name2"));
                    jx.setValue(20, 11 + rowCount + i * 2, rs.getInt("ﾎﾟｲﾝﾄ合計"));
                    jx.setValue(20, 11 + rowCount + i * 2 + 1, rs.getDouble("技術料金"));
                    for (int k = 1; k <= 19; k++) {
                        jx.mergeCells(k, 11 + rowCount + i * 2, k, 11 + rowCount + i * 2 + 1);
                    }
                    sql = new StringBuffer();
                    sql.append(" select * from\n");
                    sql.append(" (select proportionally_integration_id,proportionally_integration_name from mst_proportionally_integration a) a\n");
                    sql.append(" left join \n");
                    sql.append(" (select  c.data_proportionally_id,sum(c.point) as ﾎﾟｲﾝﾄ,sum(a.product_value*c.ratio*0.01) as 金額 \n");
                    sql.append(" from data_sales_detail a \n");
                    sql.append(" left join data_sales_detail_proportionally b on a.slip_no=b.slip_no and a.slip_detail_no = b.slip_detail_no  \n");
                    sql.append(" left join data_sales_proportionally c on a.slip_no=c.slip_no and a.slip_detail_no = c.slip_detail_no \n");
                    sql.append(" left join mst_technic e on a.product_id=e.technic_id\n");
                    sql.append(" where a.product_division=2 and a.shop_id=" + SQLUtil.convertForSQL(paramBean.getShopId()) + " and a.staff_id=\n" + SQLUtil.convertForSQL(staffId));
                    sql.append(" group by c.data_proportionally_id,a.shop_id,a.staff_id\n");
                    sql.append(" )b on a.proportionally_integration_id=b.data_proportionally_id\n");
                    ResultSetWrapper rs1 = con.executeQuery(sql.toString());
                    int k = 0;
                    while (rs1.next()) {
                        jx.setValue(21 + k, 11 + rowCount + i * 2, rs1.getInt("ﾎﾟｲﾝﾄ"));
                        jx.setValue(21 + k, 11 + rowCount + i * 2 + 1, rs1.getDouble("金額"));
                        k++;
                    }
                }

                i++;
            }
            sql = new StringBuffer();

        } catch (Exception e) {
        }



        //ファイル出力
        jx.openWorkbook();

        return true;
    }

    /**
     * コース消化リストを取得する
     *
     * @param cw
     * @param paramBean
     * @param productDivision
     * @return
     * @throws Exception
     */
    private Collection<BusinessConsumptionReportBean> getConsumptionList(ConnectionWrapper cw, ReportParameterBean paramBean, int productDivision) throws Exception {
        StringBuilder sql = new StringBuilder(1000);
        //削除されていないコースの消化状況取得
        sql.append(" select \n");

        sql.append("      mcc_display_seq \n"); //コース分類の表示順
        sql.append("    ,course_class_id \n"); //コース分類ID
        sql.append("    ,course_class_name \n"); //コース分類名
        sql.append("    ,mc_display_seq \n"); //コースの表示順
        sql.append("    ,course_id \n"); //コースID
        sql.append("    ,course_name \n"); //コース名
        sql.append("    ,num \n "); //コースごとの消化回数
        sql.append("    ,base_price \n ");
        sql.append("    ,sales_price \n ");
        sql.append("    , sum (total_consumption_num) as total_consumption_num , sum ( total_consumption_value) as total_consumption_value \n ");

        sql.append(" from ( \n");
        sql.append(" select \n");
        sql.append("     mcc.display_seq as mcc_display_seq \n"); //コース分類の表示順
        sql.append("    ,mcc.course_class_id \n"); //コース分類ID
        sql.append("    ,mcc.course_class_name \n"); //コース分類名
        sql.append("    ,mc.display_seq as mc_display_seq \n"); //コースの表示順
        sql.append("    ,mc.course_id \n"); //コースID
        sql.append("    ,mc.course_name \n"); //コース名
        sql.append("    ,mc.num \n "); //コースごとの消化回数
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            sql.append("    ,ceil(coalesce(mc.price, 0) / (1.0 + get_tax_rate(max(coalesce(dcd.sales_date,current_date))))) as base_price \n"); //コースマスタに設定されているコース販売金額
            sql.append("    ,ceil(coalesce(mc.sales_price, 0) / (1.0 + get_tax_rate(max(coalesce(dcd.sales_date,current_date))))) as sales_price \n"); //店舗ごとに設定されているコースの販売金額
        } else {
            //  税込み
            sql.append("    ,mc.price as base_price \n"); //コースマスタに設定されているコース販売金額
            sql.append("    ,mc.sales_price as sales_price \n"); //店舗ごとに設定されているコースの販売金額
        }
        sql.append("    ,count(dcd.slip_no) as digestion_num \n"); //消化履歴の件数
        sql.append("    ,sum(coalesce(dcd.product_num,0)) as total_consumption_num \n"); //トータルの消化回数
//                sql.append("    ,sum(coalesce(dc.product_value,0)) as total_consumption_value"); //トータルのコース契約販売金額
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            //IVS_LVTu start edit 2015/08/12 Bug #41945
            //sql.append("    ,coalesce(sum(dcd.product_num*dcd.dc_product_value/dcd.dc_product_num),0) / (1.0 + get_tax_rate(max(coalesce(dcd.sales_date,current_date)))) as total_consumption_value \n"); //消化回数に対応金額
            sql.append("    ,ceil(coalesce(sum(dcd.product_num*dcd.dc_product_value/dcd.dc_product_num),0) / (1.0 + get_tax_rate(max(coalesce(dcd.sales_date,current_date))))) as total_consumption_value \n"); //消化回数に対応金額
            //IVS_LVTu end edit 2015/08/12 Bug #41945
        } else {
            sql.append("    ,sum(dcd.product_num*(dcd.dc_product_value/dcd.dc_product_num)) as total_consumption_value \n"); //消化回数に対応金額
        }
        sql.append(" from ");
        sql.append("    (");
        sql.append("         select dcd3.*, ds3.sales_date , dc3.product_num as dc_product_num ,  dc3.product_value as dc_product_value  , dc3.product_id \n ");
        sql.append("         from data_contract_digestion dcd3  \n  ");
        sql.append("        inner join data_sales ds3        on dcd3.shop_id = ds3.shop_id  and ds3.slip_no = dcd3.slip_no \n");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds3.shop_id AND dsmt.slip_no = ds3.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                        sql.append("     and dsmt.shop_category_id in( " + paramBean.getListCategoryId()+ ")	\n ");
        }
        
        //IVS_LVTu start edit 2015/08/12 Bug #41945
        //sql.append("        inner join data_contract dc3 on dc3.shop_id = dcd3.shop_id \n");
        sql.append("        inner join data_contract dc3 on dc3.shop_id = dcd3.contract_shop_id \n");
        //IVS_LVTu end edit 2015/08/12 Bug #41945
        sql.append("        and  dc3.contract_no = dcd3.contract_no \n");
        sql.append("        and  dc3.contract_detail_no = dcd3.contract_detail_no \n");
        sql.append("        where dcd3.delete_date is null \n");
        sql.append("       and ds3.delete_date is null \n");
        sql.append("       and dcd3.shop_id in (").append(paramBean.getShopIDList()).append(") \n");
        sql.append("        and ds3.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");

        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
        if (paramBean.getStaffId() != null) {
            if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
                sql.append("    and ds3.staff_id = '").append(paramBean.getStaffId().toString()).append("'\n");
            } else {
                sql.append("    and dcd3.staff_id = '").append(paramBean.getStaffId().toString()).append("'\n");
            }
        }
        }

        sql.append("    ) dcd\n");

        sql.append("    inner join  (      select        mc2.*, mup2.price as sales_price ,  mup2.shop_id  \n");
        sql.append("                     from mst_course mc2\n");
        sql.append("                     left join mst_use_product mup2\n ");
        sql.append("                     on mup2.product_division = 3 and mc2.course_id = mup2.product_id\n ");
        //sql.append("                      where mc2.delete_date is null        and mup2.delete_date is null\n ");
        sql.append("                      and mup2.shop_id in (").append(paramBean.getShopIDList()).append(")\n");
        sql.append("   ) mc\n");
        //sql.append("     on mc.shop_id = dcd.shop_id and dcd.product_id = mc.course_id \n ");
        sql.append("     on dcd.product_id = mc.course_id \n ");
        sql.append("    inner join mst_course_class mcc    on mc.course_class_id = mcc.course_class_id \n");
        

       //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append(" and mcc.shop_category_id in("+paramBean.getListCategoryId()+")\n");
        }
        //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        sql.append(" group by");
        sql.append("    dcd.shop_id,mcc.display_seq, mcc.course_class_id,mcc.course_class_name,mc.display_seq,mc.course_id,mc.course_name,mc.num,mc.price,mc.sales_price\n");
        //vtbphuong start delete 20140318 Bug #21460[gb]業務報告⇒コース詳細、消化一覧の金額が違う
        // union all
//        sql.append(" union all");
//         sql.append(" select \n");
//        sql.append("     mcc.display_seq as mcc_display_seq \n"); //コース分類の表示順
//        sql.append("    ,mcc.course_class_id \n"); //コース分類ID
//        sql.append("    ,mcc.course_class_name \n"); //コース分類名
//        sql.append("    ,mc.display_seq as mc_display_seq \n"); //コースの表示順
//        sql.append("    ,mc.course_id \n"); //コースID
//        sql.append("    ,mc.course_name \n"); //コース名
//        sql.append("    ,mc.num \n "); //コースごとの消化回数
//        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
//            // 税抜き
//            sql.append("    ,ceil(coalesce(mc.price, 0) / (1.0 + get_tax_rate(max(coalesce(dcd.sales_date,current_date))))) as base_price \n"); //コースマスタに設定されているコース販売金額
//            sql.append("    ,ceil(coalesce(mc.sales_price, 0) / (1.0 + get_tax_rate(max(coalesce(dcd.sales_date,current_date))))) as sales_price \n"); //店舗ごとに設定されているコースの販売金額
//        } else {
//           //  税込み
//            sql.append("    ,mc.price as base_price \n"); //コースマスタに設定されているコース販売金額
//            sql.append("    ,mc.sales_price as sales_price \n"); //店舗ごとに設定されているコースの販売金額
//        }
//        sql.append("    ,count(dcd.slip_no) as digestion_num \n"); //消化履歴の件数
//        sql.append("    ,sum(coalesce(dcd.product_num,0)) as total_consumption_num \n"); //トータルの消化回数
////                sql.append("    ,sum(coalesce(dc.product_value,0)) as total_consumption_value"); //トータルのコース契約販売金額
//        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
//            sql.append("    ,coalesce(sum(dcd.product_num*dcd.dc_product_value/dcd.dc_product_num),0) / (1.0 + get_tax_rate(max(coalesce(dcd.sales_date,current_date)))) as total_consumption_value \n"); //消化回数に対応金額
//        } else {
//            sql.append("    ,sum(dcd.product_num*(dcd.dc_product_value/dcd.dc_product_num)) as total_consumption_value \n"); //消化回数に対応金額
//        }
//        sql.append(" from ");
//        sql.append("    (");
//        sql.append("         select dcd3.*, ds3.sales_date , dc3.product_num as dc_product_num ,  dc3.product_value as dc_product_value  , dc3.product_id \n ");
//        sql.append("         from data_contract_digestion dcd3  \n  ");
//        sql.append("        inner join data_sales ds3        on dcd3.shop_id = ds3.shop_id  and ds3.slip_no = dcd3.slip_no \n");
//        sql.append("        inner join data_contract dc3 on dc3.shop_id = dcd3.shop_id \n");
//        sql.append("        and  dc3.contract_no = dcd3.contract_no \n");
//        sql.append("        and  dc3.contract_detail_no = dcd3.contract_detail_no \n");
//        //sql.append("        where dcd3.delete_date is null \n");
//        //sql.append("       and ds3.delete_date is null \n");
//        sql.append("       where dcd3.shop_id in (").append(paramBean.getShopIDList()).append(") \n");
//        sql.append("        and ds3.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
//        
//        if (paramBean.getStaffId() != null) {
//            if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
//                sql.append("    and ds3.staff_id = '").append(paramBean.getStaffId().toString()).append("'\n");
//            } else {
//                sql.append("    and dcd3.staff_id = '").append(paramBean.getStaffId().toString()).append("'\n");
//            }
//        }
//        
//        sql.append("    ) dcd\n");
//        
//        sql.append("    inner join  (      select        mc2.*, mup2.price as sales_price ,  mup2.shop_id  \n");
//        sql.append("                     from mst_course mc2\n");
//        sql.append("                     left join mst_use_product mup2\n ");
//        sql.append("                     on mup2.product_division = 3 and mc2.course_id = mup2.product_id\n ");
//        //sql.append("                      where mc2.delete_date is not null\n ");
//        sql.append("                      and mup2.shop_id in (").append(paramBean.getShopIDList()).append(")\n");
//        sql.append("   ) mc\n");
//        sql.append("     on mc.shop_id = dcd.shop_id and dcd.product_id = mc.course_id \n ");
//        sql.append("    inner join mst_course_class mcc    on mc.course_class_id = mcc.course_class_id \n");
//        
//        sql.append(" group by");
//        sql.append("    dcd.shop_id,mcc.display_seq, mcc.course_class_id,mcc.course_class_name,mc.display_seq,mc.course_id,mc.course_name,mc.num,mc.price,mc.sales_price\n");
//        
//        
//        //
//        
//       sql.append(" order by");
//       sql.append("    mcc_display_seq, mc_display_seq\n");
        //vtbphuong end delete 20140318 Bug #21460[gb]業務報告⇒コース詳細、消化一覧の金額が違う
//        
        sql.append(" ) rs \n");
        sql.append(" group by");
        sql.append("   course_id, course_name,mcc_display_seq,course_class_id,course_class_name,mc_display_seq,num,base_price,sales_price \n");
        // 20130423 IVS Change


        ResultSetWrapper rs = cw.executeQuery(sql.toString());

        Map<Integer, BusinessConsumptionReportBean> reportMap = new LinkedHashMap<Integer, BusinessConsumptionReportBean>();
        while (rs.next()) {
            BusinessConsumptionReportBean bean = new BusinessConsumptionReportBean();
            Integer courseClassId = rs.getInt("course_class_id");
            if (reportMap.containsKey(courseClassId)) {
                bean = reportMap.get(courseClassId);
            } else {
                bean = new BusinessConsumptionReportBean();
                bean.setCourseClassId(courseClassId);
                bean.setCourseClassName(rs.getString("course_class_name"));
            }

            BusinessConsumptionReportCourseBean courseBean = new BusinessConsumptionReportCourseBean();
            courseBean.setCourseId(rs.getInt("course_id"));
            courseBean.setCourseName(rs.getString("course_name"));
            courseBean.setNum(rs.getInt("num"));
            courseBean.setBasePrice(rs.getInt("base_price"));
            Object salesPrice = rs.getObject("sales_price");
            if (salesPrice != null) {
                courseBean.setSalesPrice(((BigDecimal) salesPrice).intValue());
            }

            // if (rs.getDouble("digestion_num") > 0) {
            courseBean.setTotalConsumptionNum(rs.getDouble("total_consumption_num"));
            courseBean.setTotalConsumptionValue(rs.getDouble("total_consumption_value"));
            // }

            bean.addCourse(courseBean);

            reportMap.put(courseClassId, bean);
        }

        return reportMap.values();
    }

    /**
     * 営業日数を取得する
     *
     * @param cw
     * @param paramBean
     * @return
     * @throws SQLException
     */
    private int getOperatingDays(ConnectionWrapper cw, ReportParameterBean paramBean) throws SQLException {
        // 営業日数（売上なしのレジ締め日数も含める）
        StringBuilder whereCondition = new StringBuilder();
        // vtbphuong start change 20140926 Bug #30963 
       //  whereCondition.append(" ds.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' ");
         whereCondition.append(" dsd.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' ");
       // vtbphuong end change 20140926 Bug #30963

        if (null != paramBean.getStaffId() && !"".equals(paramBean.getStaffId())) {
            whereCondition.append(" AND dsd.staff_id = '" + paramBean.getStaffId() + "' ");
        }

        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("     count(distinct sales_date) as date_count");
        sql.append(" from");
        sql.append(" (");
        sql.append("     select");
        sql.append("         ds.sales_date");
        sql.append("     from");
        sql.append("         data_sales ds inner join view_data_sales_detail_valid dsd using(shop_id, slip_no) ");
        sql.append("             left join mst_staff ms on dsd.detail_staff_id = ms.staff_id");
        sql.append("     where " + whereCondition.toString());
        sql.append("       and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     union all");
        sql.append("     select");
        sql.append("         manage_date");
        sql.append("     from");
        sql.append("         data_register dr");
        sql.append("     where");
        sql.append("             delete_date is null");
        sql.append("         and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("         and manage_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "' ");
        sql.append("         and not exists");
        sql.append("             (");
        sql.append("                 select 1");
        sql.append("                 from");
        sql.append("                     data_sales");
        sql.append("                 where");
        sql.append("                         delete_date is null");
        sql.append("                     and shop_id = dr.shop_id");
        sql.append("                     and sales_date = dr.manage_date");
        sql.append("             )");
        sql.append(" ) t");

        int dayCount = 0;
        ResultSetWrapper rs = cw.executeQuery(sql.toString());
        if (rs.next()) {
            dayCount = rs.getInt("date_count");
        }
//		paramMap.put("TargetDayCount", dayCount + "日");
        return dayCount;
    }

    private boolean viewBusinessReportForTechnicalAndItem(ReportParameterBean paramBean, boolean isTechnical, boolean isPDF) throws Exception {

        ConnectionWrapper cw = SystemInfo.getConnection();
        
        // 店舗情報取得
        HashMap<String, String> shopInfo = this.getShopInfo(paramBean.getShopIDList());

        HashMap<String, Object> paramMap = new HashMap<String, Object>();

        if (!this.setBusinessReportCommonData(cw, paramBean, paramMap)) {
            return false;
        }

        // 税込み･税別の区分
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            paramMap.put("TaxType", "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            paramMap.put("TaxType", "税込");
        }

        if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
            paramMap.put("StaffType", "主担当");
        } else {
            paramMap.put("StaffType", "施術担当");
        }

        // 期間
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
        paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));

        // 店舗名もしくはスタッフ名(スタッフ未選択時は店舗名)
        if (null == paramBean.getStaffId() || "".equals(paramBean.getStaffId())) {
            paramMap.put("TargetName", paramBean.getTargetName());
        } else {
            paramMap.put("TargetName", this.getStaffName(paramBean) + " （" + paramMap.get("StaffType") + "）");
        }

        //出力日時
        paramMap.put("OutputTime", new java.util.Date());

        // ================ 営業日数 ==================
        StringBuffer whereCondition = new StringBuffer();
        // IVS start change 20140926 Bug #30963
      //  whereCondition.append(" ds.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' ");
          whereCondition.append(" dsd.sales_date BETWEEN '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' ");
        // IVS end change 20140926 Bug #30963

        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
        if (null != paramBean.getStaffId() && !"".equals(paramBean.getStaffId())) {
            whereCondition.append(" AND dsd.staff_id = '" + paramBean.getStaffId() + "' ");
        }
        }
         

        // 営業日数（売上なしのレジ締め日数も含める）
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("     count(distinct sales_date) as date_count");
        sql.append(" from");
        sql.append(" (");
        sql.append("     select");
        sql.append("         ds.sales_date");
        sql.append("     from");
        sql.append("         data_sales ds inner join view_data_sales_detail_valid dsd using(shop_id, slip_no) ");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                        sql.append("     and dsmt.shop_category_id in( " + paramBean.getListCategoryId()+ ")	\n ");
        }
        
        sql.append("             left join mst_staff ms on dsd.detail_staff_id = ms.staff_id");
        sql.append("     where " + whereCondition.toString());
        sql.append("       and ds.shop_id in (" + paramBean.getShopIDList() + ")");
 
        sql.append("     union all");
        sql.append("     select");
        sql.append("         manage_date");
        sql.append("     from");
        sql.append("         data_register dr");
        sql.append("     where");
        sql.append("             delete_date is null");
        sql.append("         and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("         and manage_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "' ");
        sql.append("         and not exists");
        sql.append("             (");
        sql.append("                 select 1");
        sql.append("                 from");
        sql.append("                     data_sales");
        sql.append("                 where");
        sql.append("                         delete_date is null");
        sql.append("                     and shop_id = dr.shop_id");
        sql.append("                     and sales_date = dr.manage_date");
        sql.append("             )");
        sql.append(" ) t");

        int dayCount = 0;
        ResultSetWrapper rs = cw.executeQuery(sql.toString());
        if (rs.next()) {
            dayCount = rs.getInt("date_count");
        }
        paramMap.put("TargetDayCount", dayCount + "日");
        // ================ ここまで ==================


        // 明細のデータ(技術報告 or 商品報告)
        ArrayList<BusinessReportBean> reportList = (isTechnical ? getTechnicList(cw, paramBean, 1) : getItemList(cw, paramBean, 2));

        // 明細のデータ(技術クレーム or 商品返品)
        ArrayList<BusinessReportBean> report2List = (isTechnical ? getTechnicList(cw, paramBean, 3) : getItemList(cw, paramBean, 4));

        // 明細がどちらもなければ終了
        if (reportList.size() == 0 && report2List.size() == 0) {
            return false;
        }

        // 明細行の最後にある合計行用のデータをパラメータに追加
        paramMap.putAll(getTotalMap(reportList, report2List));

        ArrayList<BusinessSubReportBean> dataSource = new ArrayList<BusinessSubReportBean>();
        BusinessSubReportBean subReportBean = new BusinessSubReportBean();
        subReportBean.setSubReportTechnic(new JRBeanCollectionDataSource(reportList));
        subReportBean.setSubReportItem(new JRBeanCollectionDataSource(report2List));

        dataSource.add(subReportBean);

        /*		
         if(isPDF){
         return this.outputReportInSub(reportName, dataSource, paramMap, true);
         } else {
         return this.outputExcelReportInSub(reportName, dataSource, paramMap, true);
         }
         */

        String fileName = "";
        if (isTechnical) {
            fileName = "業務報告_技術詳細";
        } else {
            fileName = "業務報告_商品詳細";
        }
        JExcelApi jx = new JExcelApi(fileName);
        jx.setTemplateFile("/reports/" + fileName + ".xls");
        
        //------------------------------
        // ヘッダ
        //------------------------------
        jx.setValue(7, 3, paramMap.get("TargetStartDate") + " 〜 " + paramMap.get("TargetEndDate"));
        jx.setValue(7, 4, paramMap.get("TargetName"));
        jx.setValue(7, 5, paramMap.get("TargetDayCount"));
        jx.setValue(7, 6, paramMap.get("TaxType"));
        if(paramBean.getUseShopCategory()==1) {
            jx.setValue(14, 5, paramBean.getListCategoryName());
        }else {
            jx.setValue(12, 5, "");
            jx.setValue(13, 5, "");
            
        }
        //------------------------------
        // 売上情報
        //------------------------------
        // 技術
        jx.setValue(2, 11, paramMap.get("TechnicTotal"));
        long technicAmount = Long.parseLong(paramMap.get("TechnicAmount").toString());
        jx.setValue(8, 11, technicAmount < 0 ? "-" : technicAmount);
        // 商品
        jx.setValue(12, 11, paramMap.get("ItemTotal"));
        long itemAmount = Long.parseLong(paramMap.get("ItemAmount").toString());
        jx.setValue(18, 11, itemAmount < 0 ? "-" : itemAmount);
        // 全体割引
        if(paramBean.getListCategoryId()==null || paramBean.getListCategoryId().equals("")){
            jx.setValue(26, 11, paramMap.get("AllDiscountPrice"));
        }else {
             jx.setValue(26, 11, 0);
        }
        // 累計総売上
        long amountTotal = Long.parseLong(paramMap.get("TechnicAmount").toString()) + Long.parseLong(paramMap.get("ItemAmount").toString());
        jx.setValue(34, 11, amountTotal < 0 ? "-" : amountTotal - Long.parseLong(paramMap.get("DiscountAmount").toString()));

        //------------------------------
        // 明細割引
        //------------------------------
        // 技術割引
        jx.setValue(43, 11, paramMap.get("TechnicDiscountPrice"));
        // 商品割引
        jx.setValue(47, 11, paramMap.get("ItemDiscountPrice"));

        //------------------------------
        // 消費税
        //------------------------------
        jx.setValue(52, 11, paramMap.get("TotalTaxPrice"));

        //------------------------------
        // 技術報告 or 商品報告
        //------------------------------
        int row = 0;
        int baseRow = 0;
        String productClassName = "";

        baseRow = 17;
        if (reportList.size() > 0) {

            jx.insertRow(baseRow, reportList.size() - 1);
            for (int i = 0; i < reportList.size(); i++) {
                row = baseRow + i + 1;
                jx.mergeCells(2, row, 7, row);
                jx.mergeCells(8, row, 19, row);
                jx.mergeCells(20, row, 22, row);
                jx.mergeCells(23, row, 24, row);
                jx.mergeCells(25, row, 27, row);
                jx.mergeCells(28, row, 30, row);
                jx.mergeCells(31, row, 34, row);
                jx.mergeCells(35, row, 38, row);
                jx.mergeCells(40, row, 42, row);
                jx.mergeCells(43, row, 45, row);
                jx.mergeCells(46, row, 49, row);
            }
            productClassName = "";
            for (int i = 0; i < reportList.size(); i++) {
                row = baseRow + i;
                if (!productClassName.equals(reportList.get(i).getProductClassName())) {
                    productClassName = reportList.get(i).getProductClassName();
                    jx.setUpperLine(2, row);
                    jx.setUpperLine(40, row);
                    jx.setUpperLine(43, row);
                    jx.setUpperLine(46, row);
                }
                // 分類名(非表示列にセット)
                jx.setValue(1, row, productClassName);
                // 技術名 or 商品名
                jx.setValue(8, row, reportList.get(i).getProductName());
                // 単価
                jx.setValue(20, row, reportList.get(i).getPrice());
                // 数量
                jx.setValue(23, row, reportList.get(i).getSalesCount());
                // 売上
                jx.setValue(31, row, reportList.get(i).getTotalPrice());
                // 割引
                jx.setValue(35, row, reportList.get(i).getDiscountPrice());
            }
            jx.removeRow(row + 1);

        } else {
            jx.removeRow(baseRow + 1);
        }

        //------------------------------
        // 技術クレーム or 商品返品
        //------------------------------
        baseRow = 25 + (reportList.size() - (reportList.size() > 0 ? 2 : 1));
        if (report2List.size() > 0) {

            jx.insertRow(baseRow, report2List.size() - 1);
            for (int i = 0; i < report2List.size(); i++) {
                row = baseRow + i + 1;
                jx.mergeCells(2, row, 7, row);
                jx.mergeCells(8, row, 19, row);
                jx.mergeCells(20, row, 22, row);
                jx.mergeCells(23, row, 24, row);
                jx.mergeCells(25, row, 27, row);
                jx.mergeCells(28, row, 30, row);
                jx.mergeCells(31, row, 34, row);
                jx.mergeCells(35, row, 38, row);
                jx.mergeCells(40, row, 42, row);
                jx.mergeCells(43, row, 45, row);
                jx.mergeCells(46, row, 49, row);
            }
            productClassName = "";
            for (int i = 0; i < report2List.size(); i++) {
                row = baseRow + i;
                if (!productClassName.equals(report2List.get(i).getProductClassName())) {
                    productClassName = report2List.get(i).getProductClassName();
                    jx.setUpperLine(2, row);
                    jx.setUpperLine(40, row);
                    jx.setUpperLine(43, row);
                    jx.setUpperLine(46, row);
                }
                // 分類名(非表示列にセット)
                jx.setValue(1, row, productClassName);
                // 技術名 or 商品名
                jx.setValue(8, row, report2List.get(i).getProductName());
                // 単価
                jx.setValue(20, row, report2List.get(i).getPrice());
                // 数量
                jx.setValue(23, row, report2List.get(i).getSalesCount());
                // 売上
                jx.setValue(31, row, report2List.get(i).getTotalPrice());
                // 割引
                jx.setValue(35, row, report2List.get(i).getDiscountPrice());
            }
            jx.removeRow(row + 1);

        } else {
            jx.removeRow(baseRow + 1);
        }

        jx.openWorkbook();

        return true;
    }

    /**
     * 明細の合計行用のデータをセットしたMapを取得
     */
    private HashMap<String, Object> getTotalMap(ArrayList<BusinessReportBean> technicList, ArrayList<BusinessReportBean> technicClameList) {

        HashMap<String, Object> map = new HashMap<String, Object>();

        //GEOBECK start edit 20160824 #54164 intをlongに
        //        int numTotal = 0;
        //        int priceTotal = 0;
        //        int discountTotal = 0;
        //        int classTotalPrice = 0;
        long numTotal = 0;
        long priceTotal = 0;
        long discountTotal = 0;
        long classTotalPrice = 0;
        //GEOBECK end edit 20160824 #54164

        for (BusinessReportBean bean : technicList) {
            numTotal += bean.getSalesCount();
            priceTotal += bean.getTotalPrice();
            discountTotal += bean.getDiscountPrice();
            classTotalPrice += bean.getClassTotalPrice();
         }

        //GEOBECK start edit 20160824 #54164 IntegerをLongに
        map.put("SalesTotal", new Long(numTotal));
        map.put("PriceTotal", new Long(priceTotal));
        map.put("DiscountTotal", new Long(discountTotal));
        map.put("ClassTotalPrice", new Long(classTotalPrice));
        //GEOBECK end edit 20160824 #54164


        numTotal = 0;
        priceTotal = 0;
        discountTotal = 0;
        classTotalPrice = 0;

        for (BusinessReportBean bean : technicClameList) {
            numTotal += bean.getSalesCount();
            priceTotal += bean.getTotalPrice();
            discountTotal += bean.getDiscountPrice();
            classTotalPrice += bean.getClassTotalPrice();
        }

        //GEOBECK start edit 20160824 #54164 IntegerをLongに
        map.put("ClameSalesTotal", new Long(numTotal));
        map.put("ClamePriceTotal", new Long(priceTotal));
        map.put("ClameDiscountTotal", new Long(discountTotal));
        map.put("ClameClassTotalPrice", new Long(classTotalPrice));
        //GEOBECK end edit 20160824 #54164

        return map;
    }

    /**
     * 商品報告のデータ or 商品返品のデータを取得
     */
    private ArrayList<BusinessReportBean> getItemList(ConnectionWrapper cw, ReportParameterBean paramBean, int productDivision) throws Exception {
        NumberFormat nf = NumberFormat.getInstance();
        DecimalFormat df = new DecimalFormat("###.0");

        BusinessReportBean businessBean = null;
        ArrayList<BusinessReportBean> list = new ArrayList<BusinessReportBean>();

        int product_row_count = 1;
        int totalSalesCount = 0;

        String priceSql = "";
        String discountSql = "";

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            priceSql = "ceil(coalesce(mup.price, mg.price) / (1.0 + get_tax_rate(max(ds.sales_date)))) as price";
            discountSql = "dsd.detail_value_no_tax - dsd.discount_detail_value_no_tax";
        } else {
            // 税込み
            priceSql = "coalesce(mup.price, mg.price) as price";
            discountSql = "dsd.detail_value_in_tax - dsd.discount_detail_value_in_tax";
        }

        String productValueSql = makeValueString(paramBean);

        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      mgc.display_seq");
        sql.append("     ,mgc.item_class_id");
        sql.append("     ,mgc.item_class_name");
        sql.append("     ,mg.display_seq");
        sql.append("     ,mg.item_id");
        sql.append("     ,mg.item_name");
        sql.append("     ," + priceSql);
        sql.append("     ,sum(dsd.product_num) as product_num");
        sql.append("     ,sum(" + productValueSql + ") as product_value");
        sql.append("     ,sum(" + discountSql + ") as discount_value");
        sql.append("     ,mgc.product_class_num");
        sql.append("     ,mgc.product_class_value");
        sql.append(" from");
        sql.append("     data_sales ds");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
            sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
            sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
            sql.append("     and dsmt.shop_category_id in( " + paramBean.getListCategoryId()+ ")	\n ");
        }
        
        sql.append("         inner join (" + getDataSalesDetailShareTable() + ") dsd");
        sql.append("                 on dsd.shop_id = ds.shop_id");
        sql.append("                and dsd.slip_no = ds.slip_no");
        //nhanvt start add 20150312 New request #35502
        sql.append("     and dsd.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
        //nhanvt end add 20150312 New request #35502
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null) {
                if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
                    sql.append("        and dsd.staff_id = '" + paramBean.getStaffId().toString() + "'");
                } else {
                    sql.append("        and dsd.detail_staff_id = '" + paramBean.getStaffId().toString() + "'");
                }
            }
        }
         
        sql.append("                and dsd.product_division = " + productDivision);
        sql.append("         left join mst_use_product mup");
        sql.append("                on mup.product_id = dsd.product_id");
        sql.append("               and mup.shop_id = dsd.shop_id");
        sql.append("               and mup.product_division = dsd.product_division");
        sql.append("         inner join mst_item mg");
        sql.append("                 on mg.item_id = dsd.product_id");
        sql.append("         inner join");
        sql.append("             (");
        sql.append("                 select");
        sql.append("                      mgc.display_seq");
        sql.append("                     ,mgc.item_class_id");
        sql.append("                     ,mgc.item_class_name");
        sql.append("                     ,sum(dsd.product_num) as product_class_num");
        sql.append("                     ,sum(" + productValueSql + ") as product_class_value");
        sql.append("                     ,sum(dsd.discount_value) as discount_class_value");
        sql.append("                 from");
        sql.append("                     data_sales ds");
         
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                        sql.append("     and dsmt.shop_category_id in( " + paramBean.getListCategoryId()+ ")	\n ");
        }
        
        sql.append("                         inner join (" + getDataSalesDetailShareTable() + ") dsd");
        sql.append("                                 on dsd.shop_id = ds.shop_id");
        sql.append("                                and dsd.slip_no = ds.slip_no");
        //nhanvt start add 20150312 New request #35502
        sql.append("     and dsd.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
        //nhanvt end add 20150312 New request #35502
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null) {
                if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
                    sql.append("                        and dsd.staff_id = '" + paramBean.getStaffId().toString() + "'");
                } else {
                    sql.append("                        and dsd.detail_staff_id = '" + paramBean.getStaffId().toString() + "'");
                }
            }
        }
        sql.append("                                and dsd.product_division = " + productDivision);
        sql.append("                         inner join mst_item mg");
        sql.append("                                 on mg.item_id = dsd.product_id");
        sql.append("                         inner join mst_item_class mgc");
        sql.append("                                 on mgc.item_class_id = mg.item_class_id");
        sql.append("                 where");
        sql.append("                         ds.delete_date is null");
        sql.append("                     and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and ds.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
         //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
             sql.append("         and mgc.shop_category_id in( " + paramBean.getListCategoryId() + ")\n");
        }
        //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        sql.append("                 group by");
        sql.append("                      mgc.display_seq");
        sql.append("                     ,mgc.item_class_id");
        sql.append("                     ,mgc.item_class_name");
        sql.append("             ) mgc");
        sql.append("             on mgc.item_class_id = mg.item_class_id");
        sql.append(" where");
        sql.append("         ds.delete_date is null");
        sql.append("     and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     and ds.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
        
        sql.append(" group by");
        sql.append("      mgc.display_seq");
        sql.append("     ,mgc.item_class_id");
        sql.append("     ,mgc.item_class_name");
        sql.append("     ,mg.display_seq");
        sql.append("     ,mg.item_id");
        sql.append("     ,mg.item_name");
        sql.append("     ,coalesce(mup.price, mg.price)");
        sql.append("     ,mgc.product_class_num");
        sql.append("     ,mgc.product_class_value");
        sql.append(" order by");
        sql.append("      mgc.display_seq");
        sql.append("     ,mg.display_seq");

        ResultSetWrapper rs = cw.executeQuery(sql.toString());

        while (rs.next()) {
            businessBean = new BusinessReportBean();
            businessBean.setProductClassId(rs.getInt("item_class_id"));
            businessBean.setProductClassName(rs.getString("item_class_name"));
            businessBean.setProductName(rs.getString("item_name"));
            //GEOBECK start edit 20160824 #54164 getIntをgetLongに変更
            businessBean.setPrice(rs.getLong("price"));
            businessBean.setTotalPrice(rs.getLong("product_value"));
            businessBean.setClassTotalPrice(rs.getLong("product_class_value"));
            businessBean.setSalesCount(rs.getLong("product_num"));
            businessBean.setDiscountPrice(rs.getLong("discount_value"));
            businessBean.setClassRate(rs.getDouble("product_num") / rs.getDouble("product_class_num") * 100d);
            businessBean.setClassSalesCount(nf.format(rs.getLong("product_class_num")));
            //GEOBECK end edit 20160824 #54164
            list.add(businessBean);
            totalSalesCount += businessBean.getSalesCount();
        }

        // 再構築
        String nowClassName = "";
        BusinessReportBean tmpBean = null;
        for (int i = 0; i <= list.size() - 1; i++) {
            tmpBean = list.get(i);
            tmpBean.setTotalRate((Double.valueOf(tmpBean.getSalesCount()) / (Double.valueOf(totalSalesCount))) * 100);

            if (nowClassName.equals(tmpBean.getProductClassName())) {
//                            list.get(i).setProductClassName("");
            } else {
                nowClassName = list.get(i).getProductClassName();
            }

            if (i + 1 < list.size()) {
                if (tmpBean.getProductClassId() != list.get(i + 1).getProductClassId()) {
                    tmpBean.setClassTotalRate(df.format((Double.valueOf(tmpBean.getClassSalesCount().replaceAll(",", "")) / (Double.valueOf(totalSalesCount))) * 100));
                } else {
                    tmpBean.setClassTotalRate("");
                    tmpBean.setClassSalesCount("");
                    tmpBean.setClassTotalPrice(0);
                }
            } else {
                tmpBean.setClassTotalRate(df.format((Double.valueOf(tmpBean.getClassSalesCount().replaceAll(",", "")) / (Double.valueOf(totalSalesCount))) * 100));
            }
        }

        return list;
    }

    private ArrayList<BusinessReportBean> getTechnicList(ConnectionWrapper cw, ReportParameterBean paramBean, int productDivision) throws Exception {
        ArrayList<BusinessReportBean> technicList = new ArrayList<BusinessReportBean>();


        int product_row_count = 1;
        int totalSalesCount = 0;

        String priceSql = "";
        String discountSql = "";

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            priceSql = "ceil(coalesce(mup.price, mt.price) / (1.0 + get_tax_rate(max(ds.sales_date)))) as price";
            discountSql = "dsd.detail_value_no_tax - dsd.discount_detail_value_no_tax";
        } else {
            // 税込み
            priceSql = "coalesce(mup.price, mt.price) as price";
            discountSql = "dsd.detail_value_in_tax - dsd.discount_detail_value_in_tax";
        }

        String productValueSql = makeValueString(paramBean);

        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      mtc.display_seq");
        sql.append("     ,mtc.technic_class_id");
        sql.append("     ,mtc.technic_class_name");
        sql.append("     ,mt.display_seq");
        sql.append("     ,mt.technic_id");
        sql.append("     ,mt.technic_name");
        sql.append("     ," + priceSql);
        sql.append("     ,sum(dsd.product_num) as product_num");
        sql.append("     ,sum(" + productValueSql + ") as product_value");
        sql.append("     ,sum(" + discountSql + ") as discount_value");
        sql.append("     ,mtc.product_class_num");
        sql.append("     ,mtc.product_class_value");
        sql.append(" from");
        sql.append("     data_sales ds");
        //IVS_LVTu start edit 2015/08/28 Bug #42388 
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != "" && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                        //IVS_LVTu start add 2015/07/02 Bug #38967
                        sql.append(" and dsmt.shop_category_id in (" +paramBean.getListCategoryId()+")");
                        //IVS_LVTu end add 2015/07/02 Bug #38967
        }
        
        sql.append("         inner join view_data_sales_detail_valid dsd");
        sql.append("                 on dsd.shop_id = ds.shop_id");
        sql.append("                and dsd.slip_no = ds.slip_no");
        //nhanvt start add 20150312 New request #35502
        sql.append("                and dsd.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
        //nhanvt end add 20150312 New request #35502
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null) {
                if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
                    sql.append("        and dsd.staff_id = '" + paramBean.getStaffId().toString() + "'");
                } else {
                    sql.append("        and dsd.detail_staff_id = '" + paramBean.getStaffId().toString() + "'");
                }
            }
        }
        sql.append("                and dsd.product_division = " + productDivision);
        sql.append("         left join mst_use_product mup");
        sql.append("                on mup.product_id = dsd.product_id");
        sql.append("               and mup.shop_id = dsd.shop_id");
        sql.append("               and mup.product_division = dsd.product_division");
        sql.append("         inner join mst_technic mt");
        sql.append("                 on mt.technic_id = dsd.product_id");
        sql.append("         inner join");
        sql.append("             (");
        sql.append("                 select");
        sql.append("                      mtc.display_seq");
        sql.append("                     ,mtc.technic_class_id");
        sql.append("                     ,mtc.technic_class_name");
        sql.append("                     ,sum(dsd.product_num) as product_class_num");
        sql.append("                     ,sum(" + productValueSql + ") as product_class_value");
        sql.append("                     ,sum(dsd.discount_value) as discount_class_value");
        sql.append("                 from");
        sql.append("                     data_sales ds");
        
        if(paramBean.getListCategoryId() != null && paramBean.getListCategoryId() != ""  && paramBean.getStaffId() != null){
                        sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                        sql.append( (paramBean.getStaffId() != null ? "and dsmt.staff_id = '" + paramBean.getStaffId().toString() + "'\n" : ""));
                        //IVS_LVTu start add 2015/07/02 Bug #38967
                        sql.append(" and dsmt.shop_category_id in (" +paramBean.getListCategoryId()+")");
                        //IVS_LVTu end add 2015/07/02 Bug #38967
        }
        //IVS_LVTu end edit 2015/08/28 Bug #42388
        sql.append("                         inner join view_data_sales_detail_valid dsd");
        sql.append("                                 on dsd.shop_id = ds.shop_id");
        sql.append("                                and dsd.slip_no = ds.slip_no");
        //nhanvt start add 20150312 New request #35502
        sql.append("                and dsd.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
        //nhanvt end add 20150312 New request #35502
        if(paramBean.getListCategoryId() == null || paramBean.getListCategoryId() == ""){
            if (paramBean.getStaffId() != null) {
                if (paramBean.getStaffType() == ReportParameterBean.STAFF_TYPE_MAIN) {
                    sql.append("                        and dsd.staff_id = '" + paramBean.getStaffId().toString() + "'");
                } else {
                    sql.append("                        and dsd.detail_staff_id = '" + paramBean.getStaffId().toString() + "'");
                }
            }
        }
        sql.append("                                 and dsd.product_division = " + productDivision);
        sql.append("                         inner join mst_technic mt");
        sql.append("                                 on mt.technic_id = dsd.product_id");
        sql.append("                         inner join mst_technic_class mtc");
        sql.append("                                 on mtc.technic_class_id = mt.technic_class_id");
        sql.append("                 where");
        sql.append("                         ds.delete_date is null");
        sql.append("                     and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and ds.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
        //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append(" and mtc.shop_category_id in (\n"+paramBean.getListCategoryId()+")");
        }
        //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        sql.append("                 group by");
        sql.append("                      mtc.display_seq");
        sql.append("                     ,mtc.technic_class_id");
        sql.append("                     ,mtc.technic_class_name");
        sql.append("             ) mtc");
        sql.append("             on mtc.technic_class_id = mt.technic_class_id");
        sql.append(" where");
        sql.append("         ds.delete_date is null");
        sql.append("     and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     and ds.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'");
        
        sql.append(" group by");
        sql.append("      mtc.display_seq");
        sql.append("     ,mtc.technic_class_id");
        sql.append("     ,mtc.technic_class_name");
        sql.append("     ,mt.display_seq");
        sql.append("     ,mt.technic_id");
        sql.append("     ,mt.technic_name");
        sql.append("     ,coalesce(mup.price, mt.price)");
        sql.append("     ,mtc.product_class_num");
        sql.append("     ,mtc.product_class_value");
        sql.append(" order by");
        sql.append("      mtc.display_seq");
        sql.append("     ,mt.display_seq");
        ResultSetWrapper rs = null;
        try {
         rs = cw.executeQuery(sql.toString());
        }catch (SQLException e) {
            e.printStackTrace();
        }
        BusinessReportBean businessBean = null;

        NumberFormat nf = NumberFormat.getInstance();
        DecimalFormat df = new DecimalFormat("###.0");

        while (rs.next()) {
            businessBean = new BusinessReportBean();
            businessBean.setProductClassId(rs.getInt("technic_class_id"));
            businessBean.setProductClassName(rs.getString("technic_class_name"));
            businessBean.setProductName(rs.getString("technic_name"));
            //GEOBECK start edti 20160824 #54164 getIntをgetLongに
            businessBean.setPrice(rs.getLong("price"));
            businessBean.setTotalPrice(rs.getLong("product_value"));
            businessBean.setClassTotalPrice(rs.getLong("product_class_value"));
            businessBean.setSalesCount(rs.getLong("product_num"));
            businessBean.setDiscountPrice(rs.getLong("discount_value"));
            //GEOBECK end edti 20160824 #54164
            businessBean.setClassRate(rs.getDouble("product_num") / rs.getDouble("product_class_num") * 100d);
            businessBean.setClassSalesCount(nf.format(rs.getInt("product_class_num")));
            technicList.add(businessBean);
            totalSalesCount += businessBean.getSalesCount();
        }


        // 再構築
        String nowClassName = "";
        BusinessReportBean tmpBean = null;

        for (int i = 0; i <= technicList.size() - 1; i++) {
            tmpBean = technicList.get(i);
            tmpBean.setTotalRate((Double.valueOf(tmpBean.getSalesCount()) / (Double.valueOf(totalSalesCount))) * 100);

            if (nowClassName.equals(tmpBean.getProductClassName())) {
//				technicList.get(i).setProductClassName("");
            } else {
                nowClassName = technicList.get(i).getProductClassName();
            }
            if (i + 1 < technicList.size()) {
                if (tmpBean.getProductClassId() != technicList.get(i + 1).getProductClassId()) {
                    tmpBean.setClassTotalRate(df.format((Double.valueOf(tmpBean.getClassSalesCount().replaceAll(",", "")) / (Double.valueOf(totalSalesCount))) * 100));
                } else {
                    tmpBean.setClassTotalRate("");
                    tmpBean.setClassSalesCount("");
                    tmpBean.setClassTotalPrice(0);
                }
            } else {
                tmpBean.setClassTotalRate(df.format((Double.valueOf(tmpBean.getClassSalesCount().replaceAll(",", "")) / (Double.valueOf(totalSalesCount))) * 100));
            }
        }

        return technicList;
    }

    /**
     * 売上集計(日次、月次)出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean viewSalesReport(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();
        HashMap<String, String> paramMap = new HashMap<String, String>();

        HashMap<String, String> shopInfo = this.getShopInfo(paramBean.getShopIDList());
        Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
        paramBean.setTaxRate(tax_rate);

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            paramMap.put("TaxType", "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            paramMap.put("TaxType", "税込");
        }

        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");

        if (paramBean.getStaffId() == null || "".equals(paramBean.getStaffId())) {
            paramMap.put("TargetName", paramBean.getTargetName());
        } else {
            paramMap.put("TargetName", this.getStaffName(paramBean));
        }

        int dateLength = 10;
        String dateFormat = "yyyy/mm/dd";
        String startDate = String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetStartDateObj());
        String endDate = String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetEndDateObj());

        if (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_DAY) {
            dateFormat = "%1$tY/%1$tm/%1$td";
        } else if (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_MONTH) {
            dateFormat = "%1$tY/%1$tm";
        }

        boolean isDailyReport = (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_DAY);
        Calendar calStart = Calendar.getInstance();
        calStart.setTime(paramBean.getTargetStartDateObj());
        if (!isDailyReport) {
            if (calStart.get(Calendar.DAY_OF_MONTH) > paramBean.getCutoffDay()) {
                calStart.add(Calendar.MONTH, 1);
            }
        }

        paramMap.put("TargetStartDate", String.format(dateFormat, calStart.getTime()));
        paramMap.put("TargetEndDate", String.format(dateFormat, paramBean.getTargetEndDateObj()));

        //----------------------------
        // 営業日数取得
        //----------------------------
        String mainQuery = "";
        mainQuery += " select";
        mainQuery += "     count(distinct sales_date) as date_count";
        mainQuery += " from";
        mainQuery += " (";
        mainQuery += "     select";
        mainQuery += "         sales_date";
        mainQuery += "     from";
        mainQuery += "         view_data_sales_detail_valid";
        mainQuery += "     where";
        mainQuery += "             shop_id in (" + paramBean.getShopIDList() + ")";
        mainQuery += "         and sales_date between '" + startDate + "' and '" + endDate + "'";
        if (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")) {
            mainQuery += "     and staff_id = " + paramBean.getStaffId();
        }
        mainQuery += "     union all";
        mainQuery += "     select";
        mainQuery += "         manage_date";
        mainQuery += "     from";
        mainQuery += "         data_register dr";
        mainQuery += "     where";
        mainQuery += "             delete_date is null";
        mainQuery += "         and shop_id in (" + paramBean.getShopIDList() + ")";
        mainQuery += "         and manage_date between '" + startDate + "' and '" + endDate + "'";
        mainQuery += "         and not exists";
        mainQuery += "             (";
        mainQuery += "                 select 1";
        mainQuery += "                 from";
        mainQuery += "                     data_sales";
        mainQuery += "                 where";
        mainQuery += "                         delete_date is null";
        mainQuery += "                     and shop_id = dr.shop_id";
        mainQuery += "                     and sales_date = dr.manage_date";
        mainQuery += "             )";
        mainQuery += " ) t";

        if (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_DAY) {
            int dayCount = 0;
            ResultSetWrapper rs = cw.executeQuery(mainQuery);
            if (rs.next()) {
                dayCount = rs.getInt("date_count");
            }
            paramMap.put("TargetDayCount", String.valueOf(dayCount));
        }


        //----------------------------
        // 営業日数取得（昨年）
        //----------------------------
        mainQuery = "";
        mainQuery += " select";
        mainQuery += "     count(distinct sales_date) as date_count";
        mainQuery += " from";
        mainQuery += " (";
        mainQuery += "     select";
        mainQuery += "         sales_date";
        mainQuery += "     from";
        mainQuery += "         view_data_sales_detail_valid";
        mainQuery += "     where";
        mainQuery += "             shop_id in (" + paramBean.getShopIDList() + ")";
        mainQuery += "         and sales_date between '" + startDate + "'::timestamp + '-1 year' and '" + endDate + "'::timestamp + '-1 year'";
        if (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")) {
            mainQuery += "     and staff_id = " + paramBean.getStaffId();
        }
        mainQuery += "     union all";
        mainQuery += "     select";
        mainQuery += "         manage_date";
        mainQuery += "     from";
        mainQuery += "         data_register dr";
        mainQuery += "     where";
        mainQuery += "             delete_date is null";
        mainQuery += "         and shop_id in (" + paramBean.getShopIDList() + ")";
        mainQuery += "         and manage_date between '" + startDate + "'::timestamp + '-1 year' and '" + endDate + "'::timestamp + '-1 year'";
        mainQuery += "         and not exists";
        mainQuery += "             (";
        mainQuery += "                 select 1";
        mainQuery += "                 from";
        mainQuery += "                     data_sales";
        mainQuery += "                 where";
        mainQuery += "                         delete_date is null";
        mainQuery += "                     and shop_id = dr.shop_id";
        mainQuery += "                     and sales_date = dr.manage_date";
        mainQuery += "             )";
        mainQuery += " ) t";

        if (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_DAY) {
            int dayCount = 0;
            ResultSetWrapper rs = cw.executeQuery(mainQuery);
            if (rs.next()) {
                dayCount = rs.getInt("date_count");
            }
            paramMap.put("TargetDayCount_Last_Year", String.valueOf(dayCount));
        }


        ArrayList<SalesReportBean> list = new ArrayList<SalesReportBean>();

        String valueString = "";
        //IVS_TMTrong start edit 2015/08/12 Bug #41945
        String valueString2 ="";
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            valueString = "discount_detail_value_no_tax";
            valueString2 = "  ceil(sum(dcd.product_num*dc.product_value/dc.product_num) / (1.0 + get_tax_rate(view_data_sales_detail_valid.sales_date))) ";
        } else {
            // 税込み
            valueString = "discount_detail_value_in_tax";
            valueString2=" sum(dcd.product_num*dc.product_value/dc.product_num) ";
        }
        //IVS_TMTrong end edit 2015/08/12 Bug #41945
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      t.*");
        sql.append("     ,coalesce(t.sales_date, last_year.sales_date) as sales_date_with_last_year");
        sql.append("     ,last_year.tech_value_in_crame as last_year_tech_value_in_crame");
        sql.append("     ,last_year.item_value_in_crame as last_year_item_value_in_crame");
        sql.append("     ,last_year.discount_value as last_year_discount_value");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append("     ,(t.total_value + t.contract_value) as  total_value2");
        }
        sql.append(" from (");
        sql.append(" select");
        sql.append("      sales_date");
        sql.append("     ,sum(total_num) as total_num");
        sql.append("     ,sum(total_value) as total_value");
        sql.append("     ,sum(member_num) as member_num");
        sql.append("     ,sum(member_value) as member_value");
        sql.append("     ,sum(new_num) as new_num");
        sql.append("     ,sum(not_member_num) as not_member_num");
        sql.append("     ,sum(new_value) as new_value");
        sql.append("     ,sum(not_member_value) as not_member_value");
        sql.append("     ,sum(tech_value) as tech_value");
        sql.append("     ,sum(tech_value_in_crame) as tech_value_in_crame");
        sql.append("     ,sum(charge_all_tech_value) as charge_all_tech_value");
        sql.append("     ,sum(charge_tech_value) as charge_tech_value");
        sql.append("     ,sum(menu_charge_all_tech_value) as menu_charge_all_tech_value");
        sql.append("     ,sum(menu_charge_tech_value) as menu_charge_tech_value");
        sql.append("     ,sum(item_value) as item_value");
        sql.append("     ,sum(item_value_in_crame) as item_value_in_crame");
        sql.append("     ,sum(charge_all_item_value) as charge_all_item_value");
        sql.append("     ,sum(charge_item_value) as charge_item_value");
        sql.append("     ,sum(menu_charge_all_item_value) as menu_charge_all_item_value");
        sql.append("     ,sum(menu_charge_item_value) as menu_charge_item_value");
        
        //IVS_TTMLoan start edit 2014/07/28 Mashu_売上推移表
        if (paramBean.getCategoryIDList().equals("")) {
            sql.append("     ,sum(discount_value) as discount_value");
        }else{
            sql.append("     ,0 as discount_value");
        }
        //IVS_TTMLoan end edit 2014/07/28 Mashu_売上推移表
        
        sql.append("     ,sum(tech_item_num) as tech_item_num");
        sql.append("     ,sum(item_only_num) as item_only_num");
        //nhanvt khtn
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append("     ,Coalesce(( ");
            sql.append("     		SELECT ");
            sql.append("     			   SUM (c) AS total_contract_value ");
            sql.append("     		FROM ");
            sql.append("     		  (SELECT ds.product_id, ");
            sql.append("     			  count(ds.product_id) AS total_contract_num, ");

            sql.append("     						  (cast(SUM(ds.product_value) as double precision)/cast((1.0 + get_tax_rate(max(ds.sales_date)))as double precision)) as c ");

            sql.append("     		   FROM ");
            sql.append("     		     (SELECT DISTINCT ds.* ");
            sql.append("     		      FROM view_data_sales_detail_valid ds ");
            sql.append("     		      INNER JOIN data_contract dc ON ds.shop_id = dc.shop_id ");
            sql.append("     		      AND ds.slip_no = dc.slip_no ");
            sql.append("     		      AND ds.product_id = dc.product_id ");
            sql.append("     		      WHERE  ds.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("     			AND ds.sales_date = t.sales_date ");
            sql.append("     			AND ds.product_division = 5) ds ");
            sql.append("     		   GROUP BY ds.product_id, ");
            sql.append("     		   ds.sales_date ");
            sql.append("     		   ORDER BY ds.sales_date ,ds.product_id ");
            sql.append("     		   ) a ");

            sql.append("            ),0) as contract_value ");
        }
        //IVS_LVTu start add 2015/07/09 Bug #39505
        if(paramBean.isCourseFlag() == true) {
            sql.append("     , SUM ( course_num ) AS course_num ");
            //IVS_Ptthu start edit 20160620 New request #51865
            sql.append("     , SUM ( course_value ) AS course_value ");
            sql.append("      ,SUM(course_num_new) AS course_num_new ");
            sql.append("      ,SUM (course_value_new) AS course_value_new ");
            sql.append("     , SUM ( course_digestion_num ) AS course_digestion_num ");
            sql.append("     , SUM ( course_digestion_value ) AS course_digestion_value ");
        }
        //IVS_LVTu start add 2015/07/09 Bug #39505
        sql.append(" from");
        sql.append(" (");

        sql.append(" select");

        if (isDailyReport) {
            sql.append("  date_trunc('day', ds.sales_date) as sales_date");
        } else {
            sql.append("  date_trunc('month', case when date_part('day', ds.sales_date) > " + paramBean.getCutoffDay() + " then ds.sales_date + '1 months' else ds.sales_date end) as sales_date");
        }

        if (paramBean.getStaffId() != null) {
            sql.append(" ,count(case when ds.staff_id = " + paramBean.getStaffId().toString() + " then dsd.slip_no else null end) as total_num");
            sql.append(" ,sum(case when ds.staff_id = " + paramBean.getStaffId().toString() + " then dsd.detail_value else 0 end) as total_value");
            sql.append(" ,count(case when dsd.tech_flg > 0 and mc.customer_no <> '0' and ds.staff_id = " + paramBean.getStaffId().toString() + " then dsd.slip_no else null end) as member_num");
            sql.append(" ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and ds.staff_id = " + paramBean.getStaffId().toString() + ") then dsd.tech_value_in_crame else 0 end) as member_value");
            sql.append(" ,count(case when dsd.tech_flg > 0 and mc.customer_no <> '0' and ");
            
            //IVS_TTMLoan start edit 2014/08/22 Mashu_売上推移表
            if (paramBean.getCategoryIDList().equals("")) {
                sql.append(" get_visit_count(ds.customer_id ,ds.shop_id ,ds.sales_date)"); 
            }else{
                sql.append(" get_visit_count_with_category(ds.customer_id ,ds.shop_id ,ds.sales_date , '{" + paramBean.getCategoryIDList()+"}')"); 
            }
            //IVS_TTMLoan end edit 2014/08/22 Mashu_売上推移表
            
            sql.append(" = 1 and ds.staff_id = " + paramBean.getStaffId().toString() + " then dsd.slip_no else null end) as new_num");
            sql.append(" ,count(case when dsd.tech_flg > 0 and mc.customer_no = '0' and ds.staff_id = " + paramBean.getStaffId().toString() + " then dsd.slip_no else null end) as not_member_num");

        } else {
            ////IVS_TTMLoan start edit 2014/08/22 Mashu_売上推移表
            //IVS_LVTu start edit 2015/05/29 Bug #37073
            //sql.append(" ,count(DISTINCT dsd.slip_no) as total_num");
            //IVS_LVTu start edit 2015/08/17 Bug #41945
            //sql.append(" ,count( dsd.slip_no) as total_num");
            sql.append(" ,count(DISTINCT ( to_char(dsd.shop_id,'99999999') || to_char(dsd.slip_no,'99999999') )) as total_num");
            //IVS_LVTu end edit 2015/05/29 Bug #37073
            //IVS_TTMLoan end edit 2014/08/22 Mashu_売上推移表
            sql.append(" ,sum(dsd.detail_value) as total_value");
            sql.append(" ,count(case when dsd.tech_flg > 0 and mc.customer_no <> '0' then dsd.slip_no else null end) as member_num");
            sql.append(" ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0') then dsd.tech_value_in_crame else 0 end) as member_value");
            sql.append(" ,count(case when dsd.tech_flg > 0 and mc.customer_no <> '0' and ");
            
            //IVS_TTMLoan start edit 2014/08/22 Mashu_売上推移表
            if (paramBean.getCategoryIDList().equals("")) {
                sql.append(" get_visit_count(ds.customer_id ,ds.shop_id ,ds.sales_date)"); 
            }else{
                sql.append(" get_visit_count_with_category(ds.customer_id ,ds.shop_id ,ds.sales_date ,'{" + paramBean.getCategoryIDList()+ "}')"); 
            }
            //IVS_TTMLoan end edit 2014/08/22 Mashu_売上推移表
                    
            sql.append(" = 1 then dsd.slip_no else null end) as new_num");
            sql.append(" ,count(case when dsd.tech_flg > 0 and mc.customer_no = '0' then dsd.slip_no else null end) as not_member_num");
        }

        sql.append("     ,sum(case when dsd.tech_flg > 0 and mc.customer_no <> '0' and ");
        
        //IVS_TTMLoan start edit 2014/08/22 Mashu_売上推移表
        if (paramBean.getCategoryIDList().equals("")) {
            sql.append(" get_visit_count(ds.customer_id ,ds.shop_id ,ds.sales_date)"); 
        }else{
            sql.append(" get_visit_count_with_category(ds.customer_id ,ds.shop_id ,ds.sales_date ,'{" +paramBean.getCategoryIDList()+ "}')"); 
        }
        //IVS_TTMLoan end edit 2014/08/22 Mashu_売上推移表
                
        sql.append(" = 1 then dsd.tech_value else 0 end) as new_value");
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no = '0') then dsd.tech_value_in_crame else 0 end) as not_member_value");
        sql.append("     ,sum(dsd.tech_value) as tech_value");
        sql.append("     ,sum(dsd.tech_value_in_crame) as tech_value_in_crame");

        sql.append("     ,sum(dsd.charge_all_tech_value) as charge_all_tech_value");
        sql.append("     ,sum(dsd.charge_tech_value) as charge_tech_value");
        sql.append("     ,sum(dsd.menu_charge_all_tech_value) as menu_charge_all_tech_value");
        sql.append("     ,sum(dsd.menu_charge_tech_value) as menu_charge_tech_value");

        sql.append("     ,sum(dsd.item_value) as item_value");
        sql.append("     ,sum(dsd.item_value_in_crame) as item_value_in_crame");

        sql.append("     ,sum(dsd.charge_all_item_value) as charge_all_item_value");
        sql.append("     ,sum(dsd.charge_item_value) as charge_item_value");
        sql.append("     ,sum(dsd.menu_charge_all_item_value) as menu_charge_all_item_value");
        sql.append("     ,sum(dsd.menu_charge_item_value) as menu_charge_item_value");

        // 全体割引
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            sql.append(" ,sum(ds.discount_value_no_tax) as discount_value");
        } else {
            // 税込み
            sql.append(" ,sum(ds.discount_value) as discount_value");
        }
        
        //IVS_TTMLoan start edit 2014/08/27 Mashu_売上推移表
        if (paramBean.getCategoryIDList().equals("")) {
            // 商品購入者
            sql.append("     ,sum (case when (dsd.tech_num + dsd.tech_crame_num > 0 and dsd.item_num + dsd.item_crame_num > 0 ) then 1 else 0 end) as tech_item_num");						
            // 商品のみ客
            sql.append("     ,sum (case when (dsd.item_num + dsd.item_crame_num > 0 and dsd.tech_num + dsd.tech_crame_num = 0 ) then 1 else 0 end) as item_only_num");
        }else{
            // 商品購入者
            sql.append("     ,sum (case when (dsd1.tech_num + dsd1.tech_crame_num > 0 and dsd1.item_num + dsd1.item_crame_num > 0 ) then 1 else 0 end) as tech_item_num");						
            // 商品のみ客
            sql.append("     ,sum (case when (dsd1.item_num + dsd1.item_crame_num > 0 and dsd1.tech_num + dsd1.tech_crame_num = 0 ) then 1 else 0 end) as item_only_num");
        }
        //IVS_TTMLoan end edit 2014/08/27 Mashu_売上推移表

        //IVS_LVTu start add 2015/07/09 Bug #39505
        if(paramBean.isCourseFlag() == true) {
            if (paramBean.getCategoryIDList().equals("")) {
                //sql.append("     , SUM ( dsd.course_num ) AS course_num ");
                sql.append("     ,SUM (CASE WHEN dsd.course_num > 1 THEN 1 ELSE dsd.course_num END ) AS course_num ");
                sql.append("     , SUM ( dsd.course_value ) AS course_value ");
                sql.append("     , SUM (CASE WHEN dsd.course_num_new > 1 THEN 1 ELSE dsd.course_num_new END) AS course_num_new ");
                sql.append("     , SUM (dsd.course_value_new) AS course_value_new ");
                //sql.append("     , SUM ( dsd.course_digestion_num ) AS course_digestion_num ");
                sql.append("     ,SUM (CASE WHEN dsd.course_digestion_num > 1 THEN 1 ELSE dsd.course_digestion_num END ) AS course_digestion_num ");
                sql.append("     , SUM ( dsd.course_digestion_value ) AS course_digestion_value ");
            }else {
                //sql.append("     , SUM ( dsd1.course_num ) AS course_num ");
                sql.append("     , SUM ( CASE WHEN dsd1.course_num > 1 THEN 1 ELSE dsd1.course_num END) AS course_num ");
                sql.append("     , SUM ( dsd.course_value ) AS course_value ");
                sql.append("     , SUM (CASE WHEN dsd1.course_num_new > 1 THEN 1 ELSE dsd1.course_num_new END) AS course_num_new ");
                sql.append("     , SUM (dsd.course_value_new) AS course_value_new ");
                //sql.append("     , SUM ( dsd1.course_digestion_num ) AS course_digestion_num ");
                sql.append("     ,SUM (CASE WHEN dsd1.course_digestion_num > 1 THEN 1 ELSE dsd1.course_digestion_num END ) AS course_digestion_num ");
                sql.append("     , SUM ( dsd.course_digestion_value ) AS course_digestion_value ");
            }
        }
        //IVS_LVTu start add 2015/07/09 Bug #39505
        sql.append(" from");
        sql.append("     view_data_sales_valid ds");
        sql.append("         inner join");
        sql.append("             (");
        
        //IVS_TTMLoan start add 2014/08/27 Mashu_売上推移表
        if (!paramBean.getCategoryIDList().equals("")) {        
            sql.append(" select dsd.shop_id, dsd.slip_no");
            sql.append(" , dsd.shop_category_id");
            sql.append(" , sum(dsd.detail_value) as detail_value");
            sql.append(" , sum(dsd.tech_value) as tech_value");
            sql.append(" , sum(dsd.tech_value_in_crame) as tech_value_in_crame");
            sql.append(" , sum(dsd.item_value) as item_value");
            sql.append(" , sum(dsd.item_value_in_crame) as item_value_in_crame");
            sql.append(" , sum(dsd.charge_all_tech_value) as charge_all_tech_value");
            sql.append(" , sum(dsd.charge_tech_value) as charge_tech_value");
            sql.append(" , sum(dsd.menu_charge_all_tech_value) as menu_charge_all_tech_value");
            sql.append(" , sum(dsd.menu_charge_tech_value) as menu_charge_tech_value");
            sql.append(" , sum(dsd.charge_all_item_value) as charge_all_item_value");
            sql.append(" , sum(dsd.charge_item_value) as charge_item_value");
            sql.append(" , sum(dsd.menu_charge_all_item_value) as menu_charge_all_item_value");
            sql.append(" , sum(dsd.menu_charge_item_value) as menu_charge_item_value");
            sql.append(" , sum(dsd.tech_flg) as tech_flg");
            sql.append(" , sum(dsd.tech_num) as tech_num");
            sql.append(" , sum(dsd.tech_crame_num) as tech_crame_num");
            sql.append(" , sum(dsd.item_num) as item_num");
            sql.append(" , sum(dsd.item_crame_num) as item_crame_num");
            //IVS_LVTu start add 2015/07/09 Bug #39505
            if(paramBean.isCourseFlag() == true) {
                sql.append("     , SUM ( dsd.course_num ) AS course_num ");
                sql.append("     , SUM ( dsd.course_value ) AS course_value ");
                sql.append("     , SUM ( dsd.course_num_new ) AS course_num_new ");
                sql.append("     , SUM ( dsd.course_value_new ) AS course_value_new ");
                sql.append("     , SUM ( dsd.course_digestion_num ) AS course_digestion_num ");
                sql.append("     , SUM ( dsd.course_digestion_value ) AS course_digestion_value ");
            }
            //IVS_LVTu start add 2015/07/09 Bug #39505
            sql.append("  from (");
        }
        //IVS_TTMLoan end add 2014/08/27 Mashu_売上推移表

        sql.append("                 select");
        sql.append("                      shop_id");
        sql.append("                     ,slip_no");
        //IVS_TTMLoan start add 2014/08/22 Mashu_売上推移表
        if (!paramBean.getCategoryIDList().equals("")) {
            sql.append("                     ,shop_category_id");
        }
        //IVS_TTMLoan end add 2014/08/22 Mashu_売上推移表
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append("                     ,sum(case when product_division IN(1,2,3,4) then " + valueString + " else 0 end) as detail_value");
        }else{
        sql.append("                     ,sum(case when product_division IN(1,2,3,4,5) then " + valueString + " else 0 end) as detail_value");
        }

        if (paramBean.getStaffId() != null) {

            sql.append("                 ,sum(case when product_division IN(1) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as tech_value");
            sql.append("                 ,sum(case when product_division IN(1,3) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as tech_value_in_crame");

            sql.append("                 ,sum(case when product_division IN(2) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as item_value");
            sql.append("                 ,sum(case when product_division IN(2,4) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as item_value_in_crame");

            sql.append("                 ,sum(case when product_division IN(1) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as charge_all_tech_value");
            sql.append("                 ,sum(case when product_division IN(1,3) and staff_id = " + paramBean.getStaffId().toString() + " and designated_flag = true then " + valueString + " else 0 end) as charge_tech_value");

            sql.append("                 ,sum(case when product_division IN(1) and detail_staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as menu_charge_all_tech_value");
            sql.append("                 ,sum(case when product_division IN(1,3) and detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = true then " + valueString + " else 0 end) as menu_charge_tech_value");

            sql.append("                 ,sum(case when product_division IN(2) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as charge_all_item_value");

            sql.append("                 ,sum(case when product_division IN(2) and (");
            sql.append("                                                                (staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = false)");
            sql.append("                                                             or (detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = true)");
            sql.append("                                                           )");
            sql.append("                        then " + valueString + " else 0 end) as charge_item_value");

            sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as menu_charge_all_item_value");
            sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_staff_id = staff_id then " + valueString + " else 0 end) as menu_charge_item_value");
            
            //IVS_LVTu start add 2015/07/09 Bug #39505
            if(paramBean.isCourseFlag() == true) {
                sql.append("                 ,sum(case when product_division IN(5) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as course_value");
                //IVS_NHTVINH start update 2016/07/08 Bug #52584
                sql.append("                 ,sum(case when product_division IN(5) and staff_id = " + paramBean.getStaffId().toString() + " and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                sql.append("                 inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                sql.append("                 where ds.delete_date is null\n");
                sql.append("                 and dsd.delete_date is null\n");
                sql.append("                 and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                sql.append("                 and dsd.product_division = 5 \n");
                //IVS_NHTVINH start update 2016/07/08 Bug #52584
                sql.append("                 and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                //IVS_NHTVINH start update 2016/07/08 Bug #52584
                sql.append("                 and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                sql.append("                 and (ds.sales_date <= '" + endDate + "' )\n");
                sql.append("                 ) then " + valueString + " else 0 end) as course_value_new");
                //IVS_TMTrong start edit 2015/08/12 Bug #41945
                //sql.append("                 ,sum(case when product_division IN(6) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as course_digestion_value");                
                sql.append("                 ,sum(CASE ");
                sql.append("                 				WHEN product_division IN (6) ");	
                sql.append("                                            AND staff_id = " + paramBean.getStaffId().toString() +"");
                sql.append("                 					THEN ");
                sql.append("                 					( ");
                //sql.append("                                                            select sum( "+ valueString + " * dcd.product_num)::integer ");
                sql.append("                                                            select "+valueString2);
                sql.append("                                                            from data_contract_digestion dcd ");
                sql.append("                                                            inner join data_contract dc on dc.shop_id = dcd.contract_shop_id and dc.contract_no= dcd.contract_no and dc.contract_detail_no = dcd.contract_detail_no ");
                sql.append("                                                            and view_data_sales_detail_valid.product_id = dc.product_id ");
                sql.append("                                                            where dcd.shop_id = view_data_sales_detail_valid.shop_id and dcd.slip_no = view_data_sales_detail_valid.slip_no)  "); 
                sql.append("                                                    ELSE 0 ");
                sql.append("				END) AS course_digestion_value ");
                //IVS_TMTrong end edit 2015/08/12 Bug #41945
            }
            //IVS_LVTu end add 2015/07/09 Bug #39505
        } else {

            sql.append("                 ,sum(case when product_division IN(1) then " + valueString + " else 0 end) as tech_value");
            sql.append("                 ,sum(case when product_division IN(1,3) then " + valueString + " else 0 end) as tech_value_in_crame");

            sql.append("                 ,sum(case when product_division IN(2) then " + valueString + " else 0 end) as item_value");
            sql.append("                 ,sum(case when product_division IN(2,4) then " + valueString + " else 0 end) as item_value_in_crame");

            sql.append("                 ,sum(case when product_division IN(1) and staff_id is not null then " + valueString + " else 0 end) as charge_all_tech_value");
            sql.append("                 ,sum(case when product_division IN(1,3) and staff_id is not null and designated_flag = true then " + valueString + " else 0 end) as charge_tech_value");

            sql.append("                 ,sum(case when product_division IN(1) and detail_staff_id is not null then " + valueString + " else 0 end) as menu_charge_all_tech_value");
            sql.append("                 ,sum(case when product_division IN(1,3) and detail_staff_id is not null and detail_designated_flag = true then " + valueString + " else 0 end) as menu_charge_tech_value");

            sql.append("                 ,sum(case when product_division IN(2) and staff_id is not null then " + valueString + " else 0 end) as charge_all_item_value");

            sql.append("                 ,sum(case when product_division IN(2) and (");
            sql.append("                                                                (staff_id is not null and detail_designated_flag = false)");
            sql.append("                                                             or (detail_staff_id is not null and detail_designated_flag = true)");
            sql.append("                                                           )");
            sql.append("                        then " + valueString + " else 0 end) as charge_item_value");

             sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id is not null then " + valueString + " else 0 end) as menu_charge_all_item_value");
            sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id is not null and detail_staff_id = staff_id then " + valueString + " else 0 end) as menu_charge_item_value");
            //IVS_LVTu start add 2015/07/09 Bug #39505
            if(paramBean.isCourseFlag() == true) {
                sql.append("                 ,sum(case when product_division IN(5) then " + valueString + " else 0 end) as course_value");
                //IVS_NHTVINH start update 2016/07/08 Bug #52584
                sql.append("                 ,sum(case when product_division IN(5)  and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                sql.append("                 inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                sql.append("                 where ds.delete_date is null\n");
                sql.append("                 and dsd.delete_date is null\n");
                sql.append("                 and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                sql.append("                 and dsd.product_division = 5 \n");
                //IVS_NHTVINH start update 2016/07/08 Bug #52584
                sql.append("                 and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                //IVS_NHTVINH start update 2016/07/08 Bug #52584
                sql.append("                 and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                sql.append("                 and (ds.sales_date <= '" + endDate + "' )\n");
                sql.append("                 ) then " + valueString + " else 0 end) as course_value_new");
                 //IVS_TMTrong start edit 2015/08/12 Bug #41945
                // ,sum(case when product_division IN(6) then " + valueString + " else 0 end) as course_digestion_value");
                sql.append("                 ,sum(CASE ");
                sql.append("                 				WHEN product_division IN (6) ");
                sql.append("                 					THEN ");
                sql.append("                 					( ");
                //sql.append("                                                            select sum( "+ valueString + " * dcd.product_num)::integer ");
                sql.append("                                                            select "+valueString2);
                sql.append("                                                            from data_contract_digestion dcd ");
                sql.append("                                                            inner join data_contract dc on dc.shop_id = dcd.contract_shop_id and dc.contract_no= dcd.contract_no and dc.contract_detail_no = dcd.contract_detail_no ");
                sql.append("                                                            and view_data_sales_detail_valid.product_id = dc.product_id ");
                sql.append("                                                            where dcd.shop_id = view_data_sales_detail_valid.shop_id and dcd.slip_no = view_data_sales_detail_valid.slip_no)  "); 
                sql.append("                                                    ELSE 0 ");
                sql.append("				END) AS course_digestion_value ");
                //IVS_TMTrong end edit 2015/08/12 Bug #41945
            }
            //IVS_LVTu end add 2015/07/09 Bug #39505
        }

        sql.append("                     ,sum(case when product_division IN(1,3) then 1 else 0 end) as tech_flg");

        sql.append("                     ,sum(case when product_division = 1 then 1 else 0 end) as tech_num");
        sql.append("                     ,sum(case when product_division = 3 then 1 else 0 end) as tech_crame_num");
        sql.append("                     ,sum(case when product_division = 2 then 1 else 0 end) as item_num");
        sql.append("                     ,sum(case when product_division = 4 then 1 else 0 end) as item_crame_num");
        
        //IVS_LVTu start add 2015/07/09 Bug #39505
        if(paramBean.isCourseFlag() == true) {
            if (paramBean.getStaffId() != null) {
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_num");
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + "  and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                sql.append("                      where ds.delete_date is null\n");
                sql.append("                      and dsd.delete_date is null\n");
                sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                sql.append("                      and dsd.product_division = 5 \n");
                sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                sql.append("                      ) then 1 else 0 end) as course_num_new");
                sql.append("                     ,sum(case when product_division = 6  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_digestion_num");
            }else {
            sql.append("                     ,sum(case when product_division = 5 then 1 else 0 end) as course_num");
            sql.append("                     ,sum(case when product_division = 5 and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                sql.append("                      where ds.delete_date is null\n");
                sql.append("                      and dsd.delete_date is null\n");
                sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                sql.append("                      and dsd.product_division = 5 \n");
                sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                sql.append("                      )then 1 else 0 end) as course_num_new");
             //IVS_TMTrong start edit 2015/08/12 Bug #41945
            sql.append("                     ,sum(case when product_division = 6 then 1 else 0 end) as course_digestion_num");
            }
            /*sql.append(" ,sum(CASE ");
            sql.append("				WHEN product_division = 6 ");
            sql.append("					THEN ");
            sql.append("					( ");
            sql.append("						select sum ( dcd.product_num)::integer ");
            sql.append("						from data_contract_digestion dcd ");
            sql.append("						inner join data_contract dc on dc.shop_id = dcd.contract_shop_id and dc.contract_no= dcd.contract_no and dc.contract_detail_no = dcd.contract_detail_no ");
            sql.append("						and view_data_sales_detail_valid.product_id = dc.product_id ");
            sql.append("						where dcd.shop_id = view_data_sales_detail_valid.shop_id and dcd.slip_no = view_data_sales_detail_valid.slip_no ");
            sql.append("				) ");
            sql.append("				ELSE 0 ");
            sql.append("				END) AS course_digestion_num ");*/
            //IVS_TMTrong end edit 2015/08/12 Bug #41945
        }
        //IVS_LVTu end add 2015/07/09 Bug #39505
        sql.append("                 from");
        sql.append("                     view_data_sales_detail_valid");
        
        //IVS_TTMLoan start add 2014/07/28 Mashu_売上推移表
        if (!paramBean.getCategoryIDList().equals("")) {
            sql.append("                      LEFT OUTER JOIN( ");															
            sql.append("                 		mst_technic ");														
            sql.append("                 		INNER JOIN ");														
            sql.append("                 		mst_technic_class ");															
            sql.append("                 		ON  mst_technic_class.technic_class_id = mst_technic.technic_class_id ");																
            sql.append("                 		AND mst_technic_class.delete_date IS NULL) ");																
            sql.append("                 	    ON  mst_technic.technic_id = view_data_sales_detail_valid.product_id");																
            sql.append("                 		    AND view_data_sales_detail_valid.product_division IN (1,3) "); //edit 1 => (1,3)
        }
	//IVS_TTMLoan end add 2014/07/28 Mashu_売上推移表
        
        sql.append("                 where");
        sql.append("                         shop_id in (" + paramBean.getShopIDList() + ")");
        
        //IVS_TTMLoan start add 2014/07/28 Mashu_売上推移表
        if (!paramBean.getCategoryIDList().equals("")) {
            sql.append("                     AND (mst_technic_class.shop_category_id in ("+ paramBean.getCategoryIDList() +")) ");
        }
        //IVS_TTMLoan end add 2014/07/28 Mashu_売上推移表
        
        sql.append("                     and sales_date between '" + startDate + "' and '" + endDate + "'");
        if (paramBean.getStaffId() != null) {
            sql.append("                 and (");
            sql.append("                            staff_id = " + paramBean.getStaffId().toString());
            sql.append("                         or detail_staff_id = " + paramBean.getStaffId().toString());
            sql.append("                     )");
        }

            sql.append("                 group by");
            sql.append("                      shop_id");
            sql.append("                     ,slip_no");
            
            if (!paramBean.getCategoryIDList().equals("")) {
                sql.append("                     ,shop_category_id");
            }
            
          //IVS_TTMLoan start add 2014/07/28 Mashu_売上推移表
          if (!paramBean.getCategoryIDList().equals("")) {
                sql.append("             UNION ALL ");
                sql.append("                select	");																																			
                sql.append("                     shop_id");
                sql.append("                     ,slip_no ");
                
                if (!paramBean.getCategoryIDList().equals("")) {
                    sql.append("                     ,shop_category_id");
                }
                
                //sql.append("                     ,sum(" + valueString + ") as detail_value");
                if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                    sql.append("                     ,sum(case when product_division IN(1,2,3,4) then " + valueString + " else 0 end) as detail_value");
                } else {
                    sql.append("                     ,sum(case when product_division IN(1,2,3,4,5) then " + valueString + " else 0 end) as detail_value");
                }
              if (paramBean.getStaffId() != null) {
                sql.append("                 ,sum(case when product_division IN(1) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as tech_value_in_crame");

                sql.append("                 ,sum(case when product_division IN(2) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as item_value");
                sql.append("                 ,sum(case when product_division IN(2,4) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as item_value_in_crame");

                sql.append("                 ,sum(case when product_division IN(1) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as charge_all_tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) and staff_id = " + paramBean.getStaffId().toString() + " and designated_flag = true then " + valueString + " else 0 end) as charge_tech_value");

                sql.append("                 ,sum(case when product_division IN(1) and detail_staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as menu_charge_all_tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) and detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = true then " + valueString + " else 0 end) as menu_charge_tech_value");

                sql.append("                 ,sum(case when product_division IN(2) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as charge_all_item_value");

                sql.append("                 ,sum(case when product_division IN(2) and (");
                sql.append("                                                                (staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = false)");
                sql.append("                                                             or (detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = true)");
                sql.append("                                                           )");
                sql.append("                        then " + valueString + " else 0 end) as charge_item_value");

                sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as menu_charge_all_item_value");
                sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_staff_id = staff_id then " + valueString + " else 0 end) as menu_charge_item_value");
                //IVS_LVTu start add 2015/07/09 Bug #39505
                if(paramBean.isCourseFlag() == true) {
                    sql.append("                 ,sum(case when product_division IN(5) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as course_value");
                    //IVS_nhtvinh start add 2016/07/11 Bug #52584
                    sql.append("                 ,sum(case when product_division IN(5) and staff_id = " + paramBean.getStaffId().toString() + "  and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                    sql.append("                 inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                    sql.append("                 where ds.delete_date is null\n");
                    sql.append("                 and dsd.delete_date is null\n");
                    sql.append("                 and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                    sql.append("                 and dsd.product_division = 5 \n");
                    //IVS_nhtvinh start add 2016/07/11 Bug #52584
                    sql.append("                 and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                    sql.append("                 and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                    sql.append("                 and (ds.sales_date <= '" + endDate + "' )\n");
                    sql.append("                 ) then " + valueString + " else 0 end) as course_value_new");  
                    //IVS_TMTrong start edit 2015/08/12 Bug #41945
                    //sql.append("                 ,sum(case when product_division IN(6) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as course_digestion_value");
                    sql.append("                 ,sum(CASE ");
                    sql.append("                 				WHEN product_division IN (6) ");	
                    sql.append("                                                and staff_id = " + paramBean.getStaffId().toString());
                    sql.append("                 					THEN ");
                    sql.append("                 					( ");
                    //sql.append("                                                            select sum( "+ valueString + " * dcd.product_num)::integer ");
                    sql.append("                                                            select "+valueString2);
                    sql.append("                                                            from data_contract_digestion dcd ");
                    sql.append("                                                            inner join data_contract dc on dc.shop_id = dcd.contract_shop_id and dc.contract_no= dcd.contract_no and dc.contract_detail_no = dcd.contract_detail_no ");
                    sql.append("                                                            and view_data_sales_detail_valid.product_id = dc.product_id ");
                    sql.append("                                                            where dcd.shop_id = view_data_sales_detail_valid.shop_id and dcd.slip_no = view_data_sales_detail_valid.slip_no)  "); 
                    sql.append("                                                    ELSE 0 ");
                    sql.append("				END) AS course_digestion_value ");
                    //IVS_TMTrong end edit 2015/08/12 Bug #41945
                }
                //IVS_LVTu end add 2015/07/09 Bug #39505

            } else {

                sql.append("                 ,sum(case when product_division IN(1) then " + valueString + " else 0 end) as tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) then " + valueString + " else 0 end) as tech_value_in_crame");

                sql.append("                 ,sum(case when product_division IN(2) then " + valueString + " else 0 end) as item_value");
                sql.append("                 ,sum(case when product_division IN(2,4) then " + valueString + " else 0 end) as item_value_in_crame");

                sql.append("                 ,sum(case when product_division IN(1) and staff_id is not null then " + valueString + " else 0 end) as charge_all_tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) and staff_id is not null and designated_flag = true then " + valueString + " else 0 end) as charge_tech_value");

                sql.append("                 ,sum(case when product_division IN(1) and detail_staff_id is not null then " + valueString + " else 0 end) as menu_charge_all_tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) and detail_staff_id is not null and detail_designated_flag = true then " + valueString + " else 0 end) as menu_charge_tech_value");

                sql.append("                 ,sum(case when product_division IN(2) and staff_id is not null then " + valueString + " else 0 end) as charge_all_item_value");

                sql.append("                 ,sum(case when product_division IN(2) and (");
                sql.append("                                                                (staff_id is not null and detail_designated_flag = false)");
                sql.append("                                                             or (detail_staff_id is not null and detail_designated_flag = true)");
                sql.append("                                                           )");
                sql.append("                        then " + valueString + " else 0 end) as charge_item_value");

                sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id is not null then " + valueString + " else 0 end) as menu_charge_all_item_value");
                sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id is not null and detail_staff_id = staff_id then " + valueString + " else 0 end) as menu_charge_item_value");
                //IVS_LVTu start add 2015/07/09 Bug #39505
                if(paramBean.isCourseFlag() == true) {
                    sql.append("                 ,sum(case when product_division IN(5) then " + valueString + " else 0 end) as course_value");
                    sql.append("                 ,sum(case when product_division IN(5)  and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                    sql.append("                 inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                    sql.append("                 where ds.delete_date is null\n");
                    sql.append("                 and dsd.delete_date is null\n");
                    sql.append("                 and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                    sql.append("                 and dsd.product_division = 5 \n");
                    sql.append("                 and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                    sql.append("                 and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                    sql.append("                 and (ds.sales_date <= '" + endDate + "' )\n");
                    sql.append("                 ) then " + valueString + " else 0 end) as course_value_new");
                     //IVS_TMTrong start edit 2015/08/12 Bug #41945
                    //sql.append("                 ,sum(case when product_division IN(6) then " + valueString + " else 0 end) as course_digestion_value");
                    sql.append("                 ,sum(CASE ");
                    sql.append("                 				WHEN product_division IN (6) ");
                    sql.append("                 					THEN ");
                    sql.append("                 					( ");
                    //sql.append("                                                            select sum( "+ valueString + " * dcd.product_num)::integer ");
                    sql.append("                                                            select "+valueString2);
                    sql.append("                                                            from data_contract_digestion dcd ");
                    sql.append("                                                            inner join data_contract dc on dc.shop_id = dcd.contract_shop_id and dc.contract_no= dcd.contract_no and dc.contract_detail_no = dcd.contract_detail_no ");
                    sql.append("                                                            and view_data_sales_detail_valid.product_id = dc.product_id ");
                    sql.append("                                                            where dcd.shop_id = view_data_sales_detail_valid.shop_id and dcd.slip_no = view_data_sales_detail_valid.slip_no)  "); 
                    sql.append("                                                    ELSE 0 ");
                    sql.append("				END) AS course_digestion_value ");
                    //IVS_TMTrong end edit 2015/08/12 Bug #41945
                }
                //IVS_LVTu end add 2015/07/09 Bug #39505
            }

            sql.append("                     ,sum(case when product_division IN(1,3) then 1 else 0 end) as tech_flg");

            sql.append("                     ,sum(case when product_division = 1 then 1 else 0 end) as tech_num");
            sql.append("                     ,sum(case when product_division = 3 then 1 else 0 end) as tech_crame_num");
            sql.append("                     ,sum(case when product_division = 2 then 1 else 0 end) as item_num");
            sql.append("                     ,sum(case when product_division = 4 then 1 else 0 end) as item_crame_num");
            //IVS_LVTu start add 2015/07/09 Bug #39505
            if(paramBean.isCourseFlag() == true) {
                if (paramBean.getStaffId() != null) {
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_num");
                //IVS_nhtvinh start add 2016/07/11 Bug #52584   
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + " and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                    sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                    sql.append("                      where ds.delete_date is null\n");
                    sql.append("                      and dsd.delete_date is null\n");
                    sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                    sql.append("                      and dsd.product_division = 5 \n");
                    //IVS_nhtvinh start add 2016/07/11 Bug #52584
                    sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                    sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                    sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                    sql.append("                      ) then 1 else 0 end) as course_num_new");
                sql.append("                     ,sum(case when product_division = 6  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_digestion_num");
            }else {
                sql.append("                     ,sum(case when product_division = 5 then 1 else 0 end) as course_num");
                sql.append("                     ,sum(case when product_division = 5 and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                    sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                    sql.append("                      where ds.delete_date is null\n");
                    sql.append("                      and dsd.delete_date is null\n");
                    sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                    sql.append("                      and dsd.product_division = 5 \n");
                    sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                    sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                    sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                    sql.append("                      )then 1 else 0 end) as course_num_new");
                    //IVS_TMTrong start edit 2015/08/12 Bug #41945
                sql.append("                     ,sum(case when product_division = 6 then 1 else 0 end) as course_digestion_num");
            }
                /*sql.append(" ,sum(CASE ");
                sql.append("				WHEN product_division = 6 ");
                sql.append("					THEN ");
                sql.append("					( ");
                sql.append("						select sum ( dcd.product_num)::integer ");
                sql.append("						from data_contract_digestion dcd ");
                sql.append("						inner join data_contract dc on dc.shop_id = dcd.contract_shop_id and dc.contract_no= dcd.contract_no and dc.contract_detail_no = dcd.contract_detail_no ");
                sql.append("						and view_data_sales_detail_valid.product_id = dc.product_id ");
                sql.append("						where dcd.shop_id = view_data_sales_detail_valid.shop_id and dcd.slip_no = view_data_sales_detail_valid.slip_no ");
                sql.append("				) ");
                sql.append("				ELSE 0 ");
                sql.append("				END) AS course_digestion_num ");*/
                //IVS_TMTrong end edit 2015/08/12 Bug #41945
            }
            //IVS_LVTu end add 2015/07/09 Bug #39505

            sql.append("                 from");
            sql.append("                     view_data_sales_detail_valid");																																					

            sql.append("		    LEFT OUTER JOIN(	");																																		
            sql.append("			mst_item	");																																	
            sql.append("			INNER JOIN	");																																	
            sql.append("			mst_item_class	");																																	
            sql.append("			ON  mst_item_class.item_class_id = mst_item.item_class_id ");																																	
            sql.append("			AND mst_item_class.delete_date IS NULL)	");																															
            sql.append("		    ON  mst_item.item_id = view_data_sales_detail_valid.product_id ");																																		
            sql.append("	    AND view_data_sales_detail_valid.product_division IN (2,4)	");																																	

            sql.append("             where	");																																						
            sql.append("                   shop_id in (" + paramBean.getShopIDList() + ")");																																						
            sql.append("		AND (mst_item_class.shop_category_id in ("+ paramBean.getCategoryIDList() +"))");
            sql.append(" and sales_date between '" + startDate + "' and '" + endDate + "'");	
            if (paramBean.getStaffId() != null) {
                sql.append("                 and (");
                sql.append("                            staff_id = " + paramBean.getStaffId().toString());
                sql.append("                         or detail_staff_id = " + paramBean.getStaffId().toString());
                sql.append("                     )");
            }
            
            sql.append(" group by ");																																							
            sql.append("     shop_id, ");																																						
            sql.append("     slip_no ");
            
            if (!paramBean.getCategoryIDList().equals("")) {
                sql.append("                     ,shop_category_id");
            }
            
        }
        //IVS_TTMLoan end add 2014/07/28 Mashu_売上推移表
        //IVS_LVTu start add 2015/07/09 Bug #39505
        if (!paramBean.getCategoryIDList().equals("") && paramBean.isCourseFlag() == true) {
                sql.append("             UNION ALL ");
                sql.append("                select	");																																			
                sql.append("                     shop_id");
                sql.append("                     ,slip_no ");
                
                if (!paramBean.getCategoryIDList().equals("")) {
                    sql.append("                     ,shop_category_id");
                }
                
                //sql.append("                     ,sum(" + valueString + ") as detail_value");
                if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                    sql.append("                     ,sum(case when product_division IN(1,2,3,4) then " + valueString + " else 0 end) as detail_value");
                } else {
                    sql.append("                     ,sum(case when product_division IN(1,2,3,4,5) then " + valueString + " else 0 end) as detail_value");
                }
              if (paramBean.getStaffId() != null) {
                sql.append("                 ,sum(case when product_division IN(1) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as tech_value_in_crame");

                sql.append("                 ,sum(case when product_division IN(2) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as item_value");
                sql.append("                 ,sum(case when product_division IN(2,4) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as item_value_in_crame");

                sql.append("                 ,sum(case when product_division IN(1) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as charge_all_tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) and staff_id = " + paramBean.getStaffId().toString() + " and designated_flag = true then " + valueString + " else 0 end) as charge_tech_value");

                sql.append("                 ,sum(case when product_division IN(1) and detail_staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as menu_charge_all_tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) and detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = true then " + valueString + " else 0 end) as menu_charge_tech_value");

                sql.append("                 ,sum(case when product_division IN(2) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as charge_all_item_value");

                sql.append("                 ,sum(case when product_division IN(2) and (");
                sql.append("                                                                (staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = false)");
                sql.append("                                                             or (detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = true)");
                sql.append("                                                           )");
                sql.append("                        then " + valueString + " else 0 end) as charge_item_value");

                sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as menu_charge_all_item_value");
                sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_staff_id = staff_id then " + valueString + " else 0 end) as menu_charge_item_value");
                sql.append("                 ,sum(case when product_division IN(5) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as course_value");
                sql.append("                 sum(case when product_division IN(5) and staff_id = " + paramBean.getStaffId().toString() + "  and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                //IVS_nhtvinh start add 2016/07/11 Bug #52584
                sql.append("                 inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                sql.append("                 where ds.delete_date is null\n");
                sql.append("                 and dsd.delete_date is null\n");
                sql.append("                 and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                sql.append("                 and dsd.product_division = 5 \n");
                //IVS_nhtvinh start add 2016/07/11 Bug #52584
                sql.append("                 and ds.customer_id = vdview_data_sales_detail_validsdv.customer_id\n");
                sql.append("                 and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                sql.append("                 and (ds.sales_date <= '" + endDate + "' )\n");
                sql.append("                 ) then " + valueString + " else 0 end) as course_value_new");
                //IVS_LVTu start edit 2015/07/09 Bug #41945
                //sql.append("                 ,sum(case when product_division IN(6) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as course_digestion_value");
                sql.append("                  ,SUM(CASE WHEN product_division IN (6) and staff_id = " + paramBean.getStaffId().toString() + " THEN ");
                sql.append("                      (SELECT " + valueString2 + " ");
                sql.append("                      FROM data_contract_digestion dcd ");
                sql.append("                      INNER JOIN data_contract dc ON dc.shop_id = dcd.contract_shop_id ");
                sql.append("                      AND dc.contract_no= dcd.contract_no ");
                sql.append("                      AND dc.contract_detail_no = dcd.contract_detail_no ");
                sql.append("                      AND view_data_sales_detail_valid.product_id = dc.product_id ");
                sql.append("                      WHERE dcd.shop_id = view_data_sales_detail_valid.shop_id ");
                sql.append("                      AND dcd.slip_no = view_data_sales_detail_valid.slip_no) ELSE 0 END) AS course_digestion_value " );

            } else {

                sql.append("                 ,sum(case when product_division IN(1) then " + valueString + " else 0 end) as tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) then " + valueString + " else 0 end) as tech_value_in_crame");

                sql.append("                 ,sum(case when product_division IN(2) then " + valueString + " else 0 end) as item_value");
                sql.append("                 ,sum(case when product_division IN(2,4) then " + valueString + " else 0 end) as item_value_in_crame");

                sql.append("                 ,sum(case when product_division IN(1) and staff_id is not null then " + valueString + " else 0 end) as charge_all_tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) and staff_id is not null and designated_flag = true then " + valueString + " else 0 end) as charge_tech_value");

                sql.append("                 ,sum(case when product_division IN(1) and detail_staff_id is not null then " + valueString + " else 0 end) as menu_charge_all_tech_value");
                sql.append("                 ,sum(case when product_division IN(1,3) and detail_staff_id is not null and detail_designated_flag = true then " + valueString + " else 0 end) as menu_charge_tech_value");

                sql.append("                 ,sum(case when product_division IN(2) and staff_id is not null then " + valueString + " else 0 end) as charge_all_item_value");

                sql.append("                 ,sum(case when product_division IN(2) and (");
                sql.append("                                                                (staff_id is not null and detail_designated_flag = false)");
                sql.append("                                                             or (detail_staff_id is not null and detail_designated_flag = true)");
                sql.append("                                                           )");
                sql.append("                        then " + valueString + " else 0 end) as charge_item_value");

                sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id is not null then " + valueString + " else 0 end) as menu_charge_all_item_value");
                sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id is not null and detail_staff_id = staff_id then " + valueString + " else 0 end) as menu_charge_item_value");
                sql.append("                 ,sum(case when product_division IN(5) then " + valueString + " else 0 end) as course_value");
                sql.append("                 ,sum(case when product_division IN(5)  and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                sql.append("                 inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                sql.append("                 where ds.delete_date is null\n");
                sql.append("                 and dsd.delete_date is null\n");
                sql.append("                 and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                sql.append("                 and dsd.product_division = 5 \n");
                sql.append("                 and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                sql.append("                 and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                sql.append("                 and (ds.sales_date <= '" + endDate + "' )\n");
                sql.append("                 ) then " + valueString + " else 0 end) as course_value_new");
                //sql.append("                 ,sum(case when product_division IN(6) then " + valueString + " else 0 end) as course_digestion_value");
                sql.append("                     ,SUM(CASE WHEN product_division IN (6) THEN ");
                sql.append("                      (SELECT " + valueString2 + " ");
                sql.append("                      FROM data_contract_digestion dcd ");
                sql.append("                      INNER JOIN data_contract dc ON dc.shop_id = dcd.contract_shop_id ");
                sql.append("                      AND dc.contract_no= dcd.contract_no ");
                sql.append("                      AND dc.contract_detail_no = dcd.contract_detail_no ");
                sql.append("                      AND view_data_sales_detail_valid.product_id = dc.product_id ");
                sql.append("                      WHERE dcd.shop_id = view_data_sales_detail_valid.shop_id ");
                sql.append("                      AND dcd.slip_no = view_data_sales_detail_valid.slip_no) ELSE 0 END) AS course_digestion_value " );
            }

            sql.append("                     ,sum(case when product_division IN(1,3) then 1 else 0 end) as tech_flg");

            sql.append("                     ,sum(case when product_division = 1 then 1 else 0 end) as tech_num");
            sql.append("                     ,sum(case when product_division = 3 then 1 else 0 end) as tech_crame_num");
            sql.append("                     ,sum(case when product_division = 2 then 1 else 0 end) as item_num");
            sql.append("                     ,sum(case when product_division = 4 then 1 else 0 end) as item_crame_num");
            if (paramBean.getStaffId() != null) {
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_num");
                //IVS_nhtvinh start add 2016/07/11 Bug #52584
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + " and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                sql.append("                      where ds.delete_date is null\n");
                sql.append("                      and dsd.delete_date is null\n");
                sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                sql.append("                      and dsd.product_division = 5 \n");
                //IVS_nhtvinh start add 2016/07/11 Bug #52584
                sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                sql.append("                      ) then 1 else 0 end) as course_num_new");
                sql.append("                     ,sum(case when product_division = 6  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_digestion_num");
            }else {
            sql.append("                     ,sum(case when product_division = 5  then 1 else 0 end) as course_num");
            sql.append("                     ,sum(case when product_division = 5 and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                sql.append("                      where ds.delete_date is null\n");
                sql.append("                      and dsd.delete_date is null\n");
                sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                sql.append("                      and dsd.product_division = 5 \n");
                sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                sql.append("                      ) then 1 else 0 end) as course_num_new");
            sql.append("                     ,sum(case when product_division = 6 then 1 else 0 end) as course_digestion_num");
            }
            
            sql.append("                 from");
            sql.append("                     view_data_sales_detail_valid");																																					

            sql.append("		    LEFT OUTER JOIN(	");																																		
            sql.append("			mst_course	");																																	
            sql.append("			INNER JOIN	");																																	
            sql.append("			mst_course_class	");																																	
            sql.append("			ON  mst_course_class.course_class_id = mst_course.course_class_id ");																																	
            sql.append("			AND mst_course_class.delete_date IS NULL)	");																															
            sql.append("		    ON  mst_course.course_id = view_data_sales_detail_valid.product_id ");																																		
            sql.append("	    AND view_data_sales_detail_valid.product_division IN (5,6)	");																																	

            sql.append("             where	");																																						
            sql.append("                   shop_id in (" + paramBean.getShopIDList() + ")");																																						
            //sql.append("		AND (mst_item_class.shop_category_id in ("+ paramBean.getCategoryIDList() +"))");
            sql.append("		AND (mst_course_class.shop_category_id in ("+ paramBean.getCategoryIDList() +"))");
            sql.append(" and sales_date between '" + startDate + "' and '" + endDate + "'");	
            if (paramBean.getStaffId() != null) {
                sql.append("                 and (");
                sql.append("                            staff_id = " + paramBean.getStaffId().toString());
                sql.append("                         or detail_staff_id = " + paramBean.getStaffId().toString());
                sql.append("                     )");
            }
            
            sql.append(" group by ");																																							
            sql.append("     shop_id, ");																																						
            sql.append("     slip_no ");
            
            if (!paramBean.getCategoryIDList().equals("")) {
                sql.append("                     ,shop_category_id");
            }
            
        }  
        //IVS_LVTu end add 2015/07/09 Bug #39505
        sql.append("             ) dsd");
        //IVS_TTMLoan start add 2014/08/27 Mashu_売上推移表
        if (!paramBean.getCategoryIDList().equals("")) {
            sql.append("   group by dsd.shop_id, dsd.slip_no, dsd.shop_category_id ) dsd "); 					
        }
        //IVS_TTMLoan end add 2014/08/27 Mashu_売上推移表

        sql.append("             on ds.shop_id = dsd.shop_id");
        sql.append("            and ds.slip_no = dsd.slip_no");
        if (paramBean.getStaffId() != null) {
            sql.append("       AND staff_id = " + paramBean.getStaffId().toString() + " ");
        }
        
        //IVS_TTMLoan start add 2014/08/27 Mashu_売上推移表
        if (!paramBean.getCategoryIDList().equals("")) {
            sql.append("  left join (");		
            sql.append("      select dsd.shop_id, dsd.slip_no");		
            sql.append("      , max(dsd.shop_category_id) as max_shop_category_id");		
            sql.append("      , sum(dsd.tech_num) as tech_num");		
            sql.append("      , sum(dsd.tech_crame_num) as tech_crame_num");		
            sql.append("      , sum(dsd.item_num) as item_num");		
            sql.append("      , sum(dsd.item_crame_num) as item_crame_num");	
            //IVS_LVTu start add 2015/07/09 Bug #39505
            if(paramBean.isCourseFlag() == true) {
                sql.append("      , SUM ( dsd.course_num ) AS course_num ");
                sql.append("      , SUM ( dsd.course_num_new ) AS course_num_new ");
                sql.append("      , SUM ( dsd.course_digestion_num ) AS course_digestion_num ");
            }
            //IVS_LVTu end add 2015/07/09 Bug #39505
            sql.append("       from ( select");		
            sql.append("                              shop_id,");
            sql.append("                              slip_no,");
            sql.append("      			shop_category_id,");
            sql.append("                              sum (case when product_division = 1 then 1 else 0 end) as tech_num,");
            sql.append("                              sum (case when product_division = 3 then 1 else 0 end) as tech_crame_num,");
            sql.append("                              sum (case when product_division = 2 then 1 else 0 end) as item_num,");
            sql.append("                              sum (case when product_division = 4 then 1 else 0 end) as item_crame_num");
            //IVS_LVTu start add 2015/07/09 Bug #39505
            if(paramBean.isCourseFlag() == true) {
                if (paramBean.getStaffId() != null) {
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_num");
                //IVS_nhtvinh start add 2016/07/11 Bug #52584
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + " and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                    sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                    sql.append("                      where ds.delete_date is null\n");
                    sql.append("                      and dsd.delete_date is null\n");
                    sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                    sql.append("                      and dsd.product_division = 5 \n");
                    //IVS_nhtvinh start add 2016/07/11 Bug #52584
                    sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                    sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                    sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                    sql.append("                      ) then 1 else 0 end) as course_num_new");
                sql.append("                     ,sum(case when product_division = 6  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_digestion_num");
                }else {
                sql.append("                             , SUM ( CASE WHEN product_division = 5 THEN 1 ELSE 0 END ) AS course_num ");
                sql.append("                      , SUM ( CASE WHEN product_division = 5 and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                    sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                    sql.append("                      where ds.delete_date is null\n");
                    sql.append("                      and dsd.delete_date is null\n");
                    sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                    sql.append("                      and dsd.product_division = 5 \n");
                    sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                    sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                    sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                    sql.append("                      ) THEN 1 ELSE 0 END ) AS course_num_new ");
                sql.append("                             , SUM ( CASE WHEN product_division = 6 THEN 1 ELSE 0 END ) AS course_digestion_num ");
                }
            }
            //IVS_LVTu end add 2015/07/09 Bug #39505
            sql.append("                          from");
            sql.append("                              view_data_sales_detail_valid");
            sql.append("                              LEFT OUTER JOIN");
            sql.append("                                  (");
            sql.append("                                      mst_technic");
            sql.append("                                      INNER JOIN");
            sql.append("                                          mst_technic_class");
            sql.append("                                      ON  mst_technic_class.technic_class_id = mst_technic.technic_class_id");
            sql.append("                                      AND mst_technic_class.delete_date IS NULL");
            sql.append("                                  )");
            sql.append("                              ON  mst_technic.technic_id = view_data_sales_detail_valid.product_id");
            sql.append("                                                      AND view_data_sales_detail_valid.product_division in (1, 3)  ");
            sql.append("                    where");
            sql.append("                       shop_id in (" + paramBean.getShopIDList() + ")");	
            sql.append("                    AND (mst_technic_class.shop_category_id  in ("+ paramBean.getCategoryIDList() +"))");
            sql.append("                    AND sales_date between '" + startDate + "' and '" + endDate + "'");	
            sql.append("                    group by");
            sql.append("                        shop_id,");
            sql.append("                        slip_no,");
            sql.append("                        shop_category_id");
            sql.append("                                  UNION ALL");		
            sql.append("                                  select");		
            sql.append("                                      shop_id,");		
            sql.append("                                      slip_no,");		
            sql.append("                                      shop_category_id,");
            sql.append("                                      sum (case when product_division = 1 then 1 else 0 end) as tech_num,");		
            sql.append("                                      sum (case when product_division = 3 then 1 else 0 end) as tech_crame_num,");		
            sql.append("                                      sum (case when product_division = 2 then 1 else 0 end) as item_num,");		
            sql.append("                                      sum (case when product_division = 4 then 1 else 0 end) as item_crame_num");		
            //IVS_LVTu start add 2015/07/09 Bug #39505
            if(paramBean.isCourseFlag() == true) {
                if (paramBean.getStaffId() != null) {
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_num");
                //IVS_nhtvinh start add 2016/07/11 Bug #52584
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + " and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                    sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                    sql.append("                      where ds.delete_date is null\n");
                    sql.append("                      and dsd.delete_date is null\n");
                    sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                    sql.append("                      and dsd.product_division = 5 \n");
                    //IVS_nhtvinh start add 2016/07/11 Bug #52584
                    sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                    sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                    sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                    sql.append("                      ) then 1 else 0 end) as course_num_new");
                sql.append("                     ,sum(case when product_division = 6  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_digestion_num");
                }else {
                sql.append("                                    , SUM ( CASE WHEN product_division = 5 THEN 1 ELSE 0 END ) AS course_num ");
                sql.append("                      , SUM ( CASE WHEN product_division = 5 and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                    sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                    sql.append("                      where ds.delete_date is null\n");
                    sql.append("                      and dsd.delete_date is null\n");
                    sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                    sql.append("                      and dsd.product_division = 5 \n");
                    sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                    sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                    sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                    sql.append("                      ) THEN 1 ELSE 0 END ) AS course_num_new ");
                sql.append("                                    , SUM ( CASE WHEN product_division = 6 THEN 1 ELSE 0 END ) AS course_digestion_num ");
                }
            }
            //IVS_LVTu end add 2015/07/09 Bug #39505
            sql.append("                                  from");		
            sql.append("                                      view_data_sales_detail_valid");		
            sql.append("                                  LEFT OUTER JOIN");		
            sql.append("                                      ( ");		
            sql.append("                                          mst_item");		
            sql.append("                                          INNER JOIN");		
            sql.append("                                              mst_item_class");		
            sql.append("                                          ON  mst_item_class.item_class_id = mst_item.item_class_id	");	
            sql.append("                                          AND mst_item_class.delete_date IS NULL");		
            sql.append("                                      )");		
            sql.append("                                  ON  mst_item.item_id = view_data_sales_detail_valid.product_id");		
            sql.append("                                  AND view_data_sales_detail_valid.product_division IN (2, 4)");		
            sql.append("                                  where");		
            sql.append("                                      shop_id  in (" + paramBean.getShopIDList() + ")");	
            sql.append("                                  AND (mst_item_class.shop_category_id IN ("+ paramBean.getCategoryIDList() +"))");	
            sql.append("                                  and sales_date  between '" + startDate + "' and '" + endDate + "'");	
            sql.append("                                  group by");		
            sql.append("                                      shop_id,");		
            sql.append("                                      slip_no,");		
            sql.append("                                      shop_category_id ");
            //IVS_LVTu start add 2015/07/09 Bug #39505
            if(paramBean.isCourseFlag() == true) {
                sql.append("                                  UNION ALL");		
                sql.append("                                  select");		
                sql.append("                                      shop_id,");		
                sql.append("                                      slip_no,");		
                sql.append("                                      shop_category_id,");
                sql.append("                                      sum (case when product_division = 1 then 1 else 0 end) as tech_num,");		
                sql.append("                                      sum (case when product_division = 3 then 1 else 0 end) as tech_crame_num,");		
                sql.append("                                      sum (case when product_division = 2 then 1 else 0 end) as item_num,");		
                sql.append("                                      sum (case when product_division = 4 then 1 else 0 end) as item_crame_num");
            if (paramBean.getStaffId() != null) {
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_num");
                //IVS_nhtvinh start add 2016/07/11 Bug #52584
                sql.append("                     ,sum(case when product_division = 5  and staff_id = " + paramBean.getStaffId().toString() + " and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                    sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                    sql.append("                      where ds.delete_date is null\n");
                    sql.append("                      and dsd.delete_date is null\n");
                    sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                    sql.append("                      and dsd.product_division = 5 \n");
                    //IVS_nhtvinh start add 2016/07/11 Bug #52584
                    sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                    sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                    sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                    sql.append("                      ) then 1 else 0 end) as course_num_new");
                sql.append("                     ,sum(case when product_division = 6  and staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_digestion_num");
            }else {
                sql.append("                                    , SUM ( CASE WHEN product_division = 5 THEN 1 ELSE 0 END ) AS course_num ");
                sql.append("                      , SUM ( CASE WHEN product_division = 5 and view_data_sales_detail_valid.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
                    sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
                    sql.append("                      where ds.delete_date is null\n");
                    sql.append("                      and dsd.delete_date is null\n");
                    sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
                    sql.append("                      and dsd.product_division = 5 \n");
                    sql.append("                      and ds.customer_id = view_data_sales_detail_valid.customer_id\n");
                    sql.append("                      and ds.shop_id = view_data_sales_detail_valid.shop_id\n");
                    sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
                    sql.append("                      ) THEN 1 ELSE 0 END ) AS course_num_new ");
                sql.append("                                    , SUM ( CASE WHEN product_division = 6 THEN 1 ELSE 0 END ) AS course_digestion_num ");
            }
                sql.append("                                  from");		
                sql.append("                                      view_data_sales_detail_valid");		
                sql.append("                                  LEFT OUTER JOIN");		
                sql.append("                                      ( ");		
                sql.append("                                          mst_course");		
                sql.append("                                          INNER JOIN");		
                sql.append("                                              mst_course_class");		
                sql.append("                                          ON  mst_course_class.course_class_id = mst_course.course_class_id	");	
                sql.append("                                          AND mst_course_class.delete_date IS NULL");		
                sql.append("                                      )");		
                sql.append("                                  ON  mst_course.course_id = view_data_sales_detail_valid.product_id");		
                sql.append("                                  AND view_data_sales_detail_valid.product_division IN (5,6)");		
                sql.append("                                  where");		
                sql.append("                                      shop_id  in (" + paramBean.getShopIDList() + ")");	
                sql.append("                                  AND (mst_course_class.shop_category_id IN ("+ paramBean.getCategoryIDList() +"))");	
                //IVS_LVTu end edit 2015/07/09 Bug #41945
                sql.append("                                  and sales_date  between '" + startDate + "' and '" + endDate + "'");	
                sql.append("                                  group by");		
                sql.append("                                      shop_id,");		
                sql.append("                                      slip_no,");		
                sql.append("                                      shop_category_id ");
            }
            //IVS_LVTu end add 2015/07/09 Bug #39505
            sql.append("                                       ) dsd group by dsd.shop_id, dsd.slip_no");		
            sql.append("                              ) dsd1");		
            sql.append("                          on  ds.shop_id = dsd1.shop_id");		
            sql.append("                          and ds.slip_no = dsd1.slip_no");		
            //nhanvt start edit 20141211 Bug #33891
            sql.append("                      and dsd.shop_category_id = dsd1.max_shop_category_id");
            //nhanvt end edit 20141211 Bug #33891
        }
        //IVS_TTMLoan end add 2014/08/27 Mashu_売上推移表

        sql.append("         left join mst_customer mc");
        sql.append("             using(customer_id)");
        //nhanvt Start add 20141006 Bug #31177
        sql.append("                 where");
        sql.append("                         ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and ds.sales_date between '" + startDate + "' and '" + endDate + "'");
        //nhanvt Start add 20141006 Bug #31177

        sql.append(" group by");
        if (isDailyReport) {
            sql.append(" date_trunc('day', ds.sales_date)");
        } else {
            sql.append(" date_trunc('month', case when date_part('day', ds.sales_date) > " + paramBean.getCutoffDay() + " then ds.sales_date + '1 months' else ds.sales_date end)");
        }

        // 売上なしのレジ締め日取得
        sql.append(" union all");
        sql.append(" select distinct");
        if (isDailyReport) {
            sql.append("  date_trunc('day', manage_date) as manage_date");
        } else {
            sql.append("  date_trunc('month', case when date_part('day', manage_date) > " + paramBean.getCutoffDay() + " then manage_date + '1 months' else manage_date end) as manage_date");
        }

        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        //IVS_LVTu start add 2015/07/09 Bug #39505
        if(paramBean.isCourseFlag() == true) {
            sql.append("     ,0");
            sql.append("     ,0");
            sql.append("     ,0");
            sql.append("     ,0");
            sql.append("     ,0");
            sql.append("     ,0");
        }
        //IVS_LVTu end add 2015/07/09 Bug #39505
        sql.append(" from");
        sql.append("     data_register dr");
        sql.append(" where");
        sql.append("         delete_date is null");
        sql.append("     and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     and manage_date between '" + startDate + "' and '" + endDate + "'");
        sql.append("     and not exists");
        sql.append("         (");
        sql.append("             select 1");
        sql.append("             from");
        sql.append("                 data_sales");
        sql.append("             where");
        sql.append("                     delete_date is null");
        sql.append("                 and shop_id = dr.shop_id");
        sql.append("                 and sales_date = dr.manage_date");
        sql.append("         )");

        sql.append(" ) t");
        sql.append(" group by");
        sql.append("     sales_date");

        sql.append(" ) t");
        sql.append(" full outer join (" + getSalesReport_LastYearSQL(paramBean, isDailyReport, valueString, startDate, endDate) + ") last_year");
        sql.append("     using(sales_date)");

        sql.append(" order by sales_date_with_last_year");

        if (paramBean.getStaffId() != null && (paramBean.getCategoryIDList() != null && !paramBean.getCategoryIDList().equals(""))) {
            sql.setLength(0);
            sql.append(getSQLSalesReport( paramBean ,  isDailyReport));
        }
        ResultSetWrapper rs = cw.executeQuery(sql.toString());
        //IVS_LVTu end edit 2015/08/17 Bug #41945

        if (rs.last()) {

            //IVS_LVTu start edit 2015/07/09 Bug #39505
            JExcelApi jx;
            if(paramBean.isCourseFlag() == false) {
                jx = new JExcelApi("売上推移表");
                jx.setTemplateFile("/reports/売上推移表.xls");
            } else {
                jx = new JExcelApi("売上推移表_役務機能あり");
                jx.setTemplateFile("/reports/売上推移表_役務機能あり.xls");
            }
            //IVS_LVTu end edit 2015/07/09 Bug #39505

            // ヘッダ
            jx.setValue(2, 3, paramMap.get("TargetStartDate") + " 〜 " + paramMap.get("TargetEndDate"));
            jx.setValue(2, 4, paramMap.get("TargetName"));
            jx.setValue(2, 6, paramMap.get("TaxType"));
            
            //IVS_TTMLoan start add 2014/07/28 Mashu_売上推移表
            if (paramBean.getUseShopCategory() == 1) {
                jx.setValue(4, 6, " 集計業態 ： ");
                jx.setValue(6, 6, paramBean.getCategoryNameList());
            }
            //IVS_TTMLoan end add 2014/07/28 Mashu_売上推移表
            
            int row = 10;
            //IVS_LVTu start edit 2015/09/23 New request #42784
            ArrayList<Date> result = new ArrayList<Date>();
            Calendar start = Calendar.getInstance();
            start.setTime(paramBean.getTargetStartDateObj());
            Calendar end = Calendar.getInstance();
            end.setTime(paramBean.getTargetEndDateObj());
            end.add(Calendar.DAY_OF_YEAR, 1); 
            while (start.before(end)) {
                result.add(start.getTime());
                start.add(Calendar.DAY_OF_YEAR, 1);
            }
            Date salesDate = new Date();
            // 追加行数セット
            //jx.insertRow(row, rs.getRow() - 1);
            if ( paramBean.isCheckOutDate()) {
                jx.insertRow(row, result.size() - 1);
                
                for (int index = 0 ;index < result.size();index ++ ) {
                    jx.setValue(1, row, String.format("%1$tY/%1$tm/%1$td (%1$ta)", result.get(index)));
                    row++;
                }
            } else {
                // 追加行数セット
                jx.insertRow(row, rs.getRow() - 1);
            }
            row = 10;
            rs.first();

            // データセット
            do {

                if (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_DAY) {
                    if ( paramBean.isCheckOutDate()) {
                        salesDate = rs.getDate("sales_date_with_last_year");
                        for ( int i = 0;i < result.size();i ++ ) {
                            if (salesDate != null && format.format(result.get(i)).equals(format.format(salesDate))) {
                                jx.setValue(2, row + i, rs.getInt("total_num"));
                                if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                                    jx.setValue(3, row + i, rs.getDouble("total_value2"));
                                } else {
                                    jx.setValue(3, row + i, rs.getLong("total_value"));
                                }

                                jx.setValue(4, row + i, rs.getInt("member_num"));
                                jx.setValue(5, row + i, rs.getInt("member_value"));
                                jx.setValue(6, row + i, rs.getInt("not_member_num"));
                                jx.setValue(7, row + i, rs.getInt("not_member_value"));
                                jx.setValue(8, row + i, rs.getInt("new_num"));
                                jx.setValue(9, row + i, rs.getInt("new_value"));

                                if (paramBean.isCourseFlag() == false) {
                                    jx.setValue(10, row + i, rs.getInt("tech_item_num") + rs.getInt("item_only_num"));
                                    jx.setValue(11, row + i, rs.getInt("item_only_num"));
                                    jx.setValue(12, row + i, rs.getInt("item_value_in_crame"));

                                    jx.setValue(13, row + i, rs.getInt("charge_all_tech_value"));
                                    jx.setValue(14, row + i, rs.getInt("charge_tech_value"));
                                    jx.setValue(15, row + i, rs.getInt("menu_charge_all_tech_value"));
                                    jx.setValue(16, row + i, rs.getInt("menu_charge_tech_value"));

                                    jx.setValue(17, row + i, rs.getInt("charge_all_item_value"));
                                    jx.setValue(18, row + i, rs.getInt("charge_item_value"));
                                    jx.setValue(19, row + i, rs.getInt("menu_charge_all_item_value"));
                                    jx.setValue(20, row + i, rs.getInt("menu_charge_item_value"));

                                    if (paramBean.getStaffId() == null) {
                                        // スタッフが選択されていない場合は全体割引を出力する
                                        jx.setValue(21, row + i, rs.getInt("discount_value"));
                                        jx.setValue(22, row + i, rs.getInt("tech_value_in_crame") + rs.getInt("item_value_in_crame") - rs.getInt("discount_value"));
                                        jx.setValue(25, row + i, rs.getInt("last_year_tech_value_in_crame") + rs.getInt("last_year_item_value_in_crame") - rs.getInt("last_year_discount_value"));
                                    } else {
                                        jx.setValue(21, row + i, 0);
                                        jx.setValue(22, row + i, rs.getInt("tech_value_in_crame") + rs.getInt("item_value_in_crame"));
                                        jx.setValue(25, row + i, rs.getInt("last_year_tech_value_in_crame") + rs.getInt("last_year_item_value_in_crame"));
                                    }
                                } else if (paramBean.isCourseFlag() == true) {
                                    jx.setValue(10, row + i, rs.getInt("course_num_new"));
                                    jx.setValue(11, row + i, rs.getInt("course_value_new"));
                                    jx.setValue(12, row + i, rs.getInt("course_num"));
                                    jx.setValue(13, row + i, rs.getInt("course_value"));
                                    jx.setValue(14, row + i, rs.getInt("course_digestion_num"));
                                    jx.setValue(15, row + i, rs.getDouble("course_digestion_value"));
                                    jx.setValue(16, row + i, rs.getInt("tech_item_num") + rs.getInt("item_only_num"));
                                    jx.setValue(17, row + i, rs.getInt("item_only_num"));
                                    jx.setValue(18, row + i, rs.getInt("item_value_in_crame"));

                                    jx.setValue(19, row + i, rs.getInt("charge_all_tech_value"));
                                    jx.setValue(20, row + i, rs.getInt("charge_tech_value"));
                                    jx.setValue(21, row + i, rs.getInt("menu_charge_all_tech_value"));
                                    jx.setValue(22, row + i, rs.getInt("menu_charge_tech_value"));

                                    jx.setValue(23, row + i, rs.getInt("charge_all_item_value"));
                                    jx.setValue(24, row + i, rs.getInt("charge_item_value"));
                                    jx.setValue(25, row + i, rs.getInt("menu_charge_all_item_value"));
                                    jx.setValue(26, row + i, rs.getInt("menu_charge_item_value"));

                                    if (paramBean.getStaffId() == null) {
                                        // スタッフが選択されていない場合は全体割引を出力する
                                        jx.setValue(27, row + i, rs.getInt("discount_value"));
                                        jx.setValue(28, row + i, rs.getInt("tech_value_in_crame") + rs.getInt("item_value_in_crame") - rs.getInt("discount_value") + rs.getInt("course_value"));
                                        jx.setValue(31, row + i, rs.getInt("last_year_tech_value_in_crame") + rs.getInt("last_year_item_value_in_crame") - rs.getInt("last_year_discount_value"));
                                    } else {
                                        jx.setValue(27, row + i, 0);
                                        jx.setValue(28, row + i, rs.getInt("tech_value_in_crame") + rs.getInt("item_value_in_crame") + rs.getInt("course_value"));
                                        jx.setValue(31, row + i, rs.getInt("last_year_tech_value_in_crame") + rs.getInt("last_year_item_value_in_crame"));
                                    }
                                }
                            }
                        }
                    } else {
                        jx.setValue(1, row, String.format("%1$tY/%1$tm/%1$td (%1$ta)", rs.getDate("sales_date_with_last_year")));
                    } 
                } else if (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_MONTH) {
                    jx.setValue(1, row, String.format("%1$tY年%1$tm月", rs.getDate("sales_date_with_last_year")));
                }
                if (! paramBean.isCheckOutDate()) {
                    jx.setValue(2, row, rs.getInt("total_num"));
                    if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                        jx.setValue(3, row, rs.getDouble("total_value2"));
                    } else {
                        jx.setValue(3, row, rs.getLong("total_value"));
                    }

                    jx.setValue(4, row, rs.getInt("member_num"));
                    jx.setValue(5, row, rs.getInt("member_value"));
                    jx.setValue(6, row, rs.getInt("not_member_num"));
                    jx.setValue(7, row, rs.getInt("not_member_value"));
                    jx.setValue(8, row, rs.getInt("new_num"));
                    jx.setValue(9, row, rs.getInt("new_value"));
                    //IVS_LVTu start edit 2015/07/09 Bug #39505
                    if (paramBean.isCourseFlag() == false) {
                        jx.setValue(10, row, rs.getInt("tech_item_num") + rs.getInt("item_only_num"));
                        jx.setValue(11, row, rs.getInt("item_only_num"));
                        jx.setValue(12, row, rs.getInt("item_value_in_crame"));

                        jx.setValue(13, row, rs.getInt("charge_all_tech_value"));
                        jx.setValue(14, row, rs.getInt("charge_tech_value"));
                        jx.setValue(15, row, rs.getInt("menu_charge_all_tech_value"));
                        jx.setValue(16, row, rs.getInt("menu_charge_tech_value"));

                        jx.setValue(17, row, rs.getInt("charge_all_item_value"));
                        jx.setValue(18, row, rs.getInt("charge_item_value"));
                        jx.setValue(19, row, rs.getInt("menu_charge_all_item_value"));
                        jx.setValue(20, row, rs.getInt("menu_charge_item_value"));

                        if (paramBean.getStaffId() == null) {
                            // スタッフが選択されていない場合は全体割引を出力する
                            jx.setValue(21, row, rs.getInt("discount_value"));
                            jx.setValue(22, row, rs.getInt("tech_value_in_crame") + rs.getInt("item_value_in_crame") - rs.getInt("discount_value"));
                            jx.setValue(25, row, rs.getInt("last_year_tech_value_in_crame") + rs.getInt("last_year_item_value_in_crame") - rs.getInt("last_year_discount_value"));
                        } else {
                            jx.setValue(21, row, 0);
                            jx.setValue(22, row, rs.getInt("tech_value_in_crame") + rs.getInt("item_value_in_crame"));
                            jx.setValue(25, row, rs.getInt("last_year_tech_value_in_crame") + rs.getInt("last_year_item_value_in_crame"));
                        }
                    } else if (paramBean.isCourseFlag() == true) {
                        jx.setValue(10, row, rs.getInt("course_num_new"));
                        jx.setValue(11, row, rs.getInt("course_value_new"));
                        jx.setValue(12, row, rs.getInt("course_num"));
                        jx.setValue(13, row, rs.getInt("course_value"));
                        jx.setValue(14, row, rs.getInt("course_digestion_num"));
                        //IVS_TMTrong start edit 2015/08/12 Bug #41945
                        jx.setValue(15, row, rs.getDouble("course_digestion_value"));
                        //IVS_TMTrong start edit 2015/08/12 Bug #41945
                        jx.setValue(16, row, rs.getInt("tech_item_num") + rs.getInt("item_only_num"));
                        jx.setValue(17, row, rs.getInt("item_only_num"));
                        jx.setValue(18, row, rs.getInt("item_value_in_crame"));

                        jx.setValue(19, row, rs.getInt("charge_all_tech_value"));
                        jx.setValue(20, row, rs.getInt("charge_tech_value"));
                        jx.setValue(21, row, rs.getInt("menu_charge_all_tech_value"));
                        jx.setValue(22, row, rs.getInt("menu_charge_tech_value"));

                        jx.setValue(23, row, rs.getInt("charge_all_item_value"));
                        jx.setValue(24, row, rs.getInt("charge_item_value"));
                        jx.setValue(25, row, rs.getInt("menu_charge_all_item_value"));
                        jx.setValue(26, row, rs.getInt("menu_charge_item_value"));

                        if (paramBean.getStaffId() == null) {
                            // スタッフが選択されていない場合は全体割引を出力する
                            jx.setValue(27, row, rs.getInt("discount_value"));
                            jx.setValue(28, row, rs.getInt("tech_value_in_crame") + rs.getInt("item_value_in_crame") - rs.getInt("discount_value") + rs.getInt("course_value"));
                            jx.setValue(31, row, rs.getInt("last_year_tech_value_in_crame") + rs.getInt("last_year_item_value_in_crame") - rs.getInt("last_year_discount_value"));
                        } else {
                            jx.setValue(27, row, 0);
                            jx.setValue(28, row, rs.getInt("tech_value_in_crame") + rs.getInt("item_value_in_crame") + rs.getInt("course_value"));
                            jx.setValue(31, row, rs.getInt("last_year_tech_value_in_crame") + rs.getInt("last_year_item_value_in_crame"));
                        }
                    }
                    //IVS_LVTu end edit 2015/07/09 Bug #39505
                    row++;
                }

            } while (rs.next());
            if (paramBean.isCheckOutDate()) {
                row = row + result.size();
            }
            //IVS_LVTu end edit 2015/09/23 New request #42784
            jx.removeRow(row);

            if (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_DAY) {
                jx.setValue(1, 1, "日次推移表");
                jx.setValue(1, 8, "日付");
                jx.setValue(2, 5, Integer.parseInt(paramMap.get("TargetDayCount")));
                jx.setValue(6, 5, Integer.parseInt(paramMap.get("TargetDayCount_Last_Year")));

                // ウィンドウ枠の固定
                jx.getTargetSheet().getSettings().setVerticalFreeze(9);
                jx.getTargetSheet().getSettings().setHorizontalFreeze(1);

            } else {
                jx.setValue(1, 1, "月次推移表");
                jx.setValue(1, 8, "期間（月）");
                jx.removeRow(5);

                // ウィンドウ枠の固定
                jx.getTargetSheet().getSettings().setVerticalFreeze(8);
                jx.getTargetSheet().getSettings().setHorizontalFreeze(1);
            }

            jx.openWorkbook();

        } else {

            return false;
        }

        return true;
    }

    // Thanh start edit 2013/05/02
    public boolean viewTurnOverReport(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();
        HashMap<String, String> paramMap = new HashMap<String, String>();

        HashMap<String, String> shopInfo = this.getShopInfo(paramBean.getShopIDList());
        Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
        paramBean.setTaxRate(tax_rate);

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            paramMap.put("TaxType", "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            paramMap.put("TaxType", "税込");
        }

        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");

        if (paramBean.getStaffId() == null || "".equals(paramBean.getStaffId())) {
            paramMap.put("TargetName", paramBean.getTargetName());
        } else {
            paramMap.put("TargetName", this.getStaffName(paramBean));
        }

        int dateLength = 10;
        String dateFormat = "yyyy/mm/dd";
        String startDate = String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetStartDateObj());
        String endDate = String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetEndDateObj());

        if (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_DAY) {
            dateFormat = "%1$tY/%1$tm/%1$td";
        } else if (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_MONTH) {
            dateFormat = "%1$tY/%1$tm";
        }

        boolean isDailyReport = (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_DAY);
        Calendar calStart = Calendar.getInstance();
        calStart.setTime(paramBean.getTargetStartDateObj());
        if (!isDailyReport) {
            if (calStart.get(Calendar.DAY_OF_MONTH) > paramBean.getCutoffDay()) {
                calStart.add(Calendar.MONTH, 1);
            }
        }

        paramMap.put("TargetStartDate", startDate);
        paramMap.put("TargetEndDate", endDate);
        //----------------------------
        // 営業日数取得
        //----------------------------
        String mainQuery = "";
        mainQuery += " select";
        mainQuery += "     count(distinct sales_date) as date_count";
        mainQuery += " from";
        mainQuery += " (";
        mainQuery += "     select";
        mainQuery += "         sales_date";
        mainQuery += "     from";
        mainQuery += "         view_data_sales_detail_valid";
        mainQuery += "     where";
        mainQuery += "             shop_id in (" + paramBean.getShopIDList() + ")";
        mainQuery += "         and sales_date between '" + startDate + "' and '" + endDate + "'";
        if (paramBean.getStaffId() != null && !paramBean.getStaffId().equals("")) {
            mainQuery += "     and staff_id = " + paramBean.getStaffId();
        }
        mainQuery += "     union all";
        mainQuery += "     select";
        mainQuery += "         manage_date";
        mainQuery += "     from";
        mainQuery += "         data_register dr";
        mainQuery += "     where";
        mainQuery += "             delete_date is null";
        mainQuery += "         and shop_id in (" + paramBean.getShopIDList() + ")";
        mainQuery += "         and manage_date between '" + startDate + "' and '" + endDate + "'";
        mainQuery += "         and not exists";
        mainQuery += "             (";
        mainQuery += "                 select 1";
        mainQuery += "                 from";
        mainQuery += "                     data_sales";
        mainQuery += "                 where";
        mainQuery += "                         delete_date is null";
        mainQuery += "                     and shop_id = dr.shop_id";
        mainQuery += "                     and sales_date = dr.manage_date";
        mainQuery += "             )";
        mainQuery += " ) t";

        if (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_DAY) {
            int dayCount = 0;
            ResultSetWrapper rs = cw.executeQuery(mainQuery);
            if (rs.next()) {
                dayCount = rs.getInt("date_count");
            }
            paramMap.put("TargetDayCount", String.valueOf(dayCount));
        }

        if (paramBean.getSubReportType() == ReportParameterBean.SUB_REPORT_SALES_DAY) {
            int dayCount = 0;
            ResultSetWrapper rs = cw.executeQuery(mainQuery);
            if (rs.next()) {
                dayCount = rs.getInt("date_count");
            }
            paramMap.put("TargetDayCount_Last_Year", String.valueOf(dayCount));
        }


        // 支払情報
        String paymentPriceSql = "";
        paymentPriceSql += " select";
        paymentPriceSql += "     dp.payment_date AS date";
        paymentPriceSql += "     ,sum(case dp.payment_no when 0 then dpd.cash_value - (case when dp.change_value < 0 then 0 else dp.change_value end)  else 0 end)   as cash_sales";
        paymentPriceSql += "     ,sum(case dp.payment_no when 0 then dpd.card_value else 0 end)                      as card_sales";
        paymentPriceSql += "     ,sum(case dp.payment_no when 0 then dpd.ecash_value else 0 end)                     as ecash_sales";
        paymentPriceSql += "     ,sum(case dp.payment_no when 0 then dpd.gift_value else 0 end)                      as gift_sales";
        paymentPriceSql += "     ,sum(case dp.payment_no when 0 then dp.bill_value else 0 end)                       as bill_value";
        paymentPriceSql += "     ,sum(case dp.payment_no when 0 then dpd.valueMethodID19 else 0 end)                 as valueMethodID19";
        paymentPriceSql += "     ,sum(vd.discount_value) as all_discount ";
        paymentPriceSql += " from";
        paymentPriceSql += "     view_data_sales_valid vd";
        paymentPriceSql += " inner join data_payment dp using(slip_no,shop_id)";
        paymentPriceSql += "         left outer join";
        paymentPriceSql += "             (";
        paymentPriceSql += "                 select";
        paymentPriceSql += "                      dpd.shop_id";
        paymentPriceSql += "                     ,dpd.slip_no";
        paymentPriceSql += "                     ,dpd.payment_no";
        paymentPriceSql += "                     ,sum(case mpm.payment_class_id when 1 then dpd.payment_value else 0 end) as cash_value";
        paymentPriceSql += "                     ,sum(case mpm.payment_class_id when 2 then dpd.payment_value else 0 end) as card_value";
        paymentPriceSql += "                     ,sum(case mpm.payment_class_id when 3 then dpd.payment_value else 0 end) as ecash_value";
        paymentPriceSql += "                     ,sum(case mpm.payment_class_id when 4 then dpd.payment_value else 0 end) as gift_value";
        paymentPriceSql += "                     ,sum(case dpd.payment_method_id when 19 then dpd.payment_value else 0 end)   as valueMethodID19";
        paymentPriceSql += "                 from";
        paymentPriceSql += "                     data_payment_detail dpd";
        paymentPriceSql += "                         inner join mst_payment_method mpm";
        paymentPriceSql += "                                 on mpm.payment_method_id = dpd.payment_method_id";
        paymentPriceSql += "                         inner join data_payment dp";
        paymentPriceSql += "                                 on dpd.shop_id = dp.shop_id";
        paymentPriceSql += "                                and dpd.slip_no = dp.slip_no";
        paymentPriceSql += "                                and dpd.payment_no = dp.payment_no";
        paymentPriceSql += "                                and dp.shop_id in (" + paramBean.getShopIDList() + ")";
        paymentPriceSql += "                                and dp.payment_date between " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
        paymentPriceSql += "                                                        and " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());
        paymentPriceSql += "                 where";
        paymentPriceSql += "                     dpd.delete_date is null";
        paymentPriceSql += "                 group by";
        paymentPriceSql += "                      dpd.shop_id";
        paymentPriceSql += "                     ,dpd.slip_no";
        paymentPriceSql += "                     ,dpd.payment_no";
        paymentPriceSql += "             ) dpd";
        paymentPriceSql += "             on dpd.shop_id = dp.shop_id";
        paymentPriceSql += "            and dpd.slip_no = dp.slip_no";
        paymentPriceSql += "            and dpd.payment_no = dp.payment_no";
        paymentPriceSql += " where";
        paymentPriceSql += "         dp.delete_date is null";
        paymentPriceSql += "     and vd.shop_id in (" + paramBean.getShopIDList() + ")";
        paymentPriceSql += "     and vd.sales_date between " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
        paymentPriceSql += "                             and " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());
        if (paramBean.getStaffId() != null) {
            paymentPriceSql += "                and (";
            paymentPriceSql += "                     vd.staff_id = " + paramBean.getStaffId().toString();
            paymentPriceSql += "                     )";
        }
        paymentPriceSql += " group by";
        paymentPriceSql += "     date";
        paymentPriceSql += " order by";
        paymentPriceSql += "     date";

        ResultSetWrapper rsPayment = cw.executeQuery(paymentPriceSql.toString());
        ResultSetWrapper rsPaymentDetail = cw.executeQuery(getSelectShopRankingSQL(paramBean).toString());




        if (rsPayment.last()) {

            JExcelApi jx = new JExcelApi("売上集計表");
            jx.setTemplateFile("/reports/売上集計表.xls");

            // ヘッダ
            jx.setValue(2, 3, paramMap.get("TargetStartDate") + " 〜 " + paramMap.get("TargetEndDate"));
            jx.setValue(2, 4, paramMap.get("TargetName"));
            jx.setValue(2, 5, paramMap.get("TaxType"));

            int row = 9;

            // 追加行数セット
            jx.insertRow(row, rsPayment.getRow() - 2);

            rsPayment.beforeFirst();

            // データセット
            while (rsPayment.next()) {

                jx.setValue(1, row, String.format("%1$tY/%1$tm/%1$td (%1$ta)", rsPayment.getDate("date")));

                jx.setValue(2, row, rsPayment.getInt("cash_sales"));
                jx.setValue(3, row, rsPayment.getInt("card_sales"));
                jx.setValue(4, row, rsPayment.getInt("ecash_sales"));
                jx.setValue(5, row, rsPayment.getInt("gift_sales"));
                jx.setValue(6, row, rsPayment.getInt("bill_value"));
                jx.setValue(7, row, rsPayment.getInt("valueMethodID19"));
                jx.setValue(19, row, rsPayment.getInt("all_discount"));
                row++;

            };
            if (rsPaymentDetail.last()) {
                row = 9;
                rsPaymentDetail.beforeFirst();
                while (rsPaymentDetail.next()) {
                    jx.setValue(8, row, rsPaymentDetail.getInt("totalPaymentValue"));
                    jx.setValue(9, row, rsPaymentDetail.getInt("techSales1"));
                    jx.setValue(10, row, rsPaymentDetail.getInt("totalProductValue2"));
                    jx.setValue(11, row, rsPaymentDetail.getInt("totalProductValue1"));
                    jx.setValue(12, row, 0);
                    jx.setValue(13, row, rsPaymentDetail.getInt("techSales"));
                    jx.setValue(14, row, 0);
                    jx.setValue(15, row, rsPaymentDetail.getInt("totalProductValue2"));
                    jx.setValue(16, row, rsPaymentDetail.getInt("itemSales"));
                    jx.setValue(17, row, 0);
                    //jx.setValue(18, row, rsPaymentDetail.getInt("totalSales"));               
                    row++;
                };
            }
            if (row == 10) {
                jx.removeRow(row);
            }
            jx.openWorkbook();

        } else {

            return false;
        }

        return true;
    }

    /**
     * 店舗ランキング抽出用SQLを取得する。
     *
     * @return 店舗ランキング抽出用SQL
     * @exception Exception
     */
    private String getSelectShopRankingSQL(ReportParameterBean paramBean) throws Exception {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("     sales_date");
        sql.append("     ,coalesce(techSales, 0)         as techSales");

        // 技術客単価（ソート用）
        sql.append("     ,coalesce(techSales, 0) / case when coalesce(techCount, 0) = 0 then 1 else coalesce(techCount, 0) end as techUnitSales");

        sql.append("     ,coalesce(itemSales, 0)         as itemSales");
        sql.append("     ,coalesce(techSales + coalesce(totalPaymentValue, 0) + coalesce(totalProductValue2, 0) + itemSales, 0)        as totalSales");
        sql.append("     ,coalesce(customerCount, 0)     as customerCount");
        sql.append("     ,coalesce(techSales1, 0)         as techSales1");
        sql.append("     ,coalesce(totalPaymentValue, 0)         as totalPaymentValue");
        sql.append("     ,coalesce(totalProductValue1, 0)        as totalProductValue1");
        sql.append("     ,coalesce(totalProductValue2, 0)        as totalProductValue2");
        sql.append(" from");
        sql.append("     (" + getSelectShopRankingValueSQL(paramBean) + ") t");
        sql.append("     order by sales_date");
        return sql.toString();
    }

    /**
     * 店舗ランキングの各売上抽出用SQLを取得する。
     *
     * @param
     * @return 店舗ランキングの各売上抽出用SQL
     * @exception Exception
     */
    private String getSelectShopRankingValueSQL(ReportParameterBean paramBean) throws Exception {
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select a.sales_date, totalCount, customerCount, newCustomerCount, techCount, techSales, techSales1, itemSales, totalSales, totalPaymentValue, totalProductValue1, totalProductValue2 from (");
        sql.append(" select");
        sql.append("      t.sales_date");
        sql.append("     /* 総客数 */");
        sql.append("     ,sum(t.techCount + t.itemOnlyCount) as totalCount");
        sql.append("     /* 会員数 */");
        sql.append("     ,sum( case when c.customer_no <> '0' then 1 else 0 end ) as customerCount");
        sql.append("     /* 新規客数 */");
        sql.append("     ,sum( case when c.customer_no <> '0' and t.itemOnlyCount <> 1 and get_visit_count(t.customer_id,t.shop_id,t.sales_date) = 1 then 1 else 0 end) as newCustomerCount");
        sql.append("     /* 技術客数 */");
        sql.append("     ,sum(t.techCount) as techCount");
        sql.append("     /* 技術売上 */");
        sql.append("     ,sum(t.techSales) as techSales");
        sql.append("     /* ギフト券販売 */");
        sql.append("     ,sum(t.techSales1) as techSales1");
        sql.append("     /* 商品売上 */");
        sql.append("     ,sum(t.itemSales) as itemSales");

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {

            // 税抜き
            sql.append("     /* 全体割引後税抜き金額 */");
            sql.append("     ,sum((select discount_sales_value_no_tax from view_data_sales_valid where shop_id = t.shop_id and slip_no = t.slip_no)) as totalSales");

        } else {

            // 税込み
            sql.append("     /* 全体割引後税込み金額 */");
            sql.append("     ,sum((select discount_sales_value_in_tax from view_data_sales_valid where shop_id = t.shop_id and slip_no = t.slip_no)) as totalSales");
        }

        //ギフト券利用
        sql.append("     /* ギフト券利用 */");
        sql.append("     ,sum((select sum(payment_value) as payment_value from data_payment_detail where shop_id = t.shop_id and slip_no = t.slip_no and payment_method_id = 2 and delete_date IS NULL group by shop_id, slip_no)) as totalPaymentValue");

        //回数券販売
        sql.append("     /* 回数券販売 */");
        sql.append("     ,sum((select sum(product_value) as product_value1 from data_sales_detail where shop_id = t.shop_id and slip_no = t.slip_no and product_division = 5 and delete_date IS NULL group by shop_id, slip_no)) as totalProductValue1");

        //回数券利用
        sql.append("     /* 回数券利用 */");
        sql.append("     ,sum((select sum(product_value * product_num) as product_value2 from data_sales_detail where shop_id = t.shop_id and slip_no = t.slip_no and product_division = 6 and delete_date IS NULL group by shop_id, slip_no)) as totalProductValue2");


        sql.append(" from");
        sql.append("     (");
        sql.append("         select");
        sql.append("              shop_id");
        sql.append("             ,slip_no");
        sql.append("             ,sales_date");
        sql.append("             /* 顧客ID */");
        sql.append("             ,max(customer_id) as customer_id");
        sql.append("             /* 商品のみ客数 */");
        sql.append("             ,case when sum( case when product_division = 2 then 1 else 0 end ) = count(*) then 1 else 0 end as itemOnlyCount");
        sql.append("             /* 技術客数 */");
        sql.append("             ,count( distinct case when product_division = 1 then slip_no else null end ) as techCount");
        // 全体割引
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            sql.append("             /* 技術売上(税抜) */");
            sql.append("             ,sum( case when product_division = 1 and m.technic_class_id <> 8 then discount_detail_value_no_tax else 0 end ) as techSales");
            sql.append("             /* ギフト券販売(税抜) */");
            sql.append("             ,sum( case when product_division = 1 and m.technic_class_id = 8 then discount_detail_value_no_tax else 0 end ) as techSales1");
            sql.append("             /* 商品売上(税抜) */");
            sql.append("             ,sum( case when product_division = 2 then discount_detail_value_no_tax else 0 end ) as itemSales");
        } else {
            // 税込み
            sql.append("             /* 技術売上(税込) */");
            sql.append("             ,sum( case when product_division = 1 and m.technic_class_id <> 8 then discount_detail_value_in_tax else 0 end ) as techSales");
            sql.append("             /* ギフト券販売(税込) */");
            sql.append("             ,sum( case when product_division = 1 and m.technic_class_id = 8 then discount_detail_value_in_tax else 0 end ) as techSales1");
            sql.append("             /* 商品売上(税込) */");
            sql.append("             ,sum( case when product_division = 2 then discount_detail_value_in_tax else 0 end ) as itemSales");
        }

        sql.append("         from");
        sql.append("             view_data_sales_detail_valid a");
        sql.append("             inner join mst_technic m on m.technic_id = a.product_id and m.delete_date IS NULL");
        sql.append("         where");
        sql.append("     shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("           and  sales_date between " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj()));
        sql.append("                             and " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj()));
        if (paramBean.getStaffId() != null) {
            sql.append("                 and (");
            sql.append("                            staff_id = " + paramBean.getStaffId().toString());
            sql.append("                         or detail_staff_id = " + paramBean.getStaffId().toString());
            sql.append("                     )");
        }
        sql.append("         group by");
        sql.append("              shop_id");
        sql.append("             ,slip_no");
        sql.append("             ,sales_date");
        sql.append("     ) t");
        sql.append("     inner join mst_customer c");
        sql.append("             on t.customer_id = c.customer_id");

        sql.append(" group by");
        sql.append("     t.sales_date) a");
        return sql.toString();
    }
    // Thanh start edit 2013/05/02

    private String getSalesReport_LastYearSQL(ReportParameterBean paramBean, boolean isDailyReport, String valueString, String startDate, String endDate) {

        StringBuilder sql = new StringBuilder(1000);

        sql.append(" select");

        if (isDailyReport) {
            sql.append("  date_trunc('day', ds.sales_date + '1 year') as sales_date");
        } else {
            sql.append("  date_trunc('month', case when date_part('day', ds.sales_date) > " + paramBean.getCutoffDay() + " then ds.sales_date + '1 months' else ds.sales_date end) + '1 year' as sales_date");
        }

        sql.append("     ,sum(dsd.tech_value_in_crame) as tech_value_in_crame");
        sql.append("     ,sum(dsd.item_value_in_crame) as item_value_in_crame");
        // 全体割引
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            sql.append(" ,sum(ds.discount_value_no_tax) as discount_value");
        } else {
            // 税込み
            sql.append(" ,sum(ds.discount_value) as discount_value");
        }

        sql.append(" from");
        sql.append("     view_data_sales_valid ds");
        sql.append("         inner join");
        sql.append("             (");
        sql.append("                 select");
        sql.append("                      shop_id");
        sql.append("                     ,slip_no");
        
        //IVS_TTMLoan start edit 2014/07/28 Mashu_売上推移表
        if (paramBean.getCategoryIDList().equals("")) {
            if (paramBean.getStaffId() != null) {
                sql.append("                 ,sum(case when product_division IN(1,3) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as tech_value_in_crame");
                sql.append("                 ,sum(case when product_division IN(2,4) and staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as item_value_in_crame");
            } else {
                sql.append("                 ,sum(case when product_division IN(1,3) then " + valueString + " else 0 end) as tech_value_in_crame");
                sql.append("                 ,sum(case when product_division IN(2,4) then " + valueString + " else 0 end) as item_value_in_crame");
            }
        }else{
             sql.append("                 ,sum (case when product_division IN (1, 3) ");
             if (paramBean.getStaffId() != null) {
                 sql.append("                and staff_id = " + paramBean.getStaffId().toString());
             }
             sql.append("                       AND mst_technic_class.shop_category_id in ("+ paramBean.getCategoryIDList() +") then " + valueString +" else 0 end) as tech_value_in_crame ");
             sql.append("                 ,0 as item_value_in_crame ");
        }
        //IVS_TTMLoan end edit 2014/07/28 Mashu_売上推移表
        
        sql.append("                 from");
        sql.append("                     view_data_sales_detail_valid");
        
        //IVS_TTMLoan start add 2014/07/28 Mashu_売上推移表
        if (!paramBean.getCategoryIDList().equals("")) {
		 sql.append("	    LEFT OUTER JOIN(		");																				
                 sql.append("               mst_technic	");																								
		 sql.append("		INNER JOIN		");																			
                 sql.append("               mst_technic_class	");																								
		 sql.append("		ON  mst_technic_class.technic_class_id = mst_technic.technic_class_id	");																				
		 sql.append("		AND mst_technic_class.delete_date IS NULL)	");																				
                  sql.append("           ON  mst_technic.technic_id = view_data_sales_detail_valid.product_id	");																								
                  sql.append("           AND view_data_sales_detail_valid.product_division IN (1,3)		");																							
        }
        //IVS_TTMLoan end add 2014/07/28 Mashu_売上推移表
        
        sql.append("                 where");
        sql.append("                         shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and sales_date between '" + startDate + "'::timestamp + '-1 year' and '" + endDate + "'::timestamp + '-1 year'");

        if (paramBean.getStaffId() != null) {
            sql.append("                 and (");
            sql.append("                            staff_id = " + paramBean.getStaffId().toString());
            sql.append("                         or detail_staff_id = " + paramBean.getStaffId().toString());
            sql.append("                     )");
        }

        sql.append("                 group by");
        sql.append("                      shop_id");
        sql.append("                     ,slip_no");
        
        //IVS_TTMLoan start add 2014/07/28 Mashu_売上推移表
        if (!paramBean.getCategoryIDList().equals("")) {
             sql.append(" 	union all ");																																							
	     sql.append(" 	    select ");																																							
             sql.append("                shop_id, ");																																										
             sql.append("                slip_no,	");																																									
             sql.append(" 		 0 as technic_value_in_crame, ");																																							
             sql.append(" 	         sum (case when product_division IN (2, 4)" );
             if (paramBean.getStaffId() != null) {
                 sql.append("                and staff_id = " + paramBean.getStaffId().toString());
             }
             sql.append(" 	         AND mst_item_class.shop_category_id in ("+ paramBean.getCategoryIDList() +") then " + valueString +" else 0 end) as item_value_in_crame");
             sql.append("            from	");																																									
             sql.append("                view_data_sales_detail_valid	");																																									
	     sql.append(" 		    LEFT OUTER JOIN(		");																																					
             sql.append("                    mst_item	");																																									
             sql.append(" 		INNER JOIN	");																																					
             sql.append("                    mst_item_class	");																																									
	     sql.append(" 			ON  mst_item_class.item_class_id = mst_item.item_class_id ");																																						
	     sql.append(" 			AND mst_item_class.delete_date IS NULL)	 ");																																			
             sql.append("                 ON  mst_item.item_id = view_data_sales_detail_valid.product_id ");																																										
             sql.append("                 AND view_data_sales_detail_valid.product_division IN (2,4)	");																																								
             sql.append("             where ");																																										
             sql.append("                 shop_id in (" + paramBean.getShopIDList() + ")");																																										
             sql.append("                  and sales_date between '" + startDate + "'::timestamp + '-1 year' and '" + endDate + "'::timestamp + '-1 year'");
             if (paramBean.getStaffId() != null) {
                    sql.append("                 and (");
                    sql.append("                            staff_id = " + paramBean.getStaffId().toString());
                    sql.append("                         or detail_staff_id = " + paramBean.getStaffId().toString());
                    sql.append("                     )");
            }
            sql.append("              group by ");																																										
            sql.append("                     shop_id,	");																																									
            sql.append("                     slip_no	");																																									
        }
        //IVS_TTMLoan end add 2014/07/28 Mashu_売上推移表
        
        sql.append("             ) dsd");
        sql.append("             on ds.shop_id = dsd.shop_id");
        sql.append("            and ds.slip_no = dsd.slip_no");
        sql.append("         left join mst_customer mc");
        sql.append("             using(customer_id)");
         //nhanvt start add 20141006 Bug #31177
        sql.append("                 where");
        sql.append("                         ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and ds.sales_date between '" + startDate + "'::timestamp + '-1 year' and '" + endDate + "'::timestamp + '-1 year'");
        //nhanvt start add 20141006 Bug #31177
        sql.append(" group by");
        if (isDailyReport) {
            sql.append(" date_trunc('day', ds.sales_date + '1 year')");
        } else {
            sql.append(" date_trunc('month', case when date_part('day', ds.sales_date) > " + paramBean.getCutoffDay() + " then ds.sales_date + '1 months' else ds.sales_date end) + '1 year'");
        }

        return sql.toString();
    }

    /**
     * 担当成績(商品)出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean viewStaffReportItem(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        // 店舗情報取得
        HashMap<String, Object> paramMap = new HashMap<String, Object>();
        HashMap<String, String> shopInfo = this.getShopInfo(paramBean.getShopIDList());
        Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
        paramBean.setTaxRate(tax_rate);

        if (!this.setBusinessReportCommonData(cw, paramBean, paramMap)) {
            return false;
        }

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            paramMap.put("TaxType", "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            paramMap.put("TaxType", "税込");
        }

        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
        paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));
        paramMap.put("TargetName", paramBean.getTargetName());

        String itemQuery = "SELECT item_class_id, item_class_name, display_seq FROM mst_item_class ORDER BY display_seq ASC ";

        ResultSetWrapper rs = cw.executeQuery(itemQuery);
        ArrayList<HashMap<String, Object>> technicList = new ArrayList<HashMap<String, Object>>();
        HashMap<String, Object> itemMap = null;

        while (rs.next()) {
            itemMap = new HashMap<String, Object>();
            itemMap.put("item_class_id", String.valueOf(rs.getInt("item_class_id")));
            itemMap.put("item_class_name", rs.getString("item_class_name"));
            technicList.add(itemMap);
        }

        String mainQuery = "select ms.staff_id,\n"
                + "ms.staff_name1, ms.staff_name2,\n"
                + "ds.salesed_tax_out_price,\n"
                + "ds.salesed_tax_in_price,\n"
                + "ds.total_visit_num\n"
                + "from mst_staff ms\n"
                + "left outer join (\n"
                + "select dsd.detail_staff_id,\n"
                + "sum(dsd.discount_detail_value_no_tax) as salesed_tax_out_price,\n"
                + "sum(dsd.discount_detail_value_in_tax) as salesed_tax_in_price,\n"
                + "sum(dsd.product_num) as total_visit_num\n"
                + "from data_sales ds\n"
                + "inner join view_data_sales_detail_valid dsd\n"
                + "on dsd.shop_id = ds.shop_id\n"
                + "and dsd.slip_no = ds.slip_no\n"
                + "and dsd.product_division = 2\n"
                + "inner join mst_item mg\n"
                + "on mg.item_id = dsd.product_id\n"
                + "and mg.delete_date is null\n"
                + "where ds.delete_date is null\n"
                + "and ds.shop_id in (" + paramBean.getShopIDList() + ")\n"
                + "and ds.sales_date between '" + paramBean.getTargetStartDate() + "'\n"
                + "and '" + paramBean.getTargetEndDate() + "'\n"
                + "and mg.item_class_id = ?\n"
                + "group by dsd.detail_staff_id\n"
                + ") ds\n"
                + "on ds.staff_id = ms.staff_id\n"
                + "where ms.delete_date is null\n";

        PreparedStatement stmt = cw.prepareStatement(mainQuery);
        ResultSet subRs = null;

        long totalSalesPrice = 0;
        ArrayList<HashMap> staffList = null;
        ArrayList staffNameList = new ArrayList();
        HashMap reportList = new HashMap();
        Iterator<HashMap<String, Object>> it = technicList.iterator();

        while (it.hasNext()) {
            itemMap = it.next();
            stmt.setInt(1, Integer.parseInt((String) itemMap.get("item_class_id")));
            subRs = stmt.executeQuery();

            staffList = new ArrayList<HashMap>();
            HashMap<String, String> staffSales = null;

            while (subRs.next()) {
                staffSales = new HashMap<String, String>();
                staffSales.put("staff_id", String.valueOf(subRs.getInt("staff_id")));
                staffSales.put("staff_name", subRs.getString("staff_name1") + " " + subRs.getString("staff_name2"));
                staffSales.put("total_product_num", String.valueOf(subRs.getInt("total_visit_num")));

                if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                    staffSales.put("total_product_price", String.valueOf(subRs.getInt("salesed_tax_out_price")));
                    totalSalesPrice += subRs.getInt("salesed_tax_out_price");
                } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                    staffSales.put("total_product_price", String.valueOf(subRs.getInt("salesed_tax_in_price")));
                    totalSalesPrice += subRs.getInt("salesed_tax_in_price");
                }
                staffList.add(staffSales);
            }

            itemMap.put("item_sales_list", staffList);
        }

        // StaffReportBean の初期化
        HashMap tmpMap = null;
        StaffReportBean staffBean = null;
        ArrayList<StaffReportBean> jrBeanList = new ArrayList<StaffReportBean>();

        Iterator staffIt = staffList.iterator();
        while (staffIt.hasNext()) {
            tmpMap = (HashMap) staffIt.next();
            staffBean = new StaffReportBean();
            staffBean.setStaffName((String) tmpMap.get("staff_name"));
            jrBeanList.add(staffBean);
        }

        if (jrBeanList.size() == 0 || totalSalesPrice == 0) {
            return false;
        }

        // PDF 出力回数算出
        int reportCount = technicList.size() / this.STAFF_REPORT_COLUMN_COUNT;
        if ((technicList.size() % this.STAFF_REPORT_COLUMN_COUNT) >= 0) {
            reportCount++;
        }

        ArrayList<String> fileNameList = new ArrayList<String>();

        // PDF出力回数分ループ
        for (int i = 0; i < reportCount; i++) {
            int startTechnicNum = i * this.STAFF_REPORT_COLUMN_COUNT;
            int loopCount = this.STAFF_REPORT_COLUMN_COUNT;
            if ((i + 1) == reportCount) {
                loopCount = technicList.size() % this.STAFF_REPORT_COLUMN_COUNT;
            }

            HashMap<String, Object> reportParameterMap = new HashMap<String, Object>();
            reportParameterMap.putAll(paramMap);

            // Bean を初期化
            for (int l = 0; l < jrBeanList.size(); l++) {
                jrBeanList.get(l).initField();
            }

            // PDF出力技術数分ループ
            ArrayList newStaffList = new ArrayList();
            for (int j = 0; j < loopCount; j++) {
                itemMap = technicList.get(startTechnicNum + j);
                reportParameterMap.put("ClassName" + (j + 1), itemMap.get("item_class_name"));
                newStaffList = (ArrayList) itemMap.get("item_sales_list");

                for (int k = 0; k < newStaffList.size(); k++) {
                    tmpMap = (HashMap) newStaffList.get(k);
                    jrBeanList.get(k).setCustomerCount(j + 1, Integer.valueOf((String) tmpMap.get("total_product_num")));
                    jrBeanList.get(k).setSalesPrice(j + 1, Integer.valueOf((String) tmpMap.get("total_product_price")));
                    jrBeanList.get(k).setTotalSalesPrice(jrBeanList.get(k).getTotalSalesPrice() + Integer.valueOf((String) tmpMap.get("total_product_price")));
                }
            }

            if (reportCount == 1) {
                this.outputReport(this.REPORT_FILE_STAFF_GOODS, jrBeanList, reportParameterMap, true);
            } else if (reportCount > 1) {
                String tmpFileName = "";

                if ((i + 1) == reportCount) {
                    tmpFileName = this.outputReportByCount(this.REPORT_FILE_STAFF_GOODS, jrBeanList, reportParameterMap, i);
                } else {
                    tmpFileName = this.outputReportByCount(this.REPORT_FILE_STAFF_GOODS_CONTINUE, jrBeanList, reportParameterMap, i);
                }

                fileNameList.add(tmpFileName);
            }
        }

        if (reportCount > 1) {
            // PDFファイルを結合して出力
            this.outputConcatReport(this.REPORT_FILE_STAFF_GOODS, fileNameList);
        }

        return true;
    }

    /**
     * 店舗情報取得
     *
     * @return 店舗情報(HashMap)
     */
    public HashMap<String, String> getShopInfo(String shopIDList) throws Exception {
        HashMap<String, String> shopInfo = new HashMap<String, String>();

        ConnectionWrapper cw = SystemInfo.getConnection();

        String query = "SELECT shop_name, cutoff_day FROM mst_shop\n"
                + "where shop_id in (" + shopIDList + ")";
        ResultSetWrapper rs = cw.executeQuery(query);
        if (!rs.next()) {
            // レコードが存在しないためエラー
            return null;
        }
        shopInfo.put("shop_name", rs.getString("shop_name"));
        if (0 == rs.getInt("cutoff_day")) {
            shopInfo.put("cutoff_day", null);
        } else {
            shopInfo.put("cutoff_day", String.valueOf(rs.getInt("cutoff_day")));
        }

        return shopInfo;
    }

    /**
     * スタッフ名取得
     *
     * @paramBean レポートパラメータBean
     * @return スタッフ名
     */
    public String getStaffName(ReportParameterBean paramBean) throws Exception {
        String staff_name = "";

        ConnectionWrapper cw = SystemInfo.getConnection();
        String query = "SELECT staff_name1,staff_name2 FROM mst_staff WHERE staff_id = " + paramBean.getStaffId();
        ResultSetWrapper rs = cw.executeQuery(query);
        if (!rs.next()) {
            // レコードが存在しないためエラー
            return "";
        }
        staff_name = rs.getString("staff_name1") + " " + rs.getString("staff_name2");

        return staff_name;
    }

    /**
     * 技術、商品売上げの取得
     *
     * @param paramBean レポートパラメータBean
     * @return 売上情報(HashMap)
     */
    private HashMap<String, Object> getSalesStatusByShop(ReportParameterBean paramBean) throws Exception {
        HashMap<String, Object> salesStatus = new HashMap<String, Object>();

        try {
            ConnectionWrapper cw = SystemInfo.getConnection();

            String sql = "select sum(case dsd.product_division\n"
                    + "when 1 then "
                    + (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK
                    ? "dsd.discount_detail_value_no_tax"
                    : "dsd.discount_detail_value_in_tax") + "\n"
                    + "else 0 end) as technic_value,\n"
                    + "sum(case dsd.product_division\n"
                    + "when 2 then "
                    + (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK
                    ? "dsd.discount_detail_value_no_tax"
                    : "dsd.discount_detail_value_in_tax") + "\n"
                    + "else 0 end) as item_value\n"
                    + "from data_sales ds\n"
                    + "inner join view_data_sales_detail_valid dsd\n"
                    + "on dsd.shop_id = ds.shop_id\n"
                    + "and dsd.slip_no = ds.slip_no\n"
                    + "where ds.delete_date is null\n"
                    + "and ds.shop_id in (" + paramBean.getShopIDList() + ")\n"
                    + "and ds.sales_date between '" + paramBean.getTargetStartDate() + "'\n"
                    + "and '" + paramBean.getTargetEndDate() + "'\n";

            ResultSetWrapper rs = cw.executeQuery(sql);

            if (rs.next()) {
                salesStatus.put("TechnicSummaryPrice", rs.getString("technic_value"));
                salesStatus.put("ItemSummaryPrice", rs.getString("item_value"));
                Integer total = rs.getInt("technic_value") + rs.getInt("item_value");
                salesStatus.put("TechnicSummaryRate", Double.toString(total == 0 ? 0d : rs.getDouble("technic_value") / total * 100d));
                salesStatus.put("ItemSummaryRate", Double.toString(total == 0 ? 0d : rs.getDouble("item_value") / total * 100d));
                salesStatus.put("TotalSummaryPrice", total.toString());
            } else {
            }

        } catch (Exception e) {
            throw e;
        }

        return salesStatus;
    }

    /**
     * PDF出力
     *
     * @param reportXmlFile 出力対象レポートテンプレート名
     * @param collection 出力対象データ
     * @param paramMap マッピングパラメータ
     * @param isViewer レビュー表示可否
     * @return true:成功 false:失敗
     */
    private boolean outputReport(String reportXmlFile, Collection collection, HashMap paramMap, boolean isViewer) {
        try {
            JasperReport jasperReport = null;
            InputStream report = ReportLogic.class.getResourceAsStream(
                    this.REPORT_RESOURCE_PATH + reportXmlFile + this.REPORT_XML_FILE_EXT);

            if (".jrxml".equals(this.REPORT_XML_FILE_EXT)) {
                jasperReport = JasperCompileManager.compileReport(report);
            } else if (".jasper".equals(this.REPORT_XML_FILE_EXT)) {
                jasperReport = (JasperReport) JRLoader.loadObject(report);
            }

            JasperPrint print = JasperFillManager.fillReport(jasperReport, paramMap, new JRBeanCollectionDataSource(collection));

            SimpleDateFormat format = new SimpleDateFormat("yyyyMMddhms");
            String dateString = format.format(new java.util.Date());

            String exportFile = ReportManager.getExportPath() + reportXmlFile + dateString + ".pdf";
            JasperExportManager.exportReportToPdfFile(print, exportFile);

            // 出力したPDFを閲覧
            if (isViewer) {
                Runtime runtime = Runtime.getRuntime();
                runtime.exec(ReportManager.getPdfViewerPath() + " " + exportFile);
            }
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            return false;
        }

        return true;
    }

    /**
     * PDF出力
     *
     * @param reportXmlFile 出力対象レポートテンプレート名
     * @param collection 出力対象データ
     * @param paramMap マッピングパラメータ
     * @return true:成功 false:失敗
     */
    private boolean outputReport(String reportXmlFile, Collection collection, HashMap paramMap) {
        return this.outputReport(reportXmlFile, collection, paramMap, false);
    }

    /**
     * PDF出力(分割用)
     *
     * @param reportXmlFile 出力対象レポートテンプレート名
     * @param collection 出力対象データ
     * @param paramMap マッピングパラメータ
     * @param reportNumber 帳票番号
     * @return true:成功 false:失敗
     */
    private String outputReportByCount(String reportXmlFile, Collection collection, HashMap paramMap, int reportNumber) {
        String exportFile = "";

        try {
            JasperReport jasperReport = null;
            InputStream report = ReportLogic.class.getResourceAsStream(this.REPORT_RESOURCE_PATH + reportXmlFile + this.REPORT_XML_FILE_EXT);

            if (".jrxml".equals(this.REPORT_XML_FILE_EXT)) {
                jasperReport = JasperCompileManager.compileReport(report);
            } else if (".jasper".equals(this.REPORT_XML_FILE_EXT)) {
                jasperReport = (JasperReport) JRLoader.loadObject(report);
            }
            JasperPrint print = JasperFillManager.fillReport(jasperReport, paramMap, new JRBeanCollectionDataSource(collection));

            SimpleDateFormat format = new SimpleDateFormat("yyyyMMddhms");
            String dateString = format.format(new java.util.Date());

            exportFile = ReportManager.getExportPath() + reportXmlFile + dateString + "-" + reportNumber + ".pdf";
            JasperExportManager.exportReportToPdfFile(print, exportFile);

            File file = new File(exportFile);
            String path = file.getAbsolutePath();

            exportFile = path;

        } catch (Exception e) {
            return "";
        }

        return exportFile;
    }

    /**
     * PDF統合
     *
     * @param reportFile 出力対象レポートテンプレート名
     * @param fileNameList 分割ファイル名リスト
     * @return true:成功 false:失敗
     */
    public static boolean outputConcatReport(String reportFile, ArrayList<String> fileNameList) {
        try {
            String tmpFileName = "";
            String[] argments = new String[fileNameList.size() + 1];

            Iterator it = fileNameList.iterator();
            int fileNumber = 0;

            while (it.hasNext()) {
                tmpFileName = (String) it.next();

                if (null != tmpFileName && !"".equals(tmpFileName)) {
                    argments[fileNumber] = tmpFileName;
                    fileNumber++;
                }
            }

            // PDF 出力ファイル名
            SimpleDateFormat format = new SimpleDateFormat("yyyyMMddhms");
            String exportFileName = ReportManager.getExportPath() + reportFile + format.format(new java.util.Date()) + ".pdf";
            argments[fileNumber] = exportFileName;

            // PDF 結合実行（iText）
            ConcatPdf concatPdf = new ConcatPdf();
            concatPdf.main(argments);

            Runtime runtime = Runtime.getRuntime();
            runtime.exec(ReportManager.getPdfViewerPath() + " " + exportFileName);
        } catch (Exception e) {
            return false;
        }

        return true;
    }

    /**
     * 担当別技術成績＜技術売上＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportTechnicSales(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);


        //明細
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      c.display_seq");
        sql.append("     ,c.staff_no");
        sql.append("     ,coalesce(a.staff_id, b.staff_id) as staff_id");
        sql.append("     ,case when c.staff_id is null then '担当なし' else c.staff_name1 || ' ' || c.staff_name2 end as staffname");
        sql.append("     ,a.MainCats_value");
        sql.append("     ,a.MainCats_Num");
        sql.append("     ,a.MainCatsNomination_value");
        sql.append("     ,a.MainCatsNomination_Num");
        sql.append("     ,b.Hodocojuts_value");
        sql.append("     ,b.Hodocojuts_Num");
        sql.append("     ,b.HodocojutsNomination_value");
        sql.append("     ,b.HodocojutsNomination_Num");
        sql.append("     ,b.Approached_value");
        sql.append("     ,b.Approached_Num");
        sql.append("     ,a.complaintCount");
        sql.append(" from");
        sql.append("     (");
        sql.append("         select");
        //IVS_LVTu start edit 2015/03/09 Bug #35218 [gb]TB版帳票全般
        //sql.append("              coalesce(staff_id, 99999) as staff_id");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("              coalesce(dsmt.staff_id, 99999) as staff_id");
        }else{
            sql.append("              coalesce(a.staff_id, 99999) as staff_id");
        }
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("             ,sum(case when a.product_division = 1 AND dsmt.shop_category_id = mtc.shop_category_id then " + makeValueString(paramBean) + " else 0 end) as MainCats_value");
        }
        else {
            sql.append("             ,sum(case when a.product_division = 1 then " + makeValueString(paramBean) + " else 0 end) as MainCats_value");
        }
        //sql.append("             ,count(distinct case when product_division in (1, 3) then slip_no end) as MainCats_Num");
        sql.append("             ,count(distinct case when a.product_division in (1, 3) then a.slip_no end) as MainCats_Num");
        //sql.append("             ,sum(case when product_division = 1 and designated_flag = 't' then " + makeValueString(paramBean) + " else 0 end) as MainCatsNomination_value");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("             ,sum(case when a.product_division = 1 AND dsmt.shop_category_id = mtc.shop_category_id and a.designated_flag = 't' then " + makeValueString(paramBean) + " else 0 end) as MainCatsNomination_value");
        }
        else {
            sql.append("             ,sum(case when a.product_division = 1 and a.designated_flag = 't' then " + makeValueString(paramBean) + " else 0 end) as MainCatsNomination_value");
        }
        //sql.append("             ,count(distinct case when product_division in (1, 3) and designated_flag = 't' then slip_no end) as MainCatsNomination_Num");
        sql.append("             ,count(distinct case when a.product_division in (1, 3) and a.designated_flag = 't' then a.slip_no end) as MainCatsNomination_Num");
        //sql.append("             ,count(distinct case when product_division = 3 then slip_no end) as complaintCount");
        sql.append("             ,count(distinct case when a.product_division = 3 then a.slip_no end) as complaintCount");
        //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("         from");
        sql.append("             view_data_sales_detail_valid a");
        //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("             inner join data_sales_detail dsd using(shop_id, slip_no ,product_id,slip_detail_no)");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = a.shop_id AND dsmt.slip_no = a.slip_no ");
            //IVS_LVTu start add 2015/06/24 Bug #38359
            sql.append("     and dsmt.shop_category_id in( " + paramBean.getCategoryIDList()+ ")	\n ");
            sql.append("     INNER JOIN mst_technic mt ON a.product_id = mt.technic_id ");
            sql.append("     AND a.product_division IN(1,3) ");
            sql.append("     INNER JOIN mst_technic_class mtc ON mtc.technic_class_id = mt.technic_class_id ");
            //IVS_LVTu end add 2015/06/24 Bug #38359
        }
        //Luc end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("         where");
        //sql.append("                 shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 a.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("             and sales_date between '" + paramMap.get("TargetStartDate") + "' and '" + paramMap.get("TargetEndDate") + "'");

        //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists (	\n");
            sql.append("         select 1 from \n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and a.product_division = dsd1.product_division and dsd1.product_division in(1,3)\n");
            sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
            sql.append("         where dsd1.slip_no = a.slip_no and dsd1.shop_id = a.shop_id and dsd1.slip_detail_no = a.slip_detail_no \n");
            sql.append("         and mtc.shop_category_id in( " + paramBean.getCategoryIDList() + ")	\n");
            sql.append("         ) 	\n");
            sql.append(" )\n");
        }
        //Luc end add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）

        sql.append("         group by");
        //IVS_LVTu start edit 2015/03/11 Bug #35218 [gb]TB版帳票全般
        //sql.append("             staff_id");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("             dsmt.staff_id");
        }else{
            sql.append("             a.staff_id");
        }
        //IVS_LVTu end edit 2015/03/11 Bug #35218 [gb]TB版帳票全般
        sql.append("     ) a");
        sql.append("     full outer join");
        sql.append("     (");
        sql.append("     select staff_id,sum(hodocojuts_value) as hodocojuts_value,sum(hodocojuts_num) as hodocojuts_num,sum(hodocojutsnomination_value) as hodocojutsnomination_value,sum(hodocojutsnomination_num) as hodocojutsnomination_num,sum(approached_value) as approached_value,sum(approached_num) as approached_num from (");
        sql.append("         select");
        //IVS_LVTu start edit 2015/03/09 Bug #35218 [gb]TB版帳票全般
        //sql.append("              coalesce(detail_staff_id, 99999) as staff_id");
//        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
//            sql.append("              coalesce(dsmt.staff_id, 99999) as staff_id");
//        }else{
        //sql.append("              coalesce(detail_staff_id, 99999) as staff_id");
        sql.append("              coalesce(dsd.staff_id, 99999) as staff_id");
//        }
        sql.append("             ,sum(case when a.product_division = 1 then " + makeValueString(paramBean) + " else 0 end) as Hodocojuts_value");
        //sql.append("             ,count(distinct case when product_division = 1 then slip_no end) as Hodocojuts_Num");
        sql.append("             ,count(distinct case when a.product_division = 1 then a.slip_no end) as Hodocojuts_Num");
        sql.append("             ,sum(case when a.product_division = 1 and detail_designated_flag = 't' then " + makeValueString(paramBean) + " else 0 end) as HodocojutsNomination_value");
        //sql.append("             ,count(distinct case when product_division = 1 and detail_designated_flag = 't' then slip_no end) as HodocojutsNomination_Num");
        sql.append("             ,count(distinct case when a.product_division = 1 and detail_designated_flag = 't' then a.slip_no end) as HodocojutsNomination_Num");
        sql.append("             ,sum(case when a.product_division = 1 and detail_approached_flag = 't' then " + makeValueString(paramBean) + " else 0 end) as Approached_value");
        //sql.append("             ,count(distinct case when product_division = 1 and detail_approached_flag = 't' then slip_no end) as Approached_Num");
        sql.append("             ,count(distinct case when a.product_division = 1 and detail_approached_flag = 't' then a.slip_no end) as Approached_Num");
        //IVS_LVTu end edit 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("         from");
        sql.append("             view_data_sales_detail_valid a");
        //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        //IVS_LVTu start add 2015/06/24 Bug #38359
        sql.append("             inner join data_sales_detail dsd using(shop_id, slip_no ,product_id,slip_detail_no)");
        //IVS_LVTu start add 2015/06/24 Bug #38359
//        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
//                sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = a.shop_id AND dsmt.slip_no = a.slip_no ");
//        }
        //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("         where");
        //sql.append("                 shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 a.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("             and sales_date between '" + paramMap.get("TargetStartDate") + "' and '" + paramMap.get("TargetEndDate") + "'");
        
         //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists (	\n");
            sql.append("         select 1 from \n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and a.product_division = dsd1.product_division and dsd1.product_division in(1,3)\n");
            sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
            sql.append("         where dsd1.slip_no = a.slip_no and dsd1.shop_id = a.shop_id and dsd1.slip_detail_no = a.slip_detail_no \n");
            sql.append("         and mtc.shop_category_id in( " + paramBean.getCategoryIDList()+ ")	\n");
            sql.append("         ) 	\n");
            sql.append(" )\n");
        }
        //Luc end add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        
        sql.append("         group by");
        //IVS_LVTu start edit 2015/03/11 Bug #35218 [gb]TB版帳票全般
        //sql.append("             detail_staff_id");
//        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
//            sql.append("             dsmt.staff_id");
//        }else{
        //sql.append("             detail_staff_id");
        sql.append("             dsd.staff_id");
//        }
        //IVS_LVTu end edit 2015/03/11 Bug #35218 [gb]TB版帳票全般
        sql.append("     ) b");
        sql.append("     group by staff_id) b");
        sql.append("     using (staff_id)");
        sql.append("     left outer join mst_staff c");
        sql.append("                  on (c.staff_id = coalesce(a.staff_id, b.staff_id))");
        sql.append(" order by");
        sql.append("      case when c.display_seq is null then 1 else 0 end");
        sql.append("     ,c.display_seq");
        sql.append("     ,lpad(c.staff_no, 10, '0')");
        sql.append("     ,coalesce(a.staff_id, b.staff_id)");

            PreparedStatement stmt = cw.prepareStatement(sql.toString());
        ResultSet rs = null;
        rs = stmt.executeQuery();

        if (rs.last()) {

            //IVS_LVTu start edit 2016/02/29 New request #48794
            JExcelApi jx = new JExcelApi("スタッフ成績_担当別技術成績_技術成績");
            jx.setTemplateFile("/reports/スタッフ成績_担当別技術成績_技術成績.xls");
            //IVS_LVTu end edit 2016/02/29 New request #48794

            // ヘッダ
            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getTargetName());
            Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
            paramBean.setTaxRate(tax_rate);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 6, "税抜");
            } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                jx.setValue(2, 6, "税込");
            }

            if(paramBean.getUseShopCategory()==1){
                 jx.setValue(1, 7, "業態分類：");
                 jx.setValue(2, 7, paramBean.getCategoryNameList());
            }
            int row = 10;

            // 追加行数セット
            jx.insertRow(row, rs.getRow() - 1);

            rs.first();

            // データセット
            do {

                jx.setValue(1, row, rs.getString("staffname"));
                jx.setValue(2, row, rs.getInt("MainCats_value"));
                jx.setValue(3, row, rs.getLong("MainCats_Num"));
                jx.setValue(5, row, rs.getInt("MainCatsNomination_value"));
                jx.setValue(6, row, rs.getLong("MainCatsNomination_Num"));
                jx.setValue(8, row, rs.getInt("Hodocojuts_value"));
                jx.setValue(9, row, rs.getLong("Hodocojuts_Num"));
                jx.setValue(11, row, rs.getInt("HodocojutsNomination_value"));
                jx.setValue(12, row, rs.getLong("HodocojutsNomination_Num"));
                jx.setValue(14, row, rs.getInt("Approached_value"));
                jx.setValue(15, row, rs.getLong("Approached_Num"));
                jx.setValue(17, row, rs.getLong("complaintCount"));

                row++;

            } while (rs.next());

            jx.removeRow(row);

            jx.openWorkbook();

        } else {

            return false;
        }

        return true;

    }

    /**
     * 担当別技術成績＜コース契約成績＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportCourseContract(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        boolean flag = false;
        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        //スタッフリストを取得する
        //IVS_LVTu start add 2015/06/19 Bug #37685
        List<MstStaff> staffList = getStaffList(cw, paramBean);
        //true is data_contract else data_contract_digestion
        //List<MstStaff> staffList = getStaff(cw, paramBean, true);
        //IVS_LVTu end add 2015/06/19 Bug #37685
        List<MstStaff> staffListNoContract = getStaffNoContract(cw, paramBean, staffList);

        //スタッフ別契約成績リスト取得
        Collection<StaffCourseContractBean> courseContractList = getCourseContractList(cw, paramBean);

        //スタッフ契約顧客数取得
        Map<Integer, Integer> staffContractCustomerMap = getStaffContractCustomerMap(cw, paramBean);

        //技術・商品売上を取得
        Map<Integer, Map<String, Integer>> staffSalesResultMap = getStaffSalesResult(cw, paramBean);
        
        //IVS_LVTu start edit 2016/01/12 New request #46346
        //入金売上
        Map<Integer, Integer> staffSalesPayment = getStaffSalesPayment(cw, paramBean, staffList);

        JExcelApi jx = new JExcelApi("スタッフ成績_担当別技術成績_コース契約成績");
        //テンプレートとなるファイルパスをセット
        jx.setTemplateFile("/reports/スタッフ成績_担当別技術成績_コース契約成績.xls");

        // ヘッダ
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
        jx.setValue(2, 5, paramBean.getTargetName());
        Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
        paramBean.setTaxRate(tax_rate);
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            jx.setValue(2, 6, "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            jx.setValue(2, 6, "税込");
        }
        if(paramBean.getUseShopCategory()==1){
                 jx.setValue(1, 7, "業態分類：");
                 jx.setValue(2, 7, paramBean.getCategoryNameList());
        }

        //TODO コース契約取得処理を記述

        int baseRow = 10;
        Map<Integer, Integer> staffRowMap = new HashMap<Integer, Integer>();
        //スタッフ数分行追加
        if((staffList.size() + staffListNoContract.size()) > staffSalesPayment.size()) {
            jx.insertRow(baseRow, (staffList.size() + staffListNoContract.size()));
        }else {
            jx.insertRow(baseRow, staffSalesPayment.size());
        }

        //スタッフ情報出力
        int staffRow = baseRow;
        for (MstStaff staff : staffList) {
            jx.setValue(1, staffRow, staff.getStaffName(0) + " " + staff.getStaffName(1));
            staffRowMap.put(staff.getStaffID(), Integer.valueOf(staffRow));
            staffRow++;
        }
        jx.removeRow(staffRow);
        jx.removeRow(staffRow);

        //コース分類数分列追加
        int baseColumn = 2;
        int headerBaseRowTop = 8;
        int headerBaseRowBottom = 9;
        CellView cellView1 = null; //人数のカラム
        CellView cellView2 = null; //売上のカラム

        if (!courseContractList.isEmpty()) {
            cellView1 = jx.getTargetSheet().getColumnView(baseColumn);
            cellView2 = jx.getTargetSheet().getColumnView(baseColumn + 1);
        }

        NumberFormat nf = NumberFormat.getInstance();
        DecimalFormat df = new DecimalFormat("###.0");

        for (int i = 0; i < courseContractList.size(); i++) {
            //追加する列の位置はベースとなる行の２つ隣り
            jx.insertColumn(baseColumn + 2, 2);
            jx.getTargetSheet().setColumnView(baseColumn + 2, cellView1);
            jx.getTargetSheet().setColumnView(baseColumn + 3, cellView2);

            jx.mergeCells(baseColumn + 3, headerBaseRowTop, baseColumn + 4, headerBaseRowTop);
            jx.setValue(baseColumn + 3, headerBaseRowBottom, "人数");
            for (int j = 0, row = baseRow; j < staffList.size(); j++, row++) {
                jx.setValue(baseColumn + 3, row, 0);
            }
        }

        //コース分類ごとの成績を出力
        for (StaffCourseContractBean bean : courseContractList) {
            //コース分類名
            jx.setValue(baseColumn + 1, headerBaseRowTop, bean.getCourseClassName());
            for (StaffCourseContractResultBean contractBean : bean.getCourseContractResultList()) {
                Integer row = staffRowMap.get(contractBean.getStaffId());

               
                try {
                jx.setValue(baseColumn + 1, row, contractBean.getTotalSalesNum().intValue());
                }catch(Exception e) {
                     //人数
                    System.out.print("test"+contractBean.getTotalSalesNum());
                    System.out.print("test"+contractBean.getTotalSalesNum());
                }
                
                //売上
                jx.setValue(baseColumn + 2, row, contractBean.getTotalSalesValue().intValue());
            }

            baseColumn += 2;
        }
        jx.removeColumn(baseColumn + 1);
        jx.removeColumn(baseColumn + 1);
        jx.removeColumn(baseColumn + 1);
        jx.removeColumn(baseColumn + 1);

        int baseTargetColumn = 3;

        //契約客数のカラムに合計値をセットする
        //（エクセルの数式ではCtrl+Shift+Enterを実行しないとだめだった）
        for (MstStaff staff : staffList) {
            Integer row = staffRowMap.get(staff.getStaffID());
            int customerNum = 0;
            //IVS_LVTu start edit 2015/06/22 Bug #37685
//            if (staffContractCustomerMap.containsKey(staff.getStaffID())) {
//                customerNum = staffContractCustomerMap.get(staff.getStaffID());
//            }
            for (StaffCourseContractBean bean : courseContractList) {
                for (StaffCourseContractResultBean contractBean : bean.getCourseContractResultList()) {
                    if ( contractBean.getStaffId().equals(staff.getStaffID())) {
                        customerNum = customerNum + contractBean.getTotalSalesNum();
                        flag = true;
                    }
                }
            }
            //IVS_LVTu end edit 2015/06/22 Bug #37685

            //契約客数に値をセット
            jx.setValue(2, row, customerNum);

            if (staffSalesResultMap.containsKey(staff.getStaffID())) {
                Map<String, Integer> salesResultMap = staffSalesResultMap.get(staff.getStaffID());
                //技術売上に値をセット
                jx.setValue(baseTargetColumn + courseContractList.size() * 2 + 1, row, salesResultMap.get("TechnicTotal"));
                //商品売上に値をセット
                jx.setValue(baseTargetColumn + courseContractList.size() * 2 + 2, row, salesResultMap.get("ItemTotal"));
            }
        }

        //各合計値をセット
        for (int i = 0, row = baseRow; i < staffList.size(); i++, row++) {
            int totalStaffSalesValue = 0;
            for (int j = 0; j < courseContractList.size(); j++) {
                int targetColumn = baseTargetColumn + j * 2;
                //売上の合計
                int courseClassSalesValue = 0;
                try {
                    String salesValue = jx.getValue(targetColumn + 1, row);
                    if (salesValue != null) {
                        salesValue = salesValue.replaceAll(",", "");
                    }
                    courseClassSalesValue = Integer.parseInt(salesValue);
                } catch (NumberFormatException e) {
                }

                totalStaffSalesValue += courseClassSalesValue;
            }

            //契約売上をセット
            jx.setValue(baseTargetColumn + courseContractList.size() * 2 + 3, row, Integer.valueOf(totalStaffSalesValue));
            
            //入金売上
            if (staffSalesPayment.get(staffList.get(i).getStaffID()) != null){
                jx.setValue(baseTargetColumn + courseContractList.size() * 2 + 6, row, Integer.valueOf(staffSalesPayment.get(staffList.get(i).getStaffID())));
            }else {
                jx.setValue(baseTargetColumn + courseContractList.size() * 2 + 6, row, Integer.valueOf(0));
            }
            
        }
        
        for (int i = 0, row = (baseRow + staffList.size()); i < staffListNoContract.size(); i++, row++) {
            //IVS_LVTu start add 2016/02/16 Bug #48340
            if (staffSalesResultMap.containsKey(staffListNoContract.get(i).getStaffID())) {
                Map<String, Integer> salesResultMap = staffSalesResultMap.get(staffListNoContract.get(i).getStaffID());
                //技術売上に値をセット
                jx.setValue(baseTargetColumn + courseContractList.size() * 2 + 1, row, salesResultMap.get("TechnicTotal"));
                //商品売上に値をセット
                jx.setValue(baseTargetColumn + courseContractList.size() * 2 + 2, row, salesResultMap.get("ItemTotal"));
            }
            //IVS_LVTu end add 2016/02/16 Bug #48340
            //入金売上
            jx.setValue(1, row, staffListNoContract.get(i).getStaffName(0) + " " + staffListNoContract.get(i).getStaffName(1));
            if (staffSalesPayment.get(staffListNoContract.get(i).getStaffID()) != null){
                jx.setValue(baseTargetColumn + courseContractList.size() * 2 + 6, row, Integer.valueOf(staffSalesPayment.get(staffListNoContract.get(i).getStaffID())));
            }else {
                jx.setValue(baseTargetColumn + courseContractList.size() * 2 + 6, row, Integer.valueOf(0));
            }
        }
        //IVS_LVTu end edit 2016/01/12 New request #46346

        //ファイル出力
        if ( flag ) {
            jx.openWorkbook();
        }else
        {
            return false;
        }

        return true;
    }
    
    //IVS_LVTu start add 2016/01/12 New request #46346
    private Map<Integer, Integer> getStaffSalesPayment(ConnectionWrapper cw,ReportParameterBean paramBean,List<MstStaff> staffList)  throws SQLException {
        StringBuilder sql = new StringBuilder();
        //コース集計
        //IVS_LVTu start edit 2016/02/04 Bug #47392
        //Luc start edit 20160301 #48879
        //sql.append(" SELECT ds.staff_id, ");
        sql.append(" SELECT coalesce(ds.staff_id,-1) as staff_id, ");
        //Luc start edit 20160301 #48879
        sql.append(" (sum((select SUM(dpd1.payment_value) from data_payment_detail dpd1 where dpd1.shop_id = ds.shop_id and ds.slip_no = dpd1.slip_no ");
        sql.append(" and ds.payment_no = dpd1.payment_no))) AS total_value,  ");
        sql.append(" sum(change_value) as change_value ");
        sql.append(" FROM (");
        //sql.append(" SELECT vdsv.staff_id, sum(dpd.payment_value) as total_value");
        //IVS_LVTu start edit 2016/01/29 Bug #47392
        sql.append("SELECT  vdsv.staff_id, ");
	sql.append(" vdsv.shop_id, ");
	sql.append(" vdsv.slip_no, ");
	sql.append(" dp.payment_no, ");
        sql.append(" sum(coalesce(dp.change_value, 0)) as change_value");
        sql.append("    FROM data_sales vdsv");
        sql.append("     inner join data_payment dp using(shop_id,slip_no)");
        //sql.append("     inner join data_payment_detail dpd using(shop_id,slip_no,payment_no)");
        sql.append("     WHERE vdsv.shop_id IN (" + paramBean.getShopIDList() + ")");
        sql.append("     and vdsv.delete_date is null ");
        sql.append("     AND dp.payment_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'"); 
        //sql.append("     group by vdsv.staff_id");
        //IVS_LVTu start edit 2016/03/21 Bug #49175
        sql.append("     and dp.delete_date is null ");
        sql.append("     AND EXISTS");
        sql.append("     (SELECT 1");
        sql.append("      FROM view_data_sales_valid");
        sql.append("      WHERE shop_id = dp.shop_id");
        sql.append("        AND slip_no = dp.slip_no");
        sql.append("        AND sales_date IS NOT NULL)");
        //IVS_LVTu end edit 2016/03/21 Bug #49175
        sql.append("     GROUP BY vdsv.staff_id, vdsv.shop_id , vdsv.slip_no , dp.payment_no) ds ");
        sql.append("     group by ds.staff_id ");
        
        ResultSetWrapper rs = cw.executeQuery(sql.toString());
        
        Map<Integer, Integer> staffPayment = new HashMap<Integer, Integer>();
        while (rs.next()) {
            //IVS_LVTu start edit 2016/02/16 Bug #48340
            if (rs.getInt("staff_id") != 0 && (rs.getInt("total_value") != 0 || rs.getInt("change_value") != 0)) {
            //IVS_LVTu end edit 2016/02/16 Bug #48340
                Integer totalValue = rs.getInt("total_value") - rs.getInt("change_value");
                //staffPayment.put(rs.getInt("staff_id"), rs.getInt("total_value"));
                staffPayment.put(rs.getInt("staff_id"), totalValue);
            }
        }
        //IVS_LVTu end edit 2016/02/04 Bug #47392

        return staffPayment;
    }
    
    private List<MstStaff> getStaffNoContract(ConnectionWrapper cw, ReportParameterBean paramBean, List<MstStaff> staffList) throws SQLException {
        StringBuilder sql = new StringBuilder();
        //Luc start edit 20160301 #48879
        //sql.append("select distinct msts.staff_id, coalesce(msts.staff_name1,'') as staff_name1, coalesce(msts.staff_name2,'') as staff_name2, vdsv.shop_id,msts.staff_no");
        sql.append("select distinct coalesce(msts.staff_id,-1) as staff_id, coalesce(msts.staff_name1,'担当なし') as staff_name1, coalesce(msts.staff_name2,'') as staff_name2, vdsv.shop_id,msts.staff_no");
        //Luc start edit 20160301 #48879
        sql.append("    FROM data_sales vdsv");
        sql.append("     inner join data_payment dp using(shop_id,slip_no)");
        sql.append("     inner join data_payment_detail dpd using(shop_id,slip_no,payment_no)");
        sql.append("     inner join mst_staff msts on msts.staff_id = vdsv.staff_id ");
        sql.append("     WHERE vdsv.shop_id IN (" + paramBean.getShopIDList() + ")");
        sql.append("     and vdsv.delete_date is null ");
        sql.append("     AND dp.payment_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'"); 
        if (staffList.size() > 0) {
            sql.append("     and msts.staff_id not in ( ");
            for ( int i = 0;i < staffList.size();i ++) {
                if(i == 0) {
                    sql.append(" "+staffList.get(i).getStaffID()+"");
                }else {
                    sql.append(","+staffList.get(i).getStaffID()+"");
                }
            }
            sql.append(" ) ");
        }
        
        ResultSetWrapper rs = cw.executeQuery(sql.toString());

        List<MstStaff> dsStaff = new ArrayList<MstStaff>();
        while (rs.next()) {
            MstStaff staff = new MstStaff();
            staff.setShopID(rs.getInt("shop_id"));
            staff.setStaffID(rs.getInt("staff_id"));
            staff.setStaffNo(rs.getString("staff_no"));
            staff.setStaffName(new String[]{rs.getString("staff_name1"), rs.getString("staff_name2")});

            if (staff.getStaffID() != 0) {
                dsStaff.add(staff);
            }
        }

        return dsStaff;
    }
    //IVS_LVTu end add 2016/01/12 New request #46346

    /**
     * コース契約の集計結果を返す
     *
     * @param cw
     * @param paramBean
     * @return
     * @throws SQLException
     */
    private Collection<StaffCourseContractBean> getCourseContractList(ConnectionWrapper cw, ReportParameterBean paramBean) throws SQLException {
        StringBuilder sql = new StringBuilder();
        //IVS_LVTu start edit 2016/02/18 New request #47781
        //コース集計
        sql.append(" select");
        sql.append("     mcc.display_seq as mcc_display_seq");
        sql.append("     ,mcc.course_class_id");
        sql.append("     ,mcc.course_class_name");
        sql.append("     ,coalesce(data.staff_id,-1) as staff_id");
        sql.append("     ,count(distinct data.customer_id) as total_sales_num");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            sql.append("     ,coalesce(ceil(sum(data.product_value1) / (1.0 + get_tax_rate(max(data.sales_date)))),0) as total_sales_value");
        } else {
            // 税込み
            sql.append("     ,coalesce(sum(data.product_value1),0) as total_sales_value");
        }
        sql.append(" from");
        sql.append(" (SELECT dc.product_id, ");
        sql.append("         dc.product_value, ");
        sql.append("         dc.customer_id, ");
        sql.append("         dc.sales_date, ");
        sql.append("         dc.staff_name1, ");
        sql.append("         dc.staff_name2, ");
        sql.append("         CASE ");
        sql.append("             WHEN data2.staff_id IS NOT NULL THEN data2.staff_id ");
        sql.append("             ELSE dc.staff_id");
        sql.append("         END AS staff_id, ");
        sql.append("         CASE ");
        sql.append("             WHEN data2.rate <> 0 THEN dc.product_value*data2.rate::float /100 :: int ");
        sql.append("             ELSE dc.product_value ");
        sql.append("         END AS product_value1 ");
        
        sql.append("     from(");
        sql.append("         select");
        if(paramBean.getCategoryIDList() != null && !paramBean.getCategoryIDList().equals("")){
            // 2016/09/08 GB MOD #54536 Start
            // 契約金額は契約変更の場合差額を取得
            //sql.append("         distinct dsm.staff_id,dc2.product_id,dc2.product_value, ds2.customer_id, ds2.sales_date, ms2.staff_name1, ms2.staff_name2");
            sql.append("         distinct dsm.staff_id,dc2.product_id,CASE WHEN dsd2.product_division IN(7) THEN(dcs.product_value_sum - dc3.product_value + dc2.service_charge) / dcs.contract_detail_count ELSE dc2.product_value END AS product_value, ds2.customer_id, ds2.sales_date, ms2.staff_name1, ms2.staff_name2");
            // 2016/09/08 GB MOD #54536 End
        }else {
            // 2016/09/08 GB MOD #54536 Start
            // 契約金額は契約変更の場合差額を取得
            //sql.append("         distinct dc2.staff_id,dc2.product_id,dc2.product_value, ds2.customer_id, ds2.sales_date, ms2.staff_name1, ms2.staff_name2");
            sql.append("         distinct dc2.staff_id,dc2.product_id,CASE WHEN dsd2.product_division IN(7) THEN(dcs.product_value_sum - dc3.product_value + dc2.service_charge) / dcs.contract_detail_count ELSE dc2.product_value END AS product_value, ds2.customer_id, ds2.sales_date, ms2.staff_name1, ms2.staff_name2");
            // 2016/09/08 GB MOD #54536 End
        }
        sql.append("   ,dc2.shop_id, ");
        sql.append("   dc2.slip_no, ");
        sql.append("   dc2.contract_no, ");
        sql.append("   dc2.contract_detail_no ");
        sql.append("         from data_sales ds2");
        if(paramBean.getCategoryIDList() != null && !paramBean.getCategoryIDList().equals("")){
            sql.append("        inner join data_sales_mainstaff dsm  on dsm.slip_no = ds2.slip_no and dsm.shop_id= ds2.shop_id");
        }
        sql.append("         inner join data_sales_detail dsd2");
        sql.append("         on ds2.shop_id = dsd2.shop_id and ds2.slip_no = dsd2.slip_no");
        sql.append("         inner join data_contract dc2");
        sql.append("         on ds2.shop_id = dc2.shop_id and ds2.slip_no = dc2.slip_no");
        //Luc start edit 20160301 #48879
        //sql.append("         inner join mst_staff ms2");
         sql.append("         left join mst_staff ms2");
        //Luc end edit 20160301 #48879
        //nhanvt edit start 20141007 Bug #31181
        //sql.append("         on dc2.staff_id = ms2.staff_id and ds2.shop_id = ms2.shop_id");
        if(paramBean.getCategoryIDList() != null && !paramBean.getCategoryIDList().equals("")){
            sql.append("         on ms2.staff_id = dsm.staff_id");
        }else {
            sql.append("         on dc2.staff_id = ms2.staff_id and ds2.shop_id in(").append(paramBean.getShopIDList()).append(")");
        }
        // 2016/09/08 GB MOD #54536 Start
        // 変更前の契約のデータ取得
        sql.append("         left join (select shop_id,contract_no,sum(product_value) as product_value from data_contract group by shop_id,contract_no) dc3");
        sql.append("         on dc3.shop_id = dc2.before_contract_shop_id and dc3.contract_no = dc2.before_contract_no");
        // 変更時、変更した契約の集計データ取得
        sql.append("         left join");
        sql.append("             (SELECT shop_id, slip_no, contract_no, COUNT(contract_detail_no) AS contract_detail_count, SUM(product_value) AS product_value_sum");
        sql.append("              FROM data_contract");
        sql.append("              GROUP BY shop_id, slip_no, contract_no) dcs");
        sql.append("         ON  dcs.shop_id = dc2.shop_id AND dcs.slip_no = dc2.slip_no AND dcs.contract_no = dc2.contract_no");
        // 2016/09/08 GB MOD #54536 End
        //nhanvt edit end 20141007 Bug #31181
        sql.append("         where ds2.shop_id in (").append(paramBean.getShopIDList()).append(")");
        sql.append("         and ds2.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
        //Luc start add 20160303 #48879
        sql.append("        and ds2.delete_date is null and dsd2.delete_date is null ");
        //Luc start add 20160303 #48879
        // 2016/09/08 GB MOD #54536 Start
        // 技術区分=手数料は除外
        sql.append("        and dsd2.product_division NOT IN(9) ");
        // 2016/09/08 GB MOD #54536 End
        sql.append("     ) dc");
        sql.append(" LEFT OUTER JOIN ");
        sql.append("     (SELECT DISTINCT dcss.staff_id , ");
        sql.append("                      dcss.shop_id, ");
        sql.append("                      dcss.slip_no, ");
        sql.append("                      dcss.contract_no, ");
        sql.append("                      dcss.contract_detail_no, ");
        sql.append("                      coalesce(dcss.rate, 0) AS rate ");
        sql.append("      FROM data_sales ds2 ");
        sql.append("      INNER JOIN data_sales_detail dsd2 ON ds2.shop_id = dsd2.shop_id ");
        sql.append("      AND ds2.slip_no = dsd2.slip_no ");
        sql.append("      INNER JOIN data_contract_staff_share dcss ON dcss.shop_id = ds2.shop_id ");
        sql.append("      AND dcss.slip_no = ds2.slip_no ");
        sql.append("      WHERE ds2.shop_id IN (").append(paramBean.getShopIDList()).append(")");
        sql.append("        AND ds2.sales_date BETWEEN '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
        sql.append("      )data2 ON data2.shop_id = dc.shop_id ");
        sql.append("   AND data2.slip_no = dc.slip_no ");
        sql.append("   AND data2.contract_no = dc.contract_no ");
        sql.append("   AND data2.contract_detail_no = dc.contract_detail_no)data ");
        sql.append("   left join mst_course mc  ON mc.course_id = data.product_id ");
        sql.append("   inner join mst_course_class mcc ON mc.course_class_id = mcc.course_class_id ");

        sql.append("     where 1=1");
        if(paramBean.getCategoryIDList() != null && !paramBean.getCategoryIDList().equals("")){
            sql.append("     and mcc.shop_category_id in("+paramBean.getCategoryIDList()+")");
        }
        //Luc end add 20141223 New request #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        sql.append(" group by mcc.display_seq,mcc.course_class_id,mcc.course_class_name,data.staff_id");
       
        //IVS_LVTu end add 2016/02/18 New request #47781
        //Luc start delete 20140606 Bug #24829 [gb]スタッフ成績⇒担当別技術成績⇒担当別コース成績の不備

        //        sql.append(" union all");
        //
        //        //削除されたコースの契約集計
        //        sql.append(" select");
        //        sql.append("     mcc.display_seq as mcc_display_seq");
        //        sql.append("     ,mcc.course_class_id");
        //        sql.append("     ,mcc.course_class_name");
        //        sql.append("     ,dc.staff_id");
        //        sql.append("     ,count(distinct dc.customer_id) as total_sales_num");
        //        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
        //            // 税抜き
        //            sql.append("     ,ceil(sum(dc.product_value) / (1.0 + get_tax_rate(max(dc.sales_date)))) as total_sales_value");
        //        } else {
        //            // 税込み
        //            sql.append("     ,sum(dc.product_value) as total_sales_value");
        //        }
        //        sql.append(" from");
        //        sql.append("     mst_course mc");
        //        sql.append("     inner join mst_course_class mcc");
        //        sql.append("     on mc.course_class_id = mcc.course_class_id");
        //        sql.append("     inner join ");
        //        sql.append("     (");
        //        sql.append("         select");
        //        sql.append("         distinct dc2.*, ds2.customer_id, ds2.sales_date, ms2.staff_name1, ms2.staff_name2");
        //        sql.append("         from data_sales ds2");
        //        sql.append("         inner join data_sales_detail dsd2");
        //        sql.append("         on ds2.shop_id = dsd2.shop_id and ds2.slip_no = dsd2.slip_no");
        //        sql.append("         inner join data_contract dc2");
        //        sql.append("         on ds2.shop_id = dc2.shop_id and ds2.slip_no = dc2.slip_no");
        //        sql.append("         inner join mst_staff ms2");
        //        sql.append("         on dc2.staff_id = ms2.staff_id and ds2.shop_id = ms2.shop_id");
        //        sql.append("         where ds2.shop_id in (").append(paramBean.getShopIDList()).append(")");
        //        sql.append("         and ds2.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
        //        sql.append("     ) dc");
        //        sql.append("     on mc.course_id = dc.product_id");
        //        sql.append(" where mc.delete_date is not null");
        //        sql.append(" group by mcc.display_seq,mcc.course_class_id,mcc.course_class_name,dc.staff_id");
        //        sql.append(" order by mcc_display_seq");
        //Luc end delete 20140606 Bug #24829 [gb]スタッフ成績⇒担当別技術成績⇒担当別コース成績の不備

        ResultSetWrapper rs = cw.executeQuery(sql.toString());

        Map<Integer, StaffCourseContractBean> reportMap = new LinkedHashMap<Integer, StaffCourseContractBean>();
        
        while (rs.next()) {
            Integer courseClassId = rs.getInt("course_class_id");
            StaffCourseContractBean bean = null;
            if (reportMap.containsKey(courseClassId)) {
                bean = reportMap.get(courseClassId);
            } else {
                bean = new StaffCourseContractBean();
                bean.setCourseClassId(courseClassId);
                bean.setCourseClassName(rs.getString("course_class_name"));
            }

            Object staffId = rs.getObject("staff_id");
            if (staffId != null) {
                StaffCourseContractResultBean contractBean = new StaffCourseContractResultBean();
                contractBean.setStaffId((Integer) staffId);
                contractBean.setTotalSalesNum(rs.getInt("total_sales_num"));
                contractBean.setTotalSalesValue(rs.getInt("total_sales_value"));

                bean.addCourseCOntractResult(contractBean);
            } 

            reportMap.put(courseClassId, bean);
        }

        return reportMap.values();
    }

    /**
     * スタッフが契約した顧客の人数を返す
     *
     * @param cw
     * @param paramBean
     * @return
     * @throws SQLException
     */
    private Map<Integer, Integer> getStaffContractCustomerMap(ConnectionWrapper cw, ReportParameterBean paramBean) throws SQLException {
        StringBuilder sql = new StringBuilder();
        sql.append(" select");
        sql.append("     ms.staff_id");
        sql.append("     , count(distinct dc.customer_id) as customer_num");
        sql.append(" from mst_staff ms");
        sql.append("     left outer join ");
        sql.append("     (");
        sql.append("         select");
        //Luc start edit 20160301 #48879
        //if(paramBean.getCategoryIDList() != null && !paramBean.getCategoryIDList().equals("")){
        //   sql.append("         dsm.staff_id, ds2.customer_id");
        //}else {
        //   sql.append("         dc2.staff_id, ds2.customer_id"); 
        //}
        if(paramBean.getCategoryIDList() != null && !paramBean.getCategoryIDList().equals("")){
           sql.append("         coalesce(dsm.staff_id,-1) as staff_id, ds2.customer_id");
        }else {
           sql.append("         coalesce(dc2.staff_id,-1) as staff_id, ds2.customer_id"); 
        }
        //Luc start edit 20160301 #48879
        sql.append("         from data_sales ds2");
       if(paramBean.getCategoryIDList() != null && !paramBean.getCategoryIDList().equals("")){
            sql.append("        inner join data_sales_mainstaff dsm  on dsm.slip_no = ds2.slip_no and dsm.shop_id= ds2.shop_id");
        }
        sql.append("         inner join data_contract dc2");
        sql.append("         on ds2.shop_id = dc2.shop_id");
        sql.append("         and ds2.slip_no = dc2.slip_no");
        sql.append("         where ds2.shop_id in (").append(paramBean.getShopIDList()).append(")");
        sql.append("         and ds2.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
        sql.append("     ) dc");
        sql.append("     on ms.staff_id = dc.staff_id");
        sql.append(" where ms.shop_id in (").append(paramBean.getShopIDList()).append(")");
        sql.append(" and ms.delete_date is null");
        sql.append(" group by ms.staff_id");

        ResultSetWrapper rs = cw.executeQuery(sql.toString());

        Map<Integer, Integer> staffContractCustomerMap = new HashMap<Integer, Integer>();
        while (rs.next()) {
            staffContractCustomerMap.put(rs.getInt("staff_id"), rs.getInt("customer_num"));
        }

        return staffContractCustomerMap;
    }

    /**
     * スタッフ別の技術売上を返す
     *
     * @param cw
     * @param paramBean
     * @return
     * @throws Exception
     */
    private Map<Integer, Map<String, Integer>> getStaffSalesResult(ConnectionWrapper cw, ReportParameterBean paramBean) throws Exception {
        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        //明細
        // 担当別技術成績＜技術売上＞出力ロジック(outStaffReportTechnicSales)のクエリをそのまま拝借

        String sql = "select\n";
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql += "coalesce(dsm.staff_id,-1) as staff_id,\n";
        }else {
            sql += "coalesce(dsd.staff_id,-1) as staff_id,\n";
        }
        //税抜き表示
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql += "sum(case dsd.product_division when 1 then\n"
                    + "dsd.detail_value_no_tax - dsd.discount_detail_value_no_tax else 0 end) as technic_discount,\n"
                    + "sum(case dsd.product_division when 1 then\n"
                    + "dsd.discount_detail_value_no_tax else 0 end) as technic_total,\n"
                    + // 商品
                    "sum(case dsd.product_division when 2 then\n"
                    + "dsd.detail_value_no_tax - dsd.discount_detail_value_no_tax  else 0 end) as item_discount,\n"
                    + "sum(case dsd.product_division when 2 then\n"
                    + "dsd.discount_detail_value_no_tax else 0 end) as item_total,\n";
        } //税込み表示
        else {
            sql += "sum(case dsd.product_division when 1 then\n"
                    + "dsd.detail_value_in_tax - dsd.discount_detail_value_in_tax else 0 end) as technic_discount,\n"
                    + "sum(case dsd.product_division when 1 then\n"
                    + "dsd.discount_detail_value_in_tax else 0 end) as technic_total,\n"
                    + "sum(case dsd.product_division when 2 then\n"
                    + "dsd.detail_value_in_tax - dsd.discount_detail_value_in_tax else 0 end) as item_discount,\n"
                    + "sum(case dsd.product_division when 2 then\n"
                    + "dsd.discount_detail_value_in_tax  else 0 end) as item_total,\n";
        }

        sql += "     ( \n";
        sql += "         select \n";
        sql += "             sum(discount_sales_value_in_tax - discount_sales_value_no_tax) \n";
        sql += "         from \n";
        sql += "             view_data_sales_valid \n";
        sql += "         where \n";
        sql += "                 shop_id in (" + paramBean.getShopIDList() + ")";
        sql += "             and sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'";
        if (paramBean.getStaffId() != null) {
            sql += "             and staff_id = '" + paramBean.getStaffId().toString() + "'";
        }
        sql += "     ) as tax_total \n";

        sql += "from view_data_sales_detail_valid dsd \n";
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
             sql+="        inner join data_sales_mainstaff dsm  on dsm.slip_no = dsd.slip_no and dsm.shop_id= dsd.shop_id ";
        }
        sql += " where";
        sql += "         dsd.shop_id in (" + paramBean.getShopIDList() + ")";
        sql += "     and sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'";
        
        
        if (paramBean.getStaffId() != null) {
            if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                sql += " and dsm.staff_id = '" + paramBean.getStaffId().toString() + "'";
            }else {
                sql += " and dsd.staff_id = '" + paramBean.getStaffId().toString() + "'";
             }
        } else {
            //Luc start delete 20160301 #48879
            //sql += " and dsd.staff_id is not null ";
            //Luc end delete 20160301 #48879
        }
        //Luc start add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
             sql += " and \n";
             sql += " (	\n";
             sql += " exists (	\n";
             sql += "         select 1 from \n";
             sql += "         view_data_sales_detail_valid dsd1\n";
             sql += "         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division=1\n";
             sql += "         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n";
             sql += "         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n";
             sql += "         and mtc.shop_category_id in( " + paramBean.getListCategoryId() + ")	\n";
             sql += "         ) 	\n";
             sql += " or \n";
             sql += " exists(\n";
             sql += "         select 1 from\n";
             sql += "         view_data_sales_detail_valid dsd1\n";
             sql += "         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division = 2 \n";
             sql += "         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n";
             sql += "         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n";
             sql += "         and mic.shop_category_id in( " + paramBean.getListCategoryId() + ")\n";
             sql += "         )\n";
             sql += " )\n";
        }
        //Luc end add 20141120 request #30962 [gb]業務報告のトータルビューティ対応
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
           sql += " group by dsm.staff_id";
        }else {
        sql += " group by dsd.staff_id";
        }

        ResultSetWrapper rs = cw.executeQuery(sql);

        Map<Integer, Map<String, Integer>> staffTechSalesMap = new HashMap<Integer, Map<String, Integer>>();
        while (rs.next()) {
            Map<String, Integer> salesResultMap = new HashMap<String, Integer>();
            salesResultMap.put("TechnicDiscountPrice", rs.getInt("technic_discount"));
            salesResultMap.put("TechnicTotal", rs.getInt("technic_total"));
            salesResultMap.put("ItemDiscountPrice", rs.getInt("item_discount"));
            salesResultMap.put("ItemTotal", rs.getInt("item_total"));

            staffTechSalesMap.put(rs.getInt("staff_id"), salesResultMap);
        }

        return staffTechSalesMap;
    }

    /**
     * 担当別技術成績＜コース消化成績＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportCourseConsumption(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        boolean flag = false;
        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        //スタッフリストを取得する
        //IVS_LVTu start edit 2015/06/22 Bug #37685
        //List<MstStaff> staffList = getStaffList(cw, paramBean);
        //true == data_contract else flag == data_contract_digestion
        List<MstStaff> staffList = getStaff(cw, paramBean, false);
        //IVS_LVTu end edit 2015/06/22 Bug #37685

        //スタッフ別消化成績リスト取得
        Collection<StaffCourseConsumptionBean> courseConsumptionList = getCourseConsumptionList(cw, paramBean);

        //スタッフ別消化顧客数取得
        ////IVS_LVTu start delete 2015/06/22 Bug #37685
        //Map<Integer, Integer> staffConsumptionCustomerMap = getStaffConsumptionCustomerMap(cw, paramBean);
        ////IVS_LVTu end delete 2015/06/22 Bug #37685


        JExcelApi jx = new JExcelApi("スタッフ成績_担当別技術成績_コース消化成績");
        //テンプレートとなるファイルパスをセット
        jx.setTemplateFile("/reports/スタッフ成績_担当別技術成績_コース消化成績.xls");

        // ヘッダ
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
        jx.setValue(2, 5, paramBean.getTargetName());
        Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
        paramBean.setTaxRate(tax_rate);
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            jx.setValue(2, 6, "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            jx.setValue(2, 6, "税込");
        }
        if(paramBean.getUseShopCategory()==1){
                 jx.setValue(1, 7, "業態分類：");
                 jx.setValue(2, 7, paramBean.getCategoryNameList());
        }

        //TODO コース契約取得処理を記述
        int baseRow = 10;
        Map<Integer, Integer> staffRowMap = new HashMap<Integer, Integer>();
        //スタッフ数分行追加
        jx.insertRow(baseRow, staffList.size());

        //スタッフ情報出力
        int staffRow = baseRow;
        for (MstStaff staff : staffList) {
            String staffName =( (staff.getStaffName(0) == null &&staff.getStaffName(1) == null  )?  "担当者なし" : staff.getStaffName(0) + " " + staff.getStaffName(1)) ;
            //jx.setValue(1, staffRow, staff.getStaffName(0) + " " + staff.getStaffName(1));
            jx.setValue(1, staffRow, staffName);
            staffRowMap.put(staff.getStaffID(), Integer.valueOf(staffRow));
            staffRow++;
        }
        jx.removeRow(staffRow);
        jx.removeRow(staffRow);

        //コース分類数分列追加
        int baseColumn = 2;
        int headerBaseRowTop = 8;
        int headerBaseRowBottom = 9;
        CellView cellView1 = null; //人数のカラム
        CellView cellView2 = null; //売上のカラム

        if (!courseConsumptionList.isEmpty()) {
            cellView1 = jx.getTargetSheet().getColumnView(baseColumn);
            cellView2 = jx.getTargetSheet().getColumnView(baseColumn + 1);
        }

        NumberFormat nf = NumberFormat.getInstance();
        DecimalFormat df = new DecimalFormat("###.0");

        for (int i = 0; i < courseConsumptionList.size(); i++) {
            //追加する列の位置はベースとなる行の２つ隣り
            jx.insertColumn(baseColumn + 2, 2);
            jx.getTargetSheet().setColumnView(baseColumn + 2, cellView1);
            jx.getTargetSheet().setColumnView(baseColumn + 3, cellView2);

            jx.mergeCells(baseColumn + 3, headerBaseRowTop, baseColumn + 4, headerBaseRowTop);
            jx.setValue(baseColumn + 3, headerBaseRowBottom, "人数");
            for (int j = 0, row = baseRow; j < staffList.size(); j++, row++) {
                jx.setValue(baseColumn + 3, row, 0);
            }
        }

        //コース分類ごとの成績を出力
        for (StaffCourseConsumptionBean bean : courseConsumptionList) {
            //コース分類名
            jx.setValue(baseColumn + 1, headerBaseRowTop, bean.getCourseClassName());
            for (StaffCourseConsumptionResultBean consumptionBean : bean.getCourseConsumptionResultList()) {
                Integer row = staffRowMap.get(consumptionBean.getStaffId());

                //人数
                jx.setValue(baseColumn + 1, row, consumptionBean.getTotalCustomerNum().intValue());
                //売上
                jx.setValue(baseColumn + 2, row, consumptionBean.getTotalConsumptionValue().floatValue());
            }

            baseColumn += 2;
        }
        jx.removeColumn(baseColumn + 1);
        jx.removeColumn(baseColumn + 1);
        jx.removeColumn(baseColumn + 1);
        jx.removeColumn(baseColumn + 1);

        //消化客数、消化金額をセット
        for (MstStaff staff : staffList) {
            Integer row = staffRowMap.get(staff.getStaffID());
            int customerNum = 0;
            //IVS_LVTu start edit 2015/06/22 Bug #37685
//            if (staffConsumptionCustomerMap.containsKey(staff.getStaffID())) {
//                customerNum = staffConsumptionCustomerMap.get(staff.getStaffID());
//            }
            for (StaffCourseConsumptionBean bean : courseConsumptionList) {
                for (StaffCourseConsumptionResultBean consumptionBean : bean.getCourseConsumptionResultList()) {
                    if ( consumptionBean.getStaffId().equals(staff.getStaffID())) {
                        customerNum = customerNum + consumptionBean.getTotalCustomerNum();
                        flag = true;
                    }
                }
            }
            //IVS_LVTu end edit 2015/06/22 Bug #37685

            int baseTargetColumn = 4;
            Double totalConsumptionValue = 0d;
            for (int i = 0; i < courseConsumptionList.size(); i++) {
                int targetColumn = baseTargetColumn + i * 2;
                try {
                    totalConsumptionValue += Double.parseDouble(jx.getValue(targetColumn, row));
                } catch (NumberFormatException e) {
                }
            }
            //消化客数
            jx.setValue(2, row, customerNum);
            //消化金額
            jx.setValue(2 + courseConsumptionList.size() * 2 + 2, row, totalConsumptionValue);
        }

        //ファイル出力
        if ( flag ) {
            jx.openWorkbook();
        }else {
            return false;
        }

        return true;
    }

    /**
     * コース消化の集計結果を返す
     *
     * @param cw
     * @param paramBean
     * @return
     */
    private Collection<StaffCourseConsumptionBean> getCourseConsumptionList(ConnectionWrapper cw, ReportParameterBean paramBean) throws SQLException {
        StringBuilder sql = new StringBuilder();
        //消化状況を集計
        sql.append(" select");
        sql.append("     dcd.staff_id");
        sql.append("     ,mcc.display_seq as mcc_display_seq");
        sql.append("     ,mcc.course_class_id");
        sql.append("     ,mcc.course_class_name");
        sql.append("     ,count(distinct dcd.customer_id) as total_customer_num");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            sql.append("     ,ceil(sum(dcd.product_num*dcd.course_sales_value/dcd.course_consumption_num) / (1.0 + get_tax_rate(max(dcd.sales_date)))) as total_consumption_value");
        } else {
            // 税込み
            sql.append("     ,sum(dcd.product_num*dcd.course_sales_value/dcd.course_consumption_num) as total_consumption_value");
        }
        sql.append(" from mst_course mc");
        sql.append("     inner join mst_course_class mcc");
        sql.append("     on mc.course_class_id = mcc.course_class_id");
        sql.append("     left outer join ");
        sql.append("     (");
        sql.append("         select");
        //IVS_LVTu start edit 2015/03/11 Bug #35218 [gb]TB版帳票全般
        //sql.append("         dcd2.*, ds2.customer_id, ds2.sales_date, dc2.product_id, dc2.product_num as course_consumption_num, dc2.product_value as course_sales_value");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("         dsmt.staff_id,dcd2.product_num, ds2.customer_id, ds2.sales_date, dc2.product_id, dc2.product_num as course_consumption_num, dc2.product_value as course_sales_value");
        }else {
        sql.append("         dcd2.*, ds2.customer_id, ds2.sales_date, dc2.product_id, dc2.product_num as course_consumption_num, dc2.product_value as course_sales_value");
        }
        
        sql.append("         from data_sales ds2");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("         INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds2.shop_id AND dsmt.slip_no = ds2.slip_no ");
        }
        //IVS_LVTu end edit 2015/03/11 Bug #35218 [gb]TB版帳票全般
        sql.append("         inner join data_contract_digestion dcd2");
        //Luc start edit 20150812 #41946
        //sql.append("         on ds2.shop_id = dcd2.contract_shop_id and ds2.slip_no = dcd2.slip_no");
        sql.append("         on ds2.shop_id = dcd2.shop_id and ds2.slip_no = dcd2.slip_no");
        //Luc end edit 20150812  #41946
        sql.append("         inner join data_contract  dc2");
        //Luc start edit 20150812  #41946
        //sql.append("         on dcd2.shop_id = dc2.shop_id and dcd2.contract_no = dc2.contract_no and dcd2.contract_detail_no = dc2.contract_detail_no");
        sql.append("         on dcd2.contract_shop_id = dc2.shop_id and dcd2.contract_no = dc2.contract_no and dcd2.contract_detail_no = dc2.contract_detail_no");
        //Luc start edit 20150812  #41946
        sql.append("         inner join mst_staff ms2");
        sql.append("         on dcd2.staff_id = ms2.staff_id");
        sql.append("         where ds2.shop_id in (").append(paramBean.getShopIDList()).append(")");
        sql.append("         and ds2.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
        sql.append("     ) dcd");
        sql.append("     on dcd.product_id = mc.course_id");
        sql.append(" where mc.delete_date is null");
        //Luc start add 20141219 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" and mcc.shop_category_id in ("+paramBean.getCategoryIDList()+")");
        }
        //Luc end add 20141219 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        sql.append(" group by dcd.staff_id,mcc.display_seq,mcc.course_class_id,mcc.course_class_name");

        sql.append(" union all");

        //削除されたコースに対する消化状況を集計
        sql.append(" select");
        sql.append("     dcd.staff_id");
        sql.append("     ,mcc.display_seq as mcc_display_seq");
        sql.append("     ,mcc.course_class_id");
        sql.append("     ,mcc.course_class_name");
        sql.append("     ,count(distinct dcd.customer_id) as total_customer_num");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            sql.append("     ,ceil(sum(dcd.product_num*dcd.course_sales_value/dcd.course_consumption_num) / (1.0 + get_tax_rate(max(dcd.sales_date)))) as total_consumption_value");
        } else {
            // 税込み
            sql.append("     ,sum(dcd.product_num*dcd.course_sales_value/dcd.course_consumption_num) as total_consumption_value");
        }
        sql.append(" from mst_course mc");
        sql.append("     inner join mst_course_class mcc");
        sql.append("     on mc.course_class_id = mcc.course_class_id");
        sql.append("     inner join ");
        sql.append("     (");
        sql.append("         select");
        //IVS_LVTu start edit 2015/03/11 Bug #35218 [gb]TB版帳票全般
        //sql.append("         dcd2.*, ds2.customer_id, ds2.sales_date, dc2.product_id, dc2.product_num as course_consumption_num, dc2.product_value as course_sales_value");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("         dsmt.staff_id,dcd2.product_num, ds2.customer_id, ds2.sales_date, dc2.product_id, dc2.product_num as course_consumption_num, dc2.product_value as course_sales_value");
        }else {
        sql.append("         dcd2.*, ds2.customer_id, ds2.sales_date, dc2.product_id, dc2.product_num as course_consumption_num, dc2.product_value as course_sales_value");
        }
        sql.append("         from data_sales ds2");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("         INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds2.shop_id AND dsmt.slip_no = ds2.slip_no ");
        }
        //IVS_LVTu end edit 2015/03/11 Bug #35218 [gb]TB版帳票全般
        sql.append("         inner join data_contract_digestion dcd2");
        //Luc start edit 20150812 #41946
        //sql.append("         on ds2.shop_id = dcd2.contract_shop_id and ds2.slip_no = dcd2.slip_no");
         sql.append("         on ds2.shop_id = dcd2.shop_id and ds2.slip_no = dcd2.slip_no");
        //Luc end edit 20150812 #41946
        sql.append("         inner join data_contract  dc2");
         //Luc start edit 20150812 #41946
        //sql.append("         on dcd2.shop_id = dc2.shop_id and dcd2.contract_no = dc2.contract_no and dcd2.contract_detail_no = dc2.contract_detail_no");
        sql.append("         on dcd2.contract_shop_id = dc2.shop_id and dcd2.contract_no = dc2.contract_no and dcd2.contract_detail_no = dc2.contract_detail_no");
        //Luc end edit 20150812 #41946
        sql.append("         inner join mst_staff ms2");
        sql.append("         on dcd2.staff_id = ms2.staff_id");
        sql.append("         where ds2.shop_id in (").append(paramBean.getShopIDList()).append(")");
        sql.append("         and ds2.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
        sql.append("     ) dcd");
        sql.append("     on dcd.product_id = mc.course_id");
        sql.append(" where mc.delete_date is not null");
        //Luc start add 20141219 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" and mcc.shop_category_id in ("+paramBean.getCategoryIDList()+")");
        }
        //Luc end add 20141219 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        sql.append(" group by dcd.staff_id,mcc.display_seq,mcc.course_class_id,mcc.course_class_name");
        sql.append(" order by mcc_display_seq");

        ResultSetWrapper rs = cw.executeQuery(sql.toString());

        Map<Integer, StaffCourseConsumptionBean> reportMap = new LinkedHashMap<Integer, StaffCourseConsumptionBean>();
        while (rs.next()) {
            StaffCourseConsumptionBean bean = null;
            Integer courseClassId = rs.getInt("course_class_id");
            if (reportMap.containsKey(courseClassId)) {
                bean = reportMap.get(courseClassId);
            } else {
                bean = new StaffCourseConsumptionBean();
                bean.setCourseClassId(courseClassId);
                bean.setCourseClassName(rs.getString("course_class_name"));
            }

            Object staffId = rs.getObject("staff_id");
            if (staffId != null) {
                StaffCourseConsumptionResultBean consumptionBean = new StaffCourseConsumptionResultBean();
                consumptionBean.setStaffId((Integer) staffId);
                consumptionBean.setTotalCustomerNum(rs.getInt("total_customer_num"));
                consumptionBean.setTotalConsumptionValue(rs.getFloat("total_consumption_value"));

                bean.addCourseConsumptionResult(consumptionBean);
            }

            reportMap.put(courseClassId, bean);
        }

        return reportMap.values();
    }

    /**
     * スタッフが消化した顧客の人数を返す
     *
     * @param cw
     * @param paramBean
     * @return
     * @throws SQLException
     */
    private Map<Integer, Integer> getStaffConsumptionCustomerMap(ConnectionWrapper cw, ReportParameterBean paramBean) throws SQLException {
        StringBuilder sql = new StringBuilder();
        sql.append(" select");
        sql.append("     ms.staff_id");
        sql.append("     ,count(distinct customer_id) as customer_num");
        sql.append(" from mst_staff ms");
        sql.append("     left outer join ");
        sql.append("     (");
        //IVS_LVTu start edit 2015/03/11 Bug #35218 [gb]TB版帳票全般
        //sql.append("         select dcd2.*, ds2.customer_id");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("         select dsmt.staff_id, ds2.customer_id");
        }else {
        sql.append("         select dcd2.*, ds2.customer_id");
        }
        //IVS_LVTu end edit 2015/03/11 Bug #35218 [gb]TB版帳票全般
        sql.append("         from data_contract_digestion dcd2");
        sql.append("         inner join data_contract dc2");
        sql.append("         on dcd2.contract_shop_id = dc2.shop_id and dcd2.contract_no = dc2.contract_no and dcd2.contract_detail_no = dc2.contract_detail_no");
        sql.append("         inner join data_sales ds2");
        sql.append("         on dcd2.shop_id = ds2.shop_id and dcd2.slip_no = ds2.slip_no");
        //IVS_LVTu start add 2015/03/11 Bug #35218 [gb]TB版帳票全般
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
                sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds2.shop_id AND dsmt.slip_no = ds2.slip_no ");
        }
        //IVS_LVTu end add 2015/03/11 Bug #35218 [gb]TB版帳票全般
        sql.append("         where ds2.shop_id in (").append(paramBean.getShopIDList()).append(")");
        sql.append("         and ds2.sales_date between '").append(paramBean.getTargetStartDate()).append("' and '").append(paramBean.getTargetEndDate()).append("'");
        sql.append("     ) dcd");
        sql.append("     on ms.staff_id = dcd.staff_id");
        sql.append(" where ms.shop_id in (").append(paramBean.getShopIDList()).append(")");
        sql.append(" and ms.delete_date is null");
        sql.append(" group by ms.staff_id");

        ResultSetWrapper rs = cw.executeQuery(sql.toString());
        Map<Integer, Integer> staffConsumptionCustomerMap = new HashMap<Integer, Integer>();

        while (rs.next()) {
            staffConsumptionCustomerMap.put(rs.getInt("staff_id"), rs.getInt("customer_num"));
        }

        return staffConsumptionCustomerMap;
    }

    //IVS_LVTu start edit 2016/02/18 New request #47781
    /**
     * スタッフリストを取得する
     *
     * @param cw
     * @param paramBean
     * @return
     * @throws SQLException
     */
    private List<MstStaff> getStaffList(ConnectionWrapper cw, ReportParameterBean paramBean) throws SQLException {
        StringBuilder sql = new StringBuilder();
        sql.append(" select distinct * \n");
        sql.append(" from  \n");
        sql.append(" (SELECT DISTINCT CASE \n");
        sql.append("             WHEN data2.staff_id IS NOT NULL THEN data2.staff_id \n");
        sql.append("             ELSE data1.staff_id \n");
        sql.append("         END AS staff_id, \n");
        sql.append("         CASE \n");
        sql.append("             WHEN data2.staff_id IS NOT NULL THEN coalesce(data2.staff_name1,'') \n");
        sql.append("             ELSE coalesce(data1.staff_name1,'') \n");
        sql.append("         END AS staff_name1, \n");
        sql.append("         CASE \n");
        sql.append("             WHEN data2.staff_id IS NOT NULL THEN coalesce(data2.staff_name2,'') \n");
        sql.append("             ELSE coalesce(data1.staff_name2,'') \n");
        sql.append("         END AS staff_name2, \n");
        sql.append("         CASE \n");
        sql.append("             WHEN data2.staff_id IS NOT NULL THEN data2.staff_no \n");
        sql.append("             ELSE data1.staff_no \n");
        sql.append("         END \n");
        sql.append(" FROM \n");
        sql.append(" ( \n");
        sql.append("select distinct ");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("  dsm.staff_id ");
        }else {
            sql.append("  msts.staff_id ");
        }
        sql.append(" , coalesce(msts.staff_name1,'') as staff_name1, coalesce(msts.staff_name2,'') as staff_name2,msts.staff_no,");
        sql.append(" dc.shop_id, \n");
	sql.append(" dc.slip_no, \n");
	sql.append(" dc.contract_no, \n");
	sql.append(" dc.contract_detail_no \n");
        sql.append(" from data_sales ds ");
        sql.append(" inner join data_contract ");
        sql.append(" dc on dc.slip_no = ds.slip_no and dc.shop_id = ds.shop_id ");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
              sql.append(" inner join data_sales_mainstaff dsm  on dsm.slip_no = ds.slip_no and dsm.shop_id = ds.shop_id ");
         }
        
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" inner join data_sales_detail dsd on ds.shop_id = dsd.shop_id and ds.slip_no = dsd.slip_no and dsd.delete_date is null \n");

            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");

        }
        
        sql.append(" left join mst_staff msts");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
           sql.append(" on dsm.staff_id = msts.staff_id "); 
        }else {
            sql.append(" on dc.staff_id = msts.staff_id ");
        }
        sql.append(" where ds.sales_date BETWEEN '").append(paramBean.getTargetStartDate().toString()).append("' AND '")
                                                           .append(paramBean.getTargetEndDate().toString()).append("'");
        sql.append(" and ds.delete_date IS NULL ");
        //Luc start delete 20160309 #49033
        //sql.append(" and msts.delete_date IS NULL ");
        //Luc start delete 20160309 #49033
         sql.append(" AND ds.shop_id IN (").append(paramBean.getShopIDList()).append(")");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }

        
        sql.append(" )data1 \n");
        sql.append(" left join \n");
        sql.append(" ( \n");
        sql.append("select distinct msts.staff_id, coalesce(msts.staff_name1,'') as staff_name1, coalesce(msts.staff_name2,'') as staff_name2,msts.staff_no,");
        sql.append(" dc.shop_id, \n");
	sql.append(" dc.slip_no, \n");
	sql.append(" dc.contract_no, \n");
	sql.append(" dc.contract_detail_no \n");
        sql.append(" from data_sales ds ");
        sql.append(" inner join data_contract ");
        sql.append(" dc on dc.slip_no = ds.slip_no and dc.shop_id = ds.shop_id ");
        sql.append(" inner join data_contract_staff_share ");
        sql.append(" dcss on dcss.slip_no = ds.slip_no and dcss.shop_id = ds.shop_id ");
         if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
              sql.append(" inner join data_sales_mainstaff dsm  on dsm.slip_no = ds.slip_no and dsm.shop_id = ds.shop_id ");
         }
        
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" inner join data_sales_detail dsd on ds.shop_id = dsd.shop_id and ds.slip_no = dsd.slip_no and dsd.delete_date is null \n");

            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");

        }
        
        sql.append(" left join mst_staff msts");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
           sql.append(" on dsm.staff_id = msts.staff_id "); 
        }else {
            sql.append(" on dcss.staff_id = msts.staff_id ");
        }
        sql.append(" where ds.sales_date BETWEEN '").append(paramBean.getTargetStartDate().toString()).append("' AND '")
                                                           .append(paramBean.getTargetEndDate().toString()).append("'");
        sql.append(" and ds.delete_date IS NULL ");
        //Luc start delete 20160309 #49033
        //sql.append(" and msts.delete_date IS NULL ");
        //Luc start delete 20160309 #49033
         sql.append(" AND ds.shop_id IN (").append(paramBean.getShopIDList()).append(")");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }
        sql.append(" )data2 \n");
        sql.append(" ON data2.shop_id = data1.shop_id \n");
        sql.append(" AND data2.slip_no = data1.slip_no \n");
        sql.append(" AND data2.contract_no = data1.contract_no \n");
        sql.append(" AND data2.contract_detail_no = data1.contract_detail_no) as t \n");
        
       
        sql.append("  UNION  ");
        sql.append("  (SELECT ds.staff_id as staff_id,coalesce(ds.staff_name1,'') as staff_name1,coalesce(ds.staff_name2,'') as staff_name2,coalesce(ds.staff_no,'') as staff_no ");
        //Luc start edit 20160301 #48879
        sql.append(" FROM (");
        //sql.append(" SELECT vdsv.staff_id, sum(dpd.payment_value) as total_value");
        //IVS_LVTu start edit 2016/01/29 Bug #47392
        sql.append("SELECT  vdsv.staff_id, ");
	sql.append(" vdsv.shop_id, ");
	sql.append(" vdsv.slip_no, ");
	sql.append(" dp.payment_no, ");
        sql.append(" sum(coalesce(dp.change_value, 0)) as change_value,ms.staff_name1,ms.staff_name2,ms.staff_no  ");
        sql.append("    FROM data_sales vdsv");
        sql.append("     inner join data_payment dp using(shop_id,slip_no)");
        sql.append("     left join  mst_staff ms on vdsv.staff_id = ms.staff_id");
        //sql.append("     inner join data_payment_detail dpd using(shop_id,slip_no,payment_no)");
        sql.append("     WHERE vdsv.shop_id IN (" + paramBean.getShopIDList() + ")");
        sql.append("     and vdsv.delete_date is null ");
        sql.append("     AND dp.payment_date BETWEEN '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'"); 
        //sql.append("     group by vdsv.staff_id");
        sql.append("     GROUP BY vdsv.staff_id, vdsv.shop_id , vdsv.slip_no , dp.payment_no,ms.staff_name1,ms.staff_name2,ms.staff_no) ds ");
        sql.append("     group by ds.staff_id,staff_name1,staff_name2,staff_no) ");
        
        
        
        
        ResultSetWrapper rs = cw.executeQuery(sql.toString());

        List<MstStaff> staffList = new ArrayList<MstStaff>();
        //IVS_LVTu start edit 2016/03/21 Bug #49175
        MstStaff staffTemp = null;
        while (rs.next()) {
            MstStaff staff = new MstStaff();
            staff.setStaffID(rs.getInt("staff_id"));
            staff.setStaffNo(rs.getString("staff_no"));
            staff.setStaffName(new String[]{rs.getString("staff_name1"), rs.getString("staff_name2")});

            if (staff.getStaffID() != 0) {
                staffList.add(staff);
            }else {
                //Luc start edit 20160301 #48879
                staffTemp = new MstStaff();
                staffTemp.setStaffID(-1);
                staffTemp.setStaffName(0, "担当なし");
                //staffList.add(staff);
                //Luc end edit 20160301 #48879
            }
            
        }
        if(staffTemp != null) {
            staffList.add(staffTemp);
        }
        //IVS_LVTu end edit 2016/03/21 Bug #49175

        return staffList;
    }
    //IVS_LVTu end edit 2016/02/18 New request #47781

    /**
     * 担当別商品成績＜店販売上＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportCommoditySales(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        //明細
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" SELECT");
        sql.append("      ms.staff_id");
        sql.append("     ,ms.staff_name                      AS staffname");
        sql.append("     ,MainCats.value                     AS MainCats_value");
        sql.append("     ,MainCats.Num                       AS MainCats_Num");
        sql.append("     ,Result.value                       AS Result_value");
        sql.append("     ,Result.Num                         AS Result_Num");
        sql.append("     ,Approach.value                     AS Approach_value");
        sql.append("     ,Approach.Num                       AS Approach_Num");
        sql.append("     ,MainEqualApproach.value            AS MainEqualApproach_value");
        sql.append("     ,MainEqualApproach.Num              AS MainEqualApproach_Num");
        sql.append("     ,MainCommodityOnlyCount.Num         AS MainCommodityOnlyCount_Num");
        sql.append("     ,ResultCommodityOnlyCount.Num       AS ResultCommodityOnlyCount_Num");
        sql.append("     ,ApproachCommodityOnlyCount.Num     AS ApproachCommodityOnlyCount_Num");
        sql.append("     ,MainEqualApproachCOC.Num           AS MainEqualApproachCOC_Num");
        sql.append(" FROM");
        sql.append("     (");
        sql.append("         select");
        sql.append("              staff_id");
        sql.append("             ,staff_name1 || ' ' || staff_name2 as staff_name");
        sql.append("             ,staff_no");
        sql.append("             ,display_seq");
        sql.append("         from");
        sql.append("             mst_staff");
        sql.append("         union all");
        sql.append("         select");
        sql.append("              0 as staff_id");
        sql.append("             ,'担当なし' as staffname");
        sql.append("             ,null");
        sql.append("             ,null");
        sql.append("     ) ms");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("                 SELECT");
        sql.append("                      data.staff_id");
        sql.append("                     ,sum(data.value) AS value");
        sql.append("                     ,COUNT(*) AS Num");
        sql.append("                 FROM");
        sql.append("                     (");
        sql.append("         		        SELECT");
        sql.append("                              slip_no");
        sql.append("                             ,coalesce(staff_id, 0) as staff_id");
        sql.append("                             ,sum(" + makeValueString(paramBean) + ") AS value");
        sql.append("         		        FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                             (" + getDataSalesDetailShareTableItemMainStaff(paramBean) + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("         		        WHERE");
        sql.append("         		                shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("         		            AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("         		            AND product_division in( 2,4)");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("      and   exists");
            sql.append("             (");
            sql.append("                  SELECT ");
            sql.append("                     1");
            sql.append("                 FROM");
            sql.append("                      data_sales_detail dsd1");
            sql.append("                     inner join mst_item mi on dsd1.product_id = mi.item_id  ");
            sql.append("                     left join mst_item_class mic on mic.item_class_id = mi.item_class_id  ");
            sql.append("                  WHERE");
            sql.append("                          dsd1.shop_id = dsd.shop_id");
            sql.append("                      AND dsd1.slip_no = dsd.slip_no");
            sql.append("                      AND dsd1.slip_detail_no = dsd.slip_detail_no");
            sql.append("                      AND dsd1.delete_date is null");
            sql.append("                      AND dsd1.product_division in( 2,4)");
            sql.append("                      AND mic.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append(" ) ");
        }
        //IVS_LVTu start end 2015/06/05 New request #37165
        sql.append("         		        GROUP BY");
        sql.append("                              slip_no");
        sql.append("                             ,staff_id");
        sql.append("                     ) data");
        sql.append("                 GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) MainCats");
        sql.append("             ON MainCats.staff_id = ms.staff_id");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("     	        SELECT");
        sql.append("                      data.staff_id");
        sql.append("                     ,sum(data.value) AS value");
        sql.append("                     ,COUNT(*) AS Num");
        sql.append("     	        FROM");
        sql.append("                     (");
        sql.append("     		            SELECT");
        sql.append("                             slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                            ,coalesce(staff_id, 0) as staff_id");
        sql.append("                            ,sum(" + makeValueString(paramBean) + ") AS value");
        sql.append("     		            FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                             (" + getDataSalesDetailShareTableItem() + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("     		            WHERE");
        sql.append("     		                    shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     		                AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("     		                AND detail_designated_flag = 'f'");
        sql.append("     		                AND product_division in( 2,4) ");
        sql.append("     		            GROUP BY");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,staff_id");

        sql.append("     		            UNION ALL");

        sql.append("     		            SELECT");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,coalesce(detail_staff_id, 0) as staff_id");
        sql.append("                             ,sum(" + makeValueString(paramBean) + ") AS value");
        sql.append("     		            FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                             (" + getDataSalesDetailShareTableItem() + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("     		            WHERE");
        sql.append("     		                    shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     		                AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("     		                AND detail_designated_flag = 't'");
        sql.append("     		                AND product_division in( 2,4) ");
        sql.append("     		            GROUP BY");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,detail_staff_id");
        sql.append("                     ) data");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("      where   exists");
            sql.append("             (");
            sql.append("                  SELECT ");
            sql.append("                     1");
            sql.append("                 FROM");
            sql.append("                      data_sales_detail dsd1");
            sql.append("                     inner join mst_item mi on dsd1.product_id = mi.item_id  ");
            sql.append("                     left join mst_item_class mic on mic.item_class_id = mi.item_class_id  ");
            sql.append("                  WHERE");
            sql.append("                          dsd1.shop_id = data.shop_id");
            sql.append("                      AND dsd1.slip_no = data.slip_no");
            sql.append("                      AND dsd1.slip_detail_no = data.slip_detail_no");
            sql.append("                      AND dsd1.delete_date is null");
            sql.append("                      AND dsd1.product_division in( 2,4)");
            sql.append("                      AND mic.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append(" ) ");
        }
        //IVS_LVTu start end 2015/06/05 New request #37165
        sql.append("     	        GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) Result");
        sql.append("             ON Result.staff_id = ms.staff_id");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("             	SELECT");
        sql.append("                     data.staff_id");
        sql.append("                    ,sum(data.value) AS value");
        sql.append("                    ,COUNT(*) AS Num");
        sql.append("             	FROM");
        sql.append("                     (");
        sql.append("             		    SELECT");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,coalesce(detail_staff_id, 0) as staff_id");
        sql.append("                             ,sum(" + makeValueString(paramBean) + ") AS value");
        sql.append("                         FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                             (" + getDataSalesDetailShareTableItem() + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("             		    WHERE");
        sql.append("             		            shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("             		        AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("             		        AND product_division in( 2,4) ");
        sql.append("             		    GROUP BY");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,detail_staff_id");
        sql.append("             	    ) data");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("      where   exists");
            sql.append("             (");
            sql.append("                  SELECT ");
            sql.append("                     1");
            sql.append("                 FROM");
            sql.append("                      data_sales_detail dsd1");
            sql.append("                     inner join mst_item mi on dsd1.product_id = mi.item_id  ");
            sql.append("                     left join mst_item_class mic on mic.item_class_id = mi.item_class_id  ");
            sql.append("                  WHERE");
            sql.append("                          dsd1.shop_id = data.shop_id");
            sql.append("                      AND dsd1.slip_no = data.slip_no");
            sql.append("                      AND dsd1.slip_detail_no = data.slip_detail_no");
            sql.append("                      AND dsd1.delete_date is null");
            sql.append("                      AND dsd1.product_division in( 2,4) ");
            sql.append("                      AND mic.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append(" ) ");
        }
        //IVS_LVTu start end 2015/06/05 New request #37165
        sql.append("                 GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) Approach");
        sql.append("             ON Approach.staff_id = ms.staff_id");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("             	SELECT");
        sql.append("                      data.staff_id");
        sql.append("                     ,sum(data.value) AS value");
        sql.append("                     ,COUNT(*) AS Num");
        sql.append("             	FROM");
        sql.append("                     (");
        sql.append("             		    SELECT");
        sql.append("                              dsd.slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,dsd.shop_id");
        sql.append("                             ,coalesce(ms.staff_id, 0) as staff_id");
        sql.append("                             ,sum(" + makeValueString(paramBean) + ") AS value");
        sql.append("                         FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                             (" + getDataSalesDetailShareTableItemMainStaff(paramBean) + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("                                 inner join mst_staff ms");
        sql.append("                                         on dsd.staff_id = ms.staff_id");
        sql.append("                                        and dsd.detail_staff_id = ms.staff_id");
        sql.append("             		    WHERE");
        sql.append("                                 dsd.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                             AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                             AND dsd.product_division in( 2,4)");
        sql.append("             		    GROUP BY");
        sql.append("                              dsd.slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,dsd.shop_id");
        sql.append("                             ,ms.staff_id");
        sql.append("             	    ) data");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("      where   exists");
            sql.append("             (");
            sql.append("                  SELECT ");
            sql.append("                     1");
            sql.append("                 FROM");
            sql.append("                      data_sales_detail dsd1");
            sql.append("                     inner join mst_item mi on dsd1.product_id = mi.item_id  ");
            sql.append("                     left join mst_item_class mic on mic.item_class_id = mi.item_class_id  ");
            sql.append("                  WHERE");
            sql.append("                          dsd1.shop_id = data.shop_id");
            sql.append("                      AND dsd1.slip_no = data.slip_no");
            sql.append("                      AND dsd1.slip_detail_no = data.slip_detail_no");
            sql.append("                      AND dsd1.delete_date is null");
            sql.append("                      AND dsd1.product_division in( 2,4) ");
            sql.append("                      AND mic.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append(" ) ");
        }
        //IVS_LVTu start end 2015/06/05 New request #37165
        sql.append("             	GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) MainEqualApproach");
        sql.append("             ON MainEqualApproach.staff_id = ms.staff_id");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("     	        SELECT");
        sql.append("                      data.staff_id");
        sql.append("                     ,COUNT(*) AS Num");
        sql.append("     	        FROM");
        sql.append("                     (");
        sql.append("     		            SELECT");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,coalesce(staff_id, 0) as staff_id");
        sql.append("     		            FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                             (" + getDataSalesDetailShareTableItemMainStaff(paramBean) + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("     		            WHERE");
        sql.append("                 		       shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 		   AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                 		   AND product_division in( 2,4) ");
        sql.append("     		            GROUP BY");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,staff_id");
        sql.append("                     ) data");
        sql.append("                 WHERE");
        sql.append("                     data.slip_no NOT IN");
        sql.append("                         (");
        sql.append("                             SELECT");
        sql.append("                                 slip_no");
        sql.append("                             FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                                 (" + getDataSalesDetailShareTableItemMainStaff(paramBean) + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("                             WHERE");
        sql.append("                                     shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                                 AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                                 AND product_division = 1");
        sql.append("                             GROUP BY");
        sql.append("                                 slip_no");
        sql.append("                         )");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("      AND   exists");
            sql.append("             (");
            sql.append("                  SELECT ");
            sql.append("                     1");
            sql.append("                 FROM");
            sql.append("                      data_sales_detail dsd1");
            sql.append("                     inner join mst_item mi on dsd1.product_id = mi.item_id  ");
            sql.append("                     left join mst_item_class mic on mic.item_class_id = mi.item_class_id  ");
            sql.append("                  WHERE");
            sql.append("                          dsd1.shop_id = data.shop_id");
            sql.append("                      AND dsd1.slip_no = data.slip_no");
            sql.append("                      AND dsd1.slip_detail_no = data.slip_detail_no");
            sql.append("                      AND dsd1.delete_date is null");
            sql.append("                      AND dsd1.product_division  in( 2,4) ");
            sql.append("                      AND mic.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append(" ) ");
        }
        //IVS_LVTu start end 2015/06/05 New request #37165
        sql.append("                 GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) MainCommodityOnlyCount");
        sql.append("             ON MainCommodityOnlyCount.staff_id = ms.staff_id");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("                 SELECT");
        sql.append("                     data.staff_id");
        sql.append("                    ,COUNT(*) AS Num");
        sql.append("                 FROM");
        sql.append("                     (");
        sql.append("                         SELECT");
        sql.append("                             slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                            ,coalesce(staff_id, 0) as staff_id");
        sql.append("                         FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                             (" + getDataSalesDetailShareTableItem() + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("                         WHERE");
        sql.append("                                 shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                             AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                             AND detail_designated_flag = 'f'");
        sql.append("                             AND product_division in( 2,4) ");
        sql.append("                         GROUP BY");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,staff_id");

        sql.append("                         UNION");

        sql.append("                         SELECT");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,coalesce(detail_staff_id, 0) as staff_id");
        sql.append("                         FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                             (" + getDataSalesDetailShareTableItem() + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("                         WHERE");
        sql.append("                                 shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                             AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                             AND product_division in( 2,4) ");
        sql.append("                             AND detail_designated_flag = 't'");
        sql.append("                         GROUP BY");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,detail_staff_id");
        sql.append("                     ) data");
        sql.append("                 WHERE");
        sql.append("                     data.slip_no NOT IN");
        sql.append("                         (");
        sql.append("                             SELECT");
        sql.append("                                 slip_no");
        sql.append("                             FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                                 (" + getDataSalesDetailShareTableItem() + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("                             WHERE");
        sql.append("                                     shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                                 AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                                 AND product_division = 1");
        sql.append("                             GROUP BY");
        sql.append("                                 slip_no");
        sql.append("                         )");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("      AND   exists");
            sql.append("             (");
            sql.append("                  SELECT ");
            sql.append("                     1");
            sql.append("                 FROM");
            sql.append("                      data_sales_detail dsd1");
            sql.append("                     inner join mst_item mi on dsd1.product_id = mi.item_id  ");
            sql.append("                     left join mst_item_class mic on mic.item_class_id = mi.item_class_id  ");
            sql.append("                  WHERE");
            sql.append("                          dsd1.shop_id = data.shop_id");
            sql.append("                      AND dsd1.slip_no = data.slip_no");
            sql.append("                      AND dsd1.slip_detail_no = data.slip_detail_no");
            sql.append("                      AND dsd1.delete_date is null");
            sql.append("                      AND dsd1.product_division in( 2,4) ");
            sql.append("                      AND mic.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append(" ) ");
        }
        //IVS_LVTu start end 2015/06/05 New request #37165
        sql.append("                 GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) ResultCommodityOnlyCount");
        sql.append("             ON ResultCommodityOnlyCount.staff_id = ms.staff_id");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("                 SELECT");
        sql.append("                      data.staff_id");
        sql.append("                     ,COUNT(*) AS Num");
        sql.append("                 FROM");
        sql.append("                     (");
        sql.append("                         SELECT");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,coalesce(detail_staff_id, 0) as staff_id");
        sql.append("                             ,sum(" + makeValueString(paramBean) + ") AS value");
        sql.append("                         FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                             (" + getDataSalesDetailShareTableItem() + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("                         WHERE");
        sql.append("                                 shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                             AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                             AND product_division in( 2,4) ");
        sql.append("                 		GROUP BY");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,detail_staff_id");
        sql.append("                     ) data");
        sql.append("                 WHERE");
        sql.append("                     data.slip_no NOT IN");
        sql.append("                         (");
        sql.append("                     	    SELECT");
        sql.append("                                 slip_no");
        sql.append("                     	    FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                                 (" + getDataSalesDetailShareTableItem() + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("                     	    WHERE");
        sql.append("                                     shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                                 AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                                 AND product_division = 1");
        sql.append("                     	    GROUP BY");
        sql.append("                                 slip_no");
        sql.append("                         )");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("      AND   exists");
            sql.append("             (");
            sql.append("                  SELECT ");
            sql.append("                     1");
            sql.append("                 FROM");
            sql.append("                      data_sales_detail dsd1");
            sql.append("                     inner join mst_item mi on dsd1.product_id = mi.item_id  ");
            sql.append("                     left join mst_item_class mic on mic.item_class_id = mi.item_class_id  ");
            sql.append("                  WHERE");
            sql.append("                          dsd1.shop_id = data.shop_id");
            sql.append("                      AND dsd1.slip_no = data.slip_no");
            sql.append("                      AND dsd1.slip_detail_no = data.slip_detail_no");
            sql.append("                      AND dsd1.delete_date is null");
            sql.append("                      AND dsd1.product_division in( 2,4)");
            sql.append("                      AND mic.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append(" ) ");
        }
        //IVS_LVTu start end 2015/06/05 New request #37165
        sql.append("                 GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) ApproachCommodityOnlyCount");
        sql.append("             ON ApproachCommodityOnlyCount.staff_id = ms.staff_id");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("                 SELECT");
        sql.append("                      data.staff_id");
        sql.append("                     ,COUNT(*) AS Num");
        sql.append("                 FROM");
        sql.append("                     (");
        sql.append("                         SELECT");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,coalesce(detail_staff_id, 0) as staff_id");
        sql.append("                             ,sum(" + makeValueString(paramBean) + ") AS value");
        sql.append("                         FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                             (" + getDataSalesDetailShareTableItemMainStaff(paramBean) + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("                         WHERE");
        sql.append("                                 shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                             AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                             AND product_division in( 2,4) ");
        sql.append("                         GROUP BY");
        sql.append("                              slip_no");
        sql.append("                             ,slip_detail_no");
        sql.append("                            ,shop_id");
        sql.append("                             ,detail_staff_id");
        sql.append("                     ) data");
        sql.append("                 WHERE");
        sql.append("                     data.slip_no NOT IN");
        sql.append("                         (");
        sql.append("                 	        SELECT");
        sql.append("                                 slip_no");
        sql.append("                 	        FROM");
        //IVS_LVTu start edit 2015/06/16 Bug #37388
        sql.append("                                 (" + getDataSalesDetailShareTableItemMainStaff(paramBean) + ") dsd");
        //IVS_LVTu end edit 2015/06/16 Bug #37388
        sql.append("                 	        WHERE");
        sql.append("                                     shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                                 AND sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                                 AND product_division = 1");
        sql.append("                             GROUP BY");
        sql.append("                                 slip_no");
        sql.append("                         )");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("      AND   exists");
            sql.append("             (");
            sql.append("                  SELECT ");
            sql.append("                     1");
            sql.append("                 FROM");
            sql.append("                      data_sales_detail dsd1");
            sql.append("                     inner join mst_item mi on dsd1.product_id = mi.item_id  ");
            sql.append("                     left join mst_item_class mic on mic.item_class_id = mi.item_class_id  ");
            sql.append("                  WHERE");
            sql.append("                          dsd1.shop_id = data.shop_id");
            sql.append("                      AND dsd1.slip_no = data.slip_no");
            sql.append("                      AND dsd1.slip_detail_no = data.slip_detail_no");
            sql.append("                      AND dsd1.delete_date is null");
            sql.append("                      AND dsd1.product_division in( 2,4)");
            sql.append("                      AND mic.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append(" ) ");
        }
        //IVS_LVTu start add 2015/06/05 New request #37165
        sql.append("                 GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) MainEqualApproachCOC");
        sql.append("             ON MainEqualApproachCOC.staff_id = ms.staff_id");
        sql.append(" WHERE");
        sql.append("     (");
        sql.append("            MainCats.staff_id = ms.staff_id");
        sql.append("         OR Result.staff_id = ms.staff_id");
        sql.append("         OR Approach.staff_id = ms.staff_id");
        sql.append("         OR MainEqualApproach.staff_id = ms.staff_id");
        sql.append("     )");
        sql.append(" ORDER BY");
        sql.append("      case when ms.display_seq is null then 1 else 0 end");
        sql.append("     ,ms.display_seq");
        sql.append("     ,lpad(ms.staff_no, 10, '0')");
        sql.append("     ,ms.staff_id");

        PreparedStatement stmt = cw.prepareStatement(sql.toString());
        ResultSet rs = null;
        rs = stmt.executeQuery();

        if (rs.last()) {
            
            //IVS_LVTu start edit 2016/02/29 New request #48794
            JExcelApi jx = new JExcelApi("スタッフ成績_担当別商品成績_商品成績");
            jx.setTemplateFile("/reports/スタッフ成績_担当別商品成績_商品成績.xls");
            //IVS_LVTu end edit 2016/02/29 New request #48794

            // ヘッダ
            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getTargetName());
            Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
            paramBean.setTaxRate(tax_rate);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 6, "税抜");
            } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                jx.setValue(2, 6, "税込");
            }
            //IVS_LVTu start edit 2015/06/05 New request #37165
            if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
                jx.setValue(2, 7, paramBean.getListCategoryName());
            }
            //int row = 10;
            int row = 11;
            //IVS_LVTu end edit 2015/06/05 New request #37165

            // 追加行数セット
            jx.insertRow(row, rs.getRow() - 1);

            rs.first();

            // データセット
            do {

                //IVS_LVTu start edit 2015/06/16 Bug #37388
                jx.setValue(1, row, rs.getString("staffname"));
                jx.setValue(2, row, rs.getDouble("MainCats_value"));
                jx.setValue(3, row, rs.getLong("MainCats_Num"));
                jx.setValue(4, row, rs.getLong("MainCommodityOnlyCount_Num"));
                jx.setValue(5, row, rs.getDouble("Result_value"));
                jx.setValue(6, row, rs.getLong("Result_Num"));
                jx.setValue(7, row, rs.getLong("ResultCommodityOnlyCount_Num"));
                jx.setValue(8, row, rs.getDouble("Approach_value"));
                jx.setValue(9, row, rs.getLong("Approach_Num"));
                jx.setValue(10, row, rs.getLong("ApproachCommodityOnlyCount_Num"));
                jx.setValue(11, row, rs.getDouble("MainEqualApproach_value"));
                jx.setValue(12, row, rs.getLong("MainEqualApproach_Num"));
                jx.setValue(13, row, rs.getLong("MainEqualApproachCOC_Num"));
                //IVS_LVTu end edit 2015/06/16 Bug #37388

                row++;

            } while (rs.next());

            jx.removeRow(row);

            jx.openWorkbook();

        } else {

            return false;
        }

        return true;
    }

    /**
     * スタッフ成績表＜主担当者別顧客売上＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportCustomerSales(ReportParameterBean paramBean) throws Exception {
        return outStaffReportCustomerSales(paramBean, false);
    }

    /**
     * 担当別顧客分析＜来店回数別売上＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @param designatedFlag 指名の有無
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportCustomerSales(ReportParameterBean paramBean, Boolean designatedFlag) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();
        //nhanvt start edit 20150213 Bug #35209
        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);
        //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
        String subSQL = "";
        subSQL += " and \n"
                + " (	\n"
                + " exists (	\n"
                + "         select 1 from \n"
                + "         data_sales_detail dsd1\n"
                + "         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1)\n"
                + "         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n"
                + "         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n"
                + "         and mtc.shop_category_id in ( " + paramBean.getListCategoryId() + ")	\n"
                + "         ) 	\n"
                + " )\n";
        //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
        String designatedSql = "";
        if (designatedFlag != null) {
            designatedSql = " AND ds.designated_flag = " + designatedFlag.toString();
        }

        //明細
        //nhanvt start edit khtn
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" SELECT");
        sql.append("      ms.staff_id");
        sql.append("     ,ms.staff_name1 || ' ' || ms.staff_name2 AS staffname");
        sql.append("     ,coalesce(Count1Guest.Num, 0) AS Count1_Num");
        sql.append("     ,coalesce(Count2Guest.Num, 0) AS Count2_Num");
        sql.append("     ,coalesce(Count3Guest.Num, 0) AS Count3_Num");
        sql.append("     ,coalesce(Count1Guest.Value, 0) AS Count1_Value");
        sql.append("     ,coalesce(Count2Guest.Value, 0) AS Count2_Value");
        sql.append("     ,coalesce(Count3Guest.Value, 0) AS Count3_Value");
        sql.append("     ,MainCount.count AS MainCount");
        sql.append(" FROM");
        sql.append("     mst_staff ms");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("                 SELECT");
        sql.append("                      data.staff_id");
        sql.append("                     ,COUNT(*) AS Num");
        sql.append("                     ,SUM(value) AS VALUE");
        sql.append("                 FROM");
        sql.append("                     (");
        sql.append("                         SELECT");
        sql.append("                              ds.slip_no");
        sql.append("                             ,ms.staff_id");
        sql.append("                             ,sum(" + makeValueString(paramBean) + ") AS value");
        sql.append("                         FROM");
        sql.append("                             view_data_sales_detail_valid AS dsd");
        //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
        }
        //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("                                 INNER JOIN data_sales AS ds");
        sql.append("                                         ON ds.shop_id = dsd.shop_id");
        sql.append("                                        AND ds.slip_no = dsd.slip_no");
        sql.append("                                        AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                                 INNER JOIN mst_staff AS ms");
        //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        //sql.append("                                         ON ms.staff_id = ds.staff_id");
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append("                                         ON ms.staff_id = dsmt.staff_id");
        }
        else{
            sql.append("                                         ON ms.staff_id = ds.staff_id");
        }
        //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        sql.append("                                 INNER JOIN mst_customer mc");
        sql.append("                                         ON mc.customer_id = ds.customer_id");
        //Luc start edit 20141229 
        //sql.append("                                        AND mc.before_visit_num is null");
        sql.append("                                        AND (mc.before_visit_num is null or mc.before_visit_num = 0)");
         //Luc end edit 20141229 
        sql.append("                                        AND mc.customer_no != '0'");
        sql.append("                         WHERE");
        sql.append("                                 ds.delete_date IS NULL");
        sql.append("                             AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                             AND ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                             AND dsd.product_division = 1");
        sql.append("                             AND get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 1");
        sql.append(designatedSql);
        //IVS_LVTu start add 2014/11/28 Mashu_担当別顧客成績
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append(subSQL);
        }
        //IVS_LVTu end add 2014/11/28 Mashu_担当別顧客成績
        sql.append("                         GROUP BY");
        sql.append("                              ds.slip_no");
        sql.append("                             ,ms.staff_id");
        sql.append("                     ) data");
        sql.append("                 GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) Count1Guest");
        sql.append("             ON Count1Guest.staff_id = ms.staff_id");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("                 SELECT");
        sql.append("                      data.staff_id");
        sql.append("                     ,COUNT(*) AS Num");
        sql.append("                     ,SUM(value) AS VALUE");
        sql.append("                 FROM");
        sql.append("                     (");
        sql.append("                         SELECT");
        sql.append("                              ds.slip_no");
        sql.append("                             ,ms.staff_id");
        sql.append("                             ,sum(" + makeValueString(paramBean) + ") AS value");
        sql.append("                         FROM");
        sql.append("                             view_data_sales_detail_valid AS dsd");
        //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
        }
        //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("                                 INNER JOIN data_sales AS ds");
        sql.append("                                         ON ds.shop_id = dsd.shop_id");
        sql.append("                                        AND ds.slip_no = dsd.slip_no");
        sql.append("                                        AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                                 INNER JOIN mst_staff AS ms");
        //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        //sql.append("                                         ON ms.staff_id = ds.staff_id");
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append("                                         ON ms.staff_id = dsmt.staff_id");
        }
        else{
            sql.append("                                         ON ms.staff_id = ds.staff_id");
        }
        //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        sql.append("                                 INNER JOIN mst_customer mc");
        sql.append("                                         ON mc.customer_id = ds.customer_id");
        sql.append("                                        AND mc.customer_no != '0'");
        sql.append("                         WHERE");
        sql.append("                                 ds.delete_date IS NULL");
        sql.append("                             AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                             AND ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                             AND dsd.product_division = 1");
        sql.append("                             AND get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) BETWEEN 2 AND 3");
        sql.append(designatedSql);
        //IVS_LVTu start add 2014/12/01 Mashu_担当別顧客成績
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append(subSQL);
        }
        //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
        sql.append("                         GROUP BY");
        sql.append("                              ds.slip_no");
        sql.append("                             ,ms.staff_id");
        sql.append("                     ) data");
        sql.append("                 GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) Count2Guest");
        sql.append("             ON Count2Guest.staff_id = ms.staff_id");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("                 SELECT");
        sql.append("                      data.staff_id");
        sql.append("                     ,COUNT(*) AS Num");
        sql.append("                     ,SUM(value) AS VALUE");
        sql.append("                 FROM");
        sql.append("                     (");
        sql.append("                         SELECT");
        sql.append("                              ds.slip_no");
        sql.append("                             ,ms.staff_id");
        sql.append("                             ,sum(" + makeValueString(paramBean) + ") AS value");
        sql.append("                         FROM");
        sql.append("                             view_data_sales_detail_valid AS dsd");
        //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
        }
        //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("                                 INNER JOIN data_sales AS ds");
        sql.append("                                         ON ds.shop_id = dsd.shop_id");
        sql.append("                                        AND ds.slip_no = dsd.slip_no");
        sql.append("                                        AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                                 INNER JOIN mst_staff AS ms");
        //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        //sql.append("                                         ON ms.staff_id = ds.staff_id");
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append("                                         ON ms.staff_id = dsmt.staff_id");
        }
        else{
            sql.append("                                         ON ms.staff_id = ds.staff_id");
        }
        //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        sql.append("                                 INNER JOIN mst_customer mc");
        sql.append("                                         ON mc.customer_id = ds.customer_id");
        sql.append("                                        AND mc.customer_no != '0'");
        sql.append("                         WHERE");
        sql.append("                                 ds.delete_date IS NULL");
        sql.append("                             AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                             AND ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                             AND dsd.product_division = 1");
        sql.append("                             AND get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) >= 4");
        sql.append(designatedSql);
        //IVS_LVTu start add 2014/12/01 Mashu_担当別顧客成績
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append(subSQL);
        }
        //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
        sql.append("                         GROUP BY");
        sql.append("                              ds.slip_no");
        sql.append("                             ,ms.staff_id");
        sql.append("                     ) data");
        sql.append("                 GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) Count3Guest");
        sql.append("             ON Count3Guest.staff_id = ms.staff_id");
        sql.append("         LEFT JOIN");
        sql.append("             (");
        sql.append("                 SELECT");
        sql.append("                      data.staff_id");
        sql.append("                     ,COUNT(*) AS count");
        sql.append("                 FROM");
        sql.append("                     (");
        sql.append("                         SELECT");
        sql.append("                              ds.slip_no");
        sql.append("                             ,ms.staff_id");
        sql.append("                         FROM");
        sql.append("                             view_data_sales_detail_valid AS dsd");
        //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
        }
        //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("                                 INNER JOIN data_sales AS ds");
        sql.append("                                         ON ds.shop_id = dsd.shop_id");
        sql.append("                                        AND ds.slip_no = dsd.slip_no");
        sql.append("                                        AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                                 INNER JOIN mst_staff AS ms");
        //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        //sql.append("                                         ON ms.staff_id = ds.staff_id");
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append("                                         ON ms.staff_id = dsmt.staff_id");
        }
        else{
            sql.append("                                         ON ms.staff_id = ds.staff_id");
        }
        //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        sql.append("                                 INNER JOIN mst_customer mc");
        sql.append("                                         ON mc.customer_id = ds.customer_id");
        sql.append("                                        AND mc.customer_no != '0'");
        sql.append("                         WHERE");
        sql.append("                                 ds.delete_date IS NULL");
        sql.append("                             AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                             AND ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                             AND dsd.product_division = 1");
        sql.append(designatedSql);
        //IVS_LVTu start add 2014/12/01 Mashu_担当別顧客成績
        if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
            sql.append(subSQL);
        }
        //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
        sql.append("                         GROUP BY");
        sql.append("                              ds.slip_no");
        sql.append("                             ,ms.staff_id");
        sql.append("                     ) data");
        sql.append("                 GROUP BY");
        sql.append("                     data.staff_id");
        sql.append("             ) MainCount");
        sql.append("             ON MainCount.staff_id = ms.staff_id");
        sql.append(" WHERE");
        sql.append("     (");
        sql.append("            Count1Guest.staff_id = ms.staff_id");
        sql.append("         OR Count2Guest.staff_id = ms.staff_id");
        sql.append("         OR Count3Guest.staff_id = ms.staff_id");
        sql.append("     )");
        sql.append(" ORDER BY");
        sql.append("     staff_id");
        //nhanvt start edit 20150213 Bug #35209
        PreparedStatement stmt = cw.prepareStatement(sql.toString());
        ResultSet rs = null;
        rs = stmt.executeQuery();

        if (rs.last()) {

            JExcelApi jx = new JExcelApi("スタッフ成績_担当別顧客成績_来店回数別売上");
            jx.setTemplateFile("/reports/スタッフ成績_担当別顧客成績_来店回数別売上.xls");

            // ヘッダ
            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getTargetName());
            Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
            paramBean.setTaxRate(tax_rate);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 6, "税抜");
            } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                jx.setValue(2, 6, "税込");
            }
            String designatedString = "すべて";
            if (designatedFlag != null) {
                if (designatedFlag.booleanValue()) {
                    designatedString = "指名";
                } else {
                    designatedString = "フリー";
                }
            }
            jx.setValue(2, 7, designatedString);

            //IVS_LVTu start add 2014/12/01 Mashu_担当別顧客成績
            //Luc start add 20150108 [gb]トータルビューティ対応帳票の追加（担当別顧客成績）
            if(SystemInfo.getCurrentShop().getShopID() == 0 || SystemInfo.getCurrentShop().getUseShopCategory()==1) {
                 jx.setValue(1, 8, "業態分類 ：");
            }else {
                 jx.setValue(1, 8, "");
            }
            //Luc end add 20150108 [gb]トータルビューティ対応帳票の追加（担当別顧客成績）
            if(paramBean.getListCategoryName() != null)
            {
                
                jx.setValue(2, 8, paramBean.getListCategoryName());
            }
            else
            {
                jx.setValue(2, 8, "");
            }
            //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
            //IVS_LVTu start edit 2014/12/18 Mashu_担当別顧客成績
            //int row = 11;
            int row = 12;
            //IVS_LVTu end edit 2014/12/18 Mashu_担当別顧客成績

            // 追加行数セット
            jx.insertRow(row, rs.getRow() - 1);

            rs.first();

            // データセット
            do {

                jx.setValue(1, row, rs.getString("staffname"));
                jx.setValue(2, row, rs.getInt("Count1_Num"));
                jx.setValue(3, row, rs.getLong("Count1_Value"));
                jx.setValue(5, row, rs.getInt("Count2_Num"));
                jx.setValue(6, row, rs.getLong("Count2_Value"));
                jx.setValue(8, row, rs.getInt("Count3_Num"));
                jx.setValue(9, row, rs.getLong("Count3_Value"));

                row++;

            } while (rs.next());

            jx.removeRow(row);

            jx.openWorkbook();

        } else {

            return false;
        }

        return true;

    }

    public String getStaffReportCustomerSexSalesSQL(ReportParameterBean paramBean) {
        //nhanvt start edit 20150213 Bug #35209
        //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
        String subSQL = "";
        subSQL += " and \n"
                + " (	\n"
                + " exists (	\n"
                + "         select 1 from \n"
                + "         data_sales_detail dsd1\n"
                + "         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1)\n"
                + "         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n"
                + "         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n"
                + "         and mtc.shop_category_id in ( " + paramBean.getListCategoryId() + ")	\n"
                + "         ) 	\n"
                + " )\n";
        //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
        String sql = "";

        //nhanvt start edit 20150304 Bug #35434 
        try {

            sql = "SELECT ms.staff_id, ms.staff_name1 || ' ' || ms.staff_name2 AS staffname , " + "\n"
                    + "	 ManGuest.value AS ManGuest_value , ManGuest.Num AS ManGuest_Num, " + "\n"
                    + "	 FemaleGuest.value AS FemaleGuest_value , FemaleGuest.Num AS FemaleGuest_Num, " + "\n"
                    + "	 UncertainGuest.value AS UncertainGuest_value , UncertainGuest.Num AS UncertainGuest_Num " + "\n"
                    + "    ,MainCount.count AS MainCount "
                    + "  FROM mst_staff ms  " + "\n"
                    + "LEFT JOIN ( " + "\n"
                    + "	SELECT data.staff_id ,COUNT(*) AS Num ,sum(data.value) AS value  " + "\n"
                    + "	FROM (  " + "\n"
                    + "		SELECT  ds.slip_no , ms.staff_id ,   " + "\n"
                    + "		        sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  " + "\n"
                    + "		  FROM view_data_sales_detail_valid AS dsd  " + "\n";
                    //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql = sql + " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no "+"\n";
                    }
                    //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    sql = sql + "		INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no  " + "\n"
                     + "	And ds.sales_date = dsd.sales_date	-- AND ds.sales_date between '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "'  " + "\n"
                    + "		    AND ds.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                    + "		INNER JOIN (  " + "\n"
                    + "			SELECT ms.staff_id, ms.staff_no, ms.shop_id  " + "\n"
                    + "			  FROM mst_staff AS ms  " + "\n";
                    //+ //                                    "			 WHERE ms.delete_date IS NULL  " + "\n" +
                    //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                    }    
                    else{
                           sql += "		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                    }
                    //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    sql += "		INNER JOIN (  " + "\n"
                    + "			SELECT customer_id, sex, before_visit_num  " + "\n"
                    + "			  FROM mst_customer  " + "\n"
                    + "			 WHERE " + "\n"
                    + "			   sex = 1  " + "\n"
                    + "		) mc ON mc.customer_id = ds.customer_id  " + "\n"
                    + "		 WHERE ds.delete_date IS NULL  " + "\n"
                    + "		   AND dsd.sales_date between '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "'  " + "\n"
                    + "		    AND ds.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                    //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                    //+ "		   AND dsd.product_division = 1  " + "\n"
                    //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    + "		   AND dsd.product_division = 1  " + "\n";
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql = sql + subSQL;
                    }
                    sql = sql + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績
                    + "	) data  " + "\n"
                    + "	GROUP BY data.staff_id  " + "\n"
                    + ") ManGuest ON ManGuest.staff_id = ms.staff_id " + "\n"
                    + "LEFT JOIN( " + "\n"
                    + "	SELECT data.staff_id ,COUNT(*) AS Num ,sum(data.value) AS value  " + "\n"
                    + "	FROM (  " + "\n"
                    + "		SELECT  ds.slip_no , ms.staff_id ,   " + "\n"
                    + "		        sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  " + "\n"
                    + "		  FROM view_data_sales_detail_valid AS dsd  " + "\n";
                    //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql = sql + " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no "+"\n";
                    }
                    //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    sql = sql+ "		INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no  " + "\n"
                    + "		And ds.sales_date = dsd.sales_date	--   AND ds.sales_date between '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "'  " + "\n"
                    + "		INNER JOIN (  " + "\n"
                    + "			SELECT ms.staff_id, ms.staff_no, ms.shop_id  " + "\n"
                    + "			  FROM mst_staff AS ms  " + "\n";
                    //+ //                                    "			 WHERE ms.delete_date IS NULL  " + "\n" +
                    //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                    }    
                    else{
                           sql += "		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                    }
                    //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    sql += "		INNER JOIN (  " + "\n"
                    + "			SELECT customer_id, sex, before_visit_num  " + "\n"
                    + "			  FROM mst_customer  " + "\n"
                    + "			 WHERE " + "\n"
                    + "			    sex = 2  " + "\n"
                    + "		) mc ON mc.customer_id = ds.customer_id  " + "\n"
                    + "		 WHERE ds.delete_date IS NULL  " + "\n"
                    + "		   AND dsd.sales_date between '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "'  " + "\n"
                    + "		    AND ds.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                    //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                    //+ "		   AND dsd.product_division = 1  " + "\n"
                    //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    + "		   AND dsd.product_division = 1  " + "\n";
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql = sql + subSQL;
                    }
                    sql = sql + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績
                    + "	) data  " + "\n"
                    + "	GROUP BY data.staff_id  " + "\n"
                    + ") FemaleGuest ON FemaleGuest.staff_id = ms.staff_id " + "\n"
                    + "LEFT JOIN( " + "\n"
                    + "	SELECT data.staff_id ,COUNT(*) AS Num ,sum(data.value) AS value  " + "\n"
                    + "	FROM (  " + "\n"
                    + "		SELECT  ds.slip_no , ms.staff_id ,   " + "\n"
                    + "		        sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  " + "\n"
                    + "		  FROM view_data_sales_detail_valid AS dsd  " + "\n";
                    //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql = sql + " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no "+"\n";
                    }
                    //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    sql = sql + "		INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no  " + "\n"
                    + "		And ds.sales_date = dsd.sales_date	--    AND ds.sales_date between '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "'  " + "\n"
                    + "		INNER JOIN (  " + "\n"
                    + "			SELECT ms.staff_id, ms.staff_no, ms.shop_id  " + "\n"
                    + "			  FROM mst_staff AS ms  " + "\n";
                    //+ //                                    "			 WHERE ms.delete_date IS NULL  " + "\n" +
                    //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                    }    
                    else{
                           sql += "		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                    }
                    //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    sql += "		INNER JOIN (  " + "\n"
                    + "			SELECT customer_id, sex, before_visit_num  " + "\n"
                    + "			  FROM mst_customer  " + "\n"
                    + "			 WHERE " + "\n"
                    + "			   sex IS NULL   " + "\n"
                    + "		) mc ON mc.customer_id = ds.customer_id  " + "\n"
                    + "		 WHERE ds.delete_date IS NULL  " + "\n"
                    + "		   AND dsd.sales_date between '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "'  " + "\n"
                    + "		    AND ds.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                    //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                    //+ "		   AND dsd.product_division = 1  " + "\n"
                    //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    + "		   AND dsd.product_division = 1  " + "\n";
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql = sql + subSQL;
                    }
                    sql = sql + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績      
                    + "	) data  " + "\n"
                    + "	GROUP BY data.staff_id  " + "\n"
                    + ") UncertainGuest ON UncertainGuest.staff_id = ms.staff_id " + "\n"
                    + "LEFT JOIN( " + "\n"
                    + " SELECT data.staff_id  , COUNT(*) AS count  " + "\n"
                    + " FROM ( " + "\n"
                    + " 	SELECT ds.slip_no , ms.staff_id   " + "\n"
                    + " 	  FROM view_data_sales_detail_valid AS dsd " + "\n";
                    //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql = sql + " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no "+"\n";
                    }
                    //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    sql= sql + " 	INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no " + "\n"
                    + "  	And ds.sales_date = dsd.sales_date	--    AND ds.sales_date between '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' " + "\n"
                    + " 	INNER JOIN ( " + "\n"
                    + " 		SELECT ms.staff_id,ms.shop_id " + "\n"
                    + " 		  FROM mst_staff AS ms " + "\n";
                    //+ //                                    " 		 WHERE ms.delete_date IS NULL " + "\n" +
                    //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                    }    
                    else{
                           sql += "		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                    }
                    //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    sql += " 	 WHERE ds.delete_date IS NULL " + "\n"
                    + "  	   AND dsd.sales_date between '" + paramBean.getTargetStartDate() + "' AND '" + paramBean.getTargetEndDate() + "' " + "\n"
                    + "  	   AND ds.shop_id in (" + paramBean.getShopIDList() + ") " + "\n"
                    //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                    //+ "		   AND dsd.product_division = 1  " + "\n"
                    //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    + "		   AND dsd.product_division = 1  " + "\n";
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        sql = sql + subSQL;
                    }
                    sql = sql + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績
                    + "  ) data " + "\n"
                    + "  GROUP BY data.staff_id  " + "\n"
                    + ") MainCount ON MainCount.staff_id = ms.staff_id " + "\n"
                    + "WHERE\n"
                    + "       (ManGuest.staff_id = ms.staff_id OR FemaleGuest.staff_id = ms.staff_id OR UncertainGuest.staff_id = ms.staff_id ) " + "\n"
                    + "ORDER BY " + "\n"
                    + "     ms.display_seq" + "\n"
                    + "    ,lpad(ms.staff_no, 10, '0')" + "\n"
                    + "    ,ms.staff_id";
            //nhanvt end edit 20150213 Bug #35209
        } catch (Exception e) {
        }
        //nhanvt end edit 20150304 Bug #35434 
        return sql;
    }

    /**
     * 顧客別顧客分析＜性別別売上＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportCustomerSexSales(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        PreparedStatement stmt = cw.prepareStatement(getStaffReportCustomerSexSalesSQL(paramBean));
        ResultSet rs = null;
        rs = stmt.executeQuery();

        if (rs.last()) {

            JExcelApi jx = new JExcelApi("スタッフ成績_担当別顧客成績_性別別売上");
            jx.setTemplateFile("/reports/スタッフ成績_担当別顧客成績_性別別売上.xls");

            // ヘッダ
            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getTargetName());
            Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
            paramBean.setTaxRate(tax_rate);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 6, "税抜");
            } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                jx.setValue(2, 6, "税込");
            }
            //IVS_LVTu start add 2014/12/01 Mashu_担当別顧客成績
            //Luc start add 20150108 [gb]トータルビューティ対応帳票の追加（担当別顧客成績）
            if(SystemInfo.getCurrentShop().getShopID() == 0 || SystemInfo.getCurrentShop().getUseShopCategory()==1) {
                 jx.setValue(1, 7, "業態分類 ：");
            }else {
                 jx.setValue(1, 7, "");
            }
            //Luc end add 20150108 [gb]トータルビューティ対応帳票の追加（担当別顧客成績）
            if(paramBean.getListCategoryName() != null)
            {
                jx.setValue(2, 7, paramBean.getListCategoryName());
            }
            else
            {
                jx.setValue(2, 7, "");
            }
            //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
            //IVS_LVTu start edit 2014/12/18 Mashu_担当別顧客成績
            //int row = 10;
            int row = 11;
            //IVS_LVTu end edit 2014/12/18 Mashu_担当別顧客成績

            // 追加行数セット
            jx.insertRow(row, rs.getRow() - 1);

            rs.first();

            // データセット
            do {

                jx.setValue(1, row, rs.getString("staffname"));
                jx.setValue(2, row, rs.getInt("ManGuest_Num"));
                jx.setValue(4, row, rs.getLong("ManGuest_value"));
                jx.setValue(6, row, rs.getInt("FemaleGuest_Num"));
                jx.setValue(8, row, rs.getLong("FemaleGuest_value"));
                jx.setValue(10, row, rs.getInt("UncertainGuest_Num"));
                jx.setValue(12, row, rs.getLong("UncertainGuest_value"));

                row++;

            } while (rs.next());

            jx.removeRow(row);

            jx.openWorkbook();

        } else {

            return false;
        }

        return true;

    }

    /**
     * 担当別技術成績＜技術分類構成比＞＜技術クレーム分類構成比＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @param productDivision 技術区分　1:技術　3:技術クレーム
     * @param unitDivision 単位区分　1:人数　2:数量
     * @param customerDivision 会員区分　1:会員のみ　2:非会員含む
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportClassificationRatio(ReportParameterBean paramBean, int productDivision, int unitDivision, int customerDivision) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        //-------------------------------
        //技術分類を取得
        //-------------------------------
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      technic_class_id");
        sql.append("     ,technic_class_name");
        sql.append(" from");
        sql.append("         mst_technic_class mtc");
        sql.append(" where");
        sql.append("         delete_date is null");
        sql.append("     and exists");
        sql.append("         (");
        sql.append("             select 1");
        sql.append("             from");
        sql.append("                 mst_use_product mup");
        sql.append("                     inner join mst_technic mt");
        sql.append("                             on mup.product_id = mt.technic_id");
        sql.append("             where");
        sql.append("                     mup.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 and mup.product_division = 1");
        sql.append("                 and mt.technic_class_id = mtc.technic_class_id");
        sql.append("         )");
        if((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))){
            sql.append(" and mtc.shop_category_id in("+paramBean.getCategoryIDList()+")");
        }
        sql.append(" order by");
        sql.append("     display_seq");

        PreparedStatement stmt = cw.prepareStatement(sql.toString());
        ResultSet rs = stmt.executeQuery();

        ArrayList techList = new ArrayList();
        while (rs.next()) {
            Map tech = new HashMap();
            tech.put("technic_class_name", rs.getString("technic_class_name"));
            tech.put("technic_class_id", rs.getInt("technic_class_id"));
            techList.add(tech);
        }

        sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      ms.staff_id");
        sql.append("     ,max(ms.staff_name1 || ' ' || ms.staff_name2) as staffname");
        sql.append("     ,max(total.num) as total_num");
        // 技術新規
        sql.append("     ,max(total.new_num) as new_num");
        // 紹介
        sql.append("     ,max(total.introduce_num) as introduce_num");
        // 会員
        sql.append("     ,max(total.member_num) as member_num");
        // 指名
        sql.append("     ,max(total.designated_num) as designated_num");

        for (int i = 0; i < techList.size(); i++) {
            sql.append(" ,sum(case when t.technic_class_id = " + ((Map) techList.get(i)).get("technic_class_id") + " then t.num else 0 end) as t" + i + "_num");
        }

        sql.append("     ,max(coalesce(sales.techSales, 0)) as techSales");
        sql.append("     ,max(coalesce(sales.itemSales, 0)) as itemSales");

        sql.append(" from");
        sql.append("     mst_staff ms");

        // 明細
        sql.append("         left join");
        sql.append("         (");
        sql.append("             select");
        //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        //sql.append("                  ds.staff_id as staff_id");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("                  dsmt.staff_id as staff_id");
        }else{
            sql.append("                  ds.staff_id as staff_id");
        }
        //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        sql.append("                 ,mt.technic_class_id");
        if (unitDivision == 1) {
            sql.append("             ,count(distinct ds.slip_no) as num");
        } else {
            sql.append("             ,sum(ds.product_num) as num");
        }

        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid ds");
        //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
                sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                sql.append("     and dsmt.shop_category_id in ( " + paramBean.getCategoryIDList() +" ) ");
        }
        //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("                     inner join mst_customer mc");
        sql.append("                             on mc.customer_id = ds.customer_id");
        if (customerDivision == 1) {
            sql.append("                        and mc.customer_no <> '0'");
        }
        sql.append("                     inner join mst_technic mt");
        sql.append("                             on mt.technic_id = ds.product_id");
        sql.append("                            and ds.product_division = " + productDivision);
        sql.append("             where");
        sql.append("                     ds.sales_date between '" + paramMap.get("TargetStartDate") + "' and '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                 and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        
       //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists (	\n");
            sql.append("         select 1 from \n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and ds.product_division = dsd1.product_division and dsd1.product_division in(1,3)\n");
            sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
            sql.append("         where dsd1.slip_no = ds.slip_no and dsd1.shop_id = ds.shop_id and dsd1.slip_detail_no = ds.slip_detail_no \n");
            sql.append("         and mtc.shop_category_id in( " + paramBean.getCategoryIDList() + ")	\n");
            sql.append("         ) 	\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and ds.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n");
            sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
            sql.append("         where dsd1.slip_no = ds.slip_no and dsd1.shop_id = ds.shop_id and dsd1.slip_detail_no = ds.slip_detail_no\n");
            sql.append("         and mic.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and ds.product_division = dsd1.product_division and dsd1.product_division in (5,6) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = ds.slip_no and dsd1.shop_id = ds.shop_id and dsd1.slip_detail_no = ds.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }
       //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        
        sql.append("             group by");
        //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        //sql.append("                  ds.staff_id");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("                  dsmt.staff_id");
        }else{
            sql.append("                  ds.staff_id");
        }
        //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        sql.append("                 ,mt.technic_class_id");
        sql.append("         ) t");
        sql.append("         on ms.staff_id = t.staff_id");

        // 合計
        sql.append("         left join");
        sql.append("         (");
        sql.append("             select");
        //sql.append("                  ds.staff_id as staff_id");
        //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        //sql.append("                  ds.staff_id as staff_id");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("                  dsmt.staff_id as staff_id");
        }else{
            sql.append("                  ds.staff_id as staff_id");
        }
        //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般

//            if (unitDivision == 1) {
//            } else {
//                sql.append("             ,sum(ds.product_num) as num");
//            }

        sql.append("                 ,count(distinct ds.slip_no) as num");
        // 技術新規
        sql.append("                 ,count( distinct case when get_visit_count(ds.customer_id ,ds.shop_id ,ds.sales_date) = 1");
        sql.append("                                        and mc.customer_no <> '0'");
        sql.append("                                  then ds.slip_no else null end ) as new_num");
        // 紹介
        sql.append("                 ,count( distinct case when get_visit_count(ds.customer_id ,ds.shop_id ,ds.sales_date) = 1");
        sql.append("                                        and mc.customer_no <> '0'");
        sql.append("                                        and mc.introducer_id is not null");
        sql.append("                                  then ds.slip_no else null end ) as introduce_num");
        // 会員
        sql.append("                 ,count( distinct case when mc.customer_no <> '0' then ds.slip_no else null end ) as member_num");
        // 指名
        sql.append("                 ,count( distinct case when ds.designated_flag then ds.slip_no else null end ) as designated_num");

        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid ds");
        //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
                sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ");
                sql.append("     and dsmt.shop_category_id in ( " + paramBean.getCategoryIDList() +" ) ");
        }
        //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("                     inner join mst_customer mc");
        sql.append("                             on mc.customer_id = ds.customer_id");
        if (customerDivision == 1) {
            sql.append("                        and mc.customer_no <> '0'");
        }
        sql.append("                     inner join mst_technic mt");
        sql.append("                             on mt.technic_id = ds.product_id");
        sql.append("                            and ds.product_division = " + productDivision);
        sql.append("             where");
        sql.append("                     ds.sales_date between '" + paramMap.get("TargetStartDate") + "' and '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                 and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        
        //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists (	\n");
            sql.append("         select 1 from \n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and ds.product_division = dsd1.product_division and dsd1.product_division in(1,3)\n");
            sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
            sql.append("         where dsd1.slip_no = ds.slip_no and dsd1.shop_id = ds.shop_id and dsd1.slip_detail_no = ds.slip_detail_no \n");
            sql.append("         and mtc.shop_category_id in( " + paramBean.getCategoryIDList() + ")	\n");
            sql.append("         ) 	\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and ds.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n");
            sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
            sql.append("         where dsd1.slip_no = ds.slip_no and dsd1.shop_id = ds.shop_id and dsd1.slip_detail_no = ds.slip_detail_no\n");
            sql.append("         and mic.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and ds.product_division = dsd1.product_division and dsd1.product_division in (5,6) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = ds.slip_no and dsd1.shop_id = ds.shop_id and dsd1.slip_detail_no = ds.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }
       //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）

        
        sql.append("             group by");
        //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        //sql.append("                  ds.staff_id");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("                  dsmt.staff_id");
        }else{
            sql.append("                  ds.staff_id");
        }
        //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        sql.append("         ) total");
        sql.append("         on ms.staff_id = total.staff_id");

        sql.append("         left join ");
        sql.append("         (");
        sql.append("             select");
        //sql.append("                  staff_id");
        //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        //sql.append("                  dsd.staff_id");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("                  dsmt.staff_id as staff_id");
        }else{
            sql.append("                  dsd.staff_id as staff_id");
        }
        //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
                sql.append("             ,sum( case when product_division IN(1,3) and dsmt.shop_category_id = mtc.shop_category_id then discount_detail_value_no_tax else 0 end ) as techSales");
            }
            else {
                sql.append("             ,sum( case when product_division IN(1,3) then discount_detail_value_no_tax else 0 end ) as techSales");
            }
            sql.append("             ,sum( case when product_division IN(2,4) then discount_detail_value_no_tax else 0 end ) as itemSales");
        } else {
            // 税込み
            sql.append("             ,sum( case when product_division IN(1,3) then discount_detail_value_in_tax else 0 end ) as techSales");
            sql.append("             ,sum( case when product_division IN(2,4) then discount_detail_value_in_tax else 0 end ) as itemSales");
        }
        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid dsd ");
        //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
                sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
                sql.append("     and dsmt.shop_category_id in ( " + paramBean.getCategoryIDList() +" ) ");
                sql.append("     inner JOIN mst_technic mt ON dsd.product_id = mt.technic_id ");
                sql.append("         AND dsd.product_division IN(1,3) ");
                sql.append("     inner JOIN mst_technic_class mtc ON mtc.technic_class_id = mt.technic_class_id ");
        }
        //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("             where");
        //sql.append("                     staff_id is not null");
        //sql.append("                 and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     dsd.staff_id is not null");
        sql.append("                 and dsd.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 and sales_date between '" + paramMap.get("TargetStartDate") + "' and '" + paramMap.get("TargetEndDate") + "'");
         //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists (	\n");
            sql.append("         select 1 from \n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1,3)\n");
            sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n");
            sql.append("         and mtc.shop_category_id in( " + paramBean.getCategoryIDList() + ")	\n");
            sql.append("         ) 	\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n");
            sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and mic.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5,6) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }
       //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        sql.append("             group by");
        //sql.append("                 staff_id");
        //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        //sql.append("                 dsd.staff_id");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("                  dsmt.staff_id");
        }else{
            sql.append("                  dsd.staff_id");
        }
        //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        sql.append("         ) sales");
        sql.append("         on ms.staff_id = sales.staff_id");

        sql.append(" where");
        //Luc start edit 20160106 #46291
        //sql.append("     ms.staff_id in");
        sql.append("     exists");
        //Luc start edit 20160106 #46291
        sql.append("         (");
        
        //Luc start edit 20160106 #46291
        //sql.append("             select distinct");
        //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        //sql.append("                 dsd.staff_id");
        //if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
        //    sql.append("                  dsmt.staff_id as staff_id");
        //}else{
        //    sql.append("                  dsd.staff_id as staff_id");
        //}
        sql.append("             select 1");
        //Luc end edit 20160106 #46291
        //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid as dsd");
        //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
                sql.append("     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ");
                sql.append("     and dsmt.shop_category_id in ( " + paramBean.getCategoryIDList() +" ) ");
        }
        //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
        sql.append("             where");
        sql.append("                     dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' and '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                 and dsd.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 and dsd.product_division = " + productDivision);
        //Luc start add 20160106 #46291
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
             //geobeck start mod 20160808 #53351
             //sql.append("                dsmt.staff_id = ms.staff_id");
             sql.append("                and dsmt.staff_id = ms.staff_id");
             //geobeck end mod 20160808 #53351
        }else {
            sql.append("                 and dsd.staff_id = ms.staff_id ");
        }
        //Luc end add 20160106 #46291
        //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists (	\n");
            sql.append("         select 1 from \n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1,3)\n");
            sql.append("         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n");
            sql.append("         and mtc.shop_category_id in( " + paramBean.getCategoryIDList() + ")	\n");
            sql.append("         ) 	\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n");
            sql.append("         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and mic.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" or \n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5,6) \n");
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }
       //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        
        sql.append("         )");
        sql.append(" group by");
        sql.append("      ms.staff_id");
        sql.append(" order by");
        sql.append("     staff_id");

        stmt = cw.prepareStatement(sql.toString());
        rs = stmt.executeQuery();

        if (rs.last()) {

            JExcelApi jx = new JExcelApi("スタッフ成績_担当別技術成績_技術分類構成比");
            jx.setTemplateFile("/reports/スタッフ成績_担当別技術成績_技術分類構成比.xls");

            if (productDivision == 1) {
                jx.setValue(1, 2, "＜技術分類構成比＞");
                jx.setValue(1, 15, "※上記にクレーム客、店販のみの客は含まれておりません。");
                jx.getTargetSheet().setName("技術分類構成比");
            } else {
                jx.setValue(1, 2, "＜技術クレーム分類構成比＞");
                jx.setValue(1, 15, "※上記に店販のみの客は含まれておりません。");
                jx.getTargetSheet().setName("技術クレーム分類構成比");
            }

            // ヘッダ
            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getTargetName());
            Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
            paramBean.setTaxRate(tax_rate);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 6, "税抜");
            } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                jx.setValue(2, 6, "税込");
            }
            jx.setValue(2, 7, unitDivision == 1 ? "人数" : "数量");
            jx.setValue(2, 8, customerDivision == 1 ? "会員のみ" : "非会員含む");
            if(paramBean.getUseShopCategory()==1){
                 jx.setValue(1, 9, "業態分類：");
                 jx.setValue(2, 9, paramBean.getCategoryNameList());
            }
            // 空列削除
            int cnt = 200 - techList.size() * 2;
            for (int i = 0; i < cnt; i++) {
                jx.removeColumn(7);
            }

            // 技術分類名セット
            for (int i = 0; i < techList.size(); i++) {
                int col = ((i + 1) * 2) + 5;
                jx.setValue(col, 10, ((HashMap) techList.get(i)).get("technic_class_name").toString());
            }

            int row = 12;

            // 追加行数セット
            jx.insertRow(row, rs.getRow() - 1);

            rs.first();

            // データセット
            do {
                jx.setValue(1, row, rs.getString("staffname"));

                // 技術客数
                jx.setValue(2, row, rs.getInt("total_num"));
                // 技術新規
                jx.setValue(3, row, rs.getInt("new_num"));
                // 紹介
                jx.setValue(4, row, rs.getInt("introduce_num"));
                // 会員
                jx.setValue(5, row, rs.getInt("member_num"));
                // 指名
                jx.setValue(6, row, rs.getInt("designated_num"));

                for (int i = 0; i < techList.size(); i++) {
                    int col = ((i + 1) * 2) + 5;
                    jx.setValue(col, row, rs.getInt("t" + i + "_num"));
                }

                int col = (techList.size() * 2) + 5 + 3;
                // 技術売上
                jx.setValue(col++, row, rs.getInt("techSales"));
                // 商品売上
                jx.setValue(col++, row, rs.getInt("itemSales"));

                row++;

            } while (rs.next());

            jx.removeRow(row);

            jx.openWorkbook();


        } else {

            return false;
        }

        return true;
    }

    /**
     * 担当別商品成績＜商品分類構成比＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @param unitDivision 単位区分　1:人数　2:数量
     * @param customerDivision 会員区分　1:会員のみ　2:非会員含む
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportClassificationRatio2(ReportParameterBean paramBean, int unitDivision, int customerDivision) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        //-------------------------------
        //商品分類を取得
        //-------------------------------
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      item_class_id");
        sql.append("     ,item_class_name");
        sql.append(" from");
        sql.append("         mst_item_class mic");
        sql.append(" where");
        sql.append("         delete_date is null");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("  AND mic.shop_category_id in ("+ paramBean.getCategoryIDList() +")");
        }
        //IVS_LVTu end add 2015/06/05 New request #37165
        sql.append("     and exists");
        sql.append("         (");
        sql.append("             select 1");
        sql.append("             from");
        sql.append("                 mst_use_product mup");
        sql.append("                     inner join mst_item mi");
        sql.append("                             on mup.product_id = mi.item_id");
        sql.append("             where");
        sql.append("                     mup.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 and mup.product_division = 2");
        sql.append("                 and mi.item_class_id = mic.item_class_id");
        sql.append("         )");
        sql.append(" order by");
        sql.append("     display_seq");

        PreparedStatement stmt = cw.prepareStatement(sql.toString());
        ResultSet rs = stmt.executeQuery();

        ArrayList itemList = new ArrayList();
        while (rs.next()) {
            Map item = new HashMap();
            item.put("item_class_name", rs.getString("item_class_name"));
            item.put("item_class_id", rs.getInt("item_class_id"));
            itemList.add(item);
        }

        sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      ms.staff_id");
        sql.append("     ,max(ms.staff_name1 || ' ' || ms.staff_name2) as staffname");
        sql.append("     ,max(total.num) as total_num");
        sql.append("     ,max(total.num2) as total_num_item");

        for (int i = 0; i < itemList.size(); i++) {
            sql.append(" ,sum(case when t.item_class_id = " + ((Map) itemList.get(i)).get("item_class_id") + " then t.num else 0 end) as t" + i + "_num");
        }

        sql.append(" from");
        sql.append("     mst_staff ms");

        // 明細
        sql.append("         left join");
        sql.append("         (");
        sql.append("             select");
        sql.append("                  ds.staff_id as staff_id");
        sql.append("                 ,mi.item_class_id");
        if (unitDivision == 1) {
            sql.append("             ,count(distinct ds.slip_no) as num");
        } else {
            sql.append("             ,sum(ds.product_num) as num");
        }
        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid ds");
        sql.append("                     inner join mst_customer mc");
        sql.append("                             on mc.customer_id = ds.customer_id");
        if (customerDivision == 1) {
            sql.append("                        and mc.customer_no <> '0'");
        }
        sql.append("                     inner join mst_item mi");
        sql.append("                             on mi.item_id = ds.product_id");
        sql.append("                            and ds.product_division = 2");
        sql.append("             where");
        sql.append("                     ds.sales_date between '" + paramMap.get("TargetStartDate") + "' and '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                 and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("      and   exists");
            sql.append("             (");
            sql.append("                  SELECT ");
            sql.append("                     1");
            sql.append("                 FROM");
            sql.append("                      data_sales_detail dsd");
            sql.append("                     inner join mst_item mi on dsd.product_id = mi.item_id  ");
            sql.append("                     left join mst_item_class mic on mic.item_class_id = mi.item_class_id  ");
            sql.append("                  WHERE");
            sql.append("                          dsd.shop_id = ds.shop_id");
            sql.append("                      AND dsd.slip_no = ds.slip_no");
            sql.append("                      AND dsd.delete_date is null");
            sql.append("                      AND dsd.product_division in (2)");
            sql.append("                      AND mic.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append(" ) ");
        }
        //IVS_LVTu end add 2015/06/05 New request #37165
        sql.append("             group by");
        sql.append("                  ds.staff_id");
        sql.append("                 ,mi.item_class_id");
        sql.append("         ) t");
        sql.append("         on ms.staff_id = t.staff_id");

        // 合計
        sql.append("         left join");
        sql.append("         (");
        sql.append("             select");
        sql.append("                  ds.staff_id as staff_id");
        sql.append("                 ,count(distinct ds.slip_no) as num");
        sql.append("                 ,count(distinct");
        sql.append("                     (");
        sql.append("                         case when not exists");
        sql.append("                             (");
        sql.append("                                 select");
        sql.append("                                     1");
        sql.append("                                 from");
        sql.append("                                     view_data_sales_detail_valid");
        sql.append("                                 where");
        sql.append("                                         shop_id = ds.shop_id");
        sql.append("                                     and slip_no = ds.slip_no");
        sql.append("                                     and product_division <> 2");
        sql.append("                             ) then ds.slip_no");
        sql.append("                         end");
        sql.append("                     )) as num2");
        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid ds");
        sql.append("                     inner join mst_customer mc");
        sql.append("                             on mc.customer_id = ds.customer_id");
        if (customerDivision == 1) {
            sql.append("                        and mc.customer_no <> '0'");
        }
        sql.append("                     inner join mst_item mi");
        sql.append("                             on mi.item_id = ds.product_id");
        sql.append("                            and ds.product_division = 2");
        sql.append("             where");
        sql.append("                     ds.sales_date between '" + paramMap.get("TargetStartDate") + "' and '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                 and ds.shop_id in (" + paramBean.getShopIDList() + ")");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("      and   exists");
            sql.append("             (");
            sql.append("                  SELECT ");
            sql.append("                     1");
            sql.append("                 FROM");
            sql.append("                      data_sales_detail dsd");
            sql.append("                     inner join mst_item mi on dsd.product_id = mi.item_id  ");
            sql.append("                     left join mst_item_class mic on mic.item_class_id = mi.item_class_id  ");
            sql.append("                  WHERE");
            sql.append("                          dsd.shop_id = ds.shop_id");
            sql.append("                      AND dsd.slip_no = ds.slip_no");
            sql.append("                      AND dsd.delete_date is null");
            sql.append("                      AND dsd.product_division in (2)");
            sql.append("                      AND mic.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append(" ) ");
        }
        //IVS_LVTu end add 2015/06/05 New request #37165
        sql.append("             group by");
        sql.append("                  ds.staff_id");
        sql.append("         ) total");
        sql.append("         on ms.staff_id = total.staff_id");

        sql.append(" where");
        sql.append("     ms.staff_id in");
        sql.append("         (");
        sql.append("             select distinct");
        sql.append("                 dsd.staff_id");
        sql.append("             from");
        sql.append("                 view_data_sales_detail_valid as dsd");
        sql.append("             where");
        sql.append("                     dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' and '" + paramMap.get("TargetEndDate") + "'");
        sql.append("                 and dsd.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                 and dsd.product_division = 2");
        //IVS_LVTu start add 2015/06/05 New request #37165
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("      and   exists");
            sql.append("             (");
            sql.append("                  SELECT ");
            sql.append("                     1");
            sql.append("                 FROM");
            sql.append("                      data_sales_detail dsd1");
            sql.append("                     inner join mst_item mi on dsd1.product_id = mi.item_id  ");
            sql.append("                     left join mst_item_class mic on mic.item_class_id = mi.item_class_id  ");
            sql.append("                  WHERE");
            sql.append("                          dsd1.shop_id = dsd.shop_id");
            sql.append("                      AND dsd1.slip_no = dsd.slip_no");
            sql.append("                      AND dsd1.delete_date is null");
            sql.append("                      AND dsd1.product_division in (2)");
            sql.append("                      AND mic.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append(" ) ");
        }
        //IVS_LVTu end add 2015/06/05 New request #37165
        sql.append("         )");
        sql.append(" group by");
        sql.append("      ms.staff_id");
        sql.append(" order by");
        sql.append("     staff_id");

        stmt = cw.prepareStatement(sql.toString());
        rs = stmt.executeQuery();

        if (rs.last()) {
            
            JExcelApi jx = new JExcelApi("スタッフ成績_担当別商品成績_商品分類構成比");
            jx.setTemplateFile("/reports/スタッフ成績_担当別商品成績_商品分類構成比.xls");

            // ヘッダ
            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getTargetName());
            Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
            paramBean.setTaxRate(tax_rate);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 6, "税抜");
            } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                jx.setValue(2, 6, "税込");
            }
            jx.setValue(2, 7, unitDivision == 1 ? "人数" : "数量");
            jx.setValue(2, 8, customerDivision == 1 ? "会員のみ" : "非会員含む");
            //IVS_LVTu start add 2015/06/05 New request #37165
            if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
                jx.setValue(2, 9, paramBean.getListCategoryName());
            }
            //IVS_LVTu end add 2015/06/05 New request #37165

            // 空列削除
            int cnt = 200 - itemList.size() * 2;
            for (int i = 0; i < cnt; i++) {
                jx.removeColumn(4);
            }

            //IVS_LVTu start edit 2015/06/05 New request #37165
            // 技術分類名セット
            for (int i = 0; i < itemList.size(); i++) {
                int col = ((i + 1) * 2) + 2;
                //jx.setValue(col, 10, ((HashMap) itemList.get(i)).get("item_class_name").toString());
                jx.setValue(col, 11, ((HashMap) itemList.get(i)).get("item_class_name").toString());
            }

            //int row = 12;
            int row = 13;
            //IVS_LVTu end add 2015/06/05 New request #37165

            // 追加行数セット
            jx.insertRow(row, rs.getRow() - 1);

            rs.first();

            // データセット
            do {

                jx.setValue(1, row, rs.getString("staffname"));

                // 商品客数
                jx.setValue(2, row, rs.getInt("total_num"));
                // 商品のみ客数
                jx.setValue(3, row, rs.getInt("total_num_item"));

                for (int i = 0; i < itemList.size(); i++) {
                    int col = ((i + 1) * 2) + 2;
                    jx.setValue(col, row, rs.getInt("t" + i + "_num"));
                }

                row++;

            } while (rs.next());

            jx.removeRow(row);

            jx.openWorkbook();


        } else {

            return false;
        }

        return true;
    }

    /**
     * 再来分析出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportReappearanceOnePeriod(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        paramMap.put("StaffName", paramBean.getStaffName());

        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        paramMap.put("CalculationStartDate", format.format(paramBean.getCalculationStartDateObj()));
        paramMap.put("CalculationEndDate", format.format(paramBean.getCalculationEndDateObj()));
        paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
        paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));

        int fixedCount = paramBean.getFixedCount();  // 固定回数
        paramMap.put("FixedCount", fixedCount + "回以上");

        boolean isSimpleCount = paramBean.getNumberCondition().equals("純客数");
        paramMap.put("NumberCondition", paramBean.getNumberCondition());

        if (paramBean.isSameTechnicClass()) {
            paramMap.put("TechnicClassCondition", "同分類の再来のみ対象");
        } else {
            paramMap.put("TechnicClassCondition", "他分類での再来も対象");
        }
        
        //IVS_Thanh  start edit 2014/08/01 Mashu_再来分析
        if (paramBean.getNewVisitCurrent()) {
            paramMap.put("NewVisitCurrent", "自店新規");
        }
        else
        {
           paramMap.put("NewVisitCurrent", "全店新規"); 
        }
        paramMap.put("CategoryNameList", paramBean.getCategoryNameList());
        //IVS_Thanh  end edit 2014/08/01 Mashu_再来分析

        // StaffReportBean の初期化
        HashMap tmpMap = null;
        ReappearanceReportBean reappearanceBean = null;
        ArrayList<ReappearanceReportBean> jrBeanList = new ArrayList<ReappearanceReportBean>();

        // 最初に年齢部分だけを埋め込んでおく
        for (int i = 0; i <= 11; i++) {

            reappearanceBean = new ReappearanceReportBean();

            if (1 < i && i < 11) {
                reappearanceBean.setAge(((i + 1) * 5) + "〜" + (4 + (i + 1) * 5) + "才");
            } else if (i == 0) {
                reappearanceBean.setAge("不明");
            } else if (i == 1) {
                reappearanceBean.setAge("0〜14才");
            } else {
                reappearanceBean.setAge("60〜");
            }

            jrBeanList.add(reappearanceBean);
        }

        /**
         * ********************************
         */
        /* SQL文組み立て処理 */
        /**
         * ********************************
         */
        String sql = "";
        String fromSql = "";
        String tmpSql = "";

        /**
         * ********************************************************************************
         */
        /* 来店回数別再来 */
        /**
         * ********************************************************************************
         */
        if (isSimpleCount) {

            // 純客数

            fromSql = "";
            fromSql += " (";
            //IVS_Hoa  start edit 2014/10/09 Mashu_再来分析
            fromSql += "     select distinct ";
            //IVS_Hoa  end edit 2014/10/09 Mashu_再来分析
            fromSql += "          ds.sales_date";
            fromSql += "         ,ds.customer_id";
            fromSql += "         ,ds.insert_date";
            fromSql += "         ,mc.introducer_id";
            fromSql += "         ,mc.birthday";
            fromSql += "         ,mc.sex";
            fromSql += "         ,(";
            fromSql += "             select";
            fromSql += "                 count(slip_no) + coalesce(max(before_visit_num),0)";
            fromSql += "             from";
            fromSql += "                 data_sales ";
            fromSql += "                     inner join mst_customer";
            fromSql += "                         using(customer_id)";
            fromSql += "             where";            
            fromSql += "         exists (";
            if (paramBean.getCategoryIDList().equals("")) {
                fromSql += "               SELECT 1";
                fromSql += "               FROM data_sales_detail dsd";
                fromSql += "               WHERE dsd.shop_id = data_sales.shop_id";
                fromSql += "               AND dsd.slip_no = data_sales.slip_no";
                fromSql += "               AND dsd.delete_date is null";
                fromSql += "               AND dsd.product_division in (1,5,6)";
             }  else {	
	            fromSql += "               SELECT 1";	
	            fromSql += "               FROM data_sales_detail dsd";	
	            fromSql += "         	    inner join mst_technic mst on mst.technic_id = dsd.product_id";
	            fromSql += "         	                               and dsd.product_division = 1";
	            fromSql += "         	    left join mst_technic_class mstc on mstc.technic_class_id = mst.technic_class_id";
	            fromSql += "         	WHERE dsd.shop_id = data_sales.shop_id";
	            fromSql += "         	AND dsd.slip_no = data_sales.slip_no";
	            fromSql += "         	AND dsd.delete_date is null";
	            fromSql += "         	AND dsd.product_division in (1)";
	            fromSql += "            AND mstc.shop_category_id in (" + paramBean.getCategoryIDList() + ") ";	
	            fromSql += "         	UNION ALL ";
	            fromSql += "         	SELECT 1 ";
	            fromSql += "         	FROM data_sales_detail dsd";
	            fromSql += "         	      inner join mst_course msc on msc.course_id = dsd.product_id";
	            fromSql += "         	                                and dsd.product_division in (5,6)";
	            fromSql += "         	      left join mst_course_class mscc on mscc.course_class_id = msc.course_class_id";
	            fromSql += "         	WHERE dsd.shop_id = data_sales.shop_id";
	            fromSql += "         	AND dsd.slip_no = data_sales.slip_no";
	            fromSql += "         	AND dsd.delete_date is null ";
	            fromSql += "         	AND dsd.product_division in (5,6) ";
	            fromSql += "            AND mscc.shop_category_id in (" + paramBean.getCategoryIDList() + ") ";
	        }
            fromSql += " ) ";
            fromSql += "                 and    data_sales.delete_date is null";
            fromSql += "                 and customer_id = ds.customer_id";
            //IVS_Thanh  start edit 2014/08/01 Mashu_再来分析            
            if (paramBean.getNewVisitCurrent()) {
                fromSql += "              and data_sales.shop_id= ds.shop_id";
            }
            //IVS_Thanh  end edit 2014/08/01 Mashu_再来分析
            fromSql += "                 and (";
            fromSql += "                         data_sales.sales_date < ds.sales_date";
            fromSql += "                      or (data_sales.sales_date = ds.sales_date and data_sales.insert_date <= ds.insert_date)";
            fromSql += "                     )";
            fromSql += "          ) as visit_num";
            fromSql += "     from";
            fromSql += "         data_sales ds";
            fromSql += "             join";
            fromSql += "             (";
            fromSql += "                 select";
            fromSql += "                      a.shop_id";
            fromSql += "                     ,a.sales_date";
            fromSql += "                     ,a.customer_id";
            fromSql += "                     ,max(a.slip_no) as slip_no";
            fromSql += "                 from";
            fromSql += "                     data_sales a";
            fromSql += "                         join";
            fromSql += "                         (";
            fromSql += "                             select";
            fromSql += "                                  ds.customer_id";
            fromSql += "                                 ,max(ds.sales_date) as sales_date";
            fromSql += "                             from";
            fromSql += "                                 data_sales ds";
            fromSql += "                                     join mst_customer mc";
            fromSql += "                                         using(customer_id)";
            //IVS_Hoa  start add 2014/10/09 Mashu_再来分析
            if (!paramBean.getCategoryIDList().equals("")) {
                fromSql += "      Inner Join data_sales_mainstaff dsmt on dsmt.shop_id = ds.shop_id and dsmt.slip_no = ds.slip_no ";
            }
            //IVS_Hoa  end add 2014/10/09 Mashu_再来分析 
            fromSql += "                             where";
            fromSql += "                                 exists";
            fromSql += "                                     (";
            //IVS_Thanh  start add 2014/08/01 Mashu_再来分析
//            fromSql += "                                         select 1";
//            fromSql += "                                         from";
//            fromSql += "                                             data_sales_detail";
//            fromSql += "                                         where";
//            fromSql += "                                                 shop_id = ds.shop_id";
//            fromSql += "                                             and slip_no = ds.slip_no";
//            fromSql += "                                             and delete_date is null";
//            fromSql += "                                             and product_division in (1)";
            if (paramBean.getCategoryIDList().equals("")) {
                fromSql += "                 select 1";
                fromSql += "                 from";
                fromSql += "                     data_sales_detail";
                fromSql += "                 where";
                fromSql += "                         shop_id = ds.shop_id";
                fromSql += "                     and slip_no = ds.slip_no";
                fromSql += "                     and delete_date is null";
                fromSql += "                     and product_division in (1,5,6)";
            }
            else
            {
                fromSql += "                 select 1";
                fromSql += "                 from";
                fromSql += "                     data_sales_detail dsd \n";
                fromSql += "             inner join mst_technic mst on mst.technic_id = dsd.product_id \n";
                fromSql += "             left join mst_technic_class mtc on mtc.technic_class_id = mst.technic_class_id \n";
                fromSql += "                 where";
                fromSql += "                         dsd.shop_id = ds.shop_id \n";
                fromSql += "                     and dsd.slip_no = ds.slip_no \n";
                fromSql += "                     and dsd.delete_date is null \n";
                fromSql += "                     and product_division in (1)";
                fromSql += "            AND mtc.shop_category_id in (" + paramBean.getCategoryIDList() + ") \n";																								
                fromSql += "        Union All \n";	
                fromSql += "                 select 1 \n";	
                fromSql += "                 from \n";
                fromSql += "                     data_sales_detail dsd \n";
                fromSql += "               inner join mst_course msc on msc.course_id = dsd.product_id \n";
                fromSql += "               left join mst_course_class mcc on mcc.course_class_id = msc.course_class_id \n";
                fromSql += "               WHERE dsd.shop_id = ds.shop_id \n";
                fromSql += "               AND dsd.slip_no = ds.slip_no \n";
                fromSql += "               AND dsd.delete_date is null \n";
                fromSql += "               AND dsd.product_division in (5,6) \n";
                fromSql += "            AND mcc.shop_category_id in (" + paramBean.getCategoryIDList() + ") \n";

            }
            //IVS_Thanh  end add 2014/08/01 Mashu_再来分析            
            fromSql += "                                     )";
            fromSql += "                                 and ds.delete_date is null";
            fromSql += "                                 and mc.customer_no <> '0'";
            fromSql += "                                 and ds.shop_id in (" + paramBean.getShopIDList() + ")";
            fromSql += "                                 and ds.sales_date between '" + paramMap.get("TargetStartDate") + " 00:00:00' and '" + paramMap.get("TargetEndDate") + " 23:59:59'";

            if (paramBean.getStaffId() != null) {
                //IVS_Hoa  start edit 2014/10/09 Mashu_再来分析
                //fromSql += "                             and ds.staff_id = " + paramBean.getStaffId();
                if (paramBean.getCategoryIDList().equals("")) {
                    fromSql += "     and ds.staff_id = " + paramBean.getStaffId();
                } else {
                    fromSql += "     and dsmt.staff_id = " + paramBean.getStaffId();
                    fromSql += "     and dsmt.shop_category_id in (" + paramBean.getCategoryIDList() + ") ";
                }
                //IVS_Hoa  end edit 2014/10/09 Mashu_再来分析
            }

            fromSql += "                             group by";
            fromSql += "                                 ds.customer_id";
            fromSql += "                         ) b";
            fromSql += "                         using(customer_id, sales_date)";
            fromSql += "                 where";
            fromSql += "                     a.delete_date is null";
            fromSql += "                 group by";
            fromSql += "                      shop_id";
            fromSql += "                     ,sales_date";
            fromSql += "                     ,customer_id";
            fromSql += "             ) b";
            fromSql += "             using(shop_id, customer_id, sales_date, slip_no)";
            fromSql += "             join mst_customer mc";
            fromSql += "                 using(customer_id)";
            fromSql += " ) t";

        } else {

            // 延べ客数

            fromSql = "";
            fromSql += " (";
            //IVS_Hoa  start edit 2014/10/09 Mashu_再来分析
            fromSql += "     select distinct ";
            //IVS_Hoa  end edit 2014/10/09 Mashu_再来分析
            fromSql += "          ds.sales_date";
            fromSql += "         ,ds.customer_id";
            fromSql += "         ,ds.insert_date";
            fromSql += "         ,mc.introducer_id";
            fromSql += "         ,mc.birthday";
            fromSql += "         ,mc.sex";
            fromSql += "         ,(";
            fromSql += "             select";
            fromSql += "                 count(slip_no) + coalesce(max(before_visit_num),0)";
            fromSql += "             from";
            fromSql += "                 data_sales ";
            fromSql += "                     inner join mst_customer";
            fromSql += "                         using(customer_id)";
            fromSql += "             where";
            fromSql += "         exists (";
            if (paramBean.getCategoryIDList().equals("")) {
                fromSql += "               SELECT 1";
                fromSql += "               FROM data_sales_detail dsd";
                fromSql += "               WHERE dsd.shop_id = data_sales.shop_id";
                fromSql += "               AND dsd.slip_no = data_sales.slip_no";
                fromSql += "               AND dsd.delete_date is null";
                fromSql += "               AND dsd.product_division in (1,5,6)";
             }  else {	
	            fromSql += "               SELECT 1";	
	            fromSql += "               FROM data_sales_detail dsd";	
	            fromSql += "         	    inner join mst_technic mst on mst.technic_id = dsd.product_id";
	            fromSql += "         	                               and dsd.product_division = 1";
	            fromSql += "         	    left join mst_technic_class mstc on mstc.technic_class_id = mst.technic_class_id";
	            fromSql += "         	WHERE dsd.shop_id = data_sales.shop_id";
	            fromSql += "         	AND dsd.slip_no = data_sales.slip_no";
	            fromSql += "         	AND dsd.delete_date is null";
	            fromSql += "         	AND dsd.product_division in (1)";
	            fromSql += "            AND mstc.shop_category_id in (" + paramBean.getCategoryIDList() + ") ";	
	            fromSql += "         	UNION ALL ";
	            fromSql += "         	SELECT 1 ";
	            fromSql += "         	FROM data_sales_detail dsd";
	            fromSql += "         	      inner join mst_course msc on msc.course_id = dsd.product_id";
	            fromSql += "         	                                and dsd.product_division in (5,6)";
	            fromSql += "         	      left join mst_course_class mscc on mscc.course_class_id = msc.course_class_id";
	            fromSql += "         	WHERE dsd.shop_id = data_sales.shop_id";
	            fromSql += "         	AND dsd.slip_no = data_sales.slip_no";
	            fromSql += "         	AND dsd.delete_date is null ";
	            fromSql += "         	AND dsd.product_division in (5,6) ";
	            fromSql += "            AND mscc.shop_category_id in (" + paramBean.getCategoryIDList() + ") ";
	        }
            fromSql += " ) ";
            fromSql += "                 and    data_sales.delete_date is null";
            fromSql += "                 and customer_id = ds.customer_id";
            //IVS_Thanh  start edit 2014/08/01 Mashu_再来分析            
            if (paramBean.getNewVisitCurrent()) {
                fromSql += "              and data_sales.shop_id= ds.shop_id";
            }
            //IVS_Thanh  end edit 2014/08/01 Mashu_再来分析
            fromSql += "                 and (";
            fromSql += "                         data_sales.sales_date < ds.sales_date";
            fromSql += "                      or (data_sales.sales_date = ds.sales_date and data_sales.insert_date <= ds.insert_date)";
            fromSql += "                     )";
            fromSql += "          ) as visit_num";
            fromSql += "     from";
            fromSql += "         data_sales ds";
            fromSql += "             join mst_customer mc";
            fromSql += "                 using(customer_id)";
             //IVS_Hoa  start add 2014/10/09 Mashu_再来分析
            if (!paramBean.getCategoryIDList().equals("") &&  paramBean.getStaffId() != null) {
                fromSql += "      Inner Join data_sales_mainstaff dsmt on dsmt.shop_id = ds.shop_id and dsmt.slip_no = ds.slip_no ";
            }
            //IVS_Hoa  end add 2014/10/09 Mashu_再来分析 
            fromSql += "     where";
            fromSql += "         exists";
            fromSql += "             (";
            //IVS_Thanh  start add 2014/08/01 Mashu_再来分析
//            fromSql += "                 select 1";
//            fromSql += "                 from";
//            fromSql += "                     data_sales_detail";
//            fromSql += "                 where";
//            fromSql += "                         shop_id = ds.shop_id";
//            fromSql += "                     and slip_no = ds.slip_no";
//            fromSql += "                     and delete_date is null";
//            fromSql += "                     and product_division in (1)";
            if (paramBean.getCategoryIDList().equals("")) {
                fromSql += "                 select 1";
                fromSql += "                 from";
                fromSql += "                     data_sales_detail";
                fromSql += "                 where";
                fromSql += "                         shop_id = ds.shop_id";
                fromSql += "                     and slip_no = ds.slip_no";
                fromSql += "                     and delete_date is null";
                fromSql += "                     and product_division in (1,5,6)";
            }
            else
            {
                fromSql += "                 select 1";
                fromSql += "                 from";
                fromSql += "                     data_sales_detail dsd \n";
                fromSql += "             inner join mst_technic mst on mst.technic_id = dsd.product_id \n";
                fromSql += "             left join mst_technic_class mtc on mtc.technic_class_id = mst.technic_class_id \n";
                fromSql += "                 where";
                fromSql += "                         dsd.shop_id = ds.shop_id \n";
                fromSql += "                     and dsd.slip_no = ds.slip_no \n";
                fromSql += "                     and dsd.delete_date is null \n";
                fromSql += "                     and product_division in (1)";
                fromSql += "            AND mtc.shop_category_id in (" + paramBean.getCategoryIDList() + ") \n";																								
                fromSql += "        Union All \n";	
                fromSql += "                 select 1 \n";	
                fromSql += "                 from \n";
                fromSql += "                     data_sales_detail dsd \n";
                fromSql += "               inner join mst_course msc on msc.course_id = dsd.product_id \n";
                fromSql += "               left join mst_course_class mcc on mcc.course_class_id = msc.course_class_id \n";
                fromSql += "               WHERE dsd.shop_id = ds.shop_id \n";
                fromSql += "               AND dsd.slip_no = ds.slip_no \n";
                fromSql += "               AND dsd.delete_date is null \n";
                fromSql += "               AND dsd.product_division in (5,6) \n";
                fromSql += "            AND mcc.shop_category_id in (" + paramBean.getCategoryIDList() + ") \n";

            }
            //IVS_Thanh  end add 2014/08/01 Mashu_再来分析
            fromSql += "             )";
            fromSql += "         and ds.delete_date is null";
            fromSql += "         and mc.customer_no <> '0'";
            fromSql += "         and ds.shop_id in (" + paramBean.getShopIDList() + ")";
            fromSql += "         and ds.sales_date between '" + paramMap.get("TargetStartDate") + " 00:00:00' and '" + paramMap.get("TargetEndDate") + " 23:59:59'";

            if (paramBean.getStaffId() != null) {
                //IVS_Hoa  start edit 2014/10/09 Mashu_再来分析
                //fromSql += "     and ds.staff_id = " + paramBean.getStaffId();
                if (paramBean.getCategoryIDList().equals("")) {
                    fromSql += "     and ds.staff_id = " + paramBean.getStaffId();
                } else {
                    fromSql += "     and dsmt.staff_id = " + paramBean.getStaffId();
                    fromSql += "     and dsmt.shop_category_id in (" + paramBean.getCategoryIDList() + ") \n";
                }
                //IVS_Hoa  end edit 2014/10/09 Mashu_再来分析
            }

            fromSql += " ) t";

        }

        tmpSql = "";
        tmpSql += " select 1";
        tmpSql += " from";
        tmpSql += "     (";
        tmpSql += "         select";
        tmpSql += "              ds.sales_date";
        tmpSql += "             ,ds.customer_id";
        tmpSql += "             ,ds.insert_date";
        tmpSql += "         from";
        tmpSql += "             data_sales ds";
        tmpSql += "                 join mst_customer mc";
        tmpSql += "                     using(customer_id)";
        tmpSql += "         where";
        tmpSql += "             exists";
        tmpSql += "                 (";
        //IVS_Thanh  start add 2014/08/01 Mashu_再来分析
//        tmpSql += "                     select 1";
//        tmpSql += "                     from";
//        tmpSql += "                         data_sales_detail";
//        tmpSql += "                     where";
//        tmpSql += "                             shop_id = ds.shop_id";
//        tmpSql += "                         and slip_no = ds.slip_no";
//        tmpSql += "                         and delete_date is null";
//        tmpSql += "                         and product_division in (1)";
            if (paramBean.getCategoryIDList().equals("") || paramBean.getDiffShopCatVisit() ) {
                tmpSql += "                     select 1";
                tmpSql += "                     from";
                tmpSql += "                         data_sales_detail";
                tmpSql += "                     where";
                tmpSql += "                             shop_id = ds.shop_id";
                tmpSql += "                         and slip_no = ds.slip_no";
                tmpSql += "                         and delete_date is null";
                tmpSql += "                         and product_division in (1,5,6)";
            }
            else
            {
                tmpSql += "                 select 1";
                tmpSql += "                 from";
                tmpSql += "                     data_sales_detail dsd \n";
                tmpSql += "             inner join mst_technic mst on mst.technic_id = dsd.product_id \n";
                tmpSql += "             left join mst_technic_class mtc on mtc.technic_class_id = mst.technic_class_id \n";
                tmpSql += "                 where";
                tmpSql += "                         dsd.shop_id = ds.shop_id \n";
                tmpSql += "                     and dsd.slip_no = ds.slip_no \n";
                tmpSql += "                     and dsd.delete_date is null \n";
                tmpSql += "                     and product_division in (1)";
                //Luc start add 20150123 gb]業態選択での再来分析への条件追加
                if( paramBean.getCategoryIDList()!= null &&  !paramBean.getCategoryIDList().equals("") && !paramBean.getDiffShopCatVisit() ){
                tmpSql += "            AND mtc.shop_category_id in (" + paramBean.getCategoryIDList() + ") \n";																								
                }
                //Luc end add 20150123 gb]業態選択での再来分析への条件追加
                tmpSql += "        Union All \n";	
                tmpSql += "                 select 1 \n";	
                tmpSql += "                 from \n";
                tmpSql += "                     data_sales_detail dsd \n";
                tmpSql += "               inner join mst_course msc on msc.course_id = dsd.product_id \n";
                tmpSql += "               left join mst_course_class mcc on mcc.course_class_id = msc.course_class_id \n";
                tmpSql += "               WHERE dsd.shop_id = ds.shop_id \n";
                tmpSql += "               AND dsd.slip_no = ds.slip_no \n";
                tmpSql += "               AND dsd.delete_date is null \n";
                tmpSql += "               AND dsd.product_division in (5,6) \n";
                //Luc start add 20150123 gb]業態選択での再来分析への条件追加
                if( paramBean.getCategoryIDList()!= null &&  !paramBean.getCategoryIDList().equals("") && !paramBean.getDiffShopCatVisit() ){
                tmpSql += "            AND mcc.shop_category_id in (" + paramBean.getCategoryIDList() + ") \n";
                }
                //Luc end add 20150123 gb]業態選択での再来分析への条件追加

            }
        //IVS_Thanh  end add 2014/08/01 Mashu_再来分析
        tmpSql += "                 )";
        tmpSql += "             and ds.delete_date is null";
        tmpSql += "             and mc.customer_no <> '0'";
        tmpSql += "             and ds.shop_id in (" + paramBean.getShopIDList() + ")";
        tmpSql += "             and ds.sales_date between '" + paramMap.get("CalculationStartDate") + " 00:00:00' and '" + paramMap.get("CalculationEndDate") + " 23:59:59'";
        tmpSql += "     ) w";
        tmpSql += " where";
        tmpSql += "         w.customer_id = t.customer_id";
        tmpSql += "     and (";
        tmpSql += "             w.sales_date > t.sales_date";
        tmpSql += "          or (w.sales_date = t.sales_date and w.insert_date > t.insert_date)";
        tmpSql += "         )";

        // メインＳＱＬ
        sql = "";
        sql += " select";
        sql += "      count(*) as total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when";
        sql += "                 exists (" + tmpSql + ") then 1 else 0";
        sql += "         end), 0) as reappearance";
        sql += "     ,coalesce(sum(case when visit_num = 1 then 1 else 0 end), 0) as new_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when visit_num = 1";
        sql += "              and exists (" + tmpSql + ") then 1 else 0";
        sql += "         end), 0) as new_reappearance";
        sql += "     ,coalesce(sum(case when visit_num = 1 and introducer_id is not null then 1 else 0 end), 0) as introduce_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when visit_num = 1 and introducer_id is not null";
        sql += "              and exists (" + tmpSql + ") then 1 else 0";
        sql += "         end), 0) as introduce_reappearance";
        sql += "     ,coalesce(sum(case when visit_num between 2 and " + (fixedCount - 1) + " then 1 else 0 end), 0) as sub_fixed_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when visit_num between 2 and " + (fixedCount - 1);
        sql += "              and exists (" + tmpSql + ") then 1 else 0";
        sql += "         end), 0) as sub_fixed_reappearance";
        sql += "     ,coalesce(sum(case when visit_num >= " + fixedCount + " then 1 else 0 end), 0) as fixed_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when visit_num >= " + fixedCount;
        sql += "              and exists (" + tmpSql + ") then 1 else 0";
        sql += "         end), 0) as fixed_reappearance";
        sql += " from" + fromSql;

        PreparedStatement stmt = cw.prepareStatement(sql);
        System.out.println(sql);
        ResultSet rs = null;
        rs = stmt.executeQuery();
        if (rs.next()) {
            paramMap.put("CountTotal", rs.getLong("total"));
            paramMap.put("ReappearenceTotal", rs.getLong("reappearance"));
            paramMap.put("NewTotal", rs.getLong("new_total"));
            paramMap.put("NewReappearance", rs.getLong("new_reappearance"));
            paramMap.put("IntroduceTotal", rs.getLong("introduce_total"));
            paramMap.put("IntroduceReappearanceTotal", rs.getLong("introduce_reappearance"));
            paramMap.put("SubFixedTotal", rs.getLong("sub_fixed_total"));
            paramMap.put("SubFixedReappearance", rs.getLong("sub_fixed_reappearance"));
            paramMap.put("FixedTotal", rs.getLong("fixed_total"));
            paramMap.put("FixedReappearance", rs.getLong("fixed_reappearance"));
        }

        /**
         * ********************************************************************************
         */
        /* 顧客属性再来 */
        /**
         * ********************************************************************************
         */
        sql = "";
        sql += " select";
        sql += "      case";
        sql += "         when birthday is null then '0不明'";
        sql += "         when date_part('year', age(birthday)) < 15  then '10〜14才'";
        sql += "         when date_part('year', age(birthday)) >= 60 then '160〜'";
        sql += "         else '1' || trunc(date_part('year', age(birthday)) / 5) * 5 || '〜' || trunc(date_part('year', age(birthday)) / 5) * 5 + 4 || '才'";
        sql += "      end as order_age";
        sql += "     ,case";
        sql += "         when birthday is null then '不明'";
        sql += "         when date_part('year', age(birthday)) < 15  then '0〜14才'";
        sql += "         when date_part('year', age(birthday)) >= 60 then '60〜'";
        sql += "         else trunc(date_part('year', age(birthday)) / 5) * 5 || '〜' || trunc(date_part('year', age(birthday)) / 5) * 5 + 4 || '才'";
        sql += "      end as age_string";
        sql += "     ,sex";
        sql += "     ,count(*) as total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when exists";
        sql += "                 (";
        sql += "                     select 1";
        sql += "                     from";
        sql += "                         (";
        sql += "                             select";
        sql += "                                  ds.sales_date";
        sql += "                                 ,ds.customer_id";
        sql += "                                 ,ds.insert_date";
        sql += "                             from";
        sql += "                                 data_sales ds";
        sql += "                                     join mst_customer mc";
        sql += "                                         using(customer_id)";
        sql += "                             where";
        sql += "                                 exists";
        sql += "                                     (";
        //IVS_Thanh  start add 2014/08/01 Mashu_再来分析
//        sql += "                                         select 1";
//        sql += "                                         from";
//        sql += "                                             data_sales_detail";
//        sql += "                                         where";
//        sql += "                                                 shop_id = ds.shop_id";
//        sql += "                                             and slip_no = ds.slip_no";
//        sql += "                                             and delete_date is null";
//        sql += "                                             and product_division in (1)";
        if (paramBean.getCategoryIDList().equals("") || paramBean.getDiffShopCatVisit()) {
            sql += "                                         select 1";
            sql += "                                         from";
            sql += "                                             data_sales_detail";
            sql += "                                         where";
            sql += "                                                 shop_id = ds.shop_id";
            sql += "                                             and slip_no = ds.slip_no";
            sql += "                                             and delete_date is null";
            sql += "                                             and product_division in (1,5,6)";
        } else {
            sql += "                 select 1";
            sql += "                 from";
            sql += "                     data_sales_detail dsd \n";
            sql += "             inner join mst_technic mst on mst.technic_id = dsd.product_id \n";
            sql += "             left join mst_technic_class mtc on mtc.technic_class_id = mst.technic_class_id \n";
            sql += "                 where";
            sql += "                         dsd.shop_id = ds.shop_id \n";
            sql += "                     and dsd.slip_no = ds.slip_no \n";
            sql += "                     and dsd.delete_date is null \n";
            sql += "                     and product_division in (1)";
            sql += "            AND mtc.shop_category_id in (" + paramBean.getCategoryIDList() + ") \n";
            sql += "        Union All \n";
            sql += "                 select 1 \n";
            sql += "                 from \n";
            sql += "                     data_sales_detail dsd \n";
            sql += "               inner join mst_course msc on msc.course_id = dsd.product_id \n";
            sql += "               left join mst_course_class mcc on mcc.course_class_id = msc.course_class_id \n";
            sql += "               WHERE dsd.shop_id = ds.shop_id \n";
            sql += "               AND dsd.slip_no = ds.slip_no \n";
            sql += "               AND dsd.delete_date is null \n";
            sql += "               AND dsd.product_division in (5,6) \n";
            sql += "            AND mcc.shop_category_id in (" + paramBean.getCategoryIDList() + ") \n";
        }
        //IVS_Thanh  end add 2014/08/01 Mashu_再来分析
        
        sql += "                                     )";
        sql += "                                 and ds.delete_date is null";
        sql += "                                 and mc.customer_no <> '0'";
        sql += "                                 and ds.shop_id in (" + paramBean.getShopIDList() + ")";
        sql += "                                 and ds.sales_date between '" + paramMap.get("CalculationStartDate") + " 00:00:00' and '" + paramMap.get("CalculationEndDate") + " 23:59:59'";
        sql += "                         ) w";
        sql += "                     where";
        sql += "                             w.customer_id = t.customer_id";
        sql += "                         and (";
        sql += "                                 w.sales_date > t.sales_date";
        sql += "                              or (w.sales_date = t.sales_date and w.insert_date > t.insert_date)";
        sql += "                             )";
        sql += "                 )";
        sql += "             then 1";
        sql += "             else 0";
        sql += "         end), 0) as reappearance";
        sql += " from" + fromSql;
        sql += " group by";
        sql += "      order_age";
        sql += "     ,age_string";
        sql += "     ,sex";
        sql += " order by";
        sql += "     order_age";

        stmt = cw.prepareStatement(sql);
        rs = stmt.executeQuery();

        while (rs.next()) {
            int i = 0;
            do {
                reappearanceBean = jrBeanList.get(i);
                i++;
            } while (!reappearanceBean.getAge().equals(rs.getString("age_string")));

            if (rs.getInt("sex") == 1) {
                reappearanceBean.setTargetCount2(rs.getInt("total"));
                reappearanceBean.setReappearanceCount2(rs.getInt("reappearance"));
            } else if (rs.getInt("sex") == 2) {
                reappearanceBean.setTargetCount1(rs.getInt("total"));
                reappearanceBean.setReappearanceCount1(rs.getInt("reappearance"));
            } else {
                reappearanceBean.setTargetCount3(rs.getInt("total"));
                reappearanceBean.setReappearanceCount3(rs.getInt("reappearance"));
            }
        }

        /**
         * ********************************************************************************
         */
        /* 技術分類別再来 */
        /**
         * ********************************************************************************
         */
        if (isSimpleCount) {

            // 純客数

            fromSql = "";
            fromSql += " (";
            fromSql += "     select distinct";
            fromSql += "          dsd.shop_id";
            fromSql += "         ,dsd.slip_no";
            fromSql += "         ,dsd.sales_date";
            fromSql += "         ,dsd.customer_id";
            fromSql += "         ,mt.technic_class_id";
            fromSql += "         ,mtc.technic_class_name";
            fromSql += "         ,mtc.display_seq";
            fromSql += "         ,ds.insert_date";
            fromSql += "     from";
            fromSql += "         view_data_sales_detail_valid dsd";
            fromSql += "             inner join";
            fromSql += "                 (";
            fromSql += "                     select";
            fromSql += "                          ds.shop_id";
            fromSql += "                         ,ds.slip_no";
            fromSql += "                         ,ds.insert_date";
            fromSql += "                     from";
            fromSql += "                         data_sales ds";
            fromSql += "                             join";
            fromSql += "                             (";
            fromSql += "                                 select";
            fromSql += "                                      a.shop_id";
            fromSql += "                                     ,a.sales_date";
            fromSql += "                                     ,a.customer_id";
            fromSql += "                                     ,max(a.slip_no) as slip_no";
            fromSql += "                                 from";
            fromSql += "                                     data_sales a";
            fromSql += "                                         join";
            fromSql += "                                         (";
            fromSql += "                                             select";
            fromSql += "                                                  ds.customer_id";
            fromSql += "                                                 ,max(ds.sales_date) as sales_date";
            fromSql += "                                             from";
            fromSql += "                                                 data_sales ds";
            fromSql += "                                                     join mst_customer mc";
            fromSql += "                                                         using(customer_id)";
            fromSql += "                                             where";
            fromSql += "                                                 exists";
            fromSql += "                                                     (";
            fromSql += "                                                         select 1";
            fromSql += "                                                         from";
            fromSql += "                                                             data_sales_detail";
            fromSql += "                                                         where";
            fromSql += "                                                                 shop_id = ds.shop_id";
            fromSql += "                                                             and slip_no = ds.slip_no";
            fromSql += "                                                             and delete_date is null";
            fromSql += "                                                             and product_division in (1)";
            fromSql += "                                                     )";
            fromSql += "                                                 and ds.delete_date is null";
            fromSql += "                                                 and mc.customer_no <> '0'";
            fromSql += "                                                 and ds.shop_id in (" + paramBean.getShopIDList() + ")";
            fromSql += "                                                 and ds.sales_date between '" + paramMap.get("TargetStartDate") + " 00:00:00' and '" + paramMap.get("TargetEndDate") + " 23:59:59'";

            if (paramBean.getStaffId() != null) {
                //IVS_Hoa  start edit 2014/10/09 Mashu_再来分析
                //fromSql += "                                             and ds.staff_id = " + paramBean.getStaffId();
                if (paramBean.getCategoryIDList().equals("")) {
                    fromSql += "     and ds.staff_id = " + paramBean.getStaffId();
                }
                //IVS_Hoa  end edit 2014/10/09 Mashu_再来分析
            }

            fromSql += "                                             group by";
            fromSql += "                                                 ds.customer_id";
            fromSql += "                                         ) b";
            fromSql += "                                         using(customer_id, sales_date)";
            fromSql += "                                 where";
            fromSql += "                                     a.delete_date is null";
            fromSql += "                                 group by";
            fromSql += "                                      shop_id";
            fromSql += "                                     ,sales_date";
            fromSql += "                                     ,customer_id";
            fromSql += "                             ) b";
            fromSql += "                             using(shop_id, customer_id, sales_date, slip_no)";
            fromSql += "                 ) ds";
            fromSql += "                     on dsd.shop_id = ds.shop_id";
            fromSql += "                    and dsd.slip_no = ds.slip_no";
            fromSql += "             inner join mst_technic mt";
            fromSql += "                     on dsd.product_id = mt.technic_id";
            fromSql += "                    and dsd.product_division in (1)";
            fromSql += "             inner join mst_technic_class mtc";
            fromSql += "                     on mt.technic_class_id = mtc.technic_class_id";
            //IVS_Thanh  start add 2014/08/01 Mashu_再来分析
            if (!paramBean.getCategoryIDList().equals("")) {
                fromSql += "             inner join  mst_shop_category  category";
                fromSql += "                     on category.shop_category_id = mtc.shop_category_id";
                //IVS_Hoa  start edit 2014/10/09 Mashu_再来分析
                fromSql += "      INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no and dsmt.shop_category_id = mtc.shop_category_id ";
                fromSql += "     where    category.shop_category_id in (" + paramBean.getCategoryIDList() + ") ";
                if (paramBean.getStaffId() != null) {
                    fromSql += "     and dsmt.staff_id = " + paramBean.getStaffId();
                    fromSql += "     and dsmt.shop_category_id in (" + paramBean.getCategoryIDList() + ") ";
                }
                //IVS_Hoa  end edit 2014/10/09 Mashu_再来分析
            }
           																											
            //IVS_Thanh  start end 2014/08/01 Mashu_再来分析
            fromSql += " ) t";


        } else {

            // 延べ客数

            fromSql = "";
            fromSql += " (";
            fromSql += "     select distinct";
            fromSql += "          dsd.shop_id";
            fromSql += "         ,dsd.slip_no";
            fromSql += "         ,dsd.sales_date";
            fromSql += "         ,dsd.customer_id";
            fromSql += "         ,mt.technic_class_id";
            fromSql += "         ,mtc.technic_class_name";
            fromSql += "         ,mtc.display_seq";
            fromSql += "         ,ds.insert_date";
            fromSql += "     from";
            fromSql += "         view_data_sales_detail_valid dsd";
            fromSql += "             inner join data_sales ds";
            fromSql += "                     on dsd.shop_id = ds.shop_id";
            fromSql += "                    and dsd.slip_no = ds.slip_no";
            fromSql += "             inner join mst_customer mc";
            fromSql += "                     on dsd.customer_id = mc.customer_id";
            fromSql += "             inner join mst_technic mt";
            fromSql += "                     on dsd.product_id = mt.technic_id";
            fromSql += "                    and dsd.product_division in (1)";
            fromSql += "             inner join mst_technic_class mtc";
            fromSql += "                     on mt.technic_class_id = mtc.technic_class_id";
            //IVS_Thanh  start add 2014/08/01 Mashu_再来分析
            if (!paramBean.getCategoryIDList().equals("")) {
                 fromSql += "             inner join  mst_shop_category  category";
                 fromSql += "                     on category.shop_category_id = mtc.shop_category_id";	
            }																									
            //IVS_Thanh  start end 2014/08/01 Mashu_再来分析
            //IVS_Hoa  start add 2014/10/09 Mashu_再来分析
            if (!paramBean.getCategoryIDList().equals("")&& paramBean.getStaffId() != null) {
                fromSql += "      INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no and dsmt.shop_category_id = mtc.shop_category_id ";
            }
            //IVS_Hoa  end add 2014/10/09 Mashu_再来分析 
            fromSql += "     where";
            fromSql += "             mc.customer_no <> '0'";
            fromSql += "         and dsd.product_division in (1)";
            fromSql += "         and dsd.shop_id in (" + paramBean.getShopIDList() + ")";
            fromSql += "         and dsd.sales_date between '" + paramMap.get("TargetStartDate") + " 00:00:00' and '" + paramMap.get("TargetEndDate") + " 23:59:59'";
            //IVS_Thanh  start add 2014/08/01 Mashu_再来分析
            if (!paramBean.getCategoryIDList().equals("")) {										
		 fromSql += "    and    category.shop_category_id in (" + paramBean.getCategoryIDList() +") ";
            }																									
            //IVS_Thanh  start end 2014/08/01 Mashu_再来分析
            if (paramBean.getStaffId() != null) {
                //IVS_Hoa  start edit 2014/10/09 Mashu_再来分析
                //fromSql += "     and dsd.staff_id = " + paramBean.getStaffId();
                if (paramBean.getCategoryIDList().equals("")) {
                    fromSql += "     and dsd.staff_id = " + paramBean.getStaffId();
                } else {
                    fromSql += "     and dsmt.staff_id = " + paramBean.getStaffId();
                    fromSql += "     and dsmt.shop_category_id in (" + paramBean.getCategoryIDList() + ") ";
                }
                //IVS_Hoa  end edit 2014/10/09 Mashu_再来分析	
            }

            fromSql += " ) t";

        }

        sql = "";
        sql += " select";
        sql += "      t.technic_class_id";
        sql += "     ,t.technic_class_name as technic_name";
        sql += "     ,count(*) as total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when exists";
        sql += "                 (";
        sql += "                     select 1";
        sql += "                     from";
      //  sql += "                         view_data_sales_detail_valid a";
        // vtbphuong start change 20140925 Bug #30963
         sql += "                         data_sales_detail a";
         // vtbphuong end change 20140925 Bug #30963
        sql += "                             join";
        sql += "                                 (";
        sql += "                                     select";
        sql += "                                          dsd.shop_id";
        sql += "                                         ,dsd.slip_no";
        sql += "                                     from";
        sql += "                                         view_data_sales_detail_valid dsd";
        sql += "                                             inner join data_sales ds";
        sql += "                                                     on dsd.shop_id = ds.shop_id";
        sql += "                                                    and dsd.slip_no = ds.slip_no";
        sql += "                                             inner join mst_customer mc";
        sql += "                                                     on dsd.customer_id = mc.customer_id";
        //IVS_Thanh  start add 2014/08/26 Mashu_再来分析
        if (!paramBean.getCategoryIDList().equals("") && !paramBean.getDiffShopCatVisit()) {
            sql += "                                          INNER JOIN mst_technic mt ON dsd.product_id = mt.technic_id";
            sql += "                             INNER JOIN mst_technic_class mtc ON mt.technic_class_id = mtc.technic_class_id \n";
            sql += "                             INNER JOIN mst_shop_category category ON category.shop_category_id = mtc.shop_category_id \n";            
        }       
        //IVS_Thanh  end add 2014/08/26 Mashu_再来分析
        sql += "                                     where";
        sql += "                                             dsd.customer_id = t.customer_id";
        sql += "                                         and mc.customer_no <> '0'";
        sql += "                                         and dsd.product_division in (1)";
        sql += "                                         and dsd.shop_id in (" + paramBean.getShopIDList() + ")";
        //IVS_Thanh  start add 2014/08/26 Mashu_再来分析
        if (!paramBean.getCategoryIDList().equals("") && !paramBean.getDiffShopCatVisit()) {
            sql += "               and  category.shop_category_id IN (" + paramBean.getCategoryIDList() +")  \n";
        }
        //IVS_Thanh  end add 2014/08/26 Mashu_再来分析
        sql += "                                         and dsd.sales_date between '" + paramMap.get("CalculationStartDate") + " 00:00:00' and '" + paramMap.get("CalculationEndDate") + " 23:59:59'";
        sql += "                                         and (";
        sql += "                                                 dsd.sales_date > t.sales_date";
        sql += "                                              or (dsd.sales_date = t.sales_date and ds.insert_date > t.insert_date)";
        sql += "                                             )";
        sql += "                                     order by";
        sql += "                                          dsd.sales_date";
        sql += "                                         ,ds.insert_date";
        sql += "                                     limit 1";
        sql += "                                 ) b";
        sql += "                                 using (shop_id, slip_no)";
        sql += "                             inner join mst_technic mt";
        sql += "                                     on a.product_id = mt.technic_id";
        if (paramBean.isSameTechnicClass()) {
                sql += "                 where \n";
                sql += "                   mt.technic_class_id = t.technic_class_id";
        }
        sql += "                 )";
        sql += "             then 1";
        sql += "             else 0";
        sql += "         end), 0) as reappearance";
        sql += " from" + fromSql;
        sql += " group by";
        sql += "      t.technic_class_id";
        sql += "     ,t.technic_class_name";
        sql += "     ,t.display_seq";
        sql += " order by";
        sql += "     t.display_seq";

        stmt = cw.prepareStatement(sql);
        rs = stmt.executeQuery();

        ArrayList<ReappearanceReportBean> technicReportList = new ArrayList<ReappearanceReportBean>();

        while (rs.next()) {
            ReappearanceReportBean bean = new ReappearanceReportBean();
            bean.setTechnic(rs.getString("technic_name"));
            bean.setTargetCount1(rs.getInt("total"));
            bean.setReappearanceCount1(rs.getInt("reappearance"));
            technicReportList.add(bean);
        }

        JExcelApi jx = new JExcelApi("再来分析");
        jx.setTemplateFile("/reports/再来分析.xls");
        
        //IVS_Thanh  start edit 2014/08/01 Mashu_再来分析
        // ヘッダ
        jx.setValue(6, 3, paramMap.get("TargetName"));        
        jx.setValue(6, 4, paramMap.get("StaffName"));
        jx.setValue(6, 5, paramMap.get("CalculationStartDate") + " 〜 " + paramMap.get("CalculationEndDate"));
        jx.setValue(6, 6, paramMap.get("TargetStartDate") + " 〜 " + paramMap.get("TargetEndDate"));
        jx.setValue(26, 3, paramMap.get("FixedCount"));
        jx.setValue(26, 4, paramMap.get("NumberCondition"));
        jx.setValue(26, 5, paramMap.get("TechnicClassCondition"));
        jx.setValue(26, 6, paramMap.get("NewVisitCurrent"));
        //nhanvt start 20150123 New request #34998
        if(paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals("")){
            jx.setValue(6, 7, paramMap.get("CategoryNameList"));
            if(paramBean.getDiffShopCatVisit()){
                jx.setValue(26, 7, "他業態での再来も対象");
            }else{
                jx.setValue(26, 7, "同業態での再来のみ対象");
            }
        }else{
            jx.setValue(1, 7, "");
            jx.setValue(5, 7, "");
            jx.setValue(6, 7, "");
            jx.setValue(21, 7, "");
            jx.setValue(25, 7, "");
            jx.setValue(26, 7, "");
        } 
        
        //nhanvt start 20150123 New request #34998

        jx.setValue(5, 11, paramMap.get("CountTotal"));
        jx.setValue(5, 12, paramMap.get("ReappearenceTotal"));

        jx.setValue(9, 11, paramMap.get("NewTotal"));
        jx.setValue(9, 12, paramMap.get("NewReappearance"));

        jx.setValue(13, 11, paramMap.get("IntroduceTotal"));
        jx.setValue(13, 12, paramMap.get("IntroduceReappearanceTotal"));

        jx.setValue(17, 11, paramMap.get("SubFixedTotal"));
        jx.setValue(17, 12, paramMap.get("SubFixedReappearance"));

        jx.setValue(21, 11, paramMap.get("FixedTotal"));
        jx.setValue(21, 12, paramMap.get("FixedReappearance"));

        int row = 18;
        for (ReappearanceReportBean b : jrBeanList) {
            jx.setValue(5, row, b.getTargetCount1());
            jx.setValue(7, row, b.getReappearanceCount1());
            jx.setValue(12, row, b.getTargetCount2());
            jx.setValue(14, row, b.getReappearanceCount2());
            jx.setValue(19, row, b.getTargetCount3());
            jx.setValue(21, row, b.getReappearanceCount3());
            row++;
        }

        int maxSize = technicReportList.size();
        if (maxSize > 15) {
            // 追加行数セット
            jx.insertRow(31, maxSize - 15);
            for (int i = 0; i < maxSize - 15; i++) {
                row = 31 + i + 1;
                jx.mergeCells(35, row, 44, row);
                jx.mergeCells(45, row, 46, row);
                jx.mergeCells(47, row, 48, row);
                jx.mergeCells(49, row, 51, row);
            }

            jx.removeRow(row + 1);

        } else {
            jx.removeRow(32);
        }

        row = 17;
        for (ReappearanceReportBean b : technicReportList) {
            jx.setValue(35, row, b.getTechnic());
            jx.setValue(45, row, b.getTargetCount1());
            jx.setValue(47, row, b.getReappearanceCount1());
            row++;
        }
        //IVS_Thanh  end edit 2014/08/01 Mashu_再来分析
        jx.openWorkbook();

        return true;
    }

	/**
	 * 効果指標数値分析店舗別に、該当関数を使用
	 * @param paramBean
	 * @return
	 * @throws Exception
	 */
	public HashMap<Integer, EffectIndicatorAnalysisBean> outStaffReportReappearanceOnePeriodShop(ReportParameterBean paramBean) throws Exception {
		ConnectionWrapper cw = SystemInfo.getConnection();

		//初期処理
		HashMap<String, Object> paramMap = new HashMap<String, Object>();

		Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
		paramBean.setTaxRate(tax_rate);

		SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
		paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
		paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));
		paramMap.put("CalculationStartDate", format.format(paramBean.getCalculationStartDateObj()));
		paramMap.put("CalculationEndDate", format.format(paramBean.getCalculationEndDateObj()));

		/**
		 * ********************************
		 */
		/* SQL文組み立て処理 */
		/**
		 * ********************************
		 */
		String sql = "";
		String fromSql = "";
		String tmpSql = "";

		/**
		 * ********************************************************************************
		 */
		/* 来店回数別再来 */
		/**
		 * ********************************************************************************
		 */
		// 延べ客数
		fromSql = "";
		fromSql += " (";
		fromSql += "     select";
		fromSql += "          ds.shop_id";
		fromSql += "         ,ds.sales_date";
		fromSql += "         ,ds.customer_id";
		fromSql += "         ,ds.insert_date";
		fromSql += "         ,mc.introducer_id";
		fromSql += "         ,mc.birthday";
		fromSql += "         ,mc.sex";
		fromSql += "         ,(";
		fromSql += "             select";
		fromSql += "                 count(slip_no) + coalesce(max(before_visit_num),0)";
		fromSql += "             from";
		fromSql += "                 data_sales ";
		fromSql += "                     inner join mst_customer";
		fromSql += "                         using(customer_id)";
		fromSql += "             where";
		fromSql += "         exists (";
		fromSql += "               SELECT 1";
		fromSql += "               FROM data_sales_detail dsd";
		fromSql += "               WHERE dsd.shop_id = data_sales.shop_id";
		fromSql += "               AND dsd.slip_no = data_sales.slip_no";
		fromSql += "               AND dsd.delete_date is null";
		fromSql += "               AND dsd.product_division in (1,5,6)";
		fromSql += " ) ";
		fromSql += "                 and    data_sales.delete_date is null";
		fromSql += "                 and customer_id = ds.customer_id";
		//IVS_Thanh  start edit 2014/08/01 Mashu_再来分析            
		if (paramBean.getNewVisitCurrent()) {
			fromSql += "              and data_sales.shop_id= ds.shop_id";
		}
		//IVS_Thanh  end edit 2014/08/01 Mashu_再来分析
		fromSql += "                 and (";
		fromSql += "                         data_sales.sales_date < ds.sales_date";
		fromSql += "                      or (data_sales.sales_date = ds.sales_date and data_sales.insert_date <= ds.insert_date)";
		fromSql += "                     )";
		fromSql += "          ) as visit_num";
		fromSql += "     from";
		fromSql += "         data_sales ds";
		fromSql += "             join mst_customer mc";
		fromSql += "                 using(customer_id)";
		fromSql += "     where";
		fromSql += "         exists";
		fromSql += "             (";
		//IVS_Thanh  start add 2014/08/01 Mashu_再来分析
		//            fromSql += "                 select 1";
		//            fromSql += "                 from";
		//            fromSql += "                     data_sales_detail";
		//            fromSql += "                 where";
		//            fromSql += "                         shop_id = ds.shop_id";
		//            fromSql += "                     and slip_no = ds.slip_no";
		//            fromSql += "                     and delete_date is null";
		//            fromSql += "                     and product_division in (1)";
		fromSql += "                 select 1";
		fromSql += "                 from";
		fromSql += "                     data_sales_detail";
		fromSql += "                 where";
		fromSql += "                         shop_id = ds.shop_id";
		fromSql += "                     and slip_no = ds.slip_no";
		fromSql += "                     and delete_date is null";
		fromSql += "                     and product_division in (1,5,6)";
		//IVS_Thanh  end add 2014/08/01 Mashu_再来分析
		fromSql += "             )";
		fromSql += "         and ds.delete_date is null";
		fromSql += "         and mc.customer_no <> '0'";
		fromSql += "         and ds.shop_id in (" + paramBean.getShopIDList() + ")";
		fromSql += "         and ds.sales_date between '" + paramMap.get("TargetStartDate") + " 00:00:00' and '" + paramMap.get("TargetEndDate") + " 23:59:59'";

		if (paramBean.getStaffId() != null) {
			fromSql += "     and ds.staff_id = " + paramBean.getStaffId();
		}

		fromSql += " ) t";

		tmpSql = "";
		tmpSql += " select 1";
		tmpSql += " from";
		tmpSql += "     (";
		tmpSql += "         select";
		tmpSql += "              ds.sales_date";
		tmpSql += "             ,ds.customer_id";
		tmpSql += "             ,ds.insert_date";
		tmpSql += "         from";
		tmpSql += "             data_sales ds";
		tmpSql += "                 join mst_customer mc";
		tmpSql += "                     using(customer_id)";
		tmpSql += "         where";
		tmpSql += "             exists";
		tmpSql += "                 (";
		//IVS_Thanh  start add 2014/08/01 Mashu_再来分析
		//        tmpSql += "                     select 1";
		//        tmpSql += "                     from";
		//        tmpSql += "                         data_sales_detail";
		//        tmpSql += "                     where";
		//        tmpSql += "                             shop_id = ds.shop_id";
		//        tmpSql += "                         and slip_no = ds.slip_no";
		//        tmpSql += "                         and delete_date is null";
		//        tmpSql += "                         and product_division in (1)";
		tmpSql += "                     select 1";
		tmpSql += "                     from";
		tmpSql += "                         data_sales_detail";
		tmpSql += "                     where";
		tmpSql += "                             shop_id = ds.shop_id";
		tmpSql += "                         and slip_no = ds.slip_no";
		tmpSql += "                         and delete_date is null";
		tmpSql += "                         and product_division in (1,5,6)";
		//IVS_Thanh  end add 2014/08/01 Mashu_再来分析
		tmpSql += "                 )";
		tmpSql += "             and ds.delete_date is null";
		tmpSql += "             and mc.customer_no <> '0'";
		tmpSql += "             and ds.shop_id in (" + paramBean.getShopIDList() + ")";
		tmpSql += "             and ds.sales_date between '" + paramMap.get("CalculationStartDate") + " 00:00:00' and '" + paramMap.get("CalculationEndDate")
				+ " 23:59:59'";
		tmpSql += "     ) w";
		tmpSql += " where";
		tmpSql += "         w.customer_id = t.customer_id";
		tmpSql += "     and (";
		tmpSql += "             w.sales_date > t.sales_date";
		tmpSql += "          or (w.sales_date = t.sales_date and w.insert_date > t.insert_date)";
		tmpSql += "         )";

		// メインＳＱＬ
		sql = "";
		sql += " select";
		sql += "      shop_id";
		sql += "      ,count(*) as total";
		sql += "     ,coalesce(sum(";
		sql += "         case";
		sql += "             when";
		sql += "                 exists (" + tmpSql + ") then 1 else 0";
		sql += "         end), 0) as reappearance";
		sql += "     ,coalesce(sum(case when visit_num = 1 then 1 else 0 end), 0) as new_total";
		sql += "     ,coalesce(sum(";
		sql += "         case";
		sql += "             when visit_num = 1";
		sql += "              and exists (" + tmpSql + ") then 1 else 0";
		sql += "         end), 0) as new_reappearance";
		sql += " from" + fromSql;
		sql += " group by shop_id";

		PreparedStatement stmt = cw.prepareStatement(sql);
		System.out.println("新規再来率,既存再来率:" + sql);
		ResultSet rs = null;
		rs = stmt.executeQuery();

		// 戻り値を初期化
		HashMap<Integer, EffectIndicatorAnalysisBean> map = new HashMap<Integer, EffectIndicatorAnalysisBean>();
		for (String s: paramBean.getShopIDList().split(",")) {
			map.put(Integer.parseInt(s), new EffectIndicatorAnalysisBean());
		}

		while (rs.next()) {
			map.get(rs.getInt("shop_id")).setNewReappearance(rs.getLong("new_reappearance"));
			map.get(rs.getInt("shop_id")).setNewTotal(rs.getLong("new_total"));
			map.get(rs.getInt("shop_id")).setReappearenceTotal(rs.getLong("reappearance"));
			map.get(rs.getInt("shop_id")).setCountTotal(rs.getLong("total"));
		}

		return map;
	}

	/**
	 * 効果指標数値分析担当者別に、該当関数を使用
	 * @param paramBean
	 * @return
	 * @throws Exception
	 */
	public HashMap<Integer, EffectIndicatorAnalysisBean> outStaffReportReappearanceOnePeriodStaff(List<Integer> staffIdList, ReportParameterBean paramBean) throws Exception {
		ConnectionWrapper cw = SystemInfo.getConnection();

		//初期処理
		HashMap<String, Object> paramMap = new HashMap<String, Object>();

		Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
		paramBean.setTaxRate(tax_rate);

		SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
		paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
		paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));
		paramMap.put("CalculationStartDate", format.format(paramBean.getCalculationStartDateObj()));
		paramMap.put("CalculationEndDate", format.format(paramBean.getCalculationEndDateObj()));

		/**
		 * ********************************
		 */
		/* SQL文組み立て処理 */
		/**
		 * ********************************
		 */
		String sql = "";
		String fromSql = "";
		String tmpSql = "";

		/**
		 * ********************************************************************************
		 */
		/* 来店回数別再来 */
		/**
		 * ********************************************************************************
		 */
		// 延べ客数
		fromSql = "";
		fromSql += " (";
		fromSql += "     select";
		fromSql += "          ds.staff_id";
		fromSql += "         ,ds.sales_date";
		fromSql += "         ,ds.customer_id";
		fromSql += "         ,ds.insert_date";
		fromSql += "         ,mc.introducer_id";
		fromSql += "         ,mc.birthday";
		fromSql += "         ,mc.sex";
		fromSql += "         ,(";
		fromSql += "             select";
		fromSql += "                 count(slip_no) + coalesce(max(before_visit_num),0)";
		fromSql += "             from";
		fromSql += "                 data_sales ";
		fromSql += "                     inner join mst_customer";
		fromSql += "                         using(customer_id)";
		fromSql += "             where";
		fromSql += "         exists (";
		fromSql += "               SELECT 1";
		fromSql += "               FROM data_sales_detail dsd";
		fromSql += "               WHERE dsd.shop_id = data_sales.shop_id";
		fromSql += "               AND dsd.slip_no = data_sales.slip_no";
		fromSql += "               AND dsd.delete_date is null";
		fromSql += "               AND dsd.product_division in (1,5,6)";
		fromSql += " ) ";
		fromSql += "                 and    data_sales.delete_date is null";
		fromSql += "                 and customer_id = ds.customer_id";
		//IVS_Thanh  start edit 2014/08/01 Mashu_再来分析            
		if (paramBean.getNewVisitCurrent()) {
			fromSql += "              and data_sales.shop_id= ds.shop_id";
		}
		//IVS_Thanh  end edit 2014/08/01 Mashu_再来分析
		fromSql += "                 and (";
		fromSql += "                         data_sales.sales_date < ds.sales_date";
		fromSql += "                      or (data_sales.sales_date = ds.sales_date and data_sales.insert_date <= ds.insert_date)";
		fromSql += "                     )";
		fromSql += "          ) as visit_num";
		fromSql += "     from";
		fromSql += "         data_sales ds";
		fromSql += "             join mst_customer mc";
		fromSql += "                 using(customer_id)";
		fromSql += "     where";
		fromSql += "         exists";
		fromSql += "             (";
		//IVS_Thanh  start add 2014/08/01 Mashu_再来分析
		//            fromSql += "                 select 1";
		//            fromSql += "                 from";
		//            fromSql += "                     data_sales_detail";
		//            fromSql += "                 where";
		//            fromSql += "                         shop_id = ds.shop_id";
		//            fromSql += "                     and slip_no = ds.slip_no";
		//            fromSql += "                     and delete_date is null";
		//            fromSql += "                     and product_division in (1)";
		fromSql += "                 select 1";
		fromSql += "                 from";
		fromSql += "                     data_sales_detail";
		fromSql += "                 where";
		fromSql += "                         shop_id = ds.shop_id";
		fromSql += "                     and slip_no = ds.slip_no";
		fromSql += "                     and delete_date is null";
		fromSql += "                     and product_division in (1,5,6)";
		//IVS_Thanh  end add 2014/08/01 Mashu_再来分析
		fromSql += "             )";
		fromSql += "         and ds.delete_date is null";
		fromSql += "         and mc.customer_no <> '0'";
		fromSql += "         and ds.shop_id in (" + paramBean.getShopIDList() + ")";
		fromSql += "         and ds.sales_date between '" + paramMap.get("TargetStartDate") + " 00:00:00' and '" + paramMap.get("TargetEndDate") + " 23:59:59'";

		if (paramBean.getStaffId() != null) {
			fromSql += "     and ds.staff_id = " + paramBean.getStaffId();
		}

		fromSql += " ) t";

		tmpSql = "";
		tmpSql += " select 1";
		tmpSql += " from";
		tmpSql += "     (";
		tmpSql += "         select";
		tmpSql += "              ds.sales_date";
		tmpSql += "             ,ds.customer_id";
		tmpSql += "             ,ds.insert_date";
		tmpSql += "         from";
		tmpSql += "             data_sales ds";
		tmpSql += "                 join mst_customer mc";
		tmpSql += "                     using(customer_id)";
		tmpSql += "         where";
		tmpSql += "             exists";
		tmpSql += "                 (";
		//IVS_Thanh  start add 2014/08/01 Mashu_再来分析
		//        tmpSql += "                     select 1";
		//        tmpSql += "                     from";
		//        tmpSql += "                         data_sales_detail";
		//        tmpSql += "                     where";
		//        tmpSql += "                             shop_id = ds.shop_id";
		//        tmpSql += "                         and slip_no = ds.slip_no";
		//        tmpSql += "                         and delete_date is null";
		//        tmpSql += "                         and product_division in (1)";
		tmpSql += "                     select 1";
		tmpSql += "                     from";
		tmpSql += "                         data_sales_detail";
		tmpSql += "                     where";
		tmpSql += "                             shop_id = ds.shop_id";
		tmpSql += "                         and slip_no = ds.slip_no";
		tmpSql += "                         and delete_date is null";
		tmpSql += "                         and product_division in (1,5,6)";
		//IVS_Thanh  end add 2014/08/01 Mashu_再来分析
		tmpSql += "                 )";
		tmpSql += "             and ds.delete_date is null";
		tmpSql += "             and mc.customer_no <> '0'";
		tmpSql += "             and ds.shop_id in (" + paramBean.getShopIDList() + ")";
		tmpSql += "             and ds.sales_date between '" + paramMap.get("CalculationStartDate") + " 00:00:00' and '" + paramMap.get("CalculationEndDate")
				+ " 23:59:59'";
		tmpSql += "     ) w";
		tmpSql += " where";
		tmpSql += "         w.customer_id = t.customer_id";
		tmpSql += "     and (";
		tmpSql += "             w.sales_date > t.sales_date";
		tmpSql += "          or (w.sales_date = t.sales_date and w.insert_date > t.insert_date)";
		tmpSql += "         )";

		// メインＳＱＬ
		sql = "";
		sql += " select";
		sql += "      staff_id";
		sql += "      ,count(*) as total";
		sql += "     ,coalesce(sum(";
		sql += "         case";
		sql += "             when";
		sql += "                 exists (" + tmpSql + ") then 1 else 0";
		sql += "         end), 0) as reappearance";
		sql += "     ,coalesce(sum(case when visit_num = 1 then 1 else 0 end), 0) as new_total";
		sql += "     ,coalesce(sum(";
		sql += "         case";
		sql += "             when visit_num = 1";
		sql += "              and exists (" + tmpSql + ") then 1 else 0";
		sql += "         end), 0) as new_reappearance";
		sql += " from" + fromSql;
		sql += " group by staff_id";

		PreparedStatement stmt = cw.prepareStatement(sql);
		System.out.println("新規再来率,既存再来率:" + sql);
		ResultSet rs = null;
		rs = stmt.executeQuery();

		// 戻り値を初期化
		HashMap<Integer, EffectIndicatorAnalysisBean> map = new HashMap<Integer, EffectIndicatorAnalysisBean>();
		for (int staffId : staffIdList) {
			map.put(staffId, new EffectIndicatorAnalysisBean());
		}

		while (rs.next()) {
			int staffId = rs.getInt("staff_id");
			if (map.containsKey(staffId)) {
				map.get(staffId).setNewReappearance(rs.getLong("new_reappearance"));
				map.get(staffId).setNewTotal(rs.getLong("new_total"));
				map.get(staffId).setReappearenceTotal(rs.getLong("reappearance"));
				map.get(staffId).setCountTotal(rs.getLong("total"));
			}
		}

		return map;
	}

    public boolean outResponseRepeatAnalyzetPanel(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        paramMap.put("StaffName", paramBean.getStaffName());

        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        paramMap.put("CalculationStartDate", format.format(paramBean.getCalculationStartDateObj()));
        paramMap.put("CalculationEndDate", format.format(paramBean.getCalculationEndDateObj()));
        paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
        paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));

        int fixedCount = paramBean.getFixedCount();  // 固定回数
        paramMap.put("FixedCount", fixedCount + "回以上");

        boolean isSimpleCount = paramBean.getNumberCondition().equals("純客数");
        paramMap.put("NumberCondition", paramBean.getNumberCondition());
        // StaffReportBean の初期化
        HashMap tmpMap = null;
        ReappearanceReportBean reappearanceBean = null;
        ArrayList<ReappearanceReportBean> jrBeanList = new ArrayList<ReappearanceReportBean>();
        /**
         * ********************************
         */
        /* SQL文組み立て処理 */
        /**
         * ********************************
         */
        String sql = "";
        String fromSql = "";
        String tmpSql = "";

        /**
         * ********************************************************************************
         */
        /* 来店回数別再来 */
        /**
         * ********************************************************************************
         */
        if (isSimpleCount) {

            // 純客数

            fromSql = "";
            fromSql += " (";
            fromSql += "     select ";
            fromSql += "          ds.sales_date";
            fromSql += "         ,ds.customer_id";
            fromSql += "         ,ds.insert_date";
            fromSql += "         ,mc.introducer_id";
            fromSql += "         ,mc.birthday";
            fromSql += "         ,mc.sex";
            fromSql += "         ,(";
            fromSql += "             select";
            fromSql += "                 count(slip_no) + coalesce(max(before_visit_num),0)";
            fromSql += "             from";
            fromSql += "                 data_sales ";
            fromSql += "                     inner join mst_customer";
            fromSql += "                         using(customer_id)";
            fromSql += "             where";
            fromSql += "                     data_sales.delete_date is null";
            fromSql += "                 and customer_id = ds.customer_id";
            fromSql += "                 and data_sales.shop_id in (" + paramBean.getShopIDList() + ")";
            fromSql += "                 and (";
            fromSql += "                         data_sales.sales_date < ds.sales_date";
            fromSql += "                      or (data_sales.sales_date = ds.sales_date and data_sales.insert_date <= ds.insert_date)";
            fromSql += "                     )";
            fromSql += "          ) as visit_num,dr.response_id";
            fromSql += "     from";
            fromSql += "         data_sales ds";
            fromSql += "             join";
            fromSql += "             (";
            fromSql += "                 select";
            fromSql += "                      a.shop_id";
            fromSql += "                     ,a.sales_date";
            fromSql += "                     ,a.customer_id";
            fromSql += "                     ,max(a.slip_no) as slip_no";
            fromSql += "                 from";
            fromSql += "                     data_sales a";
            fromSql += "                         join";
            fromSql += "                         (";
            fromSql += "                             select";
            fromSql += "                                  ds.customer_id";
            fromSql += "                                 ,max(ds.sales_date) as sales_date";
            fromSql += "                             from";
            fromSql += "                                 data_sales ds";
            fromSql += "                                     join mst_customer mc";
            fromSql += "                                         using(customer_id)";
            fromSql += "                             where";
            fromSql += "                                 ds.delete_date is null";
            fromSql += "                                 and mc.customer_no <> '0'";
            fromSql += "                                 and ds.shop_id in (" + paramBean.getShopIDList() + ")";
            fromSql += "                                 and ds.sales_date between '" + paramMap.get("TargetStartDate") + " 00:00:00' and '" + paramMap.get("TargetEndDate") + " 23:59:59'";

            if (paramBean.getStaffId() != null) {
                fromSql += "                             and ds.staff_id = " + paramBean.getStaffId();
            }

            fromSql += "                             group by";
            fromSql += "                                 ds.customer_id";
            fromSql += "                         ) b";
            fromSql += "                         using(customer_id, sales_date)";
            fromSql += "                 where";
            fromSql += "                     a.delete_date is null";
            fromSql += "                 group by";
            fromSql += "                      shop_id";
            fromSql += "                     ,sales_date";
            fromSql += "                     ,customer_id";
            fromSql += "             ) b";
            fromSql += "             using(shop_id, customer_id, sales_date, slip_no)";
            fromSql += "             join mst_customer mc";
            fromSql += "                 using(customer_id)";
            fromSql += "             join data_response_effect dr using(slip_no) ";
            fromSql += " ) t";
            fromSql += " group by t.response_id";
            fromSql += " order by t.response_id";
        } else {

            // 延べ客数

            fromSql = "";
            fromSql += " (";
            fromSql += "     select ";
            fromSql += "          ds.sales_date";
            fromSql += "         ,ds.customer_id";
            fromSql += "         ,ds.insert_date";
            fromSql += "         ,mc.introducer_id";
            fromSql += "         ,mc.birthday";
            fromSql += "         ,mc.sex";
            fromSql += "         ,(";
            fromSql += "             select";
            fromSql += "                 count(slip_no) + coalesce(max(before_visit_num),0)";
            fromSql += "             from";
            fromSql += "                 data_sales ";
            fromSql += "                     inner join mst_customer";
            fromSql += "                         using(customer_id)";
            fromSql += "             where";
            fromSql += "                     data_sales.delete_date is null";
            fromSql += "                 and customer_id = ds.customer_id";
            fromSql += "                 and data_sales.shop_id in (" + paramBean.getShopIDList() + ")";
            fromSql += "                 and (";
            fromSql += "                         data_sales.sales_date < ds.sales_date";
            fromSql += "                      or (data_sales.sales_date = ds.sales_date and data_sales.insert_date <= ds.insert_date)";
            fromSql += "                     )";
            fromSql += "          ) as visit_num,dr.response_id";
            fromSql += "     from";
            fromSql += "         data_sales ds";
            fromSql += "             join mst_customer mc";
            fromSql += "                 using(customer_id)";
            fromSql += "             join data_response_effect dr using(slip_no) ";
            fromSql += "             join mst_response mr using(response_id) ";
            fromSql += "     where";
            fromSql += "         ds.delete_date is null";
            fromSql += "         and mc.customer_no <> '0'";
            fromSql += "         and mr.delete_date is null";
            fromSql += "         and ds.shop_id in (" + paramBean.getShopIDList() + ")";
            fromSql += "         and ds.sales_date between '" + paramMap.get("TargetStartDate") + " 00:00:00' and '" + paramMap.get("TargetEndDate") + " 23:59:59'";

            if (paramBean.getStaffId() != null) {
                fromSql += "     and ds.staff_id = " + paramBean.getStaffId();
            }

            fromSql += " ) t";
            fromSql += " group by t.response_id";
            fromSql += " order by t.response_id";

        }

        tmpSql = "";
        tmpSql += " select 1";
        tmpSql += " from";
        tmpSql += "     (";
        tmpSql += "         select";
        tmpSql += "              ds.sales_date";
        tmpSql += "             ,ds.customer_id";
        tmpSql += "             ,ds.insert_date";
        tmpSql += "         from";
        tmpSql += "             data_sales ds";
        tmpSql += "                 join mst_customer mc";
        tmpSql += "                     using(customer_id)";
        tmpSql += "         where";
        tmpSql += "             exists";
        tmpSql += "                 (";
        tmpSql += "                     select 1";
        tmpSql += "                     from";
        tmpSql += "                         data_sales_detail";
        tmpSql += "                     where";
        tmpSql += "                             shop_id = ds.shop_id";
        tmpSql += "                         and slip_no = ds.slip_no";
        tmpSql += "                         and delete_date is null";
        tmpSql += "                         and product_division in (1)";
        tmpSql += "                 )";
        tmpSql += "             and ds.delete_date is null";
        tmpSql += "             and mc.customer_no <> '0'";
        tmpSql += "             and ds.shop_id in (" + paramBean.getShopIDList() + ")";
        tmpSql += "             and ds.sales_date between '" + paramMap.get("TargetStartDate") + " 00:00:00' and '" + paramMap.get("TargetEndDate") + " 23:59:59'";
        tmpSql += "     ) w";
        tmpSql += " where";
        tmpSql += "         w.customer_id = t.customer_id";
        tmpSql += "     and (";
        tmpSql += "             w.sales_date > t.sales_date";
        tmpSql += "          or (w.sales_date = t.sales_date and w.insert_date > t.insert_date)";
        tmpSql += "         )";
        
        String maleTmpSql = "";
        maleTmpSql += " select 1";
        maleTmpSql += " from";
        maleTmpSql += "     (";
        maleTmpSql += "         select";
        maleTmpSql += "              ds.sales_date";
        maleTmpSql += "             ,ds.customer_id";
        maleTmpSql += "             ,ds.insert_date";
        maleTmpSql += "         from";
        maleTmpSql += "             data_sales ds";
        maleTmpSql += "                 join mst_customer mc";
        maleTmpSql += "                     using(customer_id)";
        maleTmpSql += "         where";
        maleTmpSql += "             exists";
        maleTmpSql += "                 (";
        maleTmpSql += "                     select 1";
        maleTmpSql += "                     from";
        maleTmpSql += "                         data_sales_detail";
        maleTmpSql += "                     where";
        maleTmpSql += "                             shop_id = ds.shop_id";
        maleTmpSql += "                         and slip_no = ds.slip_no";
        maleTmpSql += "                         and delete_date is null";
        maleTmpSql += "                         and product_division in (1)";
        maleTmpSql += "                 )";
        maleTmpSql += "             and ds.delete_date is null";
        maleTmpSql += "             and mc.customer_no <> '0'";
        maleTmpSql += "             and mc.sex = 1";
        maleTmpSql += "             and ds.shop_id in (" + paramBean.getShopIDList() + ")";
        maleTmpSql += "             and ds.sales_date between '" + paramMap.get("TargetStartDate") + " 00:00:00' and '" + paramMap.get("TargetEndDate") + " 23:59:59'";
        maleTmpSql += "     ) w";
        maleTmpSql += " where";
        maleTmpSql += "         w.customer_id = t.customer_id";
        maleTmpSql += "     and (";
        maleTmpSql += "             w.sales_date > t.sales_date";
        maleTmpSql += "          or (w.sales_date = t.sales_date and w.insert_date > t.insert_date)";
        maleTmpSql += "         )";
        
        String femaleTmpSql = "";
        femaleTmpSql += " select 1";
        femaleTmpSql += " from";
        femaleTmpSql += "     (";
        femaleTmpSql += "         select";
        femaleTmpSql += "              ds.sales_date";
        femaleTmpSql += "             ,ds.customer_id";
        femaleTmpSql += "             ,ds.insert_date";
        femaleTmpSql += "         from";
        femaleTmpSql += "             data_sales ds";
        femaleTmpSql += "                 join mst_customer mc";
        femaleTmpSql += "                     using(customer_id)";
        femaleTmpSql += "         where";
        femaleTmpSql += "             exists";
        femaleTmpSql += "                 (";
        femaleTmpSql += "                     select 1";
        femaleTmpSql += "                     from";
        femaleTmpSql += "                         data_sales_detail";
        femaleTmpSql += "                     where";
        femaleTmpSql += "                             shop_id = ds.shop_id";
        femaleTmpSql += "                         and slip_no = ds.slip_no";
        femaleTmpSql += "                         and delete_date is null";
        femaleTmpSql += "                         and product_division in (1)";
        femaleTmpSql += "                 )";
        femaleTmpSql += "             and ds.delete_date is null";
        femaleTmpSql += "             and mc.customer_no <> '0'";
        femaleTmpSql += "             and mc.sex = 2";
        femaleTmpSql += "             and ds.shop_id in (" + paramBean.getShopIDList() + ")";
        femaleTmpSql += "             and ds.sales_date between '" + paramMap.get("TargetStartDate") + " 00:00:00' and '" + paramMap.get("TargetEndDate") + " 23:59:59'";
        femaleTmpSql += "     ) w";
        femaleTmpSql += " where";
        femaleTmpSql += "         w.customer_id = t.customer_id";
        femaleTmpSql += "     and (";
        femaleTmpSql += "             w.sales_date >= t.sales_date";
        femaleTmpSql += "          or (w.sales_date = t.sales_date and w.insert_date > t.insert_date)";
        femaleTmpSql += "         )";

        // メインＳＱＬ
        sql = "";
        sql += " select";
        sql += "      (select response_name from mst_response mr where mr.response_id = t.response_id) as response_name,t.response_id ";
        sql += "      ,count(*) as total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when";
        sql += "                 exists (" + tmpSql + ") then 1 else 0";
        sql += "         end), 0) as reappearance";
        sql += "     ,coalesce(sum(case when visit_num = 1 then 1 else 0 end), 0) as new_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when visit_num = 1";
        sql += "              and exists (" + tmpSql + ") then 1 else 0";
        sql += "         end), 0) as new_reappearance";
        sql += "     ,coalesce(sum(case when visit_num between 2 and " + (fixedCount - 1) + " then 1 else 0 end), 0) as sub_fixed_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when visit_num between 2 and " + (fixedCount - 1);
        sql += "              and exists (" + tmpSql + ") then 1 else 0";
        sql += "         end), 0) as sub_fixed_reappearance";
        sql += "     ,coalesce(sum(case when visit_num >= " + fixedCount + " then 1 else 0 end), 0) as fixed_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when visit_num >= " + fixedCount;
        sql += "              and exists (" + tmpSql + ") then 1 else 0";
        sql += "         end), 0) as fixed_reappearance,";
        
        //男性
        sql += "      sum(case when sex = 1 then 1 else 0 end) as male_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when";
        sql += "                 exists (" + maleTmpSql + ") then 1 else 0";
        sql += "         end), 0) as male_reappearance";
        sql += "     ,coalesce(sum(case when sex = 1 and visit_num = 1 then 1 else 0 end), 0) as male_new_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when sex = 1 and visit_num = 1";
        sql += "              and exists (" + maleTmpSql + ") then 1 else 0";
        sql += "         end), 0) as male_new_reappearance";
        sql += "     ,coalesce(sum(case when sex = 1 and  visit_num between 2 and " + (fixedCount - 1) + " then 1 else 0 end), 0) as male_sub_fixed_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when sex = 1 and visit_num between 2 and " + (fixedCount - 1);
        sql += "              and exists (" + maleTmpSql + ") then 1 else 0";
        sql += "         end), 0) as male_sub_fixed_reappearance";
        sql += "     ,coalesce(sum(case when sex = 1 and  visit_num >= " + fixedCount + " then 1 else 0 end), 0) as male_fixed_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when sex = 1 and visit_num >= " + fixedCount;
        sql += "              and exists (" + maleTmpSql + ") then 1 else 0";
        sql += "         end), 0) as male_fixed_reappearance";
        
        //女性
        sql += "      ,count(*) as female_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when";
        sql += "                 exists (" + femaleTmpSql + ") then 1 else 0";
        sql += "         end), 0) as female_reappearance";
        sql += "     ,coalesce(sum(case when sex = 2 and visit_num = 1 then 1 else 0 end), 0) as female_new_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when sex = 2 and visit_num = 1";
        sql += "              and exists (" + femaleTmpSql + ") then 1 else 0";
        sql += "         end), 0) as female_new_reappearance";
        sql += "     ,coalesce(sum(case when sex = 2 and visit_num between 2 and " + (fixedCount - 1) + " then 1 else 0 end), 0) as female_sub_fixed_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when sex = 2 and visit_num between 2 and " + (fixedCount - 1);
        sql += "              and exists (" + femaleTmpSql + ") then 1 else 0";
        sql += "         end), 0) as female_sub_fixed_reappearance";
        sql += "     ,coalesce(sum(case when sex = 2 and visit_num >= " + fixedCount + " then 1 else 0 end), 0) as female_fixed_total";
        sql += "     ,coalesce(sum(";
        sql += "         case";
        sql += "             when sex = 2 and visit_num >= " + fixedCount;
        sql += "              and exists (" + femaleTmpSql + ") then 1 else 0";
        sql += "         end), 0) as female_fixed_reappearance";
        sql += " from" + fromSql;

        PreparedStatement stmt = cw.prepareStatement(sql);
        ResultSet rs = null;
        rs = stmt.executeQuery();
        JExcelApi jx = new JExcelApi("反響リピート分折");
        jx.setTemplateFile("/reports/反響リピート分折.xls");
        
        // ヘッダ
        jx.setValue(3, 3, paramMap.get("TargetName"));
        jx.setValue(3, 4, paramMap.get("StaffName"));
        jx.setValue(3, 5, paramMap.get("CalculationStartDate") + " 〜 " + paramMap.get("CalculationEndDate"));
        jx.setValue(3, 6, paramMap.get("TargetStartDate") + " 〜 " + paramMap.get("TargetEndDate"));
        jx.setValue(11, 3, paramMap.get("FixedCount"));
        jx.setValue(11, 4, paramMap.get("NumberCondition"));
        jx.setValue(11, 5, paramMap.get("TechnicClassCondition"));
        int row = 11;
        rs.last();
        int maxSize = rs.getRow();
        rs.first();
        if (maxSize > 0) {
            if (maxSize > 2) {
                // 追加行数セット
                jx.insertRow(11, maxSize - 2);
            } else if (maxSize == 1) {
                jx.removeRow(12 - maxSize);
            }
        }else {
            MessageDialog.showMessageDialog(null, "データがありません。", "反響リピート分析", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        int i = 0;
        rs.beforeFirst();
        while (rs.next()) {
            jx.setValue(2, row+i, rs.getString("response_name"));
            //jx.setValue(15, row+i, rs.getInt("female_total"));
            //jx.setValue(16, row+i, rs.getInt("female_reappearance"));
            jx.setValue(18, row+i, rs.getInt("female_new_total"));
            jx.setValue(19, row+i, rs.getInt("female_new_reappearance"));
            jx.setValue(21, row+i, rs.getInt("female_sub_fixed_total"));
            jx.setValue(22, row+i, rs.getInt("female_sub_fixed_reappearance"));
            jx.setValue(24, row+i, rs.getInt("female_fixed_total"));
            jx.setValue(25, row+i, rs.getInt("female_fixed_reappearance"));
            
            //jx.setValue(27, row+i, rs.getInt("male_total"));
            //jx.setValue(28, row+i, rs.getInt("male_reappearance"));
            jx.setValue(30, row+i, rs.getInt("male_new_total"));
            jx.setValue(31, row+i, rs.getInt("male_new_reappearance"));
            jx.setValue(33, row+i, rs.getInt("male_sub_fixed_total"));
            jx.setValue(34, row+i, rs.getInt("male_sub_fixed_reappearance"));
            jx.setValue(36, row+i, rs.getInt("male_fixed_total"));
            jx.setValue(37, row+i, rs.getInt("male_fixed_reappearance"));
            i++;
        }
        jx.openWorkbook();
        return true;
    }

    //nhanvt start edit 20150109 New request #33403
    public String getStaffReportReappearanceSQL(ReportParameterBean paramBean) {

	//IVS_vtnhan start add 20140723 MASHU_担当再来分析
        //CATEGORY
        String category = paramBean.getListCategoryId();
        //NewDivision
        int newDivision = paramBean.getNewDevision(); 
        //useCategory
        int useCategory = paramBean.getUseShopCategory();
        // 再来取得用サブクエリ(すべて) 
         //IVS_vtnhan end add 20140723 MASHU_担当再来分析
        String tmpSql = "";
        tmpSql += " (";
        tmpSql += " SELECT";
        tmpSql += "     1";
        tmpSql += " FROM";
        tmpSql += "     (";
        tmpSql += "         SELECT";
        tmpSql += "              ds.sales_date";
        tmpSql += "             ,ds.customer_id";
        tmpSql += "             ,ds.insert_date";
        tmpSql += "         FROM";
        tmpSql += "             data_sales ds";
        tmpSql += "                 join mst_customer mc using(customer_id)";
        tmpSql += "         WHERE";
        //IVS_vtnhan start edit 20140904 MASHU_担当再来分析
//        tmpSql += "                 exists";
//        tmpSql += "                     (";
//        tmpSql += "                         SELECT";
//        tmpSql += "                             1";
//        tmpSql += "                         FROM";
//        tmpSql += "                             data_sales_detail";
//        tmpSql += "                         WHERE";
//        tmpSql += "                                 shop_id = ds.shop_id";
//        tmpSql += "                             AND slip_no = ds.slip_no";
//        tmpSql += "                             AND delete_date is null";
//         //IVS_vtnhan start edit 20140723 MASHU_担当再来分析
//        //技術区分追加
//        tmpSql += "                             AND product_division in (1,5,6)"; 
//         //IVS_vtnhan start edit 20140723 MASHU_担当再来分析
//        tmpSql += "                     )";
        tmpSql += "         exists";
        tmpSql += "             (";
      
        //業態利用するかしないかチェック
        if (useCategory != 1 || category == null || category == "" ) {
            tmpSql += "                 SELECT";
            tmpSql += "                     1";
            tmpSql += "                 FROM";
            tmpSql += "                     data_sales_detail";
            tmpSql += "                 WHERE";
            tmpSql += "                         shop_id = ds.shop_id";
            tmpSql += "                     AND slip_no = ds.slip_no";
            tmpSql += "                     AND delete_date is null";
            tmpSql += "                     AND product_division in (1,5,6)";
        } else {
            tmpSql += "                 SELECT";
            tmpSql += "                     1";
            tmpSql += "                 FROM";
            tmpSql += "                     data_sales_detail dsd";
            tmpSql += "                     inner join mst_technic mst on mst.technic_id = dsd.product_id  ";
            tmpSql += "                     left join mst_technic_class mstc on mstc.technic_class_id = mst.technic_class_id ";
            tmpSql += "                 WHERE";
            tmpSql += "                         dsd.shop_id = ds.shop_id";
            tmpSql += "                     AND dsd.slip_no = ds.slip_no";
            tmpSql += "                     AND dsd.delete_date is null";
            tmpSql += "                     AND dsd.product_division in (1)";
            //業態選択の場合
            //nhanvt start edit 20150126 New request #34998
            if (category != null && !paramBean.getDiffShopCatVisit()) {
                tmpSql += "                  AND mstc.shop_category_id in (" + category + ") ";
            }
            //nhanvt end edit 20150126 New request #34998
            tmpSql += "                 UNION ALL  ";

            tmpSql += "                 SELECT ";
            tmpSql += "                     1";
            tmpSql += "                 FROM";
            tmpSql += "                     data_sales_detail dsd";
            tmpSql += "                     inner join mst_course msc on msc.course_id = dsd.product_id  ";
            tmpSql += "                     left join mst_course_class mscc on mscc.course_class_id = msc.course_class_id ";
            tmpSql += "                 WHERE";
            tmpSql += "                         dsd.shop_id = ds.shop_id";
            tmpSql += "                     AND dsd.slip_no = ds.slip_no";
            tmpSql += "                     AND dsd.delete_date is null";
            tmpSql += "                     AND dsd.product_division in (5,6)";
            //業態選択の場合
            //nhanvt start edit 20150126 New request #34998
            if (category != null && !paramBean.getDiffShopCatVisit()) {
                tmpSql += "                  AND mscc.shop_category_id in (" + category + ") ";
            }
            //nhanvt end edit 20150126 New request #34998
        }
         //IVS_vtnhan end edit 20140723 MASHU_担当再来分析
        tmpSql += "             )";
        //IVS_vtnhan end edit 20140904 MASHU_担当再来分析
        tmpSql += "             AND ds.delete_date is null";
        tmpSql += "             AND mc.customer_no <> '0'";
        //Luc start add 20150302 Bug #35233 [gb]担当別再来成績が出力できない
        tmpSql += "             AND customer_id = t.customer_id";
        //Luc end add 20150302 Bug #35233 [gb]担当別再来成績が出力できない
        tmpSql += "             AND ds.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'";
        tmpSql += "             AND ds.shop_id in (" + paramBean.getShopIDList() + ")";
        tmpSql += "     ) w";
        tmpSql += " WHERE";
        tmpSql += "         w.customer_id = t.customer_id";
        tmpSql += "     AND (";
        tmpSql += "             w.sales_date > t.sales_date";
        tmpSql += "          or (w.sales_date = t.sales_date and w.insert_date > t.insert_date)";
        tmpSql += "         )";
        tmpSql += " )";

        // 再来取得用サブクエリ(指名のみ)
        String tmpSql2 = "";
        tmpSql2 += " (";
        tmpSql2 += " SELECT";
        tmpSql2 += "     1";
        tmpSql2 += " FROM";
        tmpSql2 += "     (";
        tmpSql2 += "         SELECT";
        tmpSql2 += "              ds.sales_date";
        tmpSql2 += "             ,ds.customer_id";
        tmpSql2 += "             ,ds.insert_date";
        tmpSql2 += "         FROM";
        tmpSql2 += "             data_sales ds";
        tmpSql2 += "                 join mst_customer mc using(customer_id)";
        tmpSql2 += "         WHERE";
        //IVS_vtnhan start edit 20140904 MASHU_担当再来分析
////        tmpSql2 += "                 exists";
////        tmpSql2 += "                     (";
////        tmpSql2 += "                         SELECT";
////        tmpSql2 += "                             1";
////        tmpSql2 += "                         FROM";
////        tmpSql2 += "                             data_sales_detail";
////        tmpSql2 += "                         WHERE";
////        tmpSql2 += "                                 shop_id = ds.shop_id";
////        tmpSql2 += "                             AND slip_no = ds.slip_no";
////        tmpSql2 += "                             AND delete_date is null";
////         //IVS_vtnhan start edit 20140723 MASHU_担当再来分析
////        //技術区分追加
////        tmpSql2 += "                             AND product_division in (1,5,6)";
////         //IVS_vtnhan end edit 20140723 MASHU_担当再来分析
////        tmpSql2 += "                     )";
        tmpSql2 += "         exists";
        tmpSql2 += "             (";
        if (useCategory != 1 || category == null || category == "") {
            tmpSql2 += "                 SELECT";
            tmpSql2 += "                     1";
            tmpSql2 += "                 FROM";
            tmpSql2 += "                     data_sales_detail";
            tmpSql2 += "                 WHERE";
            tmpSql2 += "                         shop_id = ds.shop_id";
            tmpSql2 += "                     AND slip_no = ds.slip_no";
            tmpSql2 += "                     AND delete_date is null";
            tmpSql2 += "                     AND product_division in (1,5,6)";
        } else {
            tmpSql2 += "                 SELECT";
            tmpSql2 += "                     1";
            tmpSql2 += "                 FROM";
            tmpSql2 += "                     data_sales_detail dsd";
            tmpSql2 += "                     inner join mst_technic mst on mst.technic_id = dsd.product_id   ";
            tmpSql2 += "                     left join mst_technic_class mstc on mstc.technic_class_id = mst.technic_class_id ";
            tmpSql2 += "                 WHERE";
            tmpSql2 += "                         dsd.shop_id = ds.shop_id";
            tmpSql2 += "                     AND dsd.slip_no = ds.slip_no";
            tmpSql2 += "                     AND dsd.delete_date is null";
            tmpSql2 += "                     AND dsd.product_division in (1)";
            //業態選択の場合
            //nhanvt start edit 20150126 New request #34998
            if (category != null && !paramBean.getDiffShopCatVisit()) {
                tmpSql2 += "                  AND mstc.shop_category_id in (" + category + ") ";
            }
            //nhanvt end edit 20150126 New request #34998
            tmpSql2 += "                 UNION ALL  ";

            tmpSql2 += "                 SELECT ";
            tmpSql2 += "                     1";
            tmpSql2 += "                 FROM";
            tmpSql2 += "                     data_sales_detail dsd";
            tmpSql2 += "                     inner join mst_course msc on msc.course_id = dsd.product_id ";
            tmpSql2 += "                     left join mst_course_class mscc on mscc.course_class_id = msc.course_class_id ";
            tmpSql2 += "                 WHERE";
            tmpSql2 += "                         dsd.shop_id = ds.shop_id";
            tmpSql2 += "                     AND dsd.slip_no = ds.slip_no";
            tmpSql2 += "                     AND dsd.delete_date is null";
            tmpSql2 += "                     AND dsd.product_division in (5,6)";
            //業態選択の場合
            //nhanvt start edit 20150126 New request #34998
            if (category != null && !paramBean.getDiffShopCatVisit()) {
                tmpSql2 += "                  AND mscc.shop_category_id in (" + category + ") ";
            }
            //nhanvt end edit 20150126 New request #34998
        }
         //IVS_vtnhan end edit 20140723 MASHU_担当再来分析
        tmpSql2 += "             )";
        //IVS_vtnhan end edit 20140904 MASHU_担当再来分析
        tmpSql2 += "             AND ds.delete_date is null";
        tmpSql2 += "             AND mc.customer_no <> '0'";
        //Luc start add 20150302 Bug #35233 [gb]担当別再来成績が出力できない
        tmpSql2 += "             AND customer_id = t.customer_id";
        //Luc end add 20150302 Bug #35233 [gb]担当別再来成績が出力できない
        tmpSql2 += "             AND ds.sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'";
        tmpSql2 += "             AND ds.shop_id in (" + paramBean.getShopIDList() + ")";
        //IVS_tvhoa start edit 20150129 MASHU_担当再来分析
        //[11:09:13] GB-danura: 再来時の集計については指名チェックしないようにどちらも変更していただけますか。
        //指名のチェックは元の来店時だけチェックしてください
        //tmpSql2 += "             AND ds.designated_flag = true";
        //IVS_tvhoa end edit 20150129 MASHU_担当再来分析
        tmpSql2 += "     ) w";
        tmpSql2 += " WHERE";
        tmpSql2 += "         w.customer_id = t.customer_id";
        tmpSql2 += "     AND (";
        tmpSql2 += "             w.sales_date > t.sales_date";
        tmpSql2 += "          or (w.sales_date = t.sales_date and w.insert_date > t.insert_date)";
        tmpSql2 += "         )";
        tmpSql2 += " )";

        // FROM句サブクエリ(すべて)
        String fromSql = "";
        fromSql += " (";
        fromSql += " SELECT";
        fromSql += "      ds.sales_date";
        fromSql += "     ,ds.customer_id";
        fromSql += "     ,ds.insert_date";
        //IVS_Hoa  start edit 2014/10/13 Mashu_再来分析
        //fromSql += "     ,ds.staff_id";
        //業態選択の場合
        if (category != null) {
            fromSql += "     ,dsmt.staff_id";
        } else {
            fromSql += "     ,ds.staff_id";
        }
        //IVS_Hoa  end  edit 2014/10/13 Mashu_再来分析
        fromSql += "     ,ds.shop_id";
        fromSql += "     ,ds.slip_no";
        fromSql += "     ,(";
        fromSql += "         SELECT";
         //IVS_vtnhan start edit 20140723 MASHU_担当再来分析
        fromSql += "             count(ds1.slip_no) + coalesce(max(before_visit_num),0)"; 
         //IVS_vtnhan end edit 20140723 MASHU_担当再来分析       
        fromSql += "         FROM";
         //IVS_vtnhan start edit 20140723 MASHU_担当再来分析     
        fromSql += "             data_sales ds1"; 
         //IVS_vtnhan end edit 20140723 MASHU_担当再来分析        
        fromSql += "                 inner join mst_customer using(customer_id)";
         //IVS_vtnhan start edit 20140723 MASHU_担当再来分析
         fromSql += "         WHERE";
        //fromSql += "                 data_sales.delete_date is null";
        //fromSql += "             AND customer_id = ds.customer_id";
        //fromSql += "             AND data_sales.shop_id in (" + paramBean.getShopIDList() + ")";

        fromSql += "         exists (";
        //業態利用するかしないかチェック
        if (useCategory != 1 || category == null || category == "") {
            fromSql += "               SELECT 1";
            fromSql += "               FROM data_sales_detail dsd";
            fromSql += "               WHERE dsd.shop_id = ds1.shop_id";
            fromSql += "               AND dsd.slip_no = ds1.slip_no";
            fromSql += "               AND dsd.delete_date is null";
            fromSql += "               AND dsd.product_division in (1,5,6)";
        } else {
            fromSql += "               SELECT 1";
            fromSql += "               FROM data_sales_detail dsd";
            fromSql += "         	    inner join mst_technic mst on mst.technic_id = dsd.product_id";
            fromSql += "         	    left join mst_technic_class mstc on mstc.technic_class_id = mst.technic_class_id ";
            fromSql += "         	WHERE dsd.shop_id = ds1.shop_id";
            fromSql += "         	AND dsd.slip_no = ds1.slip_no";
            fromSql += "         	AND dsd.delete_date is null";
            fromSql += "         	AND dsd.product_division in (1)";
            //業態選択の場合
            if (category != null) {
                fromSql += "            AND mstc.shop_category_id in (" + category + ") ";
            }           
            fromSql += "         	UNION ALL ";
            fromSql += "         	SELECT 1 ";
            fromSql += "         	FROM data_sales_detail dsd";
            fromSql += "         	      inner join mst_course msc on msc.course_id = dsd.product_id";
            fromSql += "         	      left join mst_course_class mscc on mscc.course_class_id = msc.course_class_id ";
            fromSql += "         	WHERE dsd.shop_id = ds1.shop_id";
            fromSql += "         	AND dsd.slip_no = ds1.slip_no";
            fromSql += "         	AND dsd.delete_date is null ";
            fromSql += "         	AND dsd.product_division in (5,6) ";
            if (category != null) {
                fromSql += "            AND mscc.shop_category_id in (" + category + ") ";
            }
        }
	fromSql += " ) ";
       
        fromSql += "                 AND ds1.delete_date is null";
        fromSql += "                 AND ds1.customer_id = ds.customer_id";
        //自店新規の場合、店舗IDを絞り込み
        if (newDivision == 1) {
            fromSql += "             AND ds1.shop_id = ds.shop_id";
        }
         //IVS_vtnhan end edit 20140723 MASHU_担当再来分析
        fromSql += "             AND";
        fromSql += "                 (";
	 //IVS_vtnhan start edit 20140723 MASHU_担当再来分析
        fromSql += "                      ds1.sales_date < ds.sales_date";
        fromSql += "                   or (ds1.sales_date = ds.sales_date and ds1.insert_date <= ds.insert_date)";
         //IVS_vtnhan end edit 20140723 MASHU_担当再来分析
        fromSql += "                 )";
        fromSql += "      ) as visit_num";
        fromSql += " FROM";
        fromSql += "     data_sales ds";
        fromSql += "         join mst_customer mc using(customer_id)";
        //IVS_Hoa  start add 2014/10/13 Mashu_再来分析
        //業態選択の場合
        if (category != null) {
            fromSql += "     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ";
        }
        //IVS_Hoa  end  add 2014/10/13 Mashu_再来分析
        fromSql += " WHERE";
        fromSql += "         exists";
        fromSql += "             (";
         //IVS_vtnhan start edit 20140723 MASHU_担当再来分析
//        fromSql += "                 SELECT";

//            fromSql += "                     1";
//            fromSql += "                 FROM";
//            fromSql += "                     data_sales_detail";
//            fromSql += "                 WHERE";
//            fromSql += "                         shop_id = ds.shop_id";
//            fromSql += "                     AND slip_no = ds.slip_no";
//            fromSql += "                     AND delete_date is null";
//            fromSql += "                     AND product_division in (1)";
        //業態利用するかしないかチェック
        if (useCategory != 1 || category == null || category == "") {
            fromSql += "                 SELECT";
            fromSql += "                     1";
            fromSql += "                 FROM";
            fromSql += "                     data_sales_detail";
            fromSql += "                 WHERE";
            fromSql += "                         shop_id = ds.shop_id";
            fromSql += "                     AND slip_no = ds.slip_no";
            fromSql += "                     AND delete_date is null";
            fromSql += "                     AND product_division in (1,5,6)";
        } else {
            fromSql += "                 SELECT";
            fromSql += "                     1";
            fromSql += "                 FROM";
            fromSql += "                     data_sales_detail dsd";
            fromSql += "                     inner join mst_technic mst on mst.technic_id = dsd.product_id ";
            fromSql += "                     left join mst_technic_class mstc on mstc.technic_class_id = mst.technic_class_id ";
            fromSql += "                 WHERE";
            fromSql += "                         dsd.shop_id = ds.shop_id";
            fromSql += "                     AND dsd.slip_no = ds.slip_no";
            fromSql += "                     AND dsd.delete_date is null";
            fromSql += "                     AND dsd.product_division in (1)";
            //業態選択の場合
            if (category != null) {
                fromSql += "                  AND mstc.shop_category_id in (" + category + ") ";
            }
            fromSql += "                 UNION ALL  ";

            fromSql += "                 SELECT ";
            fromSql += "                     1";
            fromSql += "                 FROM";
            fromSql += "                     data_sales_detail dsd";
            fromSql += "                     inner join mst_course msc on msc.course_id = dsd.product_id and dsd.product_division in (5,6) ";
            fromSql += "                     left join mst_course_class mscc on mscc.course_class_id = msc.course_class_id ";
            fromSql += "                 WHERE";
            fromSql += "                         dsd.shop_id = ds.shop_id";
            fromSql += "                     AND dsd.slip_no = ds.slip_no";
            fromSql += "                     AND dsd.delete_date is null";
            fromSql += "                     AND dsd.product_division in (5,6)";
            //業態選択の場合
            if (category != null) {
                fromSql += "                  AND mscc.shop_category_id in (" + category + ") ";
            }
        }
         //IVS_vtnhan end edit 20140723 MASHU_担当再来分析
        fromSql += "             )";
        fromSql += "     AND ds.delete_date is null";
        fromSql += "     AND mc.customer_no <> '0'";
        fromSql += "     AND ds.sales_date between '" + paramBean.getCalculationStartDate() + "' and '" + paramBean.getCalculationEndDate() + "'";
        fromSql += "     AND ds.shop_id in (" + paramBean.getShopIDList() + ")";
        //IVS_Hoa  start add 2014/10/13 Mashu_再来分析
        //業態選択の場合
        if (category != null) {
            fromSql += " AND dsmt.shop_category_id in (" + category + ") ";
        }
        //IVS_Hoa  end  add 2014/10/13 Mashu_再来分析
        fromSql += " ) t";

        // FROM句サブクエリ(指名のみ)
        String fromSql2 = "";
        fromSql2 += " (";
        fromSql2 += " SELECT";
        fromSql2 += "      ds.sales_date";
        fromSql2 += "     ,ds.customer_id";
        fromSql2 += "     ,ds.insert_date";
        //IVS_Hoa  start edit 2014/10/13 Mashu_再来分析
        //fromSql2 += "     ,ds.staff_id";
        //業態選択の場合
        if (category != null) {
            fromSql2 += "     ,dsmt.staff_id";
        } else {
            fromSql2 += "     ,ds.staff_id";
        }
        //IVS_Hoa  end  edit 2014/10/13 Mashu_再来分析
        fromSql2 += "     ,ds.shop_id";
        fromSql2 += "     ,ds.slip_no";
        fromSql2 += "     ,(";
        fromSql2 += "         SELECT";
        fromSql2 += "             count(slip_no) + coalesce(max(before_visit_num),0)";
        fromSql2 += "         FROM";
         //IVS_vtnhan start edit 20140723 MASHU_担当再来分析
        fromSql2 += "             data_sales ds1";
        fromSql2 += "             inner join mst_customer using(customer_id)";
        fromSql2 += "         WHERE";
        //fromSql2 += "                 data_sales.delete_date is null";
        //fromSql2 += "             AND customer_id = ds.customer_id";
       // fromSql2 += "             AND data_sales.shop_id in (" + paramBean.getShopIDList() + ")";
        //fromSql2 += "             AND ds.designated_flag = true";
        //IVS_vtnhan end edit 20140723 MASHU_担当再来分析
         //IVS_vtnhan start add 20140723 MASHU_担当再来分析
        //業態に関しての条件を追加
        fromSql2 += "                  exists (";
        //業態利用するかしないかチェック
        if (useCategory != 1 || category == null || category == "") {
            fromSql2 += "               SELECT 1";
            fromSql2 += "               FROM data_sales_detail dsd";
            fromSql2 += "               WHERE dsd.shop_id = ds1.shop_id";
            fromSql2 += "               AND dsd.slip_no = ds1.slip_no";
            fromSql2 += "               AND dsd.delete_date is null";
            fromSql2 += "               AND dsd.product_division in (1,5,6)";
        } else {
            fromSql2 += "               SELECT 1";
            fromSql2 += "               FROM data_sales_detail dsd";
            fromSql2 += "         	    inner join mst_technic mst on mst.technic_id = dsd.product_id";
            
            fromSql2 += "         	    left join mst_technic_class mstc on mstc.technic_class_id = mst.technic_class_id";
            fromSql2 += "         	WHERE dsd.shop_id = ds1.shop_id";
            fromSql2 += "         	AND dsd.slip_no = ds1.slip_no";
            fromSql2 += "         	AND dsd.delete_date is null";
            fromSql2 += "         	AND dsd.product_division in (1)";
            //業態選択の場合
            if (category != null) {
                fromSql2 += "            AND mstc.shop_category_id in (" + category + ") ";
            }           
            fromSql2 += "         	UNION ALL ";
            fromSql2 += "         	SELECT 1 ";
            fromSql2 += "         	FROM data_sales_detail dsd";
            fromSql2 += "         	      inner join mst_course msc on msc.course_id = dsd.product_id";
            fromSql2 += "         	      left join mst_course_class mscc on mscc.course_class_id = msc.course_class_id";
            fromSql2 += "         	WHERE dsd.shop_id = ds1.shop_id";
            fromSql2 += "         	AND dsd.slip_no = ds1.slip_no";
            fromSql2 += "         	AND dsd.delete_date is null ";
            fromSql2 += "         	AND dsd.product_division in (5,6) ";
            //業態選択の場合
            if (category != null) {
                fromSql2 += "            AND mscc.shop_category_id in (" + category + ") ";
            }
        }
	fromSql2 += " ) ";
    
        fromSql2 += "                 AND ds1.delete_date is null";
        fromSql2 += "                 AND ds1.customer_id = ds.customer_id";
       //自店新規の場合、店舗IDを絞り込み
        if (newDivision == 1) {
            fromSql2 += "             AND ds1.shop_id = ds.shop_id";
        }
         //IVS_vtnhan end add 20140723 MASHU_担当再来分析
        fromSql2 += "             AND";
        fromSql2 += "                 (";
        fromSql2 += "                      ds1.sales_date < ds.sales_date";
        fromSql2 += "                   or (ds1.sales_date = ds.sales_date and ds1.insert_date <= ds.insert_date)";
        fromSql2 += "                 )";
        fromSql2 += "      ) as visit_num ";
        fromSql2 += " FROM";
        fromSql2 += "     data_sales ds";
        fromSql2 += "         join mst_customer mc using(customer_id)";
        //IVS_Hoa  start add 2014/10/13 Mashu_再来分析
        //業態選択の場合
        if (category != null) {
            fromSql2 += "     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = ds.shop_id AND dsmt.slip_no = ds.slip_no ";
        }
        //IVS_Hoa  end add 2014/10/13 Mashu_再来分析
        fromSql2 += " WHERE";
        fromSql2 += "         exists";
        fromSql2 += "             (";
 

         //IVS_vtnhan start edit 20140723 MASHU_担当再来分析
//        fromSql += "                 SELECT";
//            fromSql += "                     1";
//            fromSql += "                 FROM";
//            fromSql += "                     data_sales_detail";
//            fromSql += "                 WHERE";
//            fromSql += "                         shop_id = ds.shop_id";
//            fromSql += "                     AND slip_no = ds.slip_no";
//            fromSql += "                     AND delete_date is null";
//            fromSql += "                     AND product_division in (1)";
        //業態利用するかしないかチェック
        if (useCategory != 1 || category == null || category == "") {
            fromSql2 += "                 SELECT";
            fromSql2 += "                     1";
            fromSql2 += "                 FROM";
            fromSql2 += "                     data_sales_detail";
            fromSql2 += "                 WHERE";
            fromSql2 += "                         shop_id = ds.shop_id";
            fromSql2 += "                     AND slip_no = ds.slip_no";
            fromSql2 += "                     AND delete_date is null";

            fromSql2 += "                     AND product_division in (1,5,6)";
        } else {
            fromSql2 += "                 SELECT";
            fromSql2 += "                     1";
            fromSql2 += "                 FROM";
            fromSql2 += "                     data_sales_detail dsd";
            fromSql2 += "                     inner join mst_technic mst on mst.technic_id = dsd.product_id  ";
            fromSql2 += "                     left join mst_technic_class mstc on mstc.technic_class_id = mst.technic_class_id ";
            fromSql2 += "                 WHERE";
            fromSql2 += "                         dsd.shop_id = ds.shop_id";
            fromSql2 += "                     AND dsd.slip_no = ds.slip_no";
            fromSql2 += "                     AND dsd.delete_date is null";
            fromSql2 += "                     AND dsd.product_division in (1)";
            //業態選択の場合
            if (category != null) {
                fromSql2 += "                  AND mstc.shop_category_id in (" + category + ") ";
            }
            fromSql2 += "                 UNION ALL  ";

            fromSql2 += "                 SELECT ";
            fromSql2 += "                     1";
            fromSql2 += "                 FROM";
            fromSql2 += "                     data_sales_detail dsd";
            fromSql2 += "                     inner join mst_course msc on msc.course_id = dsd.product_id and dsd.product_division in (5,6) ";
            fromSql2 += "                     left join mst_course_class mscc on mscc.course_class_id = msc.course_class_id ";
            fromSql2 += "                 WHERE";
            fromSql2 += "                         dsd.shop_id = ds.shop_id";
            fromSql2 += "                     AND dsd.slip_no = ds.slip_no";
            fromSql2 += "                     AND dsd.delete_date is null";
            fromSql2 += "                     AND dsd.product_division in (5,6)";
            //業態選択の場合
            if (category != null) {
                fromSql2 += "                  AND mscc.shop_category_id  in (" + category + ") ";
            }
        }
         //IVS_vtnhan end edit 20140723 MASHU_担当再来分析
        fromSql2 += "             )";
        fromSql2 += "     AND ds.delete_date is null";
        fromSql2 += "     AND mc.customer_no <> '0'";
        fromSql2 += "     AND ds.sales_date between '" + paramBean.getCalculationStartDate() + "' and '" + paramBean.getCalculationEndDate() + "'";
        fromSql2 += "     AND ds.shop_id in (" + paramBean.getShopIDList() + ")";
        //IVS_Hoa  start edit 2014/10/13 Mashu_再来分析
        //業態選択の場合
        if (category != null) {
            fromSql2 += "  AND dsmt.shop_category_id in (" + category + ") ";
            fromSql2 += "  AND dsmt.designated_flag = true"; 
        }else{
           fromSql2 += "   AND ds.designated_flag = true"; 
        }
        //IVS_Hoa  end  edit 2014/10/13 Mashu_再来分析
        fromSql2 += " ) t";

        // 金額取得用サブクエリ
        String amountSql = "";
        amountSql += " (";
        amountSql += " SELECT";
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            amountSql += "     sum(discount_detail_value_no_tax)";
        } else {
            // 税込み
            amountSql += "     sum(discount_detail_value_in_tax)";
        }
        amountSql += " FROM";
        amountSql += "     view_data_sales_detail_valid dsd";
        amountSql += " WHERE";
        amountSql += "         shop_id = t.shop_id";
        amountSql += "     AND customer_id = t.customer_id";
	 //IVS_vtnhan start edit 20140723 MASHU_担当再来分析
        //技術 区分追加
        amountSql += "     AND product_division in (1,2,5)";
        //技術 区分追加
         //IVS_vtnhan end edit 20140723 MASHU_担当再来分析 

//            amountSql += "     AND sales_date > t.sales_date";
//            amountSql += "     AND sales_date between '" + paramBean.getTargetStartDate() + "' and '" + paramBean.getTargetEndDate() + "'";

        amountSql += "     AND sales_date =";
        amountSql += "         (";
        amountSql += "             SELECT";
        amountSql += "                 MIN(sales_date)";
        amountSql += "             FROM";
        amountSql += "                 data_sales";
        amountSql += "             WHERE";
        amountSql += "                     delete_date is null";
        amountSql += "                 AND shop_id = t.shop_id";
        amountSql += "                 AND customer_id = t.customer_id";
        // IVS_TKDU START EDIT 20160607 #51005 担当別再来成績、売上金額の集計不備
        // amountSql += "                 AND sales_date > t.sales_date";
        amountSql += "                 AND sales_date >= t.sales_date";
        // IVS_TKDU END EDIT 20160607 #51005 担当別再来成績、売上金額の集計不備
        amountSql += "         )";

        amountSql += "     AND EXISTS";
        amountSql += "         (";
        amountSql += "             select";
        amountSql += "                 1";
        amountSql += "             from";
        amountSql += "                 data_sales";
        amountSql += "             where";
        amountSql += "                     delete_date is null";
        amountSql += "                 and shop_id = dsd.shop_id";
        amountSql += "                 and customer_id = dsd.customer_id";
        // IVS_TKDU START EDIT 20160607 #51005 担当別再来成績、売上金額の集計不備
        // amountSql += "                 and sales_date < dsd.sales_date";
        // amountSql += "             having";
        // amountSql += "                 date_trunc('month', MAX(sales_date)) = '" + paramBean.getTargetStartDate() + "'";
        amountSql += "                 and sales_date <= dsd.sales_date";
        // IVS_TKDU END EDIT 20160607 #51005 担当別再来成績、売上金額の集計不備
        amountSql += "         )";
        amountSql += " )";

        //-----------------------------------
        // メインSQL
        //-----------------------------------
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" SELECT");
        sql.append("      ms.staff_id");
        sql.append("     ,ms.staff_no");
        sql.append("     ,ms.staff_name1 || ' ' || ms.staff_name2 as staff_name");
        // 再来主担当　新規
        sql.append("     ,coalesce(a.new_total, 0) as new_total");
        sql.append("     ,coalesce(a.new_reappearance, 0) as new_reappearance");
        sql.append("     ,coalesce(a.new_reappearance_amount, 0) as new_reappearance_amount");
        // 再来主担当　準固定
        sql.append("     ,coalesce(a.sub_fixed_total, 0) as sub_fixed_total");
        sql.append("     ,coalesce(a.sub_fixed_reappearance, 0) as sub_fixed_reappearance");
        sql.append("     ,coalesce(a.sub_fixed_reappearance_amount, 0) as sub_fixed_reappearance_amount");
        // 再来主担当　固定
        sql.append("     ,coalesce(a.fixed_total, 0) as fixed_total");
        sql.append("     ,coalesce(a.fixed_reappearance, 0) as fixed_reappearance");
        sql.append("     ,coalesce(a.fixed_reappearance_amount, 0) as fixed_reappearance_amount");
        // 再来主担当指名　新規
        sql.append("     ,coalesce(b.new_total2, 0) as new_total2");
        sql.append("     ,coalesce(b.new_reappearance2, 0) as new_reappearance2");
        sql.append("     ,coalesce(b.new_reappearance_amount2, 0) as new_reappearance_amount2");
        // 再来主担当指名　準固定
        sql.append("     ,coalesce(b.sub_fixed_total2, 0) as sub_fixed_total2");
        sql.append("     ,coalesce(b.sub_fixed_reappearance2, 0) as sub_fixed_reappearance2");
        sql.append("     ,coalesce(b.sub_fixed_reappearance_amount2, 0) as sub_fixed_reappearance_amount2");
        // 再来主担当指名　固定
        sql.append("     ,coalesce(b.fixed_total2, 0) as fixed_total2");
        sql.append("     ,coalesce(b.fixed_reappearance2, 0) as fixed_reappearance2");
        sql.append("     ,coalesce(b.fixed_reappearance_amount2, 0) as fixed_reappearance_amount2");
        sql.append(" FROM");
        sql.append(" (");
        sql.append(" SELECT");
        sql.append("      staff_id");
        // 新規
        sql.append("     ,coalesce(sum(case when visit_num = 1 then 1 else 0 end), 0) as new_total");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num = 1");
        sql.append("              and exists " + tmpSql + " then 1 else 0");
        sql.append("         end), 0) as new_reappearance");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num = 1");
        sql.append("              and exists " + tmpSql + " then " + amountSql + " else 0");
        sql.append("         end), 0) as new_reappearance_amount");
        // 準固定数
        sql.append("     ,coalesce(sum(case when visit_num between 2 and " + (paramBean.getFixedCount() - 1) + " then 1 else 0 end), 0) as sub_fixed_total");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num between 2 and " + (paramBean.getFixedCount() - 1));
        sql.append("              and exists " + tmpSql + " then 1 else 0");
        sql.append("         end), 0) as sub_fixed_reappearance");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num between 2 and " + (paramBean.getFixedCount() - 1));
        sql.append("              and exists " + tmpSql + " then " + amountSql + " else 0");
        sql.append("         end), 0) as sub_fixed_reappearance_amount");
        // 固定数
        sql.append("     ,coalesce(sum(case when visit_num >= " + paramBean.getFixedCount() + " then 1 else 0 end), 0) as fixed_total");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num >= " + paramBean.getFixedCount());
        sql.append("              and exists " + tmpSql + " then 1 else 0");
        sql.append("         end), 0) as fixed_reappearance");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num >= " + paramBean.getFixedCount());
        sql.append("              and exists " + tmpSql + " then " + amountSql + " else 0");
        sql.append("         end), 0) as fixed_reappearance_amount");
        sql.append(" FROM" + fromSql);
        sql.append(" GROUP BY");
        sql.append("     staff_id");
        sql.append(" ) a");

        sql.append(" left join");

        sql.append(" (");
        sql.append(" SELECT");
        sql.append("      staff_id as staff_id2");
        // 新規
        sql.append("     ,coalesce(sum(case when visit_num = 1 then 1 else 0 end), 0) as new_total2");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num = 1");
        sql.append("              and exists " + tmpSql2 + " then 1 else 0");
        sql.append("         end), 0) as new_reappearance2");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num = 1");
        sql.append("              and exists " + tmpSql2 + " then " + amountSql + " else 0");
        sql.append("         end), 0) as new_reappearance_amount2");
        // 準固定
        sql.append("     ,coalesce(sum(case when visit_num between 2 and " + (paramBean.getFixedCount() - 1) + " then 1 else 0 end), 0) as sub_fixed_total2");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num between 2 and " + (paramBean.getFixedCount() - 1));
        sql.append("              and exists " + tmpSql2 + " then 1 else 0");
        sql.append("         end), 0) as sub_fixed_reappearance2");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num between 2 and " + (paramBean.getFixedCount() - 1));
        sql.append("              and exists " + tmpSql2 + " then " + amountSql + " else 0");
        sql.append("         end), 0) as sub_fixed_reappearance_amount2");
        // 固定
        sql.append("     ,coalesce(sum(case when visit_num >= " + paramBean.getFixedCount() + " then 1 else 0 end), 0) as fixed_total2");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num >= " + paramBean.getFixedCount());
        sql.append("              and exists " + tmpSql2 + " then 1 else 0");
        sql.append("         end), 0) as fixed_reappearance2");
        sql.append("     ,coalesce(sum(");
        sql.append("         case");
        sql.append("             when visit_num >= " + paramBean.getFixedCount());
        sql.append("              and exists " + tmpSql2 + " then " + amountSql + " else 0");
        sql.append("         end), 0) as fixed_reappearance_amount2");
        sql.append(" FROM" + fromSql2);
        sql.append(" GROUP BY");
        sql.append("     staff_id");
        sql.append(" ) b");
        sql.append(" on a.staff_id = b.staff_id2");
        sql.append(" join mst_staff ms using (staff_id)");
        sql.append(" ORDER BY");
        sql.append("      ms.display_seq");
        sql.append("     ,lpad(ms.staff_no, 10, '0')");
        sql.append("     ,ms.staff_id");

        return sql.toString();
    }
    //nhanvt end edit 20150109 New request #33403
    /**
     * スタッフ成績表＜担当者再来状況＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportReappearance(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        paramMap.put("CalculationStartDate", paramBean.getCalculationStartDate());
        paramMap.put("CalculationEndDate", paramBean.getCalculationEndDate());

        paramMap.put("fixedCount", paramBean.getFixedCount());

        PreparedStatement stmt = cw.prepareStatement(getStaffReportReappearanceSQL(paramBean));
        ResultSet rs = null;
        rs = stmt.executeQuery();

        if (rs.last()) {

            JExcelApi jx = new JExcelApi("スタッフ成績_担当別再来成績");
            jx.setTemplateFile("/reports/スタッフ成績_担当別再来成績.xls");

            // ヘッダ
            jx.setValue(2, 4, paramMap.get("CalculationStartDate") + " 〜 " + paramMap.get("CalculationEndDate"));
            jx.setValue(2, 5, paramMap.get("TargetStartDate") + " 〜 " + paramMap.get("TargetEndDate"));
            jx.setValue(2, 6, paramBean.getTargetName());
            Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
            paramBean.setTaxRate(tax_rate);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 7, "税抜");
            } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                jx.setValue(2, 7, "税込");
            }
            jx.setValue(2, 8, paramBean.getFixedCount() + "回");
            //IVS_vtnhan start add 20140723 MASHU_担当再来分析
                 jx.setValue(1, 9, "新規区分 ： ");
            //nhanvt start edit 20150126 New request #34998
                 jx.setValue(2, 9, paramBean.getDevisionName());
            if(paramBean.isIsHideCategory() == true){
                jx.setValue(8, 4, "業態分類 ： ");
                jx.setValue(9, 4, paramBean.getListCategoryName() );
                jx.setValue(8, 5, "業態再来 ： ");
                if(paramBean.getDiffShopCatVisit()){
                    jx.setValue(9, 5, "他業態での再来も対象");
                }else{
                    jx.setValue(9, 5, "同業態での再来のみ対象");
                }
            } 
            //nhanvt end edit 20150126 New request #34998
            
            //IVS_vtnhan end add 20140723 MASHU_担当再来分析
            
            jx.setValue(6, 13, "2〜" + (paramBean.getFixedCount() - 1) + "回");
            jx.setValue(22, 13, "2〜" + (paramBean.getFixedCount() - 1) + "回");
            jx.setValue(10, 13, paramBean.getFixedCount() + "回以上");
            jx.setValue(26, 13, paramBean.getFixedCount() + "回以上");

            int row = 15;

            // 追加行数セット
            jx.insertRow(row, rs.getRow() - 1);

            rs.first();

            // データセット
            do {

                jx.setValue(1, row, rs.getString("staff_name"));
                jx.setValue(2, row, rs.getLong("new_total"));
                jx.setValue(3, row, rs.getLong("new_reappearance"));
                jx.setValue(4, row, rs.getLong("new_reappearance_amount"));
                jx.setValue(6, row, rs.getLong("sub_fixed_total"));
                jx.setValue(7, row, rs.getLong("sub_fixed_reappearance"));
                jx.setValue(8, row, rs.getLong("sub_fixed_reappearance_amount"));
                jx.setValue(10, row, rs.getLong("fixed_total"));
                jx.setValue(11, row, rs.getLong("fixed_reappearance"));
                jx.setValue(12, row, rs.getLong("fixed_reappearance_amount"));

                jx.setValue(18, row, rs.getLong("new_total2"));
                jx.setValue(19, row, rs.getLong("new_reappearance2"));
                jx.setValue(20, row, rs.getLong("new_reappearance_amount2"));
                jx.setValue(22, row, rs.getLong("sub_fixed_total2"));
                jx.setValue(23, row, rs.getLong("sub_fixed_reappearance2"));
                jx.setValue(24, row, rs.getLong("sub_fixed_reappearance_amount2"));
                jx.setValue(26, row, rs.getLong("fixed_total2"));
                jx.setValue(27, row, rs.getLong("fixed_reappearance2"));
                jx.setValue(28, row, rs.getLong("fixed_reappearance_amount2"));

                row++;

            } while (rs.next());

            jx.removeRow(row);

            jx.openWorkbook();

        } else {

            return false;
        }

        return true;
    }

    /**
     * 税抜き、税込み対応文字列生成
     *
     * @param paramBean レポートパラメータBean
     * @return 税抜き、税込み対応文字列
     * @exception Exception
     */
    public String makeValueString(ReportParameterBean paramBean) throws Exception {
        // 税抜き
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {

            return "discount_detail_value_no_tax";
        } else {
            // 税込み
            return "discount_detail_value_in_tax";
        }
    }

    /**
     * 税抜き、税込み対応文字列生成
     *
     * @param paramBean レポートパラメータBean
     * @return 税抜き、税込み対応文字列
     * @exception Exception
     */
    public String makeValueString(ReportParameterBean paramBean, String dsName, String dsdName, String taxDateName) throws Exception {
        return makeValueString(paramBean);
    }

    /**
     * 税抜き、税込み対応文字列生成
     *
     * @param paramBean レポートパラメータBean
     * @return 税抜き、税込み対応文字列
     * @exception Exception
     */
    public String makeDiscountString(ReportParameterBean paramBean) throws Exception {
        // 税抜き
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {

            return "discount_value_no_tax";
        } else {
            // 税込み
            return "discount_value";
        }

    }

    /**
     * スタッフ成績表共通初期ロジック
     *
     * @param paramBean レポートパラメータBean
     * @param cw データベースコネクション
     * @return レポートパラメータ
     * @exception Exception
     */
    public HashMap<String, Object> outStaffReportInit(ReportParameterBean paramBean, ConnectionWrapper cw) throws Exception {

        HashMap<String, Object> paramMap = new HashMap<String, Object>();
        HashMap<String, String> shopInfo = this.getShopInfo(paramBean.getShopIDList());

        Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
        paramBean.setTaxRate(tax_rate);

        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            paramMap.put("TaxType", "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            paramMap.put("TaxType", "税込");
        }

        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        paramMap.put("TargetStartDate", format.format(paramBean.getTargetStartDateObj()));
        paramMap.put("TargetEndDate", format.format(paramBean.getTargetEndDateObj()));
        paramMap.put("TargetName", paramBean.getTargetName());

        //技術売上
        //nhanvt start edit 20141029 Bug #31905
        String TechnicTotalQuery = "	SELECT sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  "
                + "	  FROM view_data_sales_detail_valid AS dsd "
                + "	INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no "
                + "	and ds.delete_date IS NULL "
                + "	   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' "
                + "	     AND ds.shop_id in (" + paramBean.getShopIDList() + ") "
                + "	 WHERE "
                + "	   dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' "
                + "	     AND dsd.shop_id in (" + paramBean.getShopIDList() + ") "
                + "	 AND dsd.product_division = 1 ";
                //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            TechnicTotalQuery += " and \n";
            TechnicTotalQuery +=" (	\n";
            TechnicTotalQuery +=" exists (	\n";
            TechnicTotalQuery +="         select 1 from \n";
            TechnicTotalQuery +="         data_sales_detail dsd1\n";
            TechnicTotalQuery +="         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1,3)\n";
            TechnicTotalQuery +="         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n";
            TechnicTotalQuery +="         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n";
            TechnicTotalQuery +="         and mtc.shop_category_id in( " + paramBean.getCategoryIDList() + ")	\n";
            TechnicTotalQuery +="         ) 	\n";
            
            TechnicTotalQuery +=" )\n";
        }
        //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        
        
        PreparedStatement stmt = cw.prepareStatement(TechnicTotalQuery);
        ResultSet subRs = stmt.executeQuery();

        while (subRs.next()) {
            paramMap.put("TechnicTotal", subRs.getLong("value"));
        }

        //店販売上
        String ItemTotalQuery = "	SELECT sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  "
                + "	  FROM view_data_sales_detail_valid AS dsd "
                + "	INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no "
                + "	 and ds.delete_date IS NULL "
                + "	   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' "
                + "	     AND ds.shop_id in (" + paramBean.getShopIDList() + ") "
                + "	 WHERE  "
                + "	    dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' "
                + "	     AND dsd.shop_id in (" + paramBean.getShopIDList() + ") "
                + "	 AND dsd.product_division = 2 ";
                //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            ItemTotalQuery += " and \n";
            ItemTotalQuery +=" (	\n";
            ItemTotalQuery +=" exists(\n";
            ItemTotalQuery +="         select 1 from\n";
            ItemTotalQuery +="         data_sales_detail dsd1\n";
            ItemTotalQuery +="         inner join mst_item mi on dsd1.product_id = mi.item_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (2,4) \n";
            ItemTotalQuery +="         inner join mst_item_class mic on mic.item_class_id = mi.item_class_id\n";
            ItemTotalQuery +="         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n";
            ItemTotalQuery +="         and mic.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n";
            ItemTotalQuery +="         )\n";
            ItemTotalQuery +=" )\n";
        }
        //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
        //nhanvt end edit 20141029 Bug #31905
        stmt = cw.prepareStatement(ItemTotalQuery);
        subRs = null;
        subRs = stmt.executeQuery();

        while (subRs.next()) {
            paramMap.put("ItemTotal", subRs.getLong("value"));
        }

        return paramMap;
    }

    /**
     * PDF出力
     *
     * @param reportXmlFile 出力対象レポートテンプレート名
     * @param collection 出力対象データ
     * @param paramMap マッピングパラメータ
     * @param isViewer レビュー表示可否
     * @return true:成功 false:失敗
     */
    private boolean outputPDF(String reportXmlFile, Collection collection, HashMap<String, Object> paramMap, boolean isViewer) {
        try {
            JasperReport jasperReport = null;
            InputStream report = ReportLogic.class.getResourceAsStream(this.REPORT_RESOURCE_PATH + reportXmlFile + this.REPORT_XML_FILE_EXT);

            if (".jrxml".equals(this.REPORT_XML_FILE_EXT)) {
                jasperReport = JasperCompileManager.compileReport(report);
            } else if (".jasper".equals(this.REPORT_XML_FILE_EXT)) {
                jasperReport = (JasperReport) JRLoader.loadObject(report);
            }

            JasperPrint print = JasperFillManager.fillReport(jasperReport, paramMap, new JRBeanCollectionDataSource(collection));

            SimpleDateFormat format = new SimpleDateFormat("yyyyMMddhms");
            String dateString = format.format(new java.util.Date());

            String exportFile = ReportManager.getExportPath() + reportXmlFile + dateString + ".pdf";

            JasperExportManager.exportReportToPdfFile(print, reportXmlFile);

            Runtime runtime = Runtime.getRuntime();
            runtime.exec(ReportManager.getPdfViewerPath() + " " + exportFile);
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            return false;
        }

        return true;
    }

    /**
     * エクセル出力
     *
     * @param reportXmlFile 出力対象レポートテンプレート名
     * @param collection 出力対象データ
     * @param paramMap マッピングパラメータ
     * @param isViewer レビュー表示可否
     * @return true:成功 false:失敗
     */
    private boolean outputXLS(String reportXmlFile, Collection collection, HashMap<String, Object> paramMap, boolean isViewer) {
        try {
            JasperReport jasperReport = null;
            InputStream report = ReportLogic.class.getResourceAsStream(this.REPORT_RESOURCE_PATH + reportXmlFile + this.REPORT_XML_FILE_EXT);

            if (".jrxml".equals(this.REPORT_XML_FILE_EXT)) {
                jasperReport = JasperCompileManager.compileReport(report);
            } else if (".jasper".equals(this.REPORT_XML_FILE_EXT)) {
                jasperReport = (JasperReport) JRLoader.loadObject(report);
            }

            JasperPrint print = JasperFillManager.fillReport(jasperReport, paramMap, new JRBeanCollectionDataSource(collection));

            SimpleDateFormat format = new SimpleDateFormat("yyyyMMddhms");
            String dateString = format.format(new java.util.Date());


            String exportFile = ReportManager.getExportPath() + reportXmlFile + dateString + ".xls";
            JRXlsExporter exporter = new JRXlsExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, exportFile);
            exporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.FALSE);
            exporter.exportReport();

            // 生成済みExcelファイル読み込み
            HSSFWorkbook wb = new HSSFWorkbook(new FileInputStream(exportFile));
            HSSFSheet sheet = wb.getSheetAt(0);
            HSSFPrintSetup ps = sheet.getPrintSetup();
            // A4横に設定
            ps.setPaperSize(HSSFPrintSetup.A4_PAPERSIZE);
            ps.setLandscape(true);
            // Excelファイルに再書き込み
            wb.write(new FileOutputStream(exportFile));

            Runtime runtime = Runtime.getRuntime();
            runtime.exec(ReportManager.getPdfViewerPath() + " " + exportFile);
        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            return false;
        }

        return true;
    }

    /**
     * 担当別顧客分析＜職業別構成比＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportCustomerOccupationSales(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();
        //nhanvt start edit 20150213 Bug #35209
        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);
        //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
        String subSQL = "";
        subSQL += " and \n"
                + " (	\n"
                + " exists (	\n"
                + "         select 1 from \n"
                + "         data_sales_detail dsd1\n"
                + "         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1)\n"
                + "         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n"
                + "         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n"
                + "         and mtc.shop_category_id in ( " + paramBean.getListCategoryId() + ")	\n"
                + "         ) 	\n"
                + " )\n";
        //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
        // 職種一覧を取ってくる
        String jobQuery = "select job_id, job_name from mst_job where delete_date is null order by display_seq";
        PreparedStatement stmt = cw.prepareStatement(jobQuery);
        ResultSet rs = stmt.executeQuery();

        ArrayList jobList = new ArrayList();
        while (rs.next()) {
            HashMap job = new HashMap();
            job.put("job_name", rs.getString("job_name"));
            job.put("job_id", rs.getInt("job_id"));
            jobList.add(job);
        }

        rs.close();


        jobQuery = "";

        String jobCol = "";
        String where = "";
        for (int i = 0; i < jobList.size(); i++) {
            HashMap job = (HashMap) jobList.get(i);
            jobQuery += "	SELECT data.staff_id, COUNT(*) AS Num " + "\n"
                    + "	FROM (  " + "\n"
                    + "		SELECT  ds.slip_no , ms.staff_id,  " + "\n"
                    + "		        sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  " + "\n"
                    + "		  FROM view_data_sales_detail_valid AS dsd  " + "\n";
                    //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        jobQuery += " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no " + "\n";
                    }
                    //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    jobQuery += "		INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no  " + "\n"
                    + "		INNER JOIN (  " + "\n"
                    + "			SELECT ms.staff_id, ms.staff_no, ms.shop_id  " + "\n"
                    + "			  FROM mst_staff AS ms  " + "\n";
                    //+ //                                    "			 WHERE ms.delete_date IS NULL  " + "\n" +
                    //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    //"		) ms ON ms.staff_id = ds.staff_id  " + "\n"
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        jobQuery += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                    }else{
                        jobQuery +="		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                    }
                    //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    jobQuery += "		INNER JOIN (  " + "\n"
                    + "			SELECT customer_id, before_visit_num " + "\n"
                    + "			  FROM mst_customer  " + "\n"
                    + "			 WHERE " + "\n"
                    + "			       job_id = " + job.get("job_id") + " \n" + // 職種ごとの集計
                    "                      AND customer_no != '0'" + "\n" + // customer_noが0(非会員)じゃない人だけ
                    "		) mc ON mc.customer_id = ds.customer_id  " + "\n"
                    + "		 WHERE ds.delete_date IS NULL  " + "\n"
                    + "		   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                    + "		    AND ds.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                    //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                    //+ "		   AND dsd.product_division = 1  " + "\n"
                    //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    + "		   AND dsd.product_division = 1  " + "\n";
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        jobQuery = jobQuery + subSQL;
                    }
                    jobQuery = jobQuery + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績
                    + "	) data  " + "\n"
                    + "	GROUP BY data.staff_id " + "\n"
                    + ") Occupation" + (i + 1) + "Guest ON Occupation" + (i + 1) + "Guest.staff_id = ms.staff_id " + "\n"
                    + "LEFT JOIN ( " + "\n";

            jobCol += "coalesce(Occupation" + (i + 1) + "Guest.Num, 0) AS Occupation" + (i + 1) + "_Num, \n";
            where += (i > 0 ? " OR " : "") + "Occupation" + (i + 1) + "Guest.staff_id = ms.staff_id \n";

            paramMap.put("customerName" + (i + 1) + "", job.get("job_name").toString());
        }

        //職業不明の列：職業一覧の数 + 1
        int jobfumeiCol = jobList.size() + 1;
        //明細
        String mainQuery = "SELECT ms.staff_id, ms.staff_name1 || ' ' || ms.staff_name2 AS staffname, " + "\n" + // スタッフid, スタッフ名
                jobCol
                + "coalesce(Occupation" + jobfumeiCol + "Guest.Num, 0) AS Occupation" + jobfumeiCol + "_Num, \n"
                + "    MainCount.count AS MainCount "
                + "  FROM mst_staff ms  " + "\n"
                + "LEFT JOIN ( " + "\n"
                + // 職種ごとの客数を求めるサブクエリ
                jobQuery
                + // 職種無しの人を数えるサブクエリ
                "SELECT data.staff_id, COUNT(*) AS Num " + "\n"
                + "	FROM (  " + "\n"
                + "		SELECT  ds.slip_no , ms.staff_id  " + "\n"
                + "		  FROM view_data_sales_detail_valid AS dsd  " + "\n";
                //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no " + "\n";
                }
                //IVS_LVTu start end 2015/03/09 Bug #35218 [gb]TB版帳票全般
                mainQuery += "		INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no  " + "\n"
                + "		   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                + "		INNER JOIN (  " + "\n"
                + "			SELECT ms.staff_id, ms.staff_no, ms.shop_id  " + "\n"
                + "			  FROM mst_staff AS ms  " + "\n";
                //+ //                                    "			 WHERE ms.delete_date IS NULL  " + "\n" +
                //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                //"		) ms ON ms.staff_id = ds.staff_id  " + "\n"
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                }else{
                    mainQuery +="		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                }
                //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                mainQuery += "		INNER JOIN (  " + "\n"
                + "			SELECT customer_id, before_visit_num " + "\n"
                + "			  FROM mst_customer  " + "\n"
                + "			 WHERE " + "\n"
                + "			       job_id IS NULL \n" + // 職種なしの集計
                "                      AND customer_no != '0'" + "\n" + // customer_noが0(非会員)じゃない人だけ
                "		) mc ON mc.customer_id = ds.customer_id  " + "\n"
                + "		 WHERE ds.delete_date IS NULL  " + "\n"
                + "		   AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                + "		    AND ds.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                //+ "		   AND dsd.product_division = 1  " + "\n"
                //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                + "		   AND dsd.product_division = 1  " + "\n";
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery = mainQuery + subSQL;
                }
                mainQuery = mainQuery + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績
                + "	) data  " + "\n"
                + "	GROUP BY data.staff_id " + "\n"
                + ") Occupation" + jobfumeiCol + "Guest ON Occupation" + jobfumeiCol + "Guest.staff_id = ms.staff_id " + "\n"
                + "LEFT JOIN ( " + "\n"
                + // 総数を数えるサブクエリ
                " SELECT data.staff_id  , COUNT(*) AS count  " + "\n"
                + " FROM ( " + "\n"
                + " 	SELECT ds.slip_no , ms.staff_id   " + "\n"
                + " 	  FROM view_data_sales_detail_valid AS dsd " + "\n";
                //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no " + "\n";
                }
                //IVS_LVTu start end 2015/03/09 Bug #35218 [gb]TB版帳票全般
                mainQuery += " 	INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no " + "\n"
                + "  	   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' " + "\n"
                + "	INNER JOIN (  " + "\n"
                + " 		SELECT ms.staff_id,ms.shop_id " + "\n"
                + " 		  FROM mst_staff AS ms " + "\n";
                //+ //                                    " 		 WHERE ms.delete_date IS NULL " + "\n" +
                //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                //"		) ms ON ms.staff_id = ds.staff_id  " + "\n"
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                }else{
                    mainQuery +="		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                }
                //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                mainQuery += "	INNER JOIN (  " + "\n"
                + "			SELECT customer_id, before_visit_num " + "\n"
                + "			  FROM mst_customer  " + "\n"
                + "			 WHERE " + "\n"
                + "                          customer_no != '0'" + "\n" + // customer_noが0(非会員)じゃない人だけ
                "    ) mc ON mc.customer_id = ds.customer_id  " + "\n"
                + " 	 WHERE ds.delete_date IS NULL " + "\n"
                + "  	   AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' " + "\n"
                + "  	   AND ds.shop_id in (" + paramBean.getShopIDList() + ") " + "\n"
                //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                //+ "		   AND dsd.product_division = 1  " + "\n"
                //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                + "		   AND dsd.product_division = 1  " + "\n";
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery = mainQuery + subSQL;
                }
                mainQuery = mainQuery + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績       
                + "  ) data " + "\n"
                + "  GROUP BY data.staff_id  " + "\n"
                + ") MainCount ON MainCount.staff_id = ms.staff_id " + "\n"
                + // 条件
                "WHERE " + "\n" + // 削除されてなくて
                "  (" + // 各スタッフIDが同じ人
                where
                + "OR Occupation" + jobfumeiCol + "Guest.staff_id = ms.staff_id) \n"
                + "ORDER BY staff_id ";
        //nhanvt end edit 20150213 Bug #35209
        stmt = cw.prepareStatement(mainQuery);
        rs = null;
        rs = stmt.executeQuery();

        if (rs.last()) {

            JExcelApi jx = new JExcelApi("スタッフ成績_担当別顧客成績_職業別構成比");
            jx.setTemplateFile("/reports/スタッフ成績_担当別顧客成績_職業別構成比.xls");

            // ヘッダ
            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getTargetName());
            Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
            paramBean.setTaxRate(tax_rate);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 6, "税抜");
            } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                jx.setValue(2, 6, "税込");
            }
            //IVS_LVTu start add 2014/12/01 Mashu_担当別顧客成績
            //Luc start add 20150108 [gb]トータルビューティ対応帳票の追加（担当別顧客成績）
            if(SystemInfo.getCurrentShop().getShopID() == 0 ||SystemInfo.getCurrentShop().getUseShopCategory()==1) {
                 jx.setValue(1, 7, "業態分類 ：");
            }else {
                 jx.setValue(1, 7, "");
            }
            //Luc end add 20150108 [gb]トータルビューティ対応帳票の追加（担当別顧客成績）
            if(paramBean.getListCategoryName() != null)
            {
                jx.setValue(2, 7, paramBean.getListCategoryName());
            }
            else
            {
                jx.setValue(2, 7, "");
            }
            //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
            // 不明欄追加
            HashMap job = new HashMap();
            job.put("job_name", "不明");
            jobList.add(job);

            //IVS_LVTu start edit 2014/12/18 Mashu_担当別顧客成績
            // 職業名セット
            for (int i = 0; i < jobList.size(); i++) {
                int col = (i + 1) * 2;
                //jx.setValue(col, 8, ((HashMap) jobList.get(i)).get("job_name").toString());
                jx.setValue(col, 9, ((HashMap) jobList.get(i)).get("job_name").toString());
            }

            // 空列削除
            int lastColumn = ((jobList.size() + 1) * 2);
            //while (jx.getValue(lastColumn + 1, 8).length() == 0) {
            while (jx.getValue(lastColumn + 1, 9).length() == 0) {
                jx.removeColumn(lastColumn);
            }

            //int row = 10;
            int row = 11;

            //IVS_LVTu end edit 2014/12/18 Mashu_担当別顧客成績
            // 追加行数セット
            jx.insertRow(row, rs.getRow() - 1);

            rs.first();

            // データセット
            do {

                jx.setValue(1, row, rs.getString("staffname"));

                for (int i = 0; i < jobList.size(); i++) {
                    int col = (i + 1) * 2;
                    jx.setValue(col, row, rs.getInt("Occupation" + (i + 1) + "_Num"));
                }

                row++;

            } while (rs.next());

            jx.removeRow(row);

            jx.openWorkbook();

        } else {

            return false;
        }

        return true;

    }

    /**
     * 担当別顧客成績＜年齢別構成比＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportCustomerAgeSales(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();
        //nhanvt start edit 20150213 Bug #35209
        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
        String subSQL = "";
        subSQL += " and \n"
                + " (	\n"
                + " exists (	\n"
                + "         select 1 from \n"
                + "         data_sales_detail dsd1\n"
                + "         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1)\n"
                + "         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n"
                + "         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n"
                + "         and mtc.shop_category_id in ( " + paramBean.getListCategoryId() + ")	\n"
                + "         ) 	\n"
                + " )\n";
        //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
        
        String ageQuery = "";
        int tableNumber = 2;
        for (int i = 15; i < 60; i += 5) {
            ageQuery += "	SELECT data.staff_id ,COUNT(*) AS Num " + "\n"
                    + "	FROM (  " + "\n"
                    + "		SELECT  ds.slip_no , ms.staff_id,  " + "\n"
                    + "		        sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  " + "\n"
                    + "		  FROM view_data_sales_detail_valid AS dsd  " + "\n";
                    //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        ageQuery += " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ";
                    }
                    //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    ageQuery += "		INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no  " + "\n"
                    + "		   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                    + "		INNER JOIN (  " + "\n"
                    + "			SELECT ms.staff_id, ms.staff_no, ms.shop_id  " + "\n"
                    + "			  FROM mst_staff AS ms  " + "\n";
                    //+ //                                    "			 WHERE ms.delete_date IS NULL  " + "\n" +
                    //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    //"		) ms ON ms.staff_id = ds.staff_id  " + "\n"
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        ageQuery += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                    }else{
                        ageQuery +="		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                    }
                    //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    ageQuery += "		INNER JOIN (  " + "\n"
                    + "			SELECT customer_id, before_visit_num " + "\n"
                    + "			  FROM mst_customer  " + "\n"
                    + "			 WHERE " + "\n"
                    + "			       date_part('year', age(birthday)) between " + i + " and " + (i + 4) + "\n"
                    + "                      AND customer_no != '0'" + "\n" + // customer_noが0(非会員)じゃない人だけ
                    "		) mc ON mc.customer_id = ds.customer_id  " + "\n"
                    + "		 WHERE ds.delete_date IS NULL  " + "\n"
                    + "		   AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                    + "		    AND ds.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                    //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                    //+ "		   AND dsd.product_division = 1  " + "\n"
                    //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    + "		   AND dsd.product_division = 1  " + "\n";
                    if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                        ageQuery = ageQuery + subSQL;
                    }
                    ageQuery = ageQuery + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績
                    + "	) data  " + "\n"
                    + "	GROUP BY data.staff_id " + "\n"
                    + ") Age" + tableNumber + "Guest ON Age" + tableNumber + "Guest.staff_id = ms.staff_id " + "\n"
                    + "LEFT JOIN ( " + "\n";

            tableNumber++;
        }

        //明細
        String mainQuery = "SELECT ms.staff_id, ms.staff_name1 || ' ' || ms.staff_name2 AS staffname, " + "\n" + // スタッフid, スタッフ名
                "	 coalesce(Age1Guest.Num, 0) AS Age1_Num, " + "\n" + // 〜14才の客数 
                "	 coalesce(Age2Guest.Num, 0) AS Age2_Num, " + "\n" + // 15〜19才の客数
                "	 coalesce(Age3Guest.Num, 0) AS Age3_Num, " + "\n" + // 20〜24才の客数
                "	 coalesce(Age4Guest.Num, 0) AS Age4_Num, " + "\n" + // 25〜29才の客数
                "	 coalesce(Age5Guest.Num, 0) AS Age5_Num, " + "\n" + // 30〜34才の客数
                "    coalesce(Age6Guest.Num, 0) AS Age6_Num, " + "\n" + // 35〜39才の客数
                "	 coalesce(Age7Guest.Num, 0) AS Age7_Num, " + "\n" + // 40〜44才の客数
                "	 coalesce(Age8Guest.Num, 0) AS Age8_Num, " + "\n" + // 45〜49才の客数
                "	 coalesce(Age9Guest.Num, 0) AS Age9_Num, " + "\n" + // 50〜54才の客数
                "	 coalesce(Age10Guest.Num, 0) AS Age10_Num, " + "\n" + // 55〜59才の客数
                "	 coalesce(Age11Guest.Num, 0) AS Age11_Num, " + "\n" + // 60才〜の客数
                "	 coalesce(Age12Guest.Num, 0) AS Age12_Num, " + "\n" + // 未登録の客数
                "    MainCount.count AS MainCount "
                + "  FROM mst_staff ms  " + "\n"
                + "LEFT JOIN ( " + "\n"
                + // 〜14才の客数を求めるサブクエリ
                "	SELECT data.staff_id ,COUNT(*) AS Num " + "\n"
                + "	FROM (  " + "\n"
                + "		SELECT  ds.slip_no , ms.staff_id,  " + "\n"
                + "		        sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  " + "\n"
                + "		  FROM view_data_sales_detail_valid AS dsd  " + "\n";
                //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ";
                }
                //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                mainQuery += "		INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no  " + "\n"
                + "		   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                + "		INNER JOIN (  " + "\n"
                + "			SELECT ms.staff_id, ms.staff_no, ms.shop_id  " + "\n"
                + "			  FROM mst_staff AS ms  " + "\n";
                //+ //                                    "			 WHERE ms.delete_date IS NULL  " + "\n" +
                //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                //"		) ms ON ms.staff_id = ds.staff_id  " + "\n"
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                }else{
                    mainQuery +="		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                }
                //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                mainQuery += "		INNER JOIN (  " + "\n"
                + "			SELECT customer_id, before_visit_num " + "\n"
                + "			  FROM mst_customer  " + "\n"
                + "			 WHERE " + "\n"
                + "			       date_part('year', age(birthday)) between 0 and 14 " + "\n"
                + "                      AND customer_no != '0'" + "\n" + // customer_noが0(非会員)じゃない人だけ
                "		) mc ON mc.customer_id = ds.customer_id  " + "\n"
                + "		 WHERE ds.delete_date IS NULL  " + "\n"
                + "		   AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                + "		    AND ds.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                //+ "		   AND dsd.product_division = 1  " + "\n"
                //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                + "		   AND dsd.product_division = 1  " + "\n";
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery = mainQuery + subSQL;
                }
                mainQuery = mainQuery + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績
                + "	) data  " + "\n"
                + "	GROUP BY data.staff_id " + "\n"
                + ") Age1Guest ON Age1Guest.staff_id = ms.staff_id " + "\n"
                + "LEFT JOIN ( " + "\n"
                + // 15〜59才の客数を求めるサブクエリ
                ageQuery
                        
                + // 60才〜の客数を求めるサブクエリ
                "	SELECT data.staff_id ,COUNT(*) AS Num " + "\n"
                + "	FROM (  " + "\n"
                + "		SELECT  ds.slip_no , ms.staff_id,  " + "\n"
                + "		        sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  " + "\n"
                + "		  FROM view_data_sales_detail_valid AS dsd  " + "\n";
                //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ";
                }
                //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                mainQuery += "		INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no  " + "\n"
                + "		   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                + "		INNER JOIN (  " + "\n"
                + "			SELECT ms.staff_id, ms.staff_no, ms.shop_id  " + "\n"
                + "			  FROM mst_staff AS ms  " + "\n";
                //+ //                                    "			 WHERE ms.delete_date IS NULL  " + "\n" +
                //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                //"		) ms ON ms.staff_id = ds.staff_id  " + "\n"
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                }else{
                    mainQuery +="		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                }
                //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                mainQuery += "		INNER JOIN (  " + "\n"
                + "			SELECT customer_id, before_visit_num " + "\n"
                + "			  FROM mst_customer  " + "\n"
                + "			 WHERE " + "\n"
                + "			       date_part('year', age(birthday)) >= 60 " + "\n"
                + "                      AND customer_no != '0'" + "\n" + // customer_noが0(非会員)じゃない人だけ
                "		) mc ON mc.customer_id = ds.customer_id  " + "\n"
                + "		 WHERE ds.delete_date IS NULL  " + "\n"
                + "		   AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                + "		    AND ds.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                //+ "		   AND dsd.product_division = 1  " + "\n"
                //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                + "		   AND dsd.product_division = 1  " + "\n";
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery = mainQuery + subSQL;
                }
                mainQuery = mainQuery + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績        
                + "	) data  " + "\n"
                + "	GROUP BY data.staff_id " + "\n"
                + ") Age11Guest ON Age11Guest.staff_id = ms.staff_id " + "\n"
                + "LEFT JOIN ( " + "\n"
                + // 未登録の客数を求めるサブクエリ
                "	SELECT data.staff_id ,COUNT(*) AS Num " + "\n"
                + "	FROM (  " + "\n"
                + "		SELECT  ds.slip_no , ms.staff_id, " + "\n"
                + "		        sum(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + ") AS value  " + "\n"
                + "		  FROM view_data_sales_detail_valid AS dsd  " + "\n";
                //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ";
                }
                //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                mainQuery += "		INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no  " + "\n"
                + "		   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                + "		INNER JOIN (  " + "\n"
                + "			SELECT ms.staff_id, ms.staff_no, ms.shop_id  " + "\n"
                + "			  FROM mst_staff AS ms  " + "\n";
                //+ //                                    "			 WHERE ms.delete_date IS NULL  " + "\n" +
                //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                //"		) ms ON ms.staff_id = ds.staff_id  " + "\n"
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                }else{
                    mainQuery +="		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                }
                //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                mainQuery += "		INNER JOIN (  " + "\n"
                + "			SELECT customer_id, before_visit_num " + "\n"
                + "			  FROM mst_customer  " + "\n"
                + "			 WHERE " + "\n"
                + "			       birthday IS NULL " + "\n"
                + "                      AND customer_no != '0'" + "\n" + // customer_noが0(非会員)じゃない人だけ
                "		) mc ON mc.customer_id = ds.customer_id  " + "\n"
                + "		 WHERE ds.delete_date IS NULL  " + "\n"
                + "		   AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                + "		    AND ds.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                //+ "		   AND dsd.product_division = 1  " + "\n"
                //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                + "		   AND dsd.product_division = 1  " + "\n";
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery = mainQuery + subSQL;
                }
                mainQuery = mainQuery + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績                
                + "	) data  " + "\n"
                + "	GROUP BY data.staff_id  " + "\n"
                + ") Age12Guest ON Age12Guest.staff_id = ms.staff_id " + "\n"
                + "LEFT JOIN( " + "\n"
                + // 総数を数えるサブクエリ
                " SELECT data.staff_id  , COUNT(*) AS count  " + "\n"
                + " FROM ( " + "\n"
                + " 	SELECT ds.slip_no , ms.staff_id   " + "\n"
                + " 	  FROM view_data_sales_detail_valid AS dsd " + "\n";
                //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no ";
                }
                //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                mainQuery += " 	INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no " + "\n"
                + "  	   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' " + "\n"
                + "	INNER JOIN (  " + "\n"
                + " 		SELECT ms.staff_id,ms.shop_id " + "\n"
                + " 		  FROM mst_staff AS ms " + "\n";
                //+ //                                    " 		 WHERE ms.delete_date IS NULL " + "\n" +
                //" 	) ms ON ms.staff_id = ds.staff_id " + "\n"
                //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                //"		) ms ON ms.staff_id = ds.staff_id  " + "\n"
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                }else{
                    mainQuery +="		) ms ON ms.staff_id = ds.staff_id  " + "\n";
                }
                //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                mainQuery += "	INNER JOIN (  " + "\n"
                + "			SELECT customer_id, before_visit_num " + "\n"
                + "			  FROM mst_customer  " + "\n"
                + "			 WHERE " + "\n"
                + "                          customer_no != '0'" + "\n" + // customer_noが0(非会員)じゃない人だけ
                "    ) mc ON mc.customer_id = ds.customer_id  " + "\n"
                + " 	 WHERE ds.delete_date IS NULL " + "\n"
                + "  	   AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' " + "\n"
                + "  	   AND ds.shop_id in (" + paramBean.getShopIDList() + ") " + "\n"
                //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                //+ "		   AND dsd.product_division = 1  " + "\n"
                //+ "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                + "		   AND dsd.product_division = 1  " + "\n";
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery = mainQuery + subSQL;
                }
                mainQuery = mainQuery + "		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績        
                + "  ) data " + "\n"
                + "  GROUP BY data.staff_id  " + "\n"
                + ") MainCount ON MainCount.staff_id = ms.staff_id " + "\n"
                + // 条件
                "WHERE " + "\n" + // 削除されてなくて
                "   (" + // 各スタッフIDが同じ人
                "       Age1Guest.staff_id = ms.staff_id OR \n"
                + "       Age2Guest.staff_id = ms.staff_id OR \n"
                + "       Age3Guest.staff_id = ms.staff_id OR \n"
                + "       Age4Guest.staff_id = ms.staff_id OR \n"
                + "       Age5Guest.staff_id = ms.staff_id OR \n"
                + "       Age6Guest.staff_id = ms.staff_id OR \n"
                + "       Age7Guest.staff_id = ms.staff_id OR \n"
                + "       Age8Guest.staff_id = ms.staff_id OR \n"
                + "       Age9Guest.staff_id = ms.staff_id OR \n"
                + "       Age10Guest.staff_id = ms.staff_id OR \n"
                + "       Age11Guest.staff_id = ms.staff_id OR \n"
                + "       Age12Guest.staff_id = ms.staff_id    \n"
                + "       ) " + "\n"
                + "ORDER BY staff_id ";

        PreparedStatement stmt = cw.prepareStatement(mainQuery);
        ResultSet rs = null;
        rs = stmt.executeQuery();
        //nhanvt end edit 20150213 Bug #35209
        if (rs.last()) {

            JExcelApi jx = new JExcelApi("スタッフ成績_担当別顧客成績_年齢別構成比");
            jx.setTemplateFile("/reports/スタッフ成績_担当別顧客成績_年齢別構成比.xls");

            // ヘッダ
            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getTargetName());
            Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
            paramBean.setTaxRate(tax_rate);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 6, "税抜");
            } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                jx.setValue(2, 6, "税込");
            }
            //IVS_LVTu start add 2014/12/01 Mashu_担当別顧客成績
            //Luc start add 20150108 [gb]トータルビューティ対応帳票の追加（担当別顧客成績）
            if(SystemInfo.getCurrentShop().getShopID() == 0 || SystemInfo.getCurrentShop().getUseShopCategory()==1) {
                 jx.setValue(1, 7, "業態分類 ：");
            }else {
                 jx.setValue(1, 7, "");
            }
            //Luc end add 20150108 [gb]トータルビューティ対応帳票の追加（担当別顧客成績）
            if(paramBean.getListCategoryName() != null)
            {
                jx.setValue(2, 7, paramBean.getListCategoryName());
            }
            else
            {
                jx.setValue(2, 7, "");
            }
            //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
            //IVS_LVTu star edit 2014/12/01 Mashu_担当別顧客成績
            //int row = 10;
            int row = 11;
            //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績

            // 追加行数セット
            jx.insertRow(row, rs.getRow() - 1);

            rs.first();

            // データセット
            do {

                jx.setValue(1, row, rs.getString("staffname"));
                jx.setValue(2, row, rs.getInt("Age1_Num"));
                jx.setValue(4, row, rs.getInt("Age2_Num"));
                jx.setValue(6, row, rs.getInt("Age3_Num"));
                jx.setValue(8, row, rs.getInt("Age4_Num"));
                jx.setValue(10, row, rs.getInt("Age5_Num"));
                jx.setValue(12, row, rs.getInt("Age6_Num"));
                jx.setValue(14, row, rs.getInt("Age7_Num"));
                jx.setValue(16, row, rs.getInt("Age8_Num"));
                jx.setValue(18, row, rs.getInt("Age9_Num"));
                jx.setValue(20, row, rs.getInt("Age10_Num"));
                jx.setValue(22, row, rs.getInt("Age11_Num"));
                jx.setValue(24, row, rs.getInt("Age12_Num"));

                row++;

            } while (rs.next());

            jx.removeRow(row);

            jx.openWorkbook();

        } else {

            return false;
        }

        return true;

    }

    /**
     * 担当別再来分析＜来店周期別構成比＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportCustomerTurnoverSales(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();
        //nhanvt start edit 20150213 Bug #35209
        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);

        //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
        String subSQL = "";
        subSQL += " and \n"
                + " (	\n"
                + " exists (	\n"
                + "         select 1 from \n"
                + "         data_sales_detail dsd1\n"
                + "         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1)\n"
                + "         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n"
                + "         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n"
                + "         and mtc.shop_category_id in ( " + paramBean.getListCategoryId() + ")	\n"
                + "         ) 	\n"
                + " )\n";
        //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績
        //明細
        String mainQuery = "SELECT ms.staff_id, ms.staff_name1 || ' ' || ms.staff_name2 AS staffname, " + "\n" + // スタッフid, スタッフ名
                "	 TurnoverGuest.Num1 AS Turnover1_Num, " + "\n" + // 〜30日の客数 
                "	 TurnoverGuest.Num2 AS Turnover2_Num, " + "\n" + // 〜45日の客数
                "	 TurnoverGuest.Num3 AS Turnover3_Num, " + "\n" + // 〜60日の客数
                "	 TurnoverGuest.Num4 AS Turnover4_Num, " + "\n" + // 〜75日の客数
                "	 TurnoverGuest.Num5 AS Turnover5_Num, " + "\n" + // 〜90日の客数
                "    TurnoverGuest.Num6 AS Turnover6_Num, " + "\n" + // 〜120日の客数
                "	 TurnoverGuest.Num7 AS Turnover7_Num, " + "\n" + // 〜150日の客数
                "	 TurnoverGuest.Num8 AS Turnover8_Num, " + "\n" + // 〜180日の客数
                "	 TurnoverGuest.Num9 AS Turnover9_Num, " + "\n" + // 181日〜の客数
                "	 TurnoverGuest.Num10 AS Turnover10_Num, " + "\n" + // 新規の客数
                "    coalesce(MainCount.count,0) AS MainCount "
                + "  FROM  " + "\n"
                + "( " + "\n"
                + //レスポンス向上の為に修正
                "    SELECT data.staff_id " + "\n"
                + "        ,sum(case when datepart <= 30 then 1 else 0 end) AS Num1" + "\n"
                + "        ,sum(case when datepart BETWEEN 31 AND 45 then 1 else 0 end) AS Num2" + "\n"
                + "        ,sum(case when datepart BETWEEN 46 AND 60 then 1 else 0 end) AS Num3" + "\n"
                + "        ,sum(case when datepart BETWEEN 61 AND 75 then 1 else 0 end) AS Num4" + "\n"
                + "        ,sum(case when datepart BETWEEN 76 AND 90 then 1 else 0 end) AS Num5" + "\n"
                + "        ,sum(case when datepart BETWEEN 91 AND 120 then 1 else 0 end) AS Num6" + "\n"
                + "        ,sum(case when datepart BETWEEN 121 AND 150 then 1 else 0 end) AS Num7" + "\n"
                + "        ,sum(case when datepart BETWEEN 151 AND 180 then 1 else 0 end) AS Num8" + "\n"
                + "        ,sum(case when datepart > 180 then 1 else 0 end) AS Num9" + "\n"
                + "        ,sum(case when datepart IS null then 1 else 0 end) AS Num10" + "\n"
                + "    FROM (  " + "\n"
                + "        SELECT  mc.slip_no , ms.staff_id ,date_part('day', mc.sales_date - last_date) as datepart" + "\n"
                + "          FROM view_data_sales_detail_valid AS dsd  " + "\n";
                //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no " +"\n";
                }
                //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                mainQuery += "        INNER JOIN (  " + "\n"
                + "                       SELECT mst_customer.customer_id, sales_date, get_last_visit_date(mst_customer.customer_id, sales_date) as last_date, " + "\n"
                + "                              data_sales1.slip_no, data_sales1.shop_id, data_sales1.staff_id " + "\n"
                + "                FROM mst_customer  INNER JOIN data_sales AS data_sales1 USING(customer_id) " + "\n"
                + "                WHERE  " + "\n"
                + "                               customer_no != '0'" + "\n" + // customer_noが0(非会員)じゃない人だけ
                "                           AND data_sales1.sales_date BETWEEN '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n" + // 期間内の分だけ
                //"                           AND data_sales1.staff_id IS NOT NULL " + "\n" + // 担当なしは除外
                "                           AND data_sales1.delete_date IS NULL " + "\n"
                + "                           AND data_sales1.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                + "        ) mc ON  mc.shop_id = dsd.shop_id AND mc.slip_no = dsd.slip_no  " + "\n"
                + "        left JOIN (  " + "\n"
                + "            SELECT ms.staff_id, ms.staff_no, ms.shop_id  " + "\n"
                + "              FROM mst_staff AS ms  " + "\n";
                //+ //				    "             WHERE ms.delete_date IS NULL  " + "\n" +
                //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                //"        ) ms ON ms.staff_id = mc.staff_id  " + "\n"
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += "        ) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                }else{
                    mainQuery += "        ) ms ON ms.staff_id = mc.staff_id  " + "\n";
                }
                //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                //+ "         WHERE dsd.product_division = 1  " + "\n"
                //+ "        GROUP BY mc.slip_no , ms.staff_id  ,datepart" + "\n"
                mainQuery += "         WHERE dsd.product_division = 1  " + "\n";
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery = mainQuery + subSQL;
                }
                mainQuery = mainQuery + "		GROUP BY mc.slip_no , ms.staff_id  ,datepart  " + "\n"
                //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績    
                + "    ) data  " + "\n"
                + "    GROUP BY data.staff_id " + "\n"
                + ") TurnoverGuest left join mst_staff ms  ON TurnoverGuest.staff_id = ms.staff_id " + "\n"
                + "LEFT JOIN ( " + "\n"
                + // 総数を数えるサブクエリ
                " SELECT data.staff_id  , COUNT(*) AS count  " + "\n"
                + " FROM ( " + "\n"
                + " 	SELECT ds.slip_no , ms.staff_id   " + "\n"
                + " 	  FROM view_data_sales_detail_valid AS dsd " + "\n";
                //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += " INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no " +"\n";
                }
                //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                mainQuery += " 	INNER JOIN data_sales AS ds ON ds.shop_id = dsd.shop_id AND ds.slip_no = dsd.slip_no " + "\n"
                + "  	   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' " + "\n"
                + " 	left JOIN ( " + "\n"
                + " 		SELECT ms.staff_id,ms.shop_id " + "\n"
                + " 		  FROM mst_staff AS ms " + "\n";
                //+ //                                    " 		 WHERE ms.delete_date IS NULL " + "\n" +
                
                //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                //" 	) ms ON ms.staff_id = ds.staff_id " + "\n"
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery += "        ) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                }else{
                    mainQuery += " 	) ms ON ms.staff_id = ds.staff_id " + "\n";
                }
                //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                mainQuery += "	INNER JOIN (  " + "\n"
                + "			SELECT customer_id, before_visit_num " + "\n"
                + "			  FROM mst_customer  " + "\n"
                + "			 WHERE " + "\n" + // 削除されてなくて
                "                          customer_no != '0'" + "\n" + // customer_noが0(非会員)じゃない人だけ
                "    ) mc ON mc.customer_id = ds.customer_id  " + "\n"
                + " 	 WHERE ds.delete_date IS NULL " + "\n"
                + "  	   AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "' " + "\n"
                + "  	   AND ds.shop_id in (" + paramBean.getShopIDList() + ") " + "\n"
                //IVS_LVTu start edit 2014/12/01 Mashu_担当別顧客成績
                //+ "  	   AND dsd.product_division = 1 " + "\n"
                //+ "  	 GROUP BY ds.slip_no , ms.staff_id " + "\n"
                + "  	   AND dsd.product_division = 1 " + "\n";
                if ((paramBean.getListCategoryId()!=null && !paramBean.getListCategoryId().equals(""))) {
                    mainQuery = mainQuery + subSQL;
                }
                mainQuery = mainQuery + "  	 GROUP BY ds.slip_no , ms.staff_id " + "\n"
                //IVS_LVTu end edit 2014/12/01 Mashu_担当別顧客成績            
                + "  ) data " + "\n"
                + "  GROUP BY data.staff_id  " + "\n"
                + ") MainCount ON MainCount.staff_id = ms.staff_id " + "\n"
                + // 条件
                //"WHERE " + "\n" + // 削除されてなくて
                //"  TurnoverGuest.staff_id = ms.staff_id " + "\n"
                "ORDER BY staff_id ";
        //nhanvt end edit 20150213 Bug #35209
        PreparedStatement stmt = cw.prepareStatement(mainQuery);
        ResultSet rs = null;
        rs = stmt.executeQuery();

        if (rs.last()) {

            JExcelApi jx = new JExcelApi("スタッフ成績_担当別顧客成績_来店周期別構成比");
            jx.setTemplateFile("/reports/スタッフ成績_担当別顧客成績_来店周期別構成比.xls");

            // ヘッダ
            SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
            jx.setValue(2, 4, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
            jx.setValue(2, 5, paramBean.getTargetName());
            Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
            paramBean.setTaxRate(tax_rate);
            if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
                jx.setValue(2, 6, "税抜");
            } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
                jx.setValue(2, 6, "税込");
            }
            //IVS_LVTu start add 2014/12/01 Mashu_担当別顧客成績 
            //Luc start add 20150108 [gb]トータルビューティ対応帳票の追加（担当別顧客成績）
            if(SystemInfo.getCurrentShop().getShopID() == 0 || SystemInfo.getCurrentShop().getUseShopCategory()==1) {
                 jx.setValue(1, 7, "業態分類 ：");
            }else {
                 jx.setValue(1, 7, "");
            }
            //Luc end add 20150108 [gb]トータルビューティ対応帳票の追加（担当別顧客成績）
            if(paramBean.getListCategoryName() != null)
            {
                jx.setValue(2, 7, paramBean.getListCategoryName());
            }
            else
            {
                jx.setValue(2, 7, "");
            }
            //IVS_LVTu end add 2014/12/01 Mashu_担当別顧客成績  
            //IVS_LVTu start edit 2014/12/18 Mashu_担当別顧客成績  
            //int row = 10;
            int row = 11;
            //IVS_LVTu end edit 2014/12/18 Mashu_担当別顧客成績  

            // 追加行数セット
            jx.insertRow(row, rs.getRow() - 1);

            rs.first();

            // データセット
            do {

                jx.setValue(1, row, rs.getString("staffname"));
                jx.setValue(2, row, rs.getInt("Turnover1_Num"));
                jx.setValue(4, row, rs.getInt("Turnover2_Num"));
                jx.setValue(6, row, rs.getInt("Turnover3_Num"));
                jx.setValue(8, row, rs.getInt("Turnover4_Num"));
                jx.setValue(10, row, rs.getInt("Turnover5_Num"));
                jx.setValue(12, row, rs.getInt("Turnover6_Num"));
                jx.setValue(14, row, rs.getInt("Turnover7_Num"));
                jx.setValue(16, row, rs.getInt("Turnover8_Num"));
                jx.setValue(18, row, rs.getInt("Turnover9_Num"));
                jx.setValue(20, row, rs.getInt("Turnover10_Num"));

                row++;

            } while (rs.next());

            jx.removeRow(row);

            jx.openWorkbook();

        } else {

            return false;
        }

        return true;
    }

    /**
     * 担当別技術成績＜按分成績＞出力ロジック
     *
     * @param paramBean レポートパラメータBean
     * @param orderDisplay 表示順
     * @return true:成功 false:出力対象なし
     * @exception Exception
     */
    public boolean outStaffReportProportionallyDistribution(ReportParameterBean paramBean, int orderDisplay) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();

        //初期処理
        HashMap<String, Object> paramMap = this.outStaffReportInit(paramBean, cw);
        if (orderDisplay == ORDER_DISPLAY_KINGAKU) {
            paramMap.put("OrderDisplay", "金額");
        } else if (orderDisplay == ORDER_DISPLAY_POINT) {
            paramMap.put("OrderDisplay", "ポイント");
        }

        // 按分一覧を取ってくる
        String proportionallyQuery = "select proportionally_id, proportionally_name from mst_proportionally where delete_date is null order by display_seq";
        PreparedStatement stmt = cw.prepareStatement(proportionallyQuery);
        ResultSet rs = stmt.executeQuery();

        ArrayList proportionallyList = new ArrayList();
        while (rs.next()) {
            HashMap proportionally = new HashMap();
            proportionally.put("proportionally_name", rs.getString("proportionally_name"));
            proportionally.put("proportionally_id", rs.getInt("proportionally_id"));
            proportionallyList.add(proportionally);
        }

        rs.close();

        if (proportionallyList.size() == 0) {
            return false;
        }

        proportionallyQuery = "";

        String proportionallyCol = "";
        String where = "";
        for (int i = 0; i < proportionallyList.size(); i++) {
            HashMap proportionally = (HashMap) proportionallyList.get(i);
            proportionallyQuery += "	SELECT data.staff_id, sum(data.value) AS value, sum(data.point) AS point " + "\n"
                    + "	FROM (  " + "\n"
                    + "		SELECT  ds.slip_no , ms.staff_id,  " + "\n"
                    + "		        sum(floor(" + makeValueString(paramBean, "ds", "dsd", "sales_date") + " * dsp.ratio * 0.01) ) AS value,  " + "\n"
                    + "		        sum(dsp.point) AS point  " + "\n"
                    + "		  FROM data_sales_proportionally AS dsp  " + "\n"
                    + "		INNER JOIN view_data_sales_detail_valid AS dsd ON dsd.shop_id = dsp.shop_id AND dsd.slip_no = dsp.slip_no AND dsd.slip_detail_no = dsp.slip_detail_no  " + "\n"
                    //nhanvt start edit 20150126 Bug #35065
                    + "		   AND dsd.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n";
                    //IVS_LVTu start add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
                        proportionallyQuery += "     INNER JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = dsd.shop_id AND dsmt.slip_no = dsd.slip_no "+"\n";
                    }
                    //IVS_LVTu end add 2015/03/09 Bug #35218 [gb]TB版帳票全般
                    proportionallyQuery += "		INNER JOIN data_sales AS ds ON ds.shop_id = dsp.shop_id AND ds.slip_no = dsp.slip_no and ds.sales_date =  dsd.sales_date  " + "\n"
                    //nhanvt end edit 20150126 Bug #35065
                    + "		INNER JOIN (  " + "\n"
                    + "			SELECT ms.staff_id, ms.staff_no, ms.shop_id  " + "\n"
                    + "			  FROM mst_staff AS ms  " + "\n"
                    + "			 WHERE ms.delete_date IS NULL  " + "\n";
                    //IVS_LVTu start edit 2015/03/10 Bug #35218 [gb]TB版帳票全般
                    //+ "		) ms ON ms.staff_id = dsp.staff_id  " + "\n"
                    if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
                        proportionallyQuery += "		) ms ON ms.staff_id = dsmt.staff_id  " + "\n";
                    }else{
                        proportionallyQuery += "		) ms ON ms.staff_id = dsp.staff_id  " + "\n";
                    }        
                    //IVS_LVTu end edit 2015/03/10 Bug #35218 [gb]TB版帳票全般        
                    proportionallyQuery += "		INNER JOIN (  " + "\n"
                    + "			SELECT data_proportionally_id " + "\n"
                    + "			  FROM data_proportionally  " + "\n"
                    + "			 WHERE proportionally_id = " + proportionally.get("proportionally_id") + " \n" + // 按分ごとの集計
                    "		) dp ON dp.data_proportionally_id = dsp.data_proportionally_id  " + "\n"
                    + "		 WHERE dsp.delete_date IS NULL  " + "\n"
                    + "		   AND ds.delete_date IS NULL  " + "\n"
                    + "		   AND ds.sales_date between '" + paramMap.get("TargetStartDate") + "' AND '" + paramMap.get("TargetEndDate") + "'  " + "\n"
                    + "		   AND ds.shop_id in (" + paramBean.getShopIDList() + ")       " + "\n"
                    + "		   AND dsd.product_division = 1  " + "\n";
                     //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
                    if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
                        proportionallyQuery += " and \n";
                        proportionallyQuery +=" (	\n";
                        proportionallyQuery +=" exists (	\n";
                        proportionallyQuery +="         select 1 from \n";
                        proportionallyQuery +="         data_sales_detail dsd1\n";
                        proportionallyQuery +="         inner join mst_technic mt on dsd1.product_id = mt.technic_id and dsd.product_division = dsd1.product_division and dsd1.product_division in(1,3)\n";
                        proportionallyQuery +="         inner join mst_technic_class mtc on mtc.technic_class_id = mt.technic_class_id \n";
                        proportionallyQuery +="         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no \n";
                        proportionallyQuery +="         and mtc.shop_category_id in( " + paramBean.getCategoryIDList() + ")	\n";
                        proportionallyQuery +="         ) 	\n";
                        proportionallyQuery +=" )\n";
                    }
                    //Luc start add 20141204 ticket #33404 [gb]トータルビューティ対応帳票の追加（担当別技術成績）
                    proportionallyQuery+="		GROUP BY ds.slip_no , ms.staff_id  " + "\n"
                    + "	) data  " + "\n"
                    + "	GROUP BY data.staff_id " + "\n"
                    + ") Proportionally" + (i + 1) + "Distribution ON Proportionally" + (i + 1) + "Distribution.staff_id = ms.staff_id " + "\n";

            proportionallyQuery += (i < proportionallyList.size() - 1 ? "LEFT JOIN ( " + "\n" : "");

            proportionallyCol += "coalesce(Proportionally" + (i + 1) + "Distribution.value, 0) AS Proportionally" + (i + 1) + "_Value, \n";
            proportionallyCol += "coalesce(Proportionally" + (i + 1) + "Distribution.point, 0) AS Proportionally" + (i + 1) + "_Point,  \n";
            where += (i > 0 ? " OR " : "") + "Proportionally" + (i + 1) + "Distribution.staff_id = ms.staff_id \n";
        }

        //明細
        String mainQuery = "SELECT ms.staff_id, ms.staff_name1 || ' ' || ms.staff_name2 AS staffname, " + "\n" + // スタッフid, スタッフ名
                proportionallyCol
                + "1 \n"
                + "  FROM mst_staff ms  " + "\n"
                + "LEFT OUTER JOIN ( " + "\n"
                + // 按分ごとの金額、ポイントを求めるサブクエリ
                proportionallyQuery
                + // 条件
                "WHERE delete_date IS NULL " + "\n" + // 削除されてなくて
                "  AND (" + // 各スタッフIDが同じ人
                where + ") \n"
                + "ORDER BY "
                + "    0 ";

        if (orderDisplay == ORDER_DISPLAY_KINGAKU) {
            for (int i = 0; i < proportionallyList.size(); i++) {
                mainQuery += " + coalesce(Proportionally" + (i + 1) + "Distribution.value, 0)";
            }
        } else if (orderDisplay == ORDER_DISPLAY_POINT) {
            for (int i = 0; i < proportionallyList.size(); i++) {
                mainQuery += " + coalesce(Proportionally" + (i + 1) + "Distribution.point, 0)";
            }
        }

        mainQuery += " desc";

        stmt = cw.prepareStatement(mainQuery);
        ResultSet subRs = null;
        subRs = stmt.executeQuery();

        // StaffReportBean の初期化
        StaffReportBeanProportionally staffBean = null;
        ArrayList<StaffReportBeanProportionally> jrBeanList = new ArrayList<StaffReportBeanProportionally>();

        //スタッフごとの合計
        while (subRs.next()) {
            staffBean = new StaffReportBeanProportionally();

            staffBean.setStaffId(subRs.getInt("staff_id"));
            staffBean.setStaffName(subRs.getString("staffname"));

            jrBeanList.add(staffBean);

            long totalKingaku = 0;
            double totalPoint = 0;

            for (int i = 0; i < proportionallyList.size(); i++) {
                totalKingaku += subRs.getLong("Proportionally" + (i + 1) + "_Value");
                totalPoint += subRs.getDouble("Proportionally" + (i + 1) + "_Point");
            }

            staffBean.setTotalKingaku(totalKingaku);
            staffBean.setTotalPoint(totalPoint);
        }

        //出力データが無い
        if (jrBeanList.size() == 0) {
            return false;
        }

        //並び順の設定
        proportionallyOrderDisplay = orderDisplay;
        Collections.sort(jrBeanList, new StaffReportBeanProportionallyComparator());

        //ランキングの設定
        for (int i = 0; i < jrBeanList.size(); i++) {
            StaffReportBeanProportionally srbp = (StaffReportBeanProportionally) jrBeanList.get(i);

            srbp.setRanking(i + 1);
        }

        //按分ごとの金額、ポイント設定
        int proportionallyCntOfLastSheet = 0;  //最終シートの按分数
        int sheetCnt = 0;                      //出力するExcelシート数　※シート数 ＝ マスタ登録された按分数 ÷ １５(１シート当りの案分数) ＋ １（余りがある場合）
        proportionallyCntOfLastSheet = proportionallyList.size() % PROPORTIONALLY_COUNT_OF_ONE_EXCEL_SHEET;
        sheetCnt = proportionallyList.size() / PROPORTIONALLY_COUNT_OF_ONE_EXCEL_SHEET;
        if (proportionallyCntOfLastSheet > 0) {
            sheetCnt++;
        }

        JExcelApi jx = new JExcelApi("スタッフ成績_担当別技術成績_按分成績");
        jx.setTemplateFile("/reports/スタッフ成績_担当別技術成績_按分成績.xls");

        // ヘッダ
        SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
        jx.setValue(2, 2, format.format(paramBean.getTargetStartDateObj()) + " 〜 " + format.format(paramBean.getTargetEndDateObj()));
        jx.setValue(2, 3, paramBean.getTargetName());
        Double tax_rate = SystemInfo.getTaxRate(paramBean.getTargetEndDateObj()) + 1;
        paramBean.setTaxRate(tax_rate);
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            jx.setValue(2, 4, "税抜");
        } else if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_UNIT) {
            jx.setValue(2, 4, "税込");
        }
        jx.setValue(2, 5, paramMap.get("OrderDisplay"));
        if(paramBean.getUseShopCategory()==1){
                 jx.setValue(1, 6, "業態分類：");
                 jx.setValue(2, 6, paramBean.getCategoryNameList());
        }

        // 空列削除
        int delCount = 200 - (proportionallyList.size() < 10 ? 10 : proportionallyList.size());
        for (int i = 0; i < delCount; i++) {
            jx.removeColumn(10);
        }

        // 空行削除
        delCount = 200 - (jrBeanList.size() < 3 ? 3 : jrBeanList.size());
        delCount = delCount * 2;
        for (int i = 0; i < delCount; i++) {
            jx.removeRow(11);
        }

        // 列名セット
        for (int i = 0; i < proportionallyList.size(); i++) {
            jx.setValue(6 + i, 7, ((HashMap) proportionallyList.get(i)).get("proportionally_name"));
        }

        int row = 9;

        subRs.beforeFirst();
        while (subRs.next()) {
            jx.setValue(2, row, subRs.getString("staffname"));
            int col = 6;
            for (int i = 0; i < proportionallyList.size(); i++) {
                jx.setValue(col + i, row, subRs.getLong("Proportionally" + (i + 1) + "_Value"));
                jx.setValue(col + i, row + 1, subRs.getDouble("Proportionally" + (i + 1) + "_Point"));
            }
            row += 2;
        }

        jx.openWorkbook();

        return true;
    }

    /**
     * 指定ミリ秒実行を止める
     *
     * @param msec 実行を止める時間(ミリ秒)
     */
    public synchronized void sleep(long msec) {
        try {
            wait(msec);
        } catch (InterruptedException e) {
        }
    }

    public static String getDataSalesDetailShareTable() {

        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      a.shop_id");
        sql.append("     ,a.slip_no");
        sql.append("     ,a.sales_date");
        sql.append("     ,a.customer_id");
        sql.append("     ,a.designated_flag");
        sql.append("     ,a.staff_id");
        sql.append("     ,a.visit_num");
        sql.append("     ,a.visited_memo");
        sql.append("     ,a.next_visit_date");
        sql.append("     ,a.reappearance_date");
        sql.append("     ,a.slip_detail_no");
        sql.append("     ,a.product_division");
        sql.append("     ,a.product_id");
        sql.append("     ,a.product_num");
        sql.append("     ,a.product_value");
        sql.append("     ,a.discount_rate");
        sql.append("     ,a.discount_value");
        sql.append("     ,a.detail_designated_flag");
        /* GEOBECK start edit 20160829 #54400 */
        //sql.append("     ,coalesce(b.approached_flag, a.detail_approached_flag, false) as detail_approached_flag");
        sql.append("     ,coalesce(a.detail_approached_flag, false) as detail_approached_flag\n");
        //sql.append("     ,coalesce(b.staff_id, a.detail_staff_id) as detail_staff_id");
        sql.append("     ,coalesce(a.detail_staff_id) as detail_staff_id");
        //sql.append("     ,trunc(a.detail_value_in_tax * coalesce(b.ratio, 100) / 100) as detail_value_in_tax");
        //sql.append("     ,trunc(a.detail_value_no_tax * coalesce(b.ratio, 100) / 100) as detail_value_no_tax");
        //sql.append("     ,trunc(a.discount_detail_value_in_tax * coalesce(b.ratio, 100) / 100) as discount_detail_value_in_tax");
        //sql.append("     ,trunc(a.discount_detail_value_no_tax * coalesce(b.ratio, 100) / 100) as discount_detail_value_no_tax");
        //sql.append("     ,trunc(a.account_setting_value * coalesce(b.ratio, 100) / 100) as account_setting_value");
        sql.append("     ,a.detail_value_in_tax as detail_value_in_tax\n");
        sql.append("     ,a.detail_value_no_tax as detail_value_no_tax\n");
        sql.append("     ,a.discount_detail_value_in_tax as discount_detail_value_in_tax\n");
        sql.append("     ,a.discount_detail_value_no_tax as discount_detail_value_no_tax\n");
        sql.append("     ,a.account_setting_value as account_setting_value\n");
        /* GEOBECK end edit 20160829 #54400 */
        sql.append(" from");
        sql.append("     view_data_sales_detail_valid a");
        /* GEOBECK start edit 20160829 #54400 */
        //sql.append("         left join data_sales_detail_proportionally b");
        //sql.append("         using(shop_id, slip_no, slip_detail_no)");
        /* GEOBECK end edit 20160829 #54400 */

        return sql.toString();
    }
    
    //IVS_LVTu start add 2015/06/16 Bug #37388
     public static String getDataSalesDetailShareTableItem() {

        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      a.shop_id");
        sql.append("     ,a.slip_no");
        sql.append("     ,a.sales_date");
        sql.append("     ,a.customer_id");
        sql.append("     ,a.designated_flag");
        sql.append("     ,a.staff_id");
        sql.append("     ,a.visit_num");
        sql.append("     ,a.visited_memo");
        sql.append("     ,a.next_visit_date");
        sql.append("     ,a.reappearance_date");
        sql.append("     ,a.slip_detail_no");
        sql.append("     ,a.product_division");
        sql.append("     ,a.product_id");
        sql.append("     ,a.product_num");
        sql.append("     ,a.product_value");
        sql.append("     ,a.discount_rate");
        sql.append("     ,a.discount_value");
        sql.append("     ,a.detail_designated_flag");
        sql.append("     ,coalesce(b.approached_flag, a.detail_approached_flag, false) as detail_approached_flag");
        sql.append("     ,coalesce(b.staff_id, a.detail_staff_id) as detail_staff_id");
        sql.append("     ,(a.detail_value_in_tax * coalesce(b.ratio, 100) / 100) as detail_value_in_tax");
        sql.append("     ,(a.detail_value_no_tax * coalesce(b.ratio, 100) / 100) as detail_value_no_tax");
        sql.append("     ,(a.discount_detail_value_in_tax * coalesce(b.ratio, 100) / 100) as discount_detail_value_in_tax");
        sql.append("     ,(a.discount_detail_value_no_tax * coalesce(b.ratio, 100) / 100) as discount_detail_value_no_tax");
        sql.append("     ,(a.account_setting_value * coalesce(b.ratio, 100) / 100) as account_setting_value");
        sql.append(" from");
        sql.append("     view_data_sales_detail_valid a");
        sql.append("         left join data_sales_detail_proportionally b");
        sql.append("         using(shop_id, slip_no, slip_detail_no)");

        return sql.toString();
    }
     
     public static String getDataSalesDetailShareTableItemMainStaff(ReportParameterBean paramBean) {

        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      a.shop_id");
        sql.append("     ,a.slip_no");
        sql.append("     ,a.sales_date");
        sql.append("     ,a.customer_id");
        sql.append("     ,a.designated_flag");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("     ,dsmt.staff_id");
        }else {
            sql.append("     ,a.staff_id");
        }
        sql.append("     ,a.visit_num");
        sql.append("     ,a.visited_memo");
        sql.append("     ,a.next_visit_date");
        sql.append("     ,a.reappearance_date");
        sql.append("     ,a.slip_detail_no");
        sql.append("     ,a.product_division");
        sql.append("     ,a.product_id");
        sql.append("     ,a.product_num");
        sql.append("     ,a.product_value");
        sql.append("     ,a.discount_rate");
        sql.append("     ,a.discount_value");
        sql.append("     ,a.detail_designated_flag");
        sql.append("     ,coalesce(b.approached_flag, a.detail_approached_flag, false) as detail_approached_flag");
        sql.append("     ,coalesce(b.staff_id, a.detail_staff_id) as detail_staff_id");
        //IVS_LVTu start edit 2015/06/26 Bug #38421
        if(paramBean.getCategoryIDList() != null && paramBean.getCategoryIDList() != ""){
            sql.append("     ,(case when a.product_division in ( 2,4 ) and dsmt.shop_category_id = mic.shop_category_id then a.detail_value_in_tax * coalesce(b.ratio, 100) / 100 else 0 end) as detail_value_in_tax");
            sql.append("     ,(case when a.product_division in ( 2,4 ) and dsmt.shop_category_id = mic.shop_category_id then a.detail_value_no_tax * coalesce(b.ratio, 100) / 100 else 0 end) as detail_value_no_tax");
            sql.append("     ,(case when a.product_division in ( 2,4 ) and dsmt.shop_category_id = mic.shop_category_id then a.discount_detail_value_in_tax * coalesce(b.ratio, 100) / 100 else 0 end) as discount_detail_value_in_tax");
            sql.append("     ,(case when a.product_division in ( 2,4 ) and dsmt.shop_category_id = mic.shop_category_id then a.discount_detail_value_no_tax * coalesce(b.ratio, 100) / 100 else 0 end) as discount_detail_value_no_tax");
            sql.append("     ,(case when a.product_division in ( 2,4 ) and dsmt.shop_category_id = mic.shop_category_id then a.account_setting_value * coalesce(b.ratio, 100) / 100 else 0 end) as account_setting_value");
        }else {
            sql.append("     ,(a.detail_value_in_tax * coalesce(b.ratio, 100) / 100) as detail_value_in_tax");
            sql.append("     ,(a.detail_value_no_tax * coalesce(b.ratio, 100) / 100) as detail_value_no_tax");
            sql.append("     ,(a.discount_detail_value_in_tax * coalesce(b.ratio, 100) / 100) as discount_detail_value_in_tax");
            sql.append("     ,(a.discount_detail_value_no_tax * coalesce(b.ratio, 100) / 100) as discount_detail_value_no_tax");
            sql.append("     ,(a.account_setting_value * coalesce(b.ratio, 100) / 100) as account_setting_value");
        }
        sql.append(" from");
        sql.append("     view_data_sales_detail_valid a");
        sql.append("         left join data_sales_detail_proportionally b");
        sql.append("         using(shop_id, slip_no, slip_detail_no)");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append("     inner join data_sales_detail dsd1 using(shop_id, slip_no ,product_id,slip_detail_no)");
            sql.append("        inner JOIN data_sales_mainstaff dsmt ON dsmt.shop_id = a.shop_id AND dsmt.slip_no = a.slip_no ");
            sql.append("        and dsmt.shop_category_id in (" + paramBean.getCategoryIDList() + ") ");
            sql.append("     INNER JOIN mst_item mi ON a.product_id = mi.item_id ");
            sql.append("     AND a.product_division IN(2,4) ");
            sql.append("     INNER JOIN mst_item_class mic ON mic.item_class_id = mi.item_class_id ");
        }
        //IVS_LVTu end edit 2015/06/26 Bug #38421

        return sql.toString();
    }
    //IVS_LVTu end add 2015/06/16 Bug #37388

    /**
     * @param paramBean
     * @return 来店サイクル分析処理する。
     * @throws Exception
     */
    //IVS start add 来店サイクル分析処理する。20121127
    public boolean CircleAnalysis(ReportParameterBean paramBean) throws Exception {
        String startDate = String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetStartDateObj());
        String endDate = String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetEndDateObj());
        String startDate1 = String.format("%1$tY年%1$tm月", paramBean.getTargetStartDateObj());
        String endDate1 = String.format("%1$tY年%1$tm月", paramBean.getTargetEndDateObj());
        int startDate3 = Integer.parseInt(String.format("%1$tm", paramBean.getTargetStartDateObj()));
        int endDate3 = Integer.parseInt(String.format("%1$tm", paramBean.getTargetEndDateObj()));
        String yearStart = String.format("%1$tY", paramBean.getTargetStartDateObj());
        String yearEnd = String.format("%1$tY", paramBean.getTargetEndDateObj());

        ConnectionWrapper cw = SystemInfo.getConnection();
        String mainQuery = "";
        // Thanh start edit 2014/04/03
        mainQuery += " select ";
        mainQuery += " month_label as 月 \n";
        mainQuery += " , year_label as 年 \n";
        mainQuery += " , sum(case when datepart IS null then 1 else 0 end) as 新規 \n";
        mainQuery += " , sum(case when datepart <= 30 then 1 else 0 end) as １ヶ月再来 \n";
        mainQuery += " , sum(case when datepart BETWEEN 31 AND 60 then 1 else 0 end) as ２ヶ月再来 \n";
        mainQuery += " , sum(case when datepart BETWEEN 61 AND 90 then 1 else 0 end) as ３ヶ月再来 \n";
        mainQuery += " , sum(case when datepart BETWEEN 91 AND 120 then 1 else 0 end) as ４ヶ月再来 \n";
        mainQuery += " , sum(case when datepart BETWEEN 121 AND 150 then 1 else 0 end) as ５ヶ月再来 \n";
        mainQuery += " , sum(case when datepart BETWEEN 151 AND 180 then 1 else 0 end) as ６ヶ月再来 \n";
        mainQuery += " , sum(case when datepart > 180 then 1 else 0 end) as ７ヶ月再来 \n";
        mainQuery += " from \n";
        mainQuery += " ( \n";
        mainQuery += " select \n";
        mainQuery += " ds.slip_no, ds.customer_id, extract(month from sales_date) as month_label \n";
        mainQuery += " , extract(year from sales_date) as year_label \n";
        mainQuery += " , ds.shop_id \n";
        mainQuery += " ,date_part('day', sales_date - get_last_visit_date(ds.customer_id, sales_date)) as datepart \n";
        mainQuery += " from data_sales ds \n";
        mainQuery += " inner join data_sales_detail dsd using(shop_id,slip_no)  \n";
        mainQuery += " inner join mst_customer mc on mc.customer_id = ds.customer_id \n";
        mainQuery += " where ds.shop_id in (" + paramBean.getShopIDList() + ") \n";
        mainQuery += " and product_division = 1  and mc.customer_no <>'0' \n";
        mainQuery += " and ds.sales_date between '" + startDate + "' and '" + endDate + "' \n";
        mainQuery += " and ds.delete_date is null and sales_date is not null \n";
        mainQuery += " group by  ds.slip_no, ds.customer_id,month_label,year_label,ds.shop_id,sales_date order by slip_no  \n";
        mainQuery += " ) a \n";
        mainQuery += " group by month_label,year_label \n";
        mainQuery += "order by year_label, month_label";
        // Thanh end edit 2014/04/03

        ResultSetWrapper rs = cw.executeQuery(mainQuery.toString());

        JExcelApi jx = new JExcelApi("来店サイクル分析");
        jx.setTemplateFile("/reports/来店サイクル分析.xls");

        jx.setValue(2, 3, startDate1 + " 〜 " + endDate1);
        jx.setValue(2, 4, paramBean.getTargetName());
        jx.setValue(2, 6, paramBean.getTargetName());
        int i = 0;
        int colNum = 0;

        if (startDate3 != 1 && endDate3 != 12) {
            for (int j = startDate3; j <= 12; j++) {
                jx.setValue(2 + colNum, 29, String.valueOf(j) + "月");
                colNum++;
            }

            for (int j = 1; j <= endDate3; j++) {
                jx.setValue(2 + colNum, 29, String.valueOf(j) + "月");
                colNum++;
            }
        } else {
            for (int j = 1; j <= 12; j++) {
                jx.setValue(2 + colNum, 29, String.valueOf(j) + "月");
                colNum++;
            }
        }

        int count = 0;
        while (rs.next()) {
            count = 1;
            jx.setValue(2 + i, 30, rs.getInt("新規"));
            jx.setValue(2 + i, 31, rs.getInt("１ヶ月再来"));
            jx.setValue(2 + i, 32, rs.getInt("２ヶ月再来"));
            jx.setValue(2 + i, 33, rs.getInt("３ヶ月再来"));
            jx.setValue(2 + i, 34, rs.getInt("４ヶ月再来"));
            jx.setValue(2 + i, 35, rs.getInt("５ヶ月再来"));
            jx.setValue(2 + i, 36, rs.getInt("６ヶ月再来"));
            jx.setValue(2 + i, 37, rs.getInt("７ヶ月再来"));
            i++;
        }
        colNum = 0;
        if (startDate3 != 1 && endDate3 != 12) {
            for (int j = startDate3; j <= 12; j++) {
                jx.setValue(2 + colNum, 29, yearStart + "年" + String.valueOf(j) + "月");
                colNum++;
            }

            for (int j = 1; j <= endDate3; j++) {
                jx.setValue(2 + colNum, 29, yearEnd + "年" + String.valueOf(j) + "月");
                colNum++;
            }
        } else {
            for (int j = 1; j <= 12; j++) {
                jx.setValue(2 + colNum, 29, yearStart + "年" + String.valueOf(j) + "月");
                colNum++;
            }
        }
        if (count > 0) {
            jx.openWorkbook();
            return true;
        } else {
            return false;
        }
    }

    //IVS end add アクティブ顧客分析処理する。20121127
   /*　
     * @param paramBean
     * @return アクティブ顧客分析処理する。
     * @throws Exception 
     */
    //IVS start add アクティブ顧客分析処理する。20121127
    public boolean ActiveCustomerAnalytic(ReportParameterBean paramBean) throws Exception {
        //パーラーメーター処理
        String startDate = String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetStartDateObj());
        String endDate = String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetEndDateObj());
        String startDate1 = String.format("%1$tY年%1$tm月", paramBean.getTargetStartDateObj());
        String endDate1 = String.format("%1$tY年%1$tm月", paramBean.getTargetEndDateObj());
        String yearStart = String.format("%1$tY", paramBean.getTargetStartDateObj());
        String yearEnd = String.format("%1$tY", paramBean.getTargetEndDateObj());
        int monthStart = Integer.parseInt(String.format("%1$tm", paramBean.getTargetStartDateObj()));
        int monthEnd = Integer.parseInt(String.format("%1$tm", paramBean.getTargetEndDateObj()));

        int valid_customer_period_1 = 0;    // 要注意顧客設定期間１
        int valid_customer_period_2 = 0;    // 要注意顧客設定期間２
        int valid_customer_period_3 = 0;    // 危険顧客設定期間

        //DBから設定期間取得
        MstShopSetting mss = new MstShopSetting(true);
        valid_customer_period_1 = mss.getValidCustomerPeriod1();
        valid_customer_period_2 = mss.getValidCustomerPeriod2();
        valid_customer_period_3 = mss.getValidCustomerPeriod3();
        ConnectionWrapper cw = SystemInfo.getConnection();

        //アクティブ顧客、要注意顧客、危険顧客データ取得SQL
        String mainQuery = "";
        mainQuery += " select ";
        mainQuery += " month_label as 月 ";
        mainQuery += " , year_label as 年 ";
        mainQuery += " , sum(rep1) as アクティブ顧客 ";
        mainQuery += " , sum(rep2) as 要注意顧客	";
        mainQuery += " , sum(rep3) as 危険顧客 ";
        mainQuery += " from ";
        //ThuanNK start edit 20140314
        mainQuery += " (select distinct";
        mainQuery += " extract(month from sales_date) as month_label ";
        mainQuery += " , extract(year from sales_date) as year_label ";
        mainQuery += " , customer_id";
        mainQuery += " , ( ";
        mainQuery += " select ";
        mainQuery += " case when count(b.slip_no) > 0 then 1 else 0 end ";
        mainQuery += " from ";
        mainQuery += " data_sales b ";
        mainQuery += " where ";
        mainQuery += " b.delete_date is null ";
        mainQuery += " and b.shop_id = a.shop_id	 ";
        mainQuery += " and b.customer_id = a.customer_id ";
        mainQuery += " and b.sales_date > date_trunc('month', a.sales_date)-'" + valid_customer_period_1 + "month'::interval-'1day'::interval  ";
        mainQuery += " and b.sales_date <= date_trunc('month', a.sales_date)+'0month'::interval-'1day'::interval ";
        mainQuery += " ) as rep1 ";
        mainQuery += " ,  ( ";
        mainQuery += " select ";
        mainQuery += " case when count(b.slip_no) > 0 then 1 else 0 end ";
        mainQuery += " from ";
        mainQuery += " data_sales b ";
        mainQuery += " where ";
        mainQuery += " b.delete_date is null ";
        mainQuery += " and b.shop_id = a.shop_id ";
        mainQuery += " and b.customer_id = a.customer_id ";
        mainQuery += " and b.sales_date > date_trunc('month', a.sales_date)-'" + valid_customer_period_2 + "month'::interval-'1day'::interval ";
        mainQuery += " and b.sales_date <= date_trunc('month', a.sales_date)+'0month'::interval-'1day'::interval ";
        mainQuery += " and not exists ( ";
        mainQuery += " select * ";
        mainQuery += " from data_sales c ";
        mainQuery += " where c.delete_date is null ";
        mainQuery += " and c.shop_id = a.shop_id ";
        mainQuery += " and c.customer_id = a.customer_id ";
        mainQuery += " and c.sales_date > date_trunc('month', a.sales_date)-'" + valid_customer_period_1 + "month'::interval-'1day'::interval ";
        mainQuery += " and c.sales_date <= date_trunc('month', a.sales_date)+'0month'::interval-'1day'::interval ";
        mainQuery += " ) ";
        mainQuery += " ) as rep2 ";
        mainQuery += " ,  ( ";
        mainQuery += " select ";
        mainQuery += " case when count(b.slip_no) > 0 then 1 else 0 end ";
        //ThuanNK end edit 20140314
        mainQuery += " from ";
        mainQuery += " data_sales b ";
        mainQuery += " where ";
        mainQuery += " b.delete_date is null ";
        mainQuery += " and b.shop_id = a.shop_id ";
        mainQuery += " and b.customer_id = a.customer_id ";
        mainQuery += " and b.sales_date > date_trunc('month', a.sales_date)-'" + valid_customer_period_3 + "month'::interval-'1day'::interval ";
        mainQuery += " and b.sales_date <= date_trunc('month', a.sales_date)+'0month'::interval-'1day'::interval ";
        mainQuery += " and not exists ( ";
        mainQuery += " select * ";
        mainQuery += " from data_sales c ";
        mainQuery += " where c.delete_date is null ";
        mainQuery += " and c.shop_id = a.shop_id ";
        mainQuery += " and c.customer_id = a.customer_id ";
        mainQuery += " and c.sales_date > date_trunc('month', a.sales_date)-'" + valid_customer_period_2 + "month'::interval-'1day'::interval ";
        mainQuery += " and c.sales_date <= date_trunc('month', a.sales_date)+'0month'::interval-'1day'::interval ";
        mainQuery += " ) ";
        mainQuery += " ) as rep3 ";
        mainQuery += " from ";
        mainQuery += " data_sales a ";
        mainQuery += " where ";
        mainQuery += " shop_id in (" + paramBean.getShopIDList() + ") ";
        mainQuery += " and sales_date between '" + startDate + "' and '" + endDate + "' ";
        mainQuery += " and delete_date is null ";
        mainQuery += " ) tbl1 ";
        mainQuery += " group by year_label, month_label ";
        mainQuery += " order by year_label, month_label ";

        //技術客数、新規客数、新規再来客数データ取得SQL
        String subQuery2 = "";
        subQuery2 += " select ";
        subQuery2 += " month_label as 月 ";
        subQuery2 += " ,year_label as 年 ";
        subQuery2 += " ,sum(tech_item_num) as 技術客数 ";
        subQuery2 += " ,sum(new_num) as 新規客数 ";
        subQuery2 += " ,sum(fixed2) as 新規再来客数 ";
        // ThuanNK start edit 2014/03/17
        subQuery2 += " ,sum(tech_only_num) as TechOnlyNum ";
        subQuery2 += " ,sum(fixed) as fixed ";
        subQuery2 += " from ( ";
        subQuery2 += " select ";
        subQuery2 += " extract(month from ds.sales_date) as month_label ";
        subQuery2 += " , extract(year from ds.sales_date) as year_label ";
        subQuery2 += " ,count(case when dsd.tech_flg > 0 and mc.customer_no <> '0' and get_visit_count(ds.customer_id ,ds.shop_id ,ds.sales_date ) = 1  ";
        subQuery2 += " then dsd.slip_no else null end) as new_num ";
        subQuery2 += " ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and dsd.item_num + dsd.item_crame_num = 0) then 1 else 0 end)  as tech_only_num ";
        subQuery2 += " ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and dsd.item_num + dsd.item_crame_num > 0) ";
        subQuery2 += " then 1 else 0 end) as tech_item_num ";
        subQuery2 += " ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' ";
        subQuery2 += " and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) = 2) then 1 else 0 end)        as fixed2 ";
        subQuery2 += " ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' ";
        subQuery2 += " and get_visit_count(ds.customer_id, ds.shop_id, ds.sales_date) >= 2) then 1 else 0 end)        as fixed ";
        // ThuanNK end edit 2014/03/17
        subQuery2 += " from     view_data_sales_valid ds ";
        subQuery2 += " inner join ";
        subQuery2 += " ( ";
        subQuery2 += " select shop_id ";
        subQuery2 += " ,slip_no ";
        subQuery2 += " ,sum(case when product_division IN(1,3) then 1 else 0 end) as tech_flg  ";
        subQuery2 += " ,sum(case when product_division = 1 then 1 else 0 end) as tech_num ";
        subQuery2 += " ,sum(case when product_division = 3 then 1 else 0 end) as tech_crame_num ";
        subQuery2 += " ,sum(case when product_division = 2 then 1 else 0 end) as item_num ";
        subQuery2 += " ,sum(case when product_division = 4 then 1 else 0 end) as item_crame_num ";
        subQuery2 += " from view_data_sales_detail_valid  ";
        subQuery2 += " where  shop_id in (" + paramBean.getShopIDList() + ") ";
        subQuery2 += " and sales_date between '" + startDate + "' and '" + endDate + "' ";
        subQuery2 += " group by shop_id,slip_no) dsd on ds.shop_id = dsd.shop_id  and ds.slip_no = dsd.slip_no ";
        subQuery2 += " left join mst_customer mc ";
        subQuery2 += " using(customer_id) group by ds.sales_date ";
        subQuery2 += " ) t group by year_label, month_label ";
        ResultSetWrapper rs2 = cw.executeQuery(subQuery2.toString());

        //SQL実行
        ResultSetWrapper rs = cw.executeQuery(mainQuery.toString());

        //帳票のExcelを開く、データ挿入する
        JPOIApi jx = new JPOIApi("アクティブ顧客分析");
        jx.setTemplateFile("/reports/アクティブ顧客分析.xls");

        jx.setCellValue(2, 3, startDate1 + " 〜 " + endDate1);
        jx.setCellValue(2, 4, paramBean.getTargetName());

        int colNum = 0;

        int i = 0;

        if (monthStart != 1 && monthEnd != 12) {
            for (int k = monthStart; k <= 12; k++) {

                jx.setCellValue(2 + colNum, 29, String.valueOf(k) + "月");

                colNum++;
            }

            for (int k = 1; k <= monthEnd; k++) {
                jx.setCellValue(2 + colNum, 29, String.valueOf(k) + "月");

                colNum++;
            }
        }

        int count = 0;
        //Excelにデータ挿入する
        while (rs.next()) {
            count = 1;
            jx.setCellValue(2 + i, 29, rs.getString("月") + "月");
            jx.setCellValue(2 + i, 30, rs.getInt("アクティブ顧客"));
            jx.setCellValue(2 + i, 31, rs.getInt("要注意顧客"));
            jx.setCellValue(2 + i, 32, rs.getInt("危険顧客"));
            i++;
        }

        String nameColFormat1 = "";
        int mon;
        while (rs2.next()) {
            count = 2;
            mon = rs2.getInt("月");
            nameColFormat1 = String.valueOf(mon) + "月";
            for (int k = 2; k <= 13; k++) {

                String nameColExcel = jx.getCellValue(k, 29);
                if (nameColFormat1.equals(nameColExcel)) {
                    //Excelにデータ挿入する
                    // ThuanNK start edit 2014/03/17
                    jx.setCellValue(k, 34, rs2.getInt("技術客数") + rs2.getInt("TechOnlyNum"));
                    jx.setCellValue(k, 35, rs2.getInt("新規客数"));
                    jx.setCellValue(k, 36, rs2.getInt("新規再来客数"));
                    jx.setCellValue(k, 37, rs2.getInt("fixed"));
                    // ThuanNK end edit 2014/03/17
                }
            }

        }
        i = 0;

        //失客顧客数データ取得SQL
        String subQuery1 = "";
        if (monthStart != 1 && monthEnd != 12) {

            subQuery1 += " select ";
            subQuery1 += " count_in_month as 月 ";
            subQuery1 += " , count(customer_id) as 失客顧客数";
            subQuery1 += " from ( ";
            subQuery1 += " select ";
            subQuery1 += " customer_id ";
            subQuery1 += " , next_one_year_from_last_come ";
            subQuery1 += " , case ";
            subQuery1 += " when extract(year from next_one_year_from_last_come) < " + yearStart + " or extract(year from next_one_year_from_last_come) > " + yearStart + " then 0 ";
            subQuery1 += " else extract(month from next_one_year_from_last_come) end as count_in_month ";
            subQuery1 += " from ";
            subQuery1 += " ( ";
            subQuery1 += " select ";
            subQuery1 += " customer_id ";
            subQuery1 += " , max(sales_date) + interval '" + valid_customer_period_3 + "' as next_one_year_from_last_come ";
            subQuery1 += " from data_sales ";
            subQuery1 += " where delete_date is null ";
            subQuery1 += " group by customer_id ";
            subQuery1 += " )tbl1 ";
            subQuery1 += " ) tbl2 ";
            subQuery1 += " where (count_in_month >=" + monthStart + " and count_in_month <= 12) ";
            subQuery1 += " group by count_in_month ";
            subQuery1 += " order by count_in_month ";

            //SQL実行
            ResultSetWrapper rs3 = cw.executeQuery(subQuery1.toString());
            while (rs3.next()) {
                count = 3;
                int mont = rs3.getInt("月");
                nameColFormat1 = String.valueOf(mont) + "月";
                for (int k = 2; k <= 13; k++) {
                    String nameColExcel = jx.getCellValue(k, 29);
                    if (nameColFormat1.equals(nameColExcel)) {
                        //Excelにデータ挿入する
                        jx.setCellValue(k, 33, rs3.getInt("失客顧客数"));
                    }
                }
            }

            subQuery1 = "";
            subQuery1 += " select ";
            subQuery1 += " count_in_month as 月 ";
            subQuery1 += " , count(customer_id) as 失客顧客数";
            subQuery1 += " from ( ";
            subQuery1 += " select ";
            subQuery1 += " customer_id ";
            subQuery1 += " , next_one_year_from_last_come ";
            subQuery1 += " , case ";
            subQuery1 += " when extract(year from next_one_year_from_last_come) < " + yearEnd + " or extract(year from next_one_year_from_last_come) > " + yearEnd + " then 0 ";
            subQuery1 += " else extract(month from next_one_year_from_last_come) end as count_in_month ";
            subQuery1 += " from ";
            subQuery1 += " ( ";
            subQuery1 += " select ";
            subQuery1 += " customer_id ";
            subQuery1 += " , max(sales_date) + interval '" + valid_customer_period_3 + "' as next_one_year_from_last_come ";
            subQuery1 += " from data_sales ";
            subQuery1 += " where delete_date is null ";
            subQuery1 += " group by customer_id ";
            subQuery1 += " )tbl1 ";
            subQuery1 += " ) tbl2 ";
            subQuery1 += " where (count_in_month >= 1 and count_in_month <=" + monthEnd + " )";
            subQuery1 += " group by count_in_month ";
            subQuery1 += " order by count_in_month ";

            //SQL実行
            ResultSetWrapper rs4 = cw.executeQuery(subQuery1.toString());
            while (rs4.next()) {
                count = 3;
                int mont = rs4.getInt("月");
                nameColFormat1 = String.valueOf(mont) + "月";
                for (int k = 2; k <= 13; k++) {
                    String nameColExcel = jx.getCellValue(k, 29);
                    if (nameColFormat1.equals(nameColExcel)) {
                        //Excelにデータ挿入する
                        jx.setCellValue(k, 33, rs4.getInt("失客顧客数"));
                    }
                }
            }
            subQuery1 = "";

        } else {
            subQuery1 += " select ";
            subQuery1 += " count_in_month as 月 ";
            subQuery1 += " , count(customer_id) as 失客顧客数";
            subQuery1 += " from ( ";
            subQuery1 += " select ";
            subQuery1 += " customer_id ";
            subQuery1 += " , next_one_year_from_last_come ";
            subQuery1 += " , case ";
            subQuery1 += " when extract(year from next_one_year_from_last_come) < " + yearStart + " or extract(year from next_one_year_from_last_come) > " + yearEnd + " then 0 ";
            subQuery1 += " else extract(month from next_one_year_from_last_come) end as count_in_month ";
            subQuery1 += " from ";
            subQuery1 += " ( ";
            // ThuanNK start edit 20140317
            subQuery1 += " select ";
            subQuery1 += " A.customer_id ";
            subQuery1 += " , max(A.sales_date) + interval '" + valid_customer_period_3 + "' as next_one_year_from_last_come ";
            subQuery1 += " from data_sales A";
            subQuery1 += " where A.delete_date is null ";
            subQuery1 += " and A.sales_date between date_trunc('month', A.sales_date) ";
            subQuery1 += " and date_trunc('month', A.sales_date)+'1month'::interval-'1day'::interval ";
            subQuery1 += " and exists (select 1 from data_sales where customer_id = A.customer_id ";
            subQuery1 += " and sales_date < date_trunc('month', A.sales_date)-'11month'::interval-'1day'::interval) ";
            subQuery1 += " and not exists (select 1 from data_sales where customer_id = A.customer_id ";
            subQuery1 += " and sales_date between date_trunc('month', A.sales_date)-'11month'::interval ";
            subQuery1 += " and date_trunc('month', A.sales_date)-'1day'::interval) ";
            subQuery1 += " group by A.customer_id ";
            // ThuanNK end edit 20140317
            subQuery1 += " )tbl1 ";
            subQuery1 += " ) tbl2 ";
            subQuery1 += " where count_in_month > 0 ";
            subQuery1 += " group by count_in_month ";
            subQuery1 += " order by count_in_month ";

            //SQL実行
            ResultSetWrapper rs3 = cw.executeQuery(subQuery1.toString());

            while (rs3.next()) {
                count = 3;
                int mont = rs3.getInt("月");
                nameColFormat1 = String.valueOf(mont) + "月";
                for (int k = 2; k <= 13; k++) {
                    String nameColExcel = jx.getCellValue(k, 29);
                    if (nameColFormat1.equals(nameColExcel)) {
                        //Excelにデータ挿入する
                        jx.setCellValue(k, 33, rs3.getInt("失客顧客数"));
                    }
                }
            }
            subQuery1 = "";

        }

        colNum = 0;
        if (monthStart != 1 && monthEnd != 12) {
            for (int k = monthStart; k <= 12; k++) {

                jx.setCellValue(2 + colNum, 29, yearStart + "年" + String.valueOf(k) + "月");

                colNum++;
            }

            for (int k = 1; k <= monthEnd; k++) {
                jx.setCellValue(2 + colNum, 29, yearEnd + "年" + String.valueOf(k) + "月");

                colNum++;
            }
        } else {
            for (int k = 1; k <= 12; k++) {
                jx.setCellValue(2 + colNum, 29, yearStart + "年" + String.valueOf(k) + "月");
                colNum++;
            }
        }

        jx.setFormularActive();

        if (count > 0) {
            jx.openWorkbook();
            return true;
        } else {
            return false;
        }
    }
    //IVS end add アクティブ顧客分析処理する。20121127
    
    //IVS_LVTu start add 2014/09/03 MASHU_発注書作成(納品書出力)
    /**
     * Export data to file excel.
     * @param paramBean
     * @throws Exception 
     */
    public void outSlipReport(ReportParameterBean paramBean) throws Exception {
        ConnectionWrapper cw = SystemInfo.getConnection();
        ResultSetWrapper rs1 = cw.executeQuery(selectDataSlipOrder(paramBean));
        ResultSetWrapper rs2 = cw.executeQuery(selectDataSlipOrderDetail(paramBean));
        
        JExcelApi jx = new JExcelApi("納品書");
        jx.setTemplateFile("/reports/納品書.xls");
        
        int row = 11;
        rs2.last();
        jx.insertRow(row, rs2.getRow() - 1);
        rs2.beforeFirst();
        
        while (rs1.next()) {
            jx.setValue(3 , 3, rs1.getInt("shop_id"));
            jx.setValue(3 , 4, rs1.getString("shop_name"));
            jx.setValue(3 , 6, rs1.getInt("supplier_id"));
            jx.setValue(3 , 7, rs1.getString("supplier_name"));
        }
        
        int count = 11;
        while (rs2.next()) {
            jx.setValue(2 , count, rs2.getString("item_no"));
            jx.setValue(3 , count, rs2.getString("item_name"));
            jx.setValue(4 , count, rs2.getInt("tenpai_num"));
            jx.setValue(5 , count, rs2.getInt("gyoumu_num"));
            jx.setValue(7 , count, rs2.getInt("cost_price"));
            count ++;
        }
        jx.openWorkbook();
    }
    /**
     * Get String SQL.
     * @param paramBean
     * @return strSQL.
     */
    public String selectDataSlipOrder(ReportParameterBean paramBean)
    {
        String strSQL = "";
        strSQL += " select \n";
        strSQL += " ms.shop_id, ms.shop_name,supplier_id,supplier_name \n";
        strSQL += " from data_slip_order dso \n";
        strSQL += " inner join mst_shop ms using(shop_id) \n";
        strSQL += " inner join mst_supplier mssup using(supplier_id) \n";
        strSQL += " Where dso.delete_date is null \n";
        strSQL += " and dso.shop_id =  "+ SQLUtil.convertForSQL(paramBean.getShopId()) + "\n";
        strSQL += " and dso.slip_no = "+ SQLUtil.convertForSQL(paramBean.getSlipNo()) + "\n";
        
        return strSQL;
    }
    /**
     * Get String SQL.
     * @param paramBean
     * @return strSQL.
     */
    public String selectDataSlipOrderDetail(ReportParameterBean paramBean)
    {
        String strSQL = "";
        strSQL += " select kq.item_no, kq.item_name, kq.tenpai_num, kq.gyoumu_num, kq.cost_price \n";
        strSQL += " from mst_item mi, mst_item_class mic, \n";
        strSQL += " (select msi.display_seq, msi.item_id, \n";
        strSQL += " msi.item_no,msi.item_name, \n";
        strSQL += " sum((case when dsod.item_use_division = 1 then dsod.order_num else 0 end)) as tenpai_num, \n";
        strSQL += " sum((case when dsod.item_use_division = 2 then dsod.order_num else 0 end)) as gyoumu_num, \n";
        strSQL += " dsod.cost_price \n";
        strSQL += " from data_slip_order dso \n";
        strSQL += " inner join data_slip_order_detail dsod using(shop_id,slip_no) \n";
        strSQL += " inner join mst_item msi using(item_id) \n";
        strSQL += " where dso.delete_date is null \n";
        strSQL += " and dsod.delete_date is null \n";
        strSQL += " and dso.shop_id = "+ SQLUtil.convertForSQL(paramBean.getShopId()) + "\n";
        strSQL += " and dso.slip_no = "+ SQLUtil.convertForSQL(paramBean.getSlipNo()) + "\n";
        strSQL += " group by msi.item_no,msi.item_name,dsod.cost_price, msi.display_seq, msi.item_id) as kq \n";
        strSQL += " where kq.item_id = mi.item_id and mi.item_class_id = mic.item_class_id \n";
        strSQL += " order by mic.display_seq, mi.display_seq, mi.item_id \n";
        
        return strSQL;
    }
    //IVS_LVTu end add 2014/09/03 MASHU_発注書作成(納品書出力)
    //IVS_LVTu start add 2015/06/19 Bug #37685
    private List<MstStaff> getStaff(ConnectionWrapper cw, ReportParameterBean paramBean, boolean flag) throws SQLException {
        StringBuilder sql = new StringBuilder();
       
        sql.append("select distinct msts.staff_id, coalesce(msts.staff_name1,'') as staff_name1, coalesce(msts.staff_name2,'') as staff_name2,msts.staff_no");
        if(!flag) {
            sql.append(" , ds.shop_id ");
        }
        sql.append(" from data_sales ds ");
        //flag = true then data_contract else data_contract_digestion
        if ( flag ) {
            sql.append(" inner join data_contract ");
        }
        else {
            sql.append(" inner join data_contract_digestion ");
        }
        sql.append(" dc on dc.slip_no = ds.slip_no and dc.shop_id = ds.shop_id ");
         if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
              sql.append(" inner join data_sales_mainstaff dsm  on dsm.slip_no = ds.slip_no and dsm.shop_id = ds.shop_id ");
         }
        
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" inner join data_sales_detail dsd on ds.shop_id = dsd.shop_id and ds.slip_no = dsd.slip_no and dsd.delete_date is null \n");

            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            if ( flag ) {
                sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5) \n");
            }
            else {
                sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (6) \n");
            }
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");

        }
        
        sql.append(" left join mst_staff msts");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
           sql.append(" on dsm.staff_id = msts.staff_id "); 
        }else {
            sql.append(" on dc.staff_id = msts.staff_id ");
        }
        sql.append(" where ds.sales_date BETWEEN '").append(paramBean.getTargetStartDate().toString()).append("' AND '")
                                                           .append(paramBean.getTargetEndDate().toString()).append("'");
        sql.append(" and ds.delete_date IS NULL ");
        if ( flag ) {
            sql.append(" and msts.delete_date IS NULL ");
        }
         sql.append(" AND ds.shop_id IN (").append(paramBean.getShopIDList()).append(")");
        if ((paramBean.getCategoryIDList()!=null && !paramBean.getCategoryIDList().equals(""))) {
            sql.append(" and \n");
            sql.append(" (	\n");
            sql.append(" exists(\n");
            sql.append("         select 1 from\n");
            sql.append("         data_sales_detail dsd1\n");
            if ( flag ) {
                sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (5) \n");
            }
            else {
                sql.append("         inner join mst_course mc on dsd1.product_id = mc.course_id and dsd.product_division = dsd1.product_division and dsd1.product_division in (6) \n");
            }
            sql.append("         inner join mst_course_class mcc on mcc.course_class_id = mc.course_class_id\n");
            sql.append("         where dsd1.slip_no = dsd.slip_no and dsd1.shop_id = dsd.shop_id and dsd1.slip_detail_no = dsd.slip_detail_no\n");
            sql.append("         and mcc.shop_category_id in( " + paramBean.getCategoryIDList() + ")\n");
            sql.append("         )\n");
            sql.append(" )\n");
        }
        ResultSetWrapper rs = cw.executeQuery(sql.toString());

        List<MstStaff> staffList = new ArrayList<MstStaff>();
        while (rs.next()) {
            MstStaff staff = new MstStaff();
            if(!flag) {
                staff.setShopID(rs.getInt("shop_id"));
            }
            staff.setStaffID(rs.getInt("staff_id"));
            staff.setStaffNo(rs.getString("staff_no"));
            staff.setStaffName(new String[]{rs.getString("staff_name1"), rs.getString("staff_name2")});

            if (staff.getStaffID() != 0) {
                staffList.add(staff);
            }
        }

        return staffList;
    }
    //IVS_LVTu end add 2015/06/19 Bug #37685
    
    public String getSQLSalesReport(ReportParameterBean paramBean , boolean isDailyReport) {

        String startDate = String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetStartDateObj());
        String endDate = String.format("%1$tY/%1$tm/%1$td", paramBean.getTargetEndDateObj());
        
        String valueString = "";
        String valueString2 ="";
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            valueString = "discount_detail_value_no_tax";
            valueString2 = "  ceil(sum(dcd.product_num*dc.product_value/dc.product_num) / (1.0 + get_tax_rate(vdsdv.sales_date))) ";
        } else {
            // 税込み
            valueString = "discount_detail_value_in_tax";
            valueString2=" sum(dcd.product_num*dc.product_value/dc.product_num) ";
        }
        
        StringBuilder sql = new StringBuilder(1000);
        sql.append(" select");
        sql.append("      t.*");
        sql.append("     ,coalesce(t.sales_date, last_year.sales_date) as sales_date_with_last_year");
        sql.append("     ,last_year.tech_value_in_crame as last_year_tech_value_in_crame");
        sql.append("     ,last_year.item_value_in_crame as last_year_item_value_in_crame");
        sql.append("     ,last_year.discount_value as last_year_discount_value");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append("     ,(t.total_value + t.contract_value) as  total_value2");
        }
        sql.append(" from (");
        sql.append(" select");
        sql.append("      sales_date");
        sql.append("     ,sum(total_num) as total_num");
        sql.append("     ,sum(total_value) as total_value");
        sql.append("     ,sum(member_num) as member_num");
        sql.append("     ,sum(member_value) as member_value");
        sql.append("     ,sum(new_num) as new_num");
        sql.append("     ,sum(not_member_num) as not_member_num");
        sql.append("     ,sum(new_value) as new_value");
        sql.append("     ,sum(not_member_value) as not_member_value");
        sql.append("     ,sum(tech_value) as tech_value");
        sql.append("     ,sum(tech_value_in_crame) as tech_value_in_crame");
        sql.append("     ,sum(charge_all_tech_value) as charge_all_tech_value");
        sql.append("     ,sum(charge_tech_value) as charge_tech_value");
        sql.append("     ,sum(menu_charge_all_tech_value) as menu_charge_all_tech_value");
        sql.append("     ,sum(menu_charge_tech_value) as menu_charge_tech_value");
        sql.append("     ,sum(item_value) as item_value");
        sql.append("     ,sum(item_value_in_crame) as item_value_in_crame");
        sql.append("     ,sum(charge_all_item_value) as charge_all_item_value");
        sql.append("     ,sum(charge_item_value) as charge_item_value");
        sql.append("     ,sum(menu_charge_all_item_value) as menu_charge_all_item_value");
        sql.append("     ,sum(menu_charge_item_value) as menu_charge_item_value");
        sql.append("     ,0 as discount_value");
        sql.append("     ,sum(tech_item_num) as tech_item_num");
        sql.append("     ,sum(item_only_num) as item_only_num");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append("     ,Coalesce(( ");
            sql.append("     		SELECT ");
            sql.append("     			   SUM (c) AS total_contract_value ");
            sql.append("     		FROM ");
            sql.append("     		  (SELECT ds.product_id, ");
            sql.append("     			  count(ds.product_id) AS total_contract_num, ");

            sql.append("     			(cast(SUM(ds.product_value) as double precision)/cast((1.0 + get_tax_rate(max(ds.sales_date)))as double precision)) as c ");

            sql.append("     		   FROM ");
            sql.append("     		     (SELECT DISTINCT ds.* ");
            sql.append("     		      FROM view_data_sales_detail_valid ds ");
            sql.append("     		      INNER JOIN data_contract dc ON ds.shop_id = dc.shop_id ");
            sql.append("     		      AND ds.slip_no = dc.slip_no ");
            sql.append("     		      AND ds.product_id = dc.product_id ");
            sql.append("     		      WHERE  ds.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("     			AND ds.sales_date = t.sales_date ");
            sql.append("     			AND ds.product_division = 5) ds ");
            sql.append("     		   GROUP BY ds.product_id, ");
            sql.append("     		   ds.sales_date ");
            sql.append("     		   ORDER BY ds.sales_date ,ds.product_id ");
            sql.append("     		   ) a ");

            sql.append("            ),0) as contract_value ");
        }
        if(paramBean.isCourseFlag() == true) {
            sql.append("     , SUM ( course_num ) AS course_num ");
            sql.append("     , SUM ( course_value ) AS course_value ");
            sql.append("     , SUM ( course_num_new ) AS course_num_new ");
            sql.append("     , SUM ( course_value_new ) AS course_value_new ");
            sql.append("     , SUM ( course_digestion_num ) AS course_digestion_num ");
            sql.append("     , SUM ( course_digestion_value ) AS course_digestion_value ");
        }
        sql.append(" from");
        sql.append(" (");
        sql.append(" select");
        if (isDailyReport) {
            sql.append("  date_trunc('day', ds.sales_date) as sales_date");
        } else {
            sql.append("  date_trunc('month', case when date_part('day', ds.sales_date) > " + paramBean.getCutoffDay() + " then ds.sales_date + '1 months' else ds.sales_date end) as sales_date");
        }
		sql.append(" ,count(distinct case when dsms.staff_id = " + paramBean.getStaffId().toString() + " then dsd.slip_no else null end) as total_num");
		sql.append(" ,sum(case when dsms.staff_id = " + paramBean.getStaffId().toString() + " then dsd.detail_value else 0 end) as total_value");
		sql.append(" ,count(case when dsd.tech_flg > 0 and mc.customer_no <> '0' and ds.staff_id = " + paramBean.getStaffId().toString() + " then dsd.slip_no else null end) as member_num");
		sql.append(" ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no <> '0' and dsms.staff_id = " + paramBean.getStaffId().toString() + ") then dsd.tech_value_in_crame else 0 end) as member_value");
		sql.append(" ,count(case when dsd.tech_flg > 0 and mc.customer_no <> '0' and ");
		sql.append(" get_visit_count_with_category(ds.customer_id ,ds.shop_id ,ds.sales_date , '{" + paramBean.getCategoryIDList()+"}')"); 
		sql.append(" = 1 and dsms.staff_id = " + paramBean.getStaffId().toString() + " then dsd.slip_no else null end) as new_num");
		sql.append(" ,count(case when dsd.tech_flg > 0 and mc.customer_no = '0' and dsms.staff_id = " + paramBean.getStaffId().toString() + " then dsd.slip_no else null end) as not_member_num");
        sql.append("     ,sum(case when dsd.tech_flg > 0 and mc.customer_no <> '0' and ");
		sql.append(" get_visit_count_with_category(ds.customer_id ,ds.shop_id ,ds.sales_date ,'{" +paramBean.getCategoryIDList()+ "}')"); 
        sql.append(" = 1 then dsd.tech_value else 0 end) as new_value");
        sql.append("     ,sum(case when (dsd.tech_num + dsd.tech_crame_num > 0 and mc.customer_no = '0') then dsd.tech_value_in_crame else 0 end) as not_member_value");
        sql.append("     ,sum(dsd.tech_value) as tech_value");
        sql.append("     ,sum(dsd.tech_value_in_crame) as tech_value_in_crame");

        sql.append("     ,sum(dsd.charge_all_tech_value) as charge_all_tech_value");
        sql.append("     ,sum(dsd.charge_tech_value) as charge_tech_value");
        sql.append("     ,sum(dsd.menu_charge_all_tech_value) as menu_charge_all_tech_value");
        sql.append("     ,sum(dsd.menu_charge_tech_value) as menu_charge_tech_value");

        sql.append("     ,sum(dsd.item_value) as item_value");
        sql.append("     ,sum(dsd.item_value_in_crame) as item_value_in_crame");

        sql.append("     ,sum(dsd.charge_all_item_value) as charge_all_item_value");
        sql.append("     ,sum(dsd.charge_item_value) as charge_item_value");
        sql.append("     ,sum(dsd.menu_charge_all_item_value) as menu_charge_all_item_value");
        sql.append("     ,sum(dsd.menu_charge_item_value) as menu_charge_item_value");

        // 全体割引
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            // 税抜き
            sql.append(" ,sum(ds.discount_value_no_tax) as discount_value");
        } else {
            // 税込み
            sql.append(" ,sum(ds.discount_value) as discount_value");
        }
		sql.append("     ,sum (case when (dsd1.tech_num + dsd1.tech_crame_num > 0 and dsd1.item_num + dsd1.item_crame_num > 0 ) then 1 else 0 end) as tech_item_num");						
		// 商品のみ客
		sql.append("     ,sum (case when (dsd1.item_num + dsd1.item_crame_num > 0 and dsd1.tech_num + dsd1.tech_crame_num = 0 ) then 1 else 0 end) as item_only_num");
        if(paramBean.isCourseFlag() == true) {            
			sql.append("     , SUM ( CASE WHEN dsd1.course_num > 1 THEN 1 ELSE dsd1.course_num END) AS course_num ");
                        sql.append("     , SUM ( CASE WHEN dsd1.course_num_new > 1 THEN 1 ELSE dsd1.course_num_new END) AS course_num_new ");
			sql.append("     , SUM ( dsd.course_value ) AS course_value ");
                        sql.append("     , SUM ( dsd.course_value_new ) AS course_value_new ");
			sql.append("     ,SUM (CASE WHEN dsd1.course_digestion_num > 1 THEN 1 ELSE dsd1.course_digestion_num END ) AS course_digestion_num ");
			sql.append("     , SUM ( dsd.course_digestion_value ) AS course_digestion_value ");
        }

        sql.append(" from");
        sql.append("     view_data_sales_valid ds");
        sql.append("     INNER JOIN data_sales_mainstaff dsms using(shop_id,slip_no) ");
        sql.append("         inner join");
        sql.append("             (");
        
        if (!paramBean.getCategoryIDList().equals("")) {        
            sql.append(" select dsd.shop_id, dsd.slip_no");
            sql.append(" , dsd.shop_category_id");
            sql.append(" , sum(dsd.detail_value) as detail_value");
            sql.append(" , sum(dsd.tech_value) as tech_value");
            sql.append(" , sum(dsd.tech_value_in_crame) as tech_value_in_crame");
            sql.append(" , sum(dsd.item_value) as item_value");
            sql.append(" , sum(dsd.item_value_in_crame) as item_value_in_crame");
            sql.append(" , sum(dsd.charge_all_tech_value) as charge_all_tech_value");
            sql.append(" , sum(dsd.charge_tech_value) as charge_tech_value");
            sql.append(" , sum(dsd.menu_charge_all_tech_value) as menu_charge_all_tech_value");
            sql.append(" , sum(dsd.menu_charge_tech_value) as menu_charge_tech_value");
            sql.append(" , sum(dsd.charge_all_item_value) as charge_all_item_value");
            sql.append(" , sum(dsd.charge_item_value) as charge_item_value");
            sql.append(" , sum(dsd.menu_charge_all_item_value) as menu_charge_all_item_value");
            sql.append(" , sum(dsd.menu_charge_item_value) as menu_charge_item_value");
            sql.append(" , sum(dsd.tech_flg) as tech_flg");
            sql.append(" , sum(dsd.tech_num) as tech_num");
            sql.append(" , sum(dsd.tech_crame_num) as tech_crame_num");
            sql.append(" , sum(dsd.item_num) as item_num");
            sql.append(" , sum(dsd.item_crame_num) as item_crame_num");
            //IVS_LVTu start add 2015/07/09 Bug #39505
            if(paramBean.isCourseFlag() == true) {
                sql.append("     , SUM ( dsd.course_num ) AS course_num ");
                sql.append("     , SUM ( dsd.course_value ) AS course_value ");
                sql.append("     , SUM ( dsd.course_num_new ) AS course_num_new ");
                sql.append("     , SUM ( dsd.course_value_new ) AS course_value_new ");
                sql.append("     , SUM ( dsd.course_digestion_num ) AS course_digestion_num ");
                sql.append("     , SUM ( dsd.course_digestion_value ) AS course_digestion_value ");
            }
            //IVS_LVTu start add 2015/07/09 Bug #39505
            sql.append("  from (");
        }
        //IVS_TTMLoan end add 2014/08/27 Mashu_売上推移表

        sql.append("                select	");																																			
        sql.append("                 shop_id");
        sql.append("                 ,slip_no ");
        sql.append("                 ,dsms.shop_category_id");
        if (paramBean.getTaxType() == ReportParameterBean.TAX_TYPE_BLANK) {
            sql.append("                     ,sum(case when product_division IN(1,2,3,4) then " + valueString + " else 0 end) as detail_value");
        } else {
            sql.append("                     ,sum(case when product_division IN(1,2,3,4,5) then " + valueString + " else 0 end) as detail_value");
        }
        sql.append("                 ,sum(case when product_division IN(1) and dsms.staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as tech_value");
        sql.append("                 ,sum(case when product_division IN(1,3) and dsms.staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as tech_value_in_crame");
        sql.append("                 ,sum(case when product_division IN(2) and dsms.staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as item_value");
        sql.append("                 ,sum(case when product_division IN(2,4) and dsms.staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as item_value_in_crame");
        sql.append("                 ,sum(case when product_division IN(1) and dsms.staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as charge_all_tech_value");
        sql.append("                 ,sum(case when product_division IN(1,3) and dsms.staff_id = " + paramBean.getStaffId().toString() + " and dsms.designated_flag = true then " + valueString + " else 0 end) as charge_tech_value");
        sql.append("                 ,sum(case when product_division IN(1) and detail_staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as menu_charge_all_tech_value");
        sql.append("                 ,sum(case when product_division IN(1,3) and detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = true then " + valueString + " else 0 end) as menu_charge_tech_value");
        sql.append("                 ,sum(case when product_division IN(2) and dsms.staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as charge_all_item_value");
        sql.append("                 ,sum(case when product_division IN(2) and (");
        sql.append("                                                                (dsms.staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = false)");
        sql.append("                                                             or (detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_designated_flag = true)");
        sql.append("                                                           )");
        sql.append("                        then " + valueString + " else 0 end) as charge_item_value");

        sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as menu_charge_all_item_value");
        sql.append("                 ,sum(case when product_division IN(2) and detail_staff_id = " + paramBean.getStaffId().toString() + " and detail_staff_id = dsms.staff_id then " + valueString + " else 0 end) as menu_charge_item_value");
        sql.append("                 ,sum(case when product_division IN(5) and dsms.staff_id = " + paramBean.getStaffId().toString() + " then " + valueString + " else 0 end) as course_value");
        sql.append("                 ,sum(case when product_division IN(5) and dsms.staff_id = " + paramBean.getStaffId().toString() + "   and vdsdv.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
        sql.append("                 inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
        sql.append("                 where ds.delete_date is null\n");
        sql.append("                 and dsd.delete_date is null\n");
        sql.append("                 and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append("                 and dsd.product_division = 5 \n");
        sql.append("                 and ds.customer_id = vdsdv.customer_id\n");
        sql.append("                 and ds.shop_id = vdsdv.shop_id\n");
        sql.append("                 and (ds.sales_date <= '" + endDate + "' )\n");
        sql.append("                 )then " + valueString + " else 0 end) as course_value_new");

        sql.append("                  ,SUM(CASE WHEN product_division IN (6) and dsms.staff_id = " + paramBean.getStaffId().toString() + " THEN ");
        sql.append("                      (SELECT " + valueString2 + " ");
        sql.append("                      FROM data_contract_digestion dcd ");
        sql.append("                      INNER JOIN data_contract dc ON dc.shop_id = dcd.contract_shop_id ");
        sql.append("                      AND dc.contract_no= dcd.contract_no ");
        sql.append("                      AND dc.contract_detail_no = dcd.contract_detail_no ");
        sql.append("                      AND vdsdv.product_id = dc.product_id ");
        sql.append("                      WHERE dcd.shop_id = vdsdv.shop_id ");
        sql.append("                      AND dcd.slip_no = vdsdv.slip_no) ELSE 0 END) AS course_digestion_value " );

        sql.append("                     ,sum(case when product_division IN(1,3) then 1 else 0 end) as tech_flg");

        sql.append("                     ,sum(case when product_division = 1 then 1 else 0 end) as tech_num");
        sql.append("                     ,sum(case when product_division = 3 then 1 else 0 end) as tech_crame_num");
        sql.append("                     ,sum(case when product_division = 2 then 1 else 0 end) as item_num");
        sql.append("                     ,sum(case when product_division = 4 then 1 else 0 end) as item_crame_num");
        sql.append("                     ,sum(case when product_division = 5  and dsms.staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_num");
        sql.append("                     ,sum(case when product_division = 5  and dsms.staff_id = " + paramBean.getStaffId().toString() + " and vdsdv.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
        sql.append("                      inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
        sql.append("                      where ds.delete_date is null\n");
        sql.append("                      and dsd.delete_date is null\n");
        sql.append("                      and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
        sql.append("                      and dsd.product_division = 5 \n");
        sql.append("                      and ds.customer_id = vdsdv.customer_id\n");
        sql.append("                      and ds.shop_id = vdsdv.shop_id\n");
        sql.append("                      and (ds.sales_date <= '" + endDate + "' )\n");
        sql.append("                      )  then 1 else 0 end) as course_num_new");
        sql.append("                     ,sum(case when product_division = 6  and dsms.staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_digestion_num");
        sql.append("                 from");
        sql.append("                     view_data_sales_detail_valid vdsdv");																																					
        sql.append("                     INNER JOIN data_sales_mainstaff dsms using(shop_id,slip_no) ");
        sql.append("             where	");																																						
        sql.append("                   shop_id in (" + paramBean.getShopIDList() + ")");																																						

        sql.append("            and sales_date between '" + startDate + "' and '" + endDate + "'");	
        sql.append("            and dsms.staff_id = " + paramBean.getStaffId().toString());
        sql.append("            AND dsms.shop_category_id IN("+ paramBean.getCategoryIDList() +") ");
        sql.append("            and dsms.staff_id = vdsdv.detail_staff_id ");
        sql.append("            AND (EXISTS ");
        sql.append("            (SELECT 1 ");
        sql.append("             FROM view_data_sales_detail_valid dsd1 ");
        sql.append("             INNER JOIN mst_technic mt ON dsd1.product_id = mt.technic_id ");
        sql.append("             AND vdsdv.product_division = dsd1.product_division ");
        sql.append("             AND dsd1.product_division IN(1,3) ");
        sql.append("             INNER JOIN mst_technic_class mtc ON mtc.technic_class_id = mt.technic_class_id ");
        sql.append("             WHERE dsd1.slip_no = vdsdv.slip_no ");
        sql.append("               AND dsd1.shop_id = vdsdv.shop_id ");
        sql.append("               AND dsd1.slip_detail_no = vdsdv.slip_detail_no ");
        sql.append("               AND mtc.shop_category_id IN("+ paramBean.getCategoryIDList() +")) ");
        sql.append("            OR EXISTS ");
        sql.append("            ( SELECT 1 ");
        sql.append("             FROM view_data_sales_detail_valid dsd1 ");
        sql.append("             INNER JOIN mst_item mi ON dsd1.product_id = mi.item_id ");
        sql.append("             AND vdsdv.product_division = dsd1.product_division ");
        sql.append("             AND dsd1.product_division IN (2,4) ");
        sql.append("             INNER JOIN mst_item_class mic ON mic.item_class_id = mi.item_class_id ");
        sql.append("             WHERE dsd1.slip_no = vdsdv.slip_no ");
        sql.append("               AND dsd1.shop_id = vdsdv.shop_id ");
        sql.append("               AND dsd1.slip_detail_no = vdsdv.slip_detail_no ");
        sql.append("               AND mic.shop_category_id IN("+ paramBean.getCategoryIDList() +") ) ");
        sql.append("            OR EXISTS ");
        sql.append("            ( SELECT * ");
        sql.append("             FROM view_data_sales_detail_valid dsd1 ");
        sql.append("             INNER JOIN mst_course mc ON dsd1.product_id = mc.course_id ");
        sql.append("             AND vdsdv.product_division = dsd1.product_division ");
        sql.append("             AND dsd1.product_division IN (5,6) ");
        sql.append("             INNER JOIN mst_course_class mcc ON mcc.course_class_id = mc.course_class_id ");
        sql.append("             WHERE dsd1.slip_no = vdsdv.slip_no ");
        sql.append("               AND dsd1.shop_id = vdsdv.shop_id ");
        sql.append("               AND dsd1.slip_detail_no = vdsdv.slip_detail_no ");
        sql.append("               AND mcc.shop_category_id IN("+ paramBean.getCategoryIDList() +") ) ) ");
        sql.append(" group by ");																																							
        sql.append("     shop_id, ");																																						
        sql.append("     slip_no ");
        sql.append("     ,dsms.shop_category_id");
        sql.append("             ) dsd");
        sql.append("   group by dsd.shop_id, dsd.slip_no, dsd.shop_category_id ) dsd "); 					
        sql.append("             on ds.shop_id = dsd.shop_id");
        sql.append("            and ds.slip_no = dsd.slip_no");
        sql.append("       AND dsms.staff_id = " + paramBean.getStaffId().toString() + " ");
        if (!paramBean.getCategoryIDList().equals("")) {
            sql.append("  left join (");	
            sql.append("      select dsd.shop_id, dsd.slip_no");		
            sql.append("      , max(dsd.shop_category_id) as shop_category_id");		
            sql.append("      , sum(dsd.tech_num) as tech_num");		
            sql.append("      , sum(dsd.tech_crame_num) as tech_crame_num");		
            sql.append("      , sum(dsd.item_num) as item_num");		
            sql.append("      , sum(dsd.item_crame_num) as item_crame_num");	
            if(paramBean.isCourseFlag() == true) {
                sql.append("      , SUM ( dsd.course_num ) AS course_num ");
                sql.append("      , SUM ( dsd.course_num_new ) AS course_num_new ");
                sql.append("      , SUM ( dsd.course_digestion_num ) AS course_digestion_num ");
            }
            sql.append("           from ( select");		
            sql.append("           shop_id,");		
            sql.append("           slip_no,");		
            sql.append("           dsms.shop_category_id,");
            sql.append("           sum (case when product_division = 1 then 1 else 0 end) as tech_num,");		
            sql.append("           sum (case when product_division = 3 then 1 else 0 end) as tech_crame_num,");		
            sql.append("           sum (case when product_division = 2 then 1 else 0 end) as item_num,");		
            sql.append("           sum (case when product_division = 4 then 1 else 0 end) as item_crame_num");
            sql.append("           ,sum(case when product_division = 5  and dsms.staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_num");
            sql.append("           ,sum(case when product_division = 5  and dsms.staff_id = " + paramBean.getStaffId().toString() + " and vdsdv.slip_no = (select min(ds.slip_no) as slip_no from data_sales ds\n");
            sql.append("           inner join data_sales_detail dsd on dsd.shop_id = ds.shop_id and dsd.slip_no = ds.slip_no\n");
            sql.append("           where ds.delete_date is null\n");
            sql.append("           and dsd.delete_date is null\n");
            sql.append("           and dsd.shop_id in (" + paramBean.getShopIDList() + ")\n");
            sql.append("           and dsd.product_division = 5 \n");
            sql.append("           and ds.customer_id = vdsdv.customer_id\n");
            sql.append("           and ds.shop_id = vdsdv.shop_id\n");
            sql.append("           and (ds.sales_date <= '" + endDate + "' )\n");
            sql.append("           )  then 1 else 0 end) as course_num_new");
            sql.append("            ,sum(case when product_division = 6  and dsms.staff_id = " + paramBean.getStaffId().toString() + "  then 1 else 0 end) as course_digestion_num");

            sql.append("             from");		
            sql.append("             view_data_sales_detail_valid vdsdv");
            sql.append("             INNER JOIN data_sales_mainstaff dsms using(shop_id,slip_no) ");
            sql.append("             where");		
            sql.append("             shop_id  in (" + paramBean.getShopIDList() + ")");	
            sql.append("             and sales_date  between '" + startDate + "' and '" + endDate + "'");	
            sql.append("            AND dsms.staff_id = " + paramBean.getStaffId().toString() + " ");
            sql.append("            and dsms.staff_id = vdsdv.detail_staff_id ");
            sql.append("            AND (EXISTS ");
            sql.append("            (SELECT 1 ");
            sql.append("             FROM view_data_sales_detail_valid dsd1 ");
            sql.append("             INNER JOIN mst_technic mt ON dsd1.product_id = mt.technic_id ");
            sql.append("             AND vdsdv.product_division = dsd1.product_division ");
            sql.append("             AND dsd1.product_division IN(1,3) ");
            sql.append("             INNER JOIN mst_technic_class mtc ON mtc.technic_class_id = mt.technic_class_id ");
            sql.append("             WHERE dsd1.slip_no = vdsdv.slip_no ");
            sql.append("               AND dsd1.shop_id = vdsdv.shop_id ");
            sql.append("               AND dsd1.slip_detail_no = vdsdv.slip_detail_no ");
            sql.append("               AND mtc.shop_category_id IN("+ paramBean.getCategoryIDList() +")) ");
            sql.append("            OR EXISTS ");
            sql.append("            ( SELECT 1 ");
            sql.append("             FROM view_data_sales_detail_valid dsd1 ");
            sql.append("             INNER JOIN mst_item mi ON dsd1.product_id = mi.item_id ");
            sql.append("             AND vdsdv.product_division = dsd1.product_division ");
            sql.append("             AND dsd1.product_division IN (2,4) ");
            sql.append("             INNER JOIN mst_item_class mic ON mic.item_class_id = mi.item_class_id ");
            sql.append("             WHERE dsd1.slip_no = vdsdv.slip_no ");
            sql.append("               AND dsd1.shop_id = vdsdv.shop_id ");
            sql.append("               AND dsd1.slip_detail_no = vdsdv.slip_detail_no ");
            sql.append("               AND mic.shop_category_id IN("+ paramBean.getCategoryIDList() +") ) ");
            sql.append("            OR EXISTS ");
            sql.append("            ( SELECT * ");
            sql.append("             FROM view_data_sales_detail_valid dsd1 ");
            sql.append("             INNER JOIN mst_course mc ON dsd1.product_id = mc.course_id ");
            sql.append("             AND vdsdv.product_division = dsd1.product_division ");
            sql.append("             AND dsd1.product_division IN (5,6) ");
            sql.append("             INNER JOIN mst_course_class mcc ON mcc.course_class_id = mc.course_class_id ");
            sql.append("             WHERE dsd1.slip_no = vdsdv.slip_no ");
            sql.append("               AND dsd1.shop_id = vdsdv.shop_id ");
            sql.append("               AND dsd1.slip_detail_no = vdsdv.slip_detail_no ");
            sql.append("               AND mcc.shop_category_id IN("+ paramBean.getCategoryIDList() +") ) ) ");
            sql.append("               group by");		
            sql.append("               shop_id,");		
            sql.append("               slip_no,");		
            sql.append("               dsms.shop_category_id ");
            sql.append("               ) dsd group by dsd.shop_id, dsd.slip_no");		
            sql.append("               ) dsd1");		
            sql.append("               on  ds.shop_id = dsd1.shop_id");		
            sql.append("               and ds.slip_no = dsd1.slip_no");		
            sql.append("                and dsd.shop_category_id = dsd1.shop_category_id");
        }
        sql.append("         left join mst_customer mc");
        sql.append("             using(customer_id)");
        sql.append("                 where");
        sql.append("                         ds.shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("                     and ds.sales_date between '" + startDate + "' and '" + endDate + "'");

        sql.append(" group by");
        if (isDailyReport) {
            sql.append(" date_trunc('day', ds.sales_date)");
        } else {
            sql.append(" date_trunc('month', case when date_part('day', ds.sales_date) > " + paramBean.getCutoffDay() + " then ds.sales_date + '1 months' else ds.sales_date end)");
        }
        sql.append(" union all");
        sql.append(" select distinct");
        if (isDailyReport) {
            sql.append("  date_trunc('day', manage_date) as manage_date");
        } else {
            sql.append("  date_trunc('month', case when date_part('day', manage_date) > " + paramBean.getCutoffDay() + " then manage_date + '1 months' else manage_date end) as manage_date");
        }

        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        sql.append("     ,0");
        //IVS_Ptthu end edit 20160620 New request #51865
        if(paramBean.isCourseFlag() == true) {
            sql.append("     ,0");
            sql.append("     ,0");
            sql.append("     ,0");
            sql.append("     ,0");
            sql.append("     ,0");
            sql.append("     ,0");
        }
        sql.append(" from");
        sql.append("     data_register dr");
        sql.append(" where");
        sql.append("         delete_date is null");
        sql.append("     and shop_id in (" + paramBean.getShopIDList() + ")");
        sql.append("     and manage_date between '" + startDate + "' and '" + endDate + "'");
        sql.append("     and not exists");
        sql.append("         (");
        sql.append("             select 1");
        sql.append("             from");
        sql.append("                 data_sales");
        sql.append("             where");
        sql.append("                     delete_date is null");
        sql.append("                 and shop_id = dr.shop_id");
        sql.append("                 and sales_date = dr.manage_date");
        sql.append("         )");

        sql.append(" ) t");
        sql.append(" group by");
        sql.append("     sales_date");

        sql.append(" ) t");
        sql.append(" full outer join (" + getSalesReport_LastYearSQL(paramBean, isDailyReport, valueString, startDate, endDate) + ") last_year");
        sql.append("     using(sales_date)");

        sql.append(" order by sales_date_with_last_year");

        return sql.toString();
    }

}
