/*
 * StaffShopRankingDecilePanel.java
 *
 * Created on 2008/07/20, 11:00
 */

package com.geobeck.sosia.pos.hair.report;

import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sql.ResultSetWrapper;
import java.awt.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import java.util.GregorianCalendar;
import com.geobeck.swing.*;
import javax.swing.table.DefaultTableModel;
import com.geobeck.sosia.pos.master.customer.MstCustomer;
import com.geobeck.sosia.pos.hair.customer.MstCustomerPanel;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sosia.pos.hair.mail.*;
import com.geobeck.sosia.pos.mail.*;
import java.text.*;
import com.geobeck.sosia.pos.master.company.*;
import java.math.BigDecimal;
import com.geobeck.sosia.pos.hair.report.util.*;

/**
 *
 * @author  ryugou
 */
public class StaffShopRankingDecilePanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
        private Object target = null;
        private String staffName = "";
        private String targetPeriodStartDate = "";
        private String targetPeriodEndDate = "";
        private String taxName = "";
        private String productDivisionName = "";
        private String productDivisionLabelName = "";
        private String rankLabel = "";
        private String rankNo = "";
        private String fmType = "";
        private String fvalue = "";
        private String mvalue = "";
        private String whereCondition = "";
        private long selectedRow = 0l;
        private long limitCount = 0l;
        
        private ArrayList<MstCustomer> resultList = new ArrayList<MstCustomer>();
        private MstCustomerListCreator mclistCreator = null;
        
        /** Creates new form StaffShopRankingDecilePanel */
	public StaffShopRankingDecilePanel(String title)
	{
		initComponents();
                addMouseCursorChange();
                this.setSize(820,680);
		this.setPath("帳票出力");
		this.setTitle(title);
		this.setKeyListener();
                
                this.initTableColumnWidth();
                
                //対象期間の設定
//		this.cmbTargetPeriodStartDate.setDate(new Date());
//		this.cmbTargetPeriodEndDate.setDate(new Date());
		
                //初期化処理
                this.init();
		
		// メール作成ボタン表示設定
		this.mailButton.setVisible(SystemInfo.checkAuthority(53));
		// 宛名ラベル作成ボタン表示設定
		this.sealButton.setVisible(SystemInfo.checkAuthority(55));
		// ハガキ作成ボタン表示設定
		this.postcardButton.setVisible(SystemInfo.checkAuthority(54));
	}
        
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(btnOutput);
		SystemInfo.addMouseCursorChange(mailButton);
		SystemInfo.addMouseCursorChange(sealButton);
		SystemInfo.addMouseCursorChange(postcardButton);
		SystemInfo.addMouseCursorChange(selectAllButton);
		SystemInfo.addMouseCursorChange(releaseAllButton);
		SystemInfo.addMouseCursorChange(closeButton);
	}
        
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        customerGroup = new javax.swing.ButtonGroup();
        comingCycleGroup = new javax.swing.ButtonGroup();
        customerCategoryGroup = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        shopLabel = new javax.swing.JLabel();
        btnOutput = new javax.swing.JButton();
        sealButton = new javax.swing.JButton();
        postcardButton = new javax.swing.JButton();
        mailButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        shopLabel1 = new javax.swing.JLabel();
        shopLabel2 = new javax.swing.JLabel();
        shopLabel3 = new javax.swing.JLabel();
        shop = new javax.swing.JLabel();
        staff = new javax.swing.JLabel();
        targetPeriod = new javax.swing.JLabel();
        tax = new javax.swing.JLabel();
        productDivisionLabel = new javax.swing.JLabel();
        productDivision = new javax.swing.JLabel();
        selectAllButton = new javax.swing.JButton();
        releaseAllButton = new javax.swing.JButton();
        fmTypeLabel = new javax.swing.JLabel();
        fvalueLabel = new javax.swing.JLabel();
        mvalueLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        customersTable = new com.geobeck.swing.JTableEx();
        jScrollPane2 = new javax.swing.JScrollPane();
        totalTable = new com.geobeck.swing.JTableEx();
        message = new javax.swing.JLabel();

        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());
        pnlMain.setFocusCycleRoot(true);
        pnlMain.setFocusTraversalPolicy(getFocusTraversalPolicy());
        pnlMain.setOpaque(false);
        shopLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel.setText("\u5bfe\u8c61\u5e97\u8217");

        btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
        btnOutput.setBorderPainted(false);
        btnOutput.setContentAreaFilled(false);
        btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
        btnOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputActionPerformed(evt);
            }
        });

        sealButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_seal_off.jpg"));
        sealButton.setBorderPainted(false);
        sealButton.setContentAreaFilled(false);
        sealButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_seal_on.jpg"));
        sealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sealButtonActionPerformed(evt);
            }
        });

        postcardButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_off.jpg"));
        postcardButton.setBorderPainted(false);
        postcardButton.setContentAreaFilled(false);
        postcardButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_postcard_on.jpg"));
        postcardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postcardButtonActionPerformed(evt);
            }
        });

        mailButton.setIcon(SystemInfo.getImageIcon("/button/mail/create_mail_off.jpg"));
        mailButton.setBorderPainted(false);
        mailButton.setContentAreaFilled(false);
        mailButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/create_mail_on.jpg"));
        mailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailButtonActionPerformed(evt);
            }
        });

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/back_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setContentAreaFilled(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/back_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        shopLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel1.setText("\u4e3b\u62c5\u5f53\u8005");

        shopLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel2.setText("\u5bfe\u8c61\u671f\u9593");

        shopLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        shopLabel3.setText("\u7a0e\u533a\u5206");

        shop.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        shop.setText("\u30b8\u30aa\u30b5\u30ed\u30f3");

        staff.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        staff.setText("\u6307\u5b9a\u306a\u3057");

        targetPeriod.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        targetPeriod.setText("2009/01/01 \uff5e 2009/01/31");

        tax.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        tax.setText("\u7a0e\u8fbc");

        productDivisionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        productDivisionLabel.setText("\u8a55\u4fa1\u5bfe\u8c61");

        productDivision.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        productDivision.setText("\u6280\u8853");

        selectAllButton.setIcon(SystemInfo.getImageIcon("/button/select/select_all_off.jpg"));
        selectAllButton.setBorderPainted(false);
        selectAllButton.setContentAreaFilled(false);
        selectAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_all_on.jpg"));
        selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllButtonActionPerformed(evt);
            }
        });

        releaseAllButton.setIcon(SystemInfo.getImageIcon("/button/select/release_all_off.jpg"));
        releaseAllButton.setBorderPainted(false);
        releaseAllButton.setContentAreaFilled(false);
        releaseAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/release_all_on.jpg"));
        releaseAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseAllButtonActionPerformed(evt);
            }
        });

        fmTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        fmTypeLabel.setText("\u3010\u30d6\u30ed\u30f3\u30ba\u5ba2\u3011");

        fvalueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        fvalueLabel.setText("\u6765\u5e97\u56de\u6570  99\u56de \uff5e 99\u56de");

        mvalueLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        mvalueLabel.setText("\u58f2\u4e0a\u91d1\u984d  9999\u5186\uff5e9999\u5186");

        org.jdesktop.layout.GroupLayout pnlMainLayout = new org.jdesktop.layout.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlMainLayout.createSequentialGroup()
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(shopLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(shopLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(shopLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(15, 15, 15)
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(pnlMainLayout.createSequentialGroup()
                                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(pnlMainLayout.createSequentialGroup()
                                        .add(productDivisionLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(15, 15, 15)
                                        .add(productDivision, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(pnlMainLayout.createSequentialGroup()
                                        .add(10, 10, 10)
                                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(fmTypeLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(pnlMainLayout.createSequentialGroup()
                                                .add(10, 10, 10)
                                                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, mvalueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, fvalueLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))))))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 98, Short.MAX_VALUE)
                        .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(targetPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .add(pnlMainLayout.createSequentialGroup()
                .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 323, Short.MAX_VALUE)
                .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mailButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sealButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(postcardButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlMainLayout.createSequentialGroup()
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(postcardButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mailButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(sealButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(15, 15, 15)
                .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(pnlMainLayout.createSequentialGroup()
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(shopLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(shop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(productDivisionLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(productDivision, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(shopLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(staff, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(fmTypeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(shopLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(targetPeriod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(fvalueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(pnlMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(shopLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(tax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(mvalueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(releaseAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(selectAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "順位", "<html><p>顧客<br>情報</p></html>", "顧客No.", "氏名", "前回来店日", "主担当者", "指名", "来店回数", "売上金額", "売上シェア率", "平均単価", "<html>メール<br>&nbsp;有無 </html>", "<html>送信<br>対象</html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        customersTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(customersTable);

        jScrollPane2.setBorder(null);
        totalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "顧客数", "来店回数", "売上金額", "平均単価"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        totalTable.setSelectionBackground(new java.awt.Color(220, 220, 220));
        totalTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        SelectTableCellRenderer.setSelectTableCellRenderer(totalTable);
        jScrollPane2.setViewportView(totalTable);

        message.setFont(new java.awt.Font("MS UI Gothic", 0, 14));
        message.setText("<html>\n\u203b\u6765\u5e97\u56de\u6570\u304a\u3088\u3073\u58f2\u4e0a\u91d1\u984d\u306b\u306f\u3001\u30af\u30ec\u30fc\u30e0\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002<br>\n\u203b\u58f2\u4e0a\u91d1\u984d\u306f\u3001\u5272\u5f15\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002\n</html>\n");
        message.setFocusCycleRoot(true);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(message, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 338, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(75, 75, 75)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 391, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, pnlMain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(584, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlMain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(message, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed

        mclistCreator = null;
        
        this.showOpener();

    }//GEN-LAST:event_closeButtonActionPerformed

    private void changeSelect(boolean select){
        
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Vector row = (Vector)model.getDataVector().get(i);
            if(row.get(12) != null){
                row.add(12, select);
            }
        }
    }
    
    private void releaseAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseAllButtonActionPerformed

        this.changeSelect(false);

    }//GEN-LAST:event_releaseAllButtonActionPerformed

    private void selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllButtonActionPerformed

        this.changeSelect(true);

    }//GEN-LAST:event_selectAllButtonActionPerformed

    private void postcardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postcardButtonActionPerformed
        this.printPostcard();
    }//GEN-LAST:event_postcardButtonActionPerformed

    private void sealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sealButtonActionPerformed
        this.createSeal();
    }//GEN-LAST:event_sealButtonActionPerformed

    private void mailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailButtonActionPerformed
        this.sendMail();
    }//GEN-LAST:event_mailButtonActionPerformed

    private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed
        this.print();
    }//GEN-LAST:event_btnOutputActionPerformed

    private boolean checkDuplicateCustomer(ArrayList<MstCustomer> selectedArray, MstCustomer customer){
        for(MstCustomer mc : selectedArray){
            if(mc.getCustomerID().intValue() == customer.getCustomerID().intValue()){
                return true;
            }
        }
        return false;
    }

    private class MstCustomerListCreator extends Thread {

        private ArrayList<Integer> list = new ArrayList<Integer>();
        
        public MstCustomerListCreator(ArrayList<Integer> list) {
            this.list = list;
        }
        
        public void run() {

            try {

                for (Integer id : list) {
                    MstCustomer mc = new MstCustomer(id);
                    mc.load(SystemInfo.getConnection());
                    resultList.add(mc);
                }

            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

        }
    }
    
    private void getCustomerList() {
        
        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            for (;;) {
                if (customersTable.getRowCount() == resultList.size()) {
                    break;
                }
            }
            
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    
    private void printPostcard() {
	
	DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();
      
        for (int i = 0; i < model.getRowCount(); i++) {
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if (row.get(12) != null && (Boolean)row.get(12)) {
		
                getCustomerList();
                
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if (this.checkDuplicateCustomer(selectedArray, mc)) {
                    continue;
                }
                
                // 住所がなかっても飛ばす
                if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
		    continue;
                }
                
                selectedArray.add(mc);
            }
        }
        
        if(selectedArray.size() == 0){
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        PrintPostcardPanel ppp = new PrintPostcardPanel(selectedArray);
	ppp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, ppp, "ハガキ作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private void createSeal(){
	
        // 宛名ラベル印刷をクリック
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();
      
        for (int i = 0; i < model.getRowCount(); i++) {
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(12) != null && (Boolean)row.get(12)){

                getCustomerList();
                
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if(this.checkDuplicateCustomer(selectedArray, mc)){
                    continue;
                }
                
                // 住所がなかっても飛ばす
                if (mc.getFullAddress() == null || mc.getFullAddress().equals("")) {
		    continue;
                }
                
                selectedArray.add(mc);
            }
        }
        
        if(selectedArray.size() == 0){
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        PrintLabelPanel plp = new PrintLabelPanel(selectedArray);
	plp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, plp, "宛名ラベル作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private void sendMail(){
	
        ArrayList<MstCustomer> selectedArray = new ArrayList<MstCustomer>();

	DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
      
        for(int i = 0; i < model.getRowCount(); i++){
	    
            Vector row = (Vector)model.getDataVector().get(i);
            
            if(row.get(12) != null && (Boolean)row.get(12)){
                
                getCustomerList();
                
                MstCustomer mc = resultList.get(i);
                
                // すでに追加済みのユーザなら飛ばす
                if (this.checkDuplicateCustomer(selectedArray, mc)) continue;
		
		selectedArray.add(mc);
            }
        }

        if (selectedArray.size() == 0) {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        HairCommonMailPanel rcmp = new HairCommonMailPanel(target, selectedArray);
	rcmp.setOpener(this);
        SwingUtil.openAnchorDialog( null, true, rcmp, "メール作成", SwingUtil.ANCHOR_HCENTER | SwingUtil.ANCHOR_VCENTER );
    }
    
    private Date getStartDate(Date date){
        
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        
        return cal.getTime();
    }
    
    private Date getEndDate(Date date){
        if(date == null) return null;
        
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(date);
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);
        
        return cal.getTime();
    }
    
    public void showData(){
        
        //--------------------------
        // ヘッダ情報
        //--------------------------
        if (target instanceof MstGroup) {
            //グループ
            shop.setText(((MstGroup)target).getGroupName());
        } else if(target instanceof MstShop) {
            //店舗
            shop.setText(((MstShop)target).getShopName());
        }

        staff.setText(this.getStaffName());
        targetPeriod.setText(this.getTargetPeriodStartDate() + " 〜 " + this.getTargetPeriodEndDate());
        tax.setText(this.getTaxName());
        productDivision.setText(this.getProductDivisionName());
        productDivisionLabel.setText(this.getProductDivisionLabelName());
        
        if (this.fmType.length() > 0) {
            fmTypeLabel.setText(this.fmType);
        } else {
            fmTypeLabel.setText(this.getRankLabel() + "　" + this.getRankNo());
        }
        
        fvalueLabel.setText(this.fvalue);
        mvalueLabel.setText(this.mvalue);

        //--------------------------
        // 顧客情報
        //--------------------------
        resultList.clear();
        
        if( customersTable.getCellEditor() != null ) 
                customersTable.getCellEditor().stopCellEditing();
	SwingUtil.clearTable(customersTable);
        
        DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
        
        try {

            long customerCountTotal = 0l;
            long visitCountTotal = 0l;
            long salesValueTotal = 0l;
            
            //ランキングの開始位置
            long ranking = getLimitCount() * getSelectedRow() + 1;

            ResultSetWrapper rs = SystemInfo.getConnection().executeQuery(this.getCustomerDetailRankingSQL());
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

            while (rs.next()) {
                salesValueTotal += rs.getLong("sales_value");
            }
            rs.beforeFirst();

            BigDecimal bd = null;
            NumberFormat nf = NumberFormat.getInstance();
            nf.setMinimumFractionDigits(1);

            ArrayList<Integer> customerIDList = new ArrayList<Integer>();

            while (rs.next()) {

                customerIDList.add(rs.getInt("customer_id"));
                
                String salesShareRate = "0%";
                if (salesValueTotal > 0) {
                    bd = new BigDecimal(rs.getDouble("sales_value") / salesValueTotal * 100);
                    salesShareRate = nf.format(bd.setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue()) + "%";
                }
                
                Object[] rowData = { ranking <= 3 ? getRankingIcon(ranking):ranking,
                                     getUserSearchButton(rs.getInt("customer_id")),
                                     rs.getString("customer_no"),
                                     rs.getString("customer_name"),
                                     sdf.format(rs.getDate("sales_date")),
                                     rs.getString("staff_name"),
                                     ((Boolean)rs.getBoolean("designated_flag") ? "●" : ""),
                                     rs.getLong("visit_count"),
                                     rs.getLong("sales_value"),
                                     salesShareRate,
                                     rs.getLong("visit_count") > 0 ? (rs.getLong("sales_value") / rs.getLong("visit_count")) : 0,
                                     rs.getString("pc_mail_address").length() > 0 || rs.getString("cellular_mail_address").length() > 0 ? "●" : "",
                                     true
                                   };
                
                customerCountTotal += 1;
                visitCountTotal += rs.getLong("visit_count");
                
                model.addRow(rowData);
                ranking++;
            }
            
            rs.close();

            SwingUtil.clearTable(totalTable);
            DefaultTableModel totalModel = (DefaultTableModel)totalTable.getModel();
            totalModel.addRow(new Object[]{customerCountTotal, visitCountTotal, salesValueTotal, visitCountTotal > 0 ? (salesValueTotal / visitCountTotal) : 0});

            mclistCreator = new MstCustomerListCreator(customerIDList);
            mclistCreator.start();

        } catch (Exception e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
	private String getCustomerDetailRankingSQL() throws Exception
	{
	    StringBuilder sql = new StringBuilder(1000);
            
            long offset = 0;
            if (getSelectedRow() > 0) {
                offset = (getSelectedRow() * getLimitCount());
            }
            sql.append(" select * from wk_rank");
            
            if (getWhereCondition().length() > 0) {
                sql.append(" where " + getWhereCondition());
            }
            
            sql.append("     offset " + offset);
            if (getSelectedRow() < 9) {
                sql.append(" limit " + getLimitCount());
            }

            return sql.toString();
	}
    
        private void print(){
            
            DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

            if(model.getRowCount() == 0){
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_NO_DATA, "対象データ"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            JExcelApi jx = new JExcelApi("デシル_クロス_分析表");
            jx.setTemplateFile("/reports/デシル_クロス_分析表.xls");
            
            String reportName = productDivision.getText().length() > 0 ? "顧客ランキング" : "クロス分析表";

            // シート名
            jx.getTargetSheet().setName(reportName);

            // タイトル
            jx.setValue(1, 1, reportName);
            
            // ヘッダ
            jx.setValue(2, 3, shop.getText());
            jx.setValue(2, 4, staff.getText());
            jx.setValue(2, 5, targetPeriod.getText());
            jx.setValue(2, 6, tax.getText());

            if (productDivision.getText().length() == 0) {
                
                // クロス分析
                jx.setValue(4, 3, null);
                jx.setValue(5, 4, null);
                jx.setValue(6, 4, null);
                jx.mergeCells(4, 4, 6, 4);
                jx.setValue(4, 4, fmTypeLabel.getText());

            } else {
                
                // デシル分析
                jx.setValue(4, 4, null);
                jx.setValue(5, 4, this.getRankLabel() + " ： ");
                jx.setValue(6, 4, this.getRankNo());
            }

            jx.setValue(6, 3, productDivision.getText());
            jx.setValue(5, 5, fvalueLabel.getText());
            jx.setValue(5, 6, mvalueLabel.getText());
            
            int row = 9;

            // 追加行数セット
            jx.insertRow(row, model.getRowCount() - 1);
            for (int i = row + 1; i < model.getRowCount() + row + 1; i++) {
                jx.mergeCells(4, i, 5, i);
            }
            
            // データセット
            for(int i = 0; i < model.getRowCount(); i++){

                if (model.getValueAt(i, 0) instanceof JButton) {
                    jx.setValue(1, row, i + 1);                    
                } else {
                    jx.setValue(1, row, model.getValueAt(i, 0));         
                }

                jx.setValue(2, row, model.getValueAt(i, 2));
                jx.setValue(3, row, model.getValueAt(i, 3));
                jx.setValue(4, row, model.getValueAt(i, 4));
                jx.setValue(6, row, model.getValueAt(i, 5));
                jx.setValue(7, row, model.getValueAt(i, 6));
                jx.setValue(8, row, model.getValueAt(i, 7));
                jx.setValue(9, row, model.getValueAt(i, 8));
                jx.setValue(10, row, model.getValueAt(i, 9));
                jx.setValue(11, row, model.getValueAt(i, 10));
                jx.setValue(12, row, model.getValueAt(i, 11));
                
                row++;
            }
            
            jx.removeRow(row);

            jx.openWorkbook();
            
        }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutput;
    private javax.swing.JButton closeButton;
    private javax.swing.ButtonGroup comingCycleGroup;
    private javax.swing.ButtonGroup customerCategoryGroup;
    private javax.swing.ButtonGroup customerGroup;
    private com.geobeck.swing.JTableEx customersTable;
    private javax.swing.JLabel fmTypeLabel;
    private javax.swing.JLabel fvalueLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mailButton;
    private javax.swing.JLabel message;
    private javax.swing.JLabel mvalueLabel;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JButton postcardButton;
    private javax.swing.JLabel productDivision;
    private javax.swing.JLabel productDivisionLabel;
    private javax.swing.JButton releaseAllButton;
    private javax.swing.JButton sealButton;
    private javax.swing.JButton selectAllButton;
    private javax.swing.JLabel shop;
    private javax.swing.JLabel shopLabel;
    private javax.swing.JLabel shopLabel1;
    private javax.swing.JLabel shopLabel2;
    private javax.swing.JLabel shopLabel3;
    private javax.swing.JLabel staff;
    private javax.swing.JLabel targetPeriod;
    private javax.swing.JLabel tax;
    private com.geobeck.swing.JTableEx totalTable;
    // End of variables declaration//GEN-END:variables
	
	private void setKeyListener()
	{
	}
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
            SwingUtil.setJTableHeaderRenderer(customersTable, SystemInfo.getTableHeaderRenderer());
            this.customersTable.setDefaultRenderer(Object.class, new TableCellRenderer());
            
            SwingUtil.setJTableHeaderRenderer(totalTable, SystemInfo.getTableHeaderRenderer());
            
            totalTable.setRowHeight(30);
        }
        
	/**
	 * 再来予測分析テーブル用のTableCellRenderer
	 */
	public class TableCellRenderer extends SelectTableCellRenderer
	{
            /** Creates a new instance of TableCellRenderer */
            public TableCellRenderer()
            {
                super();
            }

            
            /**
             * テーブルセルレンダリングを返します。
             * @param table JTable
             * @param value セルに割り当てる値
             * @param isSelected セルが選択されている場合は true
             * @param hasFocus フォーカスがある場合は true
             * @param row 行
             * @param column 列
             * @return テーブルセルレンダリング
             */
            public Component getTableCellRendererComponent(JTable table, Object value, 
                 boolean isSelected, boolean hasFocus, int row, int column){ 

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                switch(column)
                {
                        case 8:
                        case 9:
                        case 10:
                                super.setHorizontalAlignment(SwingConstants.RIGHT);
                                break;
                        default:
                                super.setHorizontalAlignment(SwingConstants.CENTER);
                                break;
                }
                
                return this; 
            } 

	
        }
        
        /**
         * ユーザ検索ボタンを取得する
         */
        private JButton getUserSearchButton(final Integer customerID)
        {
                JButton	searchButton = new JButton();
                searchButton.setBorderPainted(false);
                searchButton.setContentAreaFilled(false);
                searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
                searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
                searchButton.setSize(48, 25);
                searchButton.addActionListener(new java.awt.event.ActionListener()
                {
                        public void actionPerformed(java.awt.event.ActionEvent evt)
                        {
                            DefaultTableModel model = (DefaultTableModel)customersTable.getModel();

                            MstCustomerPanel mcp = null;

                            try {

                                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                                mcp = new MstCustomerPanel(customerID, true, true);
                                SwingUtil.openAnchorDialog( parentFrame, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );

                            } finally {
                                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            }
                            
                            mcp = null;
                        }
                });
                return searchButton;
        }   

        /**
         * JTableの列幅を初期化する。
         */
        private void initTableColumnWidth()
        {
            //列の幅を設定する
            
            customersTable.getColumnModel().getColumn(0).setPreferredWidth(30);        //ランク
            customersTable.getColumnModel().getColumn(1).setPreferredWidth(48);        //顧客情報ボタン
            customersTable.getColumnModel().getColumn(2).setPreferredWidth(45);        //顧客No.
            customersTable.getColumnModel().getColumn(3).setPreferredWidth(80);        //氏名
            customersTable.getColumnModel().getColumn(4).setPreferredWidth(60);        //前回来店日
            customersTable.getColumnModel().getColumn(5).setPreferredWidth(60);        //担当者
            customersTable.getColumnModel().getColumn(6).setPreferredWidth(20);        //指名
            customersTable.getColumnModel().getColumn(7).setPreferredWidth(50);        //来店回数
            customersTable.getColumnModel().getColumn(8).setPreferredWidth(50);        //売上金額
            customersTable.getColumnModel().getColumn(9).setPreferredWidth(60);        //売上シェア率
            customersTable.getColumnModel().getColumn(10).setPreferredWidth(50);       //購買単価
            customersTable.getColumnModel().getColumn(11).setPreferredWidth(20);       //メールアドレス有無
            customersTable.getColumnModel().getColumn(12).setPreferredWidth(20);       // 送信対象
        }       

        /**
	 * ランキングアイコンを取得する
         * @param ranking ランキング
         * @return ランキングアイコン
	 */
	private JButton getRankingIcon(long ranking)
	{
		JButton		rankingIcon	=	new JButton();
		rankingIcon.setBorderPainted(false);
		rankingIcon.setContentAreaFilled(false);
                if (ranking == 1) {
                    //１位の場合
                    rankingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                    "/images/" + SystemInfo.getSkinPackage() + "/button/print/rank1.png")));
                }
                else if (ranking == 2)
                {
                    //２位の場合
                    rankingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                    "/images/" + SystemInfo.getSkinPackage() + "/button/print/rank2.png")));
                }
                else if (ranking == 3)
                {
                    //３位の場合
                    rankingIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                    "/images/" + SystemInfo.getSkinPackage() + "/button/print/rank3.png")));
                }
		rankingIcon.setSize(48, 25);
		return rankingIcon;
	}
        
    public long getSelectedRow() {
        return selectedRow;
    }

    public void setSelectedRow(long selectedRow) {
        this.selectedRow = selectedRow;
    }

    public Object getTarget() {
        return target;
    }

    public void setTarget(Object target) {
        this.target = target;
    }

    public String getStaffName() {
        return staffName;
    }

    public void setStaffName(String staffName) {
        this.staffName = staffName;
    }

    public String getTargetPeriodStartDate() {
        return targetPeriodStartDate;
    }

    public void setTargetPeriodStartDate(String targetPeriodStartDate) {
        this.targetPeriodStartDate = targetPeriodStartDate;
    }

    public String getTargetPeriodEndDate() {
        return targetPeriodEndDate;
    }

    public void setTargetPeriodEndDate(String targetPeriodEndDate) {
        this.targetPeriodEndDate = targetPeriodEndDate;
    }

    public String getTaxName() {
        return taxName;
    }

    public void setTaxName(String taxName) {
        this.taxName = taxName;
    }

    public String getProductDivisionName() {
        return productDivisionName;
    }

    public void setProductDivisionName(String productDivisionName) {
        this.productDivisionName = productDivisionName;
    }

    public String getProductDivisionLabelName() {
        return productDivisionLabelName;
    }

    public void setProductDivisionLabelName(String productDivisionLabelName) {
        this.productDivisionLabelName = productDivisionLabelName;
    }
    
    public long getLimitCount() {
        return limitCount;
    }

    public void setLimitCount(long limitCount) {
        this.limitCount = limitCount;
    }

    public String getWhereCondition() {
        return whereCondition;
    }

    public void setWhereCondition(String whereCondition) {
        this.whereCondition = whereCondition;
    }

    public String getFmType() {
        return fmType;
    }

    public void setFmType(String fmType) {
        this.fmType = fmType;
    }

    public String getFvalue() {
        return fvalue;
    }

    public void setFvalue(String fvalue) {
        this.fvalue = fvalue;
    }

    public String getMvalue() {
        return mvalue;
    }

    public void setMvalue(String mvalue) {
        this.mvalue = mvalue;
    }

    public String getRankLabel() {
        return rankLabel;
    }

    public void setRankLabel(String rankLabel) {
        this.rankLabel = rankLabel;
    }

    public String getRankNo() {
        return rankNo;
    }

    public void setRankNo(String rankNo) {
        this.rankNo = rankNo;
    }
   
}
