/*
 * MstFreeHeadingClassPanel.java
 *
 * Created on 2007/07/11, 14:40
 */

package com.geobeck.sosia.pos.hair.basicinfo.product;

import java.util.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.*;

import com.geobeck.swing.*;
import com.geobeck.sosia.pos.hair.master.product.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.util.SQLUtil;

/**
 *
 * @author  katagiri
 */
public class MstFreeHeadingClassPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	
	/** Creates new form MstFreeHeadingClassPanel */
	public MstFreeHeadingClassPanel()
	{
		initComponents();
                // GB Start add 20161117 #58629
                // テーブルにリスナーを追加
                initListitemTypeList(ListitemTypeList);
                // GB End add 20161117 #58629
		this.init();
                // GB STart edit 20161117 #58629
		this.setSize(620, 350);
                //this.setSize(500, 350);
                // GB End add 20161117 #58629
		this.setPath("基本設定 >> 顧客マスタ");
		this.setTitle("フリー項目区分登録");
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        registButton = new javax.swing.JButton();
        scrStaffShift = new javax.swing.JScrollPane();
        ListitemTypeList = new com.geobeck.swing.JTableEx();

        setPreferredSize(new java.awt.Dimension(614, 432));

        registButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        registButton.setBorderPainted(false);
        registButton.setContentAreaFilled(false);
        registButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        registButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registButtonActionPerformed(evt);
            }
        });

        scrStaffShift.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrStaffShift.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrStaffShift.setPreferredSize(new java.awt.Dimension(572, 419));

        ListitemTypeList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "種別", "名称", "使用", "種別", "予約画面表示"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                // GB Start edit 20161117 #58629
                //return canEdit [columnIndex];
                if(columnIndex == 4){
                    if((Boolean)ListitemTypeList.getValueAt(rowIndex, 2)){
                        return true;
                    }else{
                        return false;
                    }
                }else{
                    return canEdit [columnIndex];
                }
                // GB End edit 20161117 #58629

            }

        });
        ListitemTypeList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        ListitemTypeList.setAutoscrolls(false);
        ListitemTypeList.setDragEnabled(true);
        ListitemTypeList.setSelectionBackground(new java.awt.Color(255, 210, 142));
        ListitemTypeList.setSelectionForeground(new java.awt.Color(0, 0, 0));
        ListitemTypeList.getTableHeader().setReorderingAllowed(false);
        //tblStaffShift.setTableHeader(null);
        scrStaffShift.setViewportView(ListitemTypeList);
        ListitemTypeList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (ListitemTypeList.getColumnModel().getColumnCount() > 0) {
            ListitemTypeList.getColumnModel().getColumn(0).setPreferredWidth(110);
            ListitemTypeList.getColumnModel().getColumn(1).setPreferredWidth(130);
            ListitemTypeList.getColumnModel().getColumn(2).setPreferredWidth(100);
            ListitemTypeList.getColumnModel().getColumn(3).setPreferredWidth(130);
            ListitemTypeList.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrStaffShift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrStaffShift, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void registButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_registButtonActionPerformed
	{//GEN-HEADEREND:event_registButtonActionPerformed
	           //入力チェック
            if (this.checkInput()) {
                if(this.regist()){
                   MessageDialog.showMessageDialog(
                            this,
                            MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
                            this.getTitle(),
                            JOptionPane.INFORMATION_MESSAGE);
                }else{
                     MessageDialog.showMessageDialog(this,
                        "処理が失敗しました。",
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                }
                    
            }
	}//GEN-LAST:event_registButtonActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.geobeck.swing.JTableEx ListitemTypeList;
    private javax.swing.JButton registButton;
    private javax.swing.JScrollPane scrStaffShift;
    // End of variables declaration//GEN-END:variables
	
	private	MstFreeHeadingClasses		itemType	=	null;
	
	private void init()
	{
		itemType	=	new MstFreeHeadingClasses();
		this.showData();
                // GB Start edit 20161117 #58629
                ListitemTypeList.getColumnModel().getColumn(0).setPreferredWidth(110);
                //ListitemTypeList.getColumnModel().getColumn(0).setPreferredWidth(120);
                ListitemTypeList.getColumnModel().getColumn(1).setPreferredWidth(130);
                //ListitemTypeList.getColumnModel().getColumn(1).setPreferredWidth(100);
                // GB End edit 20161117 #58629
                ListitemTypeList.getColumnModel().getColumn(2).setPreferredWidth(100);
                ListitemTypeList.getColumnModel().getColumn(3).setPreferredWidth(130);
                // GB Start add 20161117 #58629
                ListitemTypeList.getColumnModel().getColumn(4).setPreferredWidth(100);
                // GB End add 20161117 #58629
	}
	
	private void showData()
	{       while (ListitemTypeList.getRowCount() > 0) {
                ((DefaultTableModel) ListitemTypeList.getModel()).removeRow(0);
                }
		
		DefaultTableModel	model	=	(DefaultTableModel)ListitemTypeList.getModel();
		
		Integer		index	=	0;
                Integer num = null;
		for(MstFreeHeadingClass mit : itemType)
		{                    
                    Vector<Object>		temp	=	new Vector<Object>();
                    // GB Start edit 20161117 #58629     
                    Object[] list = new Object[5];
                    //Object[] list = new Object[4];
                    // GB End edit 20161117 #58629
			JComboBox combo = new JComboBox();
                        combo.addItem("択一選択");
                        combo.addItem("テキスト入力");
                        combo.setSelectedIndex(mit.getInput_type()); 
                        list[0] = "フリー項目区分" + mit.getFreeHeadingClassID().toString();
			list[1] = mit.getFreeHeadingClassName();
			list[2] = mit.getUseFlg();
			list[3] = combo;
                        // GB Start add 20161117 #58629
                        list[4] = mit.getReserveUseFlg();
                        // GB End add 20161117 #58629
			model.addRow(list);
			
			index	++;
		}
	}
	
	private boolean checkInput()
	{
		for(int row = 0; row < ListitemTypeList.getRowCount(); row ++)
		{
                    if((Boolean)ListitemTypeList.getValueAt(row, 2))
			{
				if(((String)ListitemTypeList.getValueAt(row, 1)).equals(""))
				{
                                    // GB Start edit 20161117 #58629
                                    MessageDialog.showMessageDialog(this,
                                        MessageUtil.getMessage(1100, "使用にチェックが入っている項目の名称"),
                                        this.getTitle(),
                                        JOptionPane.ERROR_MESSAGE);	
                                    return	false;
                                    //return	false;
                                    // GB End edit 20161117 #58629
				}
			}
		}
		
		return	true;
	}
	
	private boolean regist()
	{
            this.setData();
            if (itemType.regist()) {
                return true;
            } else {
                return false;
            }
	}
	
	private void setData()
	{
		for(int row = 0; row < ListitemTypeList.getRowCount(); row ++)
		{
			if( ListitemTypeList.getValueAt(row, 1) == null ) itemType.get(row).setFreeHeadingClassName( new String() );
			else                                            itemType.get(row).setFreeHeadingClassName(ListitemTypeList.getValueAt(row, 1).toString());
			itemType.get(row).setUseFlg((Boolean)ListitemTypeList.getValueAt(row, 2));
                        Integer input = null;
                        try {
                            JComboBox com = (JComboBox) ListitemTypeList.getValueAt(row, 3);
                            input = com.getSelectedIndex();
                        } catch (Exception e) {
                        }
                        itemType.get(row).setInput_type(input);
                        // GB Start add 20161117 #58629
                        itemType.get(row).setReserveUseFlg((Boolean)ListitemTypeList.getValueAt(row, 4));
                        // GB End add 20161117 #58629

		}
	}
        
        // GB Start add 20161117 #58629
        private void initListitemTypeList(JTableEx table) {
            SelectionListener listener = new SelectionListener(table);
            table.getModel().addTableModelListener(listener);
        }
        
        class SelectionListener implements TableModelListener {
            JTableEx table;
            
            SelectionListener(JTableEx table) {
                this.table = table;
            }
            @Override
            public void tableChanged(TableModelEvent e) {
                int column = e.getColumn();
                int row = e.getFirstRow();
                
                // 使用のチェックが外れたら予約使用のチェックも外す
                if(column == 2) {
                    //DefaultTableModel model = new DefaultTableModel();
                    if(!(Boolean)table.getValueAt(row, column)){   
                        table.setValueAt(false, row, 4);
                    }
                }
            }
        }
        // GB End add 20161117 #58629

}
