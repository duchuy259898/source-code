/*
 * MstStaffTechnicTimePanel.java
 *
 * Created on 2007/09/14, 17:29
 */

package com.geobeck.sosia.pos.hair.basicinfo.product;

import com.geobeck.sosia.pos.hair.master.product.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sql.*;
import com.geobeck.swing.*;
import java.sql.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author  kanemoto
 */
public class MstStaffTechnicTimePanel extends  com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
	
	/** Creates new form MstStaffTechnicTimePanel */
	public MstStaffTechnicTimePanel() {
	    initComponents();
	    this.setSize(694, 691);
	    this.setPath("äÓñ{ê›íË >> ãZèpÉ}ÉXÉ^");
	    this.setTitle("ÉXÉ^ÉbÉté{èpéûä‘ìoò^");
	    setListener();
	    addMouseCursorChange();
	    init();
	    this.refreshStaffTechnicTime();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        limit = new javax.swing.ButtonGroup();
        staffLabel1 = new javax.swing.JLabel();
        target = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        staffLabel = new javax.swing.JLabel();
        staff = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        technicClass = new javax.swing.JComboBox();
        technic = new javax.swing.JComboBox();
        renewButton = new javax.swing.JButton();
        technicTimeScroolPane = new javax.swing.JScrollPane();
        technicTime = new com.geobeck.swing.JTableEx();
        showButton = new javax.swing.JButton();

        staffLabel1.setText("\u5bfe\u8c61");

        target.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetActionPerformed(evt);
            }
        });

        staffLabel.setText("\u30b9\u30bf\u30c3\u30d5");

        staff.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        staff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffActionPerformed(evt);
            }
        });

        jLabel2.setText("\u6280\u8853\u540d");

        jLabel1.setText("\u6280\u8853\u5206\u985e");

        technicClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        technicClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                technicClassActionPerformed(evt);
            }
        });

        technic.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        technic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                technicActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setContentAreaFilled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        technicTime.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ãZèpï™óﬁ", "ãZèpñº", "ÉXÉ^ÉbÉtñº", "é{èpéûä‘", "äÓñ{éûä‘ÇÉZÉbÉg"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        technicTime.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        technicTime.setSelectionBackground(new java.awt.Color(220, 220, 220));
        technicTime.setSelectionForeground(new java.awt.Color(0, 0, 0));
        //technicTime.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //technicTime.getTableHeader().setReorderingAllowed(false);
        //technicTime.getColumn(3).setCellEditor(new IntegerCellEditor(new JTextField()));
        //SwingUtil.setJTableHeaderRenderer(technicTime, SystemInfo.getTableHeaderRenderer());
        //technicTime.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        //this.initTableColumnWidth();
        //SelectTableCellRenderer.setSelectTableCellRenderer(technicTime);
        technicTime.getTableHeader().setReorderingAllowed(false);
        this.initTableColumnWidth();
        technicTime.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        TableColumnModel technicTimeModel = technicTime.getColumnModel();
        technicTimeModel.getColumn(3).setCellEditor(new IntegerCellEditor(new JTextField()));
        SwingUtil.setJTableHeaderRenderer(technicTime, SystemInfo.getTableHeaderRenderer());

        technicTime.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                technicTimeFocusGained(evt);
            }
        });

        technicTimeScroolPane.setViewportView(technicTime);

        showButton.setIcon(SystemInfo.getImageIcon("/button/common/show_off.jpg"));
        showButton.setBorderPainted(false);
        showButton.setContentAreaFilled(false);
        showButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/show_on.jpg"));
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(technicTimeScroolPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(staffLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(staffLabel))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(staff, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(target, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(technic, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(technicClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(27, 27, 27)
                        .addComponent(showButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                        .addComponent(renewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(target, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(staffLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(technicClass, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(technic, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(staff, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(staffLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(99, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(showButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(renewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGap(12, 12, 12)
                .addComponent(technicTimeScroolPane, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
	this.refreshStaffTechnicTime();
    }//GEN-LAST:event_showButtonActionPerformed

	private void technicTimeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_technicTimeFocusGained
		if(technicTime.getInputContext() != null)
			technicTime.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_technicTimeFocusGained

	private void staffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffActionPerformed
	    mstts.setStaffID( ( staff.getSelectedItem() == null ? -1 : ( (MstStaff)staff.getSelectedItem() ).getStaffID() ) );
	}//GEN-LAST:event_staffActionPerformed

	/**
	 * çXêVÉ{É^Éìâüâ∫éûÇÃèàóù
	 */
	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renewButtonActionPerformed
	    if( this.checkInput() ) {
		this.regist();
		this.refreshStaffTechnicTime();
	    }
	}//GEN-LAST:event_renewButtonActionPerformed

	/**
	 * ëIëìXï‹ïœçXéûÇÃèàóù
	 */
	private void technicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_technicActionPerformed
	    this.refreshTechnic();
	}//GEN-LAST:event_technicActionPerformed

	private void technicClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_technicClassActionPerformed
	    // ãZèpçiçûÇ›ÉäÉXÉgÇçXêVÇ∑ÇÈ
	    refreshTechnicClass();
	}//GEN-LAST:event_technicClassActionPerformed

	private void targetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetActionPerformed
	    this.refreshTarget();
	}//GEN-LAST:event_targetActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.ButtonGroup limit;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton showButton;
    private javax.swing.JComboBox staff;
    private javax.swing.JLabel staffLabel;
    private javax.swing.JLabel staffLabel1;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel target;
    private javax.swing.JComboBox technic;
    private javax.swing.JComboBox technicClass;
    private com.geobeck.swing.JTableEx technicTime;
    private javax.swing.JScrollPane technicTimeScroolPane;
    // End of variables declaration//GEN-END:variables
	
	
    private MstTechnicClasses    mtcs  = new MstTechnicClasses();      // ãZèpãÊï™É}ÉXÉ^
    private MstTechnicClass      mts   = new MstTechnicClass();	       // ãZèpÉ}ÉXÉ^
    private MstStaffs            mss   = new MstStaffs();		// ÉXÉ^ÉbÉtÉ}ÉXÉ^
    private MstStaffTechnicTimes mstts = new MstStaffTechnicTimes();  // ÉXÉ^ÉbÉté{èpéûä‘É}ÉXÉ^
	
	/**
	 * É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…âÊëúÇïœçXÇ∑ÇÈ
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange( renewButton );
	}
	
	/**
	 *
	 */
	private void setListener()
	{
	    target.addKeyListener(SystemInfo.getMoveNextField());
	    technicClass.addKeyListener(SystemInfo.getMoveNextField());
	    technic.addKeyListener(SystemInfo.getMoveNextField());
	    staff.addKeyListener(SystemInfo.getMoveNextField());
	    technicTime.addKeyListener(SystemInfo.getMoveNextField());
	    technicTime.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * èâä˙âªÇçsÇ§
	 */
	private void init()
	{
	    // ãZèpÉNÉâÉXÇèâä˙âªÇ∑ÇÈ
	    initTechnicClass();
	    initTechnic();

	    // ìXï‹ìoò^
	    SystemInfo.initGroupShopComponents( target, 3 );
	    // ãZèpÇìoò^Ç∑ÇÈ
	    refreshTechnicClass();
	}
	
	/**
	 * ãZèpÉNÉâÉXÉ}ÉXÉ^Çèâä˙âªÇ∑ÇÈ
	 */
	private void initTechnicClass()
	{
	    try {
		ConnectionWrapper con = SystemInfo.getConnection();
		mtcs.load(con);
		con.close();
	    } catch(SQLException e) {
		SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }
	    
	    // ãZèpÉNÉâÉXÉ}ÉXÉ^ÇÃêÊì™Ç…ãÛÉfÅ[É^Çì¸ÇÍÇƒÇ®Ç≠
	    //MstTechnicClass m = new MstTechnicClass();
	    //m.setTechnicClassID( -1 );
	    //mtcs.add( 0, m );

	    technicClass.removeAllItems();
	    for( MstTechnicClass mtc : mtcs ) {
		technicClass.addItem( mtc );
	    }
	}
	
	/**
	 * ãZèpÉNÉâÉXÉ}ÉXÉ^Çèâä˙âªÇ∑ÇÈ
	 */
	private void initTechnic()
	{
		ConnectionWrapper con = SystemInfo.getConnection();
		MstTechnicClass mtc = null;
		MstTechnic mt = null;
		mts.clear();
		
		mtc = new MstTechnicClass();
		mtc.setTechnicClassID( -1 );
		mt = new MstTechnic();
		mt.setTechnicClass( mtc );
		mt.setTechnicID( -1 );
		mts.add( mt );
		
		try {
		    
		    ResultSetWrapper rs = con.executeQuery(this.getTechnicSelectSQL());
		    while(rs.next()) {
			mtc = new MstTechnicClass();
			mtc.setData( rs );
			mt = new MstTechnic();
			mt.setTechnicClass( mtc );
			mt.setData( rs );
			mts.add( mt );
		    }
		    
		} catch(SQLException e) {
		    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	private String getTechnicSelectSQL()
	{
		return
			"select\n" +
			"mtc.technic_class_name,\n" +
			"mtc.technic_class_contracted_name,\n" +
			"mt.*\n" +
			"from\n" +
			"mst_technic as mt\n" +
			"inner join mst_technic_class as mtc on\n" +
			"mt.technic_class_id = mtc.technic_class_id\n" +
			"where\n" +
			"mt.delete_date is null\n" +
			"order by\n" +
			"mt.technic_class_id,\n" +
			"mt.technic_id\n" +
			";\n";
	}
	
	/**
	 * ìXï‹ïœçXèàóùÇçsÇ§
	 */
	private void refreshTarget()
	{
		if( target.getSelectedItem() instanceof MstGroup )
		{
			String strShopList = "";
			for( MstShop ms : ( (MstGroup)target.getSelectedItem() ).getShops() )
			{
				strShopList +=
					( strShopList.length() == 0 ? "" : "," ) +
					ms.getShopID().toString();
			}
			mstts.setShopIDList( strShopList );
			mss.setShopIDList( strShopList );
		}
		if( target.getSelectedItem() instanceof MstShop )
		{
			mstts.setShopIDList( ( (MstShop)target.getSelectedItem() ).getShopID().toString() );
			mss.setShopIDList( ( (MstShop)target.getSelectedItem() ).getShopID().toString() );
		}
		getStaffList();
	}
	
	/**
	 * ÉXÉ^ÉbÉtÉfÅ[É^ÇéÊìæÇ∑ÇÈ
	 */
	private void getStaffList()
	{
	    try {
		
		MstStaff s;
			
		ConnectionWrapper con = SystemInfo.getConnection();
		mss.load( con, false );
		con.close();

		staff.removeAllItems();

		s = new MstStaff();
		s.setStaffID( -1 );
		staff.addItem( s );

		for (MstStaff ms : mss) {
		    staff.addItem( ms );
		}
		
	    } catch(SQLException e) {
		SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }
	}
	
    /**
     * ãZèpçiçûÇ›ÉäÉXÉgÇçXêVÇ∑ÇÈ
     */
    private void refreshTechnicClass()
    {
	    // ãZèpÉ}ÉXÉ^
	    MstTechnicClass mtc = (MstTechnicClass)technicClass.getSelectedItem();
	    
	    // ëSÇƒÇÃì‡óeÇçÌèú
	    technic.removeAllItems();
	    for( MstTechnic mt : mts ) {
		if( ( mtc.getTechnicClassID() == mt.getTechnicClass().getTechnicClassID() )||
			( mtc.getTechnicClassID() == -1 )||
			( mt.getTechnicClass().getTechnicClassID() == -1 ) )
		{
		    technic.addItem( mt ); 
		}
	    }
	    mstts.setTechnicClassID( mtc.getTechnicClassID() );

	    //ì¸óÕÇÉNÉäÉAÇ∑ÇÈ
	    technic.setSelectedIndex( technic.getItemCount() == 0 ? -1 : 0 );
	    
	    // ÉtÉHÅ[ÉJÉXÇéÊìæ
	    technic.requestFocusInWindow();
    }
	
    /**
     * ãZèpçiçûÇ›ÉäÉXÉgÇçXêVÇ∑ÇÈ
     */
    private void refreshTechnic()
    {
	// ãZèpÉ}ÉXÉ^
	MstTechnic mt = (MstTechnic)technic.getSelectedItem();
	mstts.setTechnicID( mt == null ? -1 : mt.getTechnicID() );
    }
	
	/**
	 * ÉXÉ^ÉbÉté{èpéûä‘ÇéÊìæÇ∑ÇÈ
	 */
	private void refreshStaffTechnicTime()
	{
		mstts.setLimitNum( -1 );

		// é{èpéûä‘ÇéÊìæÇ∑ÇÈ
		mstts.load();
		
		DefaultTableModel model = (DefaultTableModel)technicTime.getModel();
		
		if( technicTime.getCellEditor() != null ) technicTime.getCellEditor().stopCellEditing();
		model.setRowCount(0);
		SwingUtil.clearTable(technicTime);
		
		for( MstStaffTechnicTime mstt : mstts )
		{
			JButton initTimeButton = getTimeInitButton( mstt.getTechnic().getOperationTime() );
			
			Object[] rowData = { mstt.getTechnic().getTechnicClass().getTechnicClassName(),
					     mstt.getTechnic().getTechnicName(),
					     mstt.getStaff().toString(),
					     mstt.getOperationTime(),
					     initTimeButton
					   };
			model.addRow(rowData);
		}
	}
	
	private JButton getTimeInitButton( Integer technicTime )
	{
		javax.swing.JButton button = new javax.swing.JButton( technicTime.toString() );

		button.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				initTechnicTime();
			}
		});
		return button;
	}
	
	/**
	 * ëIëÉåÉRÅ[ÉhÇÃé{èpéûä‘Çèâä˙âªÇ∑ÇÈ
	 */
	private void initTechnicTime()
	{
		int Index = technicTime.getSelectedRow();
		technicTime.setValueAt( ( (MstStaffTechnicTime)mstts.get( Index ) ).getTechnic().getOperationTime(), Index, 3 );
	}
	
	private void initTableColumnWidth()
	{
		//óÒÇÃïùÇê›íËÇ∑ÇÈÅB
		technicTime.getColumnModel().getColumn(0).setPreferredWidth(150);
		technicTime.getColumnModel().getColumn(1).setPreferredWidth(150);
		technicTime.getColumnModel().getColumn(2).setPreferredWidth(150);
		technicTime.getColumnModel().getColumn(3).setPreferredWidth(100);
		technicTime.getColumnModel().getColumn(4).setPreferredWidth(100);
	}
	
	private boolean checkInput()
	{
		for( int i = 0; i < mstts.size(); i++ )
		{
			mstts.get( i ).setOperationTime( (Integer)technicTime.getValueAt( i, 3 ) );
		}
		return true;
	}
	
	private void regist()
	{
		mstts.regist();
	}
}
