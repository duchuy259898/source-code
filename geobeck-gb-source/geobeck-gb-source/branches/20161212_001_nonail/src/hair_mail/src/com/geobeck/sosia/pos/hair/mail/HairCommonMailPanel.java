/*
 * HairCommonMailPanel.java
 *
 * Created on 2006/11/06, 9:26
 */

package com.geobeck.sosia.pos.hair.mail;

import java.util.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.util.logging.*;

import com.geobeck.swing.*;
import com.geobeck.sosia.pos.mail.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.hair.search.product.*;
import com.geobeck.sosia.pos.search.mail.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.products.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.master.customer.*;
import com.geobeck.sosia.pos.master.mail.*;
import com.geobeck.sosia.pos.hair.customer.*;
import com.geobeck.sosia.pos.hair.data.account.ConsumptionCourse;
import com.geobeck.sosia.pos.hair.data.account.Course;
import com.geobeck.sosia.pos.hair.report.*;
import com.geobeck.sosia.pos.hair.data.mail.DataDmHistoryDetail;
import com.geobeck.sql.ConnectionWrapper;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author  katagiri
 */
public class HairCommonMailPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx implements SearchHairProductOpener
{
	public HairCommonMailPanel(Object target, ArrayList<MstCustomer> targetCustomers)
	{
	    this.targetCustomers = targetCustomers;
	    this.setTarget(target);
            this.init();
	}

	public HairCommonMailPanel(Object target, ArrayList<MstCustomer> targetCustomers, Map mapMail)
	{
	    this.targetCustomers = targetCustomers;
	    this.setTarget(target);
            this.mapMail = mapMail;
            this.init();
	}

        private void init() {
	    this.optimizeSelectedArray(0);
	    this.setMailDatas(0);
	    initComponents();
            this.addMouseCursorChange();
	    this.setSize(833, 691);
	    this.setPath("メール機能 >> 条件検索");
	    this.setTitle("メール作成");
	    this.initCustomersTable();

            if (!SystemInfo.isUsePointcard()){
                pointKey.setVisible(false);
            }

            sendDate.setDate(new java.util.Date());
            for (int i = 8; i <= 22; i++) {
                sendHour.addItem(i);
            }
            //IVS_LVTu start add 2016/02/23 New request #48621
            courseKey.setVisible(this.courseFlag);
            //IVS_LVTu end add 2016/02/23 New request #48621

        }
        
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        keyPanel = new javax.swing.JPanel();
        customerNameKey = new javax.swing.JButton();
        staffNameKey = new javax.swing.JButton();
        lastVisitKey = new javax.swing.JButton();
        technicKey = new javax.swing.JButton();
        itemKey = new javax.swing.JButton();
        shopAddressKey = new javax.swing.JButton();
        shopTelKey = new javax.swing.JButton();
        shopMailKey = new javax.swing.JButton();
        signatureKey = new javax.swing.JButton();
        nextReservationKey = new javax.swing.JButton();
        reservationStaffKey = new javax.swing.JButton();
        pointKey = new javax.swing.JButton();
        shopNameKey = new javax.swing.JButton();
        nextReservationMenuKey = new javax.swing.JButton();
        courseKey = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        viewTab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        templateButton = new javax.swing.JButton();
        mailTitleLabel = new javax.swing.JLabel();
        mailTitle = new javax.swing.JFormattedTextField();
        mailBodyLabel = new javax.swing.JLabel();
        mailBodyScrollPane = new javax.swing.JScrollPane();
        mailBody = new javax.swing.JTextArea();
        mailBodyLabel1 = new javax.swing.JLabel();
        previewPanel = new javax.swing.JPanel();
        previewTitleLabel = new javax.swing.JLabel();
        previewTitle = new javax.swing.JFormattedTextField();
        previewBodyLabel = new javax.swing.JLabel();
        previewBodyScrollPane = new javax.swing.JScrollPane();
        previewBody = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        customersScrollPane = new javax.swing.JScrollPane();
        customersTable = new com.geobeck.swing.JTableEx();
        jPanel2 = new javax.swing.JPanel();
        applyAllButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();
        applyIndividualButton = new javax.swing.JButton();
        mailType = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        jLabel19 = new javax.swing.JLabel();
        targetCount = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        historyButton = new javax.swing.JButton();
        dmTitle = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        rdoSendNow = new javax.swing.JRadioButton();
        rdoSendNext = new javax.swing.JRadioButton();
        sendDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
        sendHour = new javax.swing.JComboBox();
        sendHourLabel = new javax.swing.JLabel();

        setFocusCycleRoot(true);

        keyPanel.setOpaque(false);

        customerNameKey.setIcon(SystemInfo.getImageIcon("/button/key/customer_name_off.jpg"));
        customerNameKey.setBorderPainted(false);
        customerNameKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/customer_name_on.jpg"));
        customerNameKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNameKeyActionPerformed(evt);
            }
        });

        staffNameKey.setIcon(SystemInfo.getImageIcon("/button/key/staff_name_off.jpg"));
        staffNameKey.setBorderPainted(false);
        staffNameKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/staff_name_on.jpg"));
        staffNameKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffNameKeyActionPerformed(evt);
            }
        });

        lastVisitKey.setIcon(SystemInfo.getImageIcon("/button/key/last_visit_off.jpg"));
        lastVisitKey.setBorderPainted(false);
        lastVisitKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/last_visit_on.jpg"));
        lastVisitKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastVisitKeyActionPerformed(evt);
            }
        });

        technicKey.setIcon(SystemInfo.getImageIcon("/button/key/technic_name_off.jpg"));
        technicKey.setBorderPainted(false);
        technicKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/technic_name_on.jpg"));
        technicKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                technicKeyActionPerformed(evt);
            }
        });

        itemKey.setIcon(SystemInfo.getImageIcon("/button/key/item_name_off.jpg"));
        itemKey.setBorderPainted(false);
        itemKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/item_name_on.jpg"));
        itemKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemKeyActionPerformed(evt);
            }
        });

        shopAddressKey.setIcon(SystemInfo.getImageIcon("/button/key/shop_address_off.jpg"));
        shopAddressKey.setBorderPainted(false);
        shopAddressKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/shop_address_on.jpg"));
        shopAddressKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopAddressKeyActionPerformed(evt);
            }
        });

        shopTelKey.setIcon(SystemInfo.getImageIcon("/button/key/shop_tel_off.jpg"));
        shopTelKey.setBorderPainted(false);
        shopTelKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/shop_tel_on.jpg"));
        shopTelKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopTelKeyActionPerformed(evt);
            }
        });

        shopMailKey.setIcon(SystemInfo.getImageIcon("/button/key/shop_mail_off.jpg"));
        shopMailKey.setBorderPainted(false);
        shopMailKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/shop_mail_on.jpg"));
        shopMailKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopMailKeyActionPerformed(evt);
            }
        });

        signatureKey.setIcon(SystemInfo.getImageIcon("/button/key/signature_off.jpg"));
        signatureKey.setBorderPainted(false);
        signatureKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/signature_on.jpg"));
        signatureKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signatureKeyActionPerformed(evt);
            }
        });

        nextReservationKey.setIcon(SystemInfo.getImageIcon("/button/key/next_reservation_off.jpg"));
        nextReservationKey.setBorderPainted(false);
        nextReservationKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/next_reservation_on.jpg"));
        nextReservationKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextReservationKeyActionPerformed(evt);
            }
        });

        reservationStaffKey.setIcon(SystemInfo.getImageIcon("/button/key/reservation_staff_off.jpg"));
        reservationStaffKey.setBorderPainted(false);
        reservationStaffKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/reservation_staff_on.jpg"));
        reservationStaffKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservationStaffKeyActionPerformed(evt);
            }
        });

        pointKey.setIcon(SystemInfo.getImageIcon("/button/common/point_off.jpg"));
        pointKey.setBorderPainted(false);
        pointKey.setPressedIcon(SystemInfo.getImageIcon("/button/common/point_on.jpg"));
        pointKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointKeyActionPerformed(evt);
            }
        });

        shopNameKey.setIcon(SystemInfo.getImageIcon("/button/key/shop_name_off.jpg"));
        shopNameKey.setBorderPainted(false);
        shopNameKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/shop_name_on.jpg"));
        shopNameKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopNameKeyActionPerformed(evt);
            }
        });

        nextReservationMenuKey.setIcon(SystemInfo.getImageIcon("/button/key/next_reservation_menu_off.jpg"));
        nextReservationMenuKey.setBorderPainted(false);
        nextReservationMenuKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/next_reservation_menu_on.jpg"));
        nextReservationMenuKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextReservationMenuKeyActionPerformed(evt);
            }
        });

        courseKey.setIcon(SystemInfo.getImageIcon("/button/key/course_name_off.jpg"));
        courseKey.setBorderPainted(false);
        courseKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/course_name_on.jpg"));
        courseKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseKeyActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout keyPanelLayout = new org.jdesktop.layout.GroupLayout(keyPanel);
        keyPanel.setLayout(keyPanelLayout);
        keyPanelLayout.setHorizontalGroup(
            keyPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(customerNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(staffNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(lastVisitKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(technicKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(itemKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(shopNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(shopAddressKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(shopTelKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(shopMailKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(signatureKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(nextReservationKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(pointKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(nextReservationMenuKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(reservationStaffKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(courseKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        keyPanelLayout.setVerticalGroup(
            keyPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(keyPanelLayout.createSequentialGroup()
                .add(customerNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(staffNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lastVisitKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pointKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(technicKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(itemKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(courseKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(shopNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(shopAddressKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(shopTelKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(shopMailKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(signatureKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(nextReservationKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reservationStaffKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(nextReservationMenuKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        backButton.setIcon(SystemInfo.getImageIcon("/button/common/back_off.jpg"));
        backButton.setBorderPainted(false);
        backButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/back_on.jpg"));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        viewTab.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                viewTabStateChanged(evt);
            }
        });

        jPanel1.setOpaque(false);

        templateButton.setIcon(SystemInfo.getImageIcon("/button/mail/template_off.jpg"));
        templateButton.setBorderPainted(false);
        templateButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/template_on.jpg"));
        templateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateButtonActionPerformed(evt);
            }
        });

        mailTitleLabel.setText("タイトル");

        mailTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        mailBodyLabel.setText("本文");

        mailBodyScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        mailBody.setColumns(20);
        mailBody.setLineWrap(true);
        mailBody.setRows(5);
        mailBody.setWrapStyleWord(true);
        mailBody.setVerifyInputWhenFocusTarget(false);
        mailBodyScrollPane.setViewportView(mailBody);

        mailBodyLabel1.setForeground(java.awt.Color.blue);
        mailBodyLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        mailBodyLabel1.setText("※ 1行の文字数は100文字程度で改行してください。");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, mailBodyScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, mailTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(mailTitleLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 204, Short.MAX_VALUE)
                        .add(templateButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(mailBodyLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mailBodyLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(templateButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mailTitleLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mailTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mailBodyLabel)
                    .add(mailBodyLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mailBodyScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addContainerGap())
        );

        viewTab.addTab("本文作成", jPanel1);

        previewPanel.setOpaque(false);

        previewTitleLabel.setText("タイトル");

        previewTitle.setEditable(false);
        previewTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        previewBodyLabel.setText("本文");

        previewBodyScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        previewBody.setColumns(20);
        previewBody.setEditable(false);
        previewBody.setLineWrap(true);
        previewBody.setRows(5);
        previewBody.setWrapStyleWord(true);
        previewBody.setVerifyInputWhenFocusTarget(false);
        previewBodyScrollPane.setViewportView(previewBody);

        org.jdesktop.layout.GroupLayout previewPanelLayout = new org.jdesktop.layout.GroupLayout(previewPanel);
        previewPanel.setLayout(previewPanelLayout);
        previewPanelLayout.setHorizontalGroup(
            previewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(previewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(previewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(previewBodyScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .add(previewTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .add(previewBodyLabel)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, previewPanelLayout.createSequentialGroup()
                        .add(previewTitleLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 204, Short.MAX_VALUE)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        previewPanelLayout.setVerticalGroup(
            previewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(previewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(previewPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(previewTitleLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(previewTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(previewBodyLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(previewBodyScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addContainerGap())
        );

        viewTab.addTab("プレビュー", previewPanel);

        customersScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "<html>送信<br>対象</html> ", "顧客情報", "氏名", "メールアドレス"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.getTableHeader().setReorderingAllowed(false);
        customersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        SwingUtil.setJTableHeaderRenderer(customersTable, SystemInfo.getTableHeaderRenderer());
        customersTable.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        customersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                customersTableMouseReleased(evt);
            }
        });
        customersTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customersTableKeyReleased(evt);
            }
        });
        customersScrollPane.setViewportView(customersTable);

        jPanel2.setOpaque(false);

        applyAllButton.setIcon(SystemInfo.getImageIcon("/button/common/apply_all_off.jpg"));
        applyAllButton.setBorderPainted(false);
        applyAllButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/apply_all_on.jpg"));
        applyAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyAllButtonActionPerformed(evt);
            }
        });

        sendButton.setIcon(SystemInfo.getImageIcon("/button/mail/send_mail_off.jpg"));
        sendButton.setBorderPainted(false);
        sendButton.setPressedIcon(SystemInfo.getImageIcon("/button/mail/send_mail_on.jpg"));
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        applyIndividualButton.setIcon(SystemInfo.getImageIcon("/button/common/apply_individual_off.jpg"));
        applyIndividualButton.setBorderPainted(false);
        applyIndividualButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/apply_individual_on.jpg"));
        applyIndividualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyIndividualButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(applyAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(applyIndividualButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 67, Short.MAX_VALUE)
                .add(sendButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(sendButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(applyIndividualButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(applyAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mailType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "携帯優先 (未登録の場合、PCに送信)", "携帯のみ", "PC優先 (未登録の場合、携帯に送信)", "PCのみ" }));
        mailType.setFocusCycleRoot(true);
        mailType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailTypeActionPerformed(evt);
            }
        });

        jLabel19.setText("【送信先メールアドレス設定】");

        targetCount.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        targetCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        targetCount.setText("25000 人");

        jLabel20.setText("【対象人数】");

        jLabel21.setFont(new java.awt.Font("ＭＳ ゴシック", 1, 12)); // NOI18N
        jLabel21.setForeground(java.awt.Color.red);
        jLabel21.setText("<html>\nメール本文の作成後に必ず『全て適用』をクリックして<br>\n送信文を確定させてください。<br>\n<br>\n個別に文章を追加する場合は、顧客氏名を選択した状態で<br>\n本文を追加し『個別適用』をクリックしてください。\n</html>");

        historyButton.setIcon(SystemInfo.getImageIcon("/button/common/regist_history_off.jpg"));
        historyButton.setBorderPainted(false);
        historyButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_history_on.jpg"));
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        jLabel22.setText("DMタイトル");

        buttonGroup.add(rdoSendNow);
        rdoSendNow.setSelected(true);
        rdoSendNow.setText("即時配信");
        rdoSendNow.setOpaque(false);
        rdoSendNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSendNowActionPerformed(evt);
            }
        });

        buttonGroup.add(rdoSendNext);
        rdoSendNext.setText("配信予約");
        rdoSendNext.setOpaque(false);
        rdoSendNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoSendNextActionPerformed(evt);
            }
        });

        sendDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        sendDate.setDate(new java.util.Date());
        sendDate.setEnabled(false);

        sendHour.setMaximumRowCount(20);
        sendHour.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        sendHour.setEnabled(false);

        sendHourLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sendHourLabel.setText("時");
        sendHourLabel.setEnabled(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(jLabel19)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 117, Short.MAX_VALUE)
                                .add(jLabel20))
                            .add(layout.createSequentialGroup()
                                .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(21, 21, 21)
                                .add(jLabel22)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(dmTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, targetCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(customersScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(4, 4, 4)
                                .add(historyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(13, 13, 13)
                                .add(keyPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(mailType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 221, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, viewTab)
                            .add(jLabel21)
                            .add(layout.createSequentialGroup()
                                .add(rdoSendNow)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(rdoSendNext)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(sendDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(sendHour, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, 0)
                                .add(sendHourLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(sendHour, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(sendHourLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(sendDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(rdoSendNow)
                                .add(rdoSendNext)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(viewTab))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(dmTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(historyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel20)
                                    .add(jLabel19))
                                .add(1, 1, 1)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(mailType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(targetCount))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(customersScrollPane))
                            .add(keyPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reservationStaffKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservationStaffKeyActionPerformed
	insertKey(MailUtil.KEY_RESERVATION_STAFF);
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_reservationStaffKeyActionPerformed

    private void nextReservationKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextReservationKeyActionPerformed
	insertKey(MailUtil.KEY_NEXT_RESERVATION);
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_nextReservationKeyActionPerformed

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed

        historyButton.setCursor(null);
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            registDmHistory();
        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

    }//GEN-LAST:event_historyButtonActionPerformed

    private void applyIndividualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyIndividualButtonActionPerformed
        //Luc start edit 20160413 
        //IVS_PTThu edit 20160419 #49573
        if (DBUtil.isErrorString(mailBody.getText())) {
            MessageDialog.showMessageDialog(
                    this,
                    "本文に特殊文字が含まれているため適用できません。",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (DBUtil.isErrorString(mailTitle.getText())) {
            MessageDialog.showMessageDialog(
                    this,
                    "タイトルに特殊文字が含まれているため適用できません。",
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        //IVS_PTThu end edit 20160419 #49573
        DataMail dm = mailDatas.get(customersTable.getSelectedRow());
	dm.setMailTitle(mailTitle.getText());
	dm.setMailBody(mailBody.getText());
        
        MessageDialog.showMessageDialog(
            this,
            "個別適用しました。",
            this.getTitle(),
            JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_applyIndividualButtonActionPerformed

    private void mailTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailTypeActionPerformed
	mailTitle.setText("");
	mailBody.setText("");
	this.optimizeSelectedArray(mailType.getSelectedIndex());
	this.setMailDatas(mailType.getSelectedIndex());
	this.initCustomersTable();
    }//GEN-LAST:event_mailTypeActionPerformed

    private void staffNameKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffNameKeyActionPerformed
	insertKey(MailUtil.KEY_STAFF_NAME);
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_staffNameKeyActionPerformed

    private void shopNameKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopNameKeyActionPerformed
//		insertKey(targetName);
	insertKey(MailUtil.KEY_TARGET_NAME);
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_shopNameKeyActionPerformed

    private void shopAddressKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopAddressKeyActionPerformed
//		insertKey(targetAddress);
	insertKey(MailUtil.KEY_TARGET_ADDRESS);
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_shopAddressKeyActionPerformed

    private void shopTelKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopTelKeyActionPerformed
//		insertKey(targetPhoneNumber);
	insertKey(MailUtil.KEY_TARGET_TEL);
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_shopTelKeyActionPerformed

    private void shopMailKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopMailKeyActionPerformed
//	    insertKey(targetMailAddress);
	insertKey(MailUtil.KEY_TARGET_MAIL);
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_shopMailKeyActionPerformed

    private void itemKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemKeyActionPerformed
	SystemInfo.getLogger().log(Level.INFO, "商品検索");
        //IVS_LVTu start edit 2016/02/23 New request #48621
	//SearchHairProductDialog	spd	=	new SearchHairProductDialog(parentFrame, true, this, 2);
        MstShop shop = new MstShop();
        shop.setShopID(shopID);
        SearchHairProductDialog	spd = new SearchHairProductDialog(parentFrame, true, this, shop, 2);
        //IVS_LVTu end edit 2016/02/23 New request #48621
	spd.setVisible(true);
	spd = null;
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_itemKeyActionPerformed

    private void technicKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_technicKeyActionPerformed
	SystemInfo.getLogger().log(Level.INFO, "技術検索");
        //IVS_LVTu start edit 2016/02/23 New request #48621
	//SearchHairProductDialog	spd	=	new SearchHairProductDialog(parentFrame, true, this, 1);
        MstShop shop = new MstShop();
        shop.setShopID(shopID);
        SearchHairProductDialog	spd = new SearchHairProductDialog(parentFrame, true, this, shop, 1);
        //IVS_LVTu end edit 2016/02/23 New request #48621
	spd.setVisible(true);
	spd = null;
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_technicKeyActionPerformed

    private void customerNameKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNameKeyActionPerformed
	insertKey(MailUtil.KEY_CUSTOMER_NAME);
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_customerNameKeyActionPerformed

    private void lastVisitKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastVisitKeyActionPerformed
	insertKey(MailUtil.KEY_LAST_VISIT);
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_lastVisitKeyActionPerformed

    private void signatureKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signatureKeyActionPerformed
	SystemInfo.getLogger().log(Level.INFO, "署名検索");
	SearchMailSignatureDialog	smsd	=	new SearchMailSignatureDialog(parentFrame, true, groupID, shopID);
	smsd.setVisible(true);
	
	if (smsd.getSelectedSignatureID() != null) {
	    insertKey("[署名" + smsd.getSelectedSignatureID().toString() + "]");
	}
	
	smsd = null;
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_signatureKeyActionPerformed

	private void viewTabStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_viewTabStateChanged
	{//GEN-HEADEREND:event_viewTabStateChanged
	    if(viewTab.getSelectedIndex() == 1) {
		this.showPreview();
	    }
	}//GEN-LAST:event_viewTabStateChanged

	private void customersTableMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_customersTableMouseReleased
	{//GEN-HEADEREND:event_customersTableMouseReleased
	    this.changeSelectedCustomer();
	}//GEN-LAST:event_customersTableMouseReleased

	private void customersTableKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_customersTableKeyReleased
	{//GEN-HEADEREND:event_customersTableKeyReleased
	    this.changeSelectedCustomer();
	}//GEN-LAST:event_customersTableKeyReleased

	private void templateButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_templateButtonActionPerformed
	{//GEN-HEADEREND:event_templateButtonActionPerformed
	    SystemInfo.getLogger().log(Level.INFO, "テンプレート検索");
	    SearchMailTemplateDialog smtd = new SearchMailTemplateDialog(parentFrame, true, groupID, shopID);
	    smtd.setVisible(true);

	    MstMailTemplate result = smtd.getSelectedTemplate();

	    if (result != null) {
		mailTitle.setText(result.getMailTemplateTitle());
		mailBody.setText(result.getMailTemplateBody());
                mailTitle.setCaretPosition(0);
                mailBody.setCaretPosition(0);
	    }

	    smtd = null;
	}//GEN-LAST:event_templateButtonActionPerformed

	private void backButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButtonActionPerformed
	{//GEN-HEADEREND:event_backButtonActionPerformed
            boolean isDialog = false;
            isDialog = isDialog || this.getOpener() instanceof ReappearancePredictionPanel;
            isDialog = isDialog || this.getOpener() instanceof StaffShopRankingDecilePanel;
            isDialog = isDialog || this.getOpener() instanceof KarteAnalysisPanel;
            isDialog = isDialog || this.getOpener() instanceof Ito3DCustomerListPanel;
            isDialog = isDialog || this.getOpener() instanceof MstCustomerPanel;
            //nhanvt start add 20150126 GB_Mashu Task #34581
            isDialog = isDialog || this.getOpener() instanceof MasherRankingPanel;
            //nhanvt end add 20150126 GB_Mashu Task #34581
            if (isDialog) {
		((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
	    } else {
		this.showOpener();
	    }
	}//GEN-LAST:event_backButtonActionPerformed

	private void applyAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyAllButtonActionPerformed
            //IVS_PTThu edit 20160419 #49573
            if (DBUtil.isErrorString(mailBody.getText())) {
                MessageDialog.showMessageDialog(
                        this,
                        "本文に特殊文字が含まれているため適用できません。",
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (DBUtil.isErrorString(mailTitle.getText())) {
                MessageDialog.showMessageDialog(
                        this,
                        "タイトルに特殊文字が含まれているため適用できません。",
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            //IVS_PTThu end edit 20160419 #49573
            for(DataMail dm : mailDatas) {
		dm.setMailTitle(mailTitle.getText());
		dm.setMailBody(mailBody.getText());
	    }
            
            MessageDialog.showMessageDialog(
                this,
                "全て適用しました。",
                this.getTitle(),
                JOptionPane.INFORMATION_MESSAGE);
            
	}//GEN-LAST:event_applyAllButtonActionPerformed

	private void sendButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sendButtonActionPerformed
	{//GEN-HEADEREND:event_sendButtonActionPerformed
	    this.sendMail();
	}//GEN-LAST:event_sendButtonActionPerformed

        private void pointKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointKeyActionPerformed
            insertKey(MailUtil.KEY_POINT);
            mailBody.requestFocusInWindow();
        }//GEN-LAST:event_pointKeyActionPerformed

        private void nextReservationMenuKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextReservationMenuKeyActionPerformed
            insertKey(MailUtil.KEY_NEXT_RESERVATION_MENU);
            mailBody.requestFocusInWindow();
        }//GEN-LAST:event_nextReservationMenuKeyActionPerformed

        private void rdoSendNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSendNowActionPerformed
            sendDateTimeEnabled(false);
        }//GEN-LAST:event_rdoSendNowActionPerformed

        private void rdoSendNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoSendNextActionPerformed
            sendDateTimeEnabled(true);
        }//GEN-LAST:event_rdoSendNextActionPerformed

    //IVS_LVTu start add 2016/02/23 New request #48621
    private void courseKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseKeyActionPerformed
        SystemInfo.getLogger().log(Level.INFO, "コース名");
        MstShop shop = new MstShop();
        shop.setShopID(shopID);
        SearchHairProductDialog	spd = new SearchHairProductDialog(parentFrame, true, this, shop, 5);
	spd.setVisible(true);
	spd = null;
	mailBody.requestFocusInWindow();
    }//GEN-LAST:event_courseKeyActionPerformed
    //IVS_LVTu end add 2016/02/23 New request #48621	
        private void sendDateTimeEnabled(boolean mode) {
            sendDate.setEnabled(mode);
            sendHour.setEnabled(mode);
            sendHourLabel.setEnabled(mode);
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyAllButton;
    private javax.swing.JButton applyIndividualButton;
    private javax.swing.JButton backButton;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton courseKey;
    private javax.swing.JButton customerNameKey;
    private javax.swing.JScrollPane customersScrollPane;
    private com.geobeck.swing.JTableEx customersTable;
    private javax.swing.JTextField dmTitle;
    private javax.swing.JButton historyButton;
    private javax.swing.JButton itemKey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel keyPanel;
    private javax.swing.JButton lastVisitKey;
    private javax.swing.JTextArea mailBody;
    private javax.swing.JLabel mailBodyLabel;
    private javax.swing.JLabel mailBodyLabel1;
    private javax.swing.JScrollPane mailBodyScrollPane;
    private javax.swing.JFormattedTextField mailTitle;
    private javax.swing.JLabel mailTitleLabel;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel mailType;
    private javax.swing.JButton nextReservationKey;
    private javax.swing.JButton nextReservationMenuKey;
    private javax.swing.JButton pointKey;
    private javax.swing.JTextArea previewBody;
    private javax.swing.JLabel previewBodyLabel;
    private javax.swing.JScrollPane previewBodyScrollPane;
    private javax.swing.JPanel previewPanel;
    private javax.swing.JFormattedTextField previewTitle;
    private javax.swing.JLabel previewTitleLabel;
    private javax.swing.JRadioButton rdoSendNext;
    private javax.swing.JRadioButton rdoSendNow;
    private javax.swing.JButton reservationStaffKey;
    private javax.swing.JButton sendButton;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo sendDate;
    private javax.swing.JComboBox sendHour;
    private javax.swing.JLabel sendHourLabel;
    private javax.swing.JButton shopAddressKey;
    private javax.swing.JButton shopMailKey;
    private javax.swing.JButton shopNameKey;
    private javax.swing.JButton shopTelKey;
    private javax.swing.JButton signatureKey;
    private javax.swing.JButton staffNameKey;
    private javax.swing.JLabel targetCount;
    private javax.swing.JButton technicKey;
    private javax.swing.JButton templateButton;
    private javax.swing.JTabbedPane viewTab;
    // End of variables declaration//GEN-END:variables
	
	private	Integer		groupID			=	null;
	private	Integer		shopID			=	null;
	
	private	Object		target			=	null;
	private	String		targetName		=	"";
	private	String		targetAddress		=	"";
	private	String		targetPhoneNumber	=	"";
	private	String		targetMailAddress	=	"";

        private Map                    mapMail          =       null;
	private ArrayList<MstCustomer> targetCustomers	=	null;
	private ArrayList<MstCustomer> mailCustomers	=	new ArrayList<MstCustomer>();
	private ArrayList<DataMail>    baseDatas        =	new ArrayList<DataMail>();
	private ArrayList<DataMail>    mailDatas	=	new ArrayList<DataMail>();
        private ArrayList<DataMail>    targetList       =       new ArrayList<DataMail>();

	private Integer		selectedIndex		=	-1;
        
        //IVS_LVTu start add 2016/02/23 New request #48621
        private boolean         courseFlag              =       true;
	//IVS_LVTu end add 2016/02/23 New request #48621
	/**
	 * メール送信画面用FocusTraversalPolicy
	 */
	private	HairCommonMailFocusTraversalPolicy	ftp	=
			new HairCommonMailFocusTraversalPolicy();
	
	/**
	 * メール送信画面用FocusTraversalPolicyを取得する。
	 * @return メール送信画面用FocusTraversalPolicy
	 */
	public HairCommonMailFocusTraversalPolicy getFocusTraversalPolicy()
	{
	    return	ftp;
	}

        /**
         * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
         */
        private void addMouseCursorChange() {
            SystemInfo.addMouseCursorChange(backButton);
            SystemInfo.addMouseCursorChange(historyButton);
            SystemInfo.addMouseCursorChange(applyAllButton);
            SystemInfo.addMouseCursorChange(applyIndividualButton);
            SystemInfo.addMouseCursorChange(sendButton);
            SystemInfo.addMouseCursorChange(templateButton);
        }
        
	/**
	 * 対象グループ・店舗のグループＩＤを設定する。
	 */
	public void setGroupID(Integer groupID)
	{
	    this.groupID = groupID;
	}

	/**
	 * 対象グループ・店舗の店舗ＩＤを設定する。
	 */
	public void setShopID(Integer shopID)
	{
	    this.shopID = shopID;
	}

	/**
	 * 対象グループ・店舗の名称を設定する。
	 */
	public void setTargetName(String targetName)
	{
		this.targetName = targetName;
	}

	/**
	 * 対象グループ・店舗の住所を設定する。
	 */
	public void setTargetAddress(String targetAddress)
	{
		this.targetAddress = targetAddress;
	}

	/**
	 * 対象グループ・店舗の電話番号を設定する。
	 */
	public void setTargetPhoneNumber(String targetPhoneNumber)
	{
		this.targetPhoneNumber = targetPhoneNumber;
	}

	/**
	 * 対象グループ・店舗のメールアドレスを設定する。
	 */
	public void setTargetMailAddress(String targetMailAddress)
	{
		this.targetMailAddress = targetMailAddress;
	}

	/**
	 * 対象グループ・店舗のグループＩＤを取得する。
	 */
	public Integer getGroupID()
	{
		return groupID;
	}

	/**
	 * 対象グループ・店舗の店舗ＩＤを取得する。
	 */
	public Integer getShopID()
	{
		return shopID;
	}

	/**
	 * 対象グループ・店舗の名称を取得する。
	 */
	public String getTargetName()
	{
		return targetName;
	}

	/**
	 * 対象グループ・店舗の住所を取得する。
	 */
	public String getTargetAddress()
	{
		return targetAddress;
	}

	/**
	 * 対象グループ・店舗の電話番号を設定する。
	 */
	public String getTargetPhoneNumber()
	{
		return targetPhoneNumber;
	}

	/**
	 * 対象グループ・店舗のメールアドレスを取得する。
	 */
	public String getTargetMailAddress()
	{
		return targetMailAddress;
	}
	
	/**
	 * キー項目を挿入する。
	 */
	private void insertKey(String keyString)
	{
		mailBody.replaceRange(keyString,
				mailBody.getSelectionStart(),
				mailBody.getSelectionEnd());
	}
	
        //IVS_LVTu start edit 2016/02/23 New request #48621
	/**
	 * 対象グループ・店舗情報を設定する。
	 */
	private void setTarget(Object target)
	{
		this.target	=	target;
		
		if(target instanceof MstGroup)
		{
			MstGroup	group	=	(MstGroup)target;
			
			groupID				=	group.getGroupID();
			shopID				=	0;
			targetName			=	group.getGroupName();
			targetAddress		=	group.getFullAddress();
			targetPhoneNumber	=	group.getPhoneNumber();
			targetMailAddress	=	group.getMailAddress();
                        
                        if(!checkShopCourseFlag(group) || shopID == 0) {
                            this.courseFlag = false;
                        }
		}
		else if(target instanceof MstShop)
		{
			MstShop		shop	=	(MstShop)target;
			
			groupID				=	shop.getGroupID();
			shopID				=	shop.getShopID();
			targetName			=	shop.getShopName();
			targetAddress		=	shop.getFullAddress();
			targetPhoneNumber	=	shop.getPhoneNumber();
			targetMailAddress	=	shop.getMailAddress();
                        
                        if(shop.getCourseFlag() != 1) {
                            this.courseFlag = false;
                        }
		}
	}
        
        private boolean checkShopCourseFlag(MstGroup mg) {
                //グループ
            if(mg.getShops().size()> 0) {
                for (MstShop mshop : mg.getShops()) {
                    if ( mshop.getCourseFlag().equals(1)) {
                        return true;
                    }
                }
            } else if ( mg.getGroups().size() > 0) {
                for ( int i = 0;i < mg.getGroups().size() ;i ++) {
                    return checkShopCourseFlag(mg.getGroups().get(i));
                }
            }
            return false;
        }

        //IVS_LVTu end edit 2016/02/23 New request #48621
	/**
	 * メールデータを取得する。
	 */
	public ArrayList<DataMail> getMailDatas()
	{
		return mailDatas;
	}

	/**
	 * メールデータを設定する。
	 */
	public void setMailDatas(int selectedAddress)
	{
	    baseDatas.clear();
            
            if (mapMail != null) {

                for(MstCustomer mc : mailCustomers) {
                    DataDmHistoryDetail dhd = (DataDmHistoryDetail)mapMail.get(mc.getCustomerID());
                    baseDatas.add(new DataMail(mc, selectedAddress, dhd.getMailTitle(), dhd.getMailBody()));
                }
                
            } else {

                for(MstCustomer mc : mailCustomers) {
                    baseDatas.add(new DataMail(mc, selectedAddress));
                }
            }
            
            mailDatas.clear();
            mailDatas.addAll(baseDatas);
	}
	
	/**
	 * 共通のメール情報を設定する。
	 */
	public void setCommonMailData()
	{
            targetList.clear();
            
	    int row = 0;
	    for (DataMail dm : baseDatas) {
		if(((JCheckBox)customersTable.getValueAt(row, 0)).isSelected()){
                    targetList.add(dm);
		}
		row++;
	    }
	}
	
	private void initCustomersTable()
	{
	    DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
	    if( customersTable.getCellEditor() != null ) customersTable.getCellEditor().stopCellEditing();
	    SwingUtil.clearTable(customersTable);

	    for (DataMail dm : mailDatas) {
		model.addRow(new Object[]
		{
		    getTargetFlag(true), getUserSearchButton(dm.getCustomerID()), dm, dm.getSendMailAddress()
		});
	    }

            setTargetCount();
            
	    if (customersTable.getRowCount() > 0) {
		customersTable.setRowSelectionInterval(0, 0);
		selectedIndex = 0;
                mailTitle.setText(mailDatas.get(0).getMailTitle());
                mailBody.setText(mailDatas.get(0).getMailBody());
	    }
	}
	
	/**
	 * プレビューを表示する。
	 */
	private void showPreview()
	{
		if (selectedIndex == -1) return;
		DataMail dm = mailDatas.get(selectedIndex);
		
                String tempTitle = dm.getMailTitle();
                String tempBody = dm.getMailBody();

		dm.setMailBody(mailBody.getText());
		dm.setMailTitle(mailTitle.getText());
		
		previewTitle.setText(MailUtil.decodeKeyTitle(dm, target));
		previewBody.setText(MailUtil.decodeKey(dm, target));

		dm.setMailTitle(tempTitle);
		dm.setMailBody(tempBody);
                
                previewTitle.setCaretPosition(0);
                previewBody.setCaretPosition(0);
	}
	
	private void changeSelectedCustomer()
	{
	    if (0 <= customersTable.getSelectedRow()) {
		
		if (selectedIndex != customersTable.getSelectedRow()) {
		    
		    // タイトルまたは本文が変更されているかチェック
		    boolean isModified = false;
		    isModified = isModified || !mailTitle.getText().equals(mailDatas.get(selectedIndex).getMailTitle());
		    isModified = isModified || !mailBody.getText().equals(mailDatas.get(selectedIndex).getMailBody());
		    
		    // タイトルまたは本文が変更されている場合は確認メッセージ表示
		    if (isModified) {
			int result = MessageDialog.showYesNoCancelDialog(
							this,
							"内容が変更されています。適用しますか？",
							this.getTitle(),
							JOptionPane.QUESTION_MESSAGE);

			if (result == JOptionPane.YES_OPTION) {

			    /****************************/
			    // 「はい」選択時
			    /****************************/
			    mailDatas.get(selectedIndex).setMailTitle(mailTitle.getText());
			    mailDatas.get(selectedIndex).setMailBody(mailBody.getText());
			    mailTitle.setText(mailDatas.get(customersTable.getSelectedRow()).getMailTitle());
			    mailBody.setText(mailDatas.get(customersTable.getSelectedRow()).getMailBody());
			    
			} else if (result == JOptionPane.NO_OPTION) {
			    
			    /****************************/
			    // 「いいえ」選択時
			    /****************************/
			    mailTitle.setText(mailDatas.get(customersTable.getSelectedRow()).getMailTitle());
			    mailBody.setText(mailDatas.get(customersTable.getSelectedRow()).getMailBody());
			    
			} else if (result == JOptionPane.CANCEL_OPTION) {
			    
			    /****************************/
			    // 「キャンセル」選択時
			    /****************************/
			    customersTable.setRowSelectionInterval(selectedIndex, selectedIndex);

			}
		    } else {

			mailTitle.setText(mailDatas.get(customersTable.getSelectedRow()).getMailTitle());
			mailBody.setText(mailDatas.get(customersTable.getSelectedRow()).getMailBody());
			
		    }
                    
                    mailTitle.setCaretPosition(0);
                    mailBody.setCaretPosition(0);

		}
	    }

	    selectedIndex = customersTable.getSelectedRow();
	    this.showPreview();
	}
	
	/**
	 * 選択された技術・商品名を追加する。
	 * @param productDivision 1 - 技術、2 - 商品
	 * @param product 技術・商品
	 */
	public void addSelectedProduct(Integer productDivision, Product product)
	{
//		this.insertKey(product.getProductName());
		if (productDivision == 1) {
		    insertKey("[技術" + product.getProductNo() + "]");
		} else if (productDivision == 2) {
		    insertKey("[商品" + product.getProductNo() + "]");
		}
		
		mailBody.requestFocusInWindow();
	}
	
        //IVS_LVTu start edit 2016/02/23 New request #48621
	public void addSelectedCourse(Integer productDivision, Course course){
            insertKey("[コース" + course.getCourseId() + "]");
            mailBody.requestFocusInWindow();
        }
        //IVS_LVTu end edit 2016/02/23 New request #48621
	public void addSelectedConsumptionCourse(Integer productDivision, ConsumptionCourse consumptionCourse){}

	private void sendMail()
	{
	    this.setCommonMailData();

	    if (targetList.size() > 0) {

		//確認メッセージ
                if (!hasMailBody()) {

                    String msg = "対象顧客のなかで、メール本文が作成されていないものがあります。\n" +
                                 "このまま送信してもよろしいですか？";

                    if (MessageDialog.showYesNoDialog(
                            this, msg, this.getTitle(),
                            JOptionPane.WARNING_MESSAGE) == JOptionPane.NO_OPTION)
                    {
                        return;
                    }

                } else {
                    
                    if(MessageDialog.showYesNoDialog(
                        this,
                        "作成した内容でメールを送信します。よろしいですか？",
                        this.getTitle(),
                        JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION)
                    {
                        return;
                    }
                }
                
                mailDatas.clear();
               
                MailUtil.setMailBody(targetList, mailDatas, target);
                MailUtil.isCcMail = true;
                String sendDt = "";
                if (rdoSendNext.isSelected()) {
                    sendDt = sendDate.getDateStr("/") + " " + sendHour.getSelectedItem().toString() + ":0:0";
                }
                //nhanvt start edit 20150225 Bug #35221
		try {
		    ConnectionWrapper con = SystemInfo.getMailConnection();
                     if(con.getConnection() == null){
                        MessageDialog.showMessageDialog(this,
                                "メールの送信に失敗しました。\n" +
                                "SOSIA POSを再起動して、再度行ってください。",
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
		    if(MailUtil.sendMails(mailDatas, sendDt, con)) {
			
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(200, "メール送信完了"),
				this.getTitle(),
				JOptionPane.INFORMATION_MESSAGE);
                         //vtnhan 20140619 start change Bug #25564
                        if (this.isDialog()) {
                            ((JDialog)this.getParent().getParent().getParent().getParent()).setVisible(false);
                        }else{
                            if(this.getOpener() instanceof HairMailSearchPanel) {
                               HairMailSearchPanel	sad	=	(HairMailSearchPanel)this.getOpener();
                               this.showOpener();
                             }
                        }
                         //vtnhan 20140619 end change Bug #25564
			//this.showOpener();
			
		    } else {
			
			MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(1099),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);	
		    }
                    
				
		} catch(Exception e) {
		    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                    MessageDialog.showMessageDialog(this,
                                "メールの送信に失敗しました。\n" +
                                "SOSIA POSを再起動して、再度行ってください。",
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                        return;
		}
                //nhanvt end edit 20150225 Bug #35221

	    } else {
		MessageDialog.showMessageDialog(this,
			    MessageUtil.getMessage(1112),
			    this.getTitle(),
			    JOptionPane.ERROR_MESSAGE);
	    }
	}
	
	/**
	 * シンプルマスタ登録画面用FocusTraversalPolicy
	 */
	private class HairCommonMailFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(mailTitle)) {
			    return mailBody;
			} else if (aComponent.equals(mailBody)) {
			    return mailTitle;
			}
			
			return mailTitle;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer, Component aComponent)
		{
		    if (aComponent.equals(mailTitle)) {
			return mailBody;
		    } else if (aComponent.equals(mailBody)) {
			return mailTitle;
		    }

		    return mailTitle;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
		    return mailTitle;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
		    return mailBody;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
		    return mailTitle;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
		    return mailTitle;
		}
	}
	
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		customersTable.getColumnModel().getColumn(0).setPreferredWidth(40);
		customersTable.getColumnModel().getColumn(1).setPreferredWidth(70);
		customersTable.getColumnModel().getColumn(3).setPreferredWidth(150);
	}
	
	/**
	 * 対象フラグを取得する
	 */
	private JCheckBox getTargetFlag(boolean isSelected)
	{
		JCheckBox check = new JCheckBox();
		check.setSelected( isSelected );
		check.setOpaque( false );
		check.setHorizontalAlignment(SwingConstants.CENTER);
		check.addActionListener(
			new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                setTargetCount();
			    }
                        });
		return check;
	}
        
        private void setTargetCount() {
            
            int count = 0;
            
	    for (int i = 0; i < customersTable.getRowCount(); i++) {
		if(((JCheckBox)customersTable.getValueAt(i, 0)).isSelected()){
                    count++;
		}
	    }
            
	    targetCount.setText(count + " 人");
        }
        
        /**
	 * ユーザ検索ボタンを取得する
	 */
	private JButton getUserSearchButton(final Integer customerID)
	{
		JButton		searchButton	=	new JButton();
		searchButton.setBorderPainted(false);
		searchButton.setContentAreaFilled(false);
		searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_off.jpg")));
		searchButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/images/" + SystemInfo.getSkinPackage() + "/button/common/customer_on.jpg")));
		searchButton.setSize(48, 25);
		searchButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
                            
                            MstCustomerPanel mcp = null;

                            try {
                                
                                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                                mcp = new MstCustomerPanel(customerID, true, true);
                                SwingUtil.openAnchorDialog(parentFrame, true, mcp, "顧客情報", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );
                                
                            } finally {
                                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            }
                            
                            mcp = null;

			    int row = customersTable.getSelectedRow();
			    MstCustomer mc = mailCustomers.get(row);
			    
			    try {
				MstCustomer mc2 = new MstCustomer(customerID);
				if (mc2.load(SystemInfo.getConnection())) {
				    
				    mc.setPCMailAddress(mc2.getPCMailAddress());
				    mc.setCellularMailAddress(mc2.getCellularMailAddress());
				}
			    } catch (Exception e) {
			    }

                            DataMail dm = mailDatas.get(row);
                            dm.setData(mc);
                            dm.setSendMailAddress(mailType.getSelectedIndex());

			    DefaultTableModel model = (DefaultTableModel)customersTable.getModel();
			    model.setValueAt(dm.getSendMailAddress(), row, 3);
			}
		});

		return searchButton;
	}        

	private boolean optimizeSelectedArray(Integer optimizeType)
	{
	    mailCustomers.clear();
	    Integer cnt = 0;
		
	    for(MstCustomer mc : targetCustomers) {
		
		boolean isAdd = true;
			
		switch(optimizeType)
		{
		    case 0:
		    case 2:
			if (( mc.getPCMailAddress() == null || mc.getPCMailAddress().equals("") ) && mc.getCellularMailAddress().equals("")) {
			    isAdd = false;
			}
			break;
		    case 3:
			if ( mc.getPCMailAddress() == null || mc.getPCMailAddress().equals("") ) {
			    isAdd = false;
			}
			break;
		    case 1:
			if ( mc.getCellularMailAddress() == null || mc.getCellularMailAddress().equals("") ) {
			    isAdd = false;
			}
			break;
		    case 4:
			if ( mc.getFullAddress() == null || mc.getFullAddress().equals("") ) {
			    isAdd = false;
			}
			break;
		}
			
		if(isAdd) {
		    mailCustomers.add(mc);
		}
	    }
		
	    if((0 < mailCustomers.size())) {
		return true;
	    } else {
/*		
		MessageDialog.showMessageDialog(this,
				MessageUtil.getMessage(8000),
				this.getTitle(),
				JOptionPane.ERROR_MESSAGE);
*/
		return	false;
	    }
	}
        
        private void registDmHistory() {
            //IVS_PTThu edit 20160419 #49573
            
            if(DBUtil.isErrorString(dmTitle.getText()))
            {
                     MessageDialog.showMessageDialog(this,
                        "タイトルに特殊文字が含まれているため登録できません。", this.getTitle(), JOptionPane.ERROR_MESSAGE);
                    return ;
            }
             if(DBUtil.isErrorString(mailTitle.getText()))
             { 
                     MessageDialog.showMessageDialog(this,
                        "タイトルに特殊文字が含まれているため登録できません。", this.getTitle(), JOptionPane.ERROR_MESSAGE);
                    return ;
            }
           if(DBUtil.isErrorString(mailBody.getText()))
           {
                     MessageDialog.showMessageDialog(this,
                        "本文に特殊文字が含まれているため登録できません。", this.getTitle(), JOptionPane.ERROR_MESSAGE);
                    return ;
            }
            //IVS_PTThu end edit 20160419 #49573
            this.setCommonMailData();
            if (!hasMailBody()) {
                
                String msg = "対象顧客のなかで、メール本文が作成されていないものがあります。\n" +
                             "このまま続行してもよろしいですか？";

                if (MessageDialog.showYesNoDialog(
                        this, msg, this.getTitle(),
                        JOptionPane.WARNING_MESSAGE) == JOptionPane.NO_OPTION)
                {
                    return;
                }
            }
            
            DmHistory dh = new DmHistory(this, targetList, dmTitle.getText(), DmHistory.DM_MAIL);

            if (!dh.checkInput()) {
                dmTitle.requestFocusInWindow();
                return;
            }
            
            if (!dh.showRegistDialog()) {
                dmTitle.requestFocusInWindow();
                return;
            }

            if (targetList.size() > 0) {

                dh.regist();

            } else {

                MessageDialog.showMessageDialog(
                    this,
                    MessageUtil.getMessage(1112),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            }        
        }
        
        private boolean hasMailBody() {
            
            boolean result = true;
            for (DataMail dm : targetList) {
                if (dm.getMailBody().length() == 0) {
                    result = false;
                    break;
                }
            }
            
            return result;
        }
}
