/*
 * MstMailTemplatePanel.java
 *
 * Created on 2006/10/31, 19:13
 */

package com.geobeck.sosia.pos.hair.mail;

import com.geobeck.sosia.pos.hair.data.account.ConsumptionCourse;
import com.geobeck.sosia.pos.hair.data.account.Course;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.awt.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.sosia.pos.products.*;
import com.geobeck.sosia.pos.hair.search.product.*;
import com.geobeck.sosia.pos.search.mail.*;
import com.geobeck.swing.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.master.mail.*;
import com.geobeck.sosia.pos.mail.*;

/**
 *
 * @author  katagiri
 */
public class MstMailTemplatePanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
		implements SearchHairProductOpener
{
	
	/** Creates new form MstMailTemplatePanel */
	public MstMailTemplatePanel()
	{
		initComponents();
		this.setSize(748, 690);
		this.setPath("メール機能");
		this.setTitle("テンプレート登録");

                SystemInfo.initGroupShopComponents(target, 3);

		init();

                if (!SystemInfo.isUsePointcard()){
                    pointKey.setVisible(false);
                }

	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        templateClassLabel = new javax.swing.JLabel();
        templateClass = new javax.swing.JComboBox();
        templateTitleLabel = new javax.swing.JLabel();
        templateTitle = new javax.swing.JFormattedTextField();
        templateBodyLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        templateBody = new javax.swing.JTextArea();
        buttonPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        displaySeqLabel = new javax.swing.JLabel();
        templateListScrollPane = new javax.swing.JScrollPane();
        templateList = new javax.swing.JTable();
        keyPanel = new javax.swing.JPanel();
        customerNameKey = new javax.swing.JButton();
        staffNameKey = new javax.swing.JButton();
        lastVisitKey = new javax.swing.JButton();
        technicKey = new javax.swing.JButton();
        itemKey = new javax.swing.JButton();
        shopNameKey = new javax.swing.JButton();
        shopAddressKey = new javax.swing.JButton();
        shopTelKey = new javax.swing.JButton();
        shopMailKey = new javax.swing.JButton();
        signatureKey = new javax.swing.JButton();
        nextReservationKey = new javax.swing.JButton();
        reservationStaffKey = new javax.swing.JButton();
        pointKey = new javax.swing.JButton();
        nextReservationMenuKey = new javax.swing.JButton();
        targetLabel = new javax.swing.JLabel();
        target = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));

        setFocusCycleRoot(true);

        templateClassLabel.setText("分類");

        templateClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        templateClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateClassActionPerformed(evt);
            }
        });

        templateTitleLabel.setText("タイトル");

        templateTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        templateBodyLabel.setText("本文");

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        templateBody.setColumns(20);
        templateBody.setLineWrap(true);
        templateBody.setRows(5);
        templateBody.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jScrollPane2.setViewportView(templateBody);

        buttonPanel.setOpaque(false);

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout buttonPanelLayout = new org.jdesktop.layout.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        displaySeqLabel.setText("表示順");

        templateListScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        templateList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "タイトル", "表示順"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        templateList.setSelectionBackground(new java.awt.Color(220, 220, 220));
        templateList.setSelectionForeground(new java.awt.Color(0, 0, 0));
        templateList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        templateList.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(templateList, SystemInfo.getTableHeaderRenderer());
        templateList.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        templateList.setDefaultRenderer(Integer.class, new SelectTableCellRenderer());
        templateList.setDefaultRenderer(String.class, new SelectTableCellRenderer());
        templateList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                templateListKeyReleased(evt);
            }
        });
        templateList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                templateListMouseReleased(evt);
            }
        });
        templateListScrollPane.setViewportView(templateList);

        keyPanel.setOpaque(false);

        customerNameKey.setIcon(SystemInfo.getImageIcon("/button/key/customer_name_off.jpg"));
        customerNameKey.setBorderPainted(false);
        customerNameKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/customer_name_on.jpg"));
        customerNameKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNameKeyActionPerformed(evt);
            }
        });

        staffNameKey.setIcon(SystemInfo.getImageIcon("/button/key/staff_name_off.jpg"));
        staffNameKey.setBorderPainted(false);
        staffNameKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/staff_name_on.jpg"));
        staffNameKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffNameKeyActionPerformed(evt);
            }
        });

        lastVisitKey.setIcon(SystemInfo.getImageIcon("/button/key/last_visit_off.jpg"));
        lastVisitKey.setBorderPainted(false);
        lastVisitKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/last_visit_on.jpg"));
        lastVisitKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastVisitKeyActionPerformed(evt);
            }
        });

        technicKey.setIcon(SystemInfo.getImageIcon("/button/key/technic_name_off.jpg"));
        technicKey.setBorderPainted(false);
        technicKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/technic_name_on.jpg"));
        technicKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                technicKeyActionPerformed(evt);
            }
        });

        itemKey.setIcon(SystemInfo.getImageIcon("/button/key/item_name_off.jpg"));
        itemKey.setBorderPainted(false);
        itemKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/item_name_on.jpg"));
        itemKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemKeyActionPerformed(evt);
            }
        });

        shopNameKey.setIcon(SystemInfo.getImageIcon("/button/key/shop_name_off.jpg"));
        shopNameKey.setBorderPainted(false);
        shopNameKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/shop_name_on.jpg"));
        shopNameKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopNameKeyActionPerformed(evt);
            }
        });

        shopAddressKey.setIcon(SystemInfo.getImageIcon("/button/key/shop_address_off.jpg"));
        shopAddressKey.setBorderPainted(false);
        shopAddressKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/shop_address_on.jpg"));
        shopAddressKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopAddressKeyActionPerformed(evt);
            }
        });

        shopTelKey.setIcon(SystemInfo.getImageIcon("/button/key/shop_tel_off.jpg"));
        shopTelKey.setBorderPainted(false);
        shopTelKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/shop_tel_on.jpg"));
        shopTelKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopTelKeyActionPerformed(evt);
            }
        });

        shopMailKey.setIcon(SystemInfo.getImageIcon("/button/key/shop_mail_off.jpg"));
        shopMailKey.setBorderPainted(false);
        shopMailKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/shop_mail_on.jpg"));
        shopMailKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopMailKeyActionPerformed(evt);
            }
        });

        signatureKey.setIcon(SystemInfo.getImageIcon("/button/key/signature_off.jpg"));
        signatureKey.setBorderPainted(false);
        signatureKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/signature_on.jpg"));
        signatureKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signatureKeyActionPerformed(evt);
            }
        });

        nextReservationKey.setIcon(SystemInfo.getImageIcon("/button/key/next_reservation_off.jpg"));
        nextReservationKey.setBorderPainted(false);
        nextReservationKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/next_reservation_on.jpg"));
        nextReservationKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextReservationKeyActionPerformed(evt);
            }
        });

        reservationStaffKey.setIcon(SystemInfo.getImageIcon("/button/key/reservation_staff_off.jpg"));
        reservationStaffKey.setBorderPainted(false);
        reservationStaffKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/reservation_staff_on.jpg"));
        reservationStaffKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservationStaffKeyActionPerformed(evt);
            }
        });

        pointKey.setIcon(SystemInfo.getImageIcon("/button/common/point_off.jpg"));
        pointKey.setBorderPainted(false);
        pointKey.setPressedIcon(SystemInfo.getImageIcon("/button/common/point_on.jpg"));
        pointKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointKeyActionPerformed(evt);
            }
        });

        nextReservationMenuKey.setIcon(SystemInfo.getImageIcon("/button/key/next_reservation_menu_off.jpg"));
        nextReservationMenuKey.setBorderPainted(false);
        nextReservationMenuKey.setPressedIcon(SystemInfo.getImageIcon("/button/key/next_reservation_menu_on.jpg"));
        nextReservationMenuKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextReservationMenuKeyActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout keyPanelLayout = new org.jdesktop.layout.GroupLayout(keyPanel);
        keyPanel.setLayout(keyPanelLayout);
        keyPanelLayout.setHorizontalGroup(
            keyPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(keyPanelLayout.createSequentialGroup()
                .add(keyPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(customerNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(staffNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lastVisitKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(shopMailKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(shopTelKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pointKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(technicKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(itemKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(shopAddressKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(shopNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(signatureKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(reservationStaffKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(nextReservationMenuKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(nextReservationKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        keyPanelLayout.setVerticalGroup(
            keyPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(keyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(customerNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(staffNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lastVisitKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pointKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(technicKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(itemKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(16, 16, 16)
                .add(shopNameKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(shopAddressKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(shopTelKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(shopMailKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(signatureKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(nextReservationKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reservationStaffKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(nextReservationMenuKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        targetLabel.setText("対象");

        target.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        target.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetActionPerformed(evt);
            }
        });

        displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        displaySeq.setColumns(4);
        displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(66, 66, 66)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, templateClass, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, target, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
                        .add(18, 18, 18)
                        .add(buttonPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(targetLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(templateClassLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(templateBodyLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(templateTitleLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
                        .add(7, 7, 7)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(templateListScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 605, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(templateTitle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(5, 5, 5)
                                        .add(displaySeqLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 51, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(keyPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .add(24, 24, 24)))))
                .add(49, 49, 49))
        );

        layout.linkSize(new java.awt.Component[] {templateBodyLabel, templateClassLabel, templateTitleLabel}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(targetLabel)
                            .add(target, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(templateClassLabel)
                            .add(templateClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(buttonPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(templateListScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(templateTitleLabel)
                    .add(templateTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displaySeqLabel)
                    .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(keyPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(templateBodyLabel)
                        .add(45, 45, 45))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reservationStaffKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservationStaffKeyActionPerformed
            insertKey(MailUtil.KEY_RESERVATION_STAFF);
            templateBody.requestFocusInWindow();
    }//GEN-LAST:event_reservationStaffKeyActionPerformed

    private void nextReservationKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextReservationKeyActionPerformed
            insertKey(MailUtil.KEY_NEXT_RESERVATION);
            templateBody.requestFocusInWindow();        
    }//GEN-LAST:event_nextReservationKeyActionPerformed

    private void staffNameKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffNameKeyActionPerformed
	    insertKey(MailUtil.KEY_STAFF_NAME);
	    templateBody.requestFocusInWindow();
    }//GEN-LAST:event_staffNameKeyActionPerformed

	private void signatureKeyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_signatureKeyActionPerformed
	{//GEN-HEADEREND:event_signatureKeyActionPerformed
		Integer		groupID		=	null;
		Integer		shopID		=	null;
		
		if(target.getSelectedItem() instanceof MstGroup)
		{
			MstGroup	selGroup	=	(MstGroup)target.getSelectedItem();
			groupID	=	selGroup.getGroupID();
			shopID	=	0;
		}
		else if(target.getSelectedItem() instanceof MstShop)
		{
			MstShop	selShop	=	(MstShop)target.getSelectedItem();
			groupID	=	selShop.getGroupID();
			shopID	=	selShop.getShopID();
		}
		
		SystemInfo.getLogger().log(Level.INFO, "署名検索");
		SearchMailSignatureDialog	smsd	=	new SearchMailSignatureDialog(parentFrame, true, groupID, shopID);
		smsd.setVisible(true);
		
		if(smsd.getSelectedSignatureID() != null)
		{
			insertKey("[署名" + smsd.getSelectedSignatureID().toString() + "]");
		}
		
		smsd = null;
		templateBody.requestFocusInWindow();
	}//GEN-LAST:event_signatureKeyActionPerformed

	private void lastVisitKeyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lastVisitKeyActionPerformed
	{//GEN-HEADEREND:event_lastVisitKeyActionPerformed
		insertKey(MailUtil.KEY_LAST_VISIT);
		templateBody.requestFocusInWindow();
	}//GEN-LAST:event_lastVisitKeyActionPerformed

	private void customerNameKeyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_customerNameKeyActionPerformed
	{//GEN-HEADEREND:event_customerNameKeyActionPerformed
		insertKey(MailUtil.KEY_CUSTOMER_NAME);
		templateBody.requestFocusInWindow();
	}//GEN-LAST:event_customerNameKeyActionPerformed

	private void technicKeyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_technicKeyActionPerformed
	{//GEN-HEADEREND:event_technicKeyActionPerformed
		SystemInfo.getLogger().log(Level.INFO, "技術検索");
		SearchHairProductDialog	spd	=	new SearchHairProductDialog(parentFrame, true, this, 1);
		spd.setVisible(true);
		spd = null;
	}//GEN-LAST:event_technicKeyActionPerformed

	private void itemKeyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemKeyActionPerformed
	{//GEN-HEADEREND:event_itemKeyActionPerformed
		SystemInfo.getLogger().log(Level.INFO, "商品検索");
		SearchHairProductDialog	spd	=	new SearchHairProductDialog(parentFrame, true, this, 2);
		spd.setVisible(true);
		spd = null;
	}//GEN-LAST:event_itemKeyActionPerformed

	private void shopMailKeyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopMailKeyActionPerformed
	{//GEN-HEADEREND:event_shopMailKeyActionPerformed
		insertKey(MailUtil.KEY_TARGET_MAIL);
		templateBody.requestFocusInWindow();
	}//GEN-LAST:event_shopMailKeyActionPerformed

	private void shopTelKeyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopTelKeyActionPerformed
	{//GEN-HEADEREND:event_shopTelKeyActionPerformed
		insertKey(MailUtil.KEY_TARGET_TEL);
		templateBody.requestFocusInWindow();
	}//GEN-LAST:event_shopTelKeyActionPerformed

	private void shopAddressKeyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopAddressKeyActionPerformed
	{//GEN-HEADEREND:event_shopAddressKeyActionPerformed
		insertKey(MailUtil.KEY_TARGET_ADDRESS);
		templateBody.requestFocusInWindow();
	}//GEN-LAST:event_shopAddressKeyActionPerformed

	private void shopNameKeyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shopNameKeyActionPerformed
	{//GEN-HEADEREND:event_shopNameKeyActionPerformed
		insertKey(MailUtil.KEY_TARGET_NAME);
		templateBody.requestFocusInWindow();
	}//GEN-LAST:event_shopNameKeyActionPerformed

	private void templateListMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_templateListMouseReleased
	{//GEN-HEADEREND:event_templateListMouseReleased
		this.changeCurrentData();
	}//GEN-LAST:event_templateListMouseReleased

	private void templateListKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_templateListKeyReleased
	{//GEN-HEADEREND:event_templateListKeyReleased
		this.changeCurrentData();
	}//GEN-LAST:event_templateListKeyReleased

	private void templateClassActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_templateClassActionPerformed
	{//GEN-HEADEREND:event_templateClassActionPerformed
		this.changeMailTemplateTable();
	}//GEN-LAST:event_templateClassActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		if(this.checkInput())
		{
			this.regist(false);
		}
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
		if(this.checkInput())
		{
			this.regist(true);
		}
	}//GEN-LAST:event_addButtonActionPerformed

        private void targetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetActionPerformed
            this.changeClass();
        }//GEN-LAST:event_targetActionPerformed

        private void pointKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointKeyActionPerformed
            insertKey(MailUtil.KEY_POINT);
            templateBody.requestFocusInWindow();
}//GEN-LAST:event_pointKeyActionPerformed

        private void nextReservationMenuKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextReservationMenuKeyActionPerformed
            insertKey(MailUtil.KEY_NEXT_RESERVATION_MENU);
            templateBody.requestFocusInWindow();        
        }//GEN-LAST:event_nextReservationMenuKeyActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton customerNameKey;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private javax.swing.JButton itemKey;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel keyPanel;
    private javax.swing.JButton lastVisitKey;
    private javax.swing.JButton nextReservationKey;
    private javax.swing.JButton nextReservationMenuKey;
    private javax.swing.JButton pointKey;
    private javax.swing.JButton renewButton;
    private javax.swing.JButton reservationStaffKey;
    private javax.swing.JButton shopAddressKey;
    private javax.swing.JButton shopMailKey;
    private javax.swing.JButton shopNameKey;
    private javax.swing.JButton shopTelKey;
    private javax.swing.JButton signatureKey;
    private javax.swing.JButton staffNameKey;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel target;
    private javax.swing.JLabel targetLabel;
    private javax.swing.JButton technicKey;
    private javax.swing.JTextArea templateBody;
    private javax.swing.JLabel templateBodyLabel;
    private javax.swing.JComboBox templateClass;
    private javax.swing.JLabel templateClassLabel;
    private javax.swing.JTable templateList;
    private javax.swing.JScrollPane templateListScrollPane;
    private javax.swing.JFormattedTextField templateTitle;
    private javax.swing.JLabel templateTitleLabel;
    // End of variables declaration//GEN-END:variables
	
	private	MstMailTemplateClasses		mmtcs			=	new MstMailTemplateClasses();
	private	MstMailTemplates			mmts			=	new MstMailTemplates();
	private	Integer						currentIndex	=	-1;
	
	/**
	 * テンプレート登録画面用FocusTraversalPolicy
	 */
	private	MstMailTemplateFocusTraversalPolicy	ftp	=
			new MstMailTemplateFocusTraversalPolicy();
	
	/**
	 * テンプレート登録画面用FocusTraversalPolicyを取得する。
	 * @return テンプレート登録画面用FocusTraversalPolicy
	 */
	public MstMailTemplateFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	private void initTableColumnWidth()
	{
		//列の幅を設定する。
		templateList.getColumnModel().getColumn(0).setPreferredWidth(510);
	}
	
	private void init()
	{
		this.initTableColumnWidth();	
		this.changeClass();
	}
	
	
	private void changeClass()
	{
		templateClass.removeAllItems();
		
		if(target.getSelectedItem() instanceof MstGroup)
		{
			MstGroup	selGroup	=	(MstGroup)target.getSelectedItem();
			mmtcs.setGroupID(selGroup.getGroupID());
			mmtcs.setShopID(0);
		}
		else if(target.getSelectedItem() instanceof MstShop)
		{
			MstShop	selShop	=	(MstShop)target.getSelectedItem();
			mmtcs.setGroupID(selShop.getGroupID());
			mmtcs.setShopID(selShop.getShopID());
		}
		
		try
		{
			mmtcs.load(SystemInfo.getConnection(), false);
			
			for(MstMailTemplateClass mmtc : mmtcs)
			{
				templateClass.addItem(mmtc);
			}
			
			if(0 < templateClass.getItemCount())
			{
				templateClass.setSelectedIndex(0);
			}
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * 選択データが変更されたときの処理。
	 */
	private void changeCurrentData()
	{
		int	index	=	templateList.getSelectedRow();
		
		if(0 <= index && index < mmts.size() && currentIndex != index)
		{
			currentIndex	=	index;
			//選択されているデータを表示
			this.showCurrentData();
		}
		
		currentIndex	=	index;
		
		//データが選択されている場合、更新・削除ボタンを使用可能にする
		renewButton.setEnabled(0 <= currentIndex);
		deleteButton.setEnabled(0 <= currentIndex);
	}
	
	private void changeMailTemplateTable()
	{
		SwingUtil.clearTable(templateList);
		templateTitle.setText("");
		templateBody.setText("");
		displaySeq.setText("");
		
		try
		{
			if(0 <= templateClass.getSelectedIndex())
			{
				if(target.getSelectedItem() instanceof MstGroup)
				{
					MstGroup	selGroup	=	(MstGroup)target.getSelectedItem();
					mmts.setGroup(selGroup);
					mmts.setShopID(0);
				}
				else if(target.getSelectedItem() instanceof MstShop)
				{
					MstShop	selShop	=	(MstShop)target.getSelectedItem();
					mmts.setGroupID(selShop.getGroupID());
					mmts.setShopID(selShop.getShopID());
				}
				
				mmts.setMailTemplateClass(
						(MstMailTemplateClass)templateClass.getSelectedItem());
				mmts.load(SystemInfo.getConnection(), false);
				
				SwingUtil.clearTable(templateList);
				
				DefaultTableModel	model	=	(DefaultTableModel)templateList.getModel();
				
				for(MstMailTemplate mmt : mmts)
				{
					Object[]	rowData	=	{	mmt.getMailTemplateTitle(),
												mmt.getDisplaySeq()};
					model.addRow(rowData);
				}
			}
		}
		catch(Exception e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
		
		this.changeCurrentData();
	}
	
	private void showCurrentData()
	{
		MstMailTemplate		temp	=	mmts.get(currentIndex);
		
		templateTitle.setText(temp.getMailTemplateTitle());
		displaySeq.setText(temp.getDisplaySeq().toString());
		templateBody.setText(temp.getMailTemplateBody());
	}
	
	private void insertKey(String keyString)
	{
		templateBody.replaceRange(keyString,
				templateBody.getSelectionStart(),
				templateBody.getSelectionEnd());
	}
	
	private boolean checkInput()
	{
		if(templateTitle.getText().equals(""))
		{
			return	false;
		}
		
		return	true;
	}
	
	private void regist(boolean isInsert)
	{
                if (DBUtil.isErrorString(templateBody.getText())) {
                    MessageDialog.showMessageDialog(
                            this,
                            "本文に特殊文字が含まれているため登録できません。",
                            this.getTitle(),
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }

		MstMailTemplate		temp	=	new MstMailTemplate();
		
		if(target.getSelectedItem() instanceof MstGroup)
		{
			MstGroup	selGroup	=	(MstGroup)target.getSelectedItem();
			temp.setGroup(selGroup);
			temp.setShopID(0);
		}
		else if(target.getSelectedItem() instanceof MstShop)
		{
			MstShop	selShop	=	(MstShop)target.getSelectedItem();
			temp.setGroupID(selShop.getGroupID());
			temp.setShop(selShop);
		}
		
		temp.setMailTemplateClass((MstMailTemplateClass)templateClass.getSelectedItem());
		temp.setMailTemplateTitle(templateTitle.getText());
		temp.setMailTemplateBody(templateBody.getText());
		temp.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText())));
		
		Integer		lastSeq		=	-1;
		
		if(!isInsert)
		{
			temp.setMailTemplateID(mmts.get(currentIndex).getMailTemplateID());
			lastSeq	=	mmts.get(currentIndex).getDisplaySeq();
		}
		
		ConnectionWrapper	con	=	SystemInfo.getConnection();
		
		try
		{
			con.begin();

			if(temp.regist(con, lastSeq))
			{
				con.commit();
				this.changeMailTemplateTable();
			}
			else
			{
				con.rollback();
			}
		}
		catch(SQLException e)
		{
			SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
		}
	}
	
	/**
	 * 選択されたデータを削除する。
	 * @return true - 成功
	 */
	private void delete()
	{
	    MstMailTemplate temp = null;
		
	    if(0 <= currentIndex && currentIndex < mmts.size()) {
		temp = mmts.get(currentIndex);
	    }

	    ConnectionWrapper con = SystemInfo.getConnection();

	    try
	    {
		con.begin();

		if (temp.delete(con)) {
		    con.commit();
		    this.changeMailTemplateTable();
		} else {
		    con.rollback();
		}
	    }
	    catch(SQLException e)
	    {
		SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }
	}
	
	public void addSelectedProduct(Integer productDivision, Product product)
	{
//		insertKey(product.getProductName());
		if(productDivision == 1)
		{
			insertKey("[技術" + product.getProductNo() + "]");
		}
		else if(productDivision == 2)
		{
			insertKey("[商品" + product.getProductNo() + "]");
		}
		
		templateBody.requestFocusInWindow();
	}
	
	public void addSelectedCourse(Integer productDivision, Course course){}

	public void addSelectedConsumptionCourse(Integer productDivision, ConsumptionCourse consumptionCourse){}

	/**
	 * シンプルマスタ登録画面用FocusTraversalPolicy
	 */
	private class MstMailTemplateFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(target))
			{
				return templateClass;
			}
			if(0 < templateList.getRowCount())
			{
				if (aComponent.equals(templateClass))
				{
					return templateList;
				}
				else if (aComponent.equals(templateList))
				{
					return templateTitle;
				}
				else if (aComponent.equals(templateTitle))
				{
					return displaySeq;
				}
				else if (aComponent.equals(displaySeq))
				{
					return templateBody;
				}
				else if (aComponent.equals(templateBody))
				{
					return getDefaultComponent();
				}
			}
			
			return getDefaultComponent();
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			
			if(0 < templateList.getRowCount())
			{
				if (aComponent.equals(getDefaultComponent()))
				{
					return templateBody;
				}
				else if (aComponent.equals(target))
				{
					return templateBody;
				}
				else if (aComponent.equals(templateClass))
				{
					return target;
				}
				else if (aComponent.equals(templateList))
				{
					return templateClass;
				}
				else if (aComponent.equals(templateTitle))
				{
					return templateList;
				}
				else if (aComponent.equals(displaySeq))
				{
					return templateTitle;
				}
				else if (aComponent.equals(templateBody))
				{
					return displaySeq;
				}
			}
			else
			{
				if (aComponent.equals(target))
				{
					return templateClass;
				}
			}
			
			return getDefaultComponent();
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return getDefaultComponent();
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return displaySeq;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return getDefaultComponent();
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return getDefaultComponent();
		}
		
		public Component getDefaultComponent()
		{
			if(1 < target.getItemCount())
			{
				return	target;
			}
			else
			{
				return templateClass;
			}
		}
	}
}
