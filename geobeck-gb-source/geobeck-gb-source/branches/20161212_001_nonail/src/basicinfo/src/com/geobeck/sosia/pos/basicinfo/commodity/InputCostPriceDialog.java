/*
 * InputCostPriceDialog.java
 *
 * Created on 2007/04/06, 18:57
 */

package com.geobeck.sosia.pos.basicinfo.commodity;

import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.*;

import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.master.commodity.*;

/**
 *
 * @author  katagiri
 */
public class InputCostPriceDialog extends javax.swing.JDialog
{
	
	/** Creates new form InputCostPriceDialog */
	public InputCostPriceDialog(java.awt.Frame parent, boolean modal,
			ArrayList<MstPurchase> mpArray)
	{
		super(parent, modal);
		this.mpArray	=	mpArray;
		initComponents();
		this.init();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        imagePanel1 = new com.geobeck.swing.ImagePanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        purchase = new javax.swing.JTable();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("\u4ed5\u5165\u4fa1\u683c\u5165\u529b");
        purchase.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "型番", "商品名", "販売価格", "仕入価格"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        purchase.setRowSelectionAllowed(false);
        purchase.getTableHeader().setReorderingAllowed(false);
        purchase.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        TableColumnModel purchaseModel = purchase.getColumnModel();
        purchaseModel.getColumn(3).setCellEditor(new IntegerCellEditor(
            new JFormattedTextField(SystemInfo.getDecimalFormatter())));
    SwingUtil.setJTableHeaderRenderer(purchase, SystemInfo.getTableHeaderRenderer());
    purchase.addPropertyChangeListener(new java.beans.PropertyChangeListener()
    {
        public void propertyChange(java.beans.PropertyChangeEvent evt)
        {
            purchasePropertyChange(evt);
        }
    });
    purchase.addFocusListener(new java.awt.event.FocusAdapter()
    {
        public void focusGained(java.awt.event.FocusEvent evt)
        {
            purchaseFocusGained(evt);
        }
    });

    jScrollPane1.setViewportView(purchase);

    backButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
    backButton.setBorderPainted(false);
    backButton.setContentAreaFilled(false);
    backButton.setFocusable(false);
    backButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
    backButton.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            backButtonActionPerformed(evt);
        }
    });

    org.jdesktop.layout.GroupLayout imagePanel1Layout = new org.jdesktop.layout.GroupLayout(imagePanel1);
    imagePanel1.setLayout(imagePanel1Layout);
    imagePanel1Layout.setHorizontalGroup(
        imagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(org.jdesktop.layout.GroupLayout.TRAILING, imagePanel1Layout.createSequentialGroup()
            .addContainerGap(352, Short.MAX_VALUE)
            .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
        .add(imagePanel1Layout.createSequentialGroup()
            .addContainerGap()
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 431, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(13, Short.MAX_VALUE))
    );
    imagePanel1Layout.setVerticalGroup(
        imagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(imagePanel1Layout.createSequentialGroup()
            .addContainerGap()
            .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 324, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(15, Short.MAX_VALUE))
    );

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(imagePanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(imagePanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    pack();
    }// </editor-fold>//GEN-END:initComponents

	private void purchaseFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_purchaseFocusGained
	{//GEN-HEADEREND:event_purchaseFocusGained
		if(purchase.getInputContext() != null)
			purchase.getInputContext().setCharacterSubsets(null);
	}//GEN-LAST:event_purchaseFocusGained

	private void purchasePropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_purchasePropertyChange
	{//GEN-HEADEREND:event_purchasePropertyChange
		this.changeCostPrice();
	}//GEN-LAST:event_purchasePropertyChange

	private void backButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backButtonActionPerformed
	{//GEN-HEADEREND:event_backButtonActionPerformed
		this.setVisible(false);
	}//GEN-LAST:event_backButtonActionPerformed
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private com.geobeck.swing.ImagePanel imagePanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable purchase;
    // End of variables declaration//GEN-END:variables
	
	private ArrayList<MstPurchase>	mpArray		=	null;
	
	/**
	 * 初期化処理を行う。
	 */
	private void init()
	{
		this.showData();
	}
	
	/**
	 * データを表示する。
	 */
	private void showData()
	{
		SwingUtil.clearTable(purchase);
		
		DefaultTableModel	model	=	(DefaultTableModel)purchase.getModel();
		
		for(MstPurchase mp : mpArray)
		{
			Vector<Object>	temp	=	new Vector<Object>();
			temp.add(mp.getItemNo());
			temp.add(mp.getItemName());
			temp.add(mp.getPrice());
			temp.add(mp.getCostPrice());
			model.addRow(temp);
		}
	}
	
	/**
	 * 仕入金額が変更されたときの処理
	 */
	private void changeCostPrice()
	{
		int		row	=	purchase.getSelectedRow();
		int		col	=	purchase.getSelectedColumn();
		
		if(0 <= row && col == 3)
		{
			Integer	temp	=	(Integer)purchase.getValueAt(row, col);
			mpArray.get(row).setCostPrice(temp);
		}
	}
}
