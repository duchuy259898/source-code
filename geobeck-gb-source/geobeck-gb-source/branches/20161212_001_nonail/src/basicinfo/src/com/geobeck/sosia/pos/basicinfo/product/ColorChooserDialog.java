/*
 * ColorChooserDialog.java
 *
 * Created on 2012/07/21, 13:00
 */

package com.geobeck.sosia.pos.basicinfo.product;

import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.swing.SwingUtil;
import java.awt.Color;
import java.lang.reflect.Method;
import javax.swing.colorchooser.AbstractColorChooserPanel;


/**
 * ヘルプスタッフ検索画面
 * @author geobeck
 */
public class ColorChooserDialog extends javax.swing.JDialog
{
        private String hexColor = "";
        private boolean clear = false;

        public ColorChooserDialog(java.awt.Frame parent, String hexColor) {
            super(parent, true);
            initComponents();
            addMouseCursorChange();
            SwingUtil.moveCenter(this);

            jCC.removeChooserPanel(jCC.getChooserPanels()[2]);

            int[] rgb = toRGB(hexColor);
            jCC.setColor(new Color(rgb[0], rgb[1], rgb[2]));
        }
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backPanel = new com.geobeck.swing.ImagePanel();
        selectButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jCC = new javax.swing.JColorChooser();
        clearButton = new javax.swing.JButton();

        setTitle("予約色の選択");
        setName("searchStaffFrame"); // NOI18N

        backPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        backPanel.setImage(SystemInfo.getImageIcon("/contents_background.jpg"));
        backPanel.setRepeat(true);

        selectButton.setIcon(SystemInfo.getImageIcon("/button/select/select_off.jpg"));
        selectButton.setBorderPainted(false);
        selectButton.setFocusable(false);
        selectButton.setPressedIcon(SystemInfo.getImageIcon("/button/select/select_on.jpg"));
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectStaff(evt);
            }
        });

        closeButton.setIcon(SystemInfo.getImageIcon("/button/common/close_off.jpg"));
        closeButton.setBorderPainted(false);
        closeButton.setFocusable(false);
        closeButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/close_on.jpg"));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jCC.setOpaque(false);

        clearButton.setIcon(SystemInfo.getImageIcon("/button/common/clear_off.jpg"));
        clearButton.setBorderPainted(false);
        clearButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/clear_on.jpg"));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout backPanelLayout = new org.jdesktop.layout.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jCC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(backPanelLayout.createSequentialGroup()
                        .add(clearButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(backPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(selectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(clearButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(backPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private void selectStaff(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectStaff
            Color color = jCC.getColor();
            if(color != null){
                this.hexColor = String.format("%06X", (color.getRed() << 16)|(color.getGreen() << 8)| color.getBlue());
            }
            this.setVisible(false);
        }//GEN-LAST:event_selectStaff

        private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
            this.clear = true;
            this.setVisible(false);
}//GEN-LAST:event_clearButtonActionPerformed

        private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
            this.setVisible(false);
        }//GEN-LAST:event_closeButtonActionPerformed
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.geobeck.swing.ImagePanel backPanel;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JColorChooser jCC;
    private javax.swing.JButton selectButton;
    // End of variables declaration//GEN-END:variables

	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
            SystemInfo.addMouseCursorChange(clearButton);
            SystemInfo.addMouseCursorChange(selectButton);
            SystemInfo.addMouseCursorChange(closeButton);
	}

        private static int[] toRGB(String hexColorRGB) {
            if (hexColorRGB.length() == 0) hexColorRGB = "FFFFFF";
            char rgb[] = hexColorRGB.toCharArray();
            int[] rgbInt = new int[3];
            try {
                rgbInt[0] = Character.digit(rgb[0], 16) * 16 + Character.digit(rgb[1], 16);
                rgbInt[1] = Character.digit(rgb[2], 16) * 16 + Character.digit(rgb[3], 16);
                rgbInt[2] = Character.digit(rgb[4], 16) * 16 + Character.digit(rgb[5], 16);
            } catch (Exception ignore) {}
            return rgbInt;
        }

    /**
     * @return the hexColor
     */
    public String getHexColor() {
        return hexColor;
    }

    /**
     * @return the clear
     */
    public boolean isClear() {
        return clear;
    }

}
