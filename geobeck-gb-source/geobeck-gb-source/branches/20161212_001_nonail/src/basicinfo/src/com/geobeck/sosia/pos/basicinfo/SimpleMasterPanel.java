/*
 * SimpleMasterPanel.java
 *
 * Created on 2006/10/18, 11:24
 */

package com.geobeck.sosia.pos.basicinfo;

import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;

import com.geobeck.swing.*;
import com.geobeck.sosia.pos.master.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;

/**
 *
 * @author  katagiri
 */
public class SimpleMasterPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
	String[] mstTable ={"mst_technic_class","mst_course_class", "mst_item_class", "mst_shop_relation"};
        String tableName;
	/** Creates new form SimpleMasterPanel */
	public SimpleMasterPanel(String masterName, String tableName,
								String idColName, String nameColName,
								int	nameLength,
								TableCellRenderer headerRenderer)
	{
		super();
                 //IVS_LTThuc start add 20140805 MASHU_ã∆ë‘ìoò^
                this.tableName = tableName;
		this.init(masterName, tableName, idColName, nameColName, nameLength);
		initComponents();
		addMouseCursorChange();
		this.setSize(400, 680);
		SwingUtil.setJTableHeaderRenderer(datas, headerRenderer);
		this.setListener();
		this.refresh();
                
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataNameLabel = new javax.swing.JLabel();
        dataName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)dataName.getDocument()).setDocumentFilter(
            new CustomFilter(sm.getNameLength()));
        displaySeqLabel = new javax.swing.JLabel();
        displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        deleteButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        datasScrollPane = new javax.swing.JScrollPane();
        datas = new javax.swing.JTable();

        setFocusCycleRoot(true);

        dataNameLabel.setText(sm.getMasterName() + "ñº");

        dataName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        dataName.setColumns(sm.getNameLength());
        dataName.setInputKanji(true);

        displaySeqLabel.setText("ë}ì¸à íu");

        displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        displaySeq.setColumns(4);
        displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setContentAreaFilled(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setContentAreaFilled(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setContentAreaFilled(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        datasScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        datas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null}
            },
            new String []
            {
                sm.getMasterName() + "ñº", "ï\é¶èá"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        datas.setFocusTraversalPolicy(this.getFocusTraversalPolicy());
        datas.setSelectionBackground(new java.awt.Color(220, 220, 220));
        datas.setSelectionForeground(new java.awt.Color(0, 0, 0));
        datas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        datas.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(datas, SystemInfo.getTableHeaderRenderer());
        datas.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(datas);
        datas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                datasMouseReleased(evt);
            }
        });
        datas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                datasKeyReleased(evt);
            }
        });
        datasScrollPane.setViewportView(datas);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, datasScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(dataNameLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(dataName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(displaySeqLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 68, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(dataNameLabel)
                    .add(displaySeq, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(displaySeqLabel)
                    .add(dataName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(datasScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
		this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
		if(this.checkInput())
		{
			this.regist(false);
		}
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
		if(this.checkInput())
		{
			this.regist(true);
		}
	}//GEN-LAST:event_addButtonActionPerformed

	private void datasMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_datasMouseReleased
	{//GEN-HEADEREND:event_datasMouseReleased
		this.changeCurrentData();
	}//GEN-LAST:event_datasMouseReleased

	private void datasKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_datasKeyReleased
	{//GEN-HEADEREND:event_datasKeyReleased
		this.changeCurrentData();
	}//GEN-LAST:event_datasKeyReleased
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private com.geobeck.swing.JFormattedTextFieldEx dataName;
    private javax.swing.JLabel dataNameLabel;
    private javax.swing.JTable datas;
    private javax.swing.JScrollPane datasScrollPane;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private javax.swing.JButton renewButton;
    // End of variables declaration//GEN-END:variables
	
	private	SimpleMaster	sm				=	null;
	private	Integer			currentIndex	=	-1;
	
	private	SimpleMasterFocusTraversalPolicy	ftp	=
			new SimpleMasterFocusTraversalPolicy();
	
	/**
	 * ÉVÉìÉvÉãÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicyÇéÊìæÇ∑ÇÈÅB
	 * @return  ÉVÉìÉvÉãÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicy
	 */
	public SimpleMasterFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}
	
	/**
	 * É{É^ÉìÇ…É}ÉEÉXÉJÅ[É\ÉãÇ™èÊÇ¡ÇΩÇ∆Ç´Ç…ÉJÅ[É\ÉãÇïœçXÇ∑ÇÈÉCÉxÉìÉgÇí«â¡Ç∑ÇÈÅB
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(addButton);
		SystemInfo.addMouseCursorChange(renewButton);
		SystemInfo.addMouseCursorChange(deleteButton);
	}
	
	/**
	 * ÉRÉìÉ|Å[ÉlÉìÉgÇÃäeÉäÉXÉiÅ[ÇÉZÉbÉgÇ∑ÇÈÅB
	 */
	private void setListener()
	{
		dataName.addKeyListener(SystemInfo.getMoveNextField());
		dataName.addFocusListener(SystemInfo.getSelectText());
		displaySeq.addKeyListener(SystemInfo.getMoveNextField());
		displaySeq.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * èâä˙âªèàóùÇçsÇ§ÅB
	 * @param masterName É}ÉXÉ^ÇÃñºèÃ
	 * @param tableName ÉeÅ[ÉuÉãñº
	 * @param idColName ÇhÇcÇÃóÒñº
	 * @param nameColName ñºèÃÇÃóÒñº
	 * @param nameLength ñºèÃÇÃç≈ëÂï∂éöêî
	 */
	private void init(String masterName,
						String tableName,
						String idColName,
						String nameColName,
						int	nameLength)
	{
		this.setTitle(masterName + "ìoò^");
		sm	=	new SimpleMaster(masterName, tableName,
									idColName, nameColName, nameLength);
	}
	
	/**
	 * ì¸óÕçÄñ⁄ÇÉNÉäÉAÇ∑ÇÈÅB
	 */
	private void clear()
	{
		dataName.setText("");
		displaySeq.setText("");
		if(0 < datas.getRowCount())
				datas.removeRowSelectionInterval(0, datas.getRowCount() - 1);
		currentIndex = -1;
		this.changeCurrentData();
	}
	
	/**
	 * çƒï\é¶ÇçsÇ§ÅB
	 */
	private void refresh()
	{
		//É}ÉXÉ^ÇÉfÅ[É^ÉxÅ[ÉXÇ©ÇÁì«Ç›çûÇﬁ
		sm.loadData();
		//ÉeÅ[ÉuÉãÇ…É}ÉXÉ^ÉfÅ[É^Çï\é¶Ç∑ÇÈ
		this.showTableData();
		//ì¸óÕÇÉNÉäÉAÇ∑ÇÈ
		this.clear();
		
		dataName.requestFocusInWindow();
	}
	
	
	/**
	 * ÉeÅ[ÉuÉãÇ…É}ÉXÉ^ÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 */
	private void showTableData()
	{
		DefaultTableModel	model	=	(DefaultTableModel)datas.getModel();
		
		//ëSçsçÌèú
		model.setRowCount(0);
		datas.removeAll();
		
		for(MstData md : sm)
		{
			Object[]	rowData	=	{	md.getName(), md.getDisplaySeq()	};
			model.addRow(rowData);
		}
	}
	
	/**
	 * ëIëÉfÅ[É^Ç™ïœçXÇ≥ÇÍÇΩÇ∆Ç´ÇÃèàóùÅB
	 */
	private void changeCurrentData()
	{
		int	index	=	datas.getSelectedRow();
		
		if(0 <= index && index < sm.size() && currentIndex != index)
		{
			currentIndex	=	index;
			//ëIëÇ≥ÇÍÇƒÇ¢ÇÈÉfÅ[É^Çï\é¶
			this.showCurrentData();
		}
		
		//ÉfÅ[É^Ç™ëIëÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÅAçXêVÅEçÌèúÉ{É^ÉìÇégópâ¬î\Ç…Ç∑ÇÈ
		renewButton.setEnabled(0 <= currentIndex);
		deleteButton.setEnabled(0 <= currentIndex);
	}
	
	/**
	 * ëIëÇ≥ÇÍÇƒÇ¢ÇÈÉfÅ[É^Çï\é¶Ç∑ÇÈÅB
	 */
	private void showCurrentData()
	{
		dataName.setText(sm.get(currentIndex).getName());
		displaySeq.setText(sm.get(currentIndex).getDisplaySeq().toString());
	}
	
	/**
	 * ì¸óÕÉ`ÉFÉbÉNÇçsÇ§ÅB
	 * @return true - ÇnÇj
	 */
	private boolean checkInput()
	{
		//ñºèÃ
		if(dataName.getText().equals(""))
		{       //IVS_LTThuc start add 20140715 MASHU_ã∆ë‘ìoò^
                        MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, dataNameLabel.getText()),
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			dataName.requestFocusInWindow();
                          //IVS_LTThuc start end 20140715 MASHU_ã∆ë‘ìoò^
			return	false;
		}
		//IVS_LTThuc start add 20140715 MASHU_ã∆ë‘ìoò^
		if(displaySeq.getText().equals("0"))
		{
			MessageDialog.showMessageDialog(this,
					"ë}ì¸à íuÇÕ 1 à»è„ÇéwíËÇµÇƒÇ≠ÇæÇ≥Ç¢ÅB",
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			displaySeq.requestFocusInWindow();
			return	false;
		}
               //IVS_LTThuc start end 20140715 MASHU_ã∆ë‘ìoò^
		return	true;
	}
	
	/**
	 * ìoò^èàóùÇçsÇ§ÅB
	 * @param isInsert true - Insert
	 */
	private void regist(boolean isInsert)
	{
		MstData		temp	=	new MstData();
		
		//çsÇ™ëIëÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÅAå≥ÇÃÉfÅ[É^ÇÉZÉbÉgÇ∑ÇÈ
		if(0 <= currentIndex)
		{
			temp.setID(sm.get(currentIndex).getID());
			temp.setName(sm.get(currentIndex).getName());
			temp.setDisplaySeq(sm.get(currentIndex).getDisplaySeq());
		}
		
		//ì¸óÕÇ≥ÇÍÇΩÉfÅ[É^ÇÉZÉbÉg
		temp.setName(dataName.getText());
		temp.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText())));
		
		//ÉfÅ[É^Çìoò^
		if(sm.regist(temp, (isInsert ? -1 : currentIndex)))
		{
			this.refresh();
		}
		else
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED,
							sm.getMasterName()),
					sm.getMasterName() + "ìoò^",
					JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
	 * çÌèúèàóùÇçsÇ§ÅB
	 */
	private void delete()
	{
		MstData		temp	=	sm.get(currentIndex);
	         //IVS_LTThuc start add 20140805 MASHU_ã∆ë‘ìoò^
                
		//çÌèúämîF
                if(this.tableName=="mst_shop_category"){
              boolean checkCountZero = false;
                    
                    for(int i=0;i<4;i++){
               if(sm.getDeleteDataSQL2(mstTable[i],temp)>0){
     
        
                  checkCountZero = true;
                   break;
                 }
    
                }
                    if(checkCountZero==true){
                        MessageDialog.showMessageDialog(this,
					"ä˘Ç…óòópÇ≥ÇÍÇƒÇ¢ÇÈã∆ë‘ÇÕçÌèúÇ≈Ç´Ç‹ÇπÇÒÅB\n" +
             "óòópê›íËÇâèúÇµÇƒÇ©ÇÁçÌèúÇµÇƒÇ≠ÇæÇ≥Ç¢ÅB",
					this.getTitle(),
					JOptionPane.ERROR_MESSAGE);
			displaySeq.requestFocusInWindow();
                    }
                    else{
                        if(MessageDialog.showYesNoDialog(this,
				MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, temp.getName()),
				sm.getMasterName() + "É}ÉXÉ^ìoò^",
				JOptionPane.WARNING_MESSAGE) != 0)
		{
			return;
		}
		
		if(sm.delete(temp))
		{
			this.refresh();
		}
		else
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED,
							sm.getMasterName()),
					sm.getMasterName() + "É}ÉXÉ^ìoò^",
					JOptionPane.ERROR_MESSAGE);
		}
                    }
                }
                else{
                    if(MessageDialog.showYesNoDialog(this,
				MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, temp.getName()),
				sm.getMasterName() + "É}ÉXÉ^ìoò^",
				JOptionPane.WARNING_MESSAGE) != 0)
		{
			return;
		}
		
		if(sm.delete(temp))
		{
			this.refresh();
		}
		else
		{
			MessageDialog.showMessageDialog(this,
					MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED,
							sm.getMasterName()),
					sm.getMasterName() + "É}ÉXÉ^ìoò^",
					JOptionPane.ERROR_MESSAGE);
		}
                
                }
                //IVS_LTThuc end add 20140805 MASHU_ã∆ë‘ìoò^
        }
	
	
	/**
	 * ÉVÉìÉvÉãÉ}ÉXÉ^ìoò^âÊñ ópFocusTraversalPolicy
	 */
	private class SimpleMasterFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent ÇÃÇ†Ç∆Ç≈ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃÇ†Ç∆Ç…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(dataName))
			{
				return displaySeq;
			}
			else if (aComponent.equals(displaySeq))
			{
				return dataName;
			}
			
			return dataName;
		}

		/**
		 * aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÕ aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_Ç≈Ç»ÇØÇÍÇŒÇ»ÇËÇ‹ÇπÇÒÅB
		 * @param aContainer aComponent ÇÃÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @param aComponent aContainer ÇÃÇ®ÇªÇÁÇ≠ä‘ê⁄ìIÇ»éqÅAÇ‹ÇΩÇÕ aContainer é©ëÃ
		 * @return aComponent ÇÃëOÇ…ÉtÉHÅ[ÉJÉXÇéÛÇØéÊÇÈ ComponentÅBìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(dataName))
			{
				return displaySeq;
			}
			else if (aComponent.equals(displaySeq))
			{
				return dataName;
			}
			
			return dataName;
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈èâÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAèáï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer êÊì™ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃêÊì™ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return dataName;
		}

		/**
		 * ÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ Component Çï‘ÇµÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÕÅAãtï˚å¸ÇÃÉgÉâÉoÅ[ÉTÉãÇ™ÉâÉbÉvÇ∑ÇÈÇ∆Ç´Ç…ÅAéüÇ…ÉtÉHÅ[ÉJÉXÇ∑ÇÈ Component ÇîªíËÇ∑ÇÈÇΩÇﬂÇ…égópÇµÇ‹Ç∑ÅB
		 * @param aContainer aContainer - ç≈å„ÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃç≈å„ÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return displaySeq;
		}

		/**
		 * ÉtÉHÅ[ÉJÉXÇê›íËÇ∑ÇÈÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * aContainer ÇÉãÅ[ÉgÇ∆Ç∑ÇÈÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇ™êVÇµÇ≠äJénÇ≥ÇÍÇΩÇ∆Ç´Ç…ÅAÇ±ÇÃÉRÉìÉ|Å[ÉlÉìÉgÇ…ç≈èâÇ…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇ‹Ç∑ÅB
		 * @param aContainer ÉfÉtÉHÉãÉgÇÃ Component Çï‘Ç∑ÉtÉHÅ[ÉJÉXÉTÉCÉNÉãÇÃÉãÅ[ÉgÇ‹ÇΩÇÕÉtÉHÅ[ÉJÉXÉgÉâÉoÅ[ÉTÉãÉ|ÉäÉVÅ[ÉvÉçÉoÉCÉ_
		 * @return aContainer ÇÃÉgÉâÉoÅ[ÉTÉãÉTÉCÉNÉãÇÃÉfÉtÉHÉãÉgÇÃ ComponetÅAÇ‹ÇΩÇÕìKêÿÇ» Component Ç™å©Ç¬Ç©ÇÁÇ»Ç¢èÍçáÇÕ null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return dataName;
		}
		
		/**
		 * ÉEÉBÉìÉhÉEÇ™ç≈èâÇ…ï\é¶Ç≥ÇÍÇΩÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * show() Ç‹ÇΩÇÕ setVisible(true) ÇÃåƒÇ—èoÇµÇ≈àÍìxÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆ÅA
		 * èâä˙âªÉRÉìÉ|Å[ÉlÉìÉgÇÕÇªÇÍà»ç~égópÇ≥ÇÍÇ‹ÇπÇÒÅB
		 * àÍìxï ÇÃÉEÉBÉìÉhÉEÇ…à⁄Ç¡ÇΩÉtÉHÅ[ÉJÉXÇ™çƒÇ—ê›íËÇ≥ÇÍÇΩèÍçáÅA
		 * Ç‹ÇΩÇÕÅAàÍìxîÒï\é¶èÛë‘Ç…Ç»Ç¡ÇΩÉEÉBÉìÉhÉEÇ™çƒÇ—ï\é¶Ç≥ÇÍÇΩèÍçáÇÕÅA
		 * ÇªÇÃÉEÉBÉìÉhÉEÇÃç≈å„Ç…ÉtÉHÅ[ÉJÉXÇ™ê›íËÇ≥ÇÍÇΩÉRÉìÉ|Å[ÉlÉìÉgÇ™ÉtÉHÅ[ÉJÉXèäóLé“Ç…Ç»ÇËÇ‹Ç∑ÅB
		 * Ç±ÇÃÉÅÉ\ÉbÉhÇÃÉfÉtÉHÉãÉgé¿ëïÇ≈ÇÕÉfÉtÉHÉãÉgÉRÉìÉ|Å[ÉlÉìÉgÇï‘ÇµÇ‹Ç∑ÅB
		 * @param window èâä˙ÉRÉìÉ|Å[ÉlÉìÉgÇ™ï‘Ç≥ÇÍÇÈÉEÉBÉìÉhÉE
		 * @return ç≈èâÇ…ÉEÉBÉìÉhÉEÇ™ï\é¶Ç≥ÇÍÇÈÇ∆Ç´Ç…ÉtÉHÅ[ÉJÉXê›íËÇ≥ÇÍÇÈÉRÉìÉ|Å[ÉlÉìÉgÅBìKêÿÇ»ÉRÉìÉ|Å[ÉlÉìÉgÇ™Ç»Ç¢èÍçáÇÕ null
		 */
		public Component getInitialComponent(Window window)
		{
			return dataName;
		}
	}
	/**
	 * JTableÇÃóÒïùÇèâä˙âªÇ∑ÇÈÅB
	 */
	private void initTableColumnWidth()
	{
		//óÒÇÃïùÇê›íËÇ∑ÇÈÅB
		datas.getColumnModel().getColumn(0).setPreferredWidth(240);
		datas.getColumnModel().getColumn(1).setPreferredWidth(50);
	}
	
	
	/**
	 * óÒÇÃï\é¶à íuÇê›íËÇ∑ÇÈTableCellRenderer
	 */
	private class TableCellAlignRenderer extends DefaultTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}

		/**
		 * ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉOÇï‘ÇµÇ‹Ç∑ÅB
		 * @param table JTable
		 * @param value ÉZÉãÇ…äÑÇËìñÇƒÇÈíl
		 * @param isSelected ÉZÉãÇ™ëIëÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÇÕ true
		 * @param hasFocus ÉtÉHÅ[ÉJÉXÇ™Ç†ÇÈèÍçáÇÕ true
		 * @param row çs
		 * @param column óÒ
		 * @return ÉeÅ[ÉuÉãÉZÉãÉåÉìÉ_ÉäÉìÉO
		 */
		public Component getTableCellRendererComponent(JTable table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);
			
			switch(column)
			{
				case 1:
					super.setHorizontalAlignment(SwingConstants.RIGHT);
					break;
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}

			return this;
		}
	}
}
