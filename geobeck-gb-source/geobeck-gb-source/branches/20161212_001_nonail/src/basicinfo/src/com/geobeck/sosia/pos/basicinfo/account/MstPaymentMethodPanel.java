/*
 * MstPaymentMethodPanel.java
 *
 * Created on 2006/10/20, 11:41
 */
package com.geobeck.sosia.pos.basicinfo.account;

import com.geobeck.sosia.pos.master.account.*;
import com.geobeck.sosia.pos.system.SystemInfo;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import javax.swing.text.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;

import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.master.*;
import com.geobeck.sosia.pos.swing.*;
import com.geobeck.sosia.pos.util.*;

/**
 *
 * @author katagiri
 */
public class MstPaymentMethodPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    /**
     * 支払区分のリスト
     */
    private ArrayList<MstPaymentClass> paymentClassList = new ArrayList<MstPaymentClass>();
    /**
     * 支払方法のリスト
     */
    private ArrayList<MstPaymentMethod> paymentMethodList = new ArrayList<MstPaymentMethod>();
    /**
     * 支払方法
     */
    private MstPaymentMethod paymentMethod = new MstPaymentMethod();
    /**
     * 支払方法登録画面用FocusTraversalPolicy
     */
    private MstPaymentMethodFocusTraversalPolicy ftp =
            new MstPaymentMethodFocusTraversalPolicy();

    /**
     * Creates new form MstPaymentMethodPanel
     */
    public MstPaymentMethodPanel() {
        super();
        this.init();
        initComponents();
        addMouseCursorChange();
        this.setSize(450, 680);
        this.setPath("基本設定 >> 精算マスタ");
        this.setTitle("支払方法登録");
        this.setListener();
        this.refresh();
        if (SystemInfo.getDatabase().equals("pos_hair_missionf")
                || SystemInfo.getDatabase().equals("pos_hair_missionf_dev")) {
            chkPrepaid.setText("パスブック利用");
           // DefaultTableModel model = (DefaultTableModel)paymentMethods.getModel();
           paymentMethods.getColumnModel().getColumn(4).setHeaderValue("パスブック");
        }

        if (!SystemInfo.getSetteing().isUsePrepaid()) {
            chkPrepaid.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        monthGroup = new javax.swing.ButtonGroup();
        cutoffDayLabel = new javax.swing.JLabel();
        nextMonth = new javax.swing.JRadioButton();
        paymentMethodName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)paymentMethodName.getDocument()).setDocumentFilter(
            new CustomFilter(16));
        jLabel4 = new javax.swing.JLabel();
        dayLabel1 = new javax.swing.JLabel();
        receiptDayLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        paymentClass = new javax.swing.JComboBox();
        cutoffDay = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createNumberFormatter(2,
                1, 31));
        paymentMethodsScrollPane = new javax.swing.JScrollPane();
        paymentMethods = new javax.swing.JTable();
        renewButton = new javax.swing.JButton();
        thisMonth = new javax.swing.JRadioButton();
        receiptDay = new com.geobeck.swing.JFormattedTextFieldEx(
            FormatterCreator.createNumberFormatter(2,
                1, 31));
        ((PlainDocument)receiptDay.getDocument()).setDocumentFilter(
            new CustomFilter(2, CustomFilter.NUMERIC));
        dayLabel0 = new javax.swing.JLabel();
        monthAfterNext = new javax.swing.JRadioButton();
        paymentMethodNameLabel = new javax.swing.JLabel();
        chkPrepaid = new javax.swing.JCheckBox();

        setFocusCycleRoot(true);

        cutoffDayLabel.setText("締日");

        monthGroup.add(nextMonth);
        nextMonth.setText("翌月");
        nextMonth.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        nextMonth.setMargin(new java.awt.Insets(0, 0, 0, 0));
        nextMonth.setOpaque(false);

        paymentMethodName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        paymentMethodName.setColumns(20);
        paymentMethodName.setInputKanji(true);

        jLabel4.setText("入金月");

        dayLabel1.setText("日");

        receiptDayLabel.setText("入金日");

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("区分名");

        paymentClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        for(MstPaymentClass mpc : paymentClassList)
        paymentClass.addItem(mpc.getPaymentClassName());
        paymentClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentClassActionPerformed(evt);
            }
        });

        cutoffDay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        cutoffDay.setColumns(2);
        cutoffDay.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        paymentMethodsScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        paymentMethods.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "支払方法名", "締日", "入金月", "入金日", "プリペイド"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        paymentMethods.setSelectionBackground(new java.awt.Color(220, 220, 220));
        paymentMethods.setSelectionForeground(new java.awt.Color(0, 0, 0));
        paymentMethods.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        paymentMethods.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(paymentMethods, SystemInfo.getTableHeaderRenderer());
        paymentMethods.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(paymentMethods);
        paymentMethods.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paymentMethodsKeyReleased(evt);
            }
        });
        paymentMethods.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                paymentMethodsMouseReleased(evt);
            }
        });
        paymentMethodsScrollPane.setViewportView(paymentMethods);

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        monthGroup.add(thisMonth);
        thisMonth.setSelected(true);
        thisMonth.setText("当月");
        thisMonth.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        thisMonth.setMargin(new java.awt.Insets(0, 0, 0, 0));
        thisMonth.setOpaque(false);

        receiptDay.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        receiptDay.setColumns(2);
        receiptDay.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        dayLabel0.setText("日");

        monthGroup.add(monthAfterNext);
        monthAfterNext.setText("翌々月");
        monthAfterNext.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        monthAfterNext.setMargin(new java.awt.Insets(0, 0, 0, 0));
        monthAfterNext.setOpaque(false);

        paymentMethodNameLabel.setText("支払方法名");

        chkPrepaid.setText("プリペイド利用");
        chkPrepaid.setOpaque(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, paymentMethodsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, cutoffDayLabel)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel4)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, paymentMethodNameLabel)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel1)
                                    .add(receiptDayLabel))
                                .add(41, 41, 41)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(cutoffDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(dayLabel0))
                                    .add(layout.createSequentialGroup()
                                        .add(receiptDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(dayLabel1))
                                    .add(layout.createSequentialGroup()
                                        .add(thisMonth)
                                        .add(25, 25, 25)
                                        .add(nextMonth)
                                        .add(22, 22, 22)
                                        .add(monthAfterNext))
                                    .add(paymentMethodName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                                    .add(paymentClass, 0, 249, Short.MAX_VALUE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(chkPrepaid))
                        .add(1, 1, 1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(paymentClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(paymentMethodNameLabel)
                            .add(paymentMethodName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(cutoffDayLabel)
                            .add(cutoffDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(dayLabel0))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(thisMonth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(nextMonth)
                            .add(monthAfterNext))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(receiptDay, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(dayLabel1)
                            .add(receiptDayLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(chkPrepaid)
                        .add(16, 16, 16)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(addButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(renewButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(deleteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(paymentMethodsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
	{//GEN-HEADEREND:event_deleteButtonActionPerformed
            this.delete();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void renewButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_renewButtonActionPerformed
	{//GEN-HEADEREND:event_renewButtonActionPerformed
            this.regist(false);
	}//GEN-LAST:event_renewButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
	{//GEN-HEADEREND:event_addButtonActionPerformed
            this.regist(true);
	}//GEN-LAST:event_addButtonActionPerformed

	private void paymentClassActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_paymentClassActionPerformed
	{//GEN-HEADEREND:event_paymentClassActionPerformed
            this.loadPaymentMethods();
            this.showTableData();
	}//GEN-LAST:event_paymentClassActionPerformed

	private void paymentMethodsMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_paymentMethodsMouseReleased
	{//GEN-HEADEREND:event_paymentMethodsMouseReleased
            this.changeCurrentData();
	}//GEN-LAST:event_paymentMethodsMouseReleased

	private void paymentMethodsKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_paymentMethodsKeyReleased
	{//GEN-HEADEREND:event_paymentMethodsKeyReleased
            this.changeCurrentData();
	}//GEN-LAST:event_paymentMethodsKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JCheckBox chkPrepaid;
    private com.geobeck.swing.JFormattedTextFieldEx cutoffDay;
    private javax.swing.JLabel cutoffDayLabel;
    private javax.swing.JLabel dayLabel0;
    private javax.swing.JLabel dayLabel1;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton monthAfterNext;
    private javax.swing.ButtonGroup monthGroup;
    private javax.swing.JRadioButton nextMonth;
    private javax.swing.JComboBox paymentClass;
    private com.geobeck.swing.JFormattedTextFieldEx paymentMethodName;
    private javax.swing.JLabel paymentMethodNameLabel;
    private javax.swing.JTable paymentMethods;
    private javax.swing.JScrollPane paymentMethodsScrollPane;
    private com.geobeck.swing.JFormattedTextFieldEx receiptDay;
    private javax.swing.JLabel receiptDayLabel;
    private javax.swing.JButton renewButton;
    private javax.swing.JRadioButton thisMonth;
    // End of variables declaration//GEN-END:variables

    /**
     * 支払方法登録画面用FocusTraversalPolicyを取得する。
     *
     * @return 支払方法登録画面用FocusTraversalPolicy
     */
    public MstPaymentMethodFocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }

    /**
     * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
     */
    private void addMouseCursorChange() {
        SystemInfo.addMouseCursorChange(addButton);
        SystemInfo.addMouseCursorChange(renewButton);
        SystemInfo.addMouseCursorChange(deleteButton);
    }

    /**
     * コンポーネントの各リスナーをセットする。
     */
    private void setListener() {
        cutoffDay.addKeyListener(SystemInfo.getMoveNextField());
        cutoffDay.addFocusListener(SystemInfo.getSelectText());
        monthAfterNext.addKeyListener(SystemInfo.getMoveNextField());
        nextMonth.addKeyListener(SystemInfo.getMoveNextField());
        paymentClass.addKeyListener(SystemInfo.getMoveNextField());
        paymentClass.addFocusListener(SystemInfo.getSelectText());
        paymentMethodName.addKeyListener(SystemInfo.getMoveNextField());
        paymentMethodName.addFocusListener(SystemInfo.getSelectText());
        receiptDay.addKeyListener(SystemInfo.getMoveNextField());
        receiptDay.addFocusListener(SystemInfo.getSelectText());
        thisMonth.addKeyListener(SystemInfo.getMoveNextField());
    }

    /**
     * 初期化処理を行う。
     */
    private void init() {
        this.loadPaymentClassList();
    }

    /**
     * 支払区分のリストをデータベースから読み込む。
     */
    private void loadPaymentClassList() {
        paymentClassList.clear();

        ConnectionWrapper con = SystemInfo.getConnection();

        try {
            ResultSetWrapper rs = con.executeQuery(
                    MstPaymentClass.getSelectAllSQL(false));

            while (rs.next()) {
                MstPaymentClass mpc = new MstPaymentClass();

                mpc.setData(rs);

                paymentClassList.add(mpc);
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }

    /**
     * 再表示を行う。
     */
    private void refresh() {
        //支払方法マスタをデータベースから読み込む
        this.loadPaymentMethods();
        //テーブルに支払方法マスタデータを表示する
        this.showTableData();
        //入力をクリアする
        this.clear();
    }

    /**
     * 支払方法マスタをデータベースから読み込む。
     *
     * @return true − 成功
     */
    private boolean loadPaymentMethods() {
        //支払方法マスタデータリストをクリア
        paymentMethodList.clear();

        //コネクションを取得
        ConnectionWrapper con = SystemInfo.getConnection();

        try {

            //支払方法マスタからデータを取得
            ResultSetWrapper rs = con.executeQuery(MstPaymentMethod.getSelectAllSQL(this.getSelectedPaymentClassID()));

            while (rs.next()) {
                MstPaymentMethod mj = new MstPaymentMethod();
                //ResultSetからデータを取得
                mj.setData(rs);
                //支払方法マスタデータリストに追加
                paymentMethodList.add(mj);
            }

            rs.close();
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }

        return true;
    }

    /**
     * 選択されている支払区分ＩＤを取得する。
     *
     * @return 選択されている支払区分ＩＤ
     */
    private Integer getSelectedPaymentClassID() {
        if (paymentClass.getSelectedIndex() < 0) {
            return null;
        }

        MstPaymentClass pc = paymentClassList.get(paymentClass.getSelectedIndex());

        if (pc == null) {
            return null;
        } else {
            return pc.getPaymentClassID();
        }
    }

    /**
     * テーブルに支払方法マスタデータを表示する。
     */
    private void showTableData() {
        DefaultTableModel model = (DefaultTableModel) paymentMethods.getModel();

        //全行削除
        model.setRowCount(0);
        paymentMethods.removeAll();

        for (MstPaymentMethod mpm : paymentMethodList) {
            Object[] rowData = {
                mpm.getPaymentMethodName(),
                mpm.getCutoffDay(),
                mpm.getReceiptClassName(),
                mpm.getReceiptDay(),
                (mpm.isPrepaid() ? "      ●" : "")
            };
            model.addRow(rowData);
        }
    }

    /**
     * 選択データが変更されたときの処理。
     */
    private void changeCurrentData() {
        int index = paymentMethods.getSelectedRow();

        if (0 <= index && index < paymentMethodList.size() && paymentMethod != paymentMethodList.get(index)) {
            paymentMethod = paymentMethodList.get(index);
            //選択されているデータを表示
            this.showCurrentData();
        }

        renewButton.setEnabled(paymentMethod.getPaymentMethodID() != null);
        deleteButton.setEnabled(paymentMethod.getPaymentMethodID() != null);
    }

    /**
     * 選択されているデータを表示する。
     */
    private void showCurrentData() {
        paymentMethodName.setText(paymentMethod.getPaymentMethodName());
        cutoffDay.setValue(paymentMethod.getCutoffDay());
        switch (paymentMethod.getReceiptClass()) {
            case 1:
                thisMonth.setSelected(true);
                break;
            case 2:
                nextMonth.setSelected(true);
                break;
            case 3:
                monthAfterNext.setSelected(true);
                break;
        }
        receiptDay.setValue(paymentMethod.getReceiptDay());

        chkPrepaid.setSelected(paymentMethod.isPrepaid());
    }

    /**
     * 入力項目をクリアする。
     */
    private void clear() {
        paymentMethod = new MstPaymentMethod();

        paymentMethodName.setText("");
        cutoffDay.setValue(null);
        cutoffDay.setText("");
        thisMonth.setSelected(true);
        nextMonth.setSelected(false);
        monthAfterNext.setSelected(false);
        receiptDay.setValue(null);
        receiptDay.setText("");

        if (0 < paymentMethods.getRowCount()) {
            paymentMethods.removeRowSelectionInterval(0, paymentMethods.getRowCount() - 1);
        }

        chkPrepaid.setSelected(false);

        this.changeCurrentData();
    }

    /**
     * 支払方法マスタにデータを登録する。
     *
     * @param isAdd true − 追加処理
     */
    private void regist(boolean isAdd) {
        //入力チェック
        if (!this.checkInput()) {
            return;
        }

        //クラスにデータをセット
        this.setData();

        if (isAdd) {
            paymentMethod.setPaymentMethodID(null);
        }

        //コネクションを取得
        ConnectionWrapper con = SystemInfo.getConnection();

        if (con == null) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_CONNECT_FAILED),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            //トランザクション開始
            con.begin();

            //支払方法マスタを登録
            if (this.registData(con)) {
                //トランザクションコミット
                con.commit();

                SystemInfo.reloadPaymentClasses();
                //再表示
                this.refresh();
            } else {
                //トランザクションロールバック
                con.rollback();
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "支払方法"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }

    /**
     * 入力チェックを行う
     *
     * @return false − 入力エラー有り
     */
    private boolean checkInput() {
        //支払方法名
        if (paymentMethodName.getText().equals("")) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "支払方法名"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        //締め日
        if (!cutoffDay.getText().equals("")
                && !CheckUtil.isNumber(cutoffDay.getText())) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "締め日"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        //入金日
        if (!receiptDay.getText().equals("")
                && !CheckUtil.isNumber(receiptDay.getText())) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_WRONG, "入金日"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    /**
     * 入力されたデータをクラスにセットする。
     */
    private void setData() {
        paymentMethod.setPaymentClass(
                paymentClassList.get(paymentClass.getSelectedIndex()));
        paymentMethod.setPaymentMethodName(paymentMethodName.getText());
        //paymentMethod.setCutoffDay(Integer.parseInt(cutoffDay.getText()));
        paymentMethod.setCutoffDay((Integer) cutoffDay.getValue());
        paymentMethod.setReceiptClass(this.getCutoffDay());
        paymentMethod.setReceiptDay((Integer) receiptDay.getValue());
        paymentMethod.setPrepaid(chkPrepaid.isSelected() ? 1 : 0);
    }

    /**
     * 締め日を取得する。
     *
     * @return 締め日
     */
    private Integer getCutoffDay() {
        if (this.thisMonth.isSelected()) {
            return 1;
        } else if (this.nextMonth.isSelected()) {
            return 2;
        } else if (this.monthAfterNext.isSelected()) {
            return 3;
        } else {
            return null;
        }
    }

    /**
     * データを登録する。
     *
     * @param con コネクション
     * @return true − 成功
     */
    private boolean registData(ConnectionWrapper con) {
        try {
            //支払方法マスタにデータを登録
            return paymentMethod.regist(con);
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            return false;
        }
    }

    /**
     * 削除する。
     */
    private void delete() {
        if (MessageDialog.showYesNoDialog(this,
                MessageUtil.getMessage(MessageUtil.CONFIRM_DELETE, paymentMethod.getPaymentMethodName()),
                this.getTitle(),
                JOptionPane.WARNING_MESSAGE) != 0) {
            return;
        }

        ConnectionWrapper con = SystemInfo.getConnection();

        if (con == null) {
            MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_CONNECT_FAILED),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
        }

        try {
            con.begin();

            //支払方法マスタを論理削除
            if (paymentMethod.delete(con)) {
                //トランザクションコミット
                con.commit();

                SystemInfo.reloadPaymentClasses();
                //再表示
                this.refresh();
            } else {
                //トランザクションロールバック
                con.rollback();
                MessageDialog.showMessageDialog(this,
                        MessageUtil.getMessage(MessageUtil.ERROR_DELETE_FAILED),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }

    /**
     * 支払方法登録画面用FocusTraversalPolicy
     */
    private class MstPaymentMethodFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentAfter(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(paymentClass)) {
                return paymentMethodName;
            } else if (aComponent.equals(paymentMethodName)) {
                return cutoffDay;
            } else if (aComponent.equals(cutoffDay)) {
                if (thisMonth.isSelected()) {
                    return thisMonth;
                } else if (nextMonth.isSelected()) {
                    return nextMonth;
                } else if (monthAfterNext.isSelected()) {
                    return monthAfterNext;
                } else {
                    return thisMonth;
                }
            } else if (aComponent.equals(thisMonth)) {
                return receiptDay;
            } else if (aComponent.equals(nextMonth)) {
                return receiptDay;
            } else if (aComponent.equals(monthAfterNext)) {
                return receiptDay;
            } else if (aComponent.equals(receiptDay)) {
                return paymentClass;
            }

            return paymentClass;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。 aContainer は aComponent
         * のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
         *
         * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
         * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は
         * null
         */
        public Component getComponentBefore(Container aContainer,
                Component aComponent) {
            if (aComponent.equals(paymentClass)) {
                return paymentClass;
            } else if (aComponent.equals(paymentMethodName)) {
                return paymentClass;
            } else if (aComponent.equals(cutoffDay)) {
                return paymentMethodName;
            } else if (aComponent.equals(thisMonth)) {
                return cutoffDay;
            } else if (aComponent.equals(nextMonth)) {
                return cutoffDay;
            } else if (aComponent.equals(monthAfterNext)) {
                return cutoffDay;
            } else if (aComponent.equals(receiptDay)) {
                if (thisMonth.isSelected()) {
                    return thisMonth;
                } else if (nextMonth.isSelected()) {
                    return nextMonth;
                } else if (monthAfterNext.isSelected()) {
                    return monthAfterNext;
                } else {
                    return thisMonth;
                }
            }

            return paymentClass;
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。 このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer 先頭の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getFirstComponent(Container aContainer) {
            return paymentClass;
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。 このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする
         * Component を判定するために使用します。
         *
         * @param aContainer aContainer - 最後の Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getLastComponent(Container aContainer) {
            return receiptDay;
        }

        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。 aContainer
         * をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
         *
         * @param aContainer デフォルトの Component
         * を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
         * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component
         * が見つからない場合は null
         */
        public Component getDefaultComponent(Container aContainer) {
            return paymentClass;
        }

        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。 show() または setVisible(true)
         * の呼び出しで一度ウィンドウが表示されると、 初期化コンポーネントはそれ以降使用されません。
         * 一度別のウィンドウに移ったフォーカスが再び設定された場合、 または、一度非表示状態になったウィンドウが再び表示された場合は、
         * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
         * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
         *
         * @param window 初期コンポーネントが返されるウィンドウ
         * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
         */
        public Component getInitialComponent(Window window) {
            return paymentClass;
        }
    }

    /**
     * JTableの列幅を初期化する。
     */
    private void initTableColumnWidth() {
        //列の幅を設定する。
        paymentMethods.getColumnModel().getColumn(0).setPreferredWidth(180);
        paymentMethods.getColumnModel().getColumn(1).setPreferredWidth(70);
        paymentMethods.getColumnModel().getColumn(2).setPreferredWidth(70);
        paymentMethods.getColumnModel().getColumn(3).setPreferredWidth(70);
    }

    /**
     * 列の表示位置を設定するTableCellRenderer
     */
    private class TableCellAlignRenderer extends DefaultTableCellRenderer {

        /**
         * Creates a new instance of ReservationTableCellRenderer
         */
        public TableCellAlignRenderer() {
            super();
        }

        /**
         * テーブルセルレンダリングを返します。
         *
         * @param table JTable
         * @param value セルに割り当てる値
         * @param isSelected セルが選択されている場合は true
         * @param hasFocus フォーカスがある場合は true
         * @param row 行
         * @param column 列
         * @return テーブルセルレンダリング
         */
        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value,
                    isSelected, hasFocus, row, column);

            switch (column) {
                case 2:
                    super.setHorizontalAlignment(SwingConstants.CENTER);
                    break;
                case 1:
                case 3:
                    super.setHorizontalAlignment(SwingConstants.RIGHT);
                    break;
                default:
                    super.setHorizontalAlignment(SwingConstants.LEFT);
                    break;
            }

            return this;
        }
    }
}
