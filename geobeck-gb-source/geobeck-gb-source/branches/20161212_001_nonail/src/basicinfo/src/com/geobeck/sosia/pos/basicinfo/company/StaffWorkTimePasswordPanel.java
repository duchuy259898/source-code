/*
 * StaffWorkTimePasswordPanel.java
 *
 * Created on 2007/08/10, 11:01
 */

package com.geobeck.sosia.pos.basicinfo.company;

import java.sql.*;
import javax.swing.*;
import java.util.logging.*;

import com.geobeck.swing.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.util.*;

import com.geobeck.sql.*;
import com.geobeck.sosia.pos.data.company.*;
import com.geobeck.sosia.pos.master.company.MstShop;

/**
 *
 * @author  kanemoto
 */
public class StaffWorkTimePasswordPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {
    private StaffWorkTimePass swtp = new StaffWorkTimePass();	    // パスワードデータ
    
    /** Creates new form StaffWorkTimePasswordPanel */
    public StaffWorkTimePasswordPanel() {
	initComponents();
	this.setPath("基本設定 >> 会社マスタ");
	this.setTitle("出退勤パスワード変更");
	this.setSize(400, 500);
        SystemInfo.initGroupShopComponents(shop, 2);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        renewButton = new javax.swing.JButton();
        oldPassLabel = new javax.swing.JLabel();
        newPass2Label = new javax.swing.JLabel();
        newPass1Label = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        oldPassTxt = new javax.swing.JTextArea();
        oldPass = new javax.swing.JPasswordField();
        newPass1 = new javax.swing.JPasswordField();
        newPass2 = new javax.swing.JPasswordField();
        newPass1Label1 = new javax.swing.JLabel();
        newPass1Label2 = new javax.swing.JLabel();
        newPass1Label3 = new javax.swing.JLabel();
        newPass1Label4 = new javax.swing.JLabel();
        newPass1Label5 = new javax.swing.JLabel();
        newPass1Label6 = new javax.swing.JLabel();
        newPass1Label7 = new javax.swing.JLabel();
        newPass1Label8 = new javax.swing.JLabel();
        shopLabel = new javax.swing.JLabel();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setFocusCycleRoot(true);

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setContentAreaFilled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });

        oldPassLabel.setText("現在のパスワード");

        newPass2Label.setText("新しいパスワード");

        newPass1Label.setText("新しいパスワード(確認)");

        oldPassTxt.setColumns(10);
        oldPassTxt.setEditable(false);
        oldPassTxt.setRows(2);
        oldPassTxt.setText("現在パスワードは\n設定されていません");
        oldPassTxt.setBorder(null);
        oldPassTxt.setFocusable(false);
        oldPassTxt.setOpaque(false);
        oldPassTxt.setRequestFocusEnabled(false);
        oldPassTxt.setVerifyInputWhenFocusTarget(false);
        jScrollPane2.setViewportView(oldPassTxt);

        oldPass.setColumns(8);
        oldPass.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                oldPassFocusGained(evt);
            }
        });

        newPass1.setColumns(8);

        newPass2.setColumns(8);

        newPass1Label1.setForeground(java.awt.Color.red);
        newPass1Label1.setText("※ パスワードを設定すると、棚卸情報の過去データ修正時、");

        newPass1Label2.setForeground(java.awt.Color.red);
        newPass1Label2.setText("　　権限登録画面を開く時、出退勤時間の修正時、");

        newPass1Label3.setForeground(java.awt.Color.red);
        newPass1Label3.setText("　　管理者メールアドレス登録画面を開く時に、");

        newPass1Label4.setForeground(java.awt.Color.red);
        newPass1Label4.setText("　　パスワード入力が必要になります。");

        newPass1Label5.setForeground(java.awt.Color.red);
        newPass1Label5.setText("　　【パスワードの解除方法】");

        newPass1Label6.setForeground(java.awt.Color.red);
        newPass1Label6.setText("　　　設定しているパスワードを解除する場合は、");

        newPass1Label7.setForeground(java.awt.Color.red);
        newPass1Label7.setText("　　　現在のパスワードを入力していただき、");

        newPass1Label8.setForeground(java.awt.Color.red);
        newPass1Label8.setText("　　　そのまま「更新」ボタンを押すとリセットされます。");

        shopLabel.setText("店舗");

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newPass1Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPass1Label2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPass1Label3, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPass1Label4, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPass1Label5, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPass1Label6, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPass1Label7, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPass1Label8, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(shopLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(newPass1Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(newPass2Label, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(oldPassLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(newPass2, 0, 0, Short.MAX_VALUE)
                                    .addComponent(newPass1, 0, 0, Short.MAX_VALUE)
                                    .addComponent(oldPass, 0, 0, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                                .addGap(28, 28, 28)
                                .addComponent(renewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(oldPassLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(oldPass, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newPass2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newPass1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newPass1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newPass2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(renewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(newPass1Label1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newPass1Label2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newPass1Label3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newPass1Label4)
                .addGap(62, 62, 62)
                .addComponent(newPass1Label5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newPass1Label6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newPass1Label7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newPass1Label8)
                .addContainerGap(105, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void oldPassFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_oldPassFocusGained
    }//GEN-LAST:event_oldPassFocusGained

    private void renewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renewButtonActionPerformed
	this.regist();
    }//GEN-LAST:event_renewButtonActionPerformed

    private void shopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopActionPerformed
        this.init();
    }//GEN-LAST:event_shopActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPasswordField newPass1;
    private javax.swing.JLabel newPass1Label;
    private javax.swing.JLabel newPass1Label1;
    private javax.swing.JLabel newPass1Label2;
    private javax.swing.JLabel newPass1Label3;
    private javax.swing.JLabel newPass1Label4;
    private javax.swing.JLabel newPass1Label5;
    private javax.swing.JLabel newPass1Label6;
    private javax.swing.JLabel newPass1Label7;
    private javax.swing.JLabel newPass1Label8;
    private javax.swing.JPasswordField newPass2;
    private javax.swing.JLabel newPass2Label;
    private javax.swing.JPasswordField oldPass;
    private javax.swing.JLabel oldPassLabel;
    private javax.swing.JTextArea oldPassTxt;
    private javax.swing.JButton renewButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel shopLabel;
    // End of variables declaration//GEN-END:variables
    
    /**
     * 初期化処理を行う
     */
    private void init()
    {
        SystemInfo.addMouseCursorChange(renewButton);
        
        oldPass.addKeyListener(SystemInfo.getMoveNextField());
        oldPass.addFocusListener(SystemInfo.getSelectText());
        newPass1.addKeyListener(SystemInfo.getMoveNextField());
        newPass1.addFocusListener(SystemInfo.getSelectText());
        newPass2.addKeyListener(SystemInfo.getMoveNextField());
        newPass2.addFocusListener(SystemInfo.getSelectText());
        
	// パスワードデータを取得する
	getPasswordData();
	// 画面設定を行う
	setPanelComponent();
    }
    
    /**
     * パスワードデータを取得する
     */
    private void getPasswordData()
    {
	ConnectionWrapper con = SystemInfo.getConnection();
	try {
            swtp.setData( con, (MstShop)shop.getSelectedItem() );
	} catch(Exception e) {
	    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	}
    }
    
    /**
     * 画面設定を行う
     */
    private void setPanelComponent()
    {
	boolean isPassword = ( swtp.getPassword() != null );	// パスワードの有無

        // 現パスワード入力フィールド
        oldPass.setEditable(isPassword); 

        // 現パスワードテキスト
        if (isPassword) {
            oldPassTxt.setText("パスワードが\n設定されています");
        } else {
            oldPassTxt.setText("現在パスワードは\n設定されていません");
        }
    }
    
    /**
     * 入力フィールドをクリアする
     */
    private void clear()
    {
	oldPass.setText("");
	newPass1.setText("");
	newPass2.setText("");
    }
    
    /**
     * パスワードを変更する
     */
    private void regist()
    {
	ConnectionWrapper con = SystemInfo.getConnection();
	if( checkInput() )
	{
	    // パスワードを変更する
	    try
	    {
		con.begin();
		if( swtp.updatePassword( con, this.getPassword( oldPass.getPassword(), true ), this.getPassword( newPass1.getPassword(), true ) ) )
		{
		    // 変更成功
		    con.commit();
		    MessageDialog.showMessageDialog(this, MessageUtil.getMessage( 1301, "パスワードの変更", "成功" ), this.getTitle(), JOptionPane.INFORMATION_MESSAGE );
		    setPanelComponent();
		    clear();
		}
		else
		{
		    // 変更失敗
		    con.rollback();
		    MessageDialog.showMessageDialog(this, MessageUtil.getMessage( 1301, "パスワードの変更", "失敗" ), this.getTitle(), JOptionPane.ERROR_MESSAGE);
		}
	    }
	    catch(SQLException e)
	    {
		SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
	    }
	}
    }
    
    /**
     * 入力データをチェックする
     * @return 入力データに問題が無ければTrueを返す
     */
    private boolean checkInput()
    {
	String old  = this.getPassword( oldPass.getPassword(), false );
	String new1 = this.getPassword( newPass1.getPassword(), false );
	String new2 = this.getPassword( newPass2.getPassword(), false );
	// パスワードチェック
	if( swtp.getPassword() != null )
	{
	    if( old.equals( "" ) )
	    {
		// パスワードを入力してください。
		MessageDialog.showMessageDialog(this, MessageUtil.getMessage( 1100, "パスワード" ), this.getTitle(), JOptionPane.ERROR_MESSAGE );
                oldPass.requestFocusInWindow();
		return false;
	    }
	    if( !old.equals( swtp.getPassword() ) )
	    {
		// パスワードが違います！
		MessageDialog.showMessageDialog(this, MessageUtil.getMessage( 1302 ), this.getTitle(), JOptionPane.ERROR_MESSAGE );
                oldPass.requestFocusInWindow();
		return false;
	    }
	}
	// 新パスワードチェック
        // vtbphuong start change 20150511 Bug #36647
	//if( ( 8 <= new1.length() )||( 8 <= new2.length() ) )
        if( ( 8 < new1.length() )||( 8 < new2.length() ) )
            // vtbphuong end change 20150511  Bug #36647
	{
	    // 新パスワードは8文字までです。
	    MessageDialog.showMessageDialog(this, MessageUtil.getMessage( 1201, "新パスワード", "8文字" ), this.getTitle(), JOptionPane.ERROR_MESSAGE );
            newPass1.requestFocusInWindow();
	    return false;
	}
	if( !new1.equals( new2 ) )
	{
	    // 新パスワードが一致しません。
	    MessageDialog.showMessageDialog(this, MessageUtil.getMessage( 1303 ), this.getTitle(), JOptionPane.ERROR_MESSAGE );
            newPass2.requestFocusInWindow();
	    return false;
	}
	return true;
    }
    
    /**
     * パスワード文字列を取得する
     * @param chars パスワード文字配列
     * @param isNullCheck nullチェックを行います。 false時の場合"" 空文字をnullにして返します
     * @return パスワード文字列　文字列が無い場合には null を返します
     */
    private String getPassword( char[] chars, boolean isNullCheck )
    {
	if( ( isNullCheck )&&( chars.length == 0 ) ) return null;
	return new String( chars );
    }
}
