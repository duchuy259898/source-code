/*
 * BasicShiftPanel.java
 *
 * Created on 2009/04/27, 11:53
 */

package com.geobeck.sosia.pos.basicinfo.company;

import com.geobeck.sosia.pos.master.company.MstShift;
import com.geobeck.sosia.pos.master.company.MstShifts;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import com.geobeck.util.CheckUtil;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FocusTraversalPolicy;
import java.awt.Window;
import java.sql.SQLException;
import java.util.*;
import java.util.logging.Level;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author  trino
 */
public class BasicShiftPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
    /**
     * Creates new form DailySalesReportPanelTom
     */
    public BasicShiftPanel()
    {
        initComponents();

        this.setTitle("基本シフト登録");
        this.setPath("会社関連");
        this.setSize(800,650);
        
        addMouseCursorChange();

        this.initBasicShiftTable(tblBasicShift1);
        this.initBasicShiftTable(tblBasicShift2);
        
        ftp = new LocalFocusTraversalPolicy();
        setFocusCycleRoot(true);
        setFocusTraversalPolicy(getFocusTraversalPolicy());

        SystemInfo.initGroupShopComponents(cblShop, 2);
    }
    
    private void addMouseCursorChange()
    {
        SystemInfo.addMouseCursorChange(btnRegist);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        btnReportType = new javax.swing.ButtonGroup();
        jLabel8 = new javax.swing.JLabel();
        cblShop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        btnRegist = new javax.swing.JButton();
        scrBasicShift1 = new javax.swing.JScrollPane();
        tblBasicShift1 = new com.geobeck.swing.JTableEx();
        scrBasicShift2 = new javax.swing.JScrollPane();
        tblBasicShift2 = new com.geobeck.swing.JTableEx();
        ObjDateLabel1 = new javax.swing.JLabel();

        setLayout(null);

        jLabel8.setText("\u5bfe\u8c61");
        add(jLabel8);
        jLabel8.setBounds(30, 25, 24, 13);

        cblShop.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(127, 157, 185), 1, true));
        cblShop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cblShopActionPerformed(evt);
            }
        });

        add(cblShop);
        cblShop.setBounds(70, 22, 140, 19);

        btnRegist.setIcon(SystemInfo.getImageIcon("/button/common/regist_off.jpg"));
        btnRegist.setBorderPainted(false);
        btnRegist.setContentAreaFilled(false);
        btnRegist.setPressedIcon(SystemInfo.getImageIcon("/button/common/regist_on.jpg"));
        btnRegist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistActionPerformed(evt);
            }
        });

        add(btnRegist);
        btnRegist.setBounds(560, 20, 92, 25);

        scrBasicShift1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrBasicShift1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        tblBasicShift1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "パターン", "勤務時間"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBasicShift1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblBasicShift1.setCellSelectionEnabled(false);
        tblBasicShift1.setSelectionBackground(new java.awt.Color(255, 210, 142));
        SwingUtil.setJTableHeaderRenderer(tblBasicShift1, SystemInfo.getTableHeaderRenderer());
        tblBasicShift1.getTableHeader().setReorderingAllowed(false);
        tblBasicShift1.getTableHeader().setResizingAllowed(false);

        scrBasicShift1.setViewportView(tblBasicShift1);

        add(scrBasicShift1);
        scrBasicShift1.setBounds(20, 60, 319, 431);

        scrBasicShift2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrBasicShift2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        tblBasicShift2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "パターン", "勤務時間"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBasicShift2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblBasicShift2.setCellSelectionEnabled(false);
        tblBasicShift2.setSelectionBackground(new java.awt.Color(255, 210, 142));
        SwingUtil.setJTableHeaderRenderer(tblBasicShift2, SystemInfo.getTableHeaderRenderer());
        tblBasicShift2.getTableHeader().setReorderingAllowed(false);
        tblBasicShift2.getTableHeader().setResizingAllowed(false);

        scrBasicShift2.setViewportView(tblBasicShift2);

        add(scrBasicShift2);
        scrBasicShift2.setBounds(339, 60, 319, 431);

        ObjDateLabel1.setForeground(java.awt.Color.blue);
        ObjDateLabel1.setText("\u203b\u30b1\u30fc\u30bf\u30a4\u4e88\u7d04\u306e\u3010\u57fa\u672c\u30b7\u30d5\u30c8\u767b\u9332\u3011\u3068\u9023\u52d5\u3057\u3066\u3044\u307e\u3059\u3002");
        add(ObjDateLabel1);
        ObjDateLabel1.setBounds(20, 620, 252, 30);

    }// </editor-fold>//GEN-END:initComponents

    private void cblShopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cblShopActionPerformed
    {//GEN-HEADEREND:event_cblShopActionPerformed
        this.showBasicShifts( ((MstShop)this.cblShop.getSelectedItem()).getShopID(), tblBasicShift1 );
        this.showBasicShifts( ((MstShop)this.cblShop.getSelectedItem()).getShopID(), tblBasicShift2 );
    }//GEN-LAST:event_cblShopActionPerformed

    private void btnRegistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRegistActionPerformed
    {//GEN-HEADEREND:event_btnRegistActionPerformed
        if (!verifyRegisteration(tblBasicShift1)) return;
        if (!verifyRegisteration(tblBasicShift2)) return;

        if ( registerBasicShift( ((MstShop)this.cblShop.getSelectedItem()).getShopID() ) )
        {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.INFO_REGIST_SUCCESS),
                this.getTitle(),
                JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            MessageDialog.showMessageDialog(this,
                MessageUtil.getMessage(MessageUtil.ERROR_REGIST_FAILED, "基本シフト"),
                this.getTitle(),
                JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnRegistActionPerformed

    private boolean verifyRegisteration(com.geobeck.swing.JTableEx table)
    {
        for (int row = 0; row < table.getRowCount(); ++row)
        {
            ShiftPanelBase shiftpanelbase;
            JComboBox cboStartHour, cboStartMinute, cboEndHour, cboEndMinute;
            boolean bStartHourValid, bStartMinuteValid, bEndHourValid, bEndMinuteValid;
            
            // この行の勤務シフトパネルを取得
            shiftpanelbase = (ShiftPanelBase)table.getValueAt(row, 1);
            
            // 各コンボボックスの参照を取得（選択されているアイテムを取得する事だけではなく、後のエラーフォーカス時に利用する目的もある）
            cboStartHour = shiftpanelbase.getFromHourCbo();
            cboStartMinute = shiftpanelbase.getFromMinuteCbo();
            cboEndHour = shiftpanelbase.getToHourCbo();
            cboEndMinute = shiftpanelbase.getToMinuteCbo();
            
            // 各コンボボックスの値が選択されている状態か否かを判断
            bStartHourValid = (cboStartHour.getSelectedIndex() > 0);
            bStartMinuteValid = (cboStartMinute.getSelectedIndex() > 0);
            bEndHourValid = (cboEndHour.getSelectedIndex() > 0);
            bEndMinuteValid = (cboEndMinute.getSelectedIndex() > 0);
            
            // 4コンボ共に選択されているか、4コンボ共に選択されていない状態 以外はエラー
            if (
                     !(bStartHourValid && bStartMinuteValid && bEndHourValid && bEndMinuteValid)
                &&   !(!bStartHourValid && !bStartMinuteValid && !bEndHourValid && !bEndMinuteValid)
            )
            {
                String strErrItem;
                JComboBox cboErrItem;

                strErrItem = "";
                cboErrItem = null;

                if (!bStartHourValid)
                {
                    strErrItem = "勤務開始（時）";
                    cboErrItem = cboStartHour;
                }
                else if (!bStartMinuteValid)
                {
                    strErrItem = "勤務開始（分）";
                    cboErrItem = cboStartMinute;
                }
                else if (!bEndHourValid)
                {
                    strErrItem = "勤務終了（時）";
                    cboErrItem = cboEndHour;
                }
                else if (!bEndMinuteValid)
                {
                    strErrItem = "勤務終了（分）";
                    cboErrItem = cboEndMinute;
                }

                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_NOT_SELECTED, "パターン" + String.valueOf((char)(getStartChar(table) + row)) + "の" + strErrItem),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);

                cboErrItem.requestFocusInWindow();

                return false;
            }
        }
        
        return true;
    }
    
    private boolean registerBasicShift(Integer intShopID)
    {
        ConnectionWrapper con;

        con = SystemInfo.getConnection();

        try
        {
            con.begin();

            MstShifts shiftsInShop = new MstShifts();
            shiftsInShop.setShopId(((MstShop)this.cblShop.getSelectedItem()).getShopID());

            for (int row = 0; row < tblBasicShift1.getRowCount(); ++row)
            {
                MstShift shift;
                ShiftPanelBase shiftpanelbase;

                shift = (MstShift)tblBasicShift1.getValueAt(row, 0);
                shiftpanelbase = (ShiftPanelBase)tblBasicShift1.getValueAt(row, 1);
                
                shift.setStartTime(shiftpanelbase.getFromTime());
                shift.setEndTime(shiftpanelbase.getToTime());
                
                shiftsInShop.add(shift);
            }

            for (int row = 0; row < tblBasicShift2.getRowCount(); ++row)
            {
                MstShift shift;
                ShiftPanelBase shiftpanelbase;

                shift = (MstShift)tblBasicShift2.getValueAt(row, 0);
                shiftpanelbase = (ShiftPanelBase)tblBasicShift2.getValueAt(row, 1);
                
                shift.setStartTime(shiftpanelbase.getFromTime());
                shift.setEndTime(shiftpanelbase.getToTime());
                
                shiftsInShop.add(shift);
            }

            shiftsInShop.regist(con);
            con.commit();
            con.close();
        }
        catch(Exception e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            
            try
            {
                if (con.isBeginTran())
                {
                    con.rollback();
                }
                
                con.close();
            }
            catch (SQLException sql_e)
            {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            
            return false;
        }
        
        // 新規のシフトID が insert により割り当てられている可能性があるので、再表示を行い 隠れシフトID を更新しておく
        showBasicShifts(intShopID, tblBasicShift1);
        showBasicShifts(intShopID, tblBasicShift2);
        
        return true;
    }

    // テーブル初期設定
    private void initBasicShiftTable(com.geobeck.swing.JTableEx table)
    {
        // 全てのコンポーネントを削除しておく
        table.removeAll();
       
        // 各インスタンスを表のセルにセット
        for (int row = 0; row < table.getRowCount(); ++row)
        {
            // シフトパターン名をセット
            MstShift shift = new MstShift();

            shift.setShiftName( String.valueOf( (char)(getStartChar(table) + row) ) );
            table.setValueAt(shift, row, 0);

            // シフト用パネルをセット
            ShiftPanelBase pnlShiftBase = new ShiftPanelBase();

            table.setValueAt(pnlShiftBase, row, 1);
            table.add(pnlShiftBase);
        }
        
        TableColumnModel colmodel;
        Dimension dimBasePanelSize;
        int nColWidthSum;
        int nHeaderHeight;
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        
        // ベースパネルのサイズを取得
        dimBasePanelSize = new ShiftPanelBase().getPreferredSize();
        
        colmodel = table.getColumnModel();

        // 各列の幅設定
        colmodel.getColumn(0).setPreferredWidth(50);
        colmodel.getColumn(1).setPreferredWidth(dimBasePanelSize.width);

        // 列幅の合計値を計算
        nColWidthSum = 0;
        for (int col = 0; col < table.getColumnCount(); ++col)
        {
            nColWidthSum += colmodel.getColumn(col).getPreferredWidth();
        }
        
        // ヘッダーの高さ
        nHeaderHeight = table.getTableHeader().getPreferredSize().height;
 
        // テーブル所属のスクロールペインに、計算して求めた幅と高さをセット
        table.getParent().getParent().setSize(nColWidthSum + 1, nHeaderHeight + dimBasePanelSize.height * table.getRowCount() + 1);
        
        // 縦中央にセット
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        colmodel.getColumn(0).setCellRenderer(renderer);
    }

    // コンボボックスに値ロード
    private void showBasicShifts(Integer intShopID, com.geobeck.swing.JTableEx table)
    {
        // 一旦全て 選択無し状態に
        for (int row = 0; row < table.getRowCount(); ++row)
        {
            ShiftPanelBase shiftpanelbase;
            MstShift shift;
            
            // シフトID をクリアしておく
            shift = (MstShift)table.getValueAt(row, 0);
            shift.setShopId(intShopID);
            shift.setShiftId(null);
            shift.setShiftName( String.valueOf( (char)(getStartChar(table) + row) ) );
            shift.setStartTime(null);
            shift.setEndTime(null);

            // パネルのコンボボックス をクリアしておく
            shiftpanelbase = (ShiftPanelBase)table.getValueAt(row, 1);
            shiftpanelbase.setFromTime(null);
            shiftpanelbase.setToTime(null);
        }

        /*** MstShift の値をテーブルに反映 ***/
        try
        {
            ConnectionWrapper con = SystemInfo.getConnection();
            MstShifts shiftsInShop = new MstShifts();
            
            shiftsInShop.setShopId(intShopID);
            shiftsInShop.load(con, false);
            
            for (MstShift shift : shiftsInShop)
            {
                String strShiftName;
                
                strShiftName = shift.getShiftName();
                if (strShiftName != null  &&  strShiftName.length() > 0)
                {
                    int iShift;
                    
                    iShift = strShiftName.charAt(0) - getStartChar(table);
                    if (iShift >= 0  &&  iShift < table.getRowCount())
                    {
                        ShiftPanelBase shiftpanelbase;
                        String strTime;

                        // シフトインスタンスをセット
                        table.setValueAt(shift,iShift, 0);

                        shiftpanelbase = (ShiftPanelBase)table.getValueAt(iShift, 1);

                        strTime = shift.getStartTime();
                        if (strTime != null  &&  CheckUtil.isNumber(strTime))
                        {
                            shiftpanelbase.setFromTime(strTime);
                        }

                        strTime = shift.getEndTime();
                        if (strTime != null  &&  CheckUtil.isNumber(strTime))
                        {
                            shiftpanelbase.setToTime(strTime);
                        }
                    }
                }
            }

            con.close();
        }
        catch(SQLException e)
        {
            SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }
    
    
    // <editor-fold defaultstate="collapsed" desc=" Variables declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ObjDateLabel1;
    private javax.swing.JButton btnRegist;
    private javax.swing.ButtonGroup btnReportType;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel cblShop;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane scrBasicShift1;
    private javax.swing.JScrollPane scrBasicShift2;
    private com.geobeck.swing.JTableEx tblBasicShift1;
    private com.geobeck.swing.JTableEx tblBasicShift2;
    // End of variables declaration//GEN-END:variables
 // </editor-fold>
    
    private LocalFocusTraversalPolicy   ftp;
    /**
     * FocusTraversalPolicyを取得する。
     * @return FocusTraversalPolicy
     */
    public LocalFocusTraversalPolicy getFocusTraversalPolicy()
    {
        return  ftp;
    }
    
    /**
     * FocusTraversalPolicy
     */
    private class LocalFocusTraversalPolicy
                    extends FocusTraversalPolicy
    {
        ArrayList<Component> controls = new ArrayList<Component>();
        
        public LocalFocusTraversalPolicy()
        {
            init(tblBasicShift1);
            init(tblBasicShift2);
        }

        private void init(com.geobeck.swing.JTableEx table)
        {
            controls.add(cblShop);

            for (int row = 0; row < table.getRowCount(); ++row)
            {
                ShiftPanelBase shiftpanelbase;
                
                // この行の勤務シフトパネルを取得
                shiftpanelbase = (ShiftPanelBase)table.getValueAt(row, 1);
                
                controls.add(shiftpanelbase.getFromHourCbo());
                controls.add(shiftpanelbase.getFromMinuteCbo());
                controls.add(shiftpanelbase.getToHourCbo());
                controls.add(shiftpanelbase.getToMinuteCbo());
            }
            
            for( Component control : controls ){
                control.addKeyListener(SystemInfo.getMoveNextField());
                control.addFocusListener(SystemInfo.getSelectText());
            }
            
            // 最後に先頭を再度登録(同時にEnabledがFalseにならないところまで重複登録)
            controls.add(cblShop);
            controls.add( ((ShiftPanelBase)table.getValueAt(0, 1)).getFromHourCbo() );
        }
        
        /**
         * aComponent のあとでフォーカスを受け取る Component を返します。
         */
        public Component getComponentAfter(Container aContainer,
                                           Component aComponent)
        {
            boolean find = false;
            for(Component co : controls){
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }

        /**
         * aComponent の前にフォーカスを受け取る Component を返します。
         */
        public Component getComponentBefore(Container aContainer,
                                            Component aComponent)
        {
            boolean find = false;
            for( int ii = controls.size(); ii>0; ii-- ){
                Component co = controls.get(ii-1);
                if( find ){
                    if( co.isEnabled() ){
                        return co;
                    }
                } else if (aComponent.equals(co)){
                    find = true;
                }
            }
            return null;
        }

        /**
         * トラバーサルサイクルの最初の Component を返します。
         */
        public Component getFirstComponent(Container aContainer)
        {
            return getDefaultComponent(aContainer);
        }

        /**
         * トラバーサルサイクルの最後の Component を返します。
         */
        public Component getLastComponent(Container aContainer)
        {
            return getComponentBefore(aContainer, controls.get(0));
        }
        
        /**
         * フォーカスを設定するデフォルトコンポーネントを返します。
         */
        public Component getDefaultComponent(Container aContainer)
        {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
        
        /**
         * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
         */
        public Component getInitialComponent(Window window)
        {
            for(Component co : controls){
                if( co.isEnabled() ){
                    return co;
                }
            }
            return controls.get(0);
        }
    }
    

    private char getStartChar(com.geobeck.swing.JTableEx table)
    {
        return table.equals(tblBasicShift1) ? 'A' : 'N';
    }
}
