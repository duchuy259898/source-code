/*
 * MstTechnicClassPanel.java
 *
 * Created on 2006/10/20, 11:01
 */

package com.geobeck.sosia.pos.mail;

import com.geobeck.sosia.pos.master.company.MstShop;
import com.geobeck.sosia.pos.master.mail.MstAutoMailSetting;
import com.geobeck.sosia.pos.swing.SelectTableCellRenderer;
import com.geobeck.sosia.pos.system.SystemInfo;
import com.geobeck.sosia.pos.util.MessageUtil;
import com.geobeck.sql.ConnectionWrapper;
import com.geobeck.sql.ResultSetWrapper;
import com.geobeck.swing.CustomFilter;
import com.geobeck.swing.CustomPlainDocument;
import com.geobeck.swing.MessageDialog;
import com.geobeck.swing.SwingUtil;
import java.awt.*;
import java.sql.SQLException;
import java.util.logging.Level;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import com.geobeck.swing.JTableEx;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.PlainDocument;

/**
 *
 * @author  katagiri
 */
public class MstAutoMailSettingPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx
{
    private Integer selIndex = -1;

    /** Creates new form MstTechnicClassPanel */
    public MstAutoMailSettingPanel()
    {
        super();
        initComponents();
        addMouseCursorChange();
        this.setSize(550, 680);
        this.setPath("基本設定 >> メール関連");
        this.setTitle("自動メール設定");
        this.setListener();
        SystemInfo.initGroupShopComponents(shop, 2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        autoMailScrollPane = new javax.swing.JScrollPane();
        autoMail = new com.geobeck.swing.JTableEx();
        jPanel1 = new javax.swing.JPanel();
        technicClassNameLabel = new javax.swing.JLabel();
        mailName = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)mailName.getDocument()).setDocumentFilter(
            new CustomFilter(20));
        displaySeqLabel = new javax.swing.JLabel();
        displaySeq = new com.geobeck.swing.JFormattedTextFieldEx();
        ((PlainDocument)displaySeq.getDocument()).setDocumentFilter(
            new CustomFilter(4, CustomFilter.NUMERIC));
        addButton = new javax.swing.JButton();
        renewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        shop = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        technicClassNameLabel1 = new javax.swing.JLabel();
        active = new javax.swing.JCheckBox();

        autoMailScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        autoMail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "名称", "表示順", "有効", "設定"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        autoMail.setSelectionBackground(new java.awt.Color(220, 220, 220));
        autoMail.setSelectionForeground(new java.awt.Color(0, 0, 0));
        autoMail.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        autoMail.getTableHeader().setReorderingAllowed(false);
        SwingUtil.setJTableHeaderRenderer(autoMail, SystemInfo.getTableHeaderRenderer());
        autoMail.setRowHeight(SystemInfo.TABLE_ROW_HEIGHT);
        this.initTableColumnWidth();
        SelectTableCellRenderer.setSelectTableCellRenderer(autoMail);
        autoMail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                autoMailMouseReleased(evt);
            }
        });
        autoMail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                autoMailKeyReleased(evt);
            }
        });
        autoMailScrollPane.setViewportView(autoMail);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);

        technicClassNameLabel.setText("名称");
        jPanel1.add(technicClassNameLabel);
        technicClassNameLabel.setBounds(0, 42, 40, 24);

        mailName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        mailName.setDocument(new CustomPlainDocument(20));
        mailName.setInputKanji(true);
        jPanel1.add(mailName);
        mailName.setBounds(40, 40, 280, 24);

        displaySeqLabel.setText("挿入位置");
        jPanel1.add(displaySeqLabel);
        displaySeqLabel.setBounds(358, 10, 48, 24);

        displaySeq.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        displaySeq.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel1.add(displaySeq);
        displaySeq.setBounds(421, 10, 80, 24);

        addButton.setIcon(SystemInfo.getImageIcon("/button/common/insert_off.jpg"));
        addButton.setBorderPainted(false);
        addButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/insert_on.jpg"));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton);
        addButton.setBounds(230, 80, 92, 25);

        renewButton.setIcon(SystemInfo.getImageIcon("/button/common/update_off.jpg"));
        renewButton.setBorderPainted(false);
        renewButton.setEnabled(false);
        renewButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/update_on.jpg"));
        renewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renewButtonActionPerformed(evt);
            }
        });
        jPanel1.add(renewButton);
        renewButton.setBounds(330, 80, 92, 25);

        deleteButton.setIcon(SystemInfo.getImageIcon("/button/common/delete_off.jpg"));
        deleteButton.setBorderPainted(false);
        deleteButton.setEnabled(false);
        deleteButton.setPressedIcon(SystemInfo.getImageIcon("/button/common/delete_on.jpg"));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteButton);
        deleteButton.setBounds(430, 80, 92, 25);

        shop.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        shop.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                shopItemStateChanged(evt);
            }
        });
        jPanel1.add(shop);
        shop.setBounds(40, 10, 280, 24);

        technicClassNameLabel1.setText("対象");
        jPanel1.add(technicClassNameLabel1);
        technicClassNameLabel1.setBounds(0, 10, 40, 24);

        active.setSelected(true);
        active.setText("有効     ");
        active.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        active.setOpaque(false);
        active.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activeActionPerformed(evt);
            }
        });
        jPanel1.add(active);
        active.setBounds(370, 40, 80, 24);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, autoMailScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(autoMailScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
	if(this.checkInput()) {
	    this.regist(true);
	    this.showData();
	}
    }//GEN-LAST:event_addButtonActionPerformed

    private void renewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renewButtonActionPerformed
	if(this.checkInput()) {
	    this.regist(false);
	    this.showData();
	}
    }//GEN-LAST:event_renewButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        this.delete();
        this.showData();
    }//GEN-LAST:event_deleteButtonActionPerformed

	private void autoMailMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_autoMailMouseReleased
	{//GEN-HEADEREND:event_autoMailMouseReleased
		this.changeCurrentData();
	}//GEN-LAST:event_autoMailMouseReleased

	private void autoMailKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_autoMailKeyReleased
	{//GEN-HEADEREND:event_autoMailKeyReleased
		this.changeCurrentData();
	}//GEN-LAST:event_autoMailKeyReleased

        private void activeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activeActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_activeActionPerformed

        private void shopItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_shopItemStateChanged
            this.showData();
        }//GEN-LAST:event_shopItemStateChanged
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox active;
    private javax.swing.JButton addButton;
    private com.geobeck.swing.JTableEx autoMail;
    private javax.swing.JScrollPane autoMailScrollPane;
    private javax.swing.JButton deleteButton;
    private com.geobeck.swing.JFormattedTextFieldEx displaySeq;
    private javax.swing.JLabel displaySeqLabel;
    private javax.swing.JPanel jPanel1;
    private com.geobeck.swing.JFormattedTextFieldEx mailName;
    private javax.swing.JButton renewButton;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel shop;
    private javax.swing.JLabel technicClassNameLabel;
    private javax.swing.JLabel technicClassNameLabel1;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * 施術分類マスタ登録画面用FocusTraversalPolicy
	 */
	private	MstTechnicClassFocusTraversalPolicy	ftp	=
			new MstTechnicClassFocusTraversalPolicy();
	
	/**
	 * 施術分類マスタ登録画面用FocusTraversalPolicyを取得する。
	 * @return 施術分類マスタ登録画面用FocusTraversalPolicy
	 */
	public MstTechnicClassFocusTraversalPolicy getFocusTraversalPolicy()
	{
            return ftp;
	}
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
            SystemInfo.addMouseCursorChange(addButton);
            SystemInfo.addMouseCursorChange(renewButton);
            SystemInfo.addMouseCursorChange(deleteButton);
	}
	
	/**
	 * コンポーネントの各リスナーをセットする。
	 */
	private void setListener()
	{
            mailName.addKeyListener(SystemInfo.getMoveNextField());
            mailName.addFocusListener(SystemInfo.getSelectText());
            displaySeq.addKeyListener(SystemInfo.getMoveNextField());
            displaySeq.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * 入力項目をクリアする。
	 */
	private void clear()
	{
            selIndex = -1;
            mailName.setText("");
            displaySeq.setText("");
            active.setSelected(true);
		
            if (0 < autoMail.getRowCount()) {
                autoMail.removeRowSelectionInterval(0, autoMail.getRowCount() - 1);
            }
	}
	
	/**
	 * データを表示する。
	 */
	private void showData()
	{
            DefaultTableModel model = (DefaultTableModel)autoMail.getModel();
            if( autoMail.getCellEditor() != null ) autoMail.getCellEditor().stopCellEditing();
            model.setRowCount(0);
            autoMail.removeAll();

            try {
                ConnectionWrapper con = SystemInfo.getConnection();

                ResultSetWrapper rs = MstAutoMailSetting.getSelectAll(con, ((MstShop)shop.getSelectedItem()).getShopID());
                
                while (rs.next()) {
                    MstAutoMailSetting ams = new MstAutoMailSetting();
                    ams.setData(con, rs);
                    
                    Object[] rowData = {
                        ams,
                        ams.getDisplaySeq(),
                        ams.getActive().equals(1) ? "      ●" : "",
                        getSettingButton(ams)
                    };

                    model.addRow(rowData);
                }

                rs.close();

            } catch (Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            //入力をクリアする
            this.clear();
	}

        /**
	 * 自動メール設定ボタンを取得する
	 */
	private JButton getSettingButton(final MstAutoMailSetting ams)
	{
		JButton button = new JButton();
		button.setBorderPainted(false);
		button.setContentAreaFilled(false);

                button.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/memo_off.jpg")));
                button.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(
                                "/images/" + SystemInfo.getSkinPackage() + "/button/common/meno_on.jpg")));
                
		button.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
			    MstAutoMailSettingDetailPanel p = null;

                            try {

                                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                                p = new MstAutoMailSettingDetailPanel(ams);
                                p.setTarget(ams.getShop());
                                SwingUtil.openAnchorDialog( null, true, p, "自動メール設定", SwingUtil.ANCHOR_HCENTER|SwingUtil.ANCHOR_VCENTER );

                            } finally {
                                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                            }

			    ((JDialog)p.getParent().getParent().getParent().getParent()).dispose();

                            showData();
			}
		});
                
		return button;
	}

	/**
	 * 選択データが変更されたときの処理を行う。
	 */
	private void changeCurrentData()
	{
            int index = autoMail.getSelectedRow();
            if (0 <= index && index < MstAutoMailSetting.count && index != selIndex) {
                MstAutoMailSetting ams = (MstAutoMailSetting)autoMail.getValueAt(index, 0);
                selIndex = index;
                mailName.setText(ams.getMailName());
                displaySeq.setText(ams.getDisplaySeq().toString());
                active.setSelected(ams.getActive() == 1);
            }

            renewButton.setEnabled(0 <= index);
            deleteButton.setEnabled(0 <= index);
	}
	
	/**
	 * 入力チェックを行う。
	 * @return 入力エラーがなければtrueを返す。
	 */
	private boolean checkInput()
	{
            // 名称
            if (mailName.getText().equals("")) {
                MessageDialog.showMessageDialog(
                        this,
                        MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "名称"),
                        this.getTitle(),
                        JOptionPane.ERROR_MESSAGE);
                mailName.requestFocusInWindow();
                return false;
            }
		
            return true;
	}
	
	
	/**
	 * 入力されたデータを登録する。
	 * @param isAdd true - 追加処理
	 * @return true - 成功
	 */
	private boolean regist(boolean isAdd)
	{
            renewButton.setEnabled(false);
            deleteButton.setEnabled(false);

            boolean result = false;

            MstAutoMailSetting ams = new MstAutoMailSetting();
            if (!isAdd && 0 <= selIndex) {
                ams = (MstAutoMailSetting)autoMail.getValueAt(selIndex, 0);
            }

            int currentDisplaySeq = 0 < selIndex ? ams.getDisplaySeq() : -1;

            ams.setShop((MstShop)shop.getSelectedItem());
            ams.setMailName(mailName.getText());
            ams.setDisplaySeq((displaySeq.getText().equals("") ? -1 : Integer.parseInt(displaySeq.getText())));
            ams.setActive(active.isSelected() ? 1 : 0);
            
            ConnectionWrapper con = SystemInfo.getConnection();
		
            try {
                con.begin();
			
                if (ams.regist(con, currentDisplaySeq)) {
                    con.commit();
                    result = true;
                } else {
                    con.rollback();
                }

            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
            
            return result;
	}
	
	
	/**
	 * 選択されたデータを削除する。
	 * @return true - 成功
	 */
	private boolean delete()
	{
            renewButton.setEnabled(false);
            deleteButton.setEnabled(false);

            boolean result = false;
            MstAutoMailSetting ams = null;
		
            if (0 <= selIndex && selIndex < MstAutoMailSetting.count) {
                ams = (MstAutoMailSetting)autoMail.getValueAt(selIndex, 0);
            }
		
            ConnectionWrapper con = SystemInfo.getConnection();
		
            try {
                con.begin();

                if (ams.delete(con)) {
                    con.commit();
                    result = true;
                } else {
                    con.rollback();
                }
            } catch(SQLException e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

            return result;
	}
	
	/**
	 * 施術分類マスタ登録画面用FocusTraversalPolicy
	 */
	private class MstTechnicClassFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(mailName))
			{
				return displaySeq;
			}
			else if (aComponent.equals(displaySeq))
			{
				return displaySeq;
			}
			
			return mailName;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(mailName))
			{
				return mailName;
			}
			else if (aComponent.equals(displaySeq))
			{
				return mailName;
			}
			
			return mailName;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return mailName;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return displaySeq;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return mailName;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return mailName;
		}
	}
	/**
	 * JTableの列幅を初期化する。
	 */
	private void initTableColumnWidth()
	{
            //列の幅を設定する。
            autoMail.getColumnModel().getColumn(0).setPreferredWidth(350);
	}
	
	
	/**
	 * 列の表示位置を設定するTableCellRenderer
	 */
	private class TableCellAlignRenderer extends DefaultTableCellRenderer
	{
		/** Creates a new instance of ReservationTableCellRenderer */
		public TableCellAlignRenderer()
		{
			super();
		}

		/**
		 * テーブルセルレンダリングを返します。
		 * @param table JTable
		 * @param value セルに割り当てる値
		 * @param isSelected セルが選択されている場合は true
		 * @param hasFocus フォーカスがある場合は true
		 * @param row 行
		 * @param column 列
		 * @return テーブルセルレンダリング
		 */
		public Component getTableCellRendererComponent(JTableEx table,
				Object value, boolean isSelected, boolean hasFocus, int row, int column)
		{
			super.getTableCellRendererComponent(table, value,
					isSelected, hasFocus, row, column);
			
			switch(column)
			{
				case 1:
					super.setHorizontalAlignment(SwingConstants.RIGHT);
					break;
				default:
					super.setHorizontalAlignment(SwingConstants.LEFT);
					break;
			}

			return this;
		}
	}
}
