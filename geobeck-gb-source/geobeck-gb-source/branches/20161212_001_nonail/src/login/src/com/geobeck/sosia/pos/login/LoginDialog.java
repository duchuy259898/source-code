/*
 * LoginDialog.java
 *
 * Created on 2006/04/27, 15:49
 */

package com.geobeck.sosia.pos.login;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;
import java.util.logging.*;

import com.geobeck.swing.*;
import com.geobeck.sosia.pos.system.SystemInfo;

/**
 * ログイン画面
 * @author  
 */
public class LoginDialog extends javax.swing.JFrame
{
	private String			version	=	"";
	private ImageIcon		icon	=	null;
	
	private	boolean			login	=	false;

        private final String LOGIN_FILE = SystemInfo.getLogRoot() + "/login.txt";
        
    /**
	 * コンストラクタ
	 */
    public LoginDialog(String version, ImageIcon icon)
    {
		this.version = version;
		this.icon = icon;
                initComponents();
		addMouseCursorChange();
		if(icon != null)
		{
                    this.setIconImage(icon.getImage());
		}
		SwingUtil.moveCenter(this);
		
		loginID.setOpaque(false);
		password.setOpaque(false);

                loginID.addMouseListener(new PopupMenuAppender(loginID));
                password.addMouseListener(new PopupMenuAppender(password));

                this.skipLogin();

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        imagePanel1 = new com.geobeck.swing.ImagePanel();
        password = new javax.swing.JPasswordField();
        password.addKeyListener(SystemInfo.getMoveNextField());
        password.addFocusListener(SystemInfo.getSelectText());
        loginID = new com.geobeck.swing.JFormattedTextFieldEx();
        loginID.addKeyListener(SystemInfo.getMoveNextField());
        loginID.addFocusListener(SystemInfo.getSelectText());
        loginButton = new javax.swing.JButton();
        chkSkipLogin = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SOSIA \u8a8d\u8a3c\u753b\u9762");
        setResizable(false);
        imagePanel1.setLayout(null);

        imagePanel1.setImage(new javax.swing.ImageIcon(getClass().getResource("/images/common/login/login.jpg")));
        password.setColumns(8);
        password.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 18));
        password.setForeground(new java.awt.Color(255, 255, 255));
        password.setBorder(null);
        password.setFocusTraversalPolicy(getFocusTraversalPolicy());
        password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordKeyPressed(evt);
            }
        });

        imagePanel1.add(password);
        password.setBounds(90, 180, 221, 25);

        loginID.setBorder(null);
        loginID.setColumns(8);
        loginID.setForeground(new java.awt.Color(255, 255, 255));
        loginID.setFocusTraversalPolicy(getFocusTraversalPolicy());
        loginID.setFont(new java.awt.Font("ＭＳ ゴシック", 1, 18));
        imagePanel1.add(loginID);
        loginID.setBounds(90, 123, 221, 25);

        loginButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/common/login/btn_login_off.jpg")));
        loginButton.setBorderPainted(false);
        loginButton.setContentAreaFilled(false);
        loginButton.setFocusTraversalPolicy(getFocusTraversalPolicy());
        loginButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/common/login/btn_login_on.jpg")));
        loginButton.setLocation(
            (this.getWidth() - loginButton.getWidth()) / 2,
            loginButton.getY());
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        loginButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                loginButtonKeyReleased(evt);
            }
        });

        imagePanel1.add(loginButton);
        loginButton.setBounds(134, 238, 136, 36);

        chkSkipLogin.setForeground(new java.awt.Color(255, 255, 255));
        chkSkipLogin.setText("\u30ed\u30b0\u30a4\u30f3ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8a18\u61b6\u3059\u308b");
        chkSkipLogin.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chkSkipLogin.setMargin(new java.awt.Insets(0, 0, 0, 0));
        chkSkipLogin.setOpaque(false);
        imagePanel1.add(chkSkipLogin);
        chkSkipLogin.setBounds(115, 213, 190, 20);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imagePanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imagePanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
	
	/**
	 * パスワードでキーが押されたときの処理
	 * @param evt 
	 */
	private void passwordKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_passwordKeyPressed
	{//GEN-HEADEREND:event_passwordKeyPressed
		if(evt.getKeyCode() == KeyEvent.VK_ENTER)
		{
			this.doLogin();
		}
	}//GEN-LAST:event_passwordKeyPressed

	/**
	 * ログインボタンでキーが放されたときの処理
	 * @param evt 
	 */
	private void loginButtonKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_loginButtonKeyReleased
	{//GEN-HEADEREND:event_loginButtonKeyReleased
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                this.doLogin();
            }
	}//GEN-LAST:event_loginButtonKeyReleased

	/**
	 * ログインボタンが押されたときの処理
	 * @param evt 
	 */
	private void loginButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loginButtonActionPerformed
	{//GEN-HEADEREND:event_loginButtonActionPerformed

            loginButton.setCursor(null);

            try {

                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                this.doLogin();
                
            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }

	}//GEN-LAST:event_loginButtonActionPerformed
    
	
	/**
	 * 
	 * @return 
	 */
    public String getUserId(){
        return this.loginID.getText();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkSkipLogin;
    private com.geobeck.swing.ImagePanel imagePanel1;
    private javax.swing.JButton loginButton;
    private com.geobeck.swing.JFormattedTextFieldEx loginID;
    private javax.swing.JPasswordField password;
    // End of variables declaration//GEN-END:variables
    
	private	LoginFocusTraversalPolicy	ftp	=
			new LoginFocusTraversalPolicy();
	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
		SystemInfo.addMouseCursorChange(loginButton);
	}
	
	/**
	 * ログイン画面用FocusTraversalPolicyを取得する。
	 * @return  ログイン画面用FocusTraversalPolicy
	 */
	public LoginFocusTraversalPolicy getFocusTraversalPolicy()
	{
		return	ftp;
	}

	public boolean isLogin()
	{
		return login;
	}

	public void setLogin(boolean login)
	{
		this.login = login;
	}
	
	/**
	 * ログイン処理を行う。
	 */
	private void doLogin()
	{
            if (Login.login(this, this.loginID.getText(), new String(this.password.getPassword()))) {

                this.setLogin(true);
			
                SystemInfo.getLogger().log(Level.INFO, "ログイン");
	
                this.saveLogin();
                
                // ログイン画面を消す
                this.setVisible(false);
            }else {
                //IVS_LVTu start add 2016/03/17 Bug #49155
                loginButton.setFocusable(false);
                loginButton.updateUI();
                //IVS_LVTu end add 2016/03/17 Bug #49155
            }
	}
	
	
	/**
	 * ログイン画面用FocusTraversalPolicy
	 */
	private class LoginFocusTraversalPolicy
					extends FocusTraversalPolicy
	{
		/**
		 * aComponent のあとでフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent のあとにフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentAfter(Container aContainer,
										   Component aComponent)
		{
			if (aComponent.equals(loginID))
			{
				return password;
			}
			else if (aComponent.equals(password))
			{
				return loginButton;
			}
			else if (aComponent.equals(loginButton))
			{
				return loginID;
			}
			
			return loginID;
		}

		/**
		 * aComponent の前にフォーカスを受け取る Component を返します。
		 * aContainer は aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダでなければなりません。
		 * @param aContainer aComponent のフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @param aComponent aContainer のおそらく間接的な子、または aContainer 自体
		 * @return aComponent の前にフォーカスを受け取る Component。適切な Component が見つからない場合は null
		 */
		public Component getComponentBefore(Container aContainer,
											Component aComponent)
		{
			if (aComponent.equals(loginButton))
			{
				return loginButton;
			}
			else if (aComponent.equals(password))
			{
				return loginID;
			}
			else if (aComponent.equals(loginButton))
			{
				return password;
			}
			
			return loginID;
		}

		/**
		 * トラバーサルサイクルの最初の Component を返します。
		 * このメソッドは、順方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer 先頭の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの先頭の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getFirstComponent(Container aContainer)
		{
			return loginID;
		}

		/**
		 * トラバーサルサイクルの最後の Component を返します。
		 * このメソッドは、逆方向のトラバーサルがラップするときに、次にフォーカスする Component を判定するために使用します。
		 * @param aContainer aContainer - 最後の Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルの最後の Componet、または適切な Component が見つからない場合は null
		 */
		public Component getLastComponent(Container aContainer)
		{
			return loginButton;
		}

		/**
		 * フォーカスを設定するデフォルトコンポーネントを返します。
		 * aContainer をルートとするフォーカストラバーサルサイクルが新しく開始されたときに、このコンポーネントに最初にフォーカスが設定されます。
		 * @param aContainer デフォルトの Component を返すフォーカスサイクルのルートまたはフォーカストラバーサルポリシープロバイダ
		 * @return aContainer のトラバーサルサイクルのデフォルトの Componet、または適切な Component が見つからない場合は null
		 */
		public Component getDefaultComponent(Container aContainer)
		{
			return loginID;
		}
		
		/**
		 * ウィンドウが最初に表示されたときにフォーカスが設定されるコンポーネントを返します。
		 * show() または setVisible(true) の呼び出しで一度ウィンドウが表示されると、
		 * 初期化コンポーネントはそれ以降使用されません。
		 * 一度別のウィンドウに移ったフォーカスが再び設定された場合、
		 * または、一度非表示状態になったウィンドウが再び表示された場合は、
		 * そのウィンドウの最後にフォーカスが設定されたコンポーネントがフォーカス所有者になります。
		 * このメソッドのデフォルト実装ではデフォルトコンポーネントを返します。
		 * @param window 初期コンポーネントが返されるウィンドウ
		 * @return 最初にウィンドウが表示されるときにフォーカス設定されるコンポーネント。適切なコンポーネントがない場合は null
		 */
		public Component getInitialComponent(Window window)
		{
			return loginID;
		}
	}
        
        private class PopupMenuAppender extends MouseAdapter {

            private JComponent component;

            public PopupMenuAppender(JComponent component) {
                this.component = component;
            }

            public void mouseReleased(MouseEvent e) {
                
                // ポップアップメニューを表示するタイミングのとき、
                if (e.isPopupTrigger()) {
                    ActionMap actionmap = component.getActionMap();
                    // すべてのキーとアクションを表示してみる。デバッグ用
                    Object[] keys = actionmap.allKeys();
                    for (int i=0; i<keys.length; i++) {
                        //System.out.println("key=["+keys[i]+"] value=["+actionmap.get(keys[i])+"]");
                    }
                    // 欲しいアクションのみを取得する。
                    //Action cut = actionmap.get("cut-to-clipboard");        // 切り取り
                    //Action copy = actionmap.get("copy-to-clipboard");      // コピー
                    Action paste = actionmap.get("paste-from-clipboard");  // 貼り付け
                    //Action all = actionmap.get("select-all");              // すべて選択
                    //Action delete = actionmap.get("delete-next");          // 削除
                    
                    // ポップアップメニューを作り表示する。
                    JPopupMenu popup = new JPopupMenu("popup");
                    //popup.add(cut).setText("切り取り");
                    //popup.add(copy).setText("コピー");
                    popup.add(paste).setText("貼り付け");
                    //popup.add(all).setText("すべて選択");
                    //popup.add(delete).setText("削除");
                    popup.show(component, e.getX(), e.getY());
                }
            }
        }
        
        private void skipLogin() {

            try{

              File file = new File(LOGIN_FILE);

              if (file.exists()) {

                  chkSkipLogin.setSelected(true);
                  
                  BufferedReader br = new BufferedReader(new FileReader(file));

                  boolean isFirst = true;
                  
                  String s;
                  while ((s = br.readLine()) != null) {
                      if (isFirst) {
                          loginID.setText(s);
                          isFirst = false;
                      } else {
                          password.setText(s);
                      }
                  }

                  br.close();
              }

            }catch(Exception e){
                e.printStackTrace();
            }

        }

        private void saveLogin() {

            try {

                File file = new File(LOGIN_FILE);

                if (chkSkipLogin.isSelected()) {

                    BufferedWriter bw = new BufferedWriter(new FileWriter(file));
                    bw.write (loginID.getText());
                    bw.newLine();
                    bw.write (password.getPassword());
                    bw.close();

                } else {
                    file.delete();
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        
}
