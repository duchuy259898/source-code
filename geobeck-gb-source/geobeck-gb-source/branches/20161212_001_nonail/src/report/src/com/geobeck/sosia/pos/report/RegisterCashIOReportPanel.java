/*
 * RegisterCashIOReportPanel.java
 *
 * Created on 2007/09/11, 9:56
 */

package com.geobeck.sosia.pos.report;

import java.util.*;
import java.util.logging.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.text.*;
import com.geobeck.sql.*;
import com.geobeck.swing.*;
import com.geobeck.util.*;
import com.geobeck.sosia.pos.data.account.*;
import com.geobeck.sosia.pos.account.*;
import com.geobeck.sosia.pos.master.company.*;
import com.geobeck.sosia.pos.util.*;
import com.geobeck.sosia.pos.system.*;
import com.geobeck.sosia.pos.report.bean.*;
import com.geobeck.sosia.pos.hair.report.util.*;
import com.geobeck.sosia.pos.master.system.MstSetting;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.FocusTraversalPolicy;

import org.apache.commons.lang.math.NumberUtils;

/**
 *
 * @author  kanemoto
 */
public class RegisterCashIOReportPanel extends com.geobeck.sosia.pos.swing.AbstractImagePanelEx {

    private static final String REPORT_PATH                 = "/reports/RegisterCashIO.jasper";
    private static final String REPORT_REGISTER_CASHIO      = "RegisterCashIOReport";
    private static final String REPORT_PAYMENT_ACCORDING    = "PaymentAccording";
    private RegisterCashIO rcio	= new RegisterCashIO();
    
    /** Creates new form RegisterCashIOReportPanel */
    public RegisterCashIOReportPanel( ) {

        initComponents();
        addMouseCursorChange();
        this.setSize(650, 600);
        this.setPath("帳票出力");
        this.setTitle("レジ入出金管理表");
        this.setKeyListener();
        init();

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cashType = new javax.swing.ButtonGroup();
        taxType = new javax.swing.ButtonGroup();
        orderType = new javax.swing.ButtonGroup();
        paymentType = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        targetLabel = new javax.swing.JLabel();
        target = new com.geobeck.sosia.pos.swing.JComboBoxLabel();
        pnlPaymentAccording = new javax.swing.JPanel();
        lblDayWay = new javax.swing.JLabel();
        lblMonthWay = new javax.swing.JLabel();
        cmbDayWayMonth = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        rdoTaxBlank = new javax.swing.JRadioButton();
        rdoTaxUnit = new javax.swing.JRadioButton();
        btnOutput1 = new javax.swing.JButton();
        cmbDayWayYear = new javax.swing.JComboBox();
        ((PlainDocument)((JTextComponent)
            cmbDayWayYear.getEditor().getEditorComponent()).getDocument()).setDocumentFilter(
        new CustomFilter(4, CustomFilter.NUMBER));
    jPanel1 = new javax.swing.JPanel();
    staffLabel = new javax.swing.JLabel();
    staff = new javax.swing.JComboBox();
    staffLabel2 = new javax.swing.JLabel();
    cashTypePanel = new javax.swing.JPanel();
    cashTypeOut = new javax.swing.JRadioButton();
    cashTypeIn = new javax.swing.JRadioButton();
    cashTypeAll = new javax.swing.JRadioButton();
    lblTargetPeriod = new javax.swing.JLabel();
    cmbTargetPeriodStartDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
    this.cmbTargetPeriodStartDate.setDate(new java.util.Date());
    jLabel1 = new javax.swing.JLabel();
    cmbTargetPeriodEndDate = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
    this.cmbTargetPeriodEndDate.setDate(new java.util.Date());
    btnOutput = new javax.swing.JButton();
    pnlPaymentAccording1 = new javax.swing.JPanel();
    lblMonthWay1 = new javax.swing.JLabel();
    btnOutput2 = new javax.swing.JButton();
    cmbTargetPeriodStartDate1 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
    this.cmbTargetPeriodStartDate1.setDate(new java.util.Date());
    jLabel4 = new javax.swing.JLabel();
    cmbTargetPeriodEndDate1 = new jp.co.flatsoft.fscomponent.FSCalenderCombo();
    this.cmbTargetPeriodEndDate1.setDate(new java.util.Date());
    lblMonthWay2 = new javax.swing.JLabel();
    cashTypePanel1 = new javax.swing.JPanel();
    orderTypeDate = new javax.swing.JRadioButton();
    orderTypeCard = new javax.swing.JRadioButton();
    lblMonthWay3 = new javax.swing.JLabel();
    cashTypePanel2 = new javax.swing.JPanel();
    paymentType1 = new javax.swing.JRadioButton();
    paymentType2 = new javax.swing.JRadioButton();
    paymentType3 = new javax.swing.JRadioButton();

    setFocusCycleRoot(true);

    pnlMain.setFocusCycleRoot(true);
    pnlMain.setOpaque(false);

    targetLabel.setText("対象");
    targetLabel.setFocusCycleRoot(true);

    target.setFocusCycleRoot(true);

    javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
    pnlMain.setLayout(pnlMainLayout);
    pnlMainLayout.setHorizontalGroup(
        pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlMainLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(targetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(29, 29, 29)
            .addComponent(target, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(179, Short.MAX_VALUE))
    );
    pnlMainLayout.setVerticalGroup(
        pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlMainLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(targetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(target, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    pnlPaymentAccording.setBorder(javax.swing.BorderFactory.createTitledBorder("レジ入金表"));
    pnlPaymentAccording.setOpaque(false);

    lblDayWay.setText("税区分");

    lblMonthWay.setText("対象期間");

    cmbDayWayMonth.setMaximumRowCount(12);
    cmbDayWayMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
    cmbDayWayMonth.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    jLabel2.setText("年");

    jLabel3.setText("月");

    taxType.add(rdoTaxBlank);
    rdoTaxBlank.setText("税抜");
    rdoTaxBlank.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoTaxBlank.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoTaxBlank.setOpaque(false);

    taxType.add(rdoTaxUnit);
    rdoTaxUnit.setSelected(true);
    rdoTaxUnit.setText("税込");
    rdoTaxUnit.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    rdoTaxUnit.setMargin(new java.awt.Insets(0, 0, 0, 0));
    rdoTaxUnit.setOpaque(false);

    btnOutput1.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnOutput1.setBorderPainted(false);
    btnOutput1.setFocusCycleRoot(true);
    btnOutput1.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnOutput1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOutput1ActionPerformed(evt);
        }
    });

    cmbDayWayYear.setEditable(true);
    cmbDayWayYear.setMaximumRowCount(12);
    cmbDayWayYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

    javax.swing.GroupLayout pnlPaymentAccordingLayout = new javax.swing.GroupLayout(pnlPaymentAccording);
    pnlPaymentAccording.setLayout(pnlPaymentAccordingLayout);
    pnlPaymentAccordingLayout.setHorizontalGroup(
        pnlPaymentAccordingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlPaymentAccordingLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlPaymentAccordingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblMonthWay)
                .addComponent(lblDayWay))
            .addGap(29, 29, 29)
            .addGroup(pnlPaymentAccordingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlPaymentAccordingLayout.createSequentialGroup()
                    .addComponent(cmbDayWayYear, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel2)
                    .addGap(15, 15, 15)
                    .addComponent(cmbDayWayMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                    .addComponent(btnOutput1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
                .addGroup(pnlPaymentAccordingLayout.createSequentialGroup()
                    .addComponent(rdoTaxUnit)
                    .addGap(16, 16, 16)
                    .addComponent(rdoTaxBlank))))
    );
    pnlPaymentAccordingLayout.setVerticalGroup(
        pnlPaymentAccordingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlPaymentAccordingLayout.createSequentialGroup()
            .addGroup(pnlPaymentAccordingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlPaymentAccordingLayout.createSequentialGroup()
                    .addGroup(pnlPaymentAccordingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblMonthWay)
                        .addComponent(jLabel2)
                        .addComponent(cmbDayWayMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(cmbDayWayYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(19, 19, 19)
                    .addGroup(pnlPaymentAccordingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDayWay)
                        .addComponent(rdoTaxUnit)
                        .addComponent(rdoTaxBlank)))
                .addComponent(btnOutput1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("レジ出納帳"));
    jPanel1.setOpaque(false);

    staffLabel.setText("担当者");
    staffLabel.setFocusCycleRoot(true);

    staff.setFocusCycleRoot(true);

    staffLabel2.setText("出力タイプ");
    staffLabel2.setFocusCycleRoot(true);

    cashTypePanel.setOpaque(false);

    cashType.add(cashTypeOut);
    cashTypeOut.setText("出金");
    cashTypeOut.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    cashTypeOut.setMargin(new java.awt.Insets(0, 0, 0, 0));
    cashTypeOut.setOpaque(false);

    cashType.add(cashTypeIn);
    cashTypeIn.setText("入金");
    cashTypeIn.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    cashTypeIn.setMargin(new java.awt.Insets(0, 0, 0, 0));
    cashTypeIn.setOpaque(false);

    cashType.add(cashTypeAll);
    cashTypeAll.setSelected(true);
    cashTypeAll.setText("全て");
    cashTypeAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    cashTypeAll.setMargin(new java.awt.Insets(0, 0, 0, 0));
    cashTypeAll.setOpaque(false);

    javax.swing.GroupLayout cashTypePanelLayout = new javax.swing.GroupLayout(cashTypePanel);
    cashTypePanel.setLayout(cashTypePanelLayout);
    cashTypePanelLayout.setHorizontalGroup(
        cashTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(cashTypePanelLayout.createSequentialGroup()
            .addComponent(cashTypeAll, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cashTypeIn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cashTypeOut, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(34, Short.MAX_VALUE))
    );
    cashTypePanelLayout.setVerticalGroup(
        cashTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(cashTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(cashTypeAll)
            .addComponent(cashTypeIn)
            .addComponent(cashTypeOut))
    );

    lblTargetPeriod.setText("対象期間");
    lblTargetPeriod.setFocusCycleRoot(true);

    cmbTargetPeriodStartDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbTargetPeriodStartDate.setFocusCycleRoot(true);
    cmbTargetPeriodStartDate.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            cmbTargetPeriodStartDateFocusGained(evt);
        }
    });

    jLabel1.setText("〜");
    jLabel1.setFocusCycleRoot(true);

    cmbTargetPeriodEndDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbTargetPeriodEndDate.setFocusCycleRoot(true);
    cmbTargetPeriodEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            cmbTargetPeriodEndDateFocusGained(evt);
        }
    });

    btnOutput.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnOutput.setBorderPainted(false);
    btnOutput.setFocusCycleRoot(true);
    btnOutput.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnOutput.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOutputActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(staffLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(staffLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(21, 21, 21)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(staff, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cashTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(lblTargetPeriod)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(77, 77, 77)
                    .addComponent(cmbTargetPeriodStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cmbTargetPeriodEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(35, 35, 35)
            .addComponent(btnOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cmbTargetPeriodStartDate, 0, 0, Short.MAX_VALUE)
                        .addComponent(lblTargetPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbTargetPeriodEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(20, 20, 20)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(staffLabel2)
                        .addComponent(cashTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(17, 17, 17)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(staffLabel)
                        .addComponent(staff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(btnOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    pnlPaymentAccording1.setBorder(javax.swing.BorderFactory.createTitledBorder("支払明細表"));
    pnlPaymentAccording1.setOpaque(false);

    lblMonthWay1.setText("対象期間");

    btnOutput2.setIcon(SystemInfo.getImageIcon("/button/print/excel_off.jpg"));
    btnOutput2.setBorderPainted(false);
    btnOutput2.setFocusCycleRoot(true);
    btnOutput2.setPressedIcon(SystemInfo.getImageIcon("/button/print/excel_on.jpg"));
    btnOutput2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOutput2ActionPerformed(evt);
        }
    });

    cmbTargetPeriodStartDate1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbTargetPeriodStartDate1.setFocusCycleRoot(true);
    cmbTargetPeriodStartDate1.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            cmbTargetPeriodStartDate1FocusGained(evt);
        }
    });

    jLabel4.setText("〜");
    jLabel4.setFocusCycleRoot(true);

    cmbTargetPeriodEndDate1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
    cmbTargetPeriodEndDate1.setFocusCycleRoot(true);
    cmbTargetPeriodEndDate1.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusGained(java.awt.event.FocusEvent evt) {
            cmbTargetPeriodEndDate1FocusGained(evt);
        }
    });

    lblMonthWay2.setText("出力順");

    cashTypePanel1.setOpaque(false);

    orderType.add(orderTypeDate);
    orderTypeDate.setSelected(true);
    orderTypeDate.setText("日付順");
    orderTypeDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    orderTypeDate.setMargin(new java.awt.Insets(0, 0, 0, 0));
    orderTypeDate.setOpaque(false);

    orderType.add(orderTypeCard);
    orderTypeCard.setText("支払方法順");
    orderTypeCard.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    orderTypeCard.setMargin(new java.awt.Insets(0, 0, 0, 0));
    orderTypeCard.setOpaque(false);

    javax.swing.GroupLayout cashTypePanel1Layout = new javax.swing.GroupLayout(cashTypePanel1);
    cashTypePanel1.setLayout(cashTypePanel1Layout);
    cashTypePanel1Layout.setHorizontalGroup(
        cashTypePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(cashTypePanel1Layout.createSequentialGroup()
            .addComponent(orderTypeDate)
            .addGap(16, 16, 16)
            .addComponent(orderTypeCard)
            .addContainerGap(48, Short.MAX_VALUE))
    );
    cashTypePanel1Layout.setVerticalGroup(
        cashTypePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(cashTypePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(orderTypeDate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(orderTypeCard, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    lblMonthWay3.setText("支払区分");

    cashTypePanel2.setOpaque(false);

    paymentType.add(paymentType1);
    paymentType1.setSelected(true);
    paymentType1.setText("カード");
    paymentType1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    paymentType1.setMargin(new java.awt.Insets(0, 0, 0, 0));
    paymentType1.setOpaque(false);

    paymentType.add(paymentType2);
    paymentType2.setText("電子マネー");
    paymentType2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    paymentType2.setMargin(new java.awt.Insets(0, 0, 0, 0));
    paymentType2.setOpaque(false);

    paymentType.add(paymentType3);
    paymentType3.setText("金券・その他");
    paymentType3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    paymentType3.setMargin(new java.awt.Insets(0, 0, 0, 0));
    paymentType3.setOpaque(false);

    javax.swing.GroupLayout cashTypePanel2Layout = new javax.swing.GroupLayout(cashTypePanel2);
    cashTypePanel2.setLayout(cashTypePanel2Layout);
    cashTypePanel2Layout.setHorizontalGroup(
        cashTypePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(cashTypePanel2Layout.createSequentialGroup()
            .addComponent(paymentType1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
            .addComponent(paymentType2)
            .addGap(21, 21, 21)
            .addComponent(paymentType3)
            .addGap(20, 20, 20))
    );
    cashTypePanel2Layout.setVerticalGroup(
        cashTypePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(cashTypePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(paymentType1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(paymentType2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(paymentType3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    javax.swing.GroupLayout pnlPaymentAccording1Layout = new javax.swing.GroupLayout(pnlPaymentAccording1);
    pnlPaymentAccording1.setLayout(pnlPaymentAccording1Layout);
    pnlPaymentAccording1Layout.setHorizontalGroup(
        pnlPaymentAccording1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlPaymentAccording1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlPaymentAccording1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(lblMonthWay2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblMonthWay1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblMonthWay3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(28, 28, 28)
            .addGroup(pnlPaymentAccording1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlPaymentAccording1Layout.createSequentialGroup()
                    .addComponent(cmbTargetPeriodStartDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cmbTargetPeriodEndDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnOutput2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(cashTypePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cashTypePanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );
    pnlPaymentAccording1Layout.setVerticalGroup(
        pnlPaymentAccording1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(pnlPaymentAccording1Layout.createSequentialGroup()
            .addGroup(pnlPaymentAccording1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblMonthWay1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmbTargetPeriodStartDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmbTargetPeriodEndDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnOutput2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlPaymentAccording1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblMonthWay3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cashTypePanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlPaymentAccording1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(cashTypePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblMonthWay2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(27, 27, 27))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(pnlMain, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlPaymentAccording, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlPaymentAccording1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(197, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addComponent(pnlPaymentAccording, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(15, 15, 15)
            .addComponent(pnlPaymentAccording1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(161, Short.MAX_VALUE))
    );

    pnlPaymentAccording.getAccessibleContext().setAccessibleName("レジ入金");
    }// </editor-fold>//GEN-END:initComponents

    private void cmbTargetPeriodEndDate1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodEndDate1FocusGained
	cmbTargetPeriodEndDate1.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_cmbTargetPeriodEndDate1FocusGained

    private void cmbTargetPeriodStartDate1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodStartDate1FocusGained
	cmbTargetPeriodStartDate1.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_cmbTargetPeriodStartDate1FocusGained

    private void btnOutput2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutput2ActionPerformed

        if (!SystemInfo.checkAuthorityPassword(202)) return;

        btnOutput2.setCursor(null);

        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            printCardSalesDetails();

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
        
    }//GEN-LAST:event_btnOutput2ActionPerformed

	private void btnOutput1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutput1ActionPerformed

            if (!SystemInfo.checkAuthorityPassword(201)) return;

            NumberUtils numUtil = new NumberUtils();
            if(!numUtil.isNumber(this.cmbDayWayYear.getSelectedItem().toString())) {
                MessageDialog.showMessageDialog(this,
                    MessageUtil.getMessage(MessageUtil.ERROR_INPUT_EMPTY, "対象年"),
                    this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
                this.cmbDayWayYear.requestFocusInWindow();
                return;
            }

            btnOutput1.setCursor(null);

            try {
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                printPaymentAccording();

            } finally {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
            
	}//GEN-LAST:event_btnOutput1ActionPerformed

    /**
     * EXCEL出力
     */
    private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed

        if (!SystemInfo.checkAuthorityPassword(200)) return;

        btnOutput.setCursor(null);

        try {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            print();

        } finally {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btnOutputActionPerformed

    private void cmbTargetPeriodEndDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodEndDateFocusGained
	cmbTargetPeriodEndDate.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_cmbTargetPeriodEndDateFocusGained

    private void cmbTargetPeriodStartDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbTargetPeriodStartDateFocusGained
	cmbTargetPeriodStartDate.getInputContext().setCharacterSubsets(null);
    }//GEN-LAST:event_cmbTargetPeriodStartDateFocusGained
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOutput;
    private javax.swing.JButton btnOutput1;
    private javax.swing.JButton btnOutput2;
    private javax.swing.ButtonGroup cashType;
    private javax.swing.JRadioButton cashTypeAll;
    private javax.swing.JRadioButton cashTypeIn;
    private javax.swing.JRadioButton cashTypeOut;
    private javax.swing.JPanel cashTypePanel;
    private javax.swing.JPanel cashTypePanel1;
    private javax.swing.JPanel cashTypePanel2;
    private javax.swing.JComboBox cmbDayWayMonth;
    private javax.swing.JComboBox cmbDayWayYear;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodEndDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodEndDate1;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodStartDate;
    private jp.co.flatsoft.fscomponent.FSCalenderCombo cmbTargetPeriodStartDate1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblDayWay;
    private javax.swing.JLabel lblMonthWay;
    private javax.swing.JLabel lblMonthWay1;
    private javax.swing.JLabel lblMonthWay2;
    private javax.swing.JLabel lblMonthWay3;
    private javax.swing.JLabel lblTargetPeriod;
    private javax.swing.ButtonGroup orderType;
    private javax.swing.JRadioButton orderTypeCard;
    private javax.swing.JRadioButton orderTypeDate;
    private javax.swing.ButtonGroup paymentType;
    private javax.swing.JRadioButton paymentType1;
    private javax.swing.JRadioButton paymentType2;
    private javax.swing.JRadioButton paymentType3;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlPaymentAccording;
    private javax.swing.JPanel pnlPaymentAccording1;
    private javax.swing.JRadioButton rdoTaxBlank;
    private javax.swing.JRadioButton rdoTaxUnit;
    private javax.swing.JComboBox staff;
    private javax.swing.JLabel staffLabel;
    private javax.swing.JLabel staffLabel2;
    private com.geobeck.sosia.pos.swing.JComboBoxLabel target;
    private javax.swing.JLabel targetLabel;
    private javax.swing.ButtonGroup taxType;
    // End of variables declaration//GEN-END:variables

    private RegisterFocusTraversalPolicy ftp = new RegisterFocusTraversalPolicy();

    /**
     * 顧客情報登録画面用FocusTraversalPolicyを取得する。
     *
     * @return 顧客情報登録画面用FocusTraversalPolicy
     */
    public FocusTraversalPolicy getFocusTraversalPolicy() {
        return ftp;
    }
	private void init()
	{
            SystemInfo.initGroupShopComponents(target, 3);
            staff.addItem(new MstStaff());
            SystemInfo.initStaffComponent(staff);

            Calendar cdr = Calendar.getInstance();
            cdr.setTime(new java.util.Date());
            
            initYearCombo(cmbDayWayYear, cdr.get(Calendar.YEAR));
            this.cmbDayWayMonth.setSelectedIndex(cdr.get(Calendar.MONTH));

            //税抜、税込の初期設定
            if(SystemInfo.getAccountSetting().getReportPriceType() == 0)
            {
                    rdoTaxBlank.setSelected(false);
                    rdoTaxUnit.setSelected(true);
            }
            else
            {
                    rdoTaxBlank.setSelected(true);
                    rdoTaxUnit.setSelected(false);
            }
	}	

	
	/**
	 * ボタンにマウスカーソルが乗ったときにカーソルを変更するイベントを追加する。
	 */
	private void addMouseCursorChange()
	{
            SystemInfo.addMouseCursorChange(btnOutput);
            SystemInfo.addMouseCursorChange(btnOutput1);
            SystemInfo.addMouseCursorChange(btnOutput2);
	}
	
	private void setKeyListener()
	{
            cmbTargetPeriodEndDate.addKeyListener(SystemInfo.getMoveNextField());
            cmbTargetPeriodEndDate.addFocusListener(SystemInfo.getSelectText());
            cmbTargetPeriodStartDate.addKeyListener(SystemInfo.getMoveNextField());
            cmbTargetPeriodStartDate.addFocusListener(SystemInfo.getSelectText());
            cashTypeAll.addKeyListener(SystemInfo.getMoveNextField());
            cashTypeAll.addFocusListener(SystemInfo.getSelectText());
            cashTypeIn.addKeyListener(SystemInfo.getMoveNextField());
            cashTypeIn.addFocusListener(SystemInfo.getSelectText());
            cashTypeOut.addKeyListener(SystemInfo.getMoveNextField());
            cashTypeOut.addFocusListener(SystemInfo.getSelectText());
            staff.addKeyListener(SystemInfo.getMoveNextField());
            staff.addFocusListener(SystemInfo.getSelectText());
            cmbTargetPeriodEndDate1.addKeyListener(SystemInfo.getMoveNextField());
            cmbTargetPeriodEndDate1.addFocusListener(SystemInfo.getSelectText());
            cmbTargetPeriodStartDate1.addKeyListener(SystemInfo.getMoveNextField());
            cmbTargetPeriodStartDate1.addFocusListener(SystemInfo.getSelectText());
	}
	
	/**
	 * 出力タイプ文字列を取得
	 */
	private String getStringOutPutType()
	{
            if( cashTypeIn.isSelected() ) return "入金";
            if( cashTypeOut.isSelected() ) return "出金";
            return "指定なし";
	}
	
	/**
	 * 出力スタッフ名を取得
	 */
	private String getStringStaffName()
	{
            if( ( (MstStaff)staff.getSelectedItem() ).getStaffID() == null ) return "指定なし";
            return ( (MstStaff)staff.getSelectedItem() ).toString();
	}
	
	/**
	 * EXCEL出力を行う
	 */
	private void print()
	{
            if( !loadData() );

            // データが存在しない場合には出力を行わない
            if( 0 < rcio.size() )
            {
                /*
                    String reportUrl = "";
                    HashMap<String, Object> param = new HashMap<String, Object>();

                    String shopName = "";
                    if (target.getSelectedItem() instanceof MstGroup) {
                        //グループ
                        MstGroup mg = (MstGroup)target.getSelectedItem();
                        shopName = mg.getGroupName();
                    } else if(target.getSelectedItem() instanceof MstShop) {
                        //店舗
                        MstShop ms = (MstShop)target.getSelectedItem();
                        shopName = ms.getShopName();
                    }

                    param.put( "TargetName",      shopName);
                    param.put( "TargetStartDate", String.format( "%1$tY/%1$tm/%1$td", cmbTargetPeriodStartDate.getDate() ) );
                    param.put( "TargetEndDate",   String.format( "%1$tY/%1$tm/%1$td", cmbTargetPeriodEndDate.getDate() ) );
                    param.put( "OutType",        this.getStringOutPutType() );
                    param.put( "StaffName",      this.getStringStaffName() );

                    InputStream report = DataCashIO.class.getResourceAsStream( REPORT_PATH );
                    String fileName = REPORT_REGISTER_CASHIO + String.format("%1$tY%1$tm%1$td%2$ts", new GregorianCalendar(), new java.util.Date());

                    ReportManager.exportReport( report, fileName, ReportManager.PDF_FILE, param, rcio );
                */

                String shopName = "";
                if (target.getSelectedItem() instanceof MstGroup) {
                    //グループ
                    MstGroup mg = (MstGroup)target.getSelectedItem();
                    shopName = mg.getGroupName();
                } else if(target.getSelectedItem() instanceof MstShop) {
                    //店舗
                    MstShop ms = (MstShop)target.getSelectedItem();
                    shopName = ms.getShopName();
                }

                JExcelApi jx = new JExcelApi("レジ出納帳");
                jx.setTemplateFile("/reports/レジ出納帳.xls");
                
                // ヘッダ
                jx.setValue(6, 3, shopName);
                jx.setValue(6, 4, String.format( "%1$tY/%1$tm/%1$td", cmbTargetPeriodStartDate.getDate()) + " 〜 " + String.format( "%1$tY/%1$tm/%1$td", cmbTargetPeriodEndDate.getDate()));
                jx.setValue(6, 5, this.getStringOutPutType());
                jx.setValue(6, 6, this.getStringStaffName());

                int row = 9;

                // 追加行数セット
                jx.insertRow(row, rcio.size() - 2);
                for (int i = 0; i < rcio.size(); i++) {
                    jx.mergeCells(1, row + i, 5, row + i);
                    jx.mergeCells(6, row + i, 10, row + i);
                    jx.mergeCells(11, row + i, 15, row + i);
                    jx.mergeCells(16, row + i, 20, row + i);
                    jx.mergeCells(21, row + i, 36, row + i);
                }

                for (DataCashIO dcio : rcio) {
                    jx.setValue(1, row, String.format( "%1$tY/%1$tm/%1$td", dcio.getIoTime()));
                    jx.setValue(6, row, dcio.getStaffName());
                    jx.setValue(11, row, dcio.getInValue());
                    jx.setValue(16, row, dcio.getOutValue());
                    jx.setValue(21, row, dcio.getUseFor());

                    row++;
                }
                jx.openWorkbook();
            }
            else
            {
                MessageDialog.showMessageDialog(this,
                                MessageUtil.getMessage(1112),
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
            }
	}
	
	private boolean loadData()
	{
            rcio.clear();

            try
            {
                ConnectionWrapper con = SystemInfo.getConnection();
                ResultSetWrapper rs = con.executeQuery(this.getLoadSQL());

                while(rs.next())
                {
                    DataCashIO dcio = new DataCashIO();
                    dcio.setData(rs);
                    MstStaff ms = new MstStaff();
                    ms.setStaffID(rs.getInt("staff_id"));
                    ms.setStaffNo(rs.getString("staff_no"));
                    ms.setStaffName(0, rs.getString("staff_name1"));
                    ms.setStaffName(1, rs.getString("staff_name2"));
                    dcio.setStaff(ms);

                    rcio.add(dcio);
                }
                rs.close();
            }
            catch(SQLException e)
            {
                    SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
                    return false;
            }
            return true;
	}
	
	private String getLoadSQL()
	{
            String shopIDList = "";
            
            if (target.getSelectedItem() instanceof MstGroup) {
                //グループ
                MstGroup mg = (MstGroup)target.getSelectedItem();
                shopIDList = mg.getShopIDListAll();
            } else if(target.getSelectedItem() instanceof MstShop) {
                //店舗
		MstShop ms = (MstShop)target.getSelectedItem();
                shopIDList = ms.getShopID().toString();
            }
            
            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select");
            sql.append("      dcio.*");
            sql.append("     ,ms.staff_no");
            sql.append("     ,ms.staff_name1");
            sql.append("     ,ms.staff_name2");
            sql.append(" from");
            sql.append("     data_cash_io dcio");
            sql.append("         left join mst_staff ms");
            sql.append("                on ms.staff_id = dcio.staff_id");
            sql.append(" where");
            sql.append("         dcio.delete_date is null");
            sql.append("     and dcio.shop_id in (" + shopIDList + ")");
            sql.append("     and dcio.in_out IN ( " + ( !cashTypeOut.isSelected() ? "'t'" : "" ) + ( cashTypeAll.isSelected() ? ", " : "" ) + ( !cashTypeIn.isSelected() ? "'f'" : "" ) + " )");
            sql.append("     and dcio.io_date between " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodStartDate.getDate() ) + " and " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate.getDate() ) + "");

            if (((MstStaff)staff.getSelectedItem()).getStaffID() != null) {
                sql.append(" and dcio.staff_id = " + SQLUtil.convertForSQL( ( (MstStaff)staff.getSelectedItem() ).getStaffID()));
            }
            
            sql.append(" order by");
            sql.append("      io_date");
            sql.append("     ,dcio.io_no");

            return sql.toString();

	}
	
	private void printPaymentAccording()
	{
            
            ReportParameterBean paramBean = new ReportParameterBean();
            //IVS_TMTrong start add 20150707 New request #39504
            Boolean courseFlg = false;    
            //IVS_TMTrong end add 20150707 New request #39504
            if (target.getSelectedItem() instanceof MstGroup) {

                //グループ
                MstGroup mg = (MstGroup)target.getSelectedItem();
                paramBean.setTargetName(mg.getGroupName());
                paramBean.setShopIDList(mg.getShopIDListAll());
                paramBean.setCutoffDay(SystemInfo.getAccountSetting().getCutoffDay());
                 //IVS_TMTrong start add 20150707 New request #39504
                for (MstShop shop : mg.getShops()) {
                    if (shop.getCourseFlag() == 1) {
                        courseFlg = true;
                    }
                }
                 //IVS_TMTrong end add 20150707 New request #39504
                
            } else if(target.getSelectedItem() instanceof MstShop) {
                
                //店舗
		MstShop ms = (MstShop)target.getSelectedItem();
                paramBean.setTargetName(ms.getShopName());
                paramBean.setShopIDList(ms.getShopID().toString());
                paramBean.setCutoffDay(ms.getCutoffDay());
                 //IVS_TMTrong start add 20150707 New request #39504
                if (ms.getCourseFlag() == 1) {
                    courseFlg = true;
                }
                 //IVS_TMTrong end add 20150707 New request #39504
            }
		
            //対象となる店舗が存在しない場合
            if (paramBean.getShopIDList().equals("")) {
                MessageDialog.showMessageDialog(this,
                                MessageUtil.getMessage(4001),
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                return;
            }
		
            //割引の区分の設定
            paramBean.setDiscountType(SystemInfo.getAccountSetting().getDiscountType());
            
            paramBean.setMonthTargetYear(this.cmbDayWayYear.getSelectedItem().toString());
            paramBean.setMonthTargetMonth((String)this.cmbDayWayMonth.getSelectedItem());
	
            Calendar calStart = Calendar.getInstance();
            calStart.set(Integer.parseInt(cmbDayWayYear.getSelectedItem().toString()), cmbDayWayMonth.getSelectedIndex(), 1);
            Calendar calEnd = (Calendar)calStart.clone();
            calEnd.add(Calendar.MONTH, 1);
            calEnd.add(Calendar.DAY_OF_MONTH, -1);

            this.resetSpan(paramBean, calStart, calEnd);
            paramBean.setTargetStartDateObj(calStart.getTime());
            paramBean.setTargetEndDateObj(calEnd.getTime());
            
            //１ヵ月分のデータの作成
            ConnectionWrapper con = SystemInfo.getConnection();
            int dateCount = 0;
		
            try {
                
                //nhanvt start add  20141112 Bug #32376
                MstSetting setting = SystemInfo.getSetteing();

                boolean isOld = true;
                try {
                    if(setting.getVersionSql(con).contains("PostgreSQL 7.4")){
                        isOld = true;
                    }else{
                        isOld = false;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                //nhanvt end add  20141112 Bug #32376
                // 売上なしのレジ締め日数取得
                StringBuilder sql = new StringBuilder(1000);
                sql.append(" select");
                sql.append("     count(distinct manage_date) as cnt");
                sql.append(" from");
                sql.append("     data_register dr");
                sql.append(" where");
                sql.append("         delete_date is null");
                sql.append("     and shop_id in (" + paramBean.getShopIDList() + ")");
                sql.append("     and manage_date between " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj()));
                sql.append("                         and " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj()));
                sql.append("     and not exists");
                sql.append("         (");
                sql.append("             select 1");
                sql.append("             from");
                sql.append("                 data_sales");
                sql.append("             where");
                sql.append("                     delete_date is null");
                sql.append("                 and shop_id = dr.shop_id");
                sql.append("                 and sales_date = dr.manage_date");
                sql.append("         )");
                ResultSetWrapper rsTmp = con.executeQuery(sql.toString());
                if (rsTmp.next()) {
                    dateCount += rsTmp.getLong("cnt");
                }
                rsTmp.close();
                
                // 売上情報
                String allPriceSql = "";
                allPriceSql += " select";
                allPriceSql += "      to_char(a.sales_date, 'YYYY/MM/DD') as date";
                allPriceSql += "     ,sum(b.tech_count)      as tech_count";
                allPriceSql += "     ,sum(b.tech_value)      as tech_value";
                allPriceSql += "     ,sum(b.item_num)        as item_num";
                allPriceSql += "     ,sum(b.item_value)      as item_value";
                //IVS_TMTrong start add 20150706 Bug #39503
                allPriceSql += "     ,sum(b.course_num)        as course_num";
                allPriceSql += "     ,sum(b.course_value)      as course_value";
                allPriceSql += "     ,sum(b.cancel_course_value) as cancel_course_value";
                //IVS_LVTu start edit 2015/12/09 Bug #45197
                //allPriceSql += "     ,sum(b.change_course_value)      as change_course_value";
                allPriceSql += "     ,sum(CASE WHEN change_course_flag > 0 THEN (select sum(payment_value) from data_payment_detail dpd where dpd.shop_id = b.shop_id and dpd.slip_no = b.slip_no) ELSE 0 END) AS change_course_value ";
                //IVS_TMTrong end add 20150706 Bug #39503
                if (this.rdoTaxBlank.isSelected()) {
                    // 税抜き
                    allPriceSql += " ,sum(a.discount_value_no_tax) as all_discount";
                } else if(this.rdoTaxUnit.isSelected()) {
                    // 税込み
                    allPriceSql += " ,sum(a.discount_value) as all_discount";
                }
                // vtbphuong start change 20140822 Bug #30054
                //allPriceSql += " ,sum(a.discount_sales_value_in_tax - a.discount_sales_value_no_tax) as tax";
                  allPriceSql += " ,sum(b.tax) AS tax  "; 
                
               
                // vtbphuong end change 20140822 Bug #30054
                allPriceSql += " from";
                allPriceSql += "     view_data_sales_valid a";
                allPriceSql += "         join";
                allPriceSql += "         (";
                allPriceSql += "             select";
                allPriceSql += "                  shop_id";
                allPriceSql += "                 ,slip_no";
                allPriceSql += "                 ,count(distinct case when product_division in (1, 3) then slip_no else null end) as tech_count";
                allPriceSql += "                 ,sum(case when product_division in (2, 4) then product_num else 0 end) as item_num";
                //IVS_TMTrong start edit 20150709 Bug #39503
                 //allPriceSql += "                 ,sum(case when product_division in (5, 6) then product_num else 0 end) as course_num";
                allPriceSql += "                 ,sum(case when product_division in (5) then product_num else 0 end) as course_num";
                //IVS_TMTrong end edit 20150709 Bug #39503
                if (this.rdoTaxBlank.isSelected()) {
                    // 税抜き
                    allPriceSql += "             ,sum(case when product_division in (1, 3) then discount_detail_value_no_tax else 0 end) as tech_value";
                    allPriceSql += "             ,sum(case when product_division in (2, 4) then discount_detail_value_no_tax else 0 end) as item_value";
                    //IVS_TMTrong start edit 20150709 Bug #39503
                     //allPriceSql += "             ,sum(case when product_division in (5, 6) then discount_detail_value_no_tax else 0 end) as course_value";
                    allPriceSql += "             ,sum(case when product_division in (5) then discount_detail_value_no_tax else 0 end) as course_value";
                     //allPriceSql += "             ,sum(case when product_division in (7) then discount_detail_value_no_tax else 0 end) as change_course_value";
                    //IVS_TMTrong start edit 20150724 Bug #40934
                     allPriceSql += "             ,sum(case when product_division in (8,9) then discount_detail_value_no_tax else 0 end) as cancel_course_value";
                    //IVS_TMTrong end edit 20150724 Bug #40934
                    //IVS_TMTrong end edit 20150709 Bug #39503
                } else if(this.rdoTaxUnit.isSelected()) {
                    // 税込み
                    allPriceSql += "             ,sum(case when product_division in (1, 3) then discount_detail_value_in_tax else 0 end) as tech_value";
                    allPriceSql += "             ,sum(case when product_division in (2, 4) then discount_detail_value_in_tax else 0 end) as item_value";
                    //IVS_TMTrong start edit 20150709 Bug #39503
                    //allPriceSql += "             ,sum(case when product_division in (5, 6) then discount_detail_value_in_tax else 0 end) as course_value";
                    allPriceSql += "             ,sum(case when product_division in (5) then discount_detail_value_in_tax else 0 end) as course_value";
                     //allPriceSql += "             ,sum(case when product_division in (7) then discount_detail_value_in_tax else 0 end) as change_course_value";
                     //IVS_TMTrong start edit 20150724 Bug #40934
                     allPriceSql += "             ,sum(case when product_division in (8,9) then discount_detail_value_in_tax else 0 end) as cancel_course_value";
                     //IVS_TMTrong end edit 20150724 Bug #40934
                    //IVS_TMTrong end edit 20150709 Bug #39503
                }
                allPriceSql += "             ,sum(CASE WHEN product_division IN (7) THEN 1 ELSE 0 END) AS change_course_flag ";
                //IVS_LVTu end edit 2015/12/09 Bug #45197
                // vtbphuong start add 20140822 Bug #30054
                allPriceSql += "             ,sum(CASE WHEN product_division NOT IN  (6) THEN discount_detail_value_in_tax - discount_detail_value_no_tax  ELSE 0 END) AS tax"; 
                // vtbphuong end add 20140822 Bug #30054
                allPriceSql += "             from";
                allPriceSql += "                 view_data_sales_detail_valid";
                allPriceSql += "             where";
                allPriceSql += "                     shop_id in (" + paramBean.getShopIDList() + ")";
                allPriceSql += "                 and sales_date between " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
                allPriceSql += "                                    and " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());
                allPriceSql += "             group by";
                allPriceSql += "                  shop_id";
                allPriceSql += "                 ,slip_no";
                allPriceSql += " ";
                allPriceSql += "         ) b";
                allPriceSql += "         using (shop_id, slip_no)";
                //nhanvt start edit  20141112 Bug #32376
                if(!isOld){
                    allPriceSql += " where";
                    allPriceSql += "         a.shop_id in (" + paramBean.getShopIDList() + ")";
                    allPriceSql += "     and a.sales_date between " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
                    allPriceSql += "                          and " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());
                }
                //nhanvt end edit  20141112 Bug #32376
                allPriceSql += " group by";
                allPriceSql += "     a.sales_date";
                allPriceSql += " order by";
                allPriceSql += "     a.sales_date";

                // 支払情報
                String paymentPriceSql = "";
                paymentPriceSql += " select";
                paymentPriceSql += "      to_char(dp.payment_date, 'YYYY/MM/DD') AS date";
                //IVS_TMTrong start add 20150708 Bug #39503 
                paymentPriceSql += "     ,sum(case dp.payment_no when 0 then dpd.cash_value - (case when dp.change_value < 0 then 0 else dp.change_value end)  else 0 end)   as cash_sales_in_tax";
                paymentPriceSql += "     ,floor(sum(case dp.payment_no when 0 then dpd.cash_value - (case when dp.change_value < 0 then 0 else dp.change_value end)  else 0 end) /(1 + get_tax_rate(dp.payment_date))) as cash_sales_value_no_tax";
                //IVS_TMTrong end add 20150708 Bug #39503 
                paymentPriceSql += "     ,sum(case dp.payment_no when 0 then dpd.card_value else 0 end)                      as card_sales";
                paymentPriceSql += "     ,sum(case dp.payment_no when 0 then dpd.ecash_value else 0 end)                     as ecash_sales";
                paymentPriceSql += "     ,sum(case dp.payment_no when 0 then dpd.gift_value else 0 end)                      as gift_sales";
                paymentPriceSql += "     ,sum(case dp.payment_no when 0 then dp.bill_value else 0 end)                       as bill_value";
                paymentPriceSql += "     ,sum(case dp.payment_no when 0 then 0 else dpd.cash_value - (case when dp.change_value < 0 then 0 else dp.change_value end) end)    as cash_collect";
                paymentPriceSql += "     ,sum(case dp.payment_no when 0 then 0 else dpd.card_value end)                      as card_collect";
                paymentPriceSql += "     ,sum(case dp.payment_no when 0 then 0 else dpd.ecash_value end)                     as ecash_collect";
                paymentPriceSql += "     ,sum(case dp.payment_no when 0 then 0 else dpd.gift_value end)                      as gift_collect";
                paymentPriceSql += " from";
                paymentPriceSql += "     data_payment dp";
                paymentPriceSql += "         left outer join";
                paymentPriceSql += "             (";
                paymentPriceSql += "                 select";
                paymentPriceSql += "                      dpd.shop_id";
                paymentPriceSql += "                     ,dpd.slip_no";
                paymentPriceSql += "                     ,dpd.payment_no";
                paymentPriceSql += "                     ,sum(case mpm.payment_class_id when 1 then dpd.payment_value else 0 end) as cash_value";
                paymentPriceSql += "                     ,sum(case mpm.payment_class_id when 2 then dpd.payment_value else 0 end) as card_value";
                paymentPriceSql += "                     ,sum(case mpm.payment_class_id when 3 then dpd.payment_value else 0 end) as ecash_value";
                paymentPriceSql += "                     ,sum(case mpm.payment_class_id when 4 then dpd.payment_value else 0 end) as gift_value";
                paymentPriceSql += "                 from";
                paymentPriceSql += "                     data_payment_detail dpd";
                paymentPriceSql += "                         inner join mst_payment_method mpm";
                paymentPriceSql += "                                 on mpm.payment_method_id = dpd.payment_method_id";
                paymentPriceSql += "                         inner join data_payment dp";
                paymentPriceSql += "                                 on dpd.shop_id = dp.shop_id";
                paymentPriceSql += "                                and dpd.slip_no = dp.slip_no";
                paymentPriceSql += "                                and dpd.payment_no = dp.payment_no";
                paymentPriceSql += "                                and dp.shop_id in (" + paramBean.getShopIDList() + ")";
                paymentPriceSql += "                                and dp.payment_date between " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
                paymentPriceSql += "                                                        and " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());
                paymentPriceSql += "                 where";
                paymentPriceSql += "                     dpd.delete_date is null";
                paymentPriceSql += "                 group by";
                paymentPriceSql += "                      dpd.shop_id";
                paymentPriceSql += "                     ,dpd.slip_no";
                paymentPriceSql += "                     ,dpd.payment_no";
                paymentPriceSql += "             ) dpd";
                paymentPriceSql += "             on dpd.shop_id = dp.shop_id";
                paymentPriceSql += "            and dpd.slip_no = dp.slip_no";
                paymentPriceSql += "            and dpd.payment_no = dp.payment_no";
                paymentPriceSql += " where";
                paymentPriceSql += "         dp.delete_date is null";
                paymentPriceSql += "     and dp.shop_id in (" + paramBean.getShopIDList() + ")";
                paymentPriceSql += "     and dp.payment_date between " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
                paymentPriceSql += "                             and " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());
                paymentPriceSql += "     and exists";
                paymentPriceSql += "         (";
                paymentPriceSql += "             select 1";
                paymentPriceSql += "             from";
                paymentPriceSql += "                 view_data_sales_valid";
                paymentPriceSql += "             where";
                paymentPriceSql += "                     shop_id = dp.shop_id";
                paymentPriceSql += "                 and slip_no = dp.slip_no";
                paymentPriceSql += "                 and sales_date is not null";
                paymentPriceSql += "         )";
                paymentPriceSql += " group by";
                //IVS_Trong start add 20150708 Bug #39503 
                paymentPriceSql += "     date, dp.payment_date";
                //IVS_Trong start end 20150708 Bug #39503 
                paymentPriceSql += " order by";
                paymentPriceSql += "     date";

                // レジ入出金
                String registerInOutSql = "";
                registerInOutSql += " select";
                registerInOutSql += "      to_char(io_date, 'YYYY/MM/DD') as date";
                registerInOutSql += "     ,sum(case when in_out then io_value else 0 end) as In_value";
                registerInOutSql += "     ,sum(case when in_out then 0 else io_value end) as Out_value";
                registerInOutSql += " from";
                registerInOutSql += "     data_cash_io";
                registerInOutSql += " where";
                registerInOutSql += "         delete_date is null";
                registerInOutSql += "     and shop_id in (" + paramBean.getShopIDList() + ")";
                registerInOutSql += "     and io_date between " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
                registerInOutSql += "                     and " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());
                registerInOutSql += " group by";
                registerInOutSql += "     date";

                // 物理レジ金
                String physicsCashSql = "";
                physicsCashSql += " select";
                physicsCashSql += "      to_char(manage_date, 'YYYY/MM/DD') AS date";
                physicsCashSql += "     ,sum(money_1 * 1 + money_5 * 5 + money_10 * 10 + money_50 * 50 + money_100 * 100 + money_500 * 500 + money_1000 * 1000 + money_2000 * 2000 + money_5000 * 5000 + money_10000 * 10000) as value";
                physicsCashSql += "     ,sum(base_value) as base_value";
                physicsCashSql += " from";
                physicsCashSql += "     data_register";
                physicsCashSql += " where";
                physicsCashSql += "         delete_date is null";
                physicsCashSql += "     and manage_date between " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetStartDateObj());
                physicsCashSql += "                         and " + SQLUtil.convertForSQLDateOnly(paramBean.getTargetEndDateObj());
                physicsCashSql += "     and shop_id in (" + paramBean.getShopIDList() + ")";
                physicsCashSql += " group by";
                physicsCashSql += "     date";

                //SQLの組み立て
                String mainQuery = "";
                mainQuery += " select";
                mainQuery += "      all_data.date";
                mainQuery += "     ,all_data.tech_count";
                mainQuery += "     ,all_data.tech_value";
                mainQuery += "     ,all_data.item_num";
                mainQuery += "     ,all_data.item_value";
                //begin edit TMTrong 20150706 Bug #39506
                mainQuery += " ,all_data.course_num ";
                mainQuery += " ,all_data.course_value ";
                mainQuery += " ,all_data.cancel_course_value ";
                mainQuery += " ,all_data.change_course_value ";
                //end edit TMTrong 20150706 Bug #39506
                
                //nhanvt edit start 20141006 Bug #31180
                //mainQuery += "     ,all_data.tax";
        
                 mainQuery += "     ,( \n";
        
                mainQuery += "  select  " + "\n";
                mainQuery +="  sum(  " + "\n";
                mainQuery +=" CASE " + "\n";
                mainQuery +="       WHEN  coalesce (a.overall_discount,0) = 0::numeric THEN discount_detail_value_in_tax - discount_detail_value_no_tax   " + "\n";
                mainQuery +="      WHEN a.overall_discount > 0  AND b.discount_type = 1  THEN discount_detail_value_in_tax - discount_detail_value_no_tax  - (  trunc( floor ((a.overall_discount) * (1.0 + get_tax_rate(a.sales_date))))  - a.overall_discount )  " + "\n";
                mainQuery +="      WHEN a.overall_discount > 0  AND b.discount_type = 0  THEN discount_detail_value_in_tax - discount_detail_value_no_tax  - (  a.overall_discount -  trunc( ceil((a.overall_discount) / (1.0 + get_tax_rate(a.sales_date))))  )  " + "\n";
                mainQuery +="     ELSE NULL::numeric " + "\n";
                mainQuery +="   END  " + "\n";
                mainQuery +=" )      " + "\n";
                mainQuery +=" 	from (  " + "\n";
                mainQuery +=" (  select shop_id , slip_no , sum(discount_detail_value_in_tax)  as  discount_detail_value_in_tax  , sum(discount_detail_value_no_tax )  as  discount_detail_value_no_tax " + "\n";                
                mainQuery +="  , sales_date  from   view_data_sales_detail_valid  " + "\n";
                mainQuery +="          where  shop_id in( " + paramBean.getShopIDList() + ")\n";
                mainQuery += "             and sales_date between to_date(all_data.date,'YYYY/MM/DD')  and to_date(all_data.date,'YYYY/MM/DD') " ;
                mainQuery +=" 		and product_division <> 6  " + "\n";
                if (paramBean.getStaffId() != null) {
                    mainQuery += "             and staff_id = '" + paramBean.getStaffId().toString() + "'";
                }
                mainQuery +=" 	group by  shop_id , slip_no ,sales_date   " + "\n";
                mainQuery +="  ) a  " + "\n";
                mainQuery +="        left join   " + "\n";
                mainQuery +="            ( select shop_id , slip_no  ,coalesce( discount_value ,0)  as overall_discount  " + "\n";
                mainQuery +="          from  view_data_sales_detail_all " + "\n";
                mainQuery +="          where  shop_id in( " + paramBean.getShopIDList() + ")\n";
                
                mainQuery += "             and sales_date between to_date(all_data.date,'YYYY/MM/DD')  and to_date(all_data.date,'YYYY/MM/DD') " ;
                
                mainQuery +=" 	and product_division = 0   ) b using (shop_id , slip_no )   ) a  ,  " + "\n";
                mainQuery +="       ( SELECT mst_account_setting.display_price_type, mst_account_setting.discount_type " + "\n";
                mainQuery +="            FROM mst_account_setting " + "\n";
                mainQuery +="          WHERE mst_account_setting.delete_date IS NULL " + "\n";
                mainQuery +="         LIMIT 1) b   " + "\n";

                mainQuery += "     ) as tax \n";
                
                //nhanvt edit end 20141006 Bug #31180
                mainQuery += "     ,all_data.all_discount";
                mainQuery += "     ,register.In_value as register_In";
                mainQuery += "     ,register.Out_value as register_Out";
                mainQuery += "     ,physics.value as physics_value";
                mainQuery += "     ,physics.base_value";
                mainQuery += " from";
                mainQuery += "     (" + allPriceSql + ") all_data";
                mainQuery += "         left join (" + registerInOutSql + ") register";
                mainQuery += "                on all_data.date = register.date";
                mainQuery += "         left join (" + physicsCashSql + ") physics";
                mainQuery += "                on all_data.date = physics.date";
                mainQuery += " order by";
                mainQuery += "     date";

                ResultSetWrapper rs = con.executeQuery(mainQuery);
                ResultSetWrapper rsPayment = con.executeQuery(paymentPriceSql);
                
               JExcelApi jx = new JExcelApi("レジ入金表");
               //IVS_TMTrong start edit 20150707 New request #39504
                if(courseFlg){
                     jx.setTemplateFile("/reports/レジ入金表_役務機能有.xls");
                     this.ReportTemplate2CourseFlagEqual1(jx, paramBean, con, rs, rsPayment, calStart, calEnd, dateCount);
                }else{
                    jx.setTemplateFile("/reports/レジ入金表.xls");
                    this.ReportTemplate1CourseFlagNotEqual1(jx, paramBean, con, rs, rsPayment, calStart, calEnd, dateCount);
                }
                //IVS_TMTrong end edit 20150707 New request #39504
			
            } catch(Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }
		
	}
        
        //IVS_TMTrong start add 20150707 New request #39504
         //Excel Template name: レジ入金表.xls
        public void ReportTemplate1CourseFlagNotEqual1(JExcelApi jx, ReportParameterBean paramBean, 
                ConnectionWrapper con, ResultSetWrapper rs, ResultSetWrapper rsPayment,
                Calendar calStart, Calendar calEnd, int dateCount) throws SQLException{
             
            if (rs.last()) {

                    // ヘッダ
                    jx.setValue(2, 3, String.format("%1$tY/%1$tm/%1$td", calStart) + " 〜 " + String.format("%1$tY/%1$tm/%1$td", calEnd));
                    jx.setValue(2, 4, paramBean.getTargetName());
                    
                    if (this.rdoTaxBlank.isSelected()) {
                        jx.setValue(2, 6, "税抜");
                    } else if(this.rdoTaxUnit.isSelected()) {
                        jx.setValue(2, 6, "税込");
                    }

                    int days = getDays(calStart, calEnd);
                    
                    int row = 10;

                    // 追加行数セット
                    jx.insertRow(row, days - 1);

                    rs.first();

                    Calendar calTmp = (Calendar)calStart.clone();
                    
                    PaymentAccordingBean paBean = new PaymentAccordingBean();

                    for (int i = 0; i < days; i++) {

                        jx.setValue(1, row, calTmp.getTime());

                        paBean.setDate(String.format( "%1$tY/%1$tm/%1$td", calTmp));
                        //nhanvt start add 20141209 Bug #33640
                        jx.setValue(21, row, cashInOut(con,paBean.getDate(),paramBean.getShopIDList()));
                        //nhanvt start add 20141209 Bug #33640
                        rs.beforeFirst();
                        Long totalValue = 0L;
                        while (rs.next()) {

                            //その日付のデータがある場合はセット
                            if (paBean.getDate().equals(rs.getString("date"))) {

                                jx.setValue(2, row, rs.getLong("tech_count"));
                                jx.setValue(3, row, rs.getLong("tech_value"));
                                jx.setValue(4, row, rs.getLong("item_num"));
                                jx.setValue(5, row, rs.getLong("item_value"));
                                jx.setValue(7, row, rs.getLong("all_discount"));
                                jx.setValue(8, row, rs.getLong("tax"));
                                //nhanvt add start 20141006 Bug #31180
                                if(rdoTaxBlank.isSelected()){
                                    jx.setValue(9, row, (rs.getLong("tech_value") + rs.getLong("item_value") ) - rs.getLong("all_discount") + rs.getLong("tax"));
                                    //IVS_TMTrong start edit 20150706 Bug #39503
                                    //totalValue = (rs.getLong("tech_value") + rs.getLong("item_value") ) - rs.getLong("all_discount") + rs.getLong("tax");
                                    totalValue = (rs.getLong("tech_value") + rs.getLong("item_value") + rs.getLong("course_value")) - rs.getLong("all_discount") + rs.getLong("tax");
                                    //IVS_TMTrong end edit 20150706 Bug #39503
                                }else{
                                    jx.setValue(9, row, (rs.getLong("tech_value") + rs.getLong("item_value") ) - rs.getLong("all_discount"));
                                    //IVS_TMTrong start edit 20150706 Bug #39503
                                    //totalValue = (rs.getLong("tech_value") + rs.getLong("item_value") ) - rs.getLong("all_discount");
                                    totalValue = (rs.getLong("tech_value") + rs.getLong("item_value") + rs.getLong("course_value")) - rs.getLong("all_discount");
                                    //IVS_TMTrong end edit 20150706 Bug #39503
                                }
                                //nhanvt edit end 20141006 Bug #31180
                                //nhanvt start edit 20150106 Bug #34834
                                //jx.setValue(21, row, rs.getLong("register_In") - rs.getLong("register_Out"));
                                //nhanvt end edit 20150106 Bug #34834
                                jx.setValue(23, row, rs.getLong("base_value"));
                                jx.setValue(25, row, rs.getLong("physics_value"));
                                
                                dateCount++;

                                break;
                            }
                        }

                        rsPayment.beforeFirst();
                        Long cashValue = 0L;
                        while (rsPayment.next()) {

                            //その日付のデータがある場合はセット
                            if (paBean.getDate().equals(rsPayment.getString("date"))) {

                               // jx.setValue(11, row, rsPayment.getLong("cash_sales"));
                                jx.setValue(12, row, rsPayment.getLong("card_sales"));
                                jx.setValue(13, row, rsPayment.getLong("ecash_sales"));
                                jx.setValue(14, row, rsPayment.getLong("gift_sales"));
                                 
                                //nhanvt start edit 20141209 Bug #33640
                                jx.setValue(15, row, rsPayment.getLong("bill_value"));
                                //nhanvt end edit 20141209 Bug #33640
                                // vtbphuong start change  20150609 
                                cashValue = 0L;
                                cashValue = totalValue -  ( rsPayment.getLong("card_sales") +  rsPayment.getLong("ecash_sales") + rsPayment.getLong("gift_sales")  + rsPayment.getLong("bill_value"));
                                jx.setValue(11, row, cashValue);
                                // vtbphuong end change 20150609
                                jx.setValue(17, row, rsPayment.getLong("cash_collect"));
                                jx.setValue(18, row, rsPayment.getLong("card_collect"));
                                jx.setValue(19, row, rsPayment.getLong("ecash_collect"));
                                jx.setValue(20, row, rsPayment.getLong("gift_collect"));
                                //nhanvt start add 20150106 Bug #34834
                                //jx.setValue(21, row, rsPayment.getLong("bill_value"));
                                 //nhanvt end add 20150106 Bug #34834
                                break;
                            }
                        }
                        
                        calTmp.add(Calendar.DAY_OF_MONTH, 1);
                        
                        row++;
                    }

                    // 営業日数
                    jx.setValue(2, 5, dateCount + "日");
                    
                    jx.removeRow(row);

                    jx.openWorkbook();

                } else {

		    MessageDialog.showMessageDialog(this,
				    MessageUtil.getMessage(1112),
				    this.getTitle(),
				    JOptionPane.ERROR_MESSAGE);
                }
                
                rs.close();
                rsPayment.close();
        }
        
        //Excel Template name: レジ入金表_役務機能有.xls
        public void ReportTemplate2CourseFlagEqual1(JExcelApi jx, ReportParameterBean paramBean, 
                ConnectionWrapper con, ResultSetWrapper rs, ResultSetWrapper rsPayment,
                Calendar calStart, Calendar calEnd, int dateCount) throws SQLException{
             
            if (rs.last()) {

                    // ヘッダ
                    jx.setValue(2, 3, String.format("%1$tY/%1$tm/%1$td", calStart) + " 〜 " + String.format("%1$tY/%1$tm/%1$td", calEnd));
                    jx.setValue(2, 4, paramBean.getTargetName());
                    
                    if (this.rdoTaxBlank.isSelected()) {
                        jx.setValue(2, 6, "税抜");
                    } else if(this.rdoTaxUnit.isSelected()) {
                        jx.setValue(2, 6, "税込");
                    }

                    int days = getDays(calStart, calEnd);
                    
                    int row = 10;

                    // 追加行数セット
                    jx.insertRow(row, days - 1);

                    rs.first();

                    Calendar calTmp = (Calendar)calStart.clone();
                    
                    PaymentAccordingBean paBean = new PaymentAccordingBean();

                    for (int i = 0; i < days; i++) {

                        jx.setValue(1, row, calTmp.getTime());

                        paBean.setDate(String.format( "%1$tY/%1$tm/%1$td", calTmp));
                        //nhanvt start add 20141209 Bug #33640
                        jx.setValue(23, row, cashInOut(con,paBean.getDate(),paramBean.getShopIDList()));
                        //nhanvt start add 20141209 Bug #33640
                        rs.beforeFirst();
                        Long totalValue = 0L;
                        while (rs.next()) {

                            //その日付のデータがある場合はセット
                            if (paBean.getDate().equals(rs.getString("date"))) {

                                jx.setValue(2, row, rs.getLong("tech_count"));
                                jx.setValue(3, row, rs.getLong("tech_value"));
                                jx.setValue(4, row, rs.getLong("item_num"));
                                jx.setValue(5, row, rs.getLong("item_value"));
                                jx.setValue(6, row, rs.getLong("course_num"));
                                jx.setValue(7, row, rs.getLong("course_value"));
                                jx.setValue(9, row, rs.getLong("all_discount"));
                                jx.setValue(10, row, rs.getLong("tax"));
                                //nhanvt add start 20141006 Bug #31180 
                                //IVS_TMTrong add edit 20150709 Bug #39503 
                                if(rdoTaxBlank.isSelected()){
                                     jx.setValue(11, row, (rs.getLong("tech_value") + rs.getLong("item_value") + rs.getLong("course_value")) - rs.getLong("all_discount") + rs.getLong("tax"));
                                    //jx.setValue(11, row, (rs.getLong("tech_value") + rs.getLong("item_value") ) - rs.getLong("all_discount") + rs.getLong("tax"));
                                    //IVS_TMTrong start edit 20150706 Bug #39503
                                    //totalValue = (rs.getLong("tech_value") + rs.getLong("item_value") ) - rs.getLong("all_discount") + rs.getLong("tax");
                                    //totalValue = (rs.getLong("tech_value") + rs.getLong("item_value") + rs.getLong("course_value")) - rs.getLong("all_discount") + rs.getLong("tax");
                                    //IVS_TMTrong end edit 20150706 Bug #39503
                                }else{
                                    jx.setValue(11, row, (rs.getLong("tech_value") + rs.getLong("item_value") + rs.getLong("course_value")) - rs.getLong("all_discount"));
                                    //IVS_TMTrong start edit 20150706 Bug #39503
                                    //totalValue = (rs.getLong("tech_value") + rs.getLong("item_value") ) - rs.getLong("all_discount");
                                   // totalValue = (rs.getLong("tech_value") + rs.getLong("item_value") + rs.getLong("course_value")) - rs.getLong("all_discount");
                                    //IVS_TMTrong end edit 20150706 Bug #39503
                                }
                                //IVS_TMTrong end edit 20150709 Bug #39503 
                                //nhanvt edit end 20141006 Bug #31180
                                //nhanvt start edit 20150106 Bug #34834
                                //jx.setValue(21, row, rs.getLong("register_In") - rs.getLong("register_Out"));
                                //nhanvt end edit 20150106 Bug #34834
                                jx.setValue(25, row, rs.getLong("base_value"));
                                jx.setValue(27, row, rs.getLong("physics_value"));
                                //IVS_TMTrong start add 20150708 New request #39504
                                jx.setValue(30, row, rs.getLong("cancel_course_value"));
                                jx.setValue(31, row, rs.getLong("change_course_value"));
                                //IVS_TMTrong end add 20150708 New request #39504
                                //IVS_LVTu start add 2015/09/01 Bug #42425
                                paBean.setBaseValue(rs.getLong("base_value"));
                                //IVS_LVTu end add 2015/09/01 Bug #42425
                                dateCount++;

                                break;
                            }
                        }

                        rsPayment.beforeFirst();
                        //IVS_TMTrong add edit 20150708 Bug #39503 
                        //Long cashValue = 0L;
                        //IVS_TMTrong end edit 20150708 Bug #39503 
                        while (rsPayment.next()) {

                            //その日付のデータがある場合はセット
                            if (paBean.getDate().equals(rsPayment.getString("date"))) {

                               // jx.setValue(11, row, rsPayment.getLong("cash_sales"));
                                jx.setValue(14, row, rsPayment.getLong("card_sales"));
                                jx.setValue(15, row, rsPayment.getLong("ecash_sales"));
                                jx.setValue(16, row, rsPayment.getLong("gift_sales"));
                                 
                                //nhanvt start edit 20141209 Bug #33640
                                jx.setValue(17, row, rsPayment.getLong("bill_value"));
                                //nhanvt end edit 20141209 Bug #33640
                                // vtbphuong start change  20150609 
                                //IVS_TMTrong add edit 20150708 Bug #39503 
                                //cashValue = 0L;
                                //cashValue = totalValue -  ( rsPayment.getLong("card_sales") +  rsPayment.getLong("ecash_sales") + rsPayment.getLong("gift_sales")  + rsPayment.getLong("bill_value"));
                                //jx.setValue(13, row, cashValue);
                                if(rdoTaxBlank.isSelected()){
                                    jx.setValue(13, row, rsPayment.getLong("cash_sales_value_no_tax"));
                                 }else{
                                    jx.setValue(13, row, rsPayment.getLong("cash_sales_in_tax"));
                                 }
                                //IVS_TMTrong end edit 20150708 Bug #39503 
                                // vtbphuong end change 20150609
                                jx.setValue(19, row, rsPayment.getLong("cash_collect"));
                                jx.setValue(20, row, rsPayment.getLong("card_collect"));
                                jx.setValue(21, row, rsPayment.getLong("ecash_collect"));
                                jx.setValue(22, row, rsPayment.getLong("gift_collect"));
                                //nhanvt start add 20150106 Bug #34834
                                //jx.setValue(21, row, rsPayment.getLong("bill_value"));
                                 //nhanvt end add 20150106 Bug #34834
                                //IVS_TMTrong start add 20150729 Bug #41105
                                jx.setValue(26, row, rsPayment.getLong("cash_sales_in_tax") + rsPayment.getLong("cash_collect")
                                //IVS_LVTu start edit 2015/09/01 Bug #42425
                                //+ cashInOut(con,paBean.getDate(),paramBean.getShopIDList()) + rs.getLong("base_value"));
                                + cashInOut(con,paBean.getDate(),paramBean.getShopIDList()) + (paBean.getBaseValue() != null ? paBean.getBaseValue():0) );
                                //IVS_LVTu end edit 2015/09/01 Bug #42425
                                //IVS_TMTrong end add 20150729 Bug #41105
                                break;
                            }
                        }
                        
                        calTmp.add(Calendar.DAY_OF_MONTH, 1);
                        
                        row++;
                    }

                    // 営業日数
                    jx.setValue(2, 5, dateCount + "日");
                    
                    jx.removeRow(row);

                    jx.openWorkbook();

                } else {

		    MessageDialog.showMessageDialog(this,
				    MessageUtil.getMessage(1112),
				    this.getTitle(),
				    JOptionPane.ERROR_MESSAGE);
                }
                
                rs.close();
                rsPayment.close();
        }
         //IVS_TMTrong end add 20150707 New request #39504
        
        //nhanvt start add 20141209 Bug #33640
        private Integer cashInOut(ConnectionWrapper con, String dateManager, String shopId) throws SQLException {
            Integer result = 0;

            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select");
            sql.append(" sum (case when in_out = true   then io_value else 0 end) as In ,\n ");
            sql.append(" sum (case when in_out = false  then io_value else 0 end) as Out \n ");
            sql.append(" from data_cash_io \n");
            sql.append(" where\n");
            sql.append(" delete_date is null\n");
            //nhanvt start edit 20150106 Bug #34834
            sql.append(" and shop_id in( " + shopId + ")");
            //nhanvt end edit 20150106 Bug #34834
            sql.append(" and io_date = " + SQLUtil.convertForSQL(dateManager));

            ResultSetWrapper rs = con.executeQuery(sql.toString());
            if (rs.next()) {
                result = rs.getInt("In") - rs.getInt("Out");

            }
            rs.close();
            return result;
        }
        //nhanvt end add 20141209 Bug #33640
	
	/*
	 *　引数の日付の月末を求める
	 *
	 *
	 */
	private GregorianCalendar getMonthEnddate(GregorianCalendar gCalendar)
	{

            gCalendar.add(Calendar.MONTH,1);
            gCalendar.add(Calendar.DAY_OF_MONTH,-1);

            return gCalendar;
	}

        private String getPaymentTypeName() {
         
            String result = "";
            
            if (paymentType1.isSelected()) {
                result = "カード";
            } else if (paymentType2.isSelected()) {
                result = "電子マネー";
            } else {
                result = "金券・その他";
            }

            return result;
        }
        
	private void printCardSalesDetails()
	{
            ReportParameterBean paramBean = new ReportParameterBean();
                
            if (target.getSelectedItem() instanceof MstGroup) {
                //グループ
                MstGroup mg = (MstGroup)target.getSelectedItem();
                paramBean.setTargetName(mg.getGroupName());
                paramBean.setShopIDList(mg.getShopIDListAll());
            } else if(target.getSelectedItem() instanceof MstShop) {
                //店舗
		MstShop ms = (MstShop)target.getSelectedItem();
                paramBean.setTargetName(ms.getShopName());
                paramBean.setShopIDList(ms.getShopID().toString());
            }
		
            //対象となる店舗が存在しない場合
            if (paramBean.getShopIDList().equals("")) {
                MessageDialog.showMessageDialog(this,
                                MessageUtil.getMessage(4001),
                                this.getTitle(),
                                JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (paymentType1.isSelected()) {
                paramBean.setPaymentClassID(2);
            } else if (paymentType2.isSelected()) {
                paramBean.setPaymentClassID(3);
            } else {
                paramBean.setPaymentClassID(4);
            }
		
            ConnectionWrapper con = SystemInfo.getConnection();

            try {
                ResultSetWrapper rs1 = con.executeQuery(getCardSalesHeaderQuery(paramBean));
                ResultSetWrapper rs2 = con.executeQuery(getCardSalesDetailQuery(paramBean));

                if (rs1.last()) {

                    JExcelApi jx = new JExcelApi("支払明細表");
                    jx.setTemplateFile("/reports/支払明細表.xls");

                    // ヘッダ
                    jx.setValue(1, 1, getPaymentTypeName() + "支払明細表");
                    jx.setValue(2, 3, String.format("%1$tY/%1$tm/%1$td", cmbTargetPeriodStartDate1.getDate()) + " 〜 " + String.format("%1$tY/%1$tm/%1$td", cmbTargetPeriodEndDate1.getDate()));
                    jx.setValue(2, 4, paramBean.getTargetName());
                    jx.setValue(2, 5, this.orderTypeDate.isSelected() ? "日付順" : "支払方法順");

                    int row = 9;

                    // 追加行数セット
                    jx.insertRow(row, rs1.getRow() - 1);
                    
                    rs1.beforeFirst();
                    while (rs1.next()) {
                        jx.setValue(1, row, rs1.getString("payment_method_name"));
                        jx.setValue(2, row, rs1.getLong("payment_count"));
                        jx.setValue(3, row, rs1.getLong("payment_value"));

                        row++;
                    }
                    
                    jx.removeRow(row);

                    if (rs2.last()) {

                        row += 3;
                        if (this.orderTypeDate.isSelected()) {
                            jx.setValue(1, row, "日付");
                            jx.setValue(2, row, "支払方法");
                        } else {
                            jx.setValue(1, row, "支払方法");
                            jx.setValue(2, row, "日付");
                        }
                        
                        // 明細出力
                        row++;

                        // 追加行数セット
                        int maxRow = rs2.getRow() - 1;
                        jx.insertRow(row, maxRow);
                        for (int i = 1; i <= maxRow; i++) {
                            jx.mergeCells(4, row + i, 5, row + i);
                        }
                        
                        //LVTu start edit 2016/03/18 Bug #49140
                        //set header (技術/商品/コース名) when exists course
                        if(checkShopChange()) {
                            jx.setValue(4, (row - 1), "技術/商品/コース名");
                        }
                        
                        rs2.beforeFirst();
                        while (rs2.next()) {

                            if (this.orderTypeDate.isSelected()) {
                                jx.setValue(1, row, rs2.getString("payment_date"));
                                jx.setValue(2, row, rs2.getString("payment_method_name"));
                            } else {
                                jx.setValue(1, row, rs2.getString("payment_method_name"));
                                jx.setValue(2, row, rs2.getString("payment_date"));
                            }

                            String customerName = rs2.getString("customer_name");
                            if (rs2.getInt("collect_bill") == 1) {
                                customerName += "(回収売掛)";
                            }
                            jx.setValue(3, row, customerName);

                            String productName = rs2.getString("product_name_array").replace("{","").replace("}","").replace("\"","").replace(",","、");
                            int idx = productName.indexOf("、");
                            if (idx != -1) {
                                //productName = productName.substring(0, idx + 1) + "他";
                                if(productName.substring(productName.length() - 1, productName.length()).equals("、")) {
                                    productName = productName.substring(0, productName.length() - 1);
                                }
                            }
                            //LVTu end edit 2016/03/18 Bug #49140

                            jx.setValue(4, row, productName);
                            jx.setValue(6, row, rs2.getLong("payment_value"));

                            row++;
                        }
                        
                        jx.removeRow(row);
                    }

                    jx.openWorkbook();

                } else {

		    MessageDialog.showMessageDialog(this,
				    MessageUtil.getMessage(1112),
				    this.getTitle(),
				    JOptionPane.ERROR_MESSAGE);
                }
                
                rs1.close();
                rs2.close();

            } catch(Exception e) {
                SystemInfo.getLogger().log(Level.SEVERE, e.getLocalizedMessage(), e);
            }

	}

        private String getCardSalesHeaderQuery(ReportParameterBean paramBean) {

            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select");
            sql.append("      c.payment_method_id");
            sql.append("     ,max(c.payment_method_name) as payment_method_name");
            sql.append("     ,count(*) as payment_count");
            sql.append("     ,sum(b.payment_value) as payment_value");
            sql.append(" from");
            sql.append("     data_payment a");
            sql.append("         inner join data_payment_detail b");
            sql.append("                 on a.shop_id = b.shop_id");
            sql.append("                and a.slip_no = b.slip_no");
            sql.append("                and a.payment_no = b.payment_no");
            sql.append("                and a.delete_date is null");
            sql.append("                and b.delete_date is null");
            sql.append("         inner join mst_payment_method c");
            sql.append("                 on b.payment_method_id = c.payment_method_id");
            sql.append("                and c.payment_class_id = " + SQLUtil.convertForSQL(paramBean.getPaymentClassID()));
            sql.append("                and c.delete_date is null");
            sql.append("         inner join data_sales d");
            sql.append("                 on a.shop_id = d.shop_id");
            sql.append("                and a.slip_no = d.slip_no");
            sql.append("                and d.sales_date is not null");
            sql.append("                and d.delete_date is null");
            sql.append(" where");
            sql.append("         a.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("     and a.payment_date between " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodStartDate1.getDate() ) + " and " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate1.getDate() ));
            sql.append(" group by");
            sql.append("     c.payment_method_id");
            sql.append(" order by");
            sql.append("     c.payment_method_id");

            return sql.toString();
        }
        
        //LVTu start add 2016/03/18 Bug #49140
        private String getCardSalesDetailQuery(ReportParameterBean paramBean) {

            StringBuilder sql = new StringBuilder(1000);
            sql.append(" select");
            sql.append("      c.payment_method_id");
            sql.append("     ,c.payment_method_name");
            sql.append("     ,to_char(a.payment_date, 'yyyy/mm/dd') as payment_date");
            sql.append("     ,e.customer_name1 || '　' || e.customer_name2 as customer_name");
            sql.append("     ,a.payment_no as collect_bill");
            sql.append("     ,array(");
            sql.append("         select");
            if(checkShopChange()) {
                sql.append("             coalesce(b.technic_name, c.item_name, d.course_name, '')");
            }else{
                sql.append("             coalesce(b.technic_name, c.item_name, '')");
            }
            sql.append("         from");
            sql.append("             data_sales_detail t");
            sql.append("                 left join mst_technic b");
            sql.append("                        on t.product_id = b.technic_id");
            sql.append("                       and t.product_division = 1");
            sql.append("                 left join mst_item c");
            sql.append("                        on t.product_id = c.item_id");
            sql.append("                       and t.product_division = 2");
            if(checkShopChange()) {
                sql.append("                 LEFT JOIN mst_course d");
                sql.append("                        ON t.product_id = d.course_id");
                sql.append("                       AND t.product_division in ( 5,6,7,8,9)");
            }
            sql.append("         where");
            sql.append("                 t.delete_date is null");
            sql.append("             and t.shop_id = a.shop_id");
            sql.append("             and t.slip_no = a.slip_no");
            sql.append("             and t.product_division not in (3, 4)");
            sql.append("         order by");
            sql.append("             t.slip_detail_no");
            sql.append("      ) as product_name_array");
            sql.append("     ,sum(b.payment_value) as payment_value");
            sql.append(" from");
            sql.append("     data_payment a");
            sql.append("         inner join data_payment_detail b");
            sql.append("                 on a.shop_id = b.shop_id");
            sql.append("                and a.slip_no = b.slip_no");
            sql.append("                and a.payment_no = b.payment_no");
            sql.append("                and a.delete_date is null");
            sql.append("                and b.delete_date is null");
            sql.append("         inner join mst_payment_method c");
            sql.append("                 on b.payment_method_id = c.payment_method_id");
            sql.append("                and c.payment_class_id = " + SQLUtil.convertForSQL(paramBean.getPaymentClassID()));
            sql.append("         inner join data_sales d");
            sql.append("                 on a.shop_id = d.shop_id");
            sql.append("                and a.slip_no = d.slip_no");
            sql.append("                and d.sales_date is not null");
            sql.append("                and d.delete_date is null");
            sql.append("         inner join mst_customer e");
            sql.append("                 on d.customer_id = e.customer_id");
            sql.append(" where");
            sql.append("         a.shop_id in (" + paramBean.getShopIDList() + ")");
            sql.append("     and a.payment_date between " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodStartDate1.getDate() ) + " and " + SQLUtil.convertForSQLDateOnly( cmbTargetPeriodEndDate1.getDate() ));
            sql.append("     group by a.payment_date,");
            sql.append("     c.payment_method_id,");
            sql.append("     a.shop_id,");
            sql.append("     a.slip_no,");
            sql.append("     c.payment_method_name,");
            sql.append("     e.customer_name1,e.customer_name2 ");
            sql.append("     ,a.payment_no");
            sql.append(" order by");
            
            if (this.orderTypeDate.isSelected()) {
                sql.append("      a.payment_date");
                sql.append("     ,c.payment_method_id");
            } else {
                sql.append("      c.payment_method_id");
                sql.append("     ,a.payment_date");
            }

            sql.append("     ,a.shop_id");
            sql.append("     ,a.slip_no");

            return sql.toString();
        }
        //LVTu end edit 2016/03/18 Bug #49140
        
        private void initYearCombo(final JComboBox cmb, int nowYear) {

            cmb.removeAllItems();

            int y = Calendar.getInstance().get(Calendar.YEAR);
            for (int i = 0; i < 5; i++) {
                cmb.addItem(String.valueOf(y - i));
            }

            cmb.setSelectedItem(nowYear);
            cmb.getEditor().getEditorComponent().addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusGained(java.awt.event.FocusEvent evt) {
                    ((JTextField)cmb.getEditor().getEditorComponent()).selectAll();
                }
            });
        }

        // 日付間の日数を求める（開始日も含む）
        private int getDays(Calendar start, Calendar end) {
            long lStart = start.getTime().getTime();
            long lEnd = end.getTime().getTime();
            long result = (lEnd - lStart) / (1000*60*60*24);
            return new Long(result).intValue() + 1;
        }
        
        private void resetSpan(ReportParameterBean paramBean, Calendar calStart, Calendar calEnd) {

            if (paramBean.getCutoffDay() == 31) return;

            Calendar calTo = Calendar.getInstance();
            calTo.setTime(calEnd.getTime());

            if (calTo.getActualMaximum(Calendar.DATE) <= paramBean.getCutoffDay()) {
                calTo.set(Calendar.DAY_OF_MONTH, calTo.getActualMaximum(Calendar.DATE));
            } else {
                calTo.set(Calendar.DAY_OF_MONTH, paramBean.getCutoffDay());
            }

            Calendar calFrom = (Calendar)calTo.clone();
            calFrom.add(Calendar.MONTH, -1);
            calFrom.add(Calendar.DAY_OF_MONTH, 1);

            calStart.setTime(calFrom.getTime());
            calEnd.setTime(calTo.getTime());
        }
        
        //LVTu start add 2016/03/18 Bug #49140
        private boolean checkShopChange() {   

        //グループ
        if(target.getSelectedItem() instanceof MstGroup) {
                
            MstGroup group = new MstGroup();
            group = (MstGroup) target.getSelectedItem();
            if (checkShopCourseFlag(group)) {
                return true;
            }
        }
        //店舗
        else if(target.getSelectedItem() instanceof MstShop) {
             MstShop ms = (MstShop)target.getSelectedItem();
             if(ms.getCourseFlag().equals(1)) {
                 return true;
             }
        }
        
        return false;
    } 
        
    private boolean checkShopCourseFlag(MstGroup mg) {
            //グループ
        if(mg.getShops().size()> 0) {
            for (MstShop mshop : mg.getShops()) {
                if ( mshop.getCourseFlag().equals(1)) {
                    return true;
                }
            }
        } else if ( mg.getGroups().size() > 0) {
            for ( int i = 0;i < mg.getGroups().size() ;i ++) {
                return checkShopCourseFlag(mg.getGroups().get(i));
            }
        }
        return false;
    }
    //LVTu end add 2016/03/18 Bug #49140
        
        
        
            private class RegisterFocusTraversalPolicy
            extends FocusTraversalPolicy {

        /**
         *
         * @param focusCycleRoot
         * @param aComponent
         * @return
         */
        public Component getComponentAfter(Container focusCycleRoot,
                Component aComponent) {
            if( aComponent.equals(target)){
                return cmbTargetPeriodStartDate;
            }
            else if (aComponent.equals(cmbTargetPeriodStartDate)) {
                return cmbTargetPeriodEndDate;
            } else if (aComponent.equals(cmbTargetPeriodEndDate)) {
                if (cashTypeAll.isSelected()) {
                    return cashTypeAll;
                } else if (cashTypeIn.isSelected()){
                    return cashTypeIn;
                } else {
                    return cashTypeOut;
                }   
            } else if (aComponent.equals(cashTypeAll)) {
                   return staff;
            } else if (aComponent.equals(cashTypeIn)) {
                   return staff;
            } else if (aComponent.equals(cashTypeOut)) {
                   return staff;
            } else if (aComponent.equals(staff)) {
                return cmbDayWayYear;
            } else if (aComponent.equals(cmbDayWayYear.getComponent(2))) {
                return cmbDayWayMonth;
            } else if (aComponent.equals(cmbDayWayMonth)) {
               if (rdoTaxUnit.isSelected()) {
                    return rdoTaxUnit;
                } else {
                    return rdoTaxBlank;
                }
            } else if (aComponent.equals(rdoTaxUnit)) {
                return cmbTargetPeriodStartDate1;
            } else if (aComponent.equals(rdoTaxBlank)) {
                return cmbTargetPeriodStartDate1;
            } else if (aComponent.equals(cmbTargetPeriodStartDate1)) {
                return cmbTargetPeriodEndDate1;
            } else if (aComponent.equals(cmbTargetPeriodEndDate1)) {
               if (paymentType1.isSelected()) {
                    return paymentType1;
                } else if (paymentType2.isSelected()){
                    return paymentType2;
                } else {
                    return paymentType3;
                }
            } else if (aComponent.equals(paymentType1)) {
               if (orderTypeDate.isSelected()) {
                    return orderTypeDate;
                } else {
                    return orderTypeCard;
                }
            } else if (aComponent.equals(paymentType2)){
                if (orderTypeDate.isSelected()) {
                        return orderTypeDate;
                    } else {
                        return orderTypeCard;
                    }
            } else if (aComponent.equals(paymentType3)) {
                 if (orderTypeDate.isSelected()) {
                        return orderTypeDate;
                    } else {
                        return orderTypeCard;
                    }
            }
             return this.getDefaultComponent();
        }

        /**
         *
         * @param focusCycleRoot
         * @param aComponent
         * @return
         */
        public Component getComponentBefore(Container focusCycleRoot,
                Component aComponent) {
            if (aComponent.equals(cmbTargetPeriodStartDate)) {
                return cmbTargetPeriodStartDate;
            } else if (aComponent.equals(cmbTargetPeriodEndDate)) {
                return cmbTargetPeriodStartDate;
            } else if (aComponent.equals(cashTypeAll)) {
                return cmbTargetPeriodEndDate;
             } else if (aComponent.equals(cashTypeIn)) {
                return cmbTargetPeriodEndDate;
              } else if (aComponent.equals(cashTypeOut)) {
                return cmbTargetPeriodEndDate;
            } else if (aComponent.equals(staff)) {
                 if (cashTypeAll.isSelected()) {
                    return cashTypeAll;
                } else if (cashTypeIn.isSelected()){
                    return cashTypeIn;
                } else {
                    return cashTypeOut;
                }
            } else if (aComponent.equals(cmbDayWayYear)) {
                return staff;
            } else if (aComponent.equals(cmbDayWayMonth)) {
                return cmbDayWayYear;
            } else if (aComponent.equals(rdoTaxUnit)) {
                return cmbDayWayMonth;
             } else if (aComponent.equals(rdoTaxBlank)) {
                return cmbDayWayMonth;
            } else if (aComponent.equals(cmbTargetPeriodStartDate1)) {
               if (rdoTaxUnit.isSelected()) {
                    return rdoTaxUnit;
                } else {
                    return rdoTaxBlank;
                }
            } else if (aComponent.equals(cmbTargetPeriodEndDate1)) {
                return cmbTargetPeriodStartDate1;
            } else if (aComponent.equals(paymentType1)) {
                return cmbTargetPeriodEndDate1;
            } else if (aComponent.equals(paymentType2)) {
                return cmbTargetPeriodEndDate1;
            } else if (aComponent.equals(paymentType3)) {
                return cmbTargetPeriodEndDate1;
            } else if (aComponent.equals(orderTypeDate)) {
                if (paymentType1.isSelected()) {
                    return paymentType1;
                } else if (paymentType2.isSelected()){
                    return paymentType2;
                } else {
                    return paymentType3;
                }
             } else if (aComponent.equals(orderTypeCard)) {
                if (paymentType1.isSelected()) {
                    return paymentType1;
                } else if (paymentType2.isSelected()){
                    return paymentType2;
                } else {
                    return paymentType3;
                }
            }
            return cmbTargetPeriodStartDate;
        }

        /**
         *
         * @param focusCycleRoot
         * @return
         */
        public Component getDefaultComponent(Container focusCycleRoot) {
            return this.getDefaultComponent();
        }
        private Component getDefaultComponent() {
            if(target.getItemCount() ==1)
            {
                return cmbTargetPeriodStartDate;
            }
            return target;
        }

        /**
         *
         * @param focusCycleRoot
         * @return
         */
        public Component getLastComponent(Container focusCycleRoot) {
            return staff;
        }

        /**
         *
         * @param focusCycleRoot
         * @return
         */
        public Component getFirstComponent(Container focusCycleRoot) {
            return this.getDefaultComponent();
        }
        
      
    }
}
